{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/cactus/source/css/rtl.styl","path":"css/rtl.styl","modified":1,"renderable":1},{"_id":"themes/cactus/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/cactus/source/images/apple-touch-icon.png","path":"images/apple-touch-icon.png","modified":1,"renderable":1},{"_id":"themes/cactus/source/images/favicon-192x192.png","path":"images/favicon-192x192.png","modified":1,"renderable":1},{"_id":"themes/cactus/source/images/favicon.ico","path":"images/favicon.ico","modified":1,"renderable":1},{"_id":"themes/cactus/source/images/logo.png","path":"images/logo.png","modified":1,"renderable":1},{"_id":"themes/cactus/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/cactus/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/clipboard/clipboard.min.js","path":"lib/clipboard/clipboard.min.js","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/jquery/jquery.min.js","path":"lib/jquery/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Bold.ttf","path":"lib/meslo-LG/MesloLGL-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGL-BoldItalic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Italic.ttf","path":"lib/meslo-LG/MesloLGL-Italic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Regular.ttf","path":"lib/meslo-LG/MesloLGL-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Bold.ttf","path":"lib/meslo-LG/MesloLGM-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGM-BoldItalic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Italic.ttf","path":"lib/meslo-LG/MesloLGM-Italic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Regular.ttf","path":"lib/meslo-LG/MesloLGM-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Bold.ttf","path":"lib/meslo-LG/MesloLGS-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGS-BoldItalic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Italic.ttf","path":"lib/meslo-LG/MesloLGS-Italic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Regular.ttf","path":"lib/meslo-LG/MesloLGS-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.eot","path":"lib/vazir-font/Vazir-Black.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.ttf","path":"lib/vazir-font/Vazir-Black.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff","path":"lib/vazir-font/Vazir-Black.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff2","path":"lib/vazir-font/Vazir-Black.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.eot","path":"lib/vazir-font/Vazir-Bold.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.ttf","path":"lib/vazir-font/Vazir-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff","path":"lib/vazir-font/Vazir-Bold.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff2","path":"lib/vazir-font/Vazir-Bold.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.eot","path":"lib/vazir-font/Vazir-Light.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.ttf","path":"lib/vazir-font/Vazir-Light.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff","path":"lib/vazir-font/Vazir-Light.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff2","path":"lib/vazir-font/Vazir-Light.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.eot","path":"lib/vazir-font/Vazir-Medium.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.ttf","path":"lib/vazir-font/Vazir-Medium.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff","path":"lib/vazir-font/Vazir-Medium.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff2","path":"lib/vazir-font/Vazir-Medium.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.eot","path":"lib/vazir-font/Vazir-Regular.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.ttf","path":"lib/vazir-font/Vazir-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.woff2","path":"lib/vazir-font/Vazir-Regular.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.woff","path":"lib/vazir-font/Vazir-Regular.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.eot","path":"lib/vazir-font/Vazir-Thin.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.ttf","path":"lib/vazir-font/Vazir-Thin.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff","path":"lib/vazir-font/Vazir-Thin.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff2","path":"lib/vazir-font/Vazir-Thin.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.eot","path":"lib/vazir-font/Vazir-Variable.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.ttf","path":"lib/vazir-font/Vazir-Variable.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.woff","path":"lib/vazir-font/Vazir-Variable.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.woff2","path":"lib/vazir-font/Vazir-Variable.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/font-face.css","path":"lib/vazir-font/font-face.css","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","path":"lib/font-awesome/webfonts/fa-brands-400.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","path":"lib/font-awesome/webfonts/fa-regular-400.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","path":"lib/font-awesome/webfonts/fa-solid-900.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-v4compatibility.ttf","path":"lib/font-awesome/webfonts/fa-v4compatibility.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-v4compatibility.woff2","path":"lib/font-awesome/webfonts/fa-v4compatibility.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","path":"lib/justified-gallery/css/justifiedGallery.min.css","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","path":"lib/justified-gallery/js/jquery.justifiedGallery.min.js","modified":1,"renderable":1},{"_id":"source/assets/cactus.png","path":"assets/cactus.png","modified":1,"renderable":0},{"_id":"source/about/images/qrcode.bmp","path":"about/images/qrcode.bmp","modified":1,"renderable":0},{"_id":"source/assets/Demo/wallpaper-2311325.jpg","path":"assets/Demo/wallpaper-2311325.jpg","modified":1,"renderable":0},{"_id":"source/assets/Demo/wallpaper-2572384.jpg","path":"assets/Demo/wallpaper-2572384.jpg","modified":1,"renderable":0},{"_id":"source/assets/Demo/wallpaper-878514.jpg","path":"assets/Demo/wallpaper-878514.jpg","modified":1,"renderable":0},{"_id":"source/assets/SwiftUI/000.png","path":"assets/SwiftUI/000.png","modified":1,"renderable":0},{"_id":"source/assets/SwiftUI/001.png","path":"assets/SwiftUI/001.png","modified":1,"renderable":0},{"_id":"source/assets/SwiftUI/002.png","path":"assets/SwiftUI/002.png","modified":1,"renderable":0},{"_id":"source/assets/SwiftUI/003.png","path":"assets/SwiftUI/003.png","modified":1,"renderable":0},{"_id":"source/assets/Swift/Concurrency/catch_warning.png","path":"assets/Swift/Concurrency/catch_warning.png","modified":1,"renderable":0},{"_id":"source/assets/Swift/Tips/image00.jpg","path":"assets/Swift/Tips/image00.jpg","modified":1,"renderable":0},{"_id":"source/assets/iOS/Memory&Performance&Stability/001.png","path":"assets/iOS/Memory&Performance&Stability/001.png","modified":1,"renderable":0},{"_id":"source/assets/iOS/Memory&Performance&Stability/002.jpeg","path":"assets/iOS/Memory&Performance&Stability/002.jpeg","modified":1,"renderable":0},{"_id":"source/assets/iOS/Others/001.png","path":"assets/iOS/Others/001.png","modified":1,"renderable":0},{"_id":"source/assets/iOS/Others/002.png","path":"assets/iOS/Others/002.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"34e4d42befe0f95ca7e4ff2d7eae4ea8e37e7c6d","modified":1693030754809},{"_id":"source/_drafts/draft1.md","hash":"66654f23017ce4ddc0b6f608c4951a024e8b320e","modified":1692081783313},{"_id":"source/about/.DS_Store","hash":"77adaae9ad1d5df0f44fb5fc7926f913acc3a2bc","modified":1692110732787},{"_id":"source/about/index.md","hash":"ad9e1ca33aac17f384cec1a5099ace083f0fcd26","modified":1693314357019},{"_id":"source/_posts/.DS_Store","hash":"1e97d42875eef0e0a29d56327ec3b54fece465cb","modified":1693683070529},{"_id":"source/assets/.DS_Store","hash":"b2a2313f52e8f057f37bffa75add911e842757a9","modified":1693744119782},{"_id":"source/categories/index.md","hash":"37a6458fc4e0e44f3ceddb32b326f15081806d88","modified":1692043991587},{"_id":"source/search/index.md","hash":"2b8a605872a558552e6c9e4dcc47d0b38b5773fa","modified":1692043978970},{"_id":"source/tags/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1692044659745},{"_id":"source/tags/index.md","hash":"771d3c462625b9b564baa21b16b7b2aa44c2c9ec","modified":1692044693854},{"_id":"source/_posts/Others/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1694010534814},{"_id":"source/about/images/qrcode.bmp","hash":"a4dcee22ec1e54d4441d602e4a1baaa826ad4705","modified":1692083753427},{"_id":"source/_posts/Others/00. Article publishing failure problem summary.md","hash":"899d805bdac134d641dfd49092deef1c1a7ed9f0","modified":1693744226706},{"_id":"source/_posts/Swift/.DS_Store","hash":"c2d3df71b40c6abc9f3987763a93385e8fd49963","modified":1693683070530},{"_id":"source/_posts/SwiftUI/00. SwiftUI vs UIKit.md","hash":"82a14f5aee37bb0b4d85a89d9fc4141045018c84","modified":1694003600869},{"_id":"source/_posts/SwiftUI/01. Basic Concepts (1).md","hash":"37c2f83cbcb8f31d41287563a73659c458ce2875","modified":1694003520339},{"_id":"source/_posts/SwiftUI/02. Basic Concepts (2).md","hash":"120472e81c624eecfed4d5377dc2dfefe9e94dee","modified":1694003617222},{"_id":"source/_posts/SwiftUI/03. Basic Concepts (3).md","hash":"61928dc471d49ada50efdacee45d38ac7ae60d8e","modified":1694003537799},{"_id":"source/assets/Swift/.DS_Store","hash":"594a52b6f50bfdecf8fcd87de8292a623515eae2","modified":1692350915364},{"_id":"source/assets/SwiftUI/001.png","hash":"e18badd408db3b2b7d7c16978f4595b179b9613a","modified":1693744722122},{"_id":"source/assets/iOS/.DS_Store","hash":"f9f621e9cdf837a59aa64178d096381581a3add2","modified":1692129152764},{"_id":"source/_posts/Swift/00. Tips/00. Generation of random numbers.md","hash":"8a824bcd42cc52a7ab41451b48e8e207ff4595c7","modified":1692117559766},{"_id":"source/_posts/Swift/00. Tips/01. Handling of errors and exceptions.md","hash":"dd64ce63193906e229b819c5a0fd147715f94b44","modified":1692120389396},{"_id":"source/_posts/Swift/00. Tips/02. Lazy loading and Anonymous function.md","hash":"33614bfde55faa66cff071a6d139f4e002614904","modified":1692117608374},{"_id":"source/_posts/Swift/00. Tips/03. NSString and String.md","hash":"10536d877a2112270a0d9627c9f51888b8759ae7","modified":1692120261275},{"_id":"source/_posts/Swift/00. Tips/05. Computed properties and Stored properties.md","hash":"27f4ed968bf3929baf1818d6548d42f33b2aeeca","modified":1692120282880},{"_id":"source/_posts/Swift/00. Tips/04. Set Read-only permission of the property.md","hash":"6765dd0e47fe214daad013b73c8aab24348ae0f0","modified":1692117619829},{"_id":"source/_posts/Swift/00. Tips/06. How to Define a singleton?.md","hash":"2c891ea4b2db99ab3ac5d3ad0da7f1304065823f","modified":1692117576224},{"_id":"source/_posts/iOS/.DS_Store","hash":"a8d5e75896d3a8449a07ac4b593003e934e61e80","modified":1694014015096},{"_id":"source/_posts/Swift/00. Tips/07. How to print the memory address of a variable?.md","hash":"62dccffaea0c93964ff3aa01249f633e2401a02a","modified":1692117580875},{"_id":"source/_posts/Swift/00. Tips/09. How to use rethrows in Swift?.md","hash":"32b7467ad94dfbba8bca023c4e6dfc7199375a82","modified":1692468471776},{"_id":"source/_posts/Swift/00. Tips/08. Implicitly Unwrapped Optionals and Force unwrapping.md","hash":"428146c907549f9bc3326d9911666ff4d69c2634","modified":1692120311647},{"_id":"source/_posts/Swift/01. Closures/.DS_Store","hash":"038721af54d7f958a44270824333e6739d4d38ef","modified":1692110054641},{"_id":"source/_posts/Swift/01. Closures/00. Three Forms of Closures.md","hash":"42a98cc665070282b75681389228642815bd7a38","modified":1692355721533},{"_id":"source/_posts/Swift/01. Closures/01. Capturing Values.md","hash":"4c4712e9677ce945e5ae8eda59c438d48bffbd83","modified":1692355724135},{"_id":"source/_posts/Swift/02. Structs/00. Structures and Classes.md","hash":"d8b457f7f9639d89db867768528b9d1c4055f182","modified":1692355693759},{"_id":"source/_posts/Swift/02. Structs/01. Cases of Structures.md","hash":"a6575c66af6144b51825351e2c6f1b65c27e085d","modified":1692355696231},{"_id":"source/_posts/Swift/02. Structs/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1692116270376},{"_id":"source/_posts/Swift/02. Structs/02. Performance Comparison Between Structure and Class.md","hash":"f60cea09b1cee66477503ffdeec463a6e772aa95","modified":1692355698914},{"_id":"source/_posts/Swift/02. Structs/03. A Case of Initialization Constructor.md","hash":"8bcf329b78c1dfed1379138439c24ebf88eaf556","modified":1692355704850},{"_id":"source/_posts/Swift/02. Structs/04. Why should we avoid using closures in structs?.md","hash":"334d2c435b59429ffd6f9a948c08eed7d749b32c","modified":1692355709105},{"_id":"source/_posts/Swift/03. Enumerations/.DS_Store","hash":"0d2a793a51fbf332a17f3994279115912c0f785b","modified":1692117080315},{"_id":"source/_posts/Swift/03. Enumerations/00. Summary of Enumerations.md","hash":"c4a7766ec871678a5e8079b4326a1cff05299eee","modified":1692355673779},{"_id":"source/_posts/Swift/03. Enumerations/01. Nested Enumeration.md","hash":"b90b6cfb58effcc69e4546aa5b824dbbd5acd812","modified":1692355676488},{"_id":"source/_posts/Swift/03. Enumerations/03. Recursive Enumeration.md","hash":"a9b1d5e55efdb8c5ecc0fd16cbfe5e9cdda6f831","modified":1692355681705},{"_id":"source/_posts/Swift/03. Enumerations/02. Include Enumeration.md","hash":"95b850748ff684ec6660ab28f4cbbe5f3d03134a","modified":1692355678804},{"_id":"source/_posts/Swift/05. Collections/00. Zip Function.md","hash":"a225272c91d7268d6152870b00d4b059aff0bb66","modified":1692355623388},{"_id":"source/_posts/Swift/04. Protocols/.DS_Store","hash":"1a310ba3385eeeb690f0d5c7e2a00f00edd24008","modified":1692117344488},{"_id":"source/_posts/Swift/04. Protocols/00. Summary of Protocols.md","hash":"27d015af18b5a387186aa6687e9b2a4aad78f6df","modified":1692355652727},{"_id":"source/_posts/Swift/04. Protocols/01. Associatedtype.md","hash":"ae5f4523c342cbcacbdd012b99dd429d05a61f42","modified":1692355659588},{"_id":"source/_posts/Swift/06. Hybrid Programming/00. Call the Macro definition of Objective-C in Swift.md","hash":"e88a88cce4f0f561eec60b29308b0f7a200fd8c4","modified":1692355608574},{"_id":"source/_posts/Swift/07. Concurrency/.DS_Store","hash":"0d602378ca206f861e75a69376b3d0014c0b9ef2","modified":1693487331271},{"_id":"source/_posts/Swift/07. Concurrency/00. How to use do, catch, try, throws in Swift.md","hash":"9b5b02779dbf8ad5f2c7c08e269d929708f55b1c","modified":1692355599649},{"_id":"source/_posts/Swift/07. Concurrency/01. Async and Await.md","hash":"c26e6095a53c08a46fea3e79cf315c102004b38c","modified":1692815627071},{"_id":"source/_posts/iOS/00. Tips/.DS_Store","hash":"3f1a044829408a46f1b7ca31be07137430893a7d","modified":1692355493389},{"_id":"source/_posts/iOS/00. Tips/00. Difference Of nil in OC and nil in Swift.md","hash":"ac298ab6d3a721726de06c684f547d19cffc2572","modified":1693682961341},{"_id":"source/_posts/iOS/02. Architecture & Design/.DS_Store","hash":"373f03b75a4c84caa057033232b690fc958786a7","modified":1693682991027},{"_id":"source/_posts/iOS/01. Memory & Performance & Stability/.DS_Store","hash":"938dc2d8ac5b96f9f780d4dfdd09ac686839c2c3","modified":1693682978152},{"_id":"source/_posts/iOS/01. Memory & Performance & Stability/00. Summary of Memory Leak.md","hash":"cc732d12a4135e6c8df4f69ad143c35f25ada1ae","modified":1692120822218},{"_id":"source/_posts/iOS/01. Memory & Performance & Stability/01. Common Crash Scenarios.md","hash":"d784d8c3e867ff85ff385949b3e6b63deb0d9e15","modified":1692120932834},{"_id":"source/_posts/iOS/04. Tools & Configurations/.DS_Store","hash":"526dc4b4c90cb373704980b81aa599e2e0e96c74","modified":1693683065457},{"_id":"source/_posts/iOS/03. Graphics & images/.DS_Store","hash":"526dc4b4c90cb373704980b81aa599e2e0e96c74","modified":1693683065455},{"_id":"source/_posts/iOS/05. Projects & Issues/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1693487331274},{"_id":"source/_posts/iOS/05. Projects & Issues/00.  An investigation of Lost location Issue.md","hash":"09b1e158c5459ab4d6179f993b069286f4dfbb80","modified":1693514644773},{"_id":"source/_posts/iOS/05. Projects & Issues/01. How to use iOS Geofencing in your business.md","hash":"9fb85f083eaa00c227c0c8081cf71eb6f6d1931d","modified":1693650062958},{"_id":"source/_posts/iOS/05. Projects & Issues/02. Design of a Document Similarity Comparison Tool.md","hash":"de5b3847d4183f04bca23161b6ff6d413fc03e59","modified":1692818577927},{"_id":"source/_posts/iOS/05. Projects & Issues/03. A modular page-building solution based on UIView..md","hash":"de5b3847d4183f04bca23161b6ff6d413fc03e59","modified":1692818577927},{"_id":"source/_posts/iOS/05. Projects & Issues/05. How to support multi-source configuration in a componentized Pod.md","hash":"de5b3847d4183f04bca23161b6ff6d413fc03e59","modified":1692818577927},{"_id":"source/_posts/iOS/05. Projects & Issues/04. A page-building solution based on State machines..md","hash":"de5b3847d4183f04bca23161b6ff6d413fc03e59","modified":1692818577927},{"_id":"source/_posts/iOS/05. Projects & Issues/06. An encapsulation of data transmission based on RAC.md","hash":"de5b3847d4183f04bca23161b6ff6d413fc03e59","modified":1692818577927},{"_id":"source/_posts/iOS/06. Others/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1694010535751},{"_id":"source/_posts/iOS/06. Others/00. Waterfall development vs Agile development.md","hash":"c24e3e4d447beecc4b18ce02f8c662aa18f9228a","modified":1694012961707},{"_id":"source/assets/Swift/Concurrency/catch_warning.png","hash":"621728b2255253fc1fb86d5a5df086fe70d8ef82","modified":1692349729253},{"_id":"source/assets/Swift/Tips/image00.jpg","hash":"5f98da7ebb53b3a5c9f6f46cef3ad4ac1fab604c","modified":1677588464882},{"_id":"source/assets/iOS/Memory&Performance&Stability/.DS_Store","hash":"decc55950a6bfd49531dd6747ebdd3f6b9d0737c","modified":1692118154896},{"_id":"source/assets/iOS/Others/.DS_Store","hash":"decc55950a6bfd49531dd6747ebdd3f6b9d0737c","modified":1692129173073},{"_id":"source/assets/iOS/Others/002.png","hash":"72a12b81eae831bedf7a5ead7382133f136b2b66","modified":1677644784493},{"_id":"source/assets/iOS/Others/001.png","hash":"1e9a719557b378e404d030b51c5dc2eab041b1ac","modified":1677644763291},{"_id":"source/_posts/iOS/00. Tips/images/.DS_Store","hash":"decc55950a6bfd49531dd6747ebdd3f6b9d0737c","modified":1677645701805},{"_id":"source/_posts/iOS/00. Tips/images/001.png","hash":"1e9a719557b378e404d030b51c5dc2eab041b1ac","modified":1677644763291},{"_id":"source/_posts/iOS/00. Tips/images/002.png","hash":"72a12b81eae831bedf7a5ead7382133f136b2b66","modified":1677644784493},{"_id":"source/assets/cactus.png","hash":"4633bf3d6601dfa2dc86ac8341df85e440dff128","modified":1692108039130},{"_id":"source/assets/SwiftUI/000.png","hash":"56b25c93bc84e5c89c719767800177f73c236ffd","modified":1693744095722},{"_id":"source/assets/SwiftUI/002.png","hash":"fa4630723e342f7f9279f0ccf268e1057320f201","modified":1693744730083},{"_id":"source/assets/SwiftUI/003.png","hash":"6872d4ec09a72b5270ac59737f1023c3280d7134","modified":1693744737020},{"_id":"source/assets/iOS/Memory&Performance&Stability/001.png","hash":"0f495a3cf267209ee14f332e7b10aa9837d6b860","modified":1677658574077},{"_id":"source/_posts/iOS/00. Tips/images/003.png","hash":"0f495a3cf267209ee14f332e7b10aa9837d6b860","modified":1677658574077},{"_id":"themes/cactus/.DS_Store","hash":"7e7c40954bb2ff8598f0b1dc91e244f536042a79","modified":1692040877155},{"_id":"themes/cactus/.gitignore","hash":"72267ee409a324fc197c150b3c4bf28b87b709a8","modified":1685777179000},{"_id":"themes/cactus/.jshintrc","hash":"2548bd6ce44422edc7e6f9f68061ab47f26c4f57","modified":1685777179000},{"_id":"themes/cactus/.stylintrc","hash":"eb5f48e83657928cb0cbee031373b2cd36ca0083","modified":1685777179000},{"_id":"themes/cactus/LICENSE","hash":"346ece39a983b0e7858c11f785cd846cef9eb875","modified":1685777179000},{"_id":"themes/cactus/README.md","hash":"52fafba48b0c792478e134a659bc8f0f61b4557b","modified":1685777179000},{"_id":"themes/cactus/_config.yml","hash":"f463e1d9f08f875743e2b9fe3134801f47cb56da","modified":1693030716218},{"_id":"themes/cactus/gulpfile.js","hash":"70d419549ba72e0906fd2fc8103701142eb883a7","modified":1685777179000},{"_id":"themes/cactus/package.json","hash":"dbb0a486006e7d4ecdb4b005b6a9b264b5d542dc","modified":1685777179000},{"_id":"themes/cactus/languages/ar.yml","hash":"81a88b0593fc89de3118d686681b1f69883c847b","modified":1685777179000},{"_id":"themes/cactus/languages/ca.yml","hash":"b79dd2c21dc6697c635e92db1f661a4b8d5d2305","modified":1685777179000},{"_id":"themes/cactus/languages/de.yml","hash":"43b2f4e078b042aaae0377a4235216a51ed82e0d","modified":1685777179000},{"_id":"themes/cactus/languages/default.yml","hash":"6a84970bf69c3e9490e5382747ca2b4c4b4dccde","modified":1685777179000},{"_id":"themes/cactus/languages/es.yml","hash":"2b1fc8b0d636123e9ee39017fa20053bd1913a5a","modified":1685777179000},{"_id":"themes/cactus/languages/en.yml","hash":"6a84970bf69c3e9490e5382747ca2b4c4b4dccde","modified":1685777179000},{"_id":"themes/cactus/languages/fa.yml","hash":"63f32e50953af1c4bd0308a4fca5862b5287c2cb","modified":1685777179000},{"_id":"themes/cactus/languages/fr.yml","hash":"5c07406998f19d219a5a7b65c0d88b6b023f85b2","modified":1685777179000},{"_id":"themes/cactus/languages/nl.yml","hash":"ac0573352ad2c737a7686bcca498b985e7bd6447","modified":1685777179000},{"_id":"themes/cactus/languages/it.yml","hash":"62800bcae1f2d2454f87f4bcf4d7593848424f61","modified":1685777179000},{"_id":"themes/cactus/languages/kr.yml","hash":"651fb83991c91b13b53ed55740e5402cf0f1c5e8","modified":1685777179000},{"_id":"themes/cactus/languages/pl.yml","hash":"8a2d6dc874d86c38d42c2c861c39590647b5d536","modified":1685777179000},{"_id":"themes/cactus/languages/pt-br.yml","hash":"4859aba788a050c2d5d0b997693b0c8c24b349f7","modified":1685777179000},{"_id":"themes/cactus/languages/ru.yml","hash":"81b57fcd1977ef534f4bf303dbc1b4710cc7f057","modified":1685777179000},{"_id":"themes/cactus/languages/zh-TW.yml","hash":"2f4e050c9b35a67f4a7278cec3a949533c2ac16a","modified":1685777179000},{"_id":"themes/cactus/languages/tr.yml","hash":"2702914007e6bade9d6861078c0e179ac05bf48c","modified":1685777179000},{"_id":"themes/cactus/languages/vi.yml","hash":"f84893c3ec3e45875c90069e14b17ed3016ed973","modified":1685777179000},{"_id":"themes/cactus/languages/zh-CN.yml","hash":"d016060817311addb4c528de440126b975038c31","modified":1685777179000},{"_id":"themes/cactus/layout/404.ejs","hash":"b911da998c160cceb8cd7c4dae709a1374ed2491","modified":1685777179000},{"_id":"themes/cactus/layout/archive.ejs","hash":"8e9bb1199694b229d2a3de1c3a55188a28e6f5e7","modified":1685777179000},{"_id":"themes/cactus/layout/index.ejs","hash":"fb73e020655ec4696eb7f91a350bf3b9c0fa2755","modified":1685777179000},{"_id":"themes/cactus/layout/layout.ejs","hash":"e03062a5a70d71dff9f09dd86769d1a13b33afd9","modified":1685777179000},{"_id":"themes/cactus/layout/page.ejs","hash":"c5465d5315a7544aa466b01fd8cfb62917a8bb1d","modified":1685777179000},{"_id":"themes/cactus/layout/post.ejs","hash":"f8eac342118298447ef38c21f9560a359e488395","modified":1685777179000},{"_id":"themes/cactus/scripts/cdn.js","hash":"887edec364d51efa7c524446483188c6ad05adaf","modified":1685777179000},{"_id":"themes/cactus/scripts/error_404.js","hash":"f83b290e47cb78a2754152fccc34e571a72087bd","modified":1685777179000},{"_id":"themes/cactus/scripts/merge-configs.js","hash":"2048c3415d96b17b9d84aa44bc0c25f1210525f8","modified":1685777179000},{"_id":"themes/cactus/scripts/meta.js","hash":"654868666b6573b2cee7e750b47ad8a3c2ee13a0","modified":1685777179000},{"_id":"themes/cactus/scripts/page_title.js","hash":"fa662dbdb82779af1b95e35ed7ccdf4866a53dee","modified":1685777179000},{"_id":"themes/cactus/scripts/thumbnail.js","hash":"df8829fd8c3119650037eba5ec11bdce06acff9d","modified":1685777179000},{"_id":"themes/cactus/source/.DS_Store","hash":"ddfe4e10016aa47aa8034684d4fb1d9a30014d84","modified":1692907366594},{"_id":"themes/cactus/layout/_partial/comments.ejs","hash":"4e75035a427fd137ae7f12940209e8e97845df3b","modified":1685777179000},{"_id":"themes/cactus/layout/_partial/footer.ejs","hash":"12fd63b51472c9c5b8b7d167eb1a96bf1d686c20","modified":1685777179000},{"_id":"themes/cactus/layout/_partial/google_analytics.ejs","hash":"64aeee0fdfc06207573ddbf8b91f6d3f007ccea9","modified":1685777179000},{"_id":"themes/cactus/layout/_partial/head.ejs","hash":"4709e17487315e8f0a5b38f0611f0244f16fdd87","modified":1685777179000},{"_id":"themes/cactus/layout/_partial/header.ejs","hash":"21d60f0bb82367cc2bee0c7eb3c06c7f5ab56a6d","modified":1685777179000},{"_id":"themes/cactus/layout/_partial/pagination.ejs","hash":"247bf8ec39965fe07b52f5a3d04e02e0aaf2da57","modified":1685777179000},{"_id":"themes/cactus/layout/_partial/scripts.ejs","hash":"9bbc0cf2dd0d7cdaafe827c3945a9bea1503da83","modified":1685777179000},{"_id":"themes/cactus/layout/_partial/search.ejs","hash":"8b4bf9cf5db0ce762a31fc3baae0f2fc004bece4","modified":1685777179000},{"_id":"themes/cactus/layout/_partial/styles.ejs","hash":"c6bc7e8a422c5bb57f88fed1d1b0694d03e24e74","modified":1685777179000},{"_id":"themes/cactus/layout/_partial/umami_analytics.ejs","hash":"3e79be7343c4d0a5971d3aa659e3750672a91e72","modified":1685777179000},{"_id":"themes/cactus/source/_data/projects.json","hash":"ffca6b630d7d49eee4f5a95c6a4a2bec301381d4","modified":1692907494405},{"_id":"themes/cactus/source/css/.DS_Store","hash":"1148eeb79c2c7a779586e545a1be9a338e46ca1a","modified":1692040343035},{"_id":"themes/cactus/source/css/_extend.styl","hash":"b6a4e5905a7515dda66919167531a5ab2b3d1fe2","modified":1685777179000},{"_id":"themes/cactus/source/css/_fonts.styl","hash":"354809b5a64e8a47a66c66fd1a28ac597c1460a6","modified":1692818160295},{"_id":"themes/cactus/source/css/_mixins.styl","hash":"1a9e309523df9685e8d088dcff0a809c58e2c392","modified":1685777179000},{"_id":"themes/cactus/source/css/_util.styl","hash":"2bfeb2e2605dd5235693b00c71a212646d2e0410","modified":1685777179000},{"_id":"themes/cactus/source/css/_variables.styl","hash":"bea4e21c46b723eb984f22d456230cac8cf2d6e3","modified":1692818233051},{"_id":"themes/cactus/source/css/rtl.styl","hash":"ff8700e1626feeb53d905a2df2777bda7d1eca50","modified":1685777179000},{"_id":"themes/cactus/source/css/style.styl","hash":"1af0d60459f4d5e26fae655bea917579bd1bfbec","modified":1692817938425},{"_id":"themes/cactus/source/images/apple-touch-icon.png","hash":"57e2def34682655f41a0be2d083f16765ba7858b","modified":1685777179000},{"_id":"themes/cactus/source/images/favicon-192x192.png","hash":"96e6fcbbb13a5914a6131391e210eb7dfd13d692","modified":1685777179000},{"_id":"themes/cactus/source/images/favicon.ico","hash":"189f9842bcb79a6f8f9e8445bc8bbd773443826b","modified":1685777179000},{"_id":"themes/cactus/source/js/main.js","hash":"9eb41deaf7d743b60a30ca1b1ffe050128ce9d2c","modified":1692798855378},{"_id":"themes/cactus/source/js/search.js","hash":"914a2ce72fb325106c61600200be823b72bfb39f","modified":1685777179000},{"_id":"themes/cactus/source/lib/.DS_Store","hash":"28f0378331a0a08009bd483874b79042a3462f26","modified":1692040343056},{"_id":"themes/cactus/layout/_partial/post/actions_desktop.ejs","hash":"54a590e39e2d6e9ee41b8a1423a7bc67ab03363d","modified":1685777179000},{"_id":"themes/cactus/layout/_partial/post/category.ejs","hash":"aeb99694d8492d4fcda320493b259fb68bf21830","modified":1685777179000},{"_id":"themes/cactus/layout/_partial/post/actions_mobile.ejs","hash":"5ee47fffaf428802cfe47dd2e6186c6bbff85067","modified":1685777179000},{"_id":"themes/cactus/layout/_partial/post/date.ejs","hash":"23770328c7d900ecc7fd87930dc24b095eb272ac","modified":1685777179000},{"_id":"themes/cactus/layout/_partial/post/gallery.ejs","hash":"9aecd8908e8a684f33dc20c02497c0f1774137c7","modified":1685777179000},{"_id":"themes/cactus/layout/_partial/post/share.ejs","hash":"9a15a7c005cfe518fdc9ec61a5107c76012f49d0","modified":1685777179000},{"_id":"themes/cactus/layout/_partial/post/tag.ejs","hash":"80bd2afd49b296e6441ab977a0614add710c32a3","modified":1685777179000},{"_id":"themes/cactus/layout/_partial/post/title.ejs","hash":"b2a00781d1301ff4d362b5d2a97480052ee4cae1","modified":1685777179000},{"_id":"themes/cactus/source/css/_colors/classic.styl","hash":"bc09f8777a6c99030da953dfdb84f793c5e4fd85","modified":1685777179000},{"_id":"themes/cactus/source/css/_colors/dark.styl","hash":"9aa43b1f23d5d268dfa36bd942d6ce97b7677c4d","modified":1685777179000},{"_id":"themes/cactus/source/css/_colors/white.styl","hash":"60adf17521e170369eea8dbe8b9f0974ce477474","modified":1692817884172},{"_id":"themes/cactus/source/css/_colors/light.styl","hash":"d14ef1aa02d0895b6f9321ebfc23a1ec84b054b8","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/agate.styl","hash":"53027913ed8d4f75ac3e49e76aad824f0df62da3","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/arta.styl","hash":"b3e81e3e694ceb8deed178adb8b91013c5120e30","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/androidstudio.styl","hash":"2af0861725f97f0ee2ded67c3d2d4548c62b2d16","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-cave-dark.styl","hash":"ce63dd8548688d88254405eedfa75b1d7c82449e","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-dune-dark.styl","hash":"c196ff0ee064af0e507823694ae39020addfc280","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-estuary-dark.styl","hash":"0bb16a4eff93688f40787abc2f9e56e7d5cc93e7","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-forest-dark.styl","hash":"effbc5d75fa87203c847039869c22031b40d5b7d","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-heath-dark.styl","hash":"9a2e9a1d0a01bbdf158560c3ed1c134e098b2c68","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-lakeside-dark.styl","hash":"10ee3882fca7b97a37bd309d2d35fce9868647bb","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-plateau-dark.styl","hash":"84c80e6f67f62fce958d25817c277d2360272617","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-savanna-dark.styl","hash":"e32c1c70def8060fce5e790979a126da650ac642","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-seaside-dark.styl","hash":"2edf385215bbe1985b1a10106525d362667d28c2","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"538a14321193cd8abf2ddc484306631e54149ffb","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/brown-paper.styl","hash":"c2326ba20a5020a66ca7895258d18833327d4334","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/codepen-embed.styl","hash":"8b7b34484f76a6c2c3b1a9e49abb9b382f439ae8","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/dark.styl","hash":"f5e6e75958de59e87fc6be3a1668e870e20bc836","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/darkula.styl","hash":"9717efa9194837ba3fb4d762997d33075dcf8bfa","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/far.styl","hash":"aaac3028f5e33123cd123a583cddc9290c45ec8e","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/gruvbox-dark.styl","hash":"76b744c14fd5600bea64731c05df97c2df75523f","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/highlightjs.styl","hash":"0e198b7a59191c7a39b641a4ddd22c948edb9358","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/hopscotch.styl","hash":"1378a6bc67a32c0cbff72ab771268b53f9aa586d","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/hybrid.styl","hash":"b8eb5c69d12f2ee5ebc50265ae271699d7f1a8d3","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/index.styl","hash":"002d5596f6379cc87dbd43d9145bc764aa666be1","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/ir-black.styl","hash":"53e5d74326a4527b92272bbd6946d4fec92720e8","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/kimbie.styl","hash":"51b889ca7c6fe178cfbbe28d875a6ea427184441","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/monokai-sublime.styl","hash":"c385b11345894be7e6ce3c5f08663e199933b8e4","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/monokai.styl","hash":"f87be027848ea6bee623a08ad1e17b2f5b7937ee","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/obsidian.styl","hash":"199e28326be8590883f0813ebbd54fcfaa4750fd","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/paraiso.styl","hash":"75f181eece6b71d033ea0c8d6cf00ae7efb9e29b","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/pojoaque.styl","hash":"4e7b6b046b8575ac749f6aec4e953a62ada27a36","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/railscasts.styl","hash":"b6674db9210e0c4444e4835fff2d1361f3ebd64c","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/rainbow.styl","hash":"c0cf97aae3e10fdcd10414547a711c9effbc39b8","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/school-book.styl","hash":"d43560fe519a931ce6da7d57416d7aa148441b83","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/solarized-dark.styl","hash":"90c9da5aa594383697e5b18892a7f95beb053f55","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/sunburst.styl","hash":"af3eec0fd56151e55bbd49c31b151f36717611d8","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-blue.styl","hash":"f24c17d0ab815dcfaab3438cb9fe2ab4839f5e0d","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-bright.styl","hash":"7674fecb6d27350727dc0d2dc93bc018382ebbd0","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-eighties.styl","hash":"28d751075ebabf7d0327a36f725076fe82fdf626","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night.styl","hash":"16ba09b2db501e4e3e2e7d62595d9bf935bf27c4","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/zenburn.styl","hash":"68ff9332ccc03f9389b15b713415cde016f8088f","modified":1685777179000},{"_id":"themes/cactus/source/css/_partial/archive.styl","hash":"31aef892437d5734a134c34f2a8a6610a8f671c3","modified":1685777179000},{"_id":"themes/cactus/source/css/_partial/article.styl","hash":"258370d8ab98e63804ead9bc030f633ca97a1235","modified":1685777179000},{"_id":"themes/cactus/source/css/_partial/categories.styl","hash":"a43f00e61b3507f130b8a3f8108a4eeca147c2a0","modified":1685777179000},{"_id":"themes/cactus/source/css/_partial/comments.styl","hash":"1e90f1fb9d4c155df518cacb5a537e9de9c042c1","modified":1685777179000},{"_id":"themes/cactus/source/css/_partial/footer.styl","hash":"61c2c7c5f73a0022ec41830bea0812a97f522d7c","modified":1685777179000},{"_id":"themes/cactus/source/css/_partial/header.styl","hash":"8ce12f14382b6d471e3fe1266573b34fa84deaa0","modified":1685777179000},{"_id":"themes/cactus/source/css/_partial/index.styl","hash":"59c99f4ea3a73bf47ce030df166c5e33d5de31fb","modified":1685777179000},{"_id":"themes/cactus/source/css/_partial/pagination.styl","hash":"950bf517bbe7adb9a9aa4eb5ddec74ffc7598787","modified":1685777179000},{"_id":"themes/cactus/source/css/_partial/search.styl","hash":"159be002780c62a77f46947cf854a7342fba24f4","modified":1685777179000},{"_id":"themes/cactus/source/css/_partial/tags.styl","hash":"d571d5c7c960300d29c5f0ec3fe1140322ecd6b3","modified":1685777179000},{"_id":"themes/cactus/source/css/_partial/tooltip.styl","hash":"2daff581ec3efaec840cbfdee512195919c32629","modified":1685777179000},{"_id":"themes/cactus/source/lib/clipboard/clipboard.min.js","hash":"9a7cb405f9beed005891587d41f76a0720893ffc","modified":1685777179000},{"_id":"themes/cactus/source/lib/font-awesome/.DS_Store","hash":"163818f8a0c6ce6a884baaaf8e19886d83b8c8d4","modified":1692110732779},{"_id":"themes/cactus/source/lib/justified-gallery/.DS_Store","hash":"dff321e4e2ba49992df0b63b5a44b65939d8e7a5","modified":1692110732777},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff","hash":"f6fda2de0348b3e3b7de73267f9f8e97a62f8353","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff2","hash":"7ea4fd7dd4cd4f480af78a0e2c5849eb921b1aeb","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff","hash":"56e632c9196fac364c66f812a3b4635dd999ad1c","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff2","hash":"6e40d0c7669c1adbcbf034bdc459f7bed4d6676d","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff","hash":"1c3dbf17411b1f6a6b22c2b76e9d8511586643d0","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff2","hash":"50b654d916204c30987d1987abd890ef92085ae3","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff","hash":"43a8aaa3fca8721dd32a5d20f7a98dfbc87c97fd","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff2","hash":"14b3e257c51a6a11d23b2a078017ff340c9777e4","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.woff2","hash":"a9714ffb842afc74836e64de04b52d8c37c87c8a","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.woff","hash":"235889d59ddad2b1f3243ccaab7733bd713a2a21","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff","hash":"c0e784de2eb5261cca244928f8a81fd893c3fe16","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff2","hash":"9b03b1a9071709f5b7dbca13412ecef6cb7a2a67","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.woff","hash":"2e8e6d38d361def5f48baac366f04e3db3ed4828","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.woff2","hash":"e213bb26bc7f10e1df3fe2d03d3ecaecd6e6d371","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/font-face.css","hash":"ba0030e1cd28a8caa7a5bb74b98da7c7bb185c90","modified":1685777179000},{"_id":"themes/cactus/source/css/_partial/post/actions_desktop.styl","hash":"a1f36f9a3fd5ffcd832bf39e9402678978035d48","modified":1685777179000},{"_id":"themes/cactus/source/css/_partial/post/actions_mobile.styl","hash":"0d2966c1d870392476864af8ee3ba312ba30cb82","modified":1685777179000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"fb363d27cfdfe71a243fa2ac3dab2815232b9b7e","modified":1685777179000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"67afa6237670ab99125056f2899129f22912dcf3","modified":1685777179000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-v4compatibility.ttf","hash":"a9d072aca9e0fadc2a7167671ce3d6b18d9cd2cc","modified":1685777179000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-v4compatibility.woff2","hash":"8f80d0bbe995f7fe92320fdaec10cd5ccd710a51","modified":1685777179000},{"_id":"themes/cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","hash":"dd3052149d3054f35efb823c68dd78e78aad5875","modified":1685777179000},{"_id":"themes/cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","hash":"ad8f48b4022498078b089fcdd1e8b47faf496931","modified":1685777179000},{"_id":"themes/cactus/source/lib/jquery/jquery.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.eot","hash":"91152bd73e7ff8d943e3bde3ddb0fa0a018e1c21","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.ttf","hash":"b65915e3fa57b5c19995d15dc2341d115c1971b9","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.eot","hash":"5c1c680fade45393e4a5bb4548a092cd5ea6811e","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.ttf","hash":"122bb778b17a152c426a825ee981610a4bd59bf3","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.eot","hash":"a059359e9bea17dc2ff2ede955a05bf0dc4d00d0","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.ttf","hash":"df82b80c4d3b11e70dcd269fc62ac97cbfa0414d","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.eot","hash":"d9ec1f9f3fefd57e446cbe86dc297f1ff269b6de","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.ttf","hash":"948a091f0fdb8c7ae17d5ef8e51bd8830d65dd9a","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.eot","hash":"521c01f0eb79a48025e972ecbe21b0d7fb15437b","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.ttf","hash":"643c28c8f8a2bce1a0d62525aa045cd9883773cd","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.eot","hash":"a0ea0bdaef00b35544f9a21d25d35db9a79f7189","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.ttf","hash":"6aacb0eecb03c660570b6e159ba5ca97ca7461cf","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.eot","hash":"af46f7f4e10a1440a4c97b350622d279143e6798","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.ttf","hash":"1e08b6373c2e086f24776df9b11e4be6bbcc8a4a","modified":1685777179000},{"_id":"themes/cactus/source/lib/font-awesome/css/all.min.css","hash":"caf0d708f7fbeb4638ab3df16e47b5c54881f093","modified":1692799207029},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"4350f9ba93384634faf35f41c503c99c767f1069","modified":1685777179000},{"_id":"source/assets/Demo/wallpaper-2572384.jpg","hash":"1df3620ab8c69fe2498a746f8ead057162df0637","modified":1692108039134},{"_id":"source/assets/iOS/Memory&Performance&Stability/002.jpeg","hash":"4344a70e74ddc793e34c2f90f1a56fda8e14143c","modified":1677671190534},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"f0982a77285d53653845b0a78170b4688db972f1","modified":1685777179000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"6b99aa650bd12a36caa14e0127435d8f4cd3ba73","modified":1685777179000},{"_id":"themes/cactus/source/images/logo.png","hash":"0e3029251dfda26adee2761f71377297e8c26871","modified":1685777179000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"20bd663830188cbadd2264e1daf9497c3ffc3621","modified":1685777179000},{"_id":"source/assets/Demo/wallpaper-878514.jpg","hash":"9f9705a377c42320b335b3c66b023e62b80e56e3","modified":1692108039138},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Italic.ttf","hash":"96c97a0a098ca40802f948ae56fa37aa6683d034","modified":1685777179000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Italic.ttf","hash":"68700db02debd4b922304134da83b829cbfddfc9","modified":1685777179000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Italic.ttf","hash":"7f7cdbdcc26279c04046632e22d872f111bc9399","modified":1685777179000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Bold.ttf","hash":"bfa1ed9a263ed78462f06d322de13bd5bd0906b2","modified":1685777179000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","hash":"a9a431fc7a6c3a67c98021d4035c12a07a4f1070","modified":1685777179000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Regular.ttf","hash":"2b912dd13f052f645ee19951604610bb350d50af","modified":1685777179000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Bold.ttf","hash":"a8a8df3393bccc365335fc5eb0a62a6b7ccd32b9","modified":1685777179000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","hash":"65ddb11e75ee93909e845ab912a36717c48f1c94","modified":1685777179000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Regular.ttf","hash":"5e220152adefe905b2197f873d7cee99eca50e91","modified":1685777179000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Bold.ttf","hash":"df202ce09cbdc70bc16b81983a13ef0f94e46f10","modified":1685777179000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","hash":"d895a1bd25e36c58b7f463ebe14de09f186d5ab4","modified":1685777179000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Regular.ttf","hash":"56fa0e33a390b704afc56af93a31576ccdbbdd9e","modified":1685777179000},{"_id":"source/assets/Demo/wallpaper-2311325.jpg","hash":"ddaaaeb4fa04a05c83053c1f8149720d18c9c8de","modified":1692108039132},{"_id":"public/search.xml","hash":"bb69f7717598a0751e1424df73847fa9d5fcbef6","modified":1694014097895},{"_id":"public/about/index.html","hash":"b593fe83844fe7b7496feaf70b7c8bb530d64ad4","modified":1694014097895},{"_id":"public/categories/index.html","hash":"62b72057781c2aca95fd73d6dd4d03a1ccc14dbf","modified":1694014097895},{"_id":"public/search/index.html","hash":"46e5d368c374dee199480756756ba860f6f1736c","modified":1694014097895},{"_id":"public/tags/index.html","hash":"5718f0d7418cadc777dc0984c2f8e2873d650ba2","modified":1694014097895},{"_id":"public/categories/Others/index.html","hash":"cd3f35cfc67eb265a2dc2ca77a99515245266989","modified":1694014097895},{"_id":"public/categories/SwiftUI/index.html","hash":"34952c4724c9601bbe77073a6372cc3141780772","modified":1694014097895},{"_id":"public/categories/Swift/index.html","hash":"d570707d8fa3c276bd54c9fbc539478d1a0fedfe","modified":1694014097895},{"_id":"public/categories/Swift/page/2/index.html","hash":"3299327b250cd26b78de1755d9d47bb1bca56ccf","modified":1694014097895},{"_id":"public/categories/Swift/00-Tips/index.html","hash":"35e5c4ceb6fc5e5fb6b492808d42e67477dcbb8f","modified":1694014097895},{"_id":"public/categories/Swift/01-Closures/index.html","hash":"313a99490d42e002679c8aec1a52ab413d02257c","modified":1694014097895},{"_id":"public/categories/Swift/02-Structs/index.html","hash":"d748630a8200791be6b324a03d449decffb5b392","modified":1694014097895},{"_id":"public/categories/Swift/03-Enumerations/index.html","hash":"2c3b1b8f8adedbd8475cc62476253f30ea1710d8","modified":1694014097895},{"_id":"public/categories/Swift/05-Collections/index.html","hash":"8712aa4c72e046db2c68897558701fe202407e4f","modified":1694014097895},{"_id":"public/categories/Swift/04-Protocols/index.html","hash":"5cb8a02c45c8d368e1c2ea8f3f8633993aaecbe2","modified":1694014097895},{"_id":"public/categories/Swift/06-Hybrid-Programming/index.html","hash":"5f721fd17835efaf036ecff56641f12410a13e80","modified":1694014097895},{"_id":"public/categories/Swift/07-Concurrency/index.html","hash":"1214db84fc66202ad88b3259dd3385b0b8d8d0dd","modified":1694014097895},{"_id":"public/categories/iOS/index.html","hash":"1a774fbfca9e4b34645f9379cb6bbe84732d7f41","modified":1694014097895},{"_id":"public/categories/iOS/00-Tips/index.html","hash":"276022c1e540ac0c775acb68e1ada1d9c0f3776b","modified":1694014097895},{"_id":"public/categories/iOS/01-Memory-Performance-Stability/index.html","hash":"8bebcaafd5eb4d4ae7e0f1bb622415a0154b797a","modified":1694014097895},{"_id":"public/categories/iOS/05-Projects-Issues/index.html","hash":"536f28028e10a1016d10d6978d1fa0f39ad67336","modified":1694014097895},{"_id":"public/categories/iOS/Others/index.html","hash":"7b7ce42e5643f147462260a0cece52f6eee1cd1d","modified":1694014097895},{"_id":"public/archives/index.html","hash":"7df9994783ab4fc56d3a50a58b41f2cb5316cc1d","modified":1694014097895},{"_id":"public/archives/page/2/index.html","hash":"580afaf3c1b750dc460fcde364205b8e3384d784","modified":1694014097895},{"_id":"public/archives/page/3/index.html","hash":"8e8ba7ca50a3dda936c77ad93e253614f5799a1b","modified":1694014097895},{"_id":"public/archives/2023/index.html","hash":"4abccdda3cb6adea551b8db9f3aa9b3d7b9c5297","modified":1694014097895},{"_id":"public/archives/2023/page/2/index.html","hash":"2cd91cbfbdbc2db8f7aea8467e521e4fd451c4df","modified":1694014097895},{"_id":"public/archives/2023/page/3/index.html","hash":"d2465930470bcdd088e0ca5f786cb23e5d3777b0","modified":1694014097895},{"_id":"public/archives/2023/01/index.html","hash":"d0f0fee4ec5bd3bf55d5b9d608663c6fcf5bb0b3","modified":1694014097895},{"_id":"public/archives/2023/02/index.html","hash":"cce3dca9a5e9ab8ebc4ac0bc8bc28a31185a7667","modified":1694014097895},{"_id":"public/archives/2023/03/index.html","hash":"35e1e7a8cfcbe27ce6ad334ca48ea8b0d300ea97","modified":1694014097895},{"_id":"public/archives/2023/08/index.html","hash":"f48c1ff4b5dd9aa7711d0b5a29e83ff6b63ac190","modified":1694014097895},{"_id":"public/archives/2023/09/index.html","hash":"ee52e1878d419831c22ce3521357211c36c5d51d","modified":1694014097895},{"_id":"public/tags/hexo/index.html","hash":"4608177995ec77df6251558616172f9657ab1fc5","modified":1694014097895},{"_id":"public/tags/configuration/index.html","hash":"7d29a6a3fc3c5287d9d202b589ed306ff1eb4162","modified":1694014097895},{"_id":"public/tags/tool/index.html","hash":"304ed869a3bbf6b9a115e44b4aa2198b25c1dd37","modified":1694014097895},{"_id":"public/tags/SwiftUI/index.html","hash":"346344dd00962d98eafc6f80db82367d0da3116d","modified":1694014097895},{"_id":"public/tags/UIKit/index.html","hash":"681748a1347c47afd0944c46cda556db1ede3b29","modified":1694014097895},{"_id":"public/tags/ContentView/index.html","hash":"8c344e2ee858fb1728d8bb172f8b8d124f50bfa3","modified":1694014097895},{"_id":"public/tags/View/index.html","hash":"e7c185aa8f938f2a0c264220750fd47717fddde3","modified":1694014097895},{"_id":"public/tags/random/index.html","hash":"8791746f65496e5b102bb916e85ec0ee254fddb8","modified":1694014097895},{"_id":"public/tags/errors/index.html","hash":"4f7d095979b12c95590f9a01bb98644d09bc225f","modified":1694014097895},{"_id":"public/tags/exceptions/index.html","hash":"7acca6353c26fbb25fa9615572f282f690b9a40a","modified":1694014097895},{"_id":"public/tags/lazy/index.html","hash":"637972b04ec7b7335190678347cec81ba4b5edfe","modified":1694014097895},{"_id":"public/tags/anonymous/index.html","hash":"813dd87bf690e219fc788c065687307f714473fa","modified":1694014097895},{"_id":"public/tags/nsstring/index.html","hash":"d5d42c397958d69bb4dcd14b867ed3918c8f1ba2","modified":1694014097895},{"_id":"public/tags/string/index.html","hash":"711666263a3718d564c993e964bc327dd0cb0cb4","modified":1694014097895},{"_id":"public/tags/read-only/index.html","hash":"a38e651aec05e137ea4ba2ae2c75cd373d311fae","modified":1694014097895},{"_id":"public/tags/computed/index.html","hash":"1b3b578a804f8586eed6c505c6bfaebe3d1b7698","modified":1694014097895},{"_id":"public/tags/stored/index.html","hash":"e910551bfaaa97631c5dd233dbffa2c637907061","modified":1694014097895},{"_id":"public/tags/singleton/index.html","hash":"80675ecc65227f7d48487c67d1ca2d1bd2feaf2b","modified":1694014097895},{"_id":"public/tags/memory-address/index.html","hash":"7b299d1a91542551b04eb9a12b2be466ecb92c35","modified":1694014097895},{"_id":"public/tags/force-unwrapping/index.html","hash":"45f5c892462c14db925ba8f1a815ea8c79cf865c","modified":1694014097895},{"_id":"public/tags/Implicitly-Unwrapped/index.html","hash":"23442d2a4db3172c987a7fc569725da34ecd858e","modified":1694014097895},{"_id":"public/tags/rethrows/index.html","hash":"6ec646bd929ec67af436ab158d6c601f3fdb8a8a","modified":1694014097895},{"_id":"public/tags/Closures/index.html","hash":"ebe201d0faab7e7e3e1590721f3296144fec083a","modified":1694014097895},{"_id":"public/tags/Capturing/index.html","hash":"f93bab9339cf2792ea4723a95712c3f04581ebd5","modified":1694014097895},{"_id":"public/tags/struct/index.html","hash":"d27e5cd087aa9688fe2058a8b52a09a8ce62b49a","modified":1694014097895},{"_id":"public/tags/class/index.html","hash":"3d407fbcc517e2d17d1ece070e2d1be2666e128a","modified":1694014097895},{"_id":"public/tags/performance/index.html","hash":"b65c3495b98e38dd375d03afa092e3f1396ea59b","modified":1694014097895},{"_id":"public/tags/initialization/index.html","hash":"a6c57badd0dfdc955ad708e4c684b2a9a9e431b0","modified":1694014097895},{"_id":"public/tags/constructors/index.html","hash":"5f80fdc0a677ffa76296a8ca48e07802fc4b98d5","modified":1694014097895},{"_id":"public/tags/closures/index.html","hash":"8d27341f9f8487c653c9a9daa706957f200d434d","modified":1694014097895},{"_id":"public/tags/enumeration/index.html","hash":"dd99ab4a76df3471f982219aee9ea7df52c0d7ce","modified":1694014097895},{"_id":"public/tags/nested/index.html","hash":"422be9f3ca604078e936df35813c75b810683cee","modified":1694014097895},{"_id":"public/tags/recursive/index.html","hash":"84ea6bfb7213e4435d89379be2f907a6cde08d98","modified":1694014097895},{"_id":"public/tags/collection/index.html","hash":"11d61c8292f86db7d6524cc0a2f63f6ff5385b84","modified":1694014097895},{"_id":"public/tags/zip/index.html","hash":"483f21c24268227ce520a86a48a0d25925917929","modified":1694014097895},{"_id":"public/tags/protocol/index.html","hash":"99e5aa48468d0d76fab4b9bbf90e7bc55a6c5d09","modified":1694014097895},{"_id":"public/tags/associatedtype/index.html","hash":"0155a910a5d1406d5a95fae4b8095cc48d97a699","modified":1694014097895},{"_id":"public/tags/hybrid/index.html","hash":"451ee01c26399938cf80af9bd1db765748e3a382","modified":1694014097895},{"_id":"public/tags/macro/index.html","hash":"42e3d52e50227966ad96bf53183e099b93b5692b","modified":1694014097895},{"_id":"public/tags/concurrency/index.html","hash":"6405747924e411ca32d2221454901048e151e0f2","modified":1694014097895},{"_id":"public/tags/async/index.html","hash":"958e3a5123e576fd66494d173897481bd609f888","modified":1694014097895},{"_id":"public/tags/await/index.html","hash":"f2bf4727bf87dbee5acf2e8d8566a5661e1d0073","modified":1694014097895},{"_id":"public/tags/nil/index.html","hash":"0b0be7a18f735b5dddf465a72eb078d4a20958ba","modified":1694014097895},{"_id":"public/tags/memory/index.html","hash":"f0f159bd7727c8fd0628bcca27c7c6a830c790b3","modified":1694014097895},{"_id":"public/tags/leak/index.html","hash":"c886e55540d11cc78a66058256de82019df90d4e","modified":1694014097895},{"_id":"public/tags/crash/index.html","hash":"612a16e03d94571c6c83c9a5cd32811368078602","modified":1694014097895},{"_id":"public/tags/latitude/index.html","hash":"814cfe2760c149545517c069db4071dd3a3f3d23","modified":1694014097895},{"_id":"public/tags/longitude/index.html","hash":"eeb111205285d3ae413aa15939f7b7e8b8f0bd6d","modified":1694014097895},{"_id":"public/tags/Agile/index.html","hash":"ee1c88258c84069a899ad0d50fe8dbb15aa215d2","modified":1694014097895},{"_id":"public/tags/waterfall/index.html","hash":"8ee2c360ecca1bc43e9abe9babaf6a2df8bc1856","modified":1694014097895},{"_id":"public/index.html","hash":"28f798e9fe939c6b82fee0f5aef164a77e77d8ef","modified":1694014097895},{"_id":"public/page/2/index.html","hash":"ac4dae0b545cb0481c675cae896e1c9522fcbf79","modified":1694014097895},{"_id":"public/page/3/index.html","hash":"de709b684c0da146baeb5d3be3332ed5fe22b9ec","modified":1694014097895},{"_id":"public/page/4/index.html","hash":"994c7c463014af8262e38624124106b7d1ced333","modified":1694014097895},{"_id":"public/page/5/index.html","hash":"067fc0dafffe1c45c689f7d3000d92069f7072ec","modified":1694014097895},{"_id":"public/404.html","hash":"4e70c047fb61699a8917d3cd52124c3871782dc5","modified":1694014097895},{"_id":"public/2023/09/06/iOS/06. Others/00. Waterfall development vs Agile development/index.html","hash":"edf48978fabedf300ee57a5a0f2dfaa8145b8e0a","modified":1694014097895},{"_id":"public/2023/09/06/SwiftUI/03. Basic Concepts (3)/index.html","hash":"02b9dfda3a34f1451ca14c4a9cc4cf3efbfdb287","modified":1694014097895},{"_id":"public/2023/09/03/SwiftUI/01. Basic Concepts (1)/index.html","hash":"8fb0208ea92bae341d2a85b84376900d34221909","modified":1694014097895},{"_id":"public/2023/09/02/SwiftUI/00. SwiftUI vs UIKit/index.html","hash":"a1cf492252349146b5ac5d0ad2c7d83873fab017","modified":1694014097895},{"_id":"public/2023/09/02/iOS/05. Projects & Issues/01. How to use iOS Geofencing in your business/index.html","hash":"9fbfca209aaf73cbc50dc9f54fb57bff45a6260c","modified":1694014097895},{"_id":"public/2023/08/31/iOS/05. Projects & Issues/00.  An investigation of Lost location Issue/index.html","hash":"5ab4d60bc931d7f3173581a9460e903a6c96b93a","modified":1694014097895},{"_id":"public/2023/08/23/Swift/07. Concurrency/01. Async and Await/index.html","hash":"0a5885fe9f0c8795d5c7b460e569f8a52826a5d6","modified":1694014097895},{"_id":"public/2023/08/19/Swift/00. Tips/09. How to use rethrows in Swift","hash":"1c8f0299b0a7592b6d1f43ae132d02740d9bccfd","modified":1694014097895},{"_id":"public/2023/08/18/Swift/07. Concurrency/00. How to use do, catch, try, throws in Swift/index.html","hash":"8757b45f781d61954a5757c7f76012b3a37874e1","modified":1694014097895},{"_id":"public/2023/08/15/iOS/00. Tips/00. Difference Of nil in OC and nil in Swift/index.html","hash":"078b76aa2be225b992bab8cb0b85e963f4049bc8","modified":1694014097895},{"_id":"public/2023/03/10/iOS/01. Memory & Performance & Stability/01. Common Crash Scenarios/index.html","hash":"21ee5bb710bfe9dd2f7eed772c34019254ed7f76","modified":1694014097895},{"_id":"public/2023/03/10/Swift/06. Hybrid Programming/00. Call the Macro definition of Objective-C in Swift/index.html","hash":"21ac7dce727b5574145c1d25ed457ca8a4ca69a4","modified":1694014097895},{"_id":"public/2023/03/09/Swift/05. Collections/00. Zip Function/index.html","hash":"dc3982b2aac61334247a6eb32ec11f796727233e","modified":1694014097895},{"_id":"public/2023/03/08/iOS/01. Memory & Performance & Stability/00. Summary of Memory Leak/index.html","hash":"1e8d02a0d6ab943a788b6a6c4d79b7fa630cb526","modified":1694014097895},{"_id":"public/2023/03/08/Swift/04. Protocols/01. Associatedtype/index.html","hash":"b6412874bd47111b6871e37d0b32d2cfce5f36a7","modified":1694014097895},{"_id":"public/2023/03/07/Swift/04. Protocols/00. Summary of Protocols/index.html","hash":"704ec8f5e8361eb672af447e7bd00ea56f483191","modified":1694014097895},{"_id":"public/2023/03/06/Swift/03. Enumerations/03. Recursive Enumeration/index.html","hash":"484d96bd063fdf3232a7cd869f8150355b70e0c5","modified":1694014097895},{"_id":"public/2023/03/05/Swift/03. Enumerations/02. Include Enumeration/index.html","hash":"0a8f182fb8583208b86ea57557680ad4e1d41189","modified":1694014097895},{"_id":"public/2023/03/04/Swift/03. Enumerations/01. Nested Enumeration/index.html","hash":"af58e562dcc98fb3cc7611c15392487fbd1bb637","modified":1694014097895},{"_id":"public/2023/03/03/Swift/03. Enumerations/00. Summary of Enumerations/index.html","hash":"50f6db4d4e47ce502a47eac9d382cbb914a0b6b0","modified":1694014097895},{"_id":"public/2023/03/02/Swift/02. Structs/04. Why should we avoid using closures in structs","hash":"b0a7d85231334e9eb13bf1b43eb563894cf5cfda","modified":1694014097895},{"_id":"public/2023/03/02/Swift/02. Structs/03. A Case of Initialization Constructor/index.html","hash":"fb9b3e4573372946a6ad0c3159c2212ea81064ac","modified":1694014097895},{"_id":"public/2023/03/02/Swift/02. Structs/02. Performance Comparison Between Structure and Class/index.html","hash":"a37ee0521599b3d3c861d4f2bdd05d00d1943445","modified":1694014097895},{"_id":"public/2023/03/02/Swift/02. Structs/01. Cases of Structures/index.html","hash":"9416535f5802647b3161851ee9484e7298eaf2a6","modified":1694014097895},{"_id":"public/2023/03/02/Swift/02. Structs/00. Structures and Classes/index.html","hash":"309565e07ef8b984dbbce33b0caaf6e10e354ca9","modified":1694014097895},{"_id":"public/2023/03/01/Swift/01. Closures/00. Three Forms of Closures/index.html","hash":"80397288ec40e547a81e8d83f9e4fef55eeddff5","modified":1694014097895},{"_id":"public/2023/03/01/Swift/01. Closures/01. Capturing Values/index.html","hash":"ef51543855eed1c1edab7bb863b94a551701090a","modified":1694014097895},{"_id":"public/2023/02/28/Swift/00. Tips/08. Implicitly Unwrapped Optionals and Force unwrapping/index.html","hash":"f5462ac95653c8397a27cdcf36a268872dfaab52","modified":1694014097895},{"_id":"public/2023/02/28/Swift/00. Tips/07. How to print the memory address of a variable","hash":"a56a247a5f348db4c71abf722cd4383c65b90c62","modified":1694014097895},{"_id":"public/2023/02/28/Swift/00. Tips/06. How to Define a singleton","hash":"7a4da4631eb7e1c6dd7f22f734bcd3243b3741b3","modified":1694014097895},{"_id":"public/2023/02/28/Swift/00. Tips/05. Computed properties and Stored properties/index.html","hash":"4d9a28bd8e6697aed857b080745c3d32904c9ff5","modified":1694014097895},{"_id":"public/2023/02/28/Swift/00. Tips/04. Set Read-only permission of the property/index.html","hash":"d1f5349f2959920d4291e6767578dd2c9ff557b8","modified":1694014097895},{"_id":"public/2023/02/28/Swift/00. Tips/03. NSString and String/index.html","hash":"a9f2cadec4acb1dab6ee9ea6b1a198c472e1e316","modified":1694014097895},{"_id":"public/2023/02/28/Swift/00. Tips/02. Lazy loading and Anonymous function/index.html","hash":"130aad95c5bb55ef74ad6efe3cd90854acdb9baa","modified":1694014097895},{"_id":"public/2023/02/28/Swift/00. Tips/01. Handling of errors and exceptions/index.html","hash":"70613ef8be6eab25cdff21033790f3088548e945","modified":1694014097895},{"_id":"public/2023/02/28/Swift/00. Tips/00. Generation of random numbers/index.html","hash":"406cf93ee2bce3cc349090f535c6d8e01986d8c5","modified":1694014097895},{"_id":"public/2023/02/28/SwiftUI/02. Basic Concepts (2)/index.html","hash":"3f855de7ff53a81f72fdcd584b2975cba8a14cb3","modified":1694014097895},{"_id":"public/2023/01/15/Others/00. Article publishing failure problem summary/index.html","hash":"cab6fd438a33cdbc75a9bc2cf2e604d51392c4ef","modified":1694014097895},{"_id":"public/2023/01/15/iOS/05. Projects & Issues/02. Design of a Document Similarity Comparison Tool/index.html","hash":"1a4e78b04e78d0d5c337a4630ea1105c4413e48d","modified":1694014097895},{"_id":"public/2023/01/15/iOS/05. Projects & Issues/03. A modular page-building solution based on UIView./index.html","hash":"3ad8f28edcbdec933c2c28c080864f274ac2e1ee","modified":1694014097895},{"_id":"public/2023/01/15/iOS/05. Projects & Issues/04. A page-building solution based on State machines./index.html","hash":"27d2c25040f129cd0bd0e46e0cc14b9ccbd2b099","modified":1694014097895},{"_id":"public/2023/01/15/iOS/05. Projects & Issues/05. How to support multi-source configuration in a componentized Pod/index.html","hash":"cc76630cf8776678f0573b2b4b21a26f83126f00","modified":1694014097895},{"_id":"public/2023/01/15/iOS/05. Projects & Issues/06. An encapsulation of data transmission based on RAC/index.html","hash":"cdca59975510362ff7ed85efa98d21f7bf7b9d44","modified":1694014097895},{"_id":"public/images/apple-touch-icon.png","hash":"57e2def34682655f41a0be2d083f16765ba7858b","modified":1694014097895},{"_id":"public/images/favicon-192x192.png","hash":"96e6fcbbb13a5914a6131391e210eb7dfd13d692","modified":1694014097895},{"_id":"public/images/favicon.ico","hash":"189f9842bcb79a6f8f9e8445bc8bbd773443826b","modified":1694014097895},{"_id":"public/lib/vazir-font/Vazir-Black.woff2","hash":"7ea4fd7dd4cd4f480af78a0e2c5849eb921b1aeb","modified":1694014097895},{"_id":"public/lib/vazir-font/Vazir-Black.woff","hash":"f6fda2de0348b3e3b7de73267f9f8e97a62f8353","modified":1694014097895},{"_id":"public/lib/vazir-font/Vazir-Bold.woff","hash":"56e632c9196fac364c66f812a3b4635dd999ad1c","modified":1694014097895},{"_id":"public/lib/vazir-font/Vazir-Bold.woff2","hash":"6e40d0c7669c1adbcbf034bdc459f7bed4d6676d","modified":1694014097895},{"_id":"public/lib/vazir-font/Vazir-Light.woff2","hash":"50b654d916204c30987d1987abd890ef92085ae3","modified":1694014097895},{"_id":"public/lib/vazir-font/Vazir-Light.woff","hash":"1c3dbf17411b1f6a6b22c2b76e9d8511586643d0","modified":1694014097895},{"_id":"public/lib/vazir-font/Vazir-Medium.woff","hash":"43a8aaa3fca8721dd32a5d20f7a98dfbc87c97fd","modified":1694014097895},{"_id":"public/lib/vazir-font/Vazir-Medium.woff2","hash":"14b3e257c51a6a11d23b2a078017ff340c9777e4","modified":1694014097895},{"_id":"public/lib/vazir-font/Vazir-Regular.woff2","hash":"a9714ffb842afc74836e64de04b52d8c37c87c8a","modified":1694014097895},{"_id":"public/lib/vazir-font/Vazir-Regular.woff","hash":"235889d59ddad2b1f3243ccaab7733bd713a2a21","modified":1694014097895},{"_id":"public/lib/vazir-font/Vazir-Thin.woff","hash":"c0e784de2eb5261cca244928f8a81fd893c3fe16","modified":1694014097895},{"_id":"public/lib/vazir-font/Vazir-Thin.woff2","hash":"9b03b1a9071709f5b7dbca13412ecef6cb7a2a67","modified":1694014097895},{"_id":"public/lib/vazir-font/Vazir-Variable.woff","hash":"2e8e6d38d361def5f48baac366f04e3db3ed4828","modified":1694014097895},{"_id":"public/lib/vazir-font/Vazir-Variable.woff2","hash":"e213bb26bc7f10e1df3fe2d03d3ecaecd6e6d371","modified":1694014097895},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"fb363d27cfdfe71a243fa2ac3dab2815232b9b7e","modified":1694014097895},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"67afa6237670ab99125056f2899129f22912dcf3","modified":1694014097895},{"_id":"public/lib/font-awesome/webfonts/fa-v4compatibility.ttf","hash":"a9d072aca9e0fadc2a7167671ce3d6b18d9cd2cc","modified":1694014097895},{"_id":"public/lib/font-awesome/webfonts/fa-v4compatibility.woff2","hash":"8f80d0bbe995f7fe92320fdaec10cd5ccd710a51","modified":1694014097895},{"_id":"public/about/images/qrcode.bmp","hash":"a4dcee22ec1e54d4441d602e4a1baaa826ad4705","modified":1694014097895},{"_id":"public/assets/SwiftUI/001.png","hash":"e18badd408db3b2b7d7c16978f4595b179b9613a","modified":1694014097895},{"_id":"public/assets/Swift/Concurrency/catch_warning.png","hash":"621728b2255253fc1fb86d5a5df086fe70d8ef82","modified":1694014097895},{"_id":"public/assets/Swift/Tips/image00.jpg","hash":"5f98da7ebb53b3a5c9f6f46cef3ad4ac1fab604c","modified":1694014097895},{"_id":"public/assets/iOS/Others/002.png","hash":"72a12b81eae831bedf7a5ead7382133f136b2b66","modified":1694014097895},{"_id":"public/assets/iOS/Others/001.png","hash":"1e9a719557b378e404d030b51c5dc2eab041b1ac","modified":1694014097895},{"_id":"public/lib/vazir-font/Vazir-Black.eot","hash":"91152bd73e7ff8d943e3bde3ddb0fa0a018e1c21","modified":1694014097895},{"_id":"public/lib/vazir-font/Vazir-Black.ttf","hash":"b65915e3fa57b5c19995d15dc2341d115c1971b9","modified":1694014097895},{"_id":"public/lib/vazir-font/Vazir-Bold.eot","hash":"5c1c680fade45393e4a5bb4548a092cd5ea6811e","modified":1694014097895},{"_id":"public/lib/vazir-font/Vazir-Bold.ttf","hash":"122bb778b17a152c426a825ee981610a4bd59bf3","modified":1694014097895},{"_id":"public/lib/vazir-font/Vazir-Light.eot","hash":"a059359e9bea17dc2ff2ede955a05bf0dc4d00d0","modified":1694014097895},{"_id":"public/lib/vazir-font/Vazir-Light.ttf","hash":"df82b80c4d3b11e70dcd269fc62ac97cbfa0414d","modified":1694014097895},{"_id":"public/lib/vazir-font/Vazir-Medium.ttf","hash":"948a091f0fdb8c7ae17d5ef8e51bd8830d65dd9a","modified":1694014097895},{"_id":"public/lib/vazir-font/Vazir-Medium.eot","hash":"d9ec1f9f3fefd57e446cbe86dc297f1ff269b6de","modified":1694014097895},{"_id":"public/lib/vazir-font/Vazir-Regular.eot","hash":"521c01f0eb79a48025e972ecbe21b0d7fb15437b","modified":1694014097895},{"_id":"public/lib/vazir-font/Vazir-Regular.ttf","hash":"643c28c8f8a2bce1a0d62525aa045cd9883773cd","modified":1694014097895},{"_id":"public/lib/vazir-font/Vazir-Thin.eot","hash":"a0ea0bdaef00b35544f9a21d25d35db9a79f7189","modified":1694014097895},{"_id":"public/lib/vazir-font/Vazir-Thin.ttf","hash":"6aacb0eecb03c660570b6e159ba5ca97ca7461cf","modified":1694014097895},{"_id":"public/lib/vazir-font/Vazir-Variable.eot","hash":"af46f7f4e10a1440a4c97b350622d279143e6798","modified":1694014097895},{"_id":"public/lib/vazir-font/Vazir-Variable.ttf","hash":"1e08b6373c2e086f24776df9b11e4be6bbcc8a4a","modified":1694014097895},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"4350f9ba93384634faf35f41c503c99c767f1069","modified":1694014097895},{"_id":"public/assets/cactus.png","hash":"4633bf3d6601dfa2dc86ac8341df85e440dff128","modified":1694014097895},{"_id":"public/assets/SwiftUI/000.png","hash":"56b25c93bc84e5c89c719767800177f73c236ffd","modified":1694014097895},{"_id":"public/assets/SwiftUI/002.png","hash":"fa4630723e342f7f9279f0ccf268e1057320f201","modified":1694014097895},{"_id":"public/assets/SwiftUI/003.png","hash":"6872d4ec09a72b5270ac59737f1023c3280d7134","modified":1694014097895},{"_id":"public/assets/iOS/Memory&Performance&Stability/001.png","hash":"0f495a3cf267209ee14f332e7b10aa9837d6b860","modified":1694014097895},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"f0982a77285d53653845b0a78170b4688db972f1","modified":1694014097895},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"6b99aa650bd12a36caa14e0127435d8f4cd3ba73","modified":1694014097895},{"_id":"public/css/rtl.css","hash":"9589fac02a34fd9084f805f801889028756bbb65","modified":1694014097895},{"_id":"public/js/search.js","hash":"914a2ce72fb325106c61600200be823b72bfb39f","modified":1694014097895},{"_id":"public/js/main.js","hash":"9eb41deaf7d743b60a30ca1b1ffe050128ce9d2c","modified":1694014097895},{"_id":"public/lib/clipboard/clipboard.min.js","hash":"9a7cb405f9beed005891587d41f76a0720893ffc","modified":1694014097895},{"_id":"public/lib/vazir-font/font-face.css","hash":"ba0030e1cd28a8caa7a5bb74b98da7c7bb185c90","modified":1694014097895},{"_id":"public/lib/justified-gallery/css/justifiedGallery.min.css","hash":"dd3052149d3054f35efb823c68dd78e78aad5875","modified":1694014097895},{"_id":"public/css/style.css","hash":"41517d782066fad851005c236943a96d3d6c5d2e","modified":1694014097895},{"_id":"public/lib/jquery/jquery.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1694014097895},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"caf0d708f7fbeb4638ab3df16e47b5c54881f093","modified":1694014097895},{"_id":"public/lib/justified-gallery/js/jquery.justifiedGallery.min.js","hash":"ad8f48b4022498078b089fcdd1e8b47faf496931","modified":1694014097895},{"_id":"public/images/logo.png","hash":"0e3029251dfda26adee2761f71377297e8c26871","modified":1694014097895},{"_id":"public/assets/Demo/wallpaper-2572384.jpg","hash":"1df3620ab8c69fe2498a746f8ead057162df0637","modified":1694014097895},{"_id":"public/assets/iOS/Memory&Performance&Stability/002.jpeg","hash":"4344a70e74ddc793e34c2f90f1a56fda8e14143c","modified":1694014097895},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"20bd663830188cbadd2264e1daf9497c3ffc3621","modified":1694014097895},{"_id":"public/lib/meslo-LG/MesloLGL-Italic.ttf","hash":"96c97a0a098ca40802f948ae56fa37aa6683d034","modified":1694014097895},{"_id":"public/lib/meslo-LG/MesloLGM-Italic.ttf","hash":"68700db02debd4b922304134da83b829cbfddfc9","modified":1694014097895},{"_id":"public/lib/meslo-LG/MesloLGS-Italic.ttf","hash":"7f7cdbdcc26279c04046632e22d872f111bc9399","modified":1694014097895},{"_id":"public/lib/meslo-LG/MesloLGL-BoldItalic.ttf","hash":"a9a431fc7a6c3a67c98021d4035c12a07a4f1070","modified":1694014097895},{"_id":"public/lib/meslo-LG/MesloLGL-Bold.ttf","hash":"bfa1ed9a263ed78462f06d322de13bd5bd0906b2","modified":1694014097895},{"_id":"public/lib/meslo-LG/MesloLGL-Regular.ttf","hash":"2b912dd13f052f645ee19951604610bb350d50af","modified":1694014097895},{"_id":"public/lib/meslo-LG/MesloLGM-Bold.ttf","hash":"a8a8df3393bccc365335fc5eb0a62a6b7ccd32b9","modified":1694014097895},{"_id":"public/lib/meslo-LG/MesloLGM-BoldItalic.ttf","hash":"65ddb11e75ee93909e845ab912a36717c48f1c94","modified":1694014097895},{"_id":"public/lib/meslo-LG/MesloLGM-Regular.ttf","hash":"5e220152adefe905b2197f873d7cee99eca50e91","modified":1694014097895},{"_id":"public/lib/meslo-LG/MesloLGS-Bold.ttf","hash":"df202ce09cbdc70bc16b81983a13ef0f94e46f10","modified":1694014097895},{"_id":"public/lib/meslo-LG/MesloLGS-BoldItalic.ttf","hash":"d895a1bd25e36c58b7f463ebe14de09f186d5ab4","modified":1694014097895},{"_id":"public/lib/meslo-LG/MesloLGS-Regular.ttf","hash":"56fa0e33a390b704afc56af93a31576ccdbbdd9e","modified":1694014097895},{"_id":"public/assets/Demo/wallpaper-878514.jpg","hash":"9f9705a377c42320b335b3c66b023e62b80e56e3","modified":1694014097895},{"_id":"public/assets/Demo/wallpaper-2311325.jpg","hash":"ddaaaeb4fa04a05c83053c1f8149720d18c9c8de","modified":1694014097895}],"Category":[{"name":"Others","_id":"clm7w97r20009kb0md2g8awag"},{"name":"SwiftUI","_id":"clm7w97r4000dkb0m2i7f98pp"},{"name":"Swift","_id":"clm7w97ra000skb0me7q2ctv3"},{"name":"00. Tips","parent":"clm7w97ra000skb0me7q2ctv3","_id":"clm7w97rl001okb0m4fx81nor"},{"name":"01. Closures","parent":"clm7w97ra000skb0me7q2ctv3","_id":"clm7w97ry002qkb0m1jm6dkw6"},{"name":"02. Structs","parent":"clm7w97ra000skb0me7q2ctv3","_id":"clm7w97s4003ckb0metyc6llb"},{"name":"03. Enumerations","parent":"clm7w97ra000skb0me7q2ctv3","_id":"clm7w97sb004okb0mdp9z9c0j"},{"name":"05. Collections","parent":"clm7w97ra000skb0me7q2ctv3","_id":"clm7w97se005dkb0m8glj2pjz"},{"name":"04. Protocols","parent":"clm7w97ra000skb0me7q2ctv3","_id":"clm7w97se005jkb0m5q3fdzrt"},{"name":"06. Hybrid Programming","parent":"clm7w97ra000skb0me7q2ctv3","_id":"clm7w97sg005vkb0m1zf0dfxs"},{"name":"07. Concurrency","parent":"clm7w97ra000skb0me7q2ctv3","_id":"clm7w97sh0060kb0m46ycfz5u"},{"name":"iOS","_id":"clm7w97si0069kb0m562aefx8"},{"name":"00. Tips","parent":"clm7w97si0069kb0m562aefx8","_id":"clm7w97sn0071kb0m7vvsexap"},{"name":"01. Memory & Performance & Stability","parent":"clm7w97si0069kb0m562aefx8","_id":"clm7w97so0073kb0mg4wsf3qy"},{"name":"05. Projects & Issues","parent":"clm7w97si0069kb0m562aefx8","_id":"clm7w97sp007bkb0memc32j0x"},{"name":"Others","parent":"clm7w97si0069kb0m562aefx8","_id":"clm7w97ss007mkb0md6bec33l"}],"Data":[],"Page":[{"title":"About","date":"2023-08-14T19:49:14.000Z","type":"about","_content":"\n<font size=4>**1. Contact information:**</font>     \n① Email:    \n**zitao.li0206@gmail.com**   \n② WeChat Official Account:    \n<font size=4>**ios_hunter**</font>\nNote: It contains the latest accumulation of Chinese technology.\n③ Other Chinese blog:    \n**https://blog.csdn.net/lizitao**  \n<!--Or you can scan with WeChat directly:     -->\n<!--<image src=\"images/qrcode.bmp\">  -->\n\n\n\n<font size=4>**2. Level Up**</font>  \n<font size=4>Already: **200+2+3** hours</font>  \n<font size=4>Senior: **1,000** hours, Percentage: **200/1,000 = 20%**</font>        \n<font size=4>Expert: **5,000** hours, Percentage: **200/10,000 = 4%**</font>         \n<font size=4>Master: **10,000** hours, Percentage: **200/10,000 = 1%**</font>         \nThe time ends at 2023-08-29.\n\n\n\n","source":"about/index.md","raw":"---\ntitle: About\ndate: 2023-08-14 21:49:14\ntype: about\n---\n\n<font size=4>**1. Contact information:**</font>     \n① Email:    \n**zitao.li0206@gmail.com**   \n② WeChat Official Account:    \n<font size=4>**ios_hunter**</font>\nNote: It contains the latest accumulation of Chinese technology.\n③ Other Chinese blog:    \n**https://blog.csdn.net/lizitao**  \n<!--Or you can scan with WeChat directly:     -->\n<!--<image src=\"images/qrcode.bmp\">  -->\n\n\n\n<font size=4>**2. Level Up**</font>  \n<font size=4>Already: **200+2+3** hours</font>  \n<font size=4>Senior: **1,000** hours, Percentage: **200/1,000 = 20%**</font>        \n<font size=4>Expert: **5,000** hours, Percentage: **200/10,000 = 4%**</font>         \n<font size=4>Master: **10,000** hours, Percentage: **200/10,000 = 1%**</font>         \nThe time ends at 2023-08-29.\n\n\n\n","updated":"2023-08-29T13:05:57.019Z","path":"about/index.html","comments":1,"layout":"page","_id":"clm7w97qs0000kb0mexux7thi","content":"<p><font size=4><strong>1. Contact information:</strong></font><br>① Email:<br><strong><a href=\"mailto:&#x7a;&#105;&#116;&#97;&#111;&#x2e;&#x6c;&#105;&#x30;&#50;&#48;&#54;&#64;&#x67;&#109;&#97;&#x69;&#108;&#46;&#x63;&#x6f;&#109;\">&#x7a;&#105;&#116;&#97;&#111;&#x2e;&#x6c;&#105;&#x30;&#50;&#48;&#54;&#64;&#x67;&#109;&#97;&#x69;&#108;&#46;&#x63;&#x6f;&#109;</a></strong><br>② WeChat Official Account:<br><font size=4><strong>ios_hunter</strong></font><br>Note: It contains the latest accumulation of Chinese technology.<br>③ Other Chinese blog:<br><strong><a href=\"https://blog.csdn.net/lizitao\">https://blog.csdn.net/lizitao</a></strong>  </p>\n<!--Or you can scan with WeChat directly:     -->\n<!--<image src=\"images/qrcode.bmp\">  -->\n\n\n\n<p><font size=4><strong>2. Level Up</strong></font><br><font size=4>Already: <strong>200+2+3</strong> hours</font><br><font size=4>Senior: <strong>1,000</strong> hours, Percentage: <strong>200&#x2F;1,000 &#x3D; 20%</strong></font><br><font size=4>Expert: <strong>5,000</strong> hours, Percentage: <strong>200&#x2F;10,000 &#x3D; 4%</strong></font><br><font size=4>Master: <strong>10,000</strong> hours, Percentage: <strong>200&#x2F;10,000 &#x3D; 1%</strong></font><br>The time ends at 2023-08-29.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><font size=4><strong>1. Contact information:</strong></font><br>① Email:<br><strong><a href=\"mailto:&#x7a;&#105;&#116;&#97;&#111;&#x2e;&#x6c;&#105;&#x30;&#50;&#48;&#54;&#64;&#x67;&#109;&#97;&#x69;&#108;&#46;&#x63;&#x6f;&#109;\">&#x7a;&#105;&#116;&#97;&#111;&#x2e;&#x6c;&#105;&#x30;&#50;&#48;&#54;&#64;&#x67;&#109;&#97;&#x69;&#108;&#46;&#x63;&#x6f;&#109;</a></strong><br>② WeChat Official Account:<br><font size=4><strong>ios_hunter</strong></font><br>Note: It contains the latest accumulation of Chinese technology.<br>③ Other Chinese blog:<br><strong><a href=\"https://blog.csdn.net/lizitao\">https://blog.csdn.net/lizitao</a></strong>  </p>\n<!--Or you can scan with WeChat directly:     -->\n<!--<image src=\"images/qrcode.bmp\">  -->\n\n\n\n<p><font size=4><strong>2. Level Up</strong></font><br><font size=4>Already: <strong>200+2+3</strong> hours</font><br><font size=4>Senior: <strong>1,000</strong> hours, Percentage: <strong>200&#x2F;1,000 &#x3D; 20%</strong></font><br><font size=4>Expert: <strong>5,000</strong> hours, Percentage: <strong>200&#x2F;10,000 &#x3D; 4%</strong></font><br><font size=4>Master: <strong>10,000</strong> hours, Percentage: <strong>200&#x2F;10,000 &#x3D; 1%</strong></font><br>The time ends at 2023-08-29.</p>\n"},{"title":"Categories","date":"2023-08-14T19:47:40.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: Categories\ndate: 2023-08-14 21:47:40\ntype: categories\n---\n","updated":"2023-08-14T20:13:11.587Z","path":"categories/index.html","comments":1,"layout":"page","_id":"clm7w97qx0002kb0mami914vn","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Search","date":"2023-08-14T20:12:21.000Z","type":"search","_content":"","source":"search/index.md","raw":"---\ntitle: Search\ndate: 2023-08-14 22:12:21\ntype: search\n---\n","updated":"2023-08-14T20:12:58.970Z","path":"search/index.html","comments":1,"layout":"page","_id":"clm7w97qz0004kb0m3c7g0vu1","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Tags","date":"2023-08-14T20:23:33.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: Tags\ndate: 2023-08-14 22:23:33\ntype: tags\n---\n","updated":"2023-08-14T20:24:53.854Z","path":"tags/index.html","comments":1,"layout":"page","_id":"clm7w97r10007kb0m1i0wg7yi","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"draft1","_content":"","source":"_drafts/draft1.md","raw":"---\ntitle: draft1\ntags:\n---\n","slug":"draft1","published":0,"date":"2023-08-15T06:43:03.313Z","updated":"2023-08-15T06:43:03.313Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clm7w97qu0001kb0mck2q2xjb","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"00. Article publishing failure problem summary","date":"2023-01-15T13:00:00.000Z","_content":"\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nHere is a summary of all the possible reasons for publishing failure in Hexo.\n\n#### <font size=3 color=#4169E1>1. Header information is incorrect</font> \nPlease strictly follow the header format:\n```Swift \n---\ntitle: 00. Article publishing failure problem summary\ndate: 2023-01-15 14:00:00\ncategories: \n- [Others, 00. others]\ntags:\n- hexo\n- configuration\n- tool\n---\n```\n**Note:**   \n**There are no empty lines in the first row.**   \n**All the keywords 'title','date','categories','tags' must be in lower case.**\n\n#### <font size=3 color=#4169E1>2. Picture does not show</font> \n\nThe correct image format is as follows:   \n{% img /assets/Demo/wallpaper-2311325.jpg %}    \n{% img /assets/Demo/wallpaper-878514.jpg %}\n\n\n#### <font size=3 color=#4169E1>3. Change the font</font> \nOn the basis of this article below:       \nhttps://blog.csdn.net/Reinhart_L/article/details/122587975       \n(1) Enter. / themes/cactus/source/CSS / _variables styl, can change the font;   \n(2) The available fonts are in . /themes/cactus/source/lib/, cactus comes with only two kinds of 'meslo-LG' and 'vazir-font', you can download them yourself if you need.\n\n\n\n#### <font size=3 color=gray>*Reference*</font>\n[1] [Why should we avoid using closures in Swift structs?](https://ohmyswift.com/blog/2020/01/10/why-should-we-avoid-using-closures-in-swift-structs/)  \n[2] https://github.com/probberechts/hexo-theme-cactus\n","source":"_posts/Others/00. Article publishing failure problem summary.md","raw":"---\ntitle: 00. Article publishing failure problem summary\ndate: 2023-01-15 14:00:00\ncategories: \n- [Others]\ntags:\n- hexo\n- configuration\n- tool\n---\n\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nHere is a summary of all the possible reasons for publishing failure in Hexo.\n\n#### <font size=3 color=#4169E1>1. Header information is incorrect</font> \nPlease strictly follow the header format:\n```Swift \n---\ntitle: 00. Article publishing failure problem summary\ndate: 2023-01-15 14:00:00\ncategories: \n- [Others, 00. others]\ntags:\n- hexo\n- configuration\n- tool\n---\n```\n**Note:**   \n**There are no empty lines in the first row.**   \n**All the keywords 'title','date','categories','tags' must be in lower case.**\n\n#### <font size=3 color=#4169E1>2. Picture does not show</font> \n\nThe correct image format is as follows:   \n{% img /assets/Demo/wallpaper-2311325.jpg %}    \n{% img /assets/Demo/wallpaper-878514.jpg %}\n\n\n#### <font size=3 color=#4169E1>3. Change the font</font> \nOn the basis of this article below:       \nhttps://blog.csdn.net/Reinhart_L/article/details/122587975       \n(1) Enter. / themes/cactus/source/CSS / _variables styl, can change the font;   \n(2) The available fonts are in . /themes/cactus/source/lib/, cactus comes with only two kinds of 'meslo-LG' and 'vazir-font', you can download them yourself if you need.\n\n\n\n#### <font size=3 color=gray>*Reference*</font>\n[1] [Why should we avoid using closures in Swift structs?](https://ohmyswift.com/blog/2020/01/10/why-should-we-avoid-using-closures-in-swift-structs/)  \n[2] https://github.com/probberechts/hexo-theme-cactus\n","slug":"Others/00. Article publishing failure problem summary","published":1,"updated":"2023-09-03T12:30:26.706Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clm7w97qy0003kb0m083zaugo","content":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>Here is a summary of all the possible reasons for publishing failure in Hexo.</p>\n<h4 id=\"1-Header-information-is-incorrect\"><a href=\"#1-Header-information-is-incorrect\" class=\"headerlink\" title=\"1. Header information is incorrect\"></a><font size=3 color=#4169E1>1. Header information is incorrect</font></h4><p>Please strictly follow the header format:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">---</span></span><br><span class=\"line\">title: <span class=\"number\">00</span>. <span class=\"type\">Article</span> publishing failure problem summary</span><br><span class=\"line\">date: <span class=\"number\">2023</span><span class=\"operator\">-</span><span class=\"number\">01</span><span class=\"operator\">-</span><span class=\"number\">15</span> <span class=\"number\">14</span>:<span class=\"number\">00</span>:<span class=\"number\">00</span></span><br><span class=\"line\">categories: </span><br><span class=\"line\"><span class=\"operator\">-</span> [<span class=\"type\">Others</span>, <span class=\"number\">00</span>. others]</span><br><span class=\"line\">tags:</span><br><span class=\"line\"><span class=\"operator\">-</span> hexo</span><br><span class=\"line\"><span class=\"operator\">-</span> configuration</span><br><span class=\"line\"><span class=\"operator\">-</span> tool</span><br><span class=\"line\"><span class=\"operator\">---</span></span><br></pre></td></tr></table></figure>\n<p><strong>Note:</strong><br><strong>There are no empty lines in the first row.</strong><br><strong>All the keywords ‘title’,’date’,’categories’,’tags’ must be in lower case.</strong></p>\n<h4 id=\"2-Picture-does-not-show\"><a href=\"#2-Picture-does-not-show\" class=\"headerlink\" title=\"2. Picture does not show\"></a><font size=3 color=#4169E1>2. Picture does not show</font></h4><p>The correct image format is as follows:   </p>\n<img src=\"/assets/Demo/wallpaper-2311325.jpg\" class=\"\">    \n<img src=\"/assets/Demo/wallpaper-878514.jpg\" class=\"\">\n\n\n<h4 id=\"3-Change-the-font\"><a href=\"#3-Change-the-font\" class=\"headerlink\" title=\"3. Change the font\"></a><font size=3 color=#4169E1>3. Change the font</font></h4><p>On the basis of this article below:<br><a href=\"https://blog.csdn.net/Reinhart_L/article/details/122587975\">https://blog.csdn.net/Reinhart_L/article/details/122587975</a><br>(1) Enter. &#x2F; themes&#x2F;cactus&#x2F;source&#x2F;CSS &#x2F; _variables styl, can change the font;<br>(2) The available fonts are in . &#x2F;themes&#x2F;cactus&#x2F;source&#x2F;lib&#x2F;, cactus comes with only two kinds of ‘meslo-LG’ and ‘vazir-font’, you can download them yourself if you need.</p>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://ohmyswift.com/blog/2020/01/10/why-should-we-avoid-using-closures-in-swift-structs/\">Why should we avoid using closures in Swift structs?</a><br>[2] <a href=\"https://github.com/probberechts/hexo-theme-cactus\">https://github.com/probberechts/hexo-theme-cactus</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>Here is a summary of all the possible reasons for publishing failure in Hexo.</p>\n<h4 id=\"1-Header-information-is-incorrect\"><a href=\"#1-Header-information-is-incorrect\" class=\"headerlink\" title=\"1. Header information is incorrect\"></a><font size=3 color=#4169E1>1. Header information is incorrect</font></h4><p>Please strictly follow the header format:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">---</span></span><br><span class=\"line\">title: <span class=\"number\">00</span>. <span class=\"type\">Article</span> publishing failure problem summary</span><br><span class=\"line\">date: <span class=\"number\">2023</span><span class=\"operator\">-</span><span class=\"number\">01</span><span class=\"operator\">-</span><span class=\"number\">15</span> <span class=\"number\">14</span>:<span class=\"number\">00</span>:<span class=\"number\">00</span></span><br><span class=\"line\">categories: </span><br><span class=\"line\"><span class=\"operator\">-</span> [<span class=\"type\">Others</span>, <span class=\"number\">00</span>. others]</span><br><span class=\"line\">tags:</span><br><span class=\"line\"><span class=\"operator\">-</span> hexo</span><br><span class=\"line\"><span class=\"operator\">-</span> configuration</span><br><span class=\"line\"><span class=\"operator\">-</span> tool</span><br><span class=\"line\"><span class=\"operator\">---</span></span><br></pre></td></tr></table></figure>\n<p><strong>Note:</strong><br><strong>There are no empty lines in the first row.</strong><br><strong>All the keywords ‘title’,’date’,’categories’,’tags’ must be in lower case.</strong></p>\n<h4 id=\"2-Picture-does-not-show\"><a href=\"#2-Picture-does-not-show\" class=\"headerlink\" title=\"2. Picture does not show\"></a><font size=3 color=#4169E1>2. Picture does not show</font></h4><p>The correct image format is as follows:   </p>\n<img src=\"/assets/Demo/wallpaper-2311325.jpg\" class=\"\">    \n<img src=\"/assets/Demo/wallpaper-878514.jpg\" class=\"\">\n\n\n<h4 id=\"3-Change-the-font\"><a href=\"#3-Change-the-font\" class=\"headerlink\" title=\"3. Change the font\"></a><font size=3 color=#4169E1>3. Change the font</font></h4><p>On the basis of this article below:<br><a href=\"https://blog.csdn.net/Reinhart_L/article/details/122587975\">https://blog.csdn.net/Reinhart_L/article/details/122587975</a><br>(1) Enter. &#x2F; themes&#x2F;cactus&#x2F;source&#x2F;CSS &#x2F; _variables styl, can change the font;<br>(2) The available fonts are in . &#x2F;themes&#x2F;cactus&#x2F;source&#x2F;lib&#x2F;, cactus comes with only two kinds of ‘meslo-LG’ and ‘vazir-font’, you can download them yourself if you need.</p>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://ohmyswift.com/blog/2020/01/10/why-should-we-avoid-using-closures-in-swift-structs/\">Why should we avoid using closures in Swift structs?</a><br>[2] <a href=\"https://github.com/probberechts/hexo-theme-cactus\">https://github.com/probberechts/hexo-theme-cactus</a></p>\n"},{"title":"00. SwiftUI vs UIKit","date":"2023-09-02T20:00:00.000Z","_content":"\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nJust as we struggled with whether or not to embrace Swift, are many people today struggling with whether or not to embrace SwiftUI. Then I can tell you very clearly that if you choose to embrace Swift, then SwiftUI is a hurdle you won't be able to get past sooner or later! Take my advice, it's not too late to embrace SwiftUI, you'll find more and more hiring JD's asking for SwiftUI. I've also been learning SwiftUI on my own lately, and I'm going to be writing a series of posts about SwiftUI, so let's start with this one on SwiftUI vs UIKit and why we're going to go with SwiftUI.\n\n\n#### <font size=3 color=#4169E1>1. UIKit</font> \n\nUIKit was publicly released in 2008 and is built on the object-oriented Objective-C language. In UIKit, all views inherit from a class called UIView, which has a very large number of properties and methods-such as background, layout, layers for rendering, and so on-there are almost 200 properties, and every UIView and subclass of UIView, whether you want it or not, will have Every UIView and subclass of UIView will have these properties whether you want them or not. \n\nFor example, there is a special UIStackView in UIKit, which is a view type that will not be rendered for the design intent of making layouts simpler. But because of the inheritance mechanism, even though it doesn't render, it has those various unused properties including background color. \n\nSo, in UIKit, when we draw a UI that contains a series of labels/buttons, etc., it's a stack of \"big\" and \"heavy\" Views that contain more than 200 attributes.\n\n#### <font size=3 color=#4169E1>2. SwiftUI</font> \n\nBorn in 2019, SwiftUI is a modern framework for building user interfaces introduced by Apple. As new devices evolve in terms of processing power, graphics performance, and other technical features, SwiftUI takes full advantage of these new hardware and technical capabilities, optimizing and tuning the underlying implementation so that apps running on new devices can render interfaces, handle user interactions, and deliver smoother animations and effects more efficiently.\n\nSwiftUI is based on responsive programming approach to UI development, all the views are fine-grained structure struct, compared struct and class can be known, Swift is very much advocate the use of struct, the specific why will not expand.  In SwiftUI, each view is a lightweight struct structure, which abandons UIKit's inheritance approach and uses protocols to contain the few properties and modifiers needed. All in all, SwiftUI is much more performant and faster than UIKit, with less overhead for creating the same view.\n\nIn addition, SwiftUI provides a number of keywords like State, which not only allows us to write less code, but also allows us to focus more on the UI changes caused by value changes in responsive programming thinking. Since class can freely modify the value of attributes, which may bring complicated logic, in contrast, struct under the SwiftUI development of UI code is more \"independent\" (many of the capabilities it has also provided you, do not need to build the wheel again)\n\n#### <font size=3 color=#4169E1>3. Final Thoughts </font> \n\nBecause SwiftUI will only come out in 2019, compatibility for previous iOS versions is expected to be a bit of a problem. Because UIKit has been developed for many years, SwiftUI has not been as powerful as UIKit third-party libraries, but it is only a matter of time. And Apple in order to be compatible with some of the methods used, such as UIHostingController. read a lot of foreign articles, many of them developers are very clear point: SwiftUI will eventually replace UIKit, and UIKit will eventually be abandoned.\n\n#### <font size=3 color=#4169E1>4. Recommended Learning Resources: </font> \n1. Apple Official:   \n[1] https://developer.apple.com/tutorials/swiftui  \n[2] https://developer.apple.com/documentation/SwiftUI/View-fundamentals\n2. Hackingwithswift Series:  \n[1] https://www.hackingwithswift.com/books/ios-swiftui/\n3. SwiftfulThinking Series:    \n[1] https://www.youtube.com/playlist?list=PLwvDm4VfkdphqETTBf-DdjCoAvhai1QpO   \n[2] https://www.bilibili.com/video/BV1KY411f7in   \n[3] https://github.com/SwiftfulThinking   \n\n","source":"_posts/SwiftUI/00. SwiftUI vs UIKit.md","raw":"---\ntitle: 00. SwiftUI vs UIKit\ndate: 2023-09-02 22:00:00\ncategories: \n- [SwiftUI]\ntags:\n- SwiftUI\n- UIKit\n---\n\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nJust as we struggled with whether or not to embrace Swift, are many people today struggling with whether or not to embrace SwiftUI. Then I can tell you very clearly that if you choose to embrace Swift, then SwiftUI is a hurdle you won't be able to get past sooner or later! Take my advice, it's not too late to embrace SwiftUI, you'll find more and more hiring JD's asking for SwiftUI. I've also been learning SwiftUI on my own lately, and I'm going to be writing a series of posts about SwiftUI, so let's start with this one on SwiftUI vs UIKit and why we're going to go with SwiftUI.\n\n\n#### <font size=3 color=#4169E1>1. UIKit</font> \n\nUIKit was publicly released in 2008 and is built on the object-oriented Objective-C language. In UIKit, all views inherit from a class called UIView, which has a very large number of properties and methods-such as background, layout, layers for rendering, and so on-there are almost 200 properties, and every UIView and subclass of UIView, whether you want it or not, will have Every UIView and subclass of UIView will have these properties whether you want them or not. \n\nFor example, there is a special UIStackView in UIKit, which is a view type that will not be rendered for the design intent of making layouts simpler. But because of the inheritance mechanism, even though it doesn't render, it has those various unused properties including background color. \n\nSo, in UIKit, when we draw a UI that contains a series of labels/buttons, etc., it's a stack of \"big\" and \"heavy\" Views that contain more than 200 attributes.\n\n#### <font size=3 color=#4169E1>2. SwiftUI</font> \n\nBorn in 2019, SwiftUI is a modern framework for building user interfaces introduced by Apple. As new devices evolve in terms of processing power, graphics performance, and other technical features, SwiftUI takes full advantage of these new hardware and technical capabilities, optimizing and tuning the underlying implementation so that apps running on new devices can render interfaces, handle user interactions, and deliver smoother animations and effects more efficiently.\n\nSwiftUI is based on responsive programming approach to UI development, all the views are fine-grained structure struct, compared struct and class can be known, Swift is very much advocate the use of struct, the specific why will not expand.  In SwiftUI, each view is a lightweight struct structure, which abandons UIKit's inheritance approach and uses protocols to contain the few properties and modifiers needed. All in all, SwiftUI is much more performant and faster than UIKit, with less overhead for creating the same view.\n\nIn addition, SwiftUI provides a number of keywords like State, which not only allows us to write less code, but also allows us to focus more on the UI changes caused by value changes in responsive programming thinking. Since class can freely modify the value of attributes, which may bring complicated logic, in contrast, struct under the SwiftUI development of UI code is more \"independent\" (many of the capabilities it has also provided you, do not need to build the wheel again)\n\n#### <font size=3 color=#4169E1>3. Final Thoughts </font> \n\nBecause SwiftUI will only come out in 2019, compatibility for previous iOS versions is expected to be a bit of a problem. Because UIKit has been developed for many years, SwiftUI has not been as powerful as UIKit third-party libraries, but it is only a matter of time. And Apple in order to be compatible with some of the methods used, such as UIHostingController. read a lot of foreign articles, many of them developers are very clear point: SwiftUI will eventually replace UIKit, and UIKit will eventually be abandoned.\n\n#### <font size=3 color=#4169E1>4. Recommended Learning Resources: </font> \n1. Apple Official:   \n[1] https://developer.apple.com/tutorials/swiftui  \n[2] https://developer.apple.com/documentation/SwiftUI/View-fundamentals\n2. Hackingwithswift Series:  \n[1] https://www.hackingwithswift.com/books/ios-swiftui/\n3. SwiftfulThinking Series:    \n[1] https://www.youtube.com/playlist?list=PLwvDm4VfkdphqETTBf-DdjCoAvhai1QpO   \n[2] https://www.bilibili.com/video/BV1KY411f7in   \n[3] https://github.com/SwiftfulThinking   \n\n","slug":"SwiftUI/00. SwiftUI vs UIKit","published":1,"updated":"2023-09-06T12:33:20.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clm7w97qz0005kb0maq344ozk","content":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>Just as we struggled with whether or not to embrace Swift, are many people today struggling with whether or not to embrace SwiftUI. Then I can tell you very clearly that if you choose to embrace Swift, then SwiftUI is a hurdle you won’t be able to get past sooner or later! Take my advice, it’s not too late to embrace SwiftUI, you’ll find more and more hiring JD’s asking for SwiftUI. I’ve also been learning SwiftUI on my own lately, and I’m going to be writing a series of posts about SwiftUI, so let’s start with this one on SwiftUI vs UIKit and why we’re going to go with SwiftUI.</p>\n<h4 id=\"1-UIKit\"><a href=\"#1-UIKit\" class=\"headerlink\" title=\"1. UIKit\"></a><font size=3 color=#4169E1>1. UIKit</font></h4><p>UIKit was publicly released in 2008 and is built on the object-oriented Objective-C language. In UIKit, all views inherit from a class called UIView, which has a very large number of properties and methods-such as background, layout, layers for rendering, and so on-there are almost 200 properties, and every UIView and subclass of UIView, whether you want it or not, will have Every UIView and subclass of UIView will have these properties whether you want them or not. </p>\n<p>For example, there is a special UIStackView in UIKit, which is a view type that will not be rendered for the design intent of making layouts simpler. But because of the inheritance mechanism, even though it doesn’t render, it has those various unused properties including background color. </p>\n<p>So, in UIKit, when we draw a UI that contains a series of labels&#x2F;buttons, etc., it’s a stack of “big” and “heavy” Views that contain more than 200 attributes.</p>\n<h4 id=\"2-SwiftUI\"><a href=\"#2-SwiftUI\" class=\"headerlink\" title=\"2. SwiftUI\"></a><font size=3 color=#4169E1>2. SwiftUI</font></h4><p>Born in 2019, SwiftUI is a modern framework for building user interfaces introduced by Apple. As new devices evolve in terms of processing power, graphics performance, and other technical features, SwiftUI takes full advantage of these new hardware and technical capabilities, optimizing and tuning the underlying implementation so that apps running on new devices can render interfaces, handle user interactions, and deliver smoother animations and effects more efficiently.</p>\n<p>SwiftUI is based on responsive programming approach to UI development, all the views are fine-grained structure struct, compared struct and class can be known, Swift is very much advocate the use of struct, the specific why will not expand.  In SwiftUI, each view is a lightweight struct structure, which abandons UIKit’s inheritance approach and uses protocols to contain the few properties and modifiers needed. All in all, SwiftUI is much more performant and faster than UIKit, with less overhead for creating the same view.</p>\n<p>In addition, SwiftUI provides a number of keywords like State, which not only allows us to write less code, but also allows us to focus more on the UI changes caused by value changes in responsive programming thinking. Since class can freely modify the value of attributes, which may bring complicated logic, in contrast, struct under the SwiftUI development of UI code is more “independent” (many of the capabilities it has also provided you, do not need to build the wheel again)</p>\n<h4 id=\"3-Final-Thoughts\"><a href=\"#3-Final-Thoughts\" class=\"headerlink\" title=\"3. Final Thoughts \"></a><font size=3 color=#4169E1>3. Final Thoughts </font></h4><p>Because SwiftUI will only come out in 2019, compatibility for previous iOS versions is expected to be a bit of a problem. Because UIKit has been developed for many years, SwiftUI has not been as powerful as UIKit third-party libraries, but it is only a matter of time. And Apple in order to be compatible with some of the methods used, such as UIHostingController. read a lot of foreign articles, many of them developers are very clear point: SwiftUI will eventually replace UIKit, and UIKit will eventually be abandoned.</p>\n<h4 id=\"4-Recommended-Learning-Resources\"><a href=\"#4-Recommended-Learning-Resources\" class=\"headerlink\" title=\"4. Recommended Learning Resources: \"></a><font size=3 color=#4169E1>4. Recommended Learning Resources: </font></h4><ol>\n<li>Apple Official:<br>[1] <a href=\"https://developer.apple.com/tutorials/swiftui\">https://developer.apple.com/tutorials/swiftui</a><br>[2] <a href=\"https://developer.apple.com/documentation/SwiftUI/View-fundamentals\">https://developer.apple.com/documentation/SwiftUI/View-fundamentals</a></li>\n<li>Hackingwithswift Series:<br>[1] <a href=\"https://www.hackingwithswift.com/books/ios-swiftui/\">https://www.hackingwithswift.com/books/ios-swiftui/</a></li>\n<li>SwiftfulThinking Series:<br>[1] <a href=\"https://www.youtube.com/playlist?list=PLwvDm4VfkdphqETTBf-DdjCoAvhai1QpO\">https://www.youtube.com/playlist?list=PLwvDm4VfkdphqETTBf-DdjCoAvhai1QpO</a><br>[2] <a href=\"https://www.bilibili.com/video/BV1KY411f7in\">https://www.bilibili.com/video/BV1KY411f7in</a><br>[3] <a href=\"https://github.com/SwiftfulThinking\">https://github.com/SwiftfulThinking</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>Just as we struggled with whether or not to embrace Swift, are many people today struggling with whether or not to embrace SwiftUI. Then I can tell you very clearly that if you choose to embrace Swift, then SwiftUI is a hurdle you won’t be able to get past sooner or later! Take my advice, it’s not too late to embrace SwiftUI, you’ll find more and more hiring JD’s asking for SwiftUI. I’ve also been learning SwiftUI on my own lately, and I’m going to be writing a series of posts about SwiftUI, so let’s start with this one on SwiftUI vs UIKit and why we’re going to go with SwiftUI.</p>\n<h4 id=\"1-UIKit\"><a href=\"#1-UIKit\" class=\"headerlink\" title=\"1. UIKit\"></a><font size=3 color=#4169E1>1. UIKit</font></h4><p>UIKit was publicly released in 2008 and is built on the object-oriented Objective-C language. In UIKit, all views inherit from a class called UIView, which has a very large number of properties and methods-such as background, layout, layers for rendering, and so on-there are almost 200 properties, and every UIView and subclass of UIView, whether you want it or not, will have Every UIView and subclass of UIView will have these properties whether you want them or not. </p>\n<p>For example, there is a special UIStackView in UIKit, which is a view type that will not be rendered for the design intent of making layouts simpler. But because of the inheritance mechanism, even though it doesn’t render, it has those various unused properties including background color. </p>\n<p>So, in UIKit, when we draw a UI that contains a series of labels&#x2F;buttons, etc., it’s a stack of “big” and “heavy” Views that contain more than 200 attributes.</p>\n<h4 id=\"2-SwiftUI\"><a href=\"#2-SwiftUI\" class=\"headerlink\" title=\"2. SwiftUI\"></a><font size=3 color=#4169E1>2. SwiftUI</font></h4><p>Born in 2019, SwiftUI is a modern framework for building user interfaces introduced by Apple. As new devices evolve in terms of processing power, graphics performance, and other technical features, SwiftUI takes full advantage of these new hardware and technical capabilities, optimizing and tuning the underlying implementation so that apps running on new devices can render interfaces, handle user interactions, and deliver smoother animations and effects more efficiently.</p>\n<p>SwiftUI is based on responsive programming approach to UI development, all the views are fine-grained structure struct, compared struct and class can be known, Swift is very much advocate the use of struct, the specific why will not expand.  In SwiftUI, each view is a lightweight struct structure, which abandons UIKit’s inheritance approach and uses protocols to contain the few properties and modifiers needed. All in all, SwiftUI is much more performant and faster than UIKit, with less overhead for creating the same view.</p>\n<p>In addition, SwiftUI provides a number of keywords like State, which not only allows us to write less code, but also allows us to focus more on the UI changes caused by value changes in responsive programming thinking. Since class can freely modify the value of attributes, which may bring complicated logic, in contrast, struct under the SwiftUI development of UI code is more “independent” (many of the capabilities it has also provided you, do not need to build the wheel again)</p>\n<h4 id=\"3-Final-Thoughts\"><a href=\"#3-Final-Thoughts\" class=\"headerlink\" title=\"3. Final Thoughts \"></a><font size=3 color=#4169E1>3. Final Thoughts </font></h4><p>Because SwiftUI will only come out in 2019, compatibility for previous iOS versions is expected to be a bit of a problem. Because UIKit has been developed for many years, SwiftUI has not been as powerful as UIKit third-party libraries, but it is only a matter of time. And Apple in order to be compatible with some of the methods used, such as UIHostingController. read a lot of foreign articles, many of them developers are very clear point: SwiftUI will eventually replace UIKit, and UIKit will eventually be abandoned.</p>\n<h4 id=\"4-Recommended-Learning-Resources\"><a href=\"#4-Recommended-Learning-Resources\" class=\"headerlink\" title=\"4. Recommended Learning Resources: \"></a><font size=3 color=#4169E1>4. Recommended Learning Resources: </font></h4><ol>\n<li>Apple Official:<br>[1] <a href=\"https://developer.apple.com/tutorials/swiftui\">https://developer.apple.com/tutorials/swiftui</a><br>[2] <a href=\"https://developer.apple.com/documentation/SwiftUI/View-fundamentals\">https://developer.apple.com/documentation/SwiftUI/View-fundamentals</a></li>\n<li>Hackingwithswift Series:<br>[1] <a href=\"https://www.hackingwithswift.com/books/ios-swiftui/\">https://www.hackingwithswift.com/books/ios-swiftui/</a></li>\n<li>SwiftfulThinking Series:<br>[1] <a href=\"https://www.youtube.com/playlist?list=PLwvDm4VfkdphqETTBf-DdjCoAvhai1QpO\">https://www.youtube.com/playlist?list=PLwvDm4VfkdphqETTBf-DdjCoAvhai1QpO</a><br>[2] <a href=\"https://www.bilibili.com/video/BV1KY411f7in\">https://www.bilibili.com/video/BV1KY411f7in</a><br>[3] <a href=\"https://github.com/SwiftfulThinking\">https://github.com/SwiftfulThinking</a></li>\n</ol>\n"},{"title":"01. Basic Concepts (1)","date":"2023-09-03T12:00:00.000Z","_content":"\n\n<font color=gray size=2>*It will take about 5 minutes to finish reading this article.*</font>\n\nLet's start with a piece of SwiftUI code and its Canvas display as follows:  \n\n\n{% img /assets/SwiftUI/000.png %}\n\nExplain this code:\n```Swift\nimport SwiftUI\n\nstruct ContentView: View {\n    var body: some View {\n        Button(\"Hello, world!\") {\n        }\n        .background(.red)\n        .frame(width: 200, height: 200)\n    }\n}\n\n```\n\n(1) Create a ContentView structure and follow the View protocol. This means that ContentView is a view type and needs to implement the body property.    \n\n(2) The body attribute returns a some View type, which means that any view that conforms to the View protocol can be returned.\n\n(3) In the body, we have created a view that displays the text \"Hello World!\" using the Button view.    \n\n(4) Several modifiers are applied to the Button view to customize its appearance, such as background to set the background color and frame to set the size to 200*200.  \n\nHow does such a few lines of code accomplish the display of a view?\nIn fact, SwiftUI combines these views and modifiers to form a complete view hierarchy based on the view hierarchy structure and modifier chaining. SwiftUI converts the view hierarchy and modifier chain from the declarative description to the underlying rendering instructions. These rendering instructions are passed to the system, which then performs the actual drawing and rendering operations that are ultimately rendered on the screen. \n\nBelow we introduce a few concepts in conjunction with the code above.\n\n#### <font size=3 color=#4169E1>1. View Protocol</font> \n\nThe View protocol is one of the core protocols in SwiftUI that defines the fundamentals of building user interfaces and how to use them.The source code for the View protocol is as follows:\n\n```Swift\npublic protocol View {\n    associatedtype Body : View\n    @ViewBuilder var body: Self.Body { get }\n}\n```\n\nAs you can see from the source code, the View protocol has the following key features:\n\n'associatedtype Body: View' :    \nThe View protocol uses the associated type associatedtype, which means that types that follow the View protocol must specify a concrete type associated with the View. This concrete type is named Body and must also conform to the View protocol.\n\n'var body: Self.Body { get }' :   \nThe View protocol requires that followers must provide a computed property named body. This property returns a view type that is the previously defined association type Body.\n\nThe View protocol works by returning a specific view hierarchy via the body property. This view hierarchy can contain other views or components to form a complex user interface, and SwiftUI renders the final user interface based on this view hierarchy.\n\n#### <font size=3 color=#4169E1>2. some View</font> \nUsing 'some View' as a return type means that the view can return any type that conforms to the View protocol. This syntax is called opaque return type, a feature that allows the compiler to infer the type of view returned without requiring the developer to explicitly specify it. It means that \"an object conforms to the View protocol, but we do not care whether it is a Button or Text, as long as the compiler knows on the line\".\n\n```Swift\nimport SwiftUI\n\nstruct ContentView: View {\n    var body: Button { //This is not a View but a Button.\n        Button(\"Hello, world!\") {\n        }\n        .background(.red)\n        .frame(width: 200, height: 200)\n    }\n}\n\n``` \n\nThe effect of the above code is the same, only the lack of flexibility, each time you need to figure out what type of specific return in the body, too tired, in fact, to the compiler on the line.         \n\n'some' is a special generic type placeholder in Swift that supports more complex combinations and reuse of multiple view types, making SwiftUI code more flexible and concise and reducing the possibility of type errors, which is also a reflection of SwiftUI's polymorphism.\n\n\n#### <font size=3 color=#4169E1>3. Modifier</font> \n\nLet's take a look at the effect of executing each of the following two types of code:     \n\n{% img /assets/SwiftUI/001.png %}    \n\nAttribute modifier code after switching the order:\n\n{% img /assets/SwiftUI/002.png %}      \n\nJust adjusting the order in which the two lines of code are executed results in a different outcome, which almost turns our perception upside down.\n\nHere we need to understand the working mechanism of Modifier in SwiftUI, unlike UIKit where each modifier acts as an object, you can simply think of each modifier in SwiftUI as \"working alone\", for example, after modifier A modifies an object, it will become another object after modifier B modifies it. For example, after modifier A is modified, it forms an object, and after it is modified by modifier B, it becomes another object.\n```Swift\nButton(\"Hello, world!\") {\n    print(type(of: self.body))\n}    \n.background(.red)\n.frame(width: 200, height: 200)\n```\n\nWith type you can print the exact type of a value as follows:\n\n```Swift\nModifiedContent<ModifiedContent<Button<Text>, _BackgroundStyleModifier<Color>>, _FrameLayout>\n```\n\nIt first generates a Button with text and background color via 'ModifiedContent<Button<Text>, _BackgroundStyleModifier<Color>'. Then, it sets a larger frame to it via 'ModifiedContent<..., _framayout >'.\n\nSo, end up with a stack of 'ModifiedContent' types - each of which transforms a view plus the actual changes to be made, rather than modifying the view directly.   \n\nSimply, the front Modified A production \"product\" is like a brick out of the kiln pit has been molded, the back of the Modifier B, Modifier C ... Modifier B, Modifier C ... can not be changed, only in the original basis of \"stacking\".\n\n{% img /assets/SwiftUI/003.png %}    \n \n#### <font size=3 color=gray>*Reference*</font>\n[1] [Why modifier order matters](https://www.hackingwithswift.com/books/ios-swiftui/why-modifier-order-matters)  \n[2] [Why does SwiftUI use “some View” for its view type?](https://www.hackingwithswift.com/books/ios-swiftui/why-does-swiftui-use-some-view-for-its-view-type)\n\n","source":"_posts/SwiftUI/01. Basic Concepts (1).md","raw":"---\ntitle: 01. Basic Concepts (1)\ndate: 2023-09-03 14:00:00\ncategories: \n- [SwiftUI]\ntags:\n- ContentView\n- View\n---\n\n\n<font color=gray size=2>*It will take about 5 minutes to finish reading this article.*</font>\n\nLet's start with a piece of SwiftUI code and its Canvas display as follows:  \n\n\n{% img /assets/SwiftUI/000.png %}\n\nExplain this code:\n```Swift\nimport SwiftUI\n\nstruct ContentView: View {\n    var body: some View {\n        Button(\"Hello, world!\") {\n        }\n        .background(.red)\n        .frame(width: 200, height: 200)\n    }\n}\n\n```\n\n(1) Create a ContentView structure and follow the View protocol. This means that ContentView is a view type and needs to implement the body property.    \n\n(2) The body attribute returns a some View type, which means that any view that conforms to the View protocol can be returned.\n\n(3) In the body, we have created a view that displays the text \"Hello World!\" using the Button view.    \n\n(4) Several modifiers are applied to the Button view to customize its appearance, such as background to set the background color and frame to set the size to 200*200.  \n\nHow does such a few lines of code accomplish the display of a view?\nIn fact, SwiftUI combines these views and modifiers to form a complete view hierarchy based on the view hierarchy structure and modifier chaining. SwiftUI converts the view hierarchy and modifier chain from the declarative description to the underlying rendering instructions. These rendering instructions are passed to the system, which then performs the actual drawing and rendering operations that are ultimately rendered on the screen. \n\nBelow we introduce a few concepts in conjunction with the code above.\n\n#### <font size=3 color=#4169E1>1. View Protocol</font> \n\nThe View protocol is one of the core protocols in SwiftUI that defines the fundamentals of building user interfaces and how to use them.The source code for the View protocol is as follows:\n\n```Swift\npublic protocol View {\n    associatedtype Body : View\n    @ViewBuilder var body: Self.Body { get }\n}\n```\n\nAs you can see from the source code, the View protocol has the following key features:\n\n'associatedtype Body: View' :    \nThe View protocol uses the associated type associatedtype, which means that types that follow the View protocol must specify a concrete type associated with the View. This concrete type is named Body and must also conform to the View protocol.\n\n'var body: Self.Body { get }' :   \nThe View protocol requires that followers must provide a computed property named body. This property returns a view type that is the previously defined association type Body.\n\nThe View protocol works by returning a specific view hierarchy via the body property. This view hierarchy can contain other views or components to form a complex user interface, and SwiftUI renders the final user interface based on this view hierarchy.\n\n#### <font size=3 color=#4169E1>2. some View</font> \nUsing 'some View' as a return type means that the view can return any type that conforms to the View protocol. This syntax is called opaque return type, a feature that allows the compiler to infer the type of view returned without requiring the developer to explicitly specify it. It means that \"an object conforms to the View protocol, but we do not care whether it is a Button or Text, as long as the compiler knows on the line\".\n\n```Swift\nimport SwiftUI\n\nstruct ContentView: View {\n    var body: Button { //This is not a View but a Button.\n        Button(\"Hello, world!\") {\n        }\n        .background(.red)\n        .frame(width: 200, height: 200)\n    }\n}\n\n``` \n\nThe effect of the above code is the same, only the lack of flexibility, each time you need to figure out what type of specific return in the body, too tired, in fact, to the compiler on the line.         \n\n'some' is a special generic type placeholder in Swift that supports more complex combinations and reuse of multiple view types, making SwiftUI code more flexible and concise and reducing the possibility of type errors, which is also a reflection of SwiftUI's polymorphism.\n\n\n#### <font size=3 color=#4169E1>3. Modifier</font> \n\nLet's take a look at the effect of executing each of the following two types of code:     \n\n{% img /assets/SwiftUI/001.png %}    \n\nAttribute modifier code after switching the order:\n\n{% img /assets/SwiftUI/002.png %}      \n\nJust adjusting the order in which the two lines of code are executed results in a different outcome, which almost turns our perception upside down.\n\nHere we need to understand the working mechanism of Modifier in SwiftUI, unlike UIKit where each modifier acts as an object, you can simply think of each modifier in SwiftUI as \"working alone\", for example, after modifier A modifies an object, it will become another object after modifier B modifies it. For example, after modifier A is modified, it forms an object, and after it is modified by modifier B, it becomes another object.\n```Swift\nButton(\"Hello, world!\") {\n    print(type(of: self.body))\n}    \n.background(.red)\n.frame(width: 200, height: 200)\n```\n\nWith type you can print the exact type of a value as follows:\n\n```Swift\nModifiedContent<ModifiedContent<Button<Text>, _BackgroundStyleModifier<Color>>, _FrameLayout>\n```\n\nIt first generates a Button with text and background color via 'ModifiedContent<Button<Text>, _BackgroundStyleModifier<Color>'. Then, it sets a larger frame to it via 'ModifiedContent<..., _framayout >'.\n\nSo, end up with a stack of 'ModifiedContent' types - each of which transforms a view plus the actual changes to be made, rather than modifying the view directly.   \n\nSimply, the front Modified A production \"product\" is like a brick out of the kiln pit has been molded, the back of the Modifier B, Modifier C ... Modifier B, Modifier C ... can not be changed, only in the original basis of \"stacking\".\n\n{% img /assets/SwiftUI/003.png %}    \n \n#### <font size=3 color=gray>*Reference*</font>\n[1] [Why modifier order matters](https://www.hackingwithswift.com/books/ios-swiftui/why-modifier-order-matters)  \n[2] [Why does SwiftUI use “some View” for its view type?](https://www.hackingwithswift.com/books/ios-swiftui/why-does-swiftui-use-some-view-for-its-view-type)\n\n","slug":"SwiftUI/01. Basic Concepts (1)","published":1,"updated":"2023-09-06T12:32:00.339Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clm7w97r10008kb0mcxcjcoqe","content":"<p><font color=gray size=2><em>It will take about 5 minutes to finish reading this article.</em></font></p>\n<p>Let’s start with a piece of SwiftUI code and its Canvas display as follows:  </p>\n<img src=\"/assets/SwiftUI/000.png\" class=\"\">\n\n<p>Explain this code:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> SwiftUI</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span>: <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Button</span>(<span class=\"string\">&quot;Hello, world!&quot;</span>) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .background(.red)</span><br><span class=\"line\">        .frame(width: <span class=\"number\">200</span>, height: <span class=\"number\">200</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>(1) Create a ContentView structure and follow the View protocol. This means that ContentView is a view type and needs to implement the body property.    </p>\n<p>(2) The body attribute returns a some View type, which means that any view that conforms to the View protocol can be returned.</p>\n<p>(3) In the body, we have created a view that displays the text “Hello World!” using the Button view.    </p>\n<p>(4) Several modifiers are applied to the Button view to customize its appearance, such as background to set the background color and frame to set the size to 200*200.  </p>\n<p>How does such a few lines of code accomplish the display of a view?<br>In fact, SwiftUI combines these views and modifiers to form a complete view hierarchy based on the view hierarchy structure and modifier chaining. SwiftUI converts the view hierarchy and modifier chain from the declarative description to the underlying rendering instructions. These rendering instructions are passed to the system, which then performs the actual drawing and rendering operations that are ultimately rendered on the screen. </p>\n<p>Below we introduce a few concepts in conjunction with the code above.</p>\n<h4 id=\"1-View-Protocol\"><a href=\"#1-View-Protocol\" class=\"headerlink\" title=\"1. View Protocol\"></a><font size=3 color=#4169E1>1. View Protocol</font></h4><p>The View protocol is one of the core protocols in SwiftUI that defines the fundamentals of building user interfaces and how to use them.The source code for the View protocol is as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">protocol</span> <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">associatedtype</span> <span class=\"type\">Body</span> : <span class=\"type\">View</span></span><br><span class=\"line\">    <span class=\"meta\">@ViewBuilder</span> <span class=\"keyword\">var</span> body: <span class=\"keyword\">Self</span>.<span class=\"type\">Body</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>As you can see from the source code, the View protocol has the following key features:</p>\n<p>‘associatedtype Body: View’ :<br>The View protocol uses the associated type associatedtype, which means that types that follow the View protocol must specify a concrete type associated with the View. This concrete type is named Body and must also conform to the View protocol.</p>\n<p>‘var body: Self.Body { get }’ :<br>The View protocol requires that followers must provide a computed property named body. This property returns a view type that is the previously defined association type Body.</p>\n<p>The View protocol works by returning a specific view hierarchy via the body property. This view hierarchy can contain other views or components to form a complex user interface, and SwiftUI renders the final user interface based on this view hierarchy.</p>\n<h4 id=\"2-some-View\"><a href=\"#2-some-View\" class=\"headerlink\" title=\"2. some View\"></a><font size=3 color=#4169E1>2. some View</font></h4><p>Using ‘some View’ as a return type means that the view can return any type that conforms to the View protocol. This syntax is called opaque return type, a feature that allows the compiler to infer the type of view returned without requiring the developer to explicitly specify it. It means that “an object conforms to the View protocol, but we do not care whether it is a Button or Text, as long as the compiler knows on the line”.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> SwiftUI</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span>: <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"type\">Button</span> &#123; <span class=\"comment\">//This is not a View but a Button.</span></span><br><span class=\"line\">        <span class=\"type\">Button</span>(<span class=\"string\">&quot;Hello, world!&quot;</span>) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .background(.red)</span><br><span class=\"line\">        .frame(width: <span class=\"number\">200</span>, height: <span class=\"number\">200</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>The effect of the above code is the same, only the lack of flexibility, each time you need to figure out what type of specific return in the body, too tired, in fact, to the compiler on the line.         </p>\n<p>‘some’ is a special generic type placeholder in Swift that supports more complex combinations and reuse of multiple view types, making SwiftUI code more flexible and concise and reducing the possibility of type errors, which is also a reflection of SwiftUI’s polymorphism.</p>\n<h4 id=\"3-Modifier\"><a href=\"#3-Modifier\" class=\"headerlink\" title=\"3. Modifier\"></a><font size=3 color=#4169E1>3. Modifier</font></h4><p>Let’s take a look at the effect of executing each of the following two types of code:     </p>\n<img src=\"/assets/SwiftUI/001.png\" class=\"\">    \n\n<p>Attribute modifier code after switching the order:</p>\n<img src=\"/assets/SwiftUI/002.png\" class=\"\">      \n\n<p>Just adjusting the order in which the two lines of code are executed results in a different outcome, which almost turns our perception upside down.</p>\n<p>Here we need to understand the working mechanism of Modifier in SwiftUI, unlike UIKit where each modifier acts as an object, you can simply think of each modifier in SwiftUI as “working alone”, for example, after modifier A modifies an object, it will become another object after modifier B modifies it. For example, after modifier A is modified, it forms an object, and after it is modified by modifier B, it becomes another object.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Button</span>(<span class=\"string\">&quot;Hello, world!&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(of: <span class=\"keyword\">self</span>.body))</span><br><span class=\"line\">&#125;    </span><br><span class=\"line\">.background(.red)</span><br><span class=\"line\">.frame(width: <span class=\"number\">200</span>, height: <span class=\"number\">200</span>)</span><br></pre></td></tr></table></figure>\n\n<p>With type you can print the exact type of a value as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ModifiedContent</span>&lt;<span class=\"type\">ModifiedContent</span>&lt;<span class=\"type\">Button</span>&lt;<span class=\"type\">Text</span>&gt;, _BackgroundStyleModifier&lt;<span class=\"type\">Color</span>&gt;&gt;, _FrameLayout<span class=\"operator\">&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>It first generates a Button with text and background color via ‘ModifiedContent&lt;Button<Text>, _BackgroundStyleModifier<Color>‘. Then, it sets a larger frame to it via ‘ModifiedContent&lt;…, _framayout &gt;’.</p>\n<p>So, end up with a stack of ‘ModifiedContent’ types - each of which transforms a view plus the actual changes to be made, rather than modifying the view directly.   </p>\n<p>Simply, the front Modified A production “product” is like a brick out of the kiln pit has been molded, the back of the Modifier B, Modifier C … Modifier B, Modifier C … can not be changed, only in the original basis of “stacking”.</p>\n<img src=\"/assets/SwiftUI/003.png\" class=\"\">    \n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://www.hackingwithswift.com/books/ios-swiftui/why-modifier-order-matters\">Why modifier order matters</a><br>[2] <a href=\"https://www.hackingwithswift.com/books/ios-swiftui/why-does-swiftui-use-some-view-for-its-view-type\">Why does SwiftUI use “some View” for its view type?</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 5 minutes to finish reading this article.</em></font></p>\n<p>Let’s start with a piece of SwiftUI code and its Canvas display as follows:  </p>\n<img src=\"/assets/SwiftUI/000.png\" class=\"\">\n\n<p>Explain this code:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> SwiftUI</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span>: <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Button</span>(<span class=\"string\">&quot;Hello, world!&quot;</span>) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .background(.red)</span><br><span class=\"line\">        .frame(width: <span class=\"number\">200</span>, height: <span class=\"number\">200</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>(1) Create a ContentView structure and follow the View protocol. This means that ContentView is a view type and needs to implement the body property.    </p>\n<p>(2) The body attribute returns a some View type, which means that any view that conforms to the View protocol can be returned.</p>\n<p>(3) In the body, we have created a view that displays the text “Hello World!” using the Button view.    </p>\n<p>(4) Several modifiers are applied to the Button view to customize its appearance, such as background to set the background color and frame to set the size to 200*200.  </p>\n<p>How does such a few lines of code accomplish the display of a view?<br>In fact, SwiftUI combines these views and modifiers to form a complete view hierarchy based on the view hierarchy structure and modifier chaining. SwiftUI converts the view hierarchy and modifier chain from the declarative description to the underlying rendering instructions. These rendering instructions are passed to the system, which then performs the actual drawing and rendering operations that are ultimately rendered on the screen. </p>\n<p>Below we introduce a few concepts in conjunction with the code above.</p>\n<h4 id=\"1-View-Protocol\"><a href=\"#1-View-Protocol\" class=\"headerlink\" title=\"1. View Protocol\"></a><font size=3 color=#4169E1>1. View Protocol</font></h4><p>The View protocol is one of the core protocols in SwiftUI that defines the fundamentals of building user interfaces and how to use them.The source code for the View protocol is as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">protocol</span> <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">associatedtype</span> <span class=\"type\">Body</span> : <span class=\"type\">View</span></span><br><span class=\"line\">    <span class=\"meta\">@ViewBuilder</span> <span class=\"keyword\">var</span> body: <span class=\"keyword\">Self</span>.<span class=\"type\">Body</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>As you can see from the source code, the View protocol has the following key features:</p>\n<p>‘associatedtype Body: View’ :<br>The View protocol uses the associated type associatedtype, which means that types that follow the View protocol must specify a concrete type associated with the View. This concrete type is named Body and must also conform to the View protocol.</p>\n<p>‘var body: Self.Body { get }’ :<br>The View protocol requires that followers must provide a computed property named body. This property returns a view type that is the previously defined association type Body.</p>\n<p>The View protocol works by returning a specific view hierarchy via the body property. This view hierarchy can contain other views or components to form a complex user interface, and SwiftUI renders the final user interface based on this view hierarchy.</p>\n<h4 id=\"2-some-View\"><a href=\"#2-some-View\" class=\"headerlink\" title=\"2. some View\"></a><font size=3 color=#4169E1>2. some View</font></h4><p>Using ‘some View’ as a return type means that the view can return any type that conforms to the View protocol. This syntax is called opaque return type, a feature that allows the compiler to infer the type of view returned without requiring the developer to explicitly specify it. It means that “an object conforms to the View protocol, but we do not care whether it is a Button or Text, as long as the compiler knows on the line”.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> SwiftUI</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span>: <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"type\">Button</span> &#123; <span class=\"comment\">//This is not a View but a Button.</span></span><br><span class=\"line\">        <span class=\"type\">Button</span>(<span class=\"string\">&quot;Hello, world!&quot;</span>) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .background(.red)</span><br><span class=\"line\">        .frame(width: <span class=\"number\">200</span>, height: <span class=\"number\">200</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>The effect of the above code is the same, only the lack of flexibility, each time you need to figure out what type of specific return in the body, too tired, in fact, to the compiler on the line.         </p>\n<p>‘some’ is a special generic type placeholder in Swift that supports more complex combinations and reuse of multiple view types, making SwiftUI code more flexible and concise and reducing the possibility of type errors, which is also a reflection of SwiftUI’s polymorphism.</p>\n<h4 id=\"3-Modifier\"><a href=\"#3-Modifier\" class=\"headerlink\" title=\"3. Modifier\"></a><font size=3 color=#4169E1>3. Modifier</font></h4><p>Let’s take a look at the effect of executing each of the following two types of code:     </p>\n<img src=\"/assets/SwiftUI/001.png\" class=\"\">    \n\n<p>Attribute modifier code after switching the order:</p>\n<img src=\"/assets/SwiftUI/002.png\" class=\"\">      \n\n<p>Just adjusting the order in which the two lines of code are executed results in a different outcome, which almost turns our perception upside down.</p>\n<p>Here we need to understand the working mechanism of Modifier in SwiftUI, unlike UIKit where each modifier acts as an object, you can simply think of each modifier in SwiftUI as “working alone”, for example, after modifier A modifies an object, it will become another object after modifier B modifies it. For example, after modifier A is modified, it forms an object, and after it is modified by modifier B, it becomes another object.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Button</span>(<span class=\"string\">&quot;Hello, world!&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(of: <span class=\"keyword\">self</span>.body))</span><br><span class=\"line\">&#125;    </span><br><span class=\"line\">.background(.red)</span><br><span class=\"line\">.frame(width: <span class=\"number\">200</span>, height: <span class=\"number\">200</span>)</span><br></pre></td></tr></table></figure>\n\n<p>With type you can print the exact type of a value as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ModifiedContent</span>&lt;<span class=\"type\">ModifiedContent</span>&lt;<span class=\"type\">Button</span>&lt;<span class=\"type\">Text</span>&gt;, _BackgroundStyleModifier&lt;<span class=\"type\">Color</span>&gt;&gt;, _FrameLayout<span class=\"operator\">&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>It first generates a Button with text and background color via ‘ModifiedContent&lt;Button<Text>, _BackgroundStyleModifier<Color>‘. Then, it sets a larger frame to it via ‘ModifiedContent&lt;…, _framayout &gt;’.</p>\n<p>So, end up with a stack of ‘ModifiedContent’ types - each of which transforms a view plus the actual changes to be made, rather than modifying the view directly.   </p>\n<p>Simply, the front Modified A production “product” is like a brick out of the kiln pit has been molded, the back of the Modifier B, Modifier C … Modifier B, Modifier C … can not be changed, only in the original basis of “stacking”.</p>\n<img src=\"/assets/SwiftUI/003.png\" class=\"\">    \n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://www.hackingwithswift.com/books/ios-swiftui/why-modifier-order-matters\">Why modifier order matters</a><br>[2] <a href=\"https://www.hackingwithswift.com/books/ios-swiftui/why-does-swiftui-use-some-view-for-its-view-type\">Why does SwiftUI use “some View” for its view type?</a></p>\n"},{"_content":"<!------->\n<!--title: 00. SwiftUI vs UIKit-->\n<!--date: 2023-09-02 22:00:00-->\n<!--categories: -->\n<!--- [SwiftUI]-->\n<!--tags:-->\n<!--- SwiftUI-->\n<!--- UIKit-->\n<!------->\n\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\n#### <font size=3 color=#4169E1>1. Header information is incorrect</font> \n\nJust as we struggled with whether or not to embrace Swift, are many people today struggling with whether or not to embrace SwiftUI. Then I can tell you very clearly that if you choose to embrace Swift, then SwiftUI is a hurdle you won't be able to get past sooner or later! Take my advice, it's not too late to embrace SwiftUI, you'll find more and more hiring JD's asking for SwiftUI. I've also been learning SwiftUI on my own lately, and I'm going to be writing a series of posts about SwiftUI, so let's start with this one on SwiftUI vs UIKit and why we're going to go with SwiftUI.\n\n\n#### <font size=3 color=#4169E1>2. UIKit</font> \n\nUIKit was publicly released in 2008 and is built on the object-oriented Objective-C language. In UIKit, all views inherit from a class called UIView, which has a very large number of properties and methods-such as background, layout, layers for rendering, and so on-there are almost 200 properties, and every UIView and subclass of UIView, whether you want it or not, will have Every UIView and subclass of UIView will have these properties whether you want them or not. \n\nFor example, there is a special UIStackView in UIKit, which is a view type that will not be rendered for the design intent of making layouts simpler. But because of the inheritance mechanism, even though it doesn't render, it has those various unused properties including background color. \n\nSo, in UIKit, when we draw a UI that contains a series of labels/buttons, etc., it's a stack of \"big\" and \"heavy\" Views that contain more than 200 attributes.\n\n#### <font size=3 color=#4169E1>3. SwiftUI</font> \n\nBorn in 2019, SwiftUI is a modern framework for building user interfaces introduced by Apple. As new devices evolve in terms of processing power, graphics performance, and other technical features, SwiftUI takes full advantage of these new hardware and technical capabilities, optimizing and tuning the underlying implementation so that apps running on new devices can render interfaces, handle user interactions, and deliver smoother animations and effects more efficiently.\n\nSwiftUI is based on responsive programming approach to UI development, all the views are fine-grained structure struct, compared struct and class can be known, Swift is very much advocate the use of struct, the specific why will not expand.  In SwiftUI, each view is a lightweight struct structure, which abandons UIKit's inheritance approach and uses protocols to contain the few properties and modifiers needed. All in all, SwiftUI is much more performant and faster than UIKit, with less overhead for creating the same view.\n\nIn addition, SwiftUI provides a number of keywords like State, which not only allows us to write less code, but also allows us to focus more on the UI changes caused by value changes in responsive programming thinking. Since class can freely modify the value of attributes, which may bring complicated logic, in contrast, struct under the SwiftUI development of UI code is more \"independent\" (many of the capabilities it has also provided you, do not need to build the wheel again)\n\n#### <font size=3 color=#4169E1>4. Final Thoughts </font> \n\nBecause SwiftUI will only come out in 2019, compatibility for previous iOS versions is expected to be a bit of a problem. Because UIKit has been developed for many years, SwiftUI has not been as powerful as UIKit third-party libraries, but it is only a matter of time. And Apple in order to be compatible with some of the methods used, such as UIHostingController. read a lot of foreign articles, many of them developers are very clear point: SwiftUI will eventually replace UIKit, and UIKit will eventually be abandoned.\n\n#### <font size=3 color=#4169E1>5. Recommended Learning Resources: </font> \n1. Apple Official:   \n[1] https://developer.apple.com/tutorials/swiftui  \n[2] https://developer.apple.com/documentation/SwiftUI/View-fundamentals\n2. Hackingwithswift Series:  \n[1] https://www.hackingwithswift.com/books/ios-swiftui/\n3. SwiftfulThinking Series:    \n[1] https://www.youtube.com/playlist?list=PLwvDm4VfkdphqETTBf-DdjCoAvhai1QpO   \n[2] https://www.bilibili.com/video/BV1KY411f7in   \n[3] https://github.com/SwiftfulThinking   \n\n","source":"_posts/SwiftUI/02. Basic Concepts (2).md","raw":"<!------->\n<!--title: 00. SwiftUI vs UIKit-->\n<!--date: 2023-09-02 22:00:00-->\n<!--categories: -->\n<!--- [SwiftUI]-->\n<!--tags:-->\n<!--- SwiftUI-->\n<!--- UIKit-->\n<!------->\n\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\n#### <font size=3 color=#4169E1>1. Header information is incorrect</font> \n\nJust as we struggled with whether or not to embrace Swift, are many people today struggling with whether or not to embrace SwiftUI. Then I can tell you very clearly that if you choose to embrace Swift, then SwiftUI is a hurdle you won't be able to get past sooner or later! Take my advice, it's not too late to embrace SwiftUI, you'll find more and more hiring JD's asking for SwiftUI. I've also been learning SwiftUI on my own lately, and I'm going to be writing a series of posts about SwiftUI, so let's start with this one on SwiftUI vs UIKit and why we're going to go with SwiftUI.\n\n\n#### <font size=3 color=#4169E1>2. UIKit</font> \n\nUIKit was publicly released in 2008 and is built on the object-oriented Objective-C language. In UIKit, all views inherit from a class called UIView, which has a very large number of properties and methods-such as background, layout, layers for rendering, and so on-there are almost 200 properties, and every UIView and subclass of UIView, whether you want it or not, will have Every UIView and subclass of UIView will have these properties whether you want them or not. \n\nFor example, there is a special UIStackView in UIKit, which is a view type that will not be rendered for the design intent of making layouts simpler. But because of the inheritance mechanism, even though it doesn't render, it has those various unused properties including background color. \n\nSo, in UIKit, when we draw a UI that contains a series of labels/buttons, etc., it's a stack of \"big\" and \"heavy\" Views that contain more than 200 attributes.\n\n#### <font size=3 color=#4169E1>3. SwiftUI</font> \n\nBorn in 2019, SwiftUI is a modern framework for building user interfaces introduced by Apple. As new devices evolve in terms of processing power, graphics performance, and other technical features, SwiftUI takes full advantage of these new hardware and technical capabilities, optimizing and tuning the underlying implementation so that apps running on new devices can render interfaces, handle user interactions, and deliver smoother animations and effects more efficiently.\n\nSwiftUI is based on responsive programming approach to UI development, all the views are fine-grained structure struct, compared struct and class can be known, Swift is very much advocate the use of struct, the specific why will not expand.  In SwiftUI, each view is a lightweight struct structure, which abandons UIKit's inheritance approach and uses protocols to contain the few properties and modifiers needed. All in all, SwiftUI is much more performant and faster than UIKit, with less overhead for creating the same view.\n\nIn addition, SwiftUI provides a number of keywords like State, which not only allows us to write less code, but also allows us to focus more on the UI changes caused by value changes in responsive programming thinking. Since class can freely modify the value of attributes, which may bring complicated logic, in contrast, struct under the SwiftUI development of UI code is more \"independent\" (many of the capabilities it has also provided you, do not need to build the wheel again)\n\n#### <font size=3 color=#4169E1>4. Final Thoughts </font> \n\nBecause SwiftUI will only come out in 2019, compatibility for previous iOS versions is expected to be a bit of a problem. Because UIKit has been developed for many years, SwiftUI has not been as powerful as UIKit third-party libraries, but it is only a matter of time. And Apple in order to be compatible with some of the methods used, such as UIHostingController. read a lot of foreign articles, many of them developers are very clear point: SwiftUI will eventually replace UIKit, and UIKit will eventually be abandoned.\n\n#### <font size=3 color=#4169E1>5. Recommended Learning Resources: </font> \n1. Apple Official:   \n[1] https://developer.apple.com/tutorials/swiftui  \n[2] https://developer.apple.com/documentation/SwiftUI/View-fundamentals\n2. Hackingwithswift Series:  \n[1] https://www.hackingwithswift.com/books/ios-swiftui/\n3. SwiftfulThinking Series:    \n[1] https://www.youtube.com/playlist?list=PLwvDm4VfkdphqETTBf-DdjCoAvhai1QpO   \n[2] https://www.bilibili.com/video/BV1KY411f7in   \n[3] https://github.com/SwiftfulThinking   \n\n","slug":"SwiftUI/02. Basic Concepts (2)","published":1,"date":"2023-02-28T12:47:44.883Z","updated":"2023-09-06T12:33:37.222Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"clm7w97r2000akb0m12y46uz5","content":"<!------->\n<!--title: 00. SwiftUI vs UIKit-->\n<!--date: 2023-09-02 22:00:00-->\n<!--categories: -->\n<!--- [SwiftUI]-->\n<!--tags:-->\n<!--- SwiftUI-->\n<!--- UIKit-->\n<!------->\n\n\n<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<h4 id=\"1-Header-information-is-incorrect\"><a href=\"#1-Header-information-is-incorrect\" class=\"headerlink\" title=\"1. Header information is incorrect\"></a><font size=3 color=#4169E1>1. Header information is incorrect</font></h4><p>Just as we struggled with whether or not to embrace Swift, are many people today struggling with whether or not to embrace SwiftUI. Then I can tell you very clearly that if you choose to embrace Swift, then SwiftUI is a hurdle you won’t be able to get past sooner or later! Take my advice, it’s not too late to embrace SwiftUI, you’ll find more and more hiring JD’s asking for SwiftUI. I’ve also been learning SwiftUI on my own lately, and I’m going to be writing a series of posts about SwiftUI, so let’s start with this one on SwiftUI vs UIKit and why we’re going to go with SwiftUI.</p>\n<h4 id=\"2-UIKit\"><a href=\"#2-UIKit\" class=\"headerlink\" title=\"2. UIKit\"></a><font size=3 color=#4169E1>2. UIKit</font></h4><p>UIKit was publicly released in 2008 and is built on the object-oriented Objective-C language. In UIKit, all views inherit from a class called UIView, which has a very large number of properties and methods-such as background, layout, layers for rendering, and so on-there are almost 200 properties, and every UIView and subclass of UIView, whether you want it or not, will have Every UIView and subclass of UIView will have these properties whether you want them or not. </p>\n<p>For example, there is a special UIStackView in UIKit, which is a view type that will not be rendered for the design intent of making layouts simpler. But because of the inheritance mechanism, even though it doesn’t render, it has those various unused properties including background color. </p>\n<p>So, in UIKit, when we draw a UI that contains a series of labels&#x2F;buttons, etc., it’s a stack of “big” and “heavy” Views that contain more than 200 attributes.</p>\n<h4 id=\"3-SwiftUI\"><a href=\"#3-SwiftUI\" class=\"headerlink\" title=\"3. SwiftUI\"></a><font size=3 color=#4169E1>3. SwiftUI</font></h4><p>Born in 2019, SwiftUI is a modern framework for building user interfaces introduced by Apple. As new devices evolve in terms of processing power, graphics performance, and other technical features, SwiftUI takes full advantage of these new hardware and technical capabilities, optimizing and tuning the underlying implementation so that apps running on new devices can render interfaces, handle user interactions, and deliver smoother animations and effects more efficiently.</p>\n<p>SwiftUI is based on responsive programming approach to UI development, all the views are fine-grained structure struct, compared struct and class can be known, Swift is very much advocate the use of struct, the specific why will not expand.  In SwiftUI, each view is a lightweight struct structure, which abandons UIKit’s inheritance approach and uses protocols to contain the few properties and modifiers needed. All in all, SwiftUI is much more performant and faster than UIKit, with less overhead for creating the same view.</p>\n<p>In addition, SwiftUI provides a number of keywords like State, which not only allows us to write less code, but also allows us to focus more on the UI changes caused by value changes in responsive programming thinking. Since class can freely modify the value of attributes, which may bring complicated logic, in contrast, struct under the SwiftUI development of UI code is more “independent” (many of the capabilities it has also provided you, do not need to build the wheel again)</p>\n<h4 id=\"4-Final-Thoughts\"><a href=\"#4-Final-Thoughts\" class=\"headerlink\" title=\"4. Final Thoughts \"></a><font size=3 color=#4169E1>4. Final Thoughts </font></h4><p>Because SwiftUI will only come out in 2019, compatibility for previous iOS versions is expected to be a bit of a problem. Because UIKit has been developed for many years, SwiftUI has not been as powerful as UIKit third-party libraries, but it is only a matter of time. And Apple in order to be compatible with some of the methods used, such as UIHostingController. read a lot of foreign articles, many of them developers are very clear point: SwiftUI will eventually replace UIKit, and UIKit will eventually be abandoned.</p>\n<h4 id=\"5-Recommended-Learning-Resources\"><a href=\"#5-Recommended-Learning-Resources\" class=\"headerlink\" title=\"5. Recommended Learning Resources: \"></a><font size=3 color=#4169E1>5. Recommended Learning Resources: </font></h4><ol>\n<li>Apple Official:<br>[1] <a href=\"https://developer.apple.com/tutorials/swiftui\">https://developer.apple.com/tutorials/swiftui</a><br>[2] <a href=\"https://developer.apple.com/documentation/SwiftUI/View-fundamentals\">https://developer.apple.com/documentation/SwiftUI/View-fundamentals</a></li>\n<li>Hackingwithswift Series:<br>[1] <a href=\"https://www.hackingwithswift.com/books/ios-swiftui/\">https://www.hackingwithswift.com/books/ios-swiftui/</a></li>\n<li>SwiftfulThinking Series:<br>[1] <a href=\"https://www.youtube.com/playlist?list=PLwvDm4VfkdphqETTBf-DdjCoAvhai1QpO\">https://www.youtube.com/playlist?list=PLwvDm4VfkdphqETTBf-DdjCoAvhai1QpO</a><br>[2] <a href=\"https://www.bilibili.com/video/BV1KY411f7in\">https://www.bilibili.com/video/BV1KY411f7in</a><br>[3] <a href=\"https://github.com/SwiftfulThinking\">https://github.com/SwiftfulThinking</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<!------->\n<!--title: 00. SwiftUI vs UIKit-->\n<!--date: 2023-09-02 22:00:00-->\n<!--categories: -->\n<!--- [SwiftUI]-->\n<!--tags:-->\n<!--- SwiftUI-->\n<!--- UIKit-->\n<!------->\n\n\n<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<h4 id=\"1-Header-information-is-incorrect\"><a href=\"#1-Header-information-is-incorrect\" class=\"headerlink\" title=\"1. Header information is incorrect\"></a><font size=3 color=#4169E1>1. Header information is incorrect</font></h4><p>Just as we struggled with whether or not to embrace Swift, are many people today struggling with whether or not to embrace SwiftUI. Then I can tell you very clearly that if you choose to embrace Swift, then SwiftUI is a hurdle you won’t be able to get past sooner or later! Take my advice, it’s not too late to embrace SwiftUI, you’ll find more and more hiring JD’s asking for SwiftUI. I’ve also been learning SwiftUI on my own lately, and I’m going to be writing a series of posts about SwiftUI, so let’s start with this one on SwiftUI vs UIKit and why we’re going to go with SwiftUI.</p>\n<h4 id=\"2-UIKit\"><a href=\"#2-UIKit\" class=\"headerlink\" title=\"2. UIKit\"></a><font size=3 color=#4169E1>2. UIKit</font></h4><p>UIKit was publicly released in 2008 and is built on the object-oriented Objective-C language. In UIKit, all views inherit from a class called UIView, which has a very large number of properties and methods-such as background, layout, layers for rendering, and so on-there are almost 200 properties, and every UIView and subclass of UIView, whether you want it or not, will have Every UIView and subclass of UIView will have these properties whether you want them or not. </p>\n<p>For example, there is a special UIStackView in UIKit, which is a view type that will not be rendered for the design intent of making layouts simpler. But because of the inheritance mechanism, even though it doesn’t render, it has those various unused properties including background color. </p>\n<p>So, in UIKit, when we draw a UI that contains a series of labels&#x2F;buttons, etc., it’s a stack of “big” and “heavy” Views that contain more than 200 attributes.</p>\n<h4 id=\"3-SwiftUI\"><a href=\"#3-SwiftUI\" class=\"headerlink\" title=\"3. SwiftUI\"></a><font size=3 color=#4169E1>3. SwiftUI</font></h4><p>Born in 2019, SwiftUI is a modern framework for building user interfaces introduced by Apple. As new devices evolve in terms of processing power, graphics performance, and other technical features, SwiftUI takes full advantage of these new hardware and technical capabilities, optimizing and tuning the underlying implementation so that apps running on new devices can render interfaces, handle user interactions, and deliver smoother animations and effects more efficiently.</p>\n<p>SwiftUI is based on responsive programming approach to UI development, all the views are fine-grained structure struct, compared struct and class can be known, Swift is very much advocate the use of struct, the specific why will not expand.  In SwiftUI, each view is a lightweight struct structure, which abandons UIKit’s inheritance approach and uses protocols to contain the few properties and modifiers needed. All in all, SwiftUI is much more performant and faster than UIKit, with less overhead for creating the same view.</p>\n<p>In addition, SwiftUI provides a number of keywords like State, which not only allows us to write less code, but also allows us to focus more on the UI changes caused by value changes in responsive programming thinking. Since class can freely modify the value of attributes, which may bring complicated logic, in contrast, struct under the SwiftUI development of UI code is more “independent” (many of the capabilities it has also provided you, do not need to build the wheel again)</p>\n<h4 id=\"4-Final-Thoughts\"><a href=\"#4-Final-Thoughts\" class=\"headerlink\" title=\"4. Final Thoughts \"></a><font size=3 color=#4169E1>4. Final Thoughts </font></h4><p>Because SwiftUI will only come out in 2019, compatibility for previous iOS versions is expected to be a bit of a problem. Because UIKit has been developed for many years, SwiftUI has not been as powerful as UIKit third-party libraries, but it is only a matter of time. And Apple in order to be compatible with some of the methods used, such as UIHostingController. read a lot of foreign articles, many of them developers are very clear point: SwiftUI will eventually replace UIKit, and UIKit will eventually be abandoned.</p>\n<h4 id=\"5-Recommended-Learning-Resources\"><a href=\"#5-Recommended-Learning-Resources\" class=\"headerlink\" title=\"5. Recommended Learning Resources: \"></a><font size=3 color=#4169E1>5. Recommended Learning Resources: </font></h4><ol>\n<li>Apple Official:<br>[1] <a href=\"https://developer.apple.com/tutorials/swiftui\">https://developer.apple.com/tutorials/swiftui</a><br>[2] <a href=\"https://developer.apple.com/documentation/SwiftUI/View-fundamentals\">https://developer.apple.com/documentation/SwiftUI/View-fundamentals</a></li>\n<li>Hackingwithswift Series:<br>[1] <a href=\"https://www.hackingwithswift.com/books/ios-swiftui/\">https://www.hackingwithswift.com/books/ios-swiftui/</a></li>\n<li>SwiftfulThinking Series:<br>[1] <a href=\"https://www.youtube.com/playlist?list=PLwvDm4VfkdphqETTBf-DdjCoAvhai1QpO\">https://www.youtube.com/playlist?list=PLwvDm4VfkdphqETTBf-DdjCoAvhai1QpO</a><br>[2] <a href=\"https://www.bilibili.com/video/BV1KY411f7in\">https://www.bilibili.com/video/BV1KY411f7in</a><br>[3] <a href=\"https://github.com/SwiftfulThinking\">https://github.com/SwiftfulThinking</a></li>\n</ol>\n"},{"title":"02. Basic Concepts (2)","date":"2023-09-06T12:00:00.000Z","_content":"\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\n#### <font size=3 color=#4169E1>1. Header information is incorrect</font> \n\nJust as we struggled with whether or not to embrace Swift, are many people today struggling with whether or not to embrace SwiftUI. Then I can tell you very clearly that if you choose to embrace Swift, then SwiftUI is a hurdle you won't be able to get past sooner or later! Take my advice, it's not too late to embrace SwiftUI, you'll find more and more hiring JD's asking for SwiftUI. I've also been learning SwiftUI on my own lately, and I'm going to be writing a series of posts about SwiftUI, so let's start with this one on SwiftUI vs UIKit and why we're going to go with SwiftUI.\n\n\n#### <font size=3 color=#4169E1>2. UIKit</font> \n\nUIKit was publicly released in 2008 and is built on the object-oriented Objective-C language. In UIKit, all views inherit from a class called UIView, which has a very large number of properties and methods-such as background, layout, layers for rendering, and so on-there are almost 200 properties, and every UIView and subclass of UIView, whether you want it or not, will have Every UIView and subclass of UIView will have these properties whether you want them or not. \n\nFor example, there is a special UIStackView in UIKit, which is a view type that will not be rendered for the design intent of making layouts simpler. But because of the inheritance mechanism, even though it doesn't render, it has those various unused properties including background color. \n\nSo, in UIKit, when we draw a UI that contains a series of labels/buttons, etc., it's a stack of \"big\" and \"heavy\" Views that contain more than 200 attributes.\n\n#### <font size=3 color=#4169E1>3. SwiftUI</font> \n\nBorn in 2019, SwiftUI is a modern framework for building user interfaces introduced by Apple. As new devices evolve in terms of processing power, graphics performance, and other technical features, SwiftUI takes full advantage of these new hardware and technical capabilities, optimizing and tuning the underlying implementation so that apps running on new devices can render interfaces, handle user interactions, and deliver smoother animations and effects more efficiently.\n\nSwiftUI is based on responsive programming approach to UI development, all the views are fine-grained structure struct, compared struct and class can be known, Swift is very much advocate the use of struct, the specific why will not expand.  In SwiftUI, each view is a lightweight struct structure, which abandons UIKit's inheritance approach and uses protocols to contain the few properties and modifiers needed. All in all, SwiftUI is much more performant and faster than UIKit, with less overhead for creating the same view.\n\nIn addition, SwiftUI provides a number of keywords like State, which not only allows us to write less code, but also allows us to focus more on the UI changes caused by value changes in responsive programming thinking. Since class can freely modify the value of attributes, which may bring complicated logic, in contrast, struct under the SwiftUI development of UI code is more \"independent\" (many of the capabilities it has also provided you, do not need to build the wheel again)\n\n#### <font size=3 color=#4169E1>4. Final Thoughts </font> \n\nBecause SwiftUI will only come out in 2019, compatibility for previous iOS versions is expected to be a bit of a problem. Because UIKit has been developed for many years, SwiftUI has not been as powerful as UIKit third-party libraries, but it is only a matter of time. And Apple in order to be compatible with some of the methods used, such as UIHostingController. read a lot of foreign articles, many of them developers are very clear point: SwiftUI will eventually replace UIKit, and UIKit will eventually be abandoned.\n\n#### <font size=3 color=#4169E1>5. Recommended Learning Resources: </font> \n1. Apple Official:   \n[1] https://developer.apple.com/tutorials/swiftui  \n[2] https://developer.apple.com/documentation/SwiftUI/View-fundamentals\n2. Hackingwithswift Series:  \n[1] https://www.hackingwithswift.com/books/ios-swiftui/\n3. SwiftfulThinking Series:    \n[1] https://www.youtube.com/playlist?list=PLwvDm4VfkdphqETTBf-DdjCoAvhai1QpO   \n[2] https://www.bilibili.com/video/BV1KY411f7in   \n[3] https://github.com/SwiftfulThinking   \n\n","source":"_posts/SwiftUI/03. Basic Concepts (3).md","raw":"---\ntitle: 02. Basic Concepts (2)\ndate: 2023-09-06 14:00:00\ncategories: \n- [SwiftUI]\ntags:\n- ContentView\n- View\n---\n\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\n#### <font size=3 color=#4169E1>1. Header information is incorrect</font> \n\nJust as we struggled with whether or not to embrace Swift, are many people today struggling with whether or not to embrace SwiftUI. Then I can tell you very clearly that if you choose to embrace Swift, then SwiftUI is a hurdle you won't be able to get past sooner or later! Take my advice, it's not too late to embrace SwiftUI, you'll find more and more hiring JD's asking for SwiftUI. I've also been learning SwiftUI on my own lately, and I'm going to be writing a series of posts about SwiftUI, so let's start with this one on SwiftUI vs UIKit and why we're going to go with SwiftUI.\n\n\n#### <font size=3 color=#4169E1>2. UIKit</font> \n\nUIKit was publicly released in 2008 and is built on the object-oriented Objective-C language. In UIKit, all views inherit from a class called UIView, which has a very large number of properties and methods-such as background, layout, layers for rendering, and so on-there are almost 200 properties, and every UIView and subclass of UIView, whether you want it or not, will have Every UIView and subclass of UIView will have these properties whether you want them or not. \n\nFor example, there is a special UIStackView in UIKit, which is a view type that will not be rendered for the design intent of making layouts simpler. But because of the inheritance mechanism, even though it doesn't render, it has those various unused properties including background color. \n\nSo, in UIKit, when we draw a UI that contains a series of labels/buttons, etc., it's a stack of \"big\" and \"heavy\" Views that contain more than 200 attributes.\n\n#### <font size=3 color=#4169E1>3. SwiftUI</font> \n\nBorn in 2019, SwiftUI is a modern framework for building user interfaces introduced by Apple. As new devices evolve in terms of processing power, graphics performance, and other technical features, SwiftUI takes full advantage of these new hardware and technical capabilities, optimizing and tuning the underlying implementation so that apps running on new devices can render interfaces, handle user interactions, and deliver smoother animations and effects more efficiently.\n\nSwiftUI is based on responsive programming approach to UI development, all the views are fine-grained structure struct, compared struct and class can be known, Swift is very much advocate the use of struct, the specific why will not expand.  In SwiftUI, each view is a lightweight struct structure, which abandons UIKit's inheritance approach and uses protocols to contain the few properties and modifiers needed. All in all, SwiftUI is much more performant and faster than UIKit, with less overhead for creating the same view.\n\nIn addition, SwiftUI provides a number of keywords like State, which not only allows us to write less code, but also allows us to focus more on the UI changes caused by value changes in responsive programming thinking. Since class can freely modify the value of attributes, which may bring complicated logic, in contrast, struct under the SwiftUI development of UI code is more \"independent\" (many of the capabilities it has also provided you, do not need to build the wheel again)\n\n#### <font size=3 color=#4169E1>4. Final Thoughts </font> \n\nBecause SwiftUI will only come out in 2019, compatibility for previous iOS versions is expected to be a bit of a problem. Because UIKit has been developed for many years, SwiftUI has not been as powerful as UIKit third-party libraries, but it is only a matter of time. And Apple in order to be compatible with some of the methods used, such as UIHostingController. read a lot of foreign articles, many of them developers are very clear point: SwiftUI will eventually replace UIKit, and UIKit will eventually be abandoned.\n\n#### <font size=3 color=#4169E1>5. Recommended Learning Resources: </font> \n1. Apple Official:   \n[1] https://developer.apple.com/tutorials/swiftui  \n[2] https://developer.apple.com/documentation/SwiftUI/View-fundamentals\n2. Hackingwithswift Series:  \n[1] https://www.hackingwithswift.com/books/ios-swiftui/\n3. SwiftfulThinking Series:    \n[1] https://www.youtube.com/playlist?list=PLwvDm4VfkdphqETTBf-DdjCoAvhai1QpO   \n[2] https://www.bilibili.com/video/BV1KY411f7in   \n[3] https://github.com/SwiftfulThinking   \n\n","slug":"SwiftUI/03. Basic Concepts (3)","published":1,"updated":"2023-09-06T12:32:17.799Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clm7w97r3000bkb0m4xr1cec7","content":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<h4 id=\"1-Header-information-is-incorrect\"><a href=\"#1-Header-information-is-incorrect\" class=\"headerlink\" title=\"1. Header information is incorrect\"></a><font size=3 color=#4169E1>1. Header information is incorrect</font></h4><p>Just as we struggled with whether or not to embrace Swift, are many people today struggling with whether or not to embrace SwiftUI. Then I can tell you very clearly that if you choose to embrace Swift, then SwiftUI is a hurdle you won’t be able to get past sooner or later! Take my advice, it’s not too late to embrace SwiftUI, you’ll find more and more hiring JD’s asking for SwiftUI. I’ve also been learning SwiftUI on my own lately, and I’m going to be writing a series of posts about SwiftUI, so let’s start with this one on SwiftUI vs UIKit and why we’re going to go with SwiftUI.</p>\n<h4 id=\"2-UIKit\"><a href=\"#2-UIKit\" class=\"headerlink\" title=\"2. UIKit\"></a><font size=3 color=#4169E1>2. UIKit</font></h4><p>UIKit was publicly released in 2008 and is built on the object-oriented Objective-C language. In UIKit, all views inherit from a class called UIView, which has a very large number of properties and methods-such as background, layout, layers for rendering, and so on-there are almost 200 properties, and every UIView and subclass of UIView, whether you want it or not, will have Every UIView and subclass of UIView will have these properties whether you want them or not. </p>\n<p>For example, there is a special UIStackView in UIKit, which is a view type that will not be rendered for the design intent of making layouts simpler. But because of the inheritance mechanism, even though it doesn’t render, it has those various unused properties including background color. </p>\n<p>So, in UIKit, when we draw a UI that contains a series of labels&#x2F;buttons, etc., it’s a stack of “big” and “heavy” Views that contain more than 200 attributes.</p>\n<h4 id=\"3-SwiftUI\"><a href=\"#3-SwiftUI\" class=\"headerlink\" title=\"3. SwiftUI\"></a><font size=3 color=#4169E1>3. SwiftUI</font></h4><p>Born in 2019, SwiftUI is a modern framework for building user interfaces introduced by Apple. As new devices evolve in terms of processing power, graphics performance, and other technical features, SwiftUI takes full advantage of these new hardware and technical capabilities, optimizing and tuning the underlying implementation so that apps running on new devices can render interfaces, handle user interactions, and deliver smoother animations and effects more efficiently.</p>\n<p>SwiftUI is based on responsive programming approach to UI development, all the views are fine-grained structure struct, compared struct and class can be known, Swift is very much advocate the use of struct, the specific why will not expand.  In SwiftUI, each view is a lightweight struct structure, which abandons UIKit’s inheritance approach and uses protocols to contain the few properties and modifiers needed. All in all, SwiftUI is much more performant and faster than UIKit, with less overhead for creating the same view.</p>\n<p>In addition, SwiftUI provides a number of keywords like State, which not only allows us to write less code, but also allows us to focus more on the UI changes caused by value changes in responsive programming thinking. Since class can freely modify the value of attributes, which may bring complicated logic, in contrast, struct under the SwiftUI development of UI code is more “independent” (many of the capabilities it has also provided you, do not need to build the wheel again)</p>\n<h4 id=\"4-Final-Thoughts\"><a href=\"#4-Final-Thoughts\" class=\"headerlink\" title=\"4. Final Thoughts \"></a><font size=3 color=#4169E1>4. Final Thoughts </font></h4><p>Because SwiftUI will only come out in 2019, compatibility for previous iOS versions is expected to be a bit of a problem. Because UIKit has been developed for many years, SwiftUI has not been as powerful as UIKit third-party libraries, but it is only a matter of time. And Apple in order to be compatible with some of the methods used, such as UIHostingController. read a lot of foreign articles, many of them developers are very clear point: SwiftUI will eventually replace UIKit, and UIKit will eventually be abandoned.</p>\n<h4 id=\"5-Recommended-Learning-Resources\"><a href=\"#5-Recommended-Learning-Resources\" class=\"headerlink\" title=\"5. Recommended Learning Resources: \"></a><font size=3 color=#4169E1>5. Recommended Learning Resources: </font></h4><ol>\n<li>Apple Official:<br>[1] <a href=\"https://developer.apple.com/tutorials/swiftui\">https://developer.apple.com/tutorials/swiftui</a><br>[2] <a href=\"https://developer.apple.com/documentation/SwiftUI/View-fundamentals\">https://developer.apple.com/documentation/SwiftUI/View-fundamentals</a></li>\n<li>Hackingwithswift Series:<br>[1] <a href=\"https://www.hackingwithswift.com/books/ios-swiftui/\">https://www.hackingwithswift.com/books/ios-swiftui/</a></li>\n<li>SwiftfulThinking Series:<br>[1] <a href=\"https://www.youtube.com/playlist?list=PLwvDm4VfkdphqETTBf-DdjCoAvhai1QpO\">https://www.youtube.com/playlist?list=PLwvDm4VfkdphqETTBf-DdjCoAvhai1QpO</a><br>[2] <a href=\"https://www.bilibili.com/video/BV1KY411f7in\">https://www.bilibili.com/video/BV1KY411f7in</a><br>[3] <a href=\"https://github.com/SwiftfulThinking\">https://github.com/SwiftfulThinking</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<h4 id=\"1-Header-information-is-incorrect\"><a href=\"#1-Header-information-is-incorrect\" class=\"headerlink\" title=\"1. Header information is incorrect\"></a><font size=3 color=#4169E1>1. Header information is incorrect</font></h4><p>Just as we struggled with whether or not to embrace Swift, are many people today struggling with whether or not to embrace SwiftUI. Then I can tell you very clearly that if you choose to embrace Swift, then SwiftUI is a hurdle you won’t be able to get past sooner or later! Take my advice, it’s not too late to embrace SwiftUI, you’ll find more and more hiring JD’s asking for SwiftUI. I’ve also been learning SwiftUI on my own lately, and I’m going to be writing a series of posts about SwiftUI, so let’s start with this one on SwiftUI vs UIKit and why we’re going to go with SwiftUI.</p>\n<h4 id=\"2-UIKit\"><a href=\"#2-UIKit\" class=\"headerlink\" title=\"2. UIKit\"></a><font size=3 color=#4169E1>2. UIKit</font></h4><p>UIKit was publicly released in 2008 and is built on the object-oriented Objective-C language. In UIKit, all views inherit from a class called UIView, which has a very large number of properties and methods-such as background, layout, layers for rendering, and so on-there are almost 200 properties, and every UIView and subclass of UIView, whether you want it or not, will have Every UIView and subclass of UIView will have these properties whether you want them or not. </p>\n<p>For example, there is a special UIStackView in UIKit, which is a view type that will not be rendered for the design intent of making layouts simpler. But because of the inheritance mechanism, even though it doesn’t render, it has those various unused properties including background color. </p>\n<p>So, in UIKit, when we draw a UI that contains a series of labels&#x2F;buttons, etc., it’s a stack of “big” and “heavy” Views that contain more than 200 attributes.</p>\n<h4 id=\"3-SwiftUI\"><a href=\"#3-SwiftUI\" class=\"headerlink\" title=\"3. SwiftUI\"></a><font size=3 color=#4169E1>3. SwiftUI</font></h4><p>Born in 2019, SwiftUI is a modern framework for building user interfaces introduced by Apple. As new devices evolve in terms of processing power, graphics performance, and other technical features, SwiftUI takes full advantage of these new hardware and technical capabilities, optimizing and tuning the underlying implementation so that apps running on new devices can render interfaces, handle user interactions, and deliver smoother animations and effects more efficiently.</p>\n<p>SwiftUI is based on responsive programming approach to UI development, all the views are fine-grained structure struct, compared struct and class can be known, Swift is very much advocate the use of struct, the specific why will not expand.  In SwiftUI, each view is a lightweight struct structure, which abandons UIKit’s inheritance approach and uses protocols to contain the few properties and modifiers needed. All in all, SwiftUI is much more performant and faster than UIKit, with less overhead for creating the same view.</p>\n<p>In addition, SwiftUI provides a number of keywords like State, which not only allows us to write less code, but also allows us to focus more on the UI changes caused by value changes in responsive programming thinking. Since class can freely modify the value of attributes, which may bring complicated logic, in contrast, struct under the SwiftUI development of UI code is more “independent” (many of the capabilities it has also provided you, do not need to build the wheel again)</p>\n<h4 id=\"4-Final-Thoughts\"><a href=\"#4-Final-Thoughts\" class=\"headerlink\" title=\"4. Final Thoughts \"></a><font size=3 color=#4169E1>4. Final Thoughts </font></h4><p>Because SwiftUI will only come out in 2019, compatibility for previous iOS versions is expected to be a bit of a problem. Because UIKit has been developed for many years, SwiftUI has not been as powerful as UIKit third-party libraries, but it is only a matter of time. And Apple in order to be compatible with some of the methods used, such as UIHostingController. read a lot of foreign articles, many of them developers are very clear point: SwiftUI will eventually replace UIKit, and UIKit will eventually be abandoned.</p>\n<h4 id=\"5-Recommended-Learning-Resources\"><a href=\"#5-Recommended-Learning-Resources\" class=\"headerlink\" title=\"5. Recommended Learning Resources: \"></a><font size=3 color=#4169E1>5. Recommended Learning Resources: </font></h4><ol>\n<li>Apple Official:<br>[1] <a href=\"https://developer.apple.com/tutorials/swiftui\">https://developer.apple.com/tutorials/swiftui</a><br>[2] <a href=\"https://developer.apple.com/documentation/SwiftUI/View-fundamentals\">https://developer.apple.com/documentation/SwiftUI/View-fundamentals</a></li>\n<li>Hackingwithswift Series:<br>[1] <a href=\"https://www.hackingwithswift.com/books/ios-swiftui/\">https://www.hackingwithswift.com/books/ios-swiftui/</a></li>\n<li>SwiftfulThinking Series:<br>[1] <a href=\"https://www.youtube.com/playlist?list=PLwvDm4VfkdphqETTBf-DdjCoAvhai1QpO\">https://www.youtube.com/playlist?list=PLwvDm4VfkdphqETTBf-DdjCoAvhai1QpO</a><br>[2] <a href=\"https://www.bilibili.com/video/BV1KY411f7in\">https://www.bilibili.com/video/BV1KY411f7in</a><br>[3] <a href=\"https://github.com/SwiftfulThinking\">https://github.com/SwiftfulThinking</a></li>\n</ol>\n"},{"title":"00. Generation of random numbers","date":"2023-02-28T12:47:59.000Z","_content":"  \n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nIn Swift, we can still use the ** arc4random ** method to obtain random numbers. However, it should be noted that:\n> Arc4random() uses the key stream generator encrypted by Arc4 password to generate a random number in the interval [0, 2 ^ 32). The return type of this function is always UInt32.\n\n```Swift \nlet faceCount = 6\nlet randomResult = Int(arc4random()) % faceCount + 1\nprint(randomResult)\n```\nThe above code is not a problem on 64 bit machines, but there is a risk of crash if you may encounter iPhone 5 and its previous devices. In this case, it is relatively safe to use an improved version:\n\n```Swift\nfunc arc4random_uniform(_: UInt32) -> UInt32\n```\nIt accepts a UInt32 type number as input, and reduces the result to 0 to n-1.\n```Swift\nlet faceCount: UInt32 = 6\nlet randomResult = Int(arc4random_uniform(faceCount)) + 1\nprint(randomResult)\n```\nThe following is a best practice based on Range:\n```Swift\nfunc random(in range: Range<Int>) -> Int {\n    let count = UInt32(range.endIndex - range.startIndex)\n    return  Int(arc4random_uniform(count)) + range.startIndex\n}\nfor _ in 0...100 {\n    let range = Range<Int>(1...6)\n    print(random(in: range))\n}\n```\n \n\n\n\n\n\n\n","source":"_posts/Swift/00. Tips/00. Generation of random numbers.md","raw":"---\ntitle: 00. Generation of random numbers\ndate: 2023-02-28 13:47:59\ncategories: \n- [Swift, 00. Tips]\ntags:\n- random\n---\n  \n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nIn Swift, we can still use the ** arc4random ** method to obtain random numbers. However, it should be noted that:\n> Arc4random() uses the key stream generator encrypted by Arc4 password to generate a random number in the interval [0, 2 ^ 32). The return type of this function is always UInt32.\n\n```Swift \nlet faceCount = 6\nlet randomResult = Int(arc4random()) % faceCount + 1\nprint(randomResult)\n```\nThe above code is not a problem on 64 bit machines, but there is a risk of crash if you may encounter iPhone 5 and its previous devices. In this case, it is relatively safe to use an improved version:\n\n```Swift\nfunc arc4random_uniform(_: UInt32) -> UInt32\n```\nIt accepts a UInt32 type number as input, and reduces the result to 0 to n-1.\n```Swift\nlet faceCount: UInt32 = 6\nlet randomResult = Int(arc4random_uniform(faceCount)) + 1\nprint(randomResult)\n```\nThe following is a best practice based on Range:\n```Swift\nfunc random(in range: Range<Int>) -> Int {\n    let count = UInt32(range.endIndex - range.startIndex)\n    return  Int(arc4random_uniform(count)) + range.startIndex\n}\nfor _ in 0...100 {\n    let range = Range<Int>(1...6)\n    print(random(in: range))\n}\n```\n \n\n\n\n\n\n\n","slug":"Swift/00. Tips/00. Generation of random numbers","published":1,"updated":"2023-08-15T16:39:19.766Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clm7w97r4000ekb0mgxhf9o5y","content":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>In Swift, we can still use the ** arc4random ** method to obtain random numbers. However, it should be noted that:</p>\n<blockquote>\n<p>Arc4random() uses the key stream generator encrypted by Arc4 password to generate a random number in the interval [0, 2 ^ 32). The return type of this function is always UInt32.</p>\n</blockquote>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> faceCount <span class=\"operator\">=</span> <span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> randomResult <span class=\"operator\">=</span> <span class=\"type\">Int</span>(arc4random()) <span class=\"operator\">%</span> faceCount <span class=\"operator\">+</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(randomResult)</span><br></pre></td></tr></table></figure>\n<p>The above code is not a problem on 64 bit machines, but there is a risk of crash if you may encounter iPhone 5 and its previous devices. In this case, it is relatively safe to use an improved version:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">arc4random_uniform</span>(<span class=\"keyword\">_</span>: <span class=\"type\">UInt32</span>) -&gt; <span class=\"type\">UInt32</span></span><br></pre></td></tr></table></figure>\n<p>It accepts a UInt32 type number as input, and reduces the result to 0 to n-1.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> faceCount: <span class=\"type\">UInt32</span> <span class=\"operator\">=</span> <span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> randomResult <span class=\"operator\">=</span> <span class=\"type\">Int</span>(arc4random_uniform(faceCount)) <span class=\"operator\">+</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(randomResult)</span><br></pre></td></tr></table></figure>\n<p>The following is a best practice based on Range:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">random</span>(<span class=\"params\">in</span> <span class=\"params\">range</span>: <span class=\"type\">Range</span>&lt;<span class=\"type\">Int</span>&gt;) -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> count <span class=\"operator\">=</span> <span class=\"type\">UInt32</span>(range.endIndex <span class=\"operator\">-</span> range.startIndex)</span><br><span class=\"line\">    <span class=\"keyword\">return</span>  <span class=\"type\">Int</span>(arc4random_uniform(count)) <span class=\"operator\">+</span> range.startIndex</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"keyword\">_</span> <span class=\"keyword\">in</span> <span class=\"number\">0</span><span class=\"operator\">...</span><span class=\"number\">100</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> range <span class=\"operator\">=</span> <span class=\"type\">Range</span>&lt;<span class=\"type\">Int</span>&gt;(<span class=\"number\">1</span><span class=\"operator\">...</span><span class=\"number\">6</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(random(in: range))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>In Swift, we can still use the ** arc4random ** method to obtain random numbers. However, it should be noted that:</p>\n<blockquote>\n<p>Arc4random() uses the key stream generator encrypted by Arc4 password to generate a random number in the interval [0, 2 ^ 32). The return type of this function is always UInt32.</p>\n</blockquote>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> faceCount <span class=\"operator\">=</span> <span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> randomResult <span class=\"operator\">=</span> <span class=\"type\">Int</span>(arc4random()) <span class=\"operator\">%</span> faceCount <span class=\"operator\">+</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(randomResult)</span><br></pre></td></tr></table></figure>\n<p>The above code is not a problem on 64 bit machines, but there is a risk of crash if you may encounter iPhone 5 and its previous devices. In this case, it is relatively safe to use an improved version:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">arc4random_uniform</span>(<span class=\"keyword\">_</span>: <span class=\"type\">UInt32</span>) -&gt; <span class=\"type\">UInt32</span></span><br></pre></td></tr></table></figure>\n<p>It accepts a UInt32 type number as input, and reduces the result to 0 to n-1.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> faceCount: <span class=\"type\">UInt32</span> <span class=\"operator\">=</span> <span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> randomResult <span class=\"operator\">=</span> <span class=\"type\">Int</span>(arc4random_uniform(faceCount)) <span class=\"operator\">+</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(randomResult)</span><br></pre></td></tr></table></figure>\n<p>The following is a best practice based on Range:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">random</span>(<span class=\"params\">in</span> <span class=\"params\">range</span>: <span class=\"type\">Range</span>&lt;<span class=\"type\">Int</span>&gt;) -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> count <span class=\"operator\">=</span> <span class=\"type\">UInt32</span>(range.endIndex <span class=\"operator\">-</span> range.startIndex)</span><br><span class=\"line\">    <span class=\"keyword\">return</span>  <span class=\"type\">Int</span>(arc4random_uniform(count)) <span class=\"operator\">+</span> range.startIndex</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"keyword\">_</span> <span class=\"keyword\">in</span> <span class=\"number\">0</span><span class=\"operator\">...</span><span class=\"number\">100</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> range <span class=\"operator\">=</span> <span class=\"type\">Range</span>&lt;<span class=\"type\">Int</span>&gt;(<span class=\"number\">1</span><span class=\"operator\">...</span><span class=\"number\">6</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(random(in: range))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"01. Handling of errors and exceptions","date":"2023-02-28T12:48:59.000Z","_content":"\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\n#### <font size=3 color=#4169E1> 1. Handlings of Objective-C </font>\n \n \nIn Objective-C, we often write code like this:\n```Swift \nNSError *error;\nBOOL success = [data writeToFile: path options: options error: &error];\nif(error) {\n// something happens\n}\n```\nThat is a very good method to handle possible errors. However we often simply this code like this:\n```Swift \n[data writeToFile: path options: options error: nil];\n```\nWe set varaible error to nil, Maybe we don't care about this error when we are developing. However this method can report errors. For example, if the space of the device's disk is full, you will write unsuccessfully, and this error can't not be found easily becase of our laziness.\n\n#### <font size=3 color=#4169E1> 2. Handlings of Swift </font>\nIn Swift, we don't need to write an pointer variable error that waiting to be written by called method. we can use 'try catch' to take place of it. \n```Swift\ndo {\n    try d.write(toFile: \"Hello\", options: [])\n} catch let error as NSError {\n    print (\"Error: \\(error.domain)\")\n}\n```\n\nIt is a very common to use 'try catch' to hand errors and exceptions in Swift. The sample code is as follows.\n```Swift \nenum LoginError: Error {\n    case UserNotFound, UserPasswordNotMatch\n}\n\nfunc login(user: String, password: String) throws {\n    if !users.keys.contains(user) {\n        throw LoginError.UserNotFound\n    }\n    if users[user] != password {\n        throw LoginError.UserPasswordNotMatch\n    }\n    print(\"Login successfully.\")\n}\n// call\nlet users:[String:String] = [\"liudehua\":\"One\", \"wanggang\":\"Two\", \"liming\":\"Three\"]\ndo {\n    try login(user: \"ll\", password: \"234\")\n} catch LoginError.UserNotFound {\n    print(\"UserNotFound\")\n} catch LoginError.UserPasswordNotMatch {\n    print(\"UserPasswordNotMatch\")\n} catch {\n    //default handling, don't delete it, or it would report an error.\n}\n```\n\n\n","source":"_posts/Swift/00. Tips/01. Handling of errors and exceptions.md","raw":"---\ntitle: 01. Handling of errors and exceptions\ndate: 2023-02-28 13:48:59\ncategories: \n- [Swift, 00. Tips]\ntags:\n- errors\n- exceptions\n---\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\n#### <font size=3 color=#4169E1> 1. Handlings of Objective-C </font>\n \n \nIn Objective-C, we often write code like this:\n```Swift \nNSError *error;\nBOOL success = [data writeToFile: path options: options error: &error];\nif(error) {\n// something happens\n}\n```\nThat is a very good method to handle possible errors. However we often simply this code like this:\n```Swift \n[data writeToFile: path options: options error: nil];\n```\nWe set varaible error to nil, Maybe we don't care about this error when we are developing. However this method can report errors. For example, if the space of the device's disk is full, you will write unsuccessfully, and this error can't not be found easily becase of our laziness.\n\n#### <font size=3 color=#4169E1> 2. Handlings of Swift </font>\nIn Swift, we don't need to write an pointer variable error that waiting to be written by called method. we can use 'try catch' to take place of it. \n```Swift\ndo {\n    try d.write(toFile: \"Hello\", options: [])\n} catch let error as NSError {\n    print (\"Error: \\(error.domain)\")\n}\n```\n\nIt is a very common to use 'try catch' to hand errors and exceptions in Swift. The sample code is as follows.\n```Swift \nenum LoginError: Error {\n    case UserNotFound, UserPasswordNotMatch\n}\n\nfunc login(user: String, password: String) throws {\n    if !users.keys.contains(user) {\n        throw LoginError.UserNotFound\n    }\n    if users[user] != password {\n        throw LoginError.UserPasswordNotMatch\n    }\n    print(\"Login successfully.\")\n}\n// call\nlet users:[String:String] = [\"liudehua\":\"One\", \"wanggang\":\"Two\", \"liming\":\"Three\"]\ndo {\n    try login(user: \"ll\", password: \"234\")\n} catch LoginError.UserNotFound {\n    print(\"UserNotFound\")\n} catch LoginError.UserPasswordNotMatch {\n    print(\"UserPasswordNotMatch\")\n} catch {\n    //default handling, don't delete it, or it would report an error.\n}\n```\n\n\n","slug":"Swift/00. Tips/01. Handling of errors and exceptions","published":1,"updated":"2023-08-15T17:26:29.396Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clm7w97r5000fkb0maksa94uw","content":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<h4 id=\"1-Handlings-of-Objective-C\"><a href=\"#1-Handlings-of-Objective-C\" class=\"headerlink\" title=\" 1. Handlings of Objective-C \"></a><font size=3 color=#4169E1> 1. Handlings of Objective-C </font></h4><p>In Objective-C, we often write code like this:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">NSError</span> <span class=\"operator\">*</span>error;</span><br><span class=\"line\"><span class=\"type\">BOOL</span> success <span class=\"operator\">=</span> [data writeToFile: path options: options error: <span class=\"operator\">&amp;</span>error];</span><br><span class=\"line\"><span class=\"keyword\">if</span>(error) &#123;</span><br><span class=\"line\"><span class=\"comment\">// something happens</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>That is a very good method to handle possible errors. However we often simply this code like this:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[data writeToFile: path options: options error: <span class=\"literal\">nil</span>];</span><br></pre></td></tr></table></figure>\n<p>We set varaible error to nil, Maybe we don’t care about this error when we are developing. However this method can report errors. For example, if the space of the device’s disk is full, you will write unsuccessfully, and this error can’t not be found easily becase of our laziness.</p>\n<h4 id=\"2-Handlings-of-Swift\"><a href=\"#2-Handlings-of-Swift\" class=\"headerlink\" title=\" 2. Handlings of Swift \"></a><font size=3 color=#4169E1> 2. Handlings of Swift </font></h4><p>In Swift, we don’t need to write an pointer variable error that waiting to be written by called method. we can use ‘try catch’ to take place of it. </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> d.write(toFile: <span class=\"string\">&quot;Hello&quot;</span>, options: [])</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> <span class=\"keyword\">let</span> error <span class=\"keyword\">as</span> <span class=\"type\">NSError</span> &#123;</span><br><span class=\"line\">    print (<span class=\"string\">&quot;Error: <span class=\"subst\">\\(error.domain)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>It is a very common to use ‘try catch’ to hand errors and exceptions in Swift. The sample code is as follows.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">LoginError</span>: <span class=\"title class_\">Error</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">UserNotFound</span>, <span class=\"type\">UserPasswordNotMatch</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">login</span>(<span class=\"params\">user</span>: <span class=\"type\">String</span>, <span class=\"params\">password</span>: <span class=\"type\">String</span>) <span class=\"keyword\">throws</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"operator\">!</span>users.keys.contains(user) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"type\">LoginError</span>.<span class=\"type\">UserNotFound</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> users[user] <span class=\"operator\">!=</span> password &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"type\">LoginError</span>.<span class=\"type\">UserPasswordNotMatch</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Login successfully.&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// call</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> users:[<span class=\"type\">String</span>:<span class=\"type\">String</span>] <span class=\"operator\">=</span> [<span class=\"string\">&quot;liudehua&quot;</span>:<span class=\"string\">&quot;One&quot;</span>, <span class=\"string\">&quot;wanggang&quot;</span>:<span class=\"string\">&quot;Two&quot;</span>, <span class=\"string\">&quot;liming&quot;</span>:<span class=\"string\">&quot;Three&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> login(user: <span class=\"string\">&quot;ll&quot;</span>, password: <span class=\"string\">&quot;234&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> <span class=\"type\">LoginError</span>.<span class=\"type\">UserNotFound</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;UserNotFound&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> <span class=\"type\">LoginError</span>.<span class=\"type\">UserPasswordNotMatch</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;UserPasswordNotMatch&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//default handling, don&#x27;t delete it, or it would report an error.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<h4 id=\"1-Handlings-of-Objective-C\"><a href=\"#1-Handlings-of-Objective-C\" class=\"headerlink\" title=\" 1. Handlings of Objective-C \"></a><font size=3 color=#4169E1> 1. Handlings of Objective-C </font></h4><p>In Objective-C, we often write code like this:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">NSError</span> <span class=\"operator\">*</span>error;</span><br><span class=\"line\"><span class=\"type\">BOOL</span> success <span class=\"operator\">=</span> [data writeToFile: path options: options error: <span class=\"operator\">&amp;</span>error];</span><br><span class=\"line\"><span class=\"keyword\">if</span>(error) &#123;</span><br><span class=\"line\"><span class=\"comment\">// something happens</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>That is a very good method to handle possible errors. However we often simply this code like this:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[data writeToFile: path options: options error: <span class=\"literal\">nil</span>];</span><br></pre></td></tr></table></figure>\n<p>We set varaible error to nil, Maybe we don’t care about this error when we are developing. However this method can report errors. For example, if the space of the device’s disk is full, you will write unsuccessfully, and this error can’t not be found easily becase of our laziness.</p>\n<h4 id=\"2-Handlings-of-Swift\"><a href=\"#2-Handlings-of-Swift\" class=\"headerlink\" title=\" 2. Handlings of Swift \"></a><font size=3 color=#4169E1> 2. Handlings of Swift </font></h4><p>In Swift, we don’t need to write an pointer variable error that waiting to be written by called method. we can use ‘try catch’ to take place of it. </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> d.write(toFile: <span class=\"string\">&quot;Hello&quot;</span>, options: [])</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> <span class=\"keyword\">let</span> error <span class=\"keyword\">as</span> <span class=\"type\">NSError</span> &#123;</span><br><span class=\"line\">    print (<span class=\"string\">&quot;Error: <span class=\"subst\">\\(error.domain)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>It is a very common to use ‘try catch’ to hand errors and exceptions in Swift. The sample code is as follows.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">LoginError</span>: <span class=\"title class_\">Error</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">UserNotFound</span>, <span class=\"type\">UserPasswordNotMatch</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">login</span>(<span class=\"params\">user</span>: <span class=\"type\">String</span>, <span class=\"params\">password</span>: <span class=\"type\">String</span>) <span class=\"keyword\">throws</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"operator\">!</span>users.keys.contains(user) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"type\">LoginError</span>.<span class=\"type\">UserNotFound</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> users[user] <span class=\"operator\">!=</span> password &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"type\">LoginError</span>.<span class=\"type\">UserPasswordNotMatch</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Login successfully.&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// call</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> users:[<span class=\"type\">String</span>:<span class=\"type\">String</span>] <span class=\"operator\">=</span> [<span class=\"string\">&quot;liudehua&quot;</span>:<span class=\"string\">&quot;One&quot;</span>, <span class=\"string\">&quot;wanggang&quot;</span>:<span class=\"string\">&quot;Two&quot;</span>, <span class=\"string\">&quot;liming&quot;</span>:<span class=\"string\">&quot;Three&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> login(user: <span class=\"string\">&quot;ll&quot;</span>, password: <span class=\"string\">&quot;234&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> <span class=\"type\">LoginError</span>.<span class=\"type\">UserNotFound</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;UserNotFound&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> <span class=\"type\">LoginError</span>.<span class=\"type\">UserPasswordNotMatch</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;UserPasswordNotMatch&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//default handling, don&#x27;t delete it, or it would report an error.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n"},{"title":"02. Lazy loading and Anonymous function","date":"2023-02-28T12:50:59.000Z","_content":"  \n<font color=gray size=2>*It will take about 1 minutes to finish reading this article.*</font>\n\n\nIn Swift, we use the lazy keyword before the property to simply implement delayed loading, for example:\n\n```Swift \nlazy var str: String = {\n    let str = \"Hello\" \n    print(\"Only access the output for the first time\")\n    return str\n}()\n```\nThis style of writing is similar to closure, but it is actually an kind of anonymous function. We can use anonymous functions to initilize data. As shown below, it is an anoymous function creation call operation:\n```Swift\n{\n\t//anonymous function code\n}()\n```\nWe can try to print the type of this type.\n```Swift\nfunc test() {\n\n}\nfunc TestCase() {\n    let a: () = {}()\n    let b = test\n    print(type(of: a))\n    print(type(of: b))\n}\n```\nThe result is:\n```\n()\n() -> ()\n```\n\n\n\n","source":"_posts/Swift/00. Tips/02. Lazy loading and Anonymous function.md","raw":"---\ntitle: 02. Lazy loading and Anonymous function\ndate: 2023-02-28 13:50:59\ncategories: \n- [Swift, 00. Tips]\ntags:\n- lazy\n- anonymous\n---\n  \n<font color=gray size=2>*It will take about 1 minutes to finish reading this article.*</font>\n\n\nIn Swift, we use the lazy keyword before the property to simply implement delayed loading, for example:\n\n```Swift \nlazy var str: String = {\n    let str = \"Hello\" \n    print(\"Only access the output for the first time\")\n    return str\n}()\n```\nThis style of writing is similar to closure, but it is actually an kind of anonymous function. We can use anonymous functions to initilize data. As shown below, it is an anoymous function creation call operation:\n```Swift\n{\n\t//anonymous function code\n}()\n```\nWe can try to print the type of this type.\n```Swift\nfunc test() {\n\n}\nfunc TestCase() {\n    let a: () = {}()\n    let b = test\n    print(type(of: a))\n    print(type(of: b))\n}\n```\nThe result is:\n```\n()\n() -> ()\n```\n\n\n\n","slug":"Swift/00. Tips/02. Lazy loading and Anonymous function","published":1,"updated":"2023-08-15T16:40:08.374Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clm7w97r7000ikb0mdhwkf33t","content":"<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p>\n<p>In Swift, we use the lazy keyword before the property to simply implement delayed loading, for example:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">lazy</span> <span class=\"keyword\">var</span> str: <span class=\"type\">String</span> <span class=\"operator\">=</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> str <span class=\"operator\">=</span> <span class=\"string\">&quot;Hello&quot;</span> </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Only access the output for the first time&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str</span><br><span class=\"line\">&#125;()</span><br></pre></td></tr></table></figure>\n<p>This style of writing is similar to closure, but it is actually an kind of anonymous function. We can use anonymous functions to initilize data. As shown below, it is an anoymous function creation call operation:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//anonymous function code</span></span><br><span class=\"line\">&#125;()</span><br></pre></td></tr></table></figure>\n<p>We can try to print the type of this type.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">test</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">TestCase</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a: () <span class=\"operator\">=</span> &#123;&#125;()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> b <span class=\"operator\">=</span> test</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(of: a))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(of: b))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The result is:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">()</span><br><span class=\"line\">() -&gt; ()</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p>\n<p>In Swift, we use the lazy keyword before the property to simply implement delayed loading, for example:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">lazy</span> <span class=\"keyword\">var</span> str: <span class=\"type\">String</span> <span class=\"operator\">=</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> str <span class=\"operator\">=</span> <span class=\"string\">&quot;Hello&quot;</span> </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Only access the output for the first time&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str</span><br><span class=\"line\">&#125;()</span><br></pre></td></tr></table></figure>\n<p>This style of writing is similar to closure, but it is actually an kind of anonymous function. We can use anonymous functions to initilize data. As shown below, it is an anoymous function creation call operation:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//anonymous function code</span></span><br><span class=\"line\">&#125;()</span><br></pre></td></tr></table></figure>\n<p>We can try to print the type of this type.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">test</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">TestCase</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a: () <span class=\"operator\">=</span> &#123;&#125;()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> b <span class=\"operator\">=</span> test</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(of: a))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(of: b))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The result is:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">()</span><br><span class=\"line\">() -&gt; ()</span><br></pre></td></tr></table></figure>\n\n\n\n"},{"title":"03. NSString and String","date":"2023-02-28T12:51:59.000Z","_content":"\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\n\n#### <font size=3 color=#4169E1> 1. Mutual Transformation </font>\nNSString and String can transform to each other.   \n<strong> Example Code </strong>\n```Swift \nfunc StringToNSString()  {\n    let a = String(\"1234567890\")\n    let b = a as NSString\n    print(b.integerValue)\n    print(b.length)\n}\n\nfunc NSStringToString()  {\n    let a : NSString = \"1234567890\"\n    let b = a as String\n    print(b)\n}\n```\n\n#### <font size=3 color=#4169E1> 2. Differences between NSString and String </font> \n\nNSString is a subclass of NSObject and that is to say, it is a class that is a reference type.\n```Swift \nopen class NSString : NSObject, NSCopying, NSMutableCopying, NSSecureCoding {\n\n    open var length: Int { get }\n    ...\n}\n```\n\nHowever, String is a value type which is a kind of struct.\n```Swift \n@frozen public struct String {  \n    @inlinable public init()\n    ...\n}\n```\nThey have some identical APIs, but they also have their own independent APIs.  \n```Swift\n    var str = String()\n    str = \"123456\"\n    var nsStr = NSString();\n    nsStr = \"123456\";\n```\n\n<strong>1.1 Similar or Identical APIs</strong>\n<details>\n<summary>Sample Code</summary>\n\n```Swift\n//1. Get the number of characters in the string\nprint(str.count);   //6\nprint(nsStr.length);   //6\n//2. Prefix/Suffix Operations\nvar str = \"123456\";\nstr.hasPrefix(\"12\") //true\nstr.hasSuffix(\"56\") //true\n\nvar nsStr = NSString(stringLiteral: \"123456\");\nnsStr.hasPrefix(\"12\")   //true\nnsStr.hasSuffix(\"56\")   //true\n//3. Prefix/Suffix Operations\nvar str = \"123456-11\";\nstr.components(separatedBy: \"-\");   //[\"123456\", \"11\"]\nvar nsStr = NSString(stringLiteral: \"123456-22\");\nnsStr.components(separatedBy: \"-\"); //[\"123456\", \"22\"]\n//4. Letter case conversion ops for uppercased/lowercased/capitalized\nvar str = \"abc\";\nprint(str.uppercased());    //ABC\nprint(str.lowercased());    //abc\n\nvar nsStr = NSString(stringLiteral: \"cba\");\nprint(nsStr.uppercased);    //CBA\nprint(nsStr.lowercased);    //cba\n\nvar str = \"abc\";\nprint(str.capitalized);    //Abc\n\nvar nsStr = NSString(stringLiteral: \"cba\");\nprint(nsStr.capitalized);    //Cba\n//5. Strip specific strings ops for trimmingCharacters\nlet str = \"\\r abc \";\nlet strTrimed = str.trimmingCharacters(in: .whitespacesAndNewlines)\nprint(strTrimed);   //abc\n\nlet nsStr = NSString(stringLiteral: \"\\r cba \");\nlet nsStrTrimed = nsStr.trimmingCharacters(in: .whitespacesAndNewlines);\nprint(nsStrTrimed); //cba\n//6. Character substitution ops for replacingOccurrences:of:with\nlet str = \"hello String\";\nlet str1 = str.replacingOccurrences(of: \"String\", with: \"world\")\nprint(str1) //\"hello world\"\n\nlet nsStr = NSString(stringLiteral:\"hello NSString\");\nlet nsStr1 = nsStr.replacingOccurrences(of: \"NSString\", with: \"world\")\nprint(nsStr1)   //\"hello world\"\n\n//7. Convert decimal hexadecimal octal data to string\nlet hexStr = String().appendingFormat(\"%x\",16)//10->16，result:\"10\"\nlet oStr = String().appendingFormat(\"%o\",16)//10->8，result:\"20\"\nlet dStr = String().appendingFormat(\"%d\",0x10)//16->10，result:\"16\"\nlet dStr1 = String(format: \"%d\", 0o10)//8->10，result: \"8\"\n\nlet hexNSStr = NSString().appendingFormat(\"%x\", 16)//10->16，result:\"10\"\nlet oNSStr = NSString().appendingFormat(\"%o\",16)//10->8，result:\"20\"\nlet dNSStr = NSString().appendingFormat(\"%d\",0x10)//16->10，result:\"16\"\nlet dNSStr1 = NSString(format: \"%d\", 0o10)//8->10，result: \"8\"\n \n```\n</details>\n\n<strong>1.2 Independent APIs</strong>  \n1.2.1 Independent APIs of String    \n<details>\n<summary>Sample Code</summary>\n\n```Swift\n//1. isEmpty\nvar str = String();\nstr = \"123456\";\nprint(str.isEmpty);\n//2. sorted()\nvar str = \"215423\";\nprint(str.sorted()); //[\"1\", \"2\", \"2\", \"3\", \"4\", \"5\"]\n\n//3. filter()\nlet str = \"12 34 56\";\nlet filter = str.filter { (char) -> Bool in\n    char != \" \"\n};\nprint(filter);//123456\n\n//4. enumerated()\nlet str = \"123456\";\nfor data in str.enumerated() {\n    print(data);\n}\n```\n</details>\n\n1.2.2 Independent APIs of NSString\n<details>\n<summary>Sample Code</summary>\n\n```Swift\n// 1. initialize methods\nvar nsStr = NSString(stringLiteral: \"123456\");\nvar nsStr = NSString.init(string: \"123456\");\n\n// 2. boolValue\nvar nsStr = NSString(stringLiteral: \"123456\");\nprint(nsStr.boolValue);//true\n\n// 3. isEqual()\nvar nsStr = NSString(stringLiteral: \"123456\");\nprint(nsStr.isEqual(to: \"123456\"));//true\n\n// 4. Numeric Ops\nvar nsStr = NSString(stringLiteral: \"123456\")\nprint(nsStr.intValue);\nprint(nsStr.floatValue);\nprint(nsStr.doubleValue);\n```\n</details>\n","source":"_posts/Swift/00. Tips/03. NSString and String.md","raw":"---\ntitle: 03. NSString and String\ndate: 2023-02-28 13:51:59\ncategories: \n- [Swift, 00. Tips]\ntags:\n- nsstring\n- string\n---\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\n\n#### <font size=3 color=#4169E1> 1. Mutual Transformation </font>\nNSString and String can transform to each other.   \n<strong> Example Code </strong>\n```Swift \nfunc StringToNSString()  {\n    let a = String(\"1234567890\")\n    let b = a as NSString\n    print(b.integerValue)\n    print(b.length)\n}\n\nfunc NSStringToString()  {\n    let a : NSString = \"1234567890\"\n    let b = a as String\n    print(b)\n}\n```\n\n#### <font size=3 color=#4169E1> 2. Differences between NSString and String </font> \n\nNSString is a subclass of NSObject and that is to say, it is a class that is a reference type.\n```Swift \nopen class NSString : NSObject, NSCopying, NSMutableCopying, NSSecureCoding {\n\n    open var length: Int { get }\n    ...\n}\n```\n\nHowever, String is a value type which is a kind of struct.\n```Swift \n@frozen public struct String {  \n    @inlinable public init()\n    ...\n}\n```\nThey have some identical APIs, but they also have their own independent APIs.  \n```Swift\n    var str = String()\n    str = \"123456\"\n    var nsStr = NSString();\n    nsStr = \"123456\";\n```\n\n<strong>1.1 Similar or Identical APIs</strong>\n<details>\n<summary>Sample Code</summary>\n\n```Swift\n//1. Get the number of characters in the string\nprint(str.count);   //6\nprint(nsStr.length);   //6\n//2. Prefix/Suffix Operations\nvar str = \"123456\";\nstr.hasPrefix(\"12\") //true\nstr.hasSuffix(\"56\") //true\n\nvar nsStr = NSString(stringLiteral: \"123456\");\nnsStr.hasPrefix(\"12\")   //true\nnsStr.hasSuffix(\"56\")   //true\n//3. Prefix/Suffix Operations\nvar str = \"123456-11\";\nstr.components(separatedBy: \"-\");   //[\"123456\", \"11\"]\nvar nsStr = NSString(stringLiteral: \"123456-22\");\nnsStr.components(separatedBy: \"-\"); //[\"123456\", \"22\"]\n//4. Letter case conversion ops for uppercased/lowercased/capitalized\nvar str = \"abc\";\nprint(str.uppercased());    //ABC\nprint(str.lowercased());    //abc\n\nvar nsStr = NSString(stringLiteral: \"cba\");\nprint(nsStr.uppercased);    //CBA\nprint(nsStr.lowercased);    //cba\n\nvar str = \"abc\";\nprint(str.capitalized);    //Abc\n\nvar nsStr = NSString(stringLiteral: \"cba\");\nprint(nsStr.capitalized);    //Cba\n//5. Strip specific strings ops for trimmingCharacters\nlet str = \"\\r abc \";\nlet strTrimed = str.trimmingCharacters(in: .whitespacesAndNewlines)\nprint(strTrimed);   //abc\n\nlet nsStr = NSString(stringLiteral: \"\\r cba \");\nlet nsStrTrimed = nsStr.trimmingCharacters(in: .whitespacesAndNewlines);\nprint(nsStrTrimed); //cba\n//6. Character substitution ops for replacingOccurrences:of:with\nlet str = \"hello String\";\nlet str1 = str.replacingOccurrences(of: \"String\", with: \"world\")\nprint(str1) //\"hello world\"\n\nlet nsStr = NSString(stringLiteral:\"hello NSString\");\nlet nsStr1 = nsStr.replacingOccurrences(of: \"NSString\", with: \"world\")\nprint(nsStr1)   //\"hello world\"\n\n//7. Convert decimal hexadecimal octal data to string\nlet hexStr = String().appendingFormat(\"%x\",16)//10->16，result:\"10\"\nlet oStr = String().appendingFormat(\"%o\",16)//10->8，result:\"20\"\nlet dStr = String().appendingFormat(\"%d\",0x10)//16->10，result:\"16\"\nlet dStr1 = String(format: \"%d\", 0o10)//8->10，result: \"8\"\n\nlet hexNSStr = NSString().appendingFormat(\"%x\", 16)//10->16，result:\"10\"\nlet oNSStr = NSString().appendingFormat(\"%o\",16)//10->8，result:\"20\"\nlet dNSStr = NSString().appendingFormat(\"%d\",0x10)//16->10，result:\"16\"\nlet dNSStr1 = NSString(format: \"%d\", 0o10)//8->10，result: \"8\"\n \n```\n</details>\n\n<strong>1.2 Independent APIs</strong>  \n1.2.1 Independent APIs of String    \n<details>\n<summary>Sample Code</summary>\n\n```Swift\n//1. isEmpty\nvar str = String();\nstr = \"123456\";\nprint(str.isEmpty);\n//2. sorted()\nvar str = \"215423\";\nprint(str.sorted()); //[\"1\", \"2\", \"2\", \"3\", \"4\", \"5\"]\n\n//3. filter()\nlet str = \"12 34 56\";\nlet filter = str.filter { (char) -> Bool in\n    char != \" \"\n};\nprint(filter);//123456\n\n//4. enumerated()\nlet str = \"123456\";\nfor data in str.enumerated() {\n    print(data);\n}\n```\n</details>\n\n1.2.2 Independent APIs of NSString\n<details>\n<summary>Sample Code</summary>\n\n```Swift\n// 1. initialize methods\nvar nsStr = NSString(stringLiteral: \"123456\");\nvar nsStr = NSString.init(string: \"123456\");\n\n// 2. boolValue\nvar nsStr = NSString(stringLiteral: \"123456\");\nprint(nsStr.boolValue);//true\n\n// 3. isEqual()\nvar nsStr = NSString(stringLiteral: \"123456\");\nprint(nsStr.isEqual(to: \"123456\"));//true\n\n// 4. Numeric Ops\nvar nsStr = NSString(stringLiteral: \"123456\")\nprint(nsStr.intValue);\nprint(nsStr.floatValue);\nprint(nsStr.doubleValue);\n```\n</details>\n","slug":"Swift/00. Tips/03. NSString and String","published":1,"updated":"2023-08-15T17:24:21.275Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clm7w97r8000kkb0m8io24dft","content":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<h4 id=\"1-Mutual-Transformation\"><a href=\"#1-Mutual-Transformation\" class=\"headerlink\" title=\" 1. Mutual Transformation \"></a><font size=3 color=#4169E1> 1. Mutual Transformation </font></h4><p>NSString and String can transform to each other.<br><strong> Example Code </strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">StringToNSString</span>()  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a <span class=\"operator\">=</span> <span class=\"type\">String</span>(<span class=\"string\">&quot;1234567890&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> b <span class=\"operator\">=</span> a <span class=\"keyword\">as</span> <span class=\"type\">NSString</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(b.integerValue)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(b.length)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">NSStringToString</span>()  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a : <span class=\"type\">NSString</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;1234567890&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> b <span class=\"operator\">=</span> a <span class=\"keyword\">as</span> <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(b)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-Differences-between-NSString-and-String\"><a href=\"#2-Differences-between-NSString-and-String\" class=\"headerlink\" title=\" 2. Differences between NSString and String \"></a><font size=3 color=#4169E1> 2. Differences between NSString and String </font></h4><p>NSString is a subclass of NSObject and that is to say, it is a class that is a reference type.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">open</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NSString</span> : <span class=\"title class_\">NSObject</span>, <span class=\"title class_\">NSCopying</span>, <span class=\"title class_\">NSMutableCopying</span>, <span class=\"title class_\">NSSecureCoding</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">open</span> <span class=\"keyword\">var</span> length: <span class=\"type\">Int</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\">    <span class=\"operator\">...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>However, String is a value type which is a kind of struct.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@frozen</span> <span class=\"keyword\">public</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">String</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">@inlinable</span> <span class=\"keyword\">public</span> <span class=\"keyword\">init</span>()</span><br><span class=\"line\">    <span class=\"operator\">...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>They have some identical APIs, but they also have their own independent APIs.  </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str <span class=\"operator\">=</span> <span class=\"type\">String</span>()</span><br><span class=\"line\">str <span class=\"operator\">=</span> <span class=\"string\">&quot;123456&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>();</span><br><span class=\"line\">nsStr <span class=\"operator\">=</span> <span class=\"string\">&quot;123456&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>1.1 Similar or Identical APIs</strong></p>\n<details>\n<summary>Sample Code</summary>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1. Get the number of characters in the string</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str.count);   <span class=\"comment\">//6</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(nsStr.length);   <span class=\"comment\">//6</span></span><br><span class=\"line\"><span class=\"comment\">//2. Prefix/Suffix Operations</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str <span class=\"operator\">=</span> <span class=\"string\">&quot;123456&quot;</span>;</span><br><span class=\"line\">str.hasPrefix(<span class=\"string\">&quot;12&quot;</span>) <span class=\"comment\">//true</span></span><br><span class=\"line\">str.hasSuffix(<span class=\"string\">&quot;56&quot;</span>) <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>(stringLiteral: <span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\">nsStr.hasPrefix(<span class=\"string\">&quot;12&quot;</span>)   <span class=\"comment\">//true</span></span><br><span class=\"line\">nsStr.hasSuffix(<span class=\"string\">&quot;56&quot;</span>)   <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"comment\">//3. Prefix/Suffix Operations</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str <span class=\"operator\">=</span> <span class=\"string\">&quot;123456-11&quot;</span>;</span><br><span class=\"line\">str.components(separatedBy: <span class=\"string\">&quot;-&quot;</span>);   <span class=\"comment\">//[&quot;123456&quot;, &quot;11&quot;]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>(stringLiteral: <span class=\"string\">&quot;123456-22&quot;</span>);</span><br><span class=\"line\">nsStr.components(separatedBy: <span class=\"string\">&quot;-&quot;</span>); <span class=\"comment\">//[&quot;123456&quot;, &quot;22&quot;]</span></span><br><span class=\"line\"><span class=\"comment\">//4. Letter case conversion ops for uppercased/lowercased/capitalized</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str <span class=\"operator\">=</span> <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str.uppercased());    <span class=\"comment\">//ABC</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str.lowercased());    <span class=\"comment\">//abc</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>(stringLiteral: <span class=\"string\">&quot;cba&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nsStr.uppercased);    <span class=\"comment\">//CBA</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(nsStr.lowercased);    <span class=\"comment\">//cba</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> str <span class=\"operator\">=</span> <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str.capitalized);    <span class=\"comment\">//Abc</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>(stringLiteral: <span class=\"string\">&quot;cba&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nsStr.capitalized);    <span class=\"comment\">//Cba</span></span><br><span class=\"line\"><span class=\"comment\">//5. Strip specific strings ops for trimmingCharacters</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> str <span class=\"operator\">=</span> <span class=\"string\">&quot;<span class=\"subst\">\\r</span> abc &quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> strTrimed <span class=\"operator\">=</span> str.trimmingCharacters(in: .whitespacesAndNewlines)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(strTrimed);   <span class=\"comment\">//abc</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>(stringLiteral: <span class=\"string\">&quot;<span class=\"subst\">\\r</span> cba &quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> nsStrTrimed <span class=\"operator\">=</span> nsStr.trimmingCharacters(in: .whitespacesAndNewlines);</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nsStrTrimed); <span class=\"comment\">//cba</span></span><br><span class=\"line\"><span class=\"comment\">//6. Character substitution ops for replacingOccurrences:of:with</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> str <span class=\"operator\">=</span> <span class=\"string\">&quot;hello String&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> str1 <span class=\"operator\">=</span> str.replacingOccurrences(of: <span class=\"string\">&quot;String&quot;</span>, with: <span class=\"string\">&quot;world&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str1) <span class=\"comment\">//&quot;hello world&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>(stringLiteral:<span class=\"string\">&quot;hello NSString&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> nsStr1 <span class=\"operator\">=</span> nsStr.replacingOccurrences(of: <span class=\"string\">&quot;NSString&quot;</span>, with: <span class=\"string\">&quot;world&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nsStr1)   <span class=\"comment\">//&quot;hello world&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//7. Convert decimal hexadecimal octal data to string</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> hexStr <span class=\"operator\">=</span> <span class=\"type\">String</span>().appendingFormat(<span class=\"string\">&quot;%x&quot;</span>,<span class=\"number\">16</span>)<span class=\"comment\">//10-&gt;16，result:&quot;10&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> oStr <span class=\"operator\">=</span> <span class=\"type\">String</span>().appendingFormat(<span class=\"string\">&quot;%o&quot;</span>,<span class=\"number\">16</span>)<span class=\"comment\">//10-&gt;8，result:&quot;20&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> dStr <span class=\"operator\">=</span> <span class=\"type\">String</span>().appendingFormat(<span class=\"string\">&quot;%d&quot;</span>,<span class=\"number\">0x10</span>)<span class=\"comment\">//16-&gt;10，result:&quot;16&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> dStr1 <span class=\"operator\">=</span> <span class=\"type\">String</span>(format: <span class=\"string\">&quot;%d&quot;</span>, <span class=\"number\">0o10</span>)<span class=\"comment\">//8-&gt;10，result: &quot;8&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> hexNSStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>().appendingFormat(<span class=\"string\">&quot;%x&quot;</span>, <span class=\"number\">16</span>)<span class=\"comment\">//10-&gt;16，result:&quot;10&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> oNSStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>().appendingFormat(<span class=\"string\">&quot;%o&quot;</span>,<span class=\"number\">16</span>)<span class=\"comment\">//10-&gt;8，result:&quot;20&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> dNSStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>().appendingFormat(<span class=\"string\">&quot;%d&quot;</span>,<span class=\"number\">0x10</span>)<span class=\"comment\">//16-&gt;10，result:&quot;16&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> dNSStr1 <span class=\"operator\">=</span> <span class=\"type\">NSString</span>(format: <span class=\"string\">&quot;%d&quot;</span>, <span class=\"number\">0o10</span>)<span class=\"comment\">//8-&gt;10，result: &quot;8&quot;</span></span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n</details>\n\n<p><strong>1.2 Independent APIs</strong><br>1.2.1 Independent APIs of String    </p>\n<details>\n<summary>Sample Code</summary>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1. isEmpty</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str <span class=\"operator\">=</span> <span class=\"type\">String</span>();</span><br><span class=\"line\">str <span class=\"operator\">=</span> <span class=\"string\">&quot;123456&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str.isEmpty);</span><br><span class=\"line\"><span class=\"comment\">//2. sorted()</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str <span class=\"operator\">=</span> <span class=\"string\">&quot;215423&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str.sorted()); <span class=\"comment\">//[&quot;1&quot;, &quot;2&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//3. filter()</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> str <span class=\"operator\">=</span> <span class=\"string\">&quot;12 34 56&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> filter <span class=\"operator\">=</span> str.filter &#123; (char) -&gt; <span class=\"type\">Bool</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    char <span class=\"operator\">!=</span> <span class=\"string\">&quot; &quot;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(filter);<span class=\"comment\">//123456</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//4. enumerated()</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> str <span class=\"operator\">=</span> <span class=\"string\">&quot;123456&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> str.enumerated() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(data);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</details>\n\n<p>1.2.2 Independent APIs of NSString</p>\n<details>\n<summary>Sample Code</summary>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. initialize methods</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>(stringLiteral: <span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>.<span class=\"keyword\">init</span>(string: <span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. boolValue</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>(stringLiteral: <span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nsStr.boolValue);<span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3. isEqual()</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>(stringLiteral: <span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nsStr.isEqual(to: <span class=\"string\">&quot;123456&quot;</span>));<span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 4. Numeric Ops</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>(stringLiteral: <span class=\"string\">&quot;123456&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nsStr.intValue);</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nsStr.floatValue);</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nsStr.doubleValue);</span><br></pre></td></tr></table></figure>\n</details>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<h4 id=\"1-Mutual-Transformation\"><a href=\"#1-Mutual-Transformation\" class=\"headerlink\" title=\" 1. Mutual Transformation \"></a><font size=3 color=#4169E1> 1. Mutual Transformation </font></h4><p>NSString and String can transform to each other.<br><strong> Example Code </strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">StringToNSString</span>()  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a <span class=\"operator\">=</span> <span class=\"type\">String</span>(<span class=\"string\">&quot;1234567890&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> b <span class=\"operator\">=</span> a <span class=\"keyword\">as</span> <span class=\"type\">NSString</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(b.integerValue)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(b.length)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">NSStringToString</span>()  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a : <span class=\"type\">NSString</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;1234567890&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> b <span class=\"operator\">=</span> a <span class=\"keyword\">as</span> <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(b)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-Differences-between-NSString-and-String\"><a href=\"#2-Differences-between-NSString-and-String\" class=\"headerlink\" title=\" 2. Differences between NSString and String \"></a><font size=3 color=#4169E1> 2. Differences between NSString and String </font></h4><p>NSString is a subclass of NSObject and that is to say, it is a class that is a reference type.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">open</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NSString</span> : <span class=\"title class_\">NSObject</span>, <span class=\"title class_\">NSCopying</span>, <span class=\"title class_\">NSMutableCopying</span>, <span class=\"title class_\">NSSecureCoding</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">open</span> <span class=\"keyword\">var</span> length: <span class=\"type\">Int</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\">    <span class=\"operator\">...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>However, String is a value type which is a kind of struct.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@frozen</span> <span class=\"keyword\">public</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">String</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">@inlinable</span> <span class=\"keyword\">public</span> <span class=\"keyword\">init</span>()</span><br><span class=\"line\">    <span class=\"operator\">...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>They have some identical APIs, but they also have their own independent APIs.  </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str <span class=\"operator\">=</span> <span class=\"type\">String</span>()</span><br><span class=\"line\">str <span class=\"operator\">=</span> <span class=\"string\">&quot;123456&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>();</span><br><span class=\"line\">nsStr <span class=\"operator\">=</span> <span class=\"string\">&quot;123456&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>1.1 Similar or Identical APIs</strong></p>\n<details>\n<summary>Sample Code</summary>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1. Get the number of characters in the string</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str.count);   <span class=\"comment\">//6</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(nsStr.length);   <span class=\"comment\">//6</span></span><br><span class=\"line\"><span class=\"comment\">//2. Prefix/Suffix Operations</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str <span class=\"operator\">=</span> <span class=\"string\">&quot;123456&quot;</span>;</span><br><span class=\"line\">str.hasPrefix(<span class=\"string\">&quot;12&quot;</span>) <span class=\"comment\">//true</span></span><br><span class=\"line\">str.hasSuffix(<span class=\"string\">&quot;56&quot;</span>) <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>(stringLiteral: <span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\">nsStr.hasPrefix(<span class=\"string\">&quot;12&quot;</span>)   <span class=\"comment\">//true</span></span><br><span class=\"line\">nsStr.hasSuffix(<span class=\"string\">&quot;56&quot;</span>)   <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"comment\">//3. Prefix/Suffix Operations</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str <span class=\"operator\">=</span> <span class=\"string\">&quot;123456-11&quot;</span>;</span><br><span class=\"line\">str.components(separatedBy: <span class=\"string\">&quot;-&quot;</span>);   <span class=\"comment\">//[&quot;123456&quot;, &quot;11&quot;]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>(stringLiteral: <span class=\"string\">&quot;123456-22&quot;</span>);</span><br><span class=\"line\">nsStr.components(separatedBy: <span class=\"string\">&quot;-&quot;</span>); <span class=\"comment\">//[&quot;123456&quot;, &quot;22&quot;]</span></span><br><span class=\"line\"><span class=\"comment\">//4. Letter case conversion ops for uppercased/lowercased/capitalized</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str <span class=\"operator\">=</span> <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str.uppercased());    <span class=\"comment\">//ABC</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str.lowercased());    <span class=\"comment\">//abc</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>(stringLiteral: <span class=\"string\">&quot;cba&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nsStr.uppercased);    <span class=\"comment\">//CBA</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(nsStr.lowercased);    <span class=\"comment\">//cba</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> str <span class=\"operator\">=</span> <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str.capitalized);    <span class=\"comment\">//Abc</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>(stringLiteral: <span class=\"string\">&quot;cba&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nsStr.capitalized);    <span class=\"comment\">//Cba</span></span><br><span class=\"line\"><span class=\"comment\">//5. Strip specific strings ops for trimmingCharacters</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> str <span class=\"operator\">=</span> <span class=\"string\">&quot;<span class=\"subst\">\\r</span> abc &quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> strTrimed <span class=\"operator\">=</span> str.trimmingCharacters(in: .whitespacesAndNewlines)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(strTrimed);   <span class=\"comment\">//abc</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>(stringLiteral: <span class=\"string\">&quot;<span class=\"subst\">\\r</span> cba &quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> nsStrTrimed <span class=\"operator\">=</span> nsStr.trimmingCharacters(in: .whitespacesAndNewlines);</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nsStrTrimed); <span class=\"comment\">//cba</span></span><br><span class=\"line\"><span class=\"comment\">//6. Character substitution ops for replacingOccurrences:of:with</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> str <span class=\"operator\">=</span> <span class=\"string\">&quot;hello String&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> str1 <span class=\"operator\">=</span> str.replacingOccurrences(of: <span class=\"string\">&quot;String&quot;</span>, with: <span class=\"string\">&quot;world&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str1) <span class=\"comment\">//&quot;hello world&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>(stringLiteral:<span class=\"string\">&quot;hello NSString&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> nsStr1 <span class=\"operator\">=</span> nsStr.replacingOccurrences(of: <span class=\"string\">&quot;NSString&quot;</span>, with: <span class=\"string\">&quot;world&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nsStr1)   <span class=\"comment\">//&quot;hello world&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//7. Convert decimal hexadecimal octal data to string</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> hexStr <span class=\"operator\">=</span> <span class=\"type\">String</span>().appendingFormat(<span class=\"string\">&quot;%x&quot;</span>,<span class=\"number\">16</span>)<span class=\"comment\">//10-&gt;16，result:&quot;10&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> oStr <span class=\"operator\">=</span> <span class=\"type\">String</span>().appendingFormat(<span class=\"string\">&quot;%o&quot;</span>,<span class=\"number\">16</span>)<span class=\"comment\">//10-&gt;8，result:&quot;20&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> dStr <span class=\"operator\">=</span> <span class=\"type\">String</span>().appendingFormat(<span class=\"string\">&quot;%d&quot;</span>,<span class=\"number\">0x10</span>)<span class=\"comment\">//16-&gt;10，result:&quot;16&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> dStr1 <span class=\"operator\">=</span> <span class=\"type\">String</span>(format: <span class=\"string\">&quot;%d&quot;</span>, <span class=\"number\">0o10</span>)<span class=\"comment\">//8-&gt;10，result: &quot;8&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> hexNSStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>().appendingFormat(<span class=\"string\">&quot;%x&quot;</span>, <span class=\"number\">16</span>)<span class=\"comment\">//10-&gt;16，result:&quot;10&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> oNSStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>().appendingFormat(<span class=\"string\">&quot;%o&quot;</span>,<span class=\"number\">16</span>)<span class=\"comment\">//10-&gt;8，result:&quot;20&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> dNSStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>().appendingFormat(<span class=\"string\">&quot;%d&quot;</span>,<span class=\"number\">0x10</span>)<span class=\"comment\">//16-&gt;10，result:&quot;16&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> dNSStr1 <span class=\"operator\">=</span> <span class=\"type\">NSString</span>(format: <span class=\"string\">&quot;%d&quot;</span>, <span class=\"number\">0o10</span>)<span class=\"comment\">//8-&gt;10，result: &quot;8&quot;</span></span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n</details>\n\n<p><strong>1.2 Independent APIs</strong><br>1.2.1 Independent APIs of String    </p>\n<details>\n<summary>Sample Code</summary>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1. isEmpty</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str <span class=\"operator\">=</span> <span class=\"type\">String</span>();</span><br><span class=\"line\">str <span class=\"operator\">=</span> <span class=\"string\">&quot;123456&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str.isEmpty);</span><br><span class=\"line\"><span class=\"comment\">//2. sorted()</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str <span class=\"operator\">=</span> <span class=\"string\">&quot;215423&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str.sorted()); <span class=\"comment\">//[&quot;1&quot;, &quot;2&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//3. filter()</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> str <span class=\"operator\">=</span> <span class=\"string\">&quot;12 34 56&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> filter <span class=\"operator\">=</span> str.filter &#123; (char) -&gt; <span class=\"type\">Bool</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    char <span class=\"operator\">!=</span> <span class=\"string\">&quot; &quot;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(filter);<span class=\"comment\">//123456</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//4. enumerated()</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> str <span class=\"operator\">=</span> <span class=\"string\">&quot;123456&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> str.enumerated() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(data);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</details>\n\n<p>1.2.2 Independent APIs of NSString</p>\n<details>\n<summary>Sample Code</summary>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. initialize methods</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>(stringLiteral: <span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>.<span class=\"keyword\">init</span>(string: <span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. boolValue</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>(stringLiteral: <span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nsStr.boolValue);<span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3. isEqual()</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>(stringLiteral: <span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nsStr.isEqual(to: <span class=\"string\">&quot;123456&quot;</span>));<span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 4. Numeric Ops</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>(stringLiteral: <span class=\"string\">&quot;123456&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nsStr.intValue);</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nsStr.floatValue);</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nsStr.doubleValue);</span><br></pre></td></tr></table></figure>\n</details>\n"},{"title":"04. Set Read-only permission of the property","date":"2023-02-28T12:52:59.000Z","_content":"  \n<font color=gray size=2>*It will take about 1 minutes to finish reading this article.*</font>\n\n  \nIn Swift, there is no keyword \"readonly\" like Objective-C to set read-only access permissions. How can Swift implement read-only access permissions? We can do this as follows:\n\n```Swift \nclass MyClass {\n    private(set) var name: String?\n} \n```\nExternal access is normal:\n```\nlet a = ClassA()\nprint(a.title)\n```\nBut the following is wrong:\n```\na.title = \"1234\"\n```\nThe following errors will be reported:\n```\nCannot assign to property: 'title' setter is inaccessible\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/Swift/00. Tips/04. Set Read-only permission of the property.md","raw":"---\ntitle: 04. Set Read-only permission of the property\ndate: 2023-02-28 13:52:59\ncategories: \n- [Swift, 00. Tips]\ntags:\n- read-only\n---\n  \n<font color=gray size=2>*It will take about 1 minutes to finish reading this article.*</font>\n\n  \nIn Swift, there is no keyword \"readonly\" like Objective-C to set read-only access permissions. How can Swift implement read-only access permissions? We can do this as follows:\n\n```Swift \nclass MyClass {\n    private(set) var name: String?\n} \n```\nExternal access is normal:\n```\nlet a = ClassA()\nprint(a.title)\n```\nBut the following is wrong:\n```\na.title = \"1234\"\n```\nThe following errors will be reported:\n```\nCannot assign to property: 'title' setter is inaccessible\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"Swift/00. Tips/04. Set Read-only permission of the property","published":1,"updated":"2023-08-15T16:40:19.829Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clm7w97r9000nkb0m9ky93w1v","content":"<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p>\n<p>In Swift, there is no keyword “readonly” like Objective-C to set read-only access permissions. How can Swift implement read-only access permissions? We can do this as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private(set)</span> <span class=\"keyword\">var</span> name: <span class=\"type\">String</span>?</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>External access is normal:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a = ClassA()</span><br><span class=\"line\">print(a.title)</span><br></pre></td></tr></table></figure>\n<p>But the following is wrong:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a.title = &quot;1234&quot;</span><br></pre></td></tr></table></figure>\n<p>The following errors will be reported:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cannot assign to property: &#x27;title&#x27; setter is inaccessible</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p>\n<p>In Swift, there is no keyword “readonly” like Objective-C to set read-only access permissions. How can Swift implement read-only access permissions? We can do this as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private(set)</span> <span class=\"keyword\">var</span> name: <span class=\"type\">String</span>?</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>External access is normal:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a = ClassA()</span><br><span class=\"line\">print(a.title)</span><br></pre></td></tr></table></figure>\n<p>But the following is wrong:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a.title = &quot;1234&quot;</span><br></pre></td></tr></table></figure>\n<p>The following errors will be reported:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cannot assign to property: &#x27;title&#x27; setter is inaccessible</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"title":"05. Computed properties and Stored properties","date":"2023-02-28T12:53:59.000Z","_content":"\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\n<strong> Example Code </strong>\n```Swift \n//arr1\nvar arr1:[Int] =  {\n    return [1,2,3];\n}()\n//arr2\nvar arr2:[Int] {\n    return [1,2,3];\n}\n//arr3\nvar arr3:[Int] {\n    get {\n        return [1,2,3];\n    }\n}\n//arr4\nvar arr4:[Int] {\n    get {\n        return [1];\n    }\n    set {\n        print(newValue);\n    }\n}\n```\n> arr1 declares a Stored-Property assigned value through a closure operation.    \n> arr2 declares a read-only Computed-Property.    \n> arr3 declares a read-only Computed-Property too.    \n> arr4 declares a read-write Computed-Property too.\n\nIt can be seen that the Stored-Property can be directly read and written. The Computed-Property cannot be operated directly. It is only used for calculation and has no specific value.\n\n> Note:\n> 1. Computed-Properties can be used for classes, structures, and enumerations, while Stored-Properties can only be used for classes and structures.    \n> 2. The Stored-Properties can be defined with the keyword 'var' or the keyword let'. The Computed-Property can only be defined with the keyword 'var'.   \n> 3. Computed-Properties do not directly store values, but provide a getter and an optional setter to indirectly obtain and set the values of other properties or variables.\n\n \n#### <font size=3 color=gray>*Reference*</font>\n<https://cloud.tencent.com/developer/article/1610855>  \n","source":"_posts/Swift/00. Tips/05. Computed properties and Stored properties.md","raw":"---\ntitle: 05. Computed properties and Stored properties\ndate: 2023-02-28 13:53:59\ncategories: \n- [Swift, 00. Tips]\ntags:\n- computed\n- stored\n---\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\n<strong> Example Code </strong>\n```Swift \n//arr1\nvar arr1:[Int] =  {\n    return [1,2,3];\n}()\n//arr2\nvar arr2:[Int] {\n    return [1,2,3];\n}\n//arr3\nvar arr3:[Int] {\n    get {\n        return [1,2,3];\n    }\n}\n//arr4\nvar arr4:[Int] {\n    get {\n        return [1];\n    }\n    set {\n        print(newValue);\n    }\n}\n```\n> arr1 declares a Stored-Property assigned value through a closure operation.    \n> arr2 declares a read-only Computed-Property.    \n> arr3 declares a read-only Computed-Property too.    \n> arr4 declares a read-write Computed-Property too.\n\nIt can be seen that the Stored-Property can be directly read and written. The Computed-Property cannot be operated directly. It is only used for calculation and has no specific value.\n\n> Note:\n> 1. Computed-Properties can be used for classes, structures, and enumerations, while Stored-Properties can only be used for classes and structures.    \n> 2. The Stored-Properties can be defined with the keyword 'var' or the keyword let'. The Computed-Property can only be defined with the keyword 'var'.   \n> 3. Computed-Properties do not directly store values, but provide a getter and an optional setter to indirectly obtain and set the values of other properties or variables.\n\n \n#### <font size=3 color=gray>*Reference*</font>\n<https://cloud.tencent.com/developer/article/1610855>  \n","slug":"Swift/00. Tips/05. Computed properties and Stored properties","published":1,"updated":"2023-08-15T17:24:42.880Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clm7w97ra000qkb0mgwjq4qc3","content":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p><strong> Example Code </strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//arr1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1:[<span class=\"type\">Int</span>] <span class=\"operator\">=</span>  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;()</span><br><span class=\"line\"><span class=\"comment\">//arr2</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2:[<span class=\"type\">Int</span>] &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//arr3</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr3:[<span class=\"type\">Int</span>] &#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//arr4</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr4:[<span class=\"type\">Int</span>] &#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [<span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">set</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(newValue);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>arr1 declares a Stored-Property assigned value through a closure operation.<br>arr2 declares a read-only Computed-Property.<br>arr3 declares a read-only Computed-Property too.<br>arr4 declares a read-write Computed-Property too.</p>\n</blockquote>\n<p>It can be seen that the Stored-Property can be directly read and written. The Computed-Property cannot be operated directly. It is only used for calculation and has no specific value.</p>\n<blockquote>\n<p>Note:</p>\n<ol>\n<li>Computed-Properties can be used for classes, structures, and enumerations, while Stored-Properties can only be used for classes and structures.    </li>\n<li>The Stored-Properties can be defined with the keyword ‘var’ or the keyword let’. The Computed-Property can only be defined with the keyword ‘var’.   </li>\n<li>Computed-Properties do not directly store values, but provide a getter and an optional setter to indirectly obtain and set the values of other properties or variables.</li>\n</ol>\n</blockquote>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p><a href=\"https://cloud.tencent.com/developer/article/1610855\">https://cloud.tencent.com/developer/article/1610855</a>  </p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p><strong> Example Code </strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//arr1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1:[<span class=\"type\">Int</span>] <span class=\"operator\">=</span>  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;()</span><br><span class=\"line\"><span class=\"comment\">//arr2</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2:[<span class=\"type\">Int</span>] &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//arr3</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr3:[<span class=\"type\">Int</span>] &#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//arr4</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr4:[<span class=\"type\">Int</span>] &#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [<span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">set</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(newValue);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>arr1 declares a Stored-Property assigned value through a closure operation.<br>arr2 declares a read-only Computed-Property.<br>arr3 declares a read-only Computed-Property too.<br>arr4 declares a read-write Computed-Property too.</p>\n</blockquote>\n<p>It can be seen that the Stored-Property can be directly read and written. The Computed-Property cannot be operated directly. It is only used for calculation and has no specific value.</p>\n<blockquote>\n<p>Note:</p>\n<ol>\n<li>Computed-Properties can be used for classes, structures, and enumerations, while Stored-Properties can only be used for classes and structures.    </li>\n<li>The Stored-Properties can be defined with the keyword ‘var’ or the keyword let’. The Computed-Property can only be defined with the keyword ‘var’.   </li>\n<li>Computed-Properties do not directly store values, but provide a getter and an optional setter to indirectly obtain and set the values of other properties or variables.</li>\n</ol>\n</blockquote>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p><a href=\"https://cloud.tencent.com/developer/article/1610855\">https://cloud.tencent.com/developer/article/1610855</a>  </p>\n"},{"title":"06. How to Define a singleton?","date":"2023-02-28T12:54:59.000Z","_content":"\n<font color=gray size=2>*It will take about 1 minutes to finish reading this article.*</font>\n\n\nWe can define a singleton in OC like this:\n```Swift\n+ (instancetype) sharedManager {\n    static Object *obj = nil;\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        obj = [[Object alloc] init];\n    });\n    return obj;\n}\n```\nUse dispatch_once_t in GCD can ensure that the code in it is called only once, so as to ensure the safety of the singleton on the thread. However, since the original Dispatch once method is abandoned in Swift, dispatch_once_t cannot be used to create a singleton. 'Let' is a simpler way to ensure thread safety. So the final code is as follows：\n\n<strong> Example Code</strong>\n```Swift \nfinal class SingleOne {\n    static let shared = SingleOne()\n    private init() {}\n\n    var first: Bool = false\n    var second: String = \"\"\n}\n```\n\n**<font color=gray size=3 >*Reference*</font>** <https://blog.csdn.net/LiqunZhang/article/details/115127156>\n","source":"_posts/Swift/00. Tips/06. How to Define a singleton?.md","raw":"---\ntitle: 06. How to Define a singleton?\ndate: 2023-02-28 13:54:59\ncategories: \n- [Swift, 00. Tips]\ntags:\n- singleton\n---\n\n<font color=gray size=2>*It will take about 1 minutes to finish reading this article.*</font>\n\n\nWe can define a singleton in OC like this:\n```Swift\n+ (instancetype) sharedManager {\n    static Object *obj = nil;\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        obj = [[Object alloc] init];\n    });\n    return obj;\n}\n```\nUse dispatch_once_t in GCD can ensure that the code in it is called only once, so as to ensure the safety of the singleton on the thread. However, since the original Dispatch once method is abandoned in Swift, dispatch_once_t cannot be used to create a singleton. 'Let' is a simpler way to ensure thread safety. So the final code is as follows：\n\n<strong> Example Code</strong>\n```Swift \nfinal class SingleOne {\n    static let shared = SingleOne()\n    private init() {}\n\n    var first: Bool = false\n    var second: String = \"\"\n}\n```\n\n**<font color=gray size=3 >*Reference*</font>** <https://blog.csdn.net/LiqunZhang/article/details/115127156>\n","slug":"Swift/00. Tips/06. How to Define a singleton?","published":1,"updated":"2023-08-15T16:39:36.224Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clm7w97rb000ukb0m7ht5h75g","content":"<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p>\n<p>We can define a singleton in OC like this:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">+</span> (instancetype) sharedManager &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">Object</span> <span class=\"operator\">*</span>obj <span class=\"operator\">=</span> <span class=\"literal\">nil</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> dispatch_once_t onceToken;</span><br><span class=\"line\">    dispatch_once(<span class=\"operator\">&amp;</span>onceToken, <span class=\"operator\">^</span>&#123;</span><br><span class=\"line\">        obj <span class=\"operator\">=</span> [[<span class=\"type\">Object</span> alloc] <span class=\"keyword\">init</span>];</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Use dispatch_once_t in GCD can ensure that the code in it is called only once, so as to ensure the safety of the singleton on the thread. However, since the original Dispatch once method is abandoned in Swift, dispatch_once_t cannot be used to create a singleton. ‘Let’ is a simpler way to ensure thread safety. So the final code is as follows：</p>\n<p><strong> Example Code</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SingleOne</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> shared <span class=\"operator\">=</span> <span class=\"type\">SingleOne</span>()</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">init</span>() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> first: <span class=\"type\">Bool</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> second: <span class=\"type\">String</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong><font color=gray size=3 ><em>Reference</em></font></strong> <a href=\"https://blog.csdn.net/LiqunZhang/article/details/115127156\">https://blog.csdn.net/LiqunZhang/article/details/115127156</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p>\n<p>We can define a singleton in OC like this:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">+</span> (instancetype) sharedManager &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">Object</span> <span class=\"operator\">*</span>obj <span class=\"operator\">=</span> <span class=\"literal\">nil</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> dispatch_once_t onceToken;</span><br><span class=\"line\">    dispatch_once(<span class=\"operator\">&amp;</span>onceToken, <span class=\"operator\">^</span>&#123;</span><br><span class=\"line\">        obj <span class=\"operator\">=</span> [[<span class=\"type\">Object</span> alloc] <span class=\"keyword\">init</span>];</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Use dispatch_once_t in GCD can ensure that the code in it is called only once, so as to ensure the safety of the singleton on the thread. However, since the original Dispatch once method is abandoned in Swift, dispatch_once_t cannot be used to create a singleton. ‘Let’ is a simpler way to ensure thread safety. So the final code is as follows：</p>\n<p><strong> Example Code</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SingleOne</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> shared <span class=\"operator\">=</span> <span class=\"type\">SingleOne</span>()</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">init</span>() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> first: <span class=\"type\">Bool</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> second: <span class=\"type\">String</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong><font color=gray size=3 ><em>Reference</em></font></strong> <a href=\"https://blog.csdn.net/LiqunZhang/article/details/115127156\">https://blog.csdn.net/LiqunZhang/article/details/115127156</a></p>\n"},{"title":"07. How to print the memory address of a variable?","date":"2023-02-28T12:55:59.000Z","_content":"\n<font color=gray size=2>*It will take about 1 minutes to finish reading this article.*</font>\n\nWe can print the memory address of a variable like this:\n```Swift\nvar a = 100\nwithUnsafePointer(to: &a) {ptr in print(ptr)}\n//result: 0x00007ff7bfeff210\n```\nOr using the following method is OK:\n```Swift\nfunc printPointer<T>(ptr: UnsafePointer<T>) {\n    print(ptr)\n}\nvar a = 100\nprintPointer(ptr: &a)\n//result: 0x00007ff7bfeff220\n```\n","source":"_posts/Swift/00. Tips/07. How to print the memory address of a variable?.md","raw":"---\ntitle: 07. How to print the memory address of a variable?\ndate: 2023-02-28 13:55:59\ncategories: \n- [Swift, 00. Tips]\ntags:\n- memory address\n---\n\n<font color=gray size=2>*It will take about 1 minutes to finish reading this article.*</font>\n\nWe can print the memory address of a variable like this:\n```Swift\nvar a = 100\nwithUnsafePointer(to: &a) {ptr in print(ptr)}\n//result: 0x00007ff7bfeff210\n```\nOr using the following method is OK:\n```Swift\nfunc printPointer<T>(ptr: UnsafePointer<T>) {\n    print(ptr)\n}\nvar a = 100\nprintPointer(ptr: &a)\n//result: 0x00007ff7bfeff220\n```\n","slug":"Swift/00. Tips/07. How to print the memory address of a variable?","published":1,"updated":"2023-08-15T16:39:40.875Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clm7w97rc000xkb0m5yhxejqy","content":"<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p>\n<p>We can print the memory address of a variable like this:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"built_in\">withUnsafePointer</span>(to: <span class=\"operator\">&amp;</span>a) &#123;ptr <span class=\"keyword\">in</span> <span class=\"built_in\">print</span>(ptr)&#125;</span><br><span class=\"line\"><span class=\"comment\">//result: 0x00007ff7bfeff210</span></span><br></pre></td></tr></table></figure>\n<p>Or using the following method is OK:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">printPointer</span>&lt;<span class=\"type\">T</span>&gt;(<span class=\"params\">ptr</span>: <span class=\"type\">UnsafePointer</span>&lt;<span class=\"type\">T</span>&gt;) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(ptr)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\">printPointer(ptr: <span class=\"operator\">&amp;</span>a)</span><br><span class=\"line\"><span class=\"comment\">//result: 0x00007ff7bfeff220</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p>\n<p>We can print the memory address of a variable like this:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"built_in\">withUnsafePointer</span>(to: <span class=\"operator\">&amp;</span>a) &#123;ptr <span class=\"keyword\">in</span> <span class=\"built_in\">print</span>(ptr)&#125;</span><br><span class=\"line\"><span class=\"comment\">//result: 0x00007ff7bfeff210</span></span><br></pre></td></tr></table></figure>\n<p>Or using the following method is OK:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">printPointer</span>&lt;<span class=\"type\">T</span>&gt;(<span class=\"params\">ptr</span>: <span class=\"type\">UnsafePointer</span>&lt;<span class=\"type\">T</span>&gt;) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(ptr)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\">printPointer(ptr: <span class=\"operator\">&amp;</span>a)</span><br><span class=\"line\"><span class=\"comment\">//result: 0x00007ff7bfeff220</span></span><br></pre></td></tr></table></figure>\n"},{"title":"08. Force unwrapping and Implicitly Unwrapped Optionals","date":"2023-02-28T12:56:59.000Z","_content":"\n<font color=gray size=2>*It will take about 1 minutes to finish reading this article.*</font>\n\n#### <font size=3 color=#4169E1> 1. Force unwrapping </font> \nForced unwrapping of optional types means that when we are sure that an optional type must have a value, we can use the exclamation mark ! to force parsing of it and thus get the value in it. If we use forced parsing on an optional type that has no value, a runtime error will be triggered. Therefore, when using forced parsing, we must make sure that the optional type does have a value.\n```Swift\nlet possibleString: String? = \"An optional string.\"\nlet forcedString: String = possibleString! // Need exclamation mark to get value\n```\n\n#### <font size=3 color=#4169E1> 2. Implicitly Unwrapped Optionals </font> \nAn implicitly Unwrapped Optionals type is a special kind of optional type that is declared with the exclamation mark ! flag to indicate that this optional type can be implicitly treated as a non-optional type for subsequent use, without the need to force resolution each time. At declaration time, we can declare an optional type as an implicitly resolved optional type, which will throw an error at runtime if the variable or constant is not initialized to a non-nil value at the time of use.\n\n```Swift\nlet assumedString2: String! = \"123\"\nlet possibleString2: String? = assumedString2\nlet implicitString2: String = assumedString2  //No exclamation point needed\n```\n\n```Swift\nlet assumedString1: String! = nil\nlet possibleString1: String? = assumedString1\nlet implicitString1: String = assumedString1  // Report Error\n```\nSo, implicitly unwrapped optionals type is special optionals type that can be used to get the value in it directly using the variable name, without having to force unwrapping every time.\nWe can do these as follows:\n```Swift\nif assumedString != nil {\n    print(assumedString!)\n}\n// Prints \"An implicitly unwrapped optional string.\"\n```\nYou can also use an implicitly unwrapped optional with optional binding, to check and unwrap its value in a single statement:\n```Swift\nif let definiteString = assumedString {\n    print(definiteString)\n}\n// Prints \"An implicitly unwrapped optional string.\"\n```\n","source":"_posts/Swift/00. Tips/08. Implicitly Unwrapped Optionals and Force unwrapping.md","raw":"---\ntitle: 08. Force unwrapping and Implicitly Unwrapped Optionals\ndate: 2023-02-28 13:56:59\ncategories: \n- [Swift, 00. Tips]\ntags:\n- force unwrapping\n- Implicitly Unwrapped\n---\n\n<font color=gray size=2>*It will take about 1 minutes to finish reading this article.*</font>\n\n#### <font size=3 color=#4169E1> 1. Force unwrapping </font> \nForced unwrapping of optional types means that when we are sure that an optional type must have a value, we can use the exclamation mark ! to force parsing of it and thus get the value in it. If we use forced parsing on an optional type that has no value, a runtime error will be triggered. Therefore, when using forced parsing, we must make sure that the optional type does have a value.\n```Swift\nlet possibleString: String? = \"An optional string.\"\nlet forcedString: String = possibleString! // Need exclamation mark to get value\n```\n\n#### <font size=3 color=#4169E1> 2. Implicitly Unwrapped Optionals </font> \nAn implicitly Unwrapped Optionals type is a special kind of optional type that is declared with the exclamation mark ! flag to indicate that this optional type can be implicitly treated as a non-optional type for subsequent use, without the need to force resolution each time. At declaration time, we can declare an optional type as an implicitly resolved optional type, which will throw an error at runtime if the variable or constant is not initialized to a non-nil value at the time of use.\n\n```Swift\nlet assumedString2: String! = \"123\"\nlet possibleString2: String? = assumedString2\nlet implicitString2: String = assumedString2  //No exclamation point needed\n```\n\n```Swift\nlet assumedString1: String! = nil\nlet possibleString1: String? = assumedString1\nlet implicitString1: String = assumedString1  // Report Error\n```\nSo, implicitly unwrapped optionals type is special optionals type that can be used to get the value in it directly using the variable name, without having to force unwrapping every time.\nWe can do these as follows:\n```Swift\nif assumedString != nil {\n    print(assumedString!)\n}\n// Prints \"An implicitly unwrapped optional string.\"\n```\nYou can also use an implicitly unwrapped optional with optional binding, to check and unwrap its value in a single statement:\n```Swift\nif let definiteString = assumedString {\n    print(definiteString)\n}\n// Prints \"An implicitly unwrapped optional string.\"\n```\n","slug":"Swift/00. Tips/08. Implicitly Unwrapped Optionals and Force unwrapping","published":1,"updated":"2023-08-15T17:25:11.647Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clm7w97rc000zkb0mc013fuhp","content":"<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p>\n<h4 id=\"1-Force-unwrapping\"><a href=\"#1-Force-unwrapping\" class=\"headerlink\" title=\" 1. Force unwrapping \"></a><font size=3 color=#4169E1> 1. Force unwrapping </font></h4><p>Forced unwrapping of optional types means that when we are sure that an optional type must have a value, we can use the exclamation mark ! to force parsing of it and thus get the value in it. If we use forced parsing on an optional type that has no value, a runtime error will be triggered. Therefore, when using forced parsing, we must make sure that the optional type does have a value.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> possibleString: <span class=\"type\">String</span>? <span class=\"operator\">=</span> <span class=\"string\">&quot;An optional string.&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> forcedString: <span class=\"type\">String</span> <span class=\"operator\">=</span> possibleString<span class=\"operator\">!</span> <span class=\"comment\">// Need exclamation mark to get value</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-Implicitly-Unwrapped-Optionals\"><a href=\"#2-Implicitly-Unwrapped-Optionals\" class=\"headerlink\" title=\" 2. Implicitly Unwrapped Optionals \"></a><font size=3 color=#4169E1> 2. Implicitly Unwrapped Optionals </font></h4><p>An implicitly Unwrapped Optionals type is a special kind of optional type that is declared with the exclamation mark ! flag to indicate that this optional type can be implicitly treated as a non-optional type for subsequent use, without the need to force resolution each time. At declaration time, we can declare an optional type as an implicitly resolved optional type, which will throw an error at runtime if the variable or constant is not initialized to a non-nil value at the time of use.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> assumedString2: <span class=\"type\">String</span>! <span class=\"operator\">=</span> <span class=\"string\">&quot;123&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> possibleString2: <span class=\"type\">String</span>? <span class=\"operator\">=</span> assumedString2</span><br><span class=\"line\"><span class=\"keyword\">let</span> implicitString2: <span class=\"type\">String</span> <span class=\"operator\">=</span> assumedString2  <span class=\"comment\">//No exclamation point needed</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> assumedString1: <span class=\"type\">String</span>! <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> possibleString1: <span class=\"type\">String</span>? <span class=\"operator\">=</span> assumedString1</span><br><span class=\"line\"><span class=\"keyword\">let</span> implicitString1: <span class=\"type\">String</span> <span class=\"operator\">=</span> assumedString1  <span class=\"comment\">// Report Error</span></span><br></pre></td></tr></table></figure>\n<p>So, implicitly unwrapped optionals type is special optionals type that can be used to get the value in it directly using the variable name, without having to force unwrapping every time.<br>We can do these as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> assumedString <span class=\"operator\">!=</span> <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(assumedString<span class=\"operator\">!</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Prints &quot;An implicitly unwrapped optional string.&quot;</span></span><br></pre></td></tr></table></figure>\n<p>You can also use an implicitly unwrapped optional with optional binding, to check and unwrap its value in a single statement:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> definiteString <span class=\"operator\">=</span> assumedString &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(definiteString)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Prints &quot;An implicitly unwrapped optional string.&quot;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p>\n<h4 id=\"1-Force-unwrapping\"><a href=\"#1-Force-unwrapping\" class=\"headerlink\" title=\" 1. Force unwrapping \"></a><font size=3 color=#4169E1> 1. Force unwrapping </font></h4><p>Forced unwrapping of optional types means that when we are sure that an optional type must have a value, we can use the exclamation mark ! to force parsing of it and thus get the value in it. If we use forced parsing on an optional type that has no value, a runtime error will be triggered. Therefore, when using forced parsing, we must make sure that the optional type does have a value.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> possibleString: <span class=\"type\">String</span>? <span class=\"operator\">=</span> <span class=\"string\">&quot;An optional string.&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> forcedString: <span class=\"type\">String</span> <span class=\"operator\">=</span> possibleString<span class=\"operator\">!</span> <span class=\"comment\">// Need exclamation mark to get value</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-Implicitly-Unwrapped-Optionals\"><a href=\"#2-Implicitly-Unwrapped-Optionals\" class=\"headerlink\" title=\" 2. Implicitly Unwrapped Optionals \"></a><font size=3 color=#4169E1> 2. Implicitly Unwrapped Optionals </font></h4><p>An implicitly Unwrapped Optionals type is a special kind of optional type that is declared with the exclamation mark ! flag to indicate that this optional type can be implicitly treated as a non-optional type for subsequent use, without the need to force resolution each time. At declaration time, we can declare an optional type as an implicitly resolved optional type, which will throw an error at runtime if the variable or constant is not initialized to a non-nil value at the time of use.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> assumedString2: <span class=\"type\">String</span>! <span class=\"operator\">=</span> <span class=\"string\">&quot;123&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> possibleString2: <span class=\"type\">String</span>? <span class=\"operator\">=</span> assumedString2</span><br><span class=\"line\"><span class=\"keyword\">let</span> implicitString2: <span class=\"type\">String</span> <span class=\"operator\">=</span> assumedString2  <span class=\"comment\">//No exclamation point needed</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> assumedString1: <span class=\"type\">String</span>! <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> possibleString1: <span class=\"type\">String</span>? <span class=\"operator\">=</span> assumedString1</span><br><span class=\"line\"><span class=\"keyword\">let</span> implicitString1: <span class=\"type\">String</span> <span class=\"operator\">=</span> assumedString1  <span class=\"comment\">// Report Error</span></span><br></pre></td></tr></table></figure>\n<p>So, implicitly unwrapped optionals type is special optionals type that can be used to get the value in it directly using the variable name, without having to force unwrapping every time.<br>We can do these as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> assumedString <span class=\"operator\">!=</span> <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(assumedString<span class=\"operator\">!</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Prints &quot;An implicitly unwrapped optional string.&quot;</span></span><br></pre></td></tr></table></figure>\n<p>You can also use an implicitly unwrapped optional with optional binding, to check and unwrap its value in a single statement:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> definiteString <span class=\"operator\">=</span> assumedString &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(definiteString)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Prints &quot;An implicitly unwrapped optional string.&quot;</span></span><br></pre></td></tr></table></figure>\n"},{"title":"09. How to use rethrows in Swift?","date":"2023-08-19T18:00:00.000Z","_content":"\n<font color=gray size=2>*It will take about 5 minutes to finish reading this article.*</font>\n\nIn Swift, both the rethrows keyword and the throws keyword are used to modify functions and exception handling. \n\nThe difference, however, is that rethrows indicates that this function does not actively throw errors under normal circumstances, but that it accepts one or more closures that throw errors as arguments, and may then continue to pass those errors on to the caller.\n\nIt can be simply understood that throws allow possible exceptions to be handled by the function or method (e.g., with do-catch), whereas rethrows just passes the throws; the function itself doesn't need to handle the exception.\n\nThe use of the rethrows keyword is often used for functions that take closure arguments that may throw errors. The following is a simple example of code that uses the rethrows keyword:\n\n```Swift\nenum MathError: Error {\n    case divisionByZero\n}\n​\nfunc safeDivide(_ numerator: Int, by denominator: Int) throws -> Int {\n    guard denominator != 0 else {\n        throw MathError.divisionByZero\n    }\n    return numerator / denominator\n}\n​\nfunc processNumbers(_ a: Int, _ b: Int, using closure: (Int, Int) throws -> Int) rethrows -> Int {\n    let result = try closure(a, b)\n    return result\n}\n​\nfunc printResult(_ result: Int) {\n    print(\"Result:\", result)\n}\n\n```\nThe calling code is as follows:\n\n```Swift\nlet a = 10\nlet b = 5\n​\ndo {\n    let divisionResult = try processNumbers(a, b, using: safeDivide)\n    printResult(divisionResult)\n} catch {\n    print(\"Error:\", error)\n}\n```\nIn this example, we define a safeDivide(_:_:) function to perform division of an integer, which will check if the denominator is zero. Then we define a processNumbers(_:using:) function that takes a closure argument to process two integers. This function is labeled rethrows because it does not actively throw errors, but may pass them on to the caller.","source":"_posts/Swift/00. Tips/09. How to use rethrows in Swift?.md","raw":"---\ntitle: 09. How to use rethrows in Swift?\ndate: 2023-08-19 20:00:00\ncategories: \n- [Swift, 00. Tips]\ntags:\n- rethrows\n---\n\n<font color=gray size=2>*It will take about 5 minutes to finish reading this article.*</font>\n\nIn Swift, both the rethrows keyword and the throws keyword are used to modify functions and exception handling. \n\nThe difference, however, is that rethrows indicates that this function does not actively throw errors under normal circumstances, but that it accepts one or more closures that throw errors as arguments, and may then continue to pass those errors on to the caller.\n\nIt can be simply understood that throws allow possible exceptions to be handled by the function or method (e.g., with do-catch), whereas rethrows just passes the throws; the function itself doesn't need to handle the exception.\n\nThe use of the rethrows keyword is often used for functions that take closure arguments that may throw errors. The following is a simple example of code that uses the rethrows keyword:\n\n```Swift\nenum MathError: Error {\n    case divisionByZero\n}\n​\nfunc safeDivide(_ numerator: Int, by denominator: Int) throws -> Int {\n    guard denominator != 0 else {\n        throw MathError.divisionByZero\n    }\n    return numerator / denominator\n}\n​\nfunc processNumbers(_ a: Int, _ b: Int, using closure: (Int, Int) throws -> Int) rethrows -> Int {\n    let result = try closure(a, b)\n    return result\n}\n​\nfunc printResult(_ result: Int) {\n    print(\"Result:\", result)\n}\n\n```\nThe calling code is as follows:\n\n```Swift\nlet a = 10\nlet b = 5\n​\ndo {\n    let divisionResult = try processNumbers(a, b, using: safeDivide)\n    printResult(divisionResult)\n} catch {\n    print(\"Error:\", error)\n}\n```\nIn this example, we define a safeDivide(_:_:) function to perform division of an integer, which will check if the denominator is zero. Then we define a processNumbers(_:using:) function that takes a closure argument to process two integers. This function is labeled rethrows because it does not actively throw errors, but may pass them on to the caller.","slug":"Swift/00. Tips/09. How to use rethrows in Swift?","published":1,"updated":"2023-08-19T18:07:51.776Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clm7w97rd0013kb0mfn2vczhq","content":"<p><font color=gray size=2><em>It will take about 5 minutes to finish reading this article.</em></font></p>\n<p>In Swift, both the rethrows keyword and the throws keyword are used to modify functions and exception handling. </p>\n<p>The difference, however, is that rethrows indicates that this function does not actively throw errors under normal circumstances, but that it accepts one or more closures that throw errors as arguments, and may then continue to pass those errors on to the caller.</p>\n<p>It can be simply understood that throws allow possible exceptions to be handled by the function or method (e.g., with do-catch), whereas rethrows just passes the throws; the function itself doesn’t need to handle the exception.</p>\n<p>The use of the rethrows keyword is often used for functions that take closure arguments that may throw errors. The following is a simple example of code that uses the rethrows keyword:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">MathError</span>: <span class=\"title class_\">Error</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> divisionByZero</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">safeDivide</span>(<span class=\"keyword\">_</span> <span class=\"params\">numerator</span>: <span class=\"type\">Int</span>, <span class=\"params\">by</span> <span class=\"params\">denominator</span>: <span class=\"type\">Int</span>) <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">guard</span> denominator <span class=\"operator\">!=</span> <span class=\"number\">0</span> <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"type\">MathError</span>.divisionByZero</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> numerator <span class=\"operator\">/</span> denominator</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">processNumbers</span>(<span class=\"keyword\">_</span> <span class=\"params\">a</span>: <span class=\"type\">Int</span>, <span class=\"keyword\">_</span> <span class=\"params\">b</span>: <span class=\"type\">Int</span>, <span class=\"params\">using</span> <span class=\"params\">closure</span>: (<span class=\"type\">Int</span>, <span class=\"type\">Int</span>) <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">Int</span>) <span class=\"keyword\">rethrows</span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result <span class=\"operator\">=</span> <span class=\"keyword\">try</span> closure(a, b)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">printResult</span>(<span class=\"keyword\">_</span> <span class=\"params\">result</span>: <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Result:&quot;</span>, result)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>The calling code is as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a <span class=\"operator\">=</span> <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b <span class=\"operator\">=</span> <span class=\"number\">5</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> divisionResult <span class=\"operator\">=</span> <span class=\"keyword\">try</span> processNumbers(a, b, using: safeDivide)</span><br><span class=\"line\">    printResult(divisionResult)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Error:&quot;</span>, error)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>In this example, we define a safeDivide(<em>:</em>:) function to perform division of an integer, which will check if the denominator is zero. Then we define a processNumbers(_:using:) function that takes a closure argument to process two integers. This function is labeled rethrows because it does not actively throw errors, but may pass them on to the caller.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 5 minutes to finish reading this article.</em></font></p>\n<p>In Swift, both the rethrows keyword and the throws keyword are used to modify functions and exception handling. </p>\n<p>The difference, however, is that rethrows indicates that this function does not actively throw errors under normal circumstances, but that it accepts one or more closures that throw errors as arguments, and may then continue to pass those errors on to the caller.</p>\n<p>It can be simply understood that throws allow possible exceptions to be handled by the function or method (e.g., with do-catch), whereas rethrows just passes the throws; the function itself doesn’t need to handle the exception.</p>\n<p>The use of the rethrows keyword is often used for functions that take closure arguments that may throw errors. The following is a simple example of code that uses the rethrows keyword:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">MathError</span>: <span class=\"title class_\">Error</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> divisionByZero</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">safeDivide</span>(<span class=\"keyword\">_</span> <span class=\"params\">numerator</span>: <span class=\"type\">Int</span>, <span class=\"params\">by</span> <span class=\"params\">denominator</span>: <span class=\"type\">Int</span>) <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">guard</span> denominator <span class=\"operator\">!=</span> <span class=\"number\">0</span> <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"type\">MathError</span>.divisionByZero</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> numerator <span class=\"operator\">/</span> denominator</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">processNumbers</span>(<span class=\"keyword\">_</span> <span class=\"params\">a</span>: <span class=\"type\">Int</span>, <span class=\"keyword\">_</span> <span class=\"params\">b</span>: <span class=\"type\">Int</span>, <span class=\"params\">using</span> <span class=\"params\">closure</span>: (<span class=\"type\">Int</span>, <span class=\"type\">Int</span>) <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">Int</span>) <span class=\"keyword\">rethrows</span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result <span class=\"operator\">=</span> <span class=\"keyword\">try</span> closure(a, b)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">printResult</span>(<span class=\"keyword\">_</span> <span class=\"params\">result</span>: <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Result:&quot;</span>, result)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>The calling code is as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a <span class=\"operator\">=</span> <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b <span class=\"operator\">=</span> <span class=\"number\">5</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> divisionResult <span class=\"operator\">=</span> <span class=\"keyword\">try</span> processNumbers(a, b, using: safeDivide)</span><br><span class=\"line\">    printResult(divisionResult)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Error:&quot;</span>, error)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>In this example, we define a safeDivide(<em>:</em>:) function to perform division of an integer, which will check if the denominator is zero. Then we define a processNumbers(_:using:) function that takes a closure argument to process two integers. This function is labeled rethrows because it does not actively throw errors, but may pass them on to the caller.</p>\n"},{"title":"00. Three forms of Closures","date":"2023-03-01T20:40:59.000Z","_content":"\n<font color=gray size=2>*It will take about 1 minutes to finish reading this article.*</font>\n\nAs the Apple official documents says, closures take one of three forms:\n\n\n#### <font size=3 color=#4169E1> 1. Global functions </font> \nGlobal functions are closures that have a name and don’t capture any values.\n```Swift \nfunc setupBlock {\n    print(\"Hello\")\n}\n```\nIt is a special closure.\n\n#### <font size=3 color=#4169E1> 2. Nested functions </font>\nNested functions are closures that have a name and can capture values from their enclosing function. \n```Swift \nfunc makeIncrementer() -> () -> Int {\n    var runningTotal = 10\n    // nested function，it is a closure too.\n    func incrementer() -> Int{\n        runningTotal += 1\n        return runningTotal\n    }\n    return incrementer\n}\n```\n#### <font size=3 color=#4169E1> 3. Closure expressions </font>\nClosure expressions are unnamed closures written in a lightweight syntax that can capture values from their surrounding context.\n```Swift \n{ (param) -> ReturnType in\n    // Method body\n}\n```\nSwift’s closure expressions have a clean, clear style, with optimizations that encourage brief, clutter-free syntax in common scenarios. These optimizations include:\n1. Inferring parameter and return value types from context\n2. Implicit returns from single-expression closures\n3. Shorthand argument names\n4. Trailing closure syntax\n\n#### <font size=3 color=gray>*Reference*</font>\n<https://docs.swift.org/swift-book/LanguageGuide/Closures.html>  \n","source":"_posts/Swift/01. Closures/00. Three Forms of Closures.md","raw":"---\ntitle: 00. Three forms of Closures\ndate: 2023-02-29 21:40:59\ncategories: \n- [Swift, 01. Closures]\ntags:\n- Closures\n---\n\n<font color=gray size=2>*It will take about 1 minutes to finish reading this article.*</font>\n\nAs the Apple official documents says, closures take one of three forms:\n\n\n#### <font size=3 color=#4169E1> 1. Global functions </font> \nGlobal functions are closures that have a name and don’t capture any values.\n```Swift \nfunc setupBlock {\n    print(\"Hello\")\n}\n```\nIt is a special closure.\n\n#### <font size=3 color=#4169E1> 2. Nested functions </font>\nNested functions are closures that have a name and can capture values from their enclosing function. \n```Swift \nfunc makeIncrementer() -> () -> Int {\n    var runningTotal = 10\n    // nested function，it is a closure too.\n    func incrementer() -> Int{\n        runningTotal += 1\n        return runningTotal\n    }\n    return incrementer\n}\n```\n#### <font size=3 color=#4169E1> 3. Closure expressions </font>\nClosure expressions are unnamed closures written in a lightweight syntax that can capture values from their surrounding context.\n```Swift \n{ (param) -> ReturnType in\n    // Method body\n}\n```\nSwift’s closure expressions have a clean, clear style, with optimizations that encourage brief, clutter-free syntax in common scenarios. These optimizations include:\n1. Inferring parameter and return value types from context\n2. Implicit returns from single-expression closures\n3. Shorthand argument names\n4. Trailing closure syntax\n\n#### <font size=3 color=gray>*Reference*</font>\n<https://docs.swift.org/swift-book/LanguageGuide/Closures.html>  \n","slug":"Swift/01. Closures/00. Three Forms of Closures","published":1,"updated":"2023-08-18T10:48:41.533Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clm7w97re0016kb0mh80a3il0","content":"<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p>\n<p>As the Apple official documents says, closures take one of three forms:</p>\n<h4 id=\"1-Global-functions\"><a href=\"#1-Global-functions\" class=\"headerlink\" title=\" 1. Global functions \"></a><font size=3 color=#4169E1> 1. Global functions </font></h4><p>Global functions are closures that have a name and don’t capture any values.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">setupBlock</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Hello&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>It is a special closure.</p>\n<h4 id=\"2-Nested-functions\"><a href=\"#2-Nested-functions\" class=\"headerlink\" title=\" 2. Nested functions \"></a><font size=3 color=#4169E1> 2. Nested functions </font></h4><p>Nested functions are closures that have a name and can capture values from their enclosing function. </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">makeIncrementer</span>() -&gt; () -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> runningTotal <span class=\"operator\">=</span> <span class=\"number\">10</span></span><br><span class=\"line\">    <span class=\"comment\">// nested function，it is a closure too.</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">incrementer</span>() -&gt; <span class=\"type\">Int</span>&#123;</span><br><span class=\"line\">        runningTotal <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> runningTotal</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> incrementer</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-Closure-expressions\"><a href=\"#3-Closure-expressions\" class=\"headerlink\" title=\" 3. Closure expressions \"></a><font size=3 color=#4169E1> 3. Closure expressions </font></h4><p>Closure expressions are unnamed closures written in a lightweight syntax that can capture values from their surrounding context.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; (param) -&gt; <span class=\"type\">ReturnType</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"comment\">// Method body</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Swift’s closure expressions have a clean, clear style, with optimizations that encourage brief, clutter-free syntax in common scenarios. These optimizations include:</p>\n<ol>\n<li>Inferring parameter and return value types from context</li>\n<li>Implicit returns from single-expression closures</li>\n<li>Shorthand argument names</li>\n<li>Trailing closure syntax</li>\n</ol>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p><a href=\"https://docs.swift.org/swift-book/LanguageGuide/Closures.html\">https://docs.swift.org/swift-book/LanguageGuide/Closures.html</a>  </p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p>\n<p>As the Apple official documents says, closures take one of three forms:</p>\n<h4 id=\"1-Global-functions\"><a href=\"#1-Global-functions\" class=\"headerlink\" title=\" 1. Global functions \"></a><font size=3 color=#4169E1> 1. Global functions </font></h4><p>Global functions are closures that have a name and don’t capture any values.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">setupBlock</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Hello&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>It is a special closure.</p>\n<h4 id=\"2-Nested-functions\"><a href=\"#2-Nested-functions\" class=\"headerlink\" title=\" 2. Nested functions \"></a><font size=3 color=#4169E1> 2. Nested functions </font></h4><p>Nested functions are closures that have a name and can capture values from their enclosing function. </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">makeIncrementer</span>() -&gt; () -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> runningTotal <span class=\"operator\">=</span> <span class=\"number\">10</span></span><br><span class=\"line\">    <span class=\"comment\">// nested function，it is a closure too.</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">incrementer</span>() -&gt; <span class=\"type\">Int</span>&#123;</span><br><span class=\"line\">        runningTotal <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> runningTotal</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> incrementer</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-Closure-expressions\"><a href=\"#3-Closure-expressions\" class=\"headerlink\" title=\" 3. Closure expressions \"></a><font size=3 color=#4169E1> 3. Closure expressions </font></h4><p>Closure expressions are unnamed closures written in a lightweight syntax that can capture values from their surrounding context.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; (param) -&gt; <span class=\"type\">ReturnType</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"comment\">// Method body</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Swift’s closure expressions have a clean, clear style, with optimizations that encourage brief, clutter-free syntax in common scenarios. These optimizations include:</p>\n<ol>\n<li>Inferring parameter and return value types from context</li>\n<li>Implicit returns from single-expression closures</li>\n<li>Shorthand argument names</li>\n<li>Trailing closure syntax</li>\n</ol>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p><a href=\"https://docs.swift.org/swift-book/LanguageGuide/Closures.html\">https://docs.swift.org/swift-book/LanguageGuide/Closures.html</a>  </p>\n"},{"title":"01. Capturing Values","date":"2023-03-01T20:40:59.000Z","_content":"\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nThe capture of values in Swift's closure and OC's Block is different.\n\n#### <font size=3 color=#4169E1> 1. The capture of values in OC. </font> \n```Swift \nNSInteger a = 100;\nvoid(^block)(void) = ^{\n    NSLog(@\"block = %ld:\", a);\n};\n \na += 1;\nNSLog(@\"out1 = %ld:\", a);\nblock();\nNSLog(@\"out2 = %ld:\", a);\n//result:\n2021-08-17 11:27:13.846743+0800 MDProject[30746:23593763] out1 = 101\n2021-08-17 11:27:13.846885+0800 MDProject[30746:23593763] block = 100\n2021-08-17 11:27:13.847002+0800 MDProject[30746:23593763] out2 = 101\n```\n#### <font size=3 color=#4169E1> 2. The capture of values in Swift. </font> \n```Swift\nvar a = 100\nlet closure = {\n    print(\"closure = \\(a)\")\n}\na += 1\nprint(\"out 1 = \\(a)\")\nclosure()\nprint(\"out 2 = \\(a)\")\n```\nResult:\n```Swift\nout1 = 101\nclosure = 101\nout 2 = 101\n```\nSwift closures capture \"references\", not the objects they reference. We can print the address of variable a to prove this.\n```Swift\nvar a = 100\nwithUnsafePointer(to: &a) {ptr in print(ptr)}\nlet closure = {\n    print(\"closure = \\(a)\")\n    withUnsafePointer(to: &a) {ptr in print(ptr)}\n}\nclosure()\na += 1\nprint(\"out 1 = \\(a)\")\nwithUnsafePointer(to: &a) {ptr in print(ptr)}\n\nclosure()\nprint(\"out 2 = \\(a)\")\nwithUnsafePointer(to: &a) {ptr in print(ptr)}\n```\nResult as follows:\n```Swift\n0x0000600000209490\nclosure = 100\n0x0000600000209490\nout 1 = 101\n0x0000600000209490\nclosure = 101\n0x0000600000209490\nout 2 = 101\n0x0000600000209490\n```\nThey all have the same address, It proves that closure capture the reference of the variable, not like block in OC.\n\n#### <font size=3 color=#4169E1> 3. Modify value in closure. </font>  \nIf we want to modity value in block, we should add \"__block\" or \"__weak\", that will make the block capture reference of variable from outside.\nLet me see how closure handle this case.\n```Swift\nvar a = 100\nlet closure = {\n    a += 1\n    print(\"closure = \\(a)\")\n}\nprint(\"out 1 = \\(a)\")\nclosure()\nprint(\"out 2 = \\(a)\")\n```\nResult:\n```Swift\nout 1 = 100\nclosure = 101\nout 2 = 101\n```\nWe can modify the value of the variable in closure directly because closure capture the reference of the variable by default.\n\n#### <font size=3 color=#4169E1> 4. Capturing list in closure. </font>   \nIf we capture variable in capturing list in closure, what will happen? Let me see that.\n```Swift\nvar a = 100\nlet closure = {\n    [a] in\n    print(\"closure = \\(a)\")\n}\na += 1\nprint(\"out 1 = \\(a)\")\nclosure()\nprint(\"out 2 = \\(a)\")\n```\nResult:\n```Swift\nout 1 = 101\nclosure = 100\nout 2 = 101\n```\nAt this time if we want to modify 'a' in closure:\n```Swift\nvar a = 100\nlet closure = {\n    [a] in\n    a += 1\n    print(\"closure = \\(a)\")\n}\na += 1\nprint(\"out 1 = \\(a)\")\nclosure()\nprint(\"out 2 = \\(a)\")\n```\nIt will get an error like that:  \n\n{% img /assets/Swift/Tips/image00.jpg %}\n\nAnd this is a tip for us that variable 'a' is an immutable capture now.\n","source":"_posts/Swift/01. Closures/01. Capturing Values.md","raw":"---\ntitle: 01. Capturing Values\ndate: 2023-02-29 21:40:59\ncategories: \n- [Swift, 01. Closures]\ntags:\n- Capturing\n---\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nThe capture of values in Swift's closure and OC's Block is different.\n\n#### <font size=3 color=#4169E1> 1. The capture of values in OC. </font> \n```Swift \nNSInteger a = 100;\nvoid(^block)(void) = ^{\n    NSLog(@\"block = %ld:\", a);\n};\n \na += 1;\nNSLog(@\"out1 = %ld:\", a);\nblock();\nNSLog(@\"out2 = %ld:\", a);\n//result:\n2021-08-17 11:27:13.846743+0800 MDProject[30746:23593763] out1 = 101\n2021-08-17 11:27:13.846885+0800 MDProject[30746:23593763] block = 100\n2021-08-17 11:27:13.847002+0800 MDProject[30746:23593763] out2 = 101\n```\n#### <font size=3 color=#4169E1> 2. The capture of values in Swift. </font> \n```Swift\nvar a = 100\nlet closure = {\n    print(\"closure = \\(a)\")\n}\na += 1\nprint(\"out 1 = \\(a)\")\nclosure()\nprint(\"out 2 = \\(a)\")\n```\nResult:\n```Swift\nout1 = 101\nclosure = 101\nout 2 = 101\n```\nSwift closures capture \"references\", not the objects they reference. We can print the address of variable a to prove this.\n```Swift\nvar a = 100\nwithUnsafePointer(to: &a) {ptr in print(ptr)}\nlet closure = {\n    print(\"closure = \\(a)\")\n    withUnsafePointer(to: &a) {ptr in print(ptr)}\n}\nclosure()\na += 1\nprint(\"out 1 = \\(a)\")\nwithUnsafePointer(to: &a) {ptr in print(ptr)}\n\nclosure()\nprint(\"out 2 = \\(a)\")\nwithUnsafePointer(to: &a) {ptr in print(ptr)}\n```\nResult as follows:\n```Swift\n0x0000600000209490\nclosure = 100\n0x0000600000209490\nout 1 = 101\n0x0000600000209490\nclosure = 101\n0x0000600000209490\nout 2 = 101\n0x0000600000209490\n```\nThey all have the same address, It proves that closure capture the reference of the variable, not like block in OC.\n\n#### <font size=3 color=#4169E1> 3. Modify value in closure. </font>  \nIf we want to modity value in block, we should add \"__block\" or \"__weak\", that will make the block capture reference of variable from outside.\nLet me see how closure handle this case.\n```Swift\nvar a = 100\nlet closure = {\n    a += 1\n    print(\"closure = \\(a)\")\n}\nprint(\"out 1 = \\(a)\")\nclosure()\nprint(\"out 2 = \\(a)\")\n```\nResult:\n```Swift\nout 1 = 100\nclosure = 101\nout 2 = 101\n```\nWe can modify the value of the variable in closure directly because closure capture the reference of the variable by default.\n\n#### <font size=3 color=#4169E1> 4. Capturing list in closure. </font>   \nIf we capture variable in capturing list in closure, what will happen? Let me see that.\n```Swift\nvar a = 100\nlet closure = {\n    [a] in\n    print(\"closure = \\(a)\")\n}\na += 1\nprint(\"out 1 = \\(a)\")\nclosure()\nprint(\"out 2 = \\(a)\")\n```\nResult:\n```Swift\nout 1 = 101\nclosure = 100\nout 2 = 101\n```\nAt this time if we want to modify 'a' in closure:\n```Swift\nvar a = 100\nlet closure = {\n    [a] in\n    a += 1\n    print(\"closure = \\(a)\")\n}\na += 1\nprint(\"out 1 = \\(a)\")\nclosure()\nprint(\"out 2 = \\(a)\")\n```\nIt will get an error like that:  \n\n{% img /assets/Swift/Tips/image00.jpg %}\n\nAnd this is a tip for us that variable 'a' is an immutable capture now.\n","slug":"Swift/01. Closures/01. Capturing Values","published":1,"updated":"2023-08-18T10:48:44.135Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clm7w97rf0018kb0mai004ex8","content":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>The capture of values in Swift’s closure and OC’s Block is different.</p>\n<h4 id=\"1-The-capture-of-values-in-OC\"><a href=\"#1-The-capture-of-values-in-OC\" class=\"headerlink\" title=\" 1. The capture of values in OC. \"></a><font size=3 color=#4169E1> 1. The capture of values in OC. </font></h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">NSInteger</span> a <span class=\"operator\">=</span> <span class=\"number\">100</span>;</span><br><span class=\"line\">void(<span class=\"operator\">^</span>block)(void) <span class=\"operator\">=</span> <span class=\"operator\">^</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">NSLog</span>(@<span class=\"string\">&quot;block = %ld:&quot;</span>, a);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">a <span class=\"operator\">+=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"type\">NSLog</span>(@<span class=\"string\">&quot;out1 = %ld:&quot;</span>, a);</span><br><span class=\"line\">block();</span><br><span class=\"line\"><span class=\"type\">NSLog</span>(@<span class=\"string\">&quot;out2 = %ld:&quot;</span>, a);</span><br><span class=\"line\"><span class=\"comment\">//result:</span></span><br><span class=\"line\"><span class=\"number\">2021</span><span class=\"operator\">-</span><span class=\"number\">08</span><span class=\"operator\">-</span><span class=\"number\">17</span> <span class=\"number\">11</span>:<span class=\"number\">27</span>:<span class=\"number\">13.846743</span><span class=\"operator\">+</span><span class=\"number\">0800</span> <span class=\"type\">MDProject</span>[<span class=\"number\">30746</span>:<span class=\"number\">23593763</span>] out1 <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br><span class=\"line\"><span class=\"number\">2021</span><span class=\"operator\">-</span><span class=\"number\">08</span><span class=\"operator\">-</span><span class=\"number\">17</span> <span class=\"number\">11</span>:<span class=\"number\">27</span>:<span class=\"number\">13.846885</span><span class=\"operator\">+</span><span class=\"number\">0800</span> <span class=\"type\">MDProject</span>[<span class=\"number\">30746</span>:<span class=\"number\">23593763</span>] block <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"number\">2021</span><span class=\"operator\">-</span><span class=\"number\">08</span><span class=\"operator\">-</span><span class=\"number\">17</span> <span class=\"number\">11</span>:<span class=\"number\">27</span>:<span class=\"number\">13.847002</span><span class=\"operator\">+</span><span class=\"number\">0800</span> <span class=\"type\">MDProject</span>[<span class=\"number\">30746</span>:<span class=\"number\">23593763</span>] out2 <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"2-The-capture-of-values-in-Swift\"><a href=\"#2-The-capture-of-values-in-Swift\" class=\"headerlink\" title=\" 2. The capture of values in Swift. \"></a><font size=3 color=#4169E1> 2. The capture of values in Swift. </font></h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> closure <span class=\"operator\">=</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;closure = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;out 1 = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br><span class=\"line\">closure()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;out 2 = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>Result:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">out1 <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br><span class=\"line\">closure <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br><span class=\"line\">out <span class=\"number\">2</span> <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br></pre></td></tr></table></figure>\n<p>Swift closures capture “references”, not the objects they reference. We can print the address of variable a to prove this.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"built_in\">withUnsafePointer</span>(to: <span class=\"operator\">&amp;</span>a) &#123;ptr <span class=\"keyword\">in</span> <span class=\"built_in\">print</span>(ptr)&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> closure <span class=\"operator\">=</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;closure = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">withUnsafePointer</span>(to: <span class=\"operator\">&amp;</span>a) &#123;ptr <span class=\"keyword\">in</span> <span class=\"built_in\">print</span>(ptr)&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">closure()</span><br><span class=\"line\">a <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;out 1 = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">withUnsafePointer</span>(to: <span class=\"operator\">&amp;</span>a) &#123;ptr <span class=\"keyword\">in</span> <span class=\"built_in\">print</span>(ptr)&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">closure()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;out 2 = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">withUnsafePointer</span>(to: <span class=\"operator\">&amp;</span>a) &#123;ptr <span class=\"keyword\">in</span> <span class=\"built_in\">print</span>(ptr)&#125;</span><br></pre></td></tr></table></figure>\n<p>Result as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0x0000600000209490</span></span><br><span class=\"line\">closure <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"number\">0x0000600000209490</span></span><br><span class=\"line\">out <span class=\"number\">1</span> <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br><span class=\"line\"><span class=\"number\">0x0000600000209490</span></span><br><span class=\"line\">closure <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br><span class=\"line\"><span class=\"number\">0x0000600000209490</span></span><br><span class=\"line\">out <span class=\"number\">2</span> <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br><span class=\"line\"><span class=\"number\">0x0000600000209490</span></span><br></pre></td></tr></table></figure>\n<p>They all have the same address, It proves that closure capture the reference of the variable, not like block in OC.</p>\n<h4 id=\"3-Modify-value-in-closure\"><a href=\"#3-Modify-value-in-closure\" class=\"headerlink\" title=\" 3. Modify value in closure. \"></a><font size=3 color=#4169E1> 3. Modify value in closure. </font></h4><p>If we want to modity value in block, we should add “__block” or “__weak”, that will make the block capture reference of variable from outside.<br>Let me see how closure handle this case.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> closure <span class=\"operator\">=</span> &#123;</span><br><span class=\"line\">    a <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;closure = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;out 1 = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br><span class=\"line\">closure()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;out 2 = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>Result:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">out <span class=\"number\">1</span> <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\">closure <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br><span class=\"line\">out <span class=\"number\">2</span> <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br></pre></td></tr></table></figure>\n<p>We can modify the value of the variable in closure directly because closure capture the reference of the variable by default.</p>\n<h4 id=\"4-Capturing-list-in-closure\"><a href=\"#4-Capturing-list-in-closure\" class=\"headerlink\" title=\" 4. Capturing list in closure. \"></a><font size=3 color=#4169E1> 4. Capturing list in closure. </font></h4><p>If we capture variable in capturing list in closure, what will happen? Let me see that.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> closure <span class=\"operator\">=</span> &#123;</span><br><span class=\"line\">    [a] <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;closure = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;out 1 = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br><span class=\"line\">closure()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;out 2 = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>Result:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">out <span class=\"number\">1</span> <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br><span class=\"line\">closure <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\">out <span class=\"number\">2</span> <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br></pre></td></tr></table></figure>\n<p>At this time if we want to modify ‘a’ in closure:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> closure <span class=\"operator\">=</span> &#123;</span><br><span class=\"line\">    [a] <span class=\"keyword\">in</span></span><br><span class=\"line\">    a <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;closure = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;out 1 = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br><span class=\"line\">closure()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;out 2 = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>It will get an error like that:  </p>\n<img src=\"/assets/Swift/Tips/image00.jpg\" class=\"\">\n\n<p>And this is a tip for us that variable ‘a’ is an immutable capture now.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>The capture of values in Swift’s closure and OC’s Block is different.</p>\n<h4 id=\"1-The-capture-of-values-in-OC\"><a href=\"#1-The-capture-of-values-in-OC\" class=\"headerlink\" title=\" 1. The capture of values in OC. \"></a><font size=3 color=#4169E1> 1. The capture of values in OC. </font></h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">NSInteger</span> a <span class=\"operator\">=</span> <span class=\"number\">100</span>;</span><br><span class=\"line\">void(<span class=\"operator\">^</span>block)(void) <span class=\"operator\">=</span> <span class=\"operator\">^</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">NSLog</span>(@<span class=\"string\">&quot;block = %ld:&quot;</span>, a);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">a <span class=\"operator\">+=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"type\">NSLog</span>(@<span class=\"string\">&quot;out1 = %ld:&quot;</span>, a);</span><br><span class=\"line\">block();</span><br><span class=\"line\"><span class=\"type\">NSLog</span>(@<span class=\"string\">&quot;out2 = %ld:&quot;</span>, a);</span><br><span class=\"line\"><span class=\"comment\">//result:</span></span><br><span class=\"line\"><span class=\"number\">2021</span><span class=\"operator\">-</span><span class=\"number\">08</span><span class=\"operator\">-</span><span class=\"number\">17</span> <span class=\"number\">11</span>:<span class=\"number\">27</span>:<span class=\"number\">13.846743</span><span class=\"operator\">+</span><span class=\"number\">0800</span> <span class=\"type\">MDProject</span>[<span class=\"number\">30746</span>:<span class=\"number\">23593763</span>] out1 <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br><span class=\"line\"><span class=\"number\">2021</span><span class=\"operator\">-</span><span class=\"number\">08</span><span class=\"operator\">-</span><span class=\"number\">17</span> <span class=\"number\">11</span>:<span class=\"number\">27</span>:<span class=\"number\">13.846885</span><span class=\"operator\">+</span><span class=\"number\">0800</span> <span class=\"type\">MDProject</span>[<span class=\"number\">30746</span>:<span class=\"number\">23593763</span>] block <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"number\">2021</span><span class=\"operator\">-</span><span class=\"number\">08</span><span class=\"operator\">-</span><span class=\"number\">17</span> <span class=\"number\">11</span>:<span class=\"number\">27</span>:<span class=\"number\">13.847002</span><span class=\"operator\">+</span><span class=\"number\">0800</span> <span class=\"type\">MDProject</span>[<span class=\"number\">30746</span>:<span class=\"number\">23593763</span>] out2 <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"2-The-capture-of-values-in-Swift\"><a href=\"#2-The-capture-of-values-in-Swift\" class=\"headerlink\" title=\" 2. The capture of values in Swift. \"></a><font size=3 color=#4169E1> 2. The capture of values in Swift. </font></h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> closure <span class=\"operator\">=</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;closure = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;out 1 = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br><span class=\"line\">closure()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;out 2 = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>Result:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">out1 <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br><span class=\"line\">closure <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br><span class=\"line\">out <span class=\"number\">2</span> <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br></pre></td></tr></table></figure>\n<p>Swift closures capture “references”, not the objects they reference. We can print the address of variable a to prove this.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"built_in\">withUnsafePointer</span>(to: <span class=\"operator\">&amp;</span>a) &#123;ptr <span class=\"keyword\">in</span> <span class=\"built_in\">print</span>(ptr)&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> closure <span class=\"operator\">=</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;closure = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">withUnsafePointer</span>(to: <span class=\"operator\">&amp;</span>a) &#123;ptr <span class=\"keyword\">in</span> <span class=\"built_in\">print</span>(ptr)&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">closure()</span><br><span class=\"line\">a <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;out 1 = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">withUnsafePointer</span>(to: <span class=\"operator\">&amp;</span>a) &#123;ptr <span class=\"keyword\">in</span> <span class=\"built_in\">print</span>(ptr)&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">closure()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;out 2 = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">withUnsafePointer</span>(to: <span class=\"operator\">&amp;</span>a) &#123;ptr <span class=\"keyword\">in</span> <span class=\"built_in\">print</span>(ptr)&#125;</span><br></pre></td></tr></table></figure>\n<p>Result as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0x0000600000209490</span></span><br><span class=\"line\">closure <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"number\">0x0000600000209490</span></span><br><span class=\"line\">out <span class=\"number\">1</span> <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br><span class=\"line\"><span class=\"number\">0x0000600000209490</span></span><br><span class=\"line\">closure <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br><span class=\"line\"><span class=\"number\">0x0000600000209490</span></span><br><span class=\"line\">out <span class=\"number\">2</span> <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br><span class=\"line\"><span class=\"number\">0x0000600000209490</span></span><br></pre></td></tr></table></figure>\n<p>They all have the same address, It proves that closure capture the reference of the variable, not like block in OC.</p>\n<h4 id=\"3-Modify-value-in-closure\"><a href=\"#3-Modify-value-in-closure\" class=\"headerlink\" title=\" 3. Modify value in closure. \"></a><font size=3 color=#4169E1> 3. Modify value in closure. </font></h4><p>If we want to modity value in block, we should add “__block” or “__weak”, that will make the block capture reference of variable from outside.<br>Let me see how closure handle this case.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> closure <span class=\"operator\">=</span> &#123;</span><br><span class=\"line\">    a <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;closure = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;out 1 = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br><span class=\"line\">closure()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;out 2 = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>Result:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">out <span class=\"number\">1</span> <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\">closure <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br><span class=\"line\">out <span class=\"number\">2</span> <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br></pre></td></tr></table></figure>\n<p>We can modify the value of the variable in closure directly because closure capture the reference of the variable by default.</p>\n<h4 id=\"4-Capturing-list-in-closure\"><a href=\"#4-Capturing-list-in-closure\" class=\"headerlink\" title=\" 4. Capturing list in closure. \"></a><font size=3 color=#4169E1> 4. Capturing list in closure. </font></h4><p>If we capture variable in capturing list in closure, what will happen? Let me see that.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> closure <span class=\"operator\">=</span> &#123;</span><br><span class=\"line\">    [a] <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;closure = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;out 1 = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br><span class=\"line\">closure()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;out 2 = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>Result:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">out <span class=\"number\">1</span> <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br><span class=\"line\">closure <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\">out <span class=\"number\">2</span> <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br></pre></td></tr></table></figure>\n<p>At this time if we want to modify ‘a’ in closure:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> closure <span class=\"operator\">=</span> &#123;</span><br><span class=\"line\">    [a] <span class=\"keyword\">in</span></span><br><span class=\"line\">    a <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;closure = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;out 1 = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br><span class=\"line\">closure()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;out 2 = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>It will get an error like that:  </p>\n<img src=\"/assets/Swift/Tips/image00.jpg\" class=\"\">\n\n<p>And this is a tip for us that variable ‘a’ is an immutable capture now.</p>\n"},{"title":"00. Structures and Classes","date":"2023-03-02T19:40:59.000Z","_content":"\n<font color=gray size=2>*It will take about 5 minutes to finish reading this article.*</font>\n\n\nUnlike other programming languages, <strong>*In Swift, you can define a structure or class in just a single file*</strong>, and the external interface to that class or structure is automatically made available for other code to use.\n\n#### <font size=3 color=#4169E1> 1. Comparing Structures and Classes. </font> \n\n<font size=2 color=#4169E1>1.1 Differences and similarities.</font>   \nStructures and Classes in Swift have many things in common. Both can:\n>1. Property, method and initializers can both be defined.  \n>2. Both support protocol and extension.\n\nThey have diferent capabilities that:\n\n>1. Class is the reference type; Struct is a value type.\n>2. Class supports inheritance; Struct does not support inheritance.\n>3. The mutating keyword is not required to modify the attribute of the method declared by class; struct needs.\n>4. The class does not provide a default memberwise initializer; Struct provides the default memberwise initializer.\n>5. Class supports reference counting; Struct is not supported.\n>6. Class supports Type casting; Struct is not supported.\n>7. Class supports Deinitializers; Struct is not supported.\n\n<font size=2 color=#4169E1>1.2 Identity Operators.</font>  \nIt can sometimes be useful to find out whether two constants or variables refer to exactly the same instance of a class. To enable this, Swift provides two identity operators:\n\n> Identical to (===)  \n> Not identical to (!==)  \n\nUse these operators to check whether two constants or variables refer to the same single instance.\n\nBy default, custom classes and structures don’t have an implementation of the equivalence operators, known as the equal to operator (==) and not equal to operator (!=). You usually implement the == operator, and use the standard library’s default implementation of the != operator that negates the result of the == operator. For example:\n```Swift \nextension Vector2D: Equatable {\n    static func == (left: Vector2D, right: Vector2D) -> Bool {\n        return (left.x == right.x) && (left.y == right.y)\n    }\n  }\n```\n\n#### <font size=3 color=#4169E1> 2. Choosing Between Structures and Classes. </font> \nHow to select Struct and Class in the project during development？\n> 1. Choose Structures by Default.\n> 2. Use Classes When You Need Objective-C Interoperability.\n> 3. Use Classes When You Need to Control Identity.\n> 4. Use Structures When You Don’t Control Identity.\n> 5. Use Structures and Protocols to Model Inheritance and Share Behavior.\n\nWe can make a summary that, do not use class if you can use struct.\n\n> 1. When using struct, you do not need to consider memory leaks and multi-threaded' reads and writes, because it will copy values when passing them.\n> 2. Struct is stored in the stack and class is stored in the heap. Struct is more faster.\n\n\n#### <font size=3 color=gray>*Reference*</font>\n[1] [Structures and Classes](https://docs.swift.org/swift-book/LanguageGuide/ClassesAndStructures.html)   \n[2] [Choosing Between Structures and Classes](https://developer.apple.com/documentation/swift/choosing-between-structures-and-classes)  \n[3] [Why Choose Struct Over Class?](https://stackoverflow.com/questions/24232799/why-choose-struct-over-class?rq=1)\n\n","source":"_posts/Swift/02. Structs/00. Structures and Classes.md","raw":"---\ntitle: 00. Structures and Classes\ndate: 2023-03-2 20:40:59\ncategories: \n- [Swift, 02. Structs]\ntags:\n- struct\n- class\n---\n\n<font color=gray size=2>*It will take about 5 minutes to finish reading this article.*</font>\n\n\nUnlike other programming languages, <strong>*In Swift, you can define a structure or class in just a single file*</strong>, and the external interface to that class or structure is automatically made available for other code to use.\n\n#### <font size=3 color=#4169E1> 1. Comparing Structures and Classes. </font> \n\n<font size=2 color=#4169E1>1.1 Differences and similarities.</font>   \nStructures and Classes in Swift have many things in common. Both can:\n>1. Property, method and initializers can both be defined.  \n>2. Both support protocol and extension.\n\nThey have diferent capabilities that:\n\n>1. Class is the reference type; Struct is a value type.\n>2. Class supports inheritance; Struct does not support inheritance.\n>3. The mutating keyword is not required to modify the attribute of the method declared by class; struct needs.\n>4. The class does not provide a default memberwise initializer; Struct provides the default memberwise initializer.\n>5. Class supports reference counting; Struct is not supported.\n>6. Class supports Type casting; Struct is not supported.\n>7. Class supports Deinitializers; Struct is not supported.\n\n<font size=2 color=#4169E1>1.2 Identity Operators.</font>  \nIt can sometimes be useful to find out whether two constants or variables refer to exactly the same instance of a class. To enable this, Swift provides two identity operators:\n\n> Identical to (===)  \n> Not identical to (!==)  \n\nUse these operators to check whether two constants or variables refer to the same single instance.\n\nBy default, custom classes and structures don’t have an implementation of the equivalence operators, known as the equal to operator (==) and not equal to operator (!=). You usually implement the == operator, and use the standard library’s default implementation of the != operator that negates the result of the == operator. For example:\n```Swift \nextension Vector2D: Equatable {\n    static func == (left: Vector2D, right: Vector2D) -> Bool {\n        return (left.x == right.x) && (left.y == right.y)\n    }\n  }\n```\n\n#### <font size=3 color=#4169E1> 2. Choosing Between Structures and Classes. </font> \nHow to select Struct and Class in the project during development？\n> 1. Choose Structures by Default.\n> 2. Use Classes When You Need Objective-C Interoperability.\n> 3. Use Classes When You Need to Control Identity.\n> 4. Use Structures When You Don’t Control Identity.\n> 5. Use Structures and Protocols to Model Inheritance and Share Behavior.\n\nWe can make a summary that, do not use class if you can use struct.\n\n> 1. When using struct, you do not need to consider memory leaks and multi-threaded' reads and writes, because it will copy values when passing them.\n> 2. Struct is stored in the stack and class is stored in the heap. Struct is more faster.\n\n\n#### <font size=3 color=gray>*Reference*</font>\n[1] [Structures and Classes](https://docs.swift.org/swift-book/LanguageGuide/ClassesAndStructures.html)   \n[2] [Choosing Between Structures and Classes](https://developer.apple.com/documentation/swift/choosing-between-structures-and-classes)  \n[3] [Why Choose Struct Over Class?](https://stackoverflow.com/questions/24232799/why-choose-struct-over-class?rq=1)\n\n","slug":"Swift/02. Structs/00. Structures and Classes","published":1,"updated":"2023-08-18T10:48:13.759Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clm7w97rg001akb0mckox6e7g","content":"<p><font color=gray size=2><em>It will take about 5 minutes to finish reading this article.</em></font></p>\n<p>Unlike other programming languages, <strong><em>In Swift, you can define a structure or class in just a single file</em></strong>, and the external interface to that class or structure is automatically made available for other code to use.</p>\n<h4 id=\"1-Comparing-Structures-and-Classes\"><a href=\"#1-Comparing-Structures-and-Classes\" class=\"headerlink\" title=\" 1. Comparing Structures and Classes. \"></a><font size=3 color=#4169E1> 1. Comparing Structures and Classes. </font></h4><p><font size=2 color=#4169E1>1.1 Differences and similarities.</font><br>Structures and Classes in Swift have many things in common. Both can:</p>\n<blockquote>\n<ol>\n<li>Property, method and initializers can both be defined.  </li>\n<li>Both support protocol and extension.</li>\n</ol>\n</blockquote>\n<p>They have diferent capabilities that:</p>\n<blockquote>\n<ol>\n<li>Class is the reference type; Struct is a value type.</li>\n<li>Class supports inheritance; Struct does not support inheritance.</li>\n<li>The mutating keyword is not required to modify the attribute of the method declared by class; struct needs.</li>\n<li>The class does not provide a default memberwise initializer; Struct provides the default memberwise initializer.</li>\n<li>Class supports reference counting; Struct is not supported.</li>\n<li>Class supports Type casting; Struct is not supported.</li>\n<li>Class supports Deinitializers; Struct is not supported.</li>\n</ol>\n</blockquote>\n<p><font size=2 color=#4169E1>1.2 Identity Operators.</font><br>It can sometimes be useful to find out whether two constants or variables refer to exactly the same instance of a class. To enable this, Swift provides two identity operators:</p>\n<blockquote>\n<p>Identical to (&#x3D;&#x3D;&#x3D;)<br>Not identical to (!&#x3D;&#x3D;)  </p>\n</blockquote>\n<p>Use these operators to check whether two constants or variables refer to the same single instance.</p>\n<p>By default, custom classes and structures don’t have an implementation of the equivalence operators, known as the equal to operator (&#x3D;&#x3D;) and not equal to operator (!&#x3D;). You usually implement the &#x3D;&#x3D; operator, and use the standard library’s default implementation of the !&#x3D; operator that negates the result of the &#x3D;&#x3D; operator. For example:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">Vector2D</span>: <span class=\"title class_\">Equatable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">func</span> <span class=\"title function_\">==</span> (<span class=\"params\">left</span>: <span class=\"type\">Vector2D</span>, <span class=\"params\">right</span>: <span class=\"type\">Vector2D</span>) -&gt; <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (left.x <span class=\"operator\">==</span> right.x) <span class=\"operator\">&amp;&amp;</span> (left.y <span class=\"operator\">==</span> right.y)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-Choosing-Between-Structures-and-Classes\"><a href=\"#2-Choosing-Between-Structures-and-Classes\" class=\"headerlink\" title=\" 2. Choosing Between Structures and Classes. \"></a><font size=3 color=#4169E1> 2. Choosing Between Structures and Classes. </font></h4><p>How to select Struct and Class in the project during development？</p>\n<blockquote>\n<ol>\n<li>Choose Structures by Default.</li>\n<li>Use Classes When You Need Objective-C Interoperability.</li>\n<li>Use Classes When You Need to Control Identity.</li>\n<li>Use Structures When You Don’t Control Identity.</li>\n<li>Use Structures and Protocols to Model Inheritance and Share Behavior.</li>\n</ol>\n</blockquote>\n<p>We can make a summary that, do not use class if you can use struct.</p>\n<blockquote>\n<ol>\n<li>When using struct, you do not need to consider memory leaks and multi-threaded’ reads and writes, because it will copy values when passing them.</li>\n<li>Struct is stored in the stack and class is stored in the heap. Struct is more faster.</li>\n</ol>\n</blockquote>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://docs.swift.org/swift-book/LanguageGuide/ClassesAndStructures.html\">Structures and Classes</a><br>[2] <a href=\"https://developer.apple.com/documentation/swift/choosing-between-structures-and-classes\">Choosing Between Structures and Classes</a><br>[3] <a href=\"https://stackoverflow.com/questions/24232799/why-choose-struct-over-class?rq=1\">Why Choose Struct Over Class?</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 5 minutes to finish reading this article.</em></font></p>\n<p>Unlike other programming languages, <strong><em>In Swift, you can define a structure or class in just a single file</em></strong>, and the external interface to that class or structure is automatically made available for other code to use.</p>\n<h4 id=\"1-Comparing-Structures-and-Classes\"><a href=\"#1-Comparing-Structures-and-Classes\" class=\"headerlink\" title=\" 1. Comparing Structures and Classes. \"></a><font size=3 color=#4169E1> 1. Comparing Structures and Classes. </font></h4><p><font size=2 color=#4169E1>1.1 Differences and similarities.</font><br>Structures and Classes in Swift have many things in common. Both can:</p>\n<blockquote>\n<ol>\n<li>Property, method and initializers can both be defined.  </li>\n<li>Both support protocol and extension.</li>\n</ol>\n</blockquote>\n<p>They have diferent capabilities that:</p>\n<blockquote>\n<ol>\n<li>Class is the reference type; Struct is a value type.</li>\n<li>Class supports inheritance; Struct does not support inheritance.</li>\n<li>The mutating keyword is not required to modify the attribute of the method declared by class; struct needs.</li>\n<li>The class does not provide a default memberwise initializer; Struct provides the default memberwise initializer.</li>\n<li>Class supports reference counting; Struct is not supported.</li>\n<li>Class supports Type casting; Struct is not supported.</li>\n<li>Class supports Deinitializers; Struct is not supported.</li>\n</ol>\n</blockquote>\n<p><font size=2 color=#4169E1>1.2 Identity Operators.</font><br>It can sometimes be useful to find out whether two constants or variables refer to exactly the same instance of a class. To enable this, Swift provides two identity operators:</p>\n<blockquote>\n<p>Identical to (&#x3D;&#x3D;&#x3D;)<br>Not identical to (!&#x3D;&#x3D;)  </p>\n</blockquote>\n<p>Use these operators to check whether two constants or variables refer to the same single instance.</p>\n<p>By default, custom classes and structures don’t have an implementation of the equivalence operators, known as the equal to operator (&#x3D;&#x3D;) and not equal to operator (!&#x3D;). You usually implement the &#x3D;&#x3D; operator, and use the standard library’s default implementation of the !&#x3D; operator that negates the result of the &#x3D;&#x3D; operator. For example:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">Vector2D</span>: <span class=\"title class_\">Equatable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">func</span> <span class=\"title function_\">==</span> (<span class=\"params\">left</span>: <span class=\"type\">Vector2D</span>, <span class=\"params\">right</span>: <span class=\"type\">Vector2D</span>) -&gt; <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (left.x <span class=\"operator\">==</span> right.x) <span class=\"operator\">&amp;&amp;</span> (left.y <span class=\"operator\">==</span> right.y)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-Choosing-Between-Structures-and-Classes\"><a href=\"#2-Choosing-Between-Structures-and-Classes\" class=\"headerlink\" title=\" 2. Choosing Between Structures and Classes. \"></a><font size=3 color=#4169E1> 2. Choosing Between Structures and Classes. </font></h4><p>How to select Struct and Class in the project during development？</p>\n<blockquote>\n<ol>\n<li>Choose Structures by Default.</li>\n<li>Use Classes When You Need Objective-C Interoperability.</li>\n<li>Use Classes When You Need to Control Identity.</li>\n<li>Use Structures When You Don’t Control Identity.</li>\n<li>Use Structures and Protocols to Model Inheritance and Share Behavior.</li>\n</ol>\n</blockquote>\n<p>We can make a summary that, do not use class if you can use struct.</p>\n<blockquote>\n<ol>\n<li>When using struct, you do not need to consider memory leaks and multi-threaded’ reads and writes, because it will copy values when passing them.</li>\n<li>Struct is stored in the stack and class is stored in the heap. Struct is more faster.</li>\n</ol>\n</blockquote>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://docs.swift.org/swift-book/LanguageGuide/ClassesAndStructures.html\">Structures and Classes</a><br>[2] <a href=\"https://developer.apple.com/documentation/swift/choosing-between-structures-and-classes\">Choosing Between Structures and Classes</a><br>[3] <a href=\"https://stackoverflow.com/questions/24232799/why-choose-struct-over-class?rq=1\">Why Choose Struct Over Class?</a></p>\n"},{"title":"01. Cases of Structures","date":"2023-03-02T19:41:59.000Z","_content":"\n<font color=gray size=2>*It will take about 2 minutes to finish reading this article.*</font>\n\n\n#### <font size=3 color=#4169E1> 1. Use structures when you’re modeling data. </font> \nUse structures when you’re modeling data that contains information about an entity with an identity that you don’t control. For example:\n```Swift\nstruct PenPalRecord {\n    let myID: Int\n    var myNickname: String\n    var recommendedPenPalID: Int\n}\nvar myRecord = try JSONDecoder().decode(PenPalRecord.self, from: jsonResponse)\n```\n\n#### <font size=3 color=#4169E1> 2. Use Structures and Protocols to Model Inheritance and Share Behavior. </font> \nStructures and classes both support a form of inheritance. Structures and protocols can only adopt protocols; they can’t inherit from classes. However, the kinds of inheritance hierarchies you can build with class inheritance can be also modeled using protocol inheritance and structures.\n```Swift\nprotocol AnimalCommonProtocol {\n    var name: String? { get set }\n    var weight: Double { get set }\n    func run()\n}\n\nstruct Cat : AnimalCommonProtocol {\n    func run() {\n        print(\"cat run\")\n    }\n    var name: String?\n    var weight: Double\n    var gender: String?\n}\n\nstruct Dog : AnimalCommonProtocol {\n    func run() {\n        print(\"dog run\")\n    }\n    var name: String?\n    var weight: Double\n    var type: String?\n}\n```\n\n\n","source":"_posts/Swift/02. Structs/01. Cases of Structures.md","raw":"---\ntitle: 01. Cases of Structures\ndate: 2023-03-2 20:41:59\ncategories: \n- [Swift, 02. Structs]\ntags:\n- struct\n---\n\n<font color=gray size=2>*It will take about 2 minutes to finish reading this article.*</font>\n\n\n#### <font size=3 color=#4169E1> 1. Use structures when you’re modeling data. </font> \nUse structures when you’re modeling data that contains information about an entity with an identity that you don’t control. For example:\n```Swift\nstruct PenPalRecord {\n    let myID: Int\n    var myNickname: String\n    var recommendedPenPalID: Int\n}\nvar myRecord = try JSONDecoder().decode(PenPalRecord.self, from: jsonResponse)\n```\n\n#### <font size=3 color=#4169E1> 2. Use Structures and Protocols to Model Inheritance and Share Behavior. </font> \nStructures and classes both support a form of inheritance. Structures and protocols can only adopt protocols; they can’t inherit from classes. However, the kinds of inheritance hierarchies you can build with class inheritance can be also modeled using protocol inheritance and structures.\n```Swift\nprotocol AnimalCommonProtocol {\n    var name: String? { get set }\n    var weight: Double { get set }\n    func run()\n}\n\nstruct Cat : AnimalCommonProtocol {\n    func run() {\n        print(\"cat run\")\n    }\n    var name: String?\n    var weight: Double\n    var gender: String?\n}\n\nstruct Dog : AnimalCommonProtocol {\n    func run() {\n        print(\"dog run\")\n    }\n    var name: String?\n    var weight: Double\n    var type: String?\n}\n```\n\n\n","slug":"Swift/02. Structs/01. Cases of Structures","published":1,"updated":"2023-08-18T10:48:16.231Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clm7w97rh001ckb0m0xaa5g0m","content":"<p><font color=gray size=2><em>It will take about 2 minutes to finish reading this article.</em></font></p>\n<h4 id=\"1-Use-structures-when-you’re-modeling-data\"><a href=\"#1-Use-structures-when-you’re-modeling-data\" class=\"headerlink\" title=\" 1. Use structures when you’re modeling data. \"></a><font size=3 color=#4169E1> 1. Use structures when you’re modeling data. </font></h4><p>Use structures when you’re modeling data that contains information about an entity with an identity that you don’t control. For example:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">PenPalRecord</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> myID: <span class=\"type\">Int</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> myNickname: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> recommendedPenPalID: <span class=\"type\">Int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> myRecord <span class=\"operator\">=</span> <span class=\"keyword\">try</span> <span class=\"type\">JSONDecoder</span>().decode(<span class=\"type\">PenPalRecord</span>.<span class=\"keyword\">self</span>, from: jsonResponse)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-Use-Structures-and-Protocols-to-Model-Inheritance-and-Share-Behavior\"><a href=\"#2-Use-Structures-and-Protocols-to-Model-Inheritance-and-Share-Behavior\" class=\"headerlink\" title=\" 2. Use Structures and Protocols to Model Inheritance and Share Behavior. \"></a><font size=3 color=#4169E1> 2. Use Structures and Protocols to Model Inheritance and Share Behavior. </font></h4><p>Structures and classes both support a form of inheritance. Structures and protocols can only adopt protocols; they can’t inherit from classes. However, the kinds of inheritance hierarchies you can build with class inheritance can be also modeled using protocol inheritance and structures.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protocol</span> <span class=\"title class_\">AnimalCommonProtocol</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span>? &#123; <span class=\"keyword\">get</span> <span class=\"keyword\">set</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> weight: <span class=\"type\">Double</span> &#123; <span class=\"keyword\">get</span> <span class=\"keyword\">set</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">run</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Cat</span> : <span class=\"title class_\">AnimalCommonProtocol</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">run</span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;cat run&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span>?</span><br><span class=\"line\">    <span class=\"keyword\">var</span> weight: <span class=\"type\">Double</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> gender: <span class=\"type\">String</span>?</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Dog</span> : <span class=\"title class_\">AnimalCommonProtocol</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">run</span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;dog run&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span>?</span><br><span class=\"line\">    <span class=\"keyword\">var</span> weight: <span class=\"type\">Double</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> type: <span class=\"type\">String</span>?</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 2 minutes to finish reading this article.</em></font></p>\n<h4 id=\"1-Use-structures-when-you’re-modeling-data\"><a href=\"#1-Use-structures-when-you’re-modeling-data\" class=\"headerlink\" title=\" 1. Use structures when you’re modeling data. \"></a><font size=3 color=#4169E1> 1. Use structures when you’re modeling data. </font></h4><p>Use structures when you’re modeling data that contains information about an entity with an identity that you don’t control. For example:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">PenPalRecord</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> myID: <span class=\"type\">Int</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> myNickname: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> recommendedPenPalID: <span class=\"type\">Int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> myRecord <span class=\"operator\">=</span> <span class=\"keyword\">try</span> <span class=\"type\">JSONDecoder</span>().decode(<span class=\"type\">PenPalRecord</span>.<span class=\"keyword\">self</span>, from: jsonResponse)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-Use-Structures-and-Protocols-to-Model-Inheritance-and-Share-Behavior\"><a href=\"#2-Use-Structures-and-Protocols-to-Model-Inheritance-and-Share-Behavior\" class=\"headerlink\" title=\" 2. Use Structures and Protocols to Model Inheritance and Share Behavior. \"></a><font size=3 color=#4169E1> 2. Use Structures and Protocols to Model Inheritance and Share Behavior. </font></h4><p>Structures and classes both support a form of inheritance. Structures and protocols can only adopt protocols; they can’t inherit from classes. However, the kinds of inheritance hierarchies you can build with class inheritance can be also modeled using protocol inheritance and structures.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protocol</span> <span class=\"title class_\">AnimalCommonProtocol</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span>? &#123; <span class=\"keyword\">get</span> <span class=\"keyword\">set</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> weight: <span class=\"type\">Double</span> &#123; <span class=\"keyword\">get</span> <span class=\"keyword\">set</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">run</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Cat</span> : <span class=\"title class_\">AnimalCommonProtocol</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">run</span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;cat run&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span>?</span><br><span class=\"line\">    <span class=\"keyword\">var</span> weight: <span class=\"type\">Double</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> gender: <span class=\"type\">String</span>?</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Dog</span> : <span class=\"title class_\">AnimalCommonProtocol</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">run</span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;dog run&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span>?</span><br><span class=\"line\">    <span class=\"keyword\">var</span> weight: <span class=\"type\">Double</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> type: <span class=\"type\">String</span>?</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n"},{"title":"02. Performance Comparison between Structure and Class","date":"2023-03-02T19:43:59.000Z","_content":"\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nAs we all know that, Since struct instances are allocated on stack, and class instances are allocated on heap, structs can sometimes be drastically faster.\nSo there is an example here can prove that.\n\nConsider the following example, which demonstrates 2 strategies of wrapping Int data type using struct and class. Using 10 repeated values are to better reflect real world, where you have multiple fields.\n```Swift\n// 1 field \nclass IntClass {\n    let value: Int\n    init(_ val: Int) { self.value = val }\n}\n\nstruct IntStruct {\n    let value: Int\n    init(_ val: Int) { self.value = val }\n}\n\nfunc + (x: IntClass, y: IntClass) -> IntClass {\n    return IntClass(x.value + y.value)\n}\n\nfunc + (x: IntStruct, y: IntStruct) -> IntStruct {\n    return IntStruct(x.value + y.value)\n}\n// 10 fields\nclass Int10Class {\n    let value1, value2, value3, value4, value5, value6, value7, value8, value9, value10: Int\n    \n    init(_ val: Int) {\n        self.value1 = val\n        self.value2 = val\n        self.value3 = val\n        self.value4 = val\n        self.value5 = val\n        self.value6 = val\n        self.value7 = val\n        self.value8 = val\n        self.value9 = val\n        self.value10 = val\n    }\n}\n\nstruct Int10Struct {\n    let value1, value2, value3, value4, value5, value6, value7, value8, value9, value10: Int\n    \n    init(_ val: Int) {\n        self.value1 = val\n        self.value2 = val\n        self.value3 = val\n        self.value4 = val\n        self.value5 = val\n        self.value6 = val\n        self.value7 = val\n        self.value8 = val\n        self.value9 = val\n        self.value10 = val\n    }\n}\n\nfunc + (x: Int10Struct, y: Int10Struct) -> Int10Struct {\n    return Int10Struct(x.value1 + y.value1)\n}\n\nfunc + (x: Int10Class, y: Int10Class) -> Int10Class {\n    return Int10Class(x.value1 + y.value1)\n}\n\n```\nPerformance is measured using:  \n<strong>Tests.swift</strong>\n```Swift\nclass Tests {\n    static func runTests() {\n        print(\"Running tests\")\n        \n        measure(\"class (1 field)\") {\n            var x = IntClass(0)\n            for _ in 1...10000000 {\n                x = x + IntClass(1)\n            }\n        }\n        \n        measure(\"struct (1 field)\") {\n            var x = IntStruct(0)\n            for _ in 1...10000000 {\n                x = x + IntStruct(1)\n            }\n        }\n        \n        measure(\"class (10 fields)\") {\n            var x = Int10Class(0)\n            for _ in 1...10000000 {\n                x = x + Int10Class(1)\n            }\n        }\n        \n        measure(\"struct (10 fields)\") {\n            var x = Int10Struct(0)\n            for _ in 1...10000000 {\n                x = x + Int10Struct(1)\n            }\n        }\n    }\n    \n    static private func measure(_ name: String, block: @escaping () -> ()) {\n        print()\n        print(\"\\(name)\")\n        let t0 = CACurrentMediaTime()\n        \n        block()\n        \n        let dt = CACurrentMediaTime() - t0\n        print(\"\\(dt)\")\n    }\n}\n```\nWe can find somewhere in our project and just run the following code:\n```Swift\nTests.runTests()\n```\nOne of my running results is as follows:\n```Swift\nclass (1 field)\n6.262335019011516\n\nstruct (1 field)\n3.954203129003872\n\nclass (10 fields)\n6.161917756006005\n\nstruct (10 fields)\n4.097320644999854\n```\nWe can find that 'struct' type is more faster than 'class' type.\n\n#### <font size=3 color=gray>*Reference*</font>\n[1] [Why Choose Struct Over Class?](https://stackoverflow.com/questions/24232799/why-choose-struct-over-class?rq=1)\n\n","source":"_posts/Swift/02. Structs/02. Performance Comparison Between Structure and Class.md","raw":"---\ntitle: 02. Performance Comparison between Structure and Class\ndate: 2023-03-2 20:43:59\ncategories: \n- [Swift, 02. Structs]\ntags:\n- struct\n- performance\n---\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nAs we all know that, Since struct instances are allocated on stack, and class instances are allocated on heap, structs can sometimes be drastically faster.\nSo there is an example here can prove that.\n\nConsider the following example, which demonstrates 2 strategies of wrapping Int data type using struct and class. Using 10 repeated values are to better reflect real world, where you have multiple fields.\n```Swift\n// 1 field \nclass IntClass {\n    let value: Int\n    init(_ val: Int) { self.value = val }\n}\n\nstruct IntStruct {\n    let value: Int\n    init(_ val: Int) { self.value = val }\n}\n\nfunc + (x: IntClass, y: IntClass) -> IntClass {\n    return IntClass(x.value + y.value)\n}\n\nfunc + (x: IntStruct, y: IntStruct) -> IntStruct {\n    return IntStruct(x.value + y.value)\n}\n// 10 fields\nclass Int10Class {\n    let value1, value2, value3, value4, value5, value6, value7, value8, value9, value10: Int\n    \n    init(_ val: Int) {\n        self.value1 = val\n        self.value2 = val\n        self.value3 = val\n        self.value4 = val\n        self.value5 = val\n        self.value6 = val\n        self.value7 = val\n        self.value8 = val\n        self.value9 = val\n        self.value10 = val\n    }\n}\n\nstruct Int10Struct {\n    let value1, value2, value3, value4, value5, value6, value7, value8, value9, value10: Int\n    \n    init(_ val: Int) {\n        self.value1 = val\n        self.value2 = val\n        self.value3 = val\n        self.value4 = val\n        self.value5 = val\n        self.value6 = val\n        self.value7 = val\n        self.value8 = val\n        self.value9 = val\n        self.value10 = val\n    }\n}\n\nfunc + (x: Int10Struct, y: Int10Struct) -> Int10Struct {\n    return Int10Struct(x.value1 + y.value1)\n}\n\nfunc + (x: Int10Class, y: Int10Class) -> Int10Class {\n    return Int10Class(x.value1 + y.value1)\n}\n\n```\nPerformance is measured using:  \n<strong>Tests.swift</strong>\n```Swift\nclass Tests {\n    static func runTests() {\n        print(\"Running tests\")\n        \n        measure(\"class (1 field)\") {\n            var x = IntClass(0)\n            for _ in 1...10000000 {\n                x = x + IntClass(1)\n            }\n        }\n        \n        measure(\"struct (1 field)\") {\n            var x = IntStruct(0)\n            for _ in 1...10000000 {\n                x = x + IntStruct(1)\n            }\n        }\n        \n        measure(\"class (10 fields)\") {\n            var x = Int10Class(0)\n            for _ in 1...10000000 {\n                x = x + Int10Class(1)\n            }\n        }\n        \n        measure(\"struct (10 fields)\") {\n            var x = Int10Struct(0)\n            for _ in 1...10000000 {\n                x = x + Int10Struct(1)\n            }\n        }\n    }\n    \n    static private func measure(_ name: String, block: @escaping () -> ()) {\n        print()\n        print(\"\\(name)\")\n        let t0 = CACurrentMediaTime()\n        \n        block()\n        \n        let dt = CACurrentMediaTime() - t0\n        print(\"\\(dt)\")\n    }\n}\n```\nWe can find somewhere in our project and just run the following code:\n```Swift\nTests.runTests()\n```\nOne of my running results is as follows:\n```Swift\nclass (1 field)\n6.262335019011516\n\nstruct (1 field)\n3.954203129003872\n\nclass (10 fields)\n6.161917756006005\n\nstruct (10 fields)\n4.097320644999854\n```\nWe can find that 'struct' type is more faster than 'class' type.\n\n#### <font size=3 color=gray>*Reference*</font>\n[1] [Why Choose Struct Over Class?](https://stackoverflow.com/questions/24232799/why-choose-struct-over-class?rq=1)\n\n","slug":"Swift/02. Structs/02. Performance Comparison Between Structure and Class","published":1,"updated":"2023-08-18T10:48:18.914Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clm7w97ri001fkb0m83agdj79","content":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>As we all know that, Since struct instances are allocated on stack, and class instances are allocated on heap, structs can sometimes be drastically faster.<br>So there is an example here can prove that.</p>\n<p>Consider the following example, which demonstrates 2 strategies of wrapping Int data type using struct and class. Using 10 repeated values are to better reflect real world, where you have multiple fields.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1 field </span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">IntClass</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> value: <span class=\"type\">Int</span></span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"keyword\">_</span> <span class=\"params\">val</span>: <span class=\"type\">Int</span>) &#123; <span class=\"keyword\">self</span>.value <span class=\"operator\">=</span> val &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">IntStruct</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> value: <span class=\"type\">Int</span></span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"keyword\">_</span> <span class=\"params\">val</span>: <span class=\"type\">Int</span>) &#123; <span class=\"keyword\">self</span>.value <span class=\"operator\">=</span> val &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">+</span> (<span class=\"params\">x</span>: <span class=\"type\">IntClass</span>, <span class=\"params\">y</span>: <span class=\"type\">IntClass</span>) -&gt; <span class=\"type\">IntClass</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">IntClass</span>(x.value <span class=\"operator\">+</span> y.value)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">+</span> (<span class=\"params\">x</span>: <span class=\"type\">IntStruct</span>, <span class=\"params\">y</span>: <span class=\"type\">IntStruct</span>) -&gt; <span class=\"type\">IntStruct</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">IntStruct</span>(x.value <span class=\"operator\">+</span> y.value)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 10 fields</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Int10Class</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> value1, value2, value3, value4, value5, value6, value7, value8, value9, value10: <span class=\"type\">Int</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"keyword\">_</span> <span class=\"params\">val</span>: <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value1 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value2 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value3 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value4 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value5 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value6 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value7 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value8 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value9 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value10 <span class=\"operator\">=</span> val</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Int10Struct</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> value1, value2, value3, value4, value5, value6, value7, value8, value9, value10: <span class=\"type\">Int</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"keyword\">_</span> <span class=\"params\">val</span>: <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value1 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value2 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value3 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value4 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value5 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value6 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value7 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value8 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value9 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value10 <span class=\"operator\">=</span> val</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">+</span> (<span class=\"params\">x</span>: <span class=\"type\">Int10Struct</span>, <span class=\"params\">y</span>: <span class=\"type\">Int10Struct</span>) -&gt; <span class=\"type\">Int10Struct</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Int10Struct</span>(x.value1 <span class=\"operator\">+</span> y.value1)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">+</span> (<span class=\"params\">x</span>: <span class=\"type\">Int10Class</span>, <span class=\"params\">y</span>: <span class=\"type\">Int10Class</span>) -&gt; <span class=\"type\">Int10Class</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Int10Class</span>(x.value1 <span class=\"operator\">+</span> y.value1)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>Performance is measured using:<br><strong>Tests.swift</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Tests</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">func</span> <span class=\"title function_\">runTests</span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Running tests&quot;</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        measure(<span class=\"string\">&quot;class (1 field)&quot;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> x <span class=\"operator\">=</span> <span class=\"type\">IntClass</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> <span class=\"keyword\">_</span> <span class=\"keyword\">in</span> <span class=\"number\">1</span><span class=\"operator\">...</span><span class=\"number\">10000000</span> &#123;</span><br><span class=\"line\">                x <span class=\"operator\">=</span> x <span class=\"operator\">+</span> <span class=\"type\">IntClass</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        measure(<span class=\"string\">&quot;struct (1 field)&quot;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> x <span class=\"operator\">=</span> <span class=\"type\">IntStruct</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> <span class=\"keyword\">_</span> <span class=\"keyword\">in</span> <span class=\"number\">1</span><span class=\"operator\">...</span><span class=\"number\">10000000</span> &#123;</span><br><span class=\"line\">                x <span class=\"operator\">=</span> x <span class=\"operator\">+</span> <span class=\"type\">IntStruct</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        measure(<span class=\"string\">&quot;class (10 fields)&quot;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> x <span class=\"operator\">=</span> <span class=\"type\">Int10Class</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> <span class=\"keyword\">_</span> <span class=\"keyword\">in</span> <span class=\"number\">1</span><span class=\"operator\">...</span><span class=\"number\">10000000</span> &#123;</span><br><span class=\"line\">                x <span class=\"operator\">=</span> x <span class=\"operator\">+</span> <span class=\"type\">Int10Class</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        measure(<span class=\"string\">&quot;struct (10 fields)&quot;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> x <span class=\"operator\">=</span> <span class=\"type\">Int10Struct</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> <span class=\"keyword\">_</span> <span class=\"keyword\">in</span> <span class=\"number\">1</span><span class=\"operator\">...</span><span class=\"number\">10000000</span> &#123;</span><br><span class=\"line\">                x <span class=\"operator\">=</span> x <span class=\"operator\">+</span> <span class=\"type\">Int10Struct</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">private</span> <span class=\"keyword\">func</span> <span class=\"title function_\">measure</span>(<span class=\"keyword\">_</span> <span class=\"params\">name</span>: <span class=\"type\">String</span>, <span class=\"params\">block</span>: <span class=\"keyword\">@escaping</span> () -&gt; ()) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;<span class=\"subst\">\\(name)</span>&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> t0 <span class=\"operator\">=</span> <span class=\"type\">CACurrentMediaTime</span>()</span><br><span class=\"line\">        </span><br><span class=\"line\">        block()</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">let</span> dt <span class=\"operator\">=</span> <span class=\"type\">CACurrentMediaTime</span>() <span class=\"operator\">-</span> t0</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;<span class=\"subst\">\\(dt)</span>&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>We can find somewhere in our project and just run the following code:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Tests</span>.runTests()</span><br></pre></td></tr></table></figure>\n<p>One of my running results is as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> (1 <span class=\"title class_\">field</span>)</span><br><span class=\"line\">6.262335019011516</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">struct</span> (1 <span class=\"title class_\">field</span>)</span><br><span class=\"line\">3.954203129003872</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">class</span> (10 <span class=\"title class_\">fields</span>)</span><br><span class=\"line\">6.161917756006005</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">struct</span> (10 <span class=\"title class_\">fields</span>)</span><br><span class=\"line\">4.097320644999854</span><br></pre></td></tr></table></figure>\n<p>We can find that ‘struct’ type is more faster than ‘class’ type.</p>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://stackoverflow.com/questions/24232799/why-choose-struct-over-class?rq=1\">Why Choose Struct Over Class?</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>As we all know that, Since struct instances are allocated on stack, and class instances are allocated on heap, structs can sometimes be drastically faster.<br>So there is an example here can prove that.</p>\n<p>Consider the following example, which demonstrates 2 strategies of wrapping Int data type using struct and class. Using 10 repeated values are to better reflect real world, where you have multiple fields.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1 field </span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">IntClass</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> value: <span class=\"type\">Int</span></span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"keyword\">_</span> <span class=\"params\">val</span>: <span class=\"type\">Int</span>) &#123; <span class=\"keyword\">self</span>.value <span class=\"operator\">=</span> val &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">IntStruct</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> value: <span class=\"type\">Int</span></span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"keyword\">_</span> <span class=\"params\">val</span>: <span class=\"type\">Int</span>) &#123; <span class=\"keyword\">self</span>.value <span class=\"operator\">=</span> val &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">+</span> (<span class=\"params\">x</span>: <span class=\"type\">IntClass</span>, <span class=\"params\">y</span>: <span class=\"type\">IntClass</span>) -&gt; <span class=\"type\">IntClass</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">IntClass</span>(x.value <span class=\"operator\">+</span> y.value)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">+</span> (<span class=\"params\">x</span>: <span class=\"type\">IntStruct</span>, <span class=\"params\">y</span>: <span class=\"type\">IntStruct</span>) -&gt; <span class=\"type\">IntStruct</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">IntStruct</span>(x.value <span class=\"operator\">+</span> y.value)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 10 fields</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Int10Class</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> value1, value2, value3, value4, value5, value6, value7, value8, value9, value10: <span class=\"type\">Int</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"keyword\">_</span> <span class=\"params\">val</span>: <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value1 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value2 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value3 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value4 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value5 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value6 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value7 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value8 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value9 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value10 <span class=\"operator\">=</span> val</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Int10Struct</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> value1, value2, value3, value4, value5, value6, value7, value8, value9, value10: <span class=\"type\">Int</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"keyword\">_</span> <span class=\"params\">val</span>: <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value1 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value2 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value3 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value4 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value5 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value6 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value7 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value8 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value9 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value10 <span class=\"operator\">=</span> val</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">+</span> (<span class=\"params\">x</span>: <span class=\"type\">Int10Struct</span>, <span class=\"params\">y</span>: <span class=\"type\">Int10Struct</span>) -&gt; <span class=\"type\">Int10Struct</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Int10Struct</span>(x.value1 <span class=\"operator\">+</span> y.value1)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">+</span> (<span class=\"params\">x</span>: <span class=\"type\">Int10Class</span>, <span class=\"params\">y</span>: <span class=\"type\">Int10Class</span>) -&gt; <span class=\"type\">Int10Class</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Int10Class</span>(x.value1 <span class=\"operator\">+</span> y.value1)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>Performance is measured using:<br><strong>Tests.swift</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Tests</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">func</span> <span class=\"title function_\">runTests</span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Running tests&quot;</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        measure(<span class=\"string\">&quot;class (1 field)&quot;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> x <span class=\"operator\">=</span> <span class=\"type\">IntClass</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> <span class=\"keyword\">_</span> <span class=\"keyword\">in</span> <span class=\"number\">1</span><span class=\"operator\">...</span><span class=\"number\">10000000</span> &#123;</span><br><span class=\"line\">                x <span class=\"operator\">=</span> x <span class=\"operator\">+</span> <span class=\"type\">IntClass</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        measure(<span class=\"string\">&quot;struct (1 field)&quot;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> x <span class=\"operator\">=</span> <span class=\"type\">IntStruct</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> <span class=\"keyword\">_</span> <span class=\"keyword\">in</span> <span class=\"number\">1</span><span class=\"operator\">...</span><span class=\"number\">10000000</span> &#123;</span><br><span class=\"line\">                x <span class=\"operator\">=</span> x <span class=\"operator\">+</span> <span class=\"type\">IntStruct</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        measure(<span class=\"string\">&quot;class (10 fields)&quot;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> x <span class=\"operator\">=</span> <span class=\"type\">Int10Class</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> <span class=\"keyword\">_</span> <span class=\"keyword\">in</span> <span class=\"number\">1</span><span class=\"operator\">...</span><span class=\"number\">10000000</span> &#123;</span><br><span class=\"line\">                x <span class=\"operator\">=</span> x <span class=\"operator\">+</span> <span class=\"type\">Int10Class</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        measure(<span class=\"string\">&quot;struct (10 fields)&quot;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> x <span class=\"operator\">=</span> <span class=\"type\">Int10Struct</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> <span class=\"keyword\">_</span> <span class=\"keyword\">in</span> <span class=\"number\">1</span><span class=\"operator\">...</span><span class=\"number\">10000000</span> &#123;</span><br><span class=\"line\">                x <span class=\"operator\">=</span> x <span class=\"operator\">+</span> <span class=\"type\">Int10Struct</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">private</span> <span class=\"keyword\">func</span> <span class=\"title function_\">measure</span>(<span class=\"keyword\">_</span> <span class=\"params\">name</span>: <span class=\"type\">String</span>, <span class=\"params\">block</span>: <span class=\"keyword\">@escaping</span> () -&gt; ()) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;<span class=\"subst\">\\(name)</span>&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> t0 <span class=\"operator\">=</span> <span class=\"type\">CACurrentMediaTime</span>()</span><br><span class=\"line\">        </span><br><span class=\"line\">        block()</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">let</span> dt <span class=\"operator\">=</span> <span class=\"type\">CACurrentMediaTime</span>() <span class=\"operator\">-</span> t0</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;<span class=\"subst\">\\(dt)</span>&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>We can find somewhere in our project and just run the following code:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Tests</span>.runTests()</span><br></pre></td></tr></table></figure>\n<p>One of my running results is as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> (1 <span class=\"title class_\">field</span>)</span><br><span class=\"line\">6.262335019011516</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">struct</span> (1 <span class=\"title class_\">field</span>)</span><br><span class=\"line\">3.954203129003872</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">class</span> (10 <span class=\"title class_\">fields</span>)</span><br><span class=\"line\">6.161917756006005</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">struct</span> (10 <span class=\"title class_\">fields</span>)</span><br><span class=\"line\">4.097320644999854</span><br></pre></td></tr></table></figure>\n<p>We can find that ‘struct’ type is more faster than ‘class’ type.</p>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://stackoverflow.com/questions/24232799/why-choose-struct-over-class?rq=1\">Why Choose Struct Over Class?</a></p>\n"},{"title":"03. Property Defaults and Initialization Constructors","date":"2023-03-02T19:45:59.000Z","_content":"\n<font color=gray size=2>*It will take about 1 minutes to finish reading this article.*</font>\n\nWe often use the following methods to initialize in OC.\n```Swift \n// OCDemoModelBuilder.h\n@interface OCDemoModelBuilder : NSObject\n@property (nonatomic, copy, nonnull) NSString *a;\n@property (nonatomic, copy, nonnull) NSString *b;\n@property (nonatomic, copy, nonnull) NSString *c;\n@property (nonatomic, copy, nonnull) NSString *d;\n@property (nonatomic, copy, nonnull) NSString *e;\n@end\n// OCDemoModelBuilder.m\n@implementation OCDemoModelBuilder\n\n- (instancetype)init {\n    if (self = [super init]) {\n        _a = @\"a\";\n        _b = @\"b\";\n        _c = @\"c\";\n        _d = @\"d\";\n        _e = @\"e\";\n    }\n    return self;\n}\n\n@end\n\n// OCDemoModel.h\n@interface OCDemoModel : NSObject\n@property (nonatomic, readonly, nonnull) NSString *a;\n@property (nonatomic, readonly, nonnull) NSString *b;\n@property (nonatomic, readonly, nonnull) NSString *c;\n@property (nonatomic, readonly, nonnull) NSString *d;\n@property (nonatomic, readonly, nonnull) NSString *e;\n\n- (instancetype)initWithBuilder:(void(^)(OCDemoModelBuilder *builder))builderBlock;\n@end\n\n// OCDemoModel.m\n@implementation OCDemoModel\n- (instancetype)initWithBuilder:(void(^)(OCDemoModelBuilder *builder))builderBlock {\n    if (self = [super init]) {\n        OCDemoModelBuilder *builder = [[OCDemoModelBuilder alloc] init];\n        if (builderBlock) {\n            builderBlock(builder);\n        }\n        _a = builder.a;\n        _b = builder.b;\n        _c = builder.c;\n        _d = builder.d;\n        _e = builder.e;\n    }\n    return self;\n}\n\n@end\n\n// Usage\nOCDemoModel *ret = [[OCDemoModel alloc] initWithBuilder:^(OCDemoModelBuilder * _Nonnull builder) {\n    builder.b = @\"b1\";\n}];\n```\nHowever, Swift's Struct supports attribute default values and initialization constructors, which greatly simplifies the process. The code is as follows:\n\n```Swift\nstruct SwiftDemoModel {\n    var a = \"a\"\n    var b = \"b\"\n    var c = \"c\"\n    var d = \"d\"\n    var e = \"e\"\n}\n\n// Usage\nlet ret = SwiftDemoModel(b: \"b1\")\n// ret = a,b1,c,d,e\n```\n\n\n\n\n\n\n","source":"_posts/Swift/02. Structs/03. A Case of Initialization Constructor.md","raw":"---\ntitle: 03. Property Defaults and Initialization Constructors\ndate: 2023-03-2 20:45:59\ncategories: \n- [Swift, 02. Structs]\ntags:\n- struct\n- initialization\n- constructors\n---\n\n<font color=gray size=2>*It will take about 1 minutes to finish reading this article.*</font>\n\nWe often use the following methods to initialize in OC.\n```Swift \n// OCDemoModelBuilder.h\n@interface OCDemoModelBuilder : NSObject\n@property (nonatomic, copy, nonnull) NSString *a;\n@property (nonatomic, copy, nonnull) NSString *b;\n@property (nonatomic, copy, nonnull) NSString *c;\n@property (nonatomic, copy, nonnull) NSString *d;\n@property (nonatomic, copy, nonnull) NSString *e;\n@end\n// OCDemoModelBuilder.m\n@implementation OCDemoModelBuilder\n\n- (instancetype)init {\n    if (self = [super init]) {\n        _a = @\"a\";\n        _b = @\"b\";\n        _c = @\"c\";\n        _d = @\"d\";\n        _e = @\"e\";\n    }\n    return self;\n}\n\n@end\n\n// OCDemoModel.h\n@interface OCDemoModel : NSObject\n@property (nonatomic, readonly, nonnull) NSString *a;\n@property (nonatomic, readonly, nonnull) NSString *b;\n@property (nonatomic, readonly, nonnull) NSString *c;\n@property (nonatomic, readonly, nonnull) NSString *d;\n@property (nonatomic, readonly, nonnull) NSString *e;\n\n- (instancetype)initWithBuilder:(void(^)(OCDemoModelBuilder *builder))builderBlock;\n@end\n\n// OCDemoModel.m\n@implementation OCDemoModel\n- (instancetype)initWithBuilder:(void(^)(OCDemoModelBuilder *builder))builderBlock {\n    if (self = [super init]) {\n        OCDemoModelBuilder *builder = [[OCDemoModelBuilder alloc] init];\n        if (builderBlock) {\n            builderBlock(builder);\n        }\n        _a = builder.a;\n        _b = builder.b;\n        _c = builder.c;\n        _d = builder.d;\n        _e = builder.e;\n    }\n    return self;\n}\n\n@end\n\n// Usage\nOCDemoModel *ret = [[OCDemoModel alloc] initWithBuilder:^(OCDemoModelBuilder * _Nonnull builder) {\n    builder.b = @\"b1\";\n}];\n```\nHowever, Swift's Struct supports attribute default values and initialization constructors, which greatly simplifies the process. The code is as follows:\n\n```Swift\nstruct SwiftDemoModel {\n    var a = \"a\"\n    var b = \"b\"\n    var c = \"c\"\n    var d = \"d\"\n    var e = \"e\"\n}\n\n// Usage\nlet ret = SwiftDemoModel(b: \"b1\")\n// ret = a,b1,c,d,e\n```\n\n\n\n\n\n\n","slug":"Swift/02. Structs/03. A Case of Initialization Constructor","published":1,"updated":"2023-08-18T10:48:24.850Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clm7w97rj001ikb0m98zr6ype","content":"<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p>\n<p>We often use the following methods to initialize in OC.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// OCDemoModelBuilder.h</span></span><br><span class=\"line\"><span class=\"meta\">@interface</span> <span class=\"type\">OCDemoModelBuilder</span> : <span class=\"type\">NSObject</span></span><br><span class=\"line\"><span class=\"meta\">@property</span> (nonatomic, copy, nonnull) <span class=\"type\">NSString</span> <span class=\"operator\">*</span>a;</span><br><span class=\"line\"><span class=\"meta\">@property</span> (nonatomic, copy, nonnull) <span class=\"type\">NSString</span> <span class=\"operator\">*</span>b;</span><br><span class=\"line\"><span class=\"meta\">@property</span> (nonatomic, copy, nonnull) <span class=\"type\">NSString</span> <span class=\"operator\">*</span>c;</span><br><span class=\"line\"><span class=\"meta\">@property</span> (nonatomic, copy, nonnull) <span class=\"type\">NSString</span> <span class=\"operator\">*</span>d;</span><br><span class=\"line\"><span class=\"meta\">@property</span> (nonatomic, copy, nonnull) <span class=\"type\">NSString</span> <span class=\"operator\">*</span>e;</span><br><span class=\"line\"><span class=\"meta\">@end</span></span><br><span class=\"line\"><span class=\"comment\">// OCDemoModelBuilder.m</span></span><br><span class=\"line\"><span class=\"meta\">@implementation</span> <span class=\"type\">OCDemoModelBuilder</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"operator\">-</span> (instancetype)<span class=\"keyword\">init</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span> <span class=\"operator\">=</span> [<span class=\"keyword\">super</span> <span class=\"keyword\">init</span>]) &#123;</span><br><span class=\"line\">        _a <span class=\"operator\">=</span> @<span class=\"string\">&quot;a&quot;</span>;</span><br><span class=\"line\">        _b <span class=\"operator\">=</span> @<span class=\"string\">&quot;b&quot;</span>;</span><br><span class=\"line\">        _c <span class=\"operator\">=</span> @<span class=\"string\">&quot;c&quot;</span>;</span><br><span class=\"line\">        _d <span class=\"operator\">=</span> @<span class=\"string\">&quot;d&quot;</span>;</span><br><span class=\"line\">        _e <span class=\"operator\">=</span> @<span class=\"string\">&quot;e&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// OCDemoModel.h</span></span><br><span class=\"line\"><span class=\"meta\">@interface</span> <span class=\"type\">OCDemoModel</span> : <span class=\"type\">NSObject</span></span><br><span class=\"line\"><span class=\"meta\">@property</span> (nonatomic, readonly, nonnull) <span class=\"type\">NSString</span> <span class=\"operator\">*</span>a;</span><br><span class=\"line\"><span class=\"meta\">@property</span> (nonatomic, readonly, nonnull) <span class=\"type\">NSString</span> <span class=\"operator\">*</span>b;</span><br><span class=\"line\"><span class=\"meta\">@property</span> (nonatomic, readonly, nonnull) <span class=\"type\">NSString</span> <span class=\"operator\">*</span>c;</span><br><span class=\"line\"><span class=\"meta\">@property</span> (nonatomic, readonly, nonnull) <span class=\"type\">NSString</span> <span class=\"operator\">*</span>d;</span><br><span class=\"line\"><span class=\"meta\">@property</span> (nonatomic, readonly, nonnull) <span class=\"type\">NSString</span> <span class=\"operator\">*</span>e;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"operator\">-</span> (instancetype)initWithBuilder:(void(<span class=\"operator\">^</span>)(<span class=\"type\">OCDemoModelBuilder</span> <span class=\"operator\">*</span>builder))builderBlock;</span><br><span class=\"line\"><span class=\"meta\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// OCDemoModel.m</span></span><br><span class=\"line\"><span class=\"meta\">@implementation</span> <span class=\"type\">OCDemoModel</span></span><br><span class=\"line\"><span class=\"operator\">-</span> (instancetype)initWithBuilder:(void(<span class=\"operator\">^</span>)(<span class=\"type\">OCDemoModelBuilder</span> <span class=\"operator\">*</span>builder))builderBlock &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span> <span class=\"operator\">=</span> [<span class=\"keyword\">super</span> <span class=\"keyword\">init</span>]) &#123;</span><br><span class=\"line\">        <span class=\"type\">OCDemoModelBuilder</span> <span class=\"operator\">*</span>builder <span class=\"operator\">=</span> [[<span class=\"type\">OCDemoModelBuilder</span> alloc] <span class=\"keyword\">init</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (builderBlock) &#123;</span><br><span class=\"line\">            builderBlock(builder);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        _a <span class=\"operator\">=</span> builder.a;</span><br><span class=\"line\">        _b <span class=\"operator\">=</span> builder.b;</span><br><span class=\"line\">        _c <span class=\"operator\">=</span> builder.c;</span><br><span class=\"line\">        _d <span class=\"operator\">=</span> builder.d;</span><br><span class=\"line\">        _e <span class=\"operator\">=</span> builder.e;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Usage</span></span><br><span class=\"line\"><span class=\"type\">OCDemoModel</span> <span class=\"operator\">*</span>ret <span class=\"operator\">=</span> [[<span class=\"type\">OCDemoModel</span> alloc] initWithBuilder:<span class=\"operator\">^</span>(<span class=\"type\">OCDemoModelBuilder</span> <span class=\"operator\">*</span> _Nonnull builder) &#123;</span><br><span class=\"line\">    builder.b <span class=\"operator\">=</span> @<span class=\"string\">&quot;b1&quot;</span>;</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n<p>However, Swift’s Struct supports attribute default values and initialization constructors, which greatly simplifies the process. The code is as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">SwiftDemoModel</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a <span class=\"operator\">=</span> <span class=\"string\">&quot;a&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> b <span class=\"operator\">=</span> <span class=\"string\">&quot;b&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> c <span class=\"operator\">=</span> <span class=\"string\">&quot;c&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> d <span class=\"operator\">=</span> <span class=\"string\">&quot;d&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> e <span class=\"operator\">=</span> <span class=\"string\">&quot;e&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Usage</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ret <span class=\"operator\">=</span> <span class=\"type\">SwiftDemoModel</span>(b: <span class=\"string\">&quot;b1&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">// ret = a,b1,c,d,e</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p>\n<p>We often use the following methods to initialize in OC.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// OCDemoModelBuilder.h</span></span><br><span class=\"line\"><span class=\"meta\">@interface</span> <span class=\"type\">OCDemoModelBuilder</span> : <span class=\"type\">NSObject</span></span><br><span class=\"line\"><span class=\"meta\">@property</span> (nonatomic, copy, nonnull) <span class=\"type\">NSString</span> <span class=\"operator\">*</span>a;</span><br><span class=\"line\"><span class=\"meta\">@property</span> (nonatomic, copy, nonnull) <span class=\"type\">NSString</span> <span class=\"operator\">*</span>b;</span><br><span class=\"line\"><span class=\"meta\">@property</span> (nonatomic, copy, nonnull) <span class=\"type\">NSString</span> <span class=\"operator\">*</span>c;</span><br><span class=\"line\"><span class=\"meta\">@property</span> (nonatomic, copy, nonnull) <span class=\"type\">NSString</span> <span class=\"operator\">*</span>d;</span><br><span class=\"line\"><span class=\"meta\">@property</span> (nonatomic, copy, nonnull) <span class=\"type\">NSString</span> <span class=\"operator\">*</span>e;</span><br><span class=\"line\"><span class=\"meta\">@end</span></span><br><span class=\"line\"><span class=\"comment\">// OCDemoModelBuilder.m</span></span><br><span class=\"line\"><span class=\"meta\">@implementation</span> <span class=\"type\">OCDemoModelBuilder</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"operator\">-</span> (instancetype)<span class=\"keyword\">init</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span> <span class=\"operator\">=</span> [<span class=\"keyword\">super</span> <span class=\"keyword\">init</span>]) &#123;</span><br><span class=\"line\">        _a <span class=\"operator\">=</span> @<span class=\"string\">&quot;a&quot;</span>;</span><br><span class=\"line\">        _b <span class=\"operator\">=</span> @<span class=\"string\">&quot;b&quot;</span>;</span><br><span class=\"line\">        _c <span class=\"operator\">=</span> @<span class=\"string\">&quot;c&quot;</span>;</span><br><span class=\"line\">        _d <span class=\"operator\">=</span> @<span class=\"string\">&quot;d&quot;</span>;</span><br><span class=\"line\">        _e <span class=\"operator\">=</span> @<span class=\"string\">&quot;e&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// OCDemoModel.h</span></span><br><span class=\"line\"><span class=\"meta\">@interface</span> <span class=\"type\">OCDemoModel</span> : <span class=\"type\">NSObject</span></span><br><span class=\"line\"><span class=\"meta\">@property</span> (nonatomic, readonly, nonnull) <span class=\"type\">NSString</span> <span class=\"operator\">*</span>a;</span><br><span class=\"line\"><span class=\"meta\">@property</span> (nonatomic, readonly, nonnull) <span class=\"type\">NSString</span> <span class=\"operator\">*</span>b;</span><br><span class=\"line\"><span class=\"meta\">@property</span> (nonatomic, readonly, nonnull) <span class=\"type\">NSString</span> <span class=\"operator\">*</span>c;</span><br><span class=\"line\"><span class=\"meta\">@property</span> (nonatomic, readonly, nonnull) <span class=\"type\">NSString</span> <span class=\"operator\">*</span>d;</span><br><span class=\"line\"><span class=\"meta\">@property</span> (nonatomic, readonly, nonnull) <span class=\"type\">NSString</span> <span class=\"operator\">*</span>e;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"operator\">-</span> (instancetype)initWithBuilder:(void(<span class=\"operator\">^</span>)(<span class=\"type\">OCDemoModelBuilder</span> <span class=\"operator\">*</span>builder))builderBlock;</span><br><span class=\"line\"><span class=\"meta\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// OCDemoModel.m</span></span><br><span class=\"line\"><span class=\"meta\">@implementation</span> <span class=\"type\">OCDemoModel</span></span><br><span class=\"line\"><span class=\"operator\">-</span> (instancetype)initWithBuilder:(void(<span class=\"operator\">^</span>)(<span class=\"type\">OCDemoModelBuilder</span> <span class=\"operator\">*</span>builder))builderBlock &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span> <span class=\"operator\">=</span> [<span class=\"keyword\">super</span> <span class=\"keyword\">init</span>]) &#123;</span><br><span class=\"line\">        <span class=\"type\">OCDemoModelBuilder</span> <span class=\"operator\">*</span>builder <span class=\"operator\">=</span> [[<span class=\"type\">OCDemoModelBuilder</span> alloc] <span class=\"keyword\">init</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (builderBlock) &#123;</span><br><span class=\"line\">            builderBlock(builder);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        _a <span class=\"operator\">=</span> builder.a;</span><br><span class=\"line\">        _b <span class=\"operator\">=</span> builder.b;</span><br><span class=\"line\">        _c <span class=\"operator\">=</span> builder.c;</span><br><span class=\"line\">        _d <span class=\"operator\">=</span> builder.d;</span><br><span class=\"line\">        _e <span class=\"operator\">=</span> builder.e;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Usage</span></span><br><span class=\"line\"><span class=\"type\">OCDemoModel</span> <span class=\"operator\">*</span>ret <span class=\"operator\">=</span> [[<span class=\"type\">OCDemoModel</span> alloc] initWithBuilder:<span class=\"operator\">^</span>(<span class=\"type\">OCDemoModelBuilder</span> <span class=\"operator\">*</span> _Nonnull builder) &#123;</span><br><span class=\"line\">    builder.b <span class=\"operator\">=</span> @<span class=\"string\">&quot;b1&quot;</span>;</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n<p>However, Swift’s Struct supports attribute default values and initialization constructors, which greatly simplifies the process. The code is as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">SwiftDemoModel</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a <span class=\"operator\">=</span> <span class=\"string\">&quot;a&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> b <span class=\"operator\">=</span> <span class=\"string\">&quot;b&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> c <span class=\"operator\">=</span> <span class=\"string\">&quot;c&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> d <span class=\"operator\">=</span> <span class=\"string\">&quot;d&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> e <span class=\"operator\">=</span> <span class=\"string\">&quot;e&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Usage</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ret <span class=\"operator\">=</span> <span class=\"type\">SwiftDemoModel</span>(b: <span class=\"string\">&quot;b1&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">// ret = a,b1,c,d,e</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n"},{"title":"04. Why should we avoid using closures in structs?","date":"2023-03-02T19:46:59.000Z","_content":"\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nLook at the following example, it will have a surprise result.\n```Swift\nstruct Car {\n    var speed: Float = 0.0\n    var increaseSpeed: (() -> ())?\n}\nvar myCar = Car()\nmyCar.increaseSpeed = {\n    myCar.speed += 30 // The retain cycle occurs here. We cannot use [weak myCar] as myCar is a value type.\n}\nmyCar.increaseSpeed?()\nprint(\"My car's speed :\")\nprint(myCar.speed) // Prints 30\n\nvar myNewCar = myCar\nmyNewCar.increaseSpeed?()\nmyNewCar.increaseSpeed?()\nprint(\"My new car's speed :\")\nprint(myNewCar.speed) // Prints 30 still!\nprint(myCar.speed) // Prints 90 !!!\n```\nThe result is:\n```Swift\nMy car's speed :\n30.0\nMy new car's speed :\n30.0\nMy car's speed :\n90.0\n```\nBut why?  \nWell, the reason is, \"myNewCar\" is a partial copy of \"newCar.\" Since closures and their environments cannot be copied completely. The value of \"speed\" is copied, but the property \"increaseSpeed\" of \"myNewCar\" (myNewCar.increaseSpeed?()) holds a reference to the \"increaseSpeed\" of \"myCar\" with the \"speed\" of \"myCar\" in the captured environment. So, the \"increaseSpeed\" of \"myCar\" is invoked.   \nSo what do we do now?   \nThe straight forward solution is, avoid using closures in value types or we should change the struct to a class. If you have to use them, you should be very careful with it, or else it might lead to unexpected results. Regarding the retain cycle, the only way to break them is to set the variables \"myCar\" and \"myNewCar\" to nil manually. It doesn’t sound ideal, but there is no other way. \n\n#### <font size=3 color=gray>*Reference*</font>\n[1] [Why should we avoid using closures in Swift structs?](https://ohmyswift.com/blog/2020/01/10/why-should-we-avoid-using-closures-in-swift-structs/)  \n[2] [为什么要避免在结构体中使用闭包？](https://cloud.tencent.com/developer/article/1602230)   ","source":"_posts/Swift/02. Structs/04. Why should we avoid using closures in structs?.md","raw":"---\ntitle: 04. Why should we avoid using closures in structs?\ndate: 2023-03-2 20:46:59\ncategories: \n- [Swift, 02. Structs]\ntags:\n- struct\n- closures\n---\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nLook at the following example, it will have a surprise result.\n```Swift\nstruct Car {\n    var speed: Float = 0.0\n    var increaseSpeed: (() -> ())?\n}\nvar myCar = Car()\nmyCar.increaseSpeed = {\n    myCar.speed += 30 // The retain cycle occurs here. We cannot use [weak myCar] as myCar is a value type.\n}\nmyCar.increaseSpeed?()\nprint(\"My car's speed :\")\nprint(myCar.speed) // Prints 30\n\nvar myNewCar = myCar\nmyNewCar.increaseSpeed?()\nmyNewCar.increaseSpeed?()\nprint(\"My new car's speed :\")\nprint(myNewCar.speed) // Prints 30 still!\nprint(myCar.speed) // Prints 90 !!!\n```\nThe result is:\n```Swift\nMy car's speed :\n30.0\nMy new car's speed :\n30.0\nMy car's speed :\n90.0\n```\nBut why?  \nWell, the reason is, \"myNewCar\" is a partial copy of \"newCar.\" Since closures and their environments cannot be copied completely. The value of \"speed\" is copied, but the property \"increaseSpeed\" of \"myNewCar\" (myNewCar.increaseSpeed?()) holds a reference to the \"increaseSpeed\" of \"myCar\" with the \"speed\" of \"myCar\" in the captured environment. So, the \"increaseSpeed\" of \"myCar\" is invoked.   \nSo what do we do now?   \nThe straight forward solution is, avoid using closures in value types or we should change the struct to a class. If you have to use them, you should be very careful with it, or else it might lead to unexpected results. Regarding the retain cycle, the only way to break them is to set the variables \"myCar\" and \"myNewCar\" to nil manually. It doesn’t sound ideal, but there is no other way. \n\n#### <font size=3 color=gray>*Reference*</font>\n[1] [Why should we avoid using closures in Swift structs?](https://ohmyswift.com/blog/2020/01/10/why-should-we-avoid-using-closures-in-swift-structs/)  \n[2] [为什么要避免在结构体中使用闭包？](https://cloud.tencent.com/developer/article/1602230)   ","slug":"Swift/02. Structs/04. Why should we avoid using closures in structs?","published":1,"updated":"2023-08-18T10:48:29.105Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clm7w97rj001kkb0m04csedvn","content":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>Look at the following example, it will have a surprise result.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Car</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> speed: <span class=\"type\">Float</span> <span class=\"operator\">=</span> <span class=\"number\">0.0</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> increaseSpeed: (() -&gt; ())<span class=\"operator\">?</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> myCar <span class=\"operator\">=</span> <span class=\"type\">Car</span>()</span><br><span class=\"line\">myCar.increaseSpeed <span class=\"operator\">=</span> &#123;</span><br><span class=\"line\">    myCar.speed <span class=\"operator\">+=</span> <span class=\"number\">30</span> <span class=\"comment\">// The retain cycle occurs here. We cannot use [weak myCar] as myCar is a value type.</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">myCar.increaseSpeed<span class=\"operator\">?</span>()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;My car&#x27;s speed :&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(myCar.speed) <span class=\"comment\">// Prints 30</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> myNewCar <span class=\"operator\">=</span> myCar</span><br><span class=\"line\">myNewCar.increaseSpeed<span class=\"operator\">?</span>()</span><br><span class=\"line\">myNewCar.increaseSpeed<span class=\"operator\">?</span>()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;My new car&#x27;s speed :&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(myNewCar.speed) <span class=\"comment\">// Prints 30 still!</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(myCar.speed) <span class=\"comment\">// Prints 90 !!!</span></span><br></pre></td></tr></table></figure>\n<p>The result is:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">My</span> car&#x27;s speed :</span><br><span class=\"line\"><span class=\"number\">30.0</span></span><br><span class=\"line\"><span class=\"type\">My</span> new car&#x27;s speed :</span><br><span class=\"line\"><span class=\"number\">30.0</span></span><br><span class=\"line\"><span class=\"type\">My</span> car&#x27;s speed :</span><br><span class=\"line\"><span class=\"number\">90.0</span></span><br></pre></td></tr></table></figure>\n<p>But why?<br>Well, the reason is, “myNewCar” is a partial copy of “newCar.” Since closures and their environments cannot be copied completely. The value of “speed” is copied, but the property “increaseSpeed” of “myNewCar” (myNewCar.increaseSpeed?()) holds a reference to the “increaseSpeed” of “myCar” with the “speed” of “myCar” in the captured environment. So, the “increaseSpeed” of “myCar” is invoked.<br>So what do we do now?<br>The straight forward solution is, avoid using closures in value types or we should change the struct to a class. If you have to use them, you should be very careful with it, or else it might lead to unexpected results. Regarding the retain cycle, the only way to break them is to set the variables “myCar” and “myNewCar” to nil manually. It doesn’t sound ideal, but there is no other way. </p>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://ohmyswift.com/blog/2020/01/10/why-should-we-avoid-using-closures-in-swift-structs/\">Why should we avoid using closures in Swift structs?</a><br>[2] <a href=\"https://cloud.tencent.com/developer/article/1602230\">为什么要避免在结构体中使用闭包？</a>   </p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>Look at the following example, it will have a surprise result.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Car</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> speed: <span class=\"type\">Float</span> <span class=\"operator\">=</span> <span class=\"number\">0.0</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> increaseSpeed: (() -&gt; ())<span class=\"operator\">?</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> myCar <span class=\"operator\">=</span> <span class=\"type\">Car</span>()</span><br><span class=\"line\">myCar.increaseSpeed <span class=\"operator\">=</span> &#123;</span><br><span class=\"line\">    myCar.speed <span class=\"operator\">+=</span> <span class=\"number\">30</span> <span class=\"comment\">// The retain cycle occurs here. We cannot use [weak myCar] as myCar is a value type.</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">myCar.increaseSpeed<span class=\"operator\">?</span>()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;My car&#x27;s speed :&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(myCar.speed) <span class=\"comment\">// Prints 30</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> myNewCar <span class=\"operator\">=</span> myCar</span><br><span class=\"line\">myNewCar.increaseSpeed<span class=\"operator\">?</span>()</span><br><span class=\"line\">myNewCar.increaseSpeed<span class=\"operator\">?</span>()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;My new car&#x27;s speed :&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(myNewCar.speed) <span class=\"comment\">// Prints 30 still!</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(myCar.speed) <span class=\"comment\">// Prints 90 !!!</span></span><br></pre></td></tr></table></figure>\n<p>The result is:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">My</span> car&#x27;s speed :</span><br><span class=\"line\"><span class=\"number\">30.0</span></span><br><span class=\"line\"><span class=\"type\">My</span> new car&#x27;s speed :</span><br><span class=\"line\"><span class=\"number\">30.0</span></span><br><span class=\"line\"><span class=\"type\">My</span> car&#x27;s speed :</span><br><span class=\"line\"><span class=\"number\">90.0</span></span><br></pre></td></tr></table></figure>\n<p>But why?<br>Well, the reason is, “myNewCar” is a partial copy of “newCar.” Since closures and their environments cannot be copied completely. The value of “speed” is copied, but the property “increaseSpeed” of “myNewCar” (myNewCar.increaseSpeed?()) holds a reference to the “increaseSpeed” of “myCar” with the “speed” of “myCar” in the captured environment. So, the “increaseSpeed” of “myCar” is invoked.<br>So what do we do now?<br>The straight forward solution is, avoid using closures in value types or we should change the struct to a class. If you have to use them, you should be very careful with it, or else it might lead to unexpected results. Regarding the retain cycle, the only way to break them is to set the variables “myCar” and “myNewCar” to nil manually. It doesn’t sound ideal, but there is no other way. </p>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://ohmyswift.com/blog/2020/01/10/why-should-we-avoid-using-closures-in-swift-structs/\">Why should we avoid using closures in Swift structs?</a><br>[2] <a href=\"https://cloud.tencent.com/developer/article/1602230\">为什么要避免在结构体中使用闭包？</a>   </p>\n"},{"title":"00. Summary of Enumerations","date":"2023-03-03T19:00:00.000Z","_content":"\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\n#### <font size=3 color=#4169E1> 1. General </font>\n \nWe define an enumeration in Objective-C/C as follow:\n```Objective-C\ntypedef enum {\n    AFEncapsulationBoundaryPhase = 1,\n    AFHeaderPhase                = 2,\n    AFBodyPhase                  = 3,\n    AFFinalBoundaryPhase         = 4,\n} AFHTTPBodyPartReadPhase;\n```\nOr like this:\n```Objective-C\ntypedef NS_ENUM(NSInteger, RoleItemType) {\n    RoleItemLabelType = 0,  \n    RoleItemImageType = 1,   \n    RoleItemMixType = 2,     \n};\n```\nBut In Swift we need to define an enumeration like this:\n```Swift \nenum CompassPoint {\n    case north\n    case south\n    case east\n    case west\n}\n```\nUnlike in C/OC, enumeration in Swift is a completely different thing. It is somewhat similar to struct. It is very flexible and has a wide range of uses. Enumeration in Swift has the following characteristics:  \n> * It is of value type.\n> * It can conform to protocols to provide standard functionality.\n> * It can be extended to expand their functionality beyond their original implementation.\n> * It can also define initializers to provide an initial case value and define common functions and properties(computed properties).   \n> * It supports recursion.\n\nEnumerations in Swift are first-class types in their own right. They adopt many features traditionally supported only by classes.\n \n\n#### <font size=3 color=#4169E1> 2. Associated Values and Raw Values </font>\n\n<strong>**<font size=3 color=#F5F5F5>2.1 Associated Values</font>**  </strong>\n\nFirstly, Associated Values can have different member types. for example:\n```Swift\n enum {10,0.8,\"Hello\"}\n```\nSecondly, It always bases on Constant or variable. Thirdly, Associated Value will be set when you create a new constant or variable based on the enumeration member, and its value can be different each time you do so.\n```Swift\nenum Student{\n    case Name(String)\n    case Mark(Int,Int,Int)\n}\nvar studDetails = Student.Name(\"Runoob\")\nvar studMarks = Student.Mark(98,97,95)\nswitch studMarks {\ncase .Name(let studName):\n    print(\"Student Name: \\(studName)。\")\ncase .Mark(let Mark1, let Mark2, let Mark3):\n    print(\"Student Mark: \\(Mark1),\\(Mark2),\\(Mark3)。\")\n}\n```\n<strong>**<font size=3 color=#F5F5F5>2.2 Raw Values</font>**  </strong>   \nFirstly, Raw Values have the same member types. for example:\n```Swift\nenum {10,35,50}\n```\nIt is pre-populated values and fixed.\n```Swift \nenum ASCIIControlCharacter: Character {\n    case tab = \"\\t\"\n    case lineFeed = \"\\n\"\n    case carriageReturn = \"\\r\"\n}\n```\n> NOTE  \n> Raw values are not the same as associated values. Raw values are set to prepopulate values when you first define the enumeration in your code, like the three ASCII codes above. The raw value for a particular enumeration case is always the same. Associated values are set when you create a new constant or variable based on one of the enumeration’s cases, and can be different each time you do so.\n>\n\nUsually, An enumeration that has Declaration Type can be implicitly assigned and you do not need to write them all, for example:\n```Swift\nenum Month: Int {\n    case January = 1, February, March, April, May, June, July, August, September, October, November, December\n}\n\n```\n\n#### <font size=3 color=#4169E1> 3. Add methods and properties to enumerations </font>\n```Swift\nenum Device : Int {\n    case iPhone4s\n    case iPhone5\n    case iPhone6\n    case iPhone7\n    var introduced: Int {\n            switch self {\n            case .iPhone4s: return 2011\n            case .iPhone5: return 2012\n            case .iPhone6: return 2014\n            case .iPhone7: return 2016\n        }\n    }\n}\nlet device = Device.iPhone5\nprint(device.introduced)\n/*result:\n2012\n*/\n```\nWe try to extend this enumeration as follows:\n```Swift\nextension Device {\n    func detailedIntroduced()  {\n            switch self {\n            case .iPhone4s: print(\"published in 2011\")\n            case .iPhone5: print(\"published in 2012\")\n            case .iPhone6: print(\"published in 2014\")\n            case .iPhone7: print(\"published in 2016\")\n        }\n    }\n}\nlet device = Device.iPhone5\ndevice.detailedIntroduced()\n/* result:\npublished in 2012\n*/\n```\n\n#### <font size=3 color=#4169E1> 4. Enumeration and Protocol </font>\nEnumeration can conform to protocols to provide standard functionality.\n\n```Swift\nenum Beverage: CaseIterable {\n    case coffee, tea, juice\n}\nlet numberOfChoices = Beverage.allCases.count\nfor beverage in Beverage.allCases {\n    print(beverage)\n}\n```\n\n#### <font size=3 color=#4169E1> 5. Enumeration and Generics</font>\nA typical example of the application of enumerations in generics is 'Optional'. 'Optional' is an enumeration like that:\n```Swift\nenum Optional<T> {\n  case Some(T)\n  case None\n}\n```\nEnumeration can have multiple generic parameters, for example:\n```Swift\nenum Either<T1, T2> {\n  case Left(T1)\n  case Right(T2)\n}\n```\n\n#### <font size=3 color=gray>*Reference*</font>\n[1] <https://docs.swift.org/swift-book/LanguageGuide/Enumerations.html>\n[2] <https://www.jianshu.com/p/6f5f7a908301>   \n[3] <https://juejin.cn/post/7053223443046596644>\n\n\n\n\n\n","source":"_posts/Swift/03. Enumerations/00. Summary of Enumerations.md","raw":"---\ntitle: 00. Summary of Enumerations\ndate: 2023-03-3 20:00:00\ncategories: \n- [Swift, 03. Enumerations]\ntags:\n- enumeration\n---\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\n#### <font size=3 color=#4169E1> 1. General </font>\n \nWe define an enumeration in Objective-C/C as follow:\n```Objective-C\ntypedef enum {\n    AFEncapsulationBoundaryPhase = 1,\n    AFHeaderPhase                = 2,\n    AFBodyPhase                  = 3,\n    AFFinalBoundaryPhase         = 4,\n} AFHTTPBodyPartReadPhase;\n```\nOr like this:\n```Objective-C\ntypedef NS_ENUM(NSInteger, RoleItemType) {\n    RoleItemLabelType = 0,  \n    RoleItemImageType = 1,   \n    RoleItemMixType = 2,     \n};\n```\nBut In Swift we need to define an enumeration like this:\n```Swift \nenum CompassPoint {\n    case north\n    case south\n    case east\n    case west\n}\n```\nUnlike in C/OC, enumeration in Swift is a completely different thing. It is somewhat similar to struct. It is very flexible and has a wide range of uses. Enumeration in Swift has the following characteristics:  \n> * It is of value type.\n> * It can conform to protocols to provide standard functionality.\n> * It can be extended to expand their functionality beyond their original implementation.\n> * It can also define initializers to provide an initial case value and define common functions and properties(computed properties).   \n> * It supports recursion.\n\nEnumerations in Swift are first-class types in their own right. They adopt many features traditionally supported only by classes.\n \n\n#### <font size=3 color=#4169E1> 2. Associated Values and Raw Values </font>\n\n<strong>**<font size=3 color=#F5F5F5>2.1 Associated Values</font>**  </strong>\n\nFirstly, Associated Values can have different member types. for example:\n```Swift\n enum {10,0.8,\"Hello\"}\n```\nSecondly, It always bases on Constant or variable. Thirdly, Associated Value will be set when you create a new constant or variable based on the enumeration member, and its value can be different each time you do so.\n```Swift\nenum Student{\n    case Name(String)\n    case Mark(Int,Int,Int)\n}\nvar studDetails = Student.Name(\"Runoob\")\nvar studMarks = Student.Mark(98,97,95)\nswitch studMarks {\ncase .Name(let studName):\n    print(\"Student Name: \\(studName)。\")\ncase .Mark(let Mark1, let Mark2, let Mark3):\n    print(\"Student Mark: \\(Mark1),\\(Mark2),\\(Mark3)。\")\n}\n```\n<strong>**<font size=3 color=#F5F5F5>2.2 Raw Values</font>**  </strong>   \nFirstly, Raw Values have the same member types. for example:\n```Swift\nenum {10,35,50}\n```\nIt is pre-populated values and fixed.\n```Swift \nenum ASCIIControlCharacter: Character {\n    case tab = \"\\t\"\n    case lineFeed = \"\\n\"\n    case carriageReturn = \"\\r\"\n}\n```\n> NOTE  \n> Raw values are not the same as associated values. Raw values are set to prepopulate values when you first define the enumeration in your code, like the three ASCII codes above. The raw value for a particular enumeration case is always the same. Associated values are set when you create a new constant or variable based on one of the enumeration’s cases, and can be different each time you do so.\n>\n\nUsually, An enumeration that has Declaration Type can be implicitly assigned and you do not need to write them all, for example:\n```Swift\nenum Month: Int {\n    case January = 1, February, March, April, May, June, July, August, September, October, November, December\n}\n\n```\n\n#### <font size=3 color=#4169E1> 3. Add methods and properties to enumerations </font>\n```Swift\nenum Device : Int {\n    case iPhone4s\n    case iPhone5\n    case iPhone6\n    case iPhone7\n    var introduced: Int {\n            switch self {\n            case .iPhone4s: return 2011\n            case .iPhone5: return 2012\n            case .iPhone6: return 2014\n            case .iPhone7: return 2016\n        }\n    }\n}\nlet device = Device.iPhone5\nprint(device.introduced)\n/*result:\n2012\n*/\n```\nWe try to extend this enumeration as follows:\n```Swift\nextension Device {\n    func detailedIntroduced()  {\n            switch self {\n            case .iPhone4s: print(\"published in 2011\")\n            case .iPhone5: print(\"published in 2012\")\n            case .iPhone6: print(\"published in 2014\")\n            case .iPhone7: print(\"published in 2016\")\n        }\n    }\n}\nlet device = Device.iPhone5\ndevice.detailedIntroduced()\n/* result:\npublished in 2012\n*/\n```\n\n#### <font size=3 color=#4169E1> 4. Enumeration and Protocol </font>\nEnumeration can conform to protocols to provide standard functionality.\n\n```Swift\nenum Beverage: CaseIterable {\n    case coffee, tea, juice\n}\nlet numberOfChoices = Beverage.allCases.count\nfor beverage in Beverage.allCases {\n    print(beverage)\n}\n```\n\n#### <font size=3 color=#4169E1> 5. Enumeration and Generics</font>\nA typical example of the application of enumerations in generics is 'Optional'. 'Optional' is an enumeration like that:\n```Swift\nenum Optional<T> {\n  case Some(T)\n  case None\n}\n```\nEnumeration can have multiple generic parameters, for example:\n```Swift\nenum Either<T1, T2> {\n  case Left(T1)\n  case Right(T2)\n}\n```\n\n#### <font size=3 color=gray>*Reference*</font>\n[1] <https://docs.swift.org/swift-book/LanguageGuide/Enumerations.html>\n[2] <https://www.jianshu.com/p/6f5f7a908301>   \n[3] <https://juejin.cn/post/7053223443046596644>\n\n\n\n\n\n","slug":"Swift/03. Enumerations/00. Summary of Enumerations","published":1,"updated":"2023-08-18T10:47:53.779Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clm7w97rk001mkb0m8wvy394d","content":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<h4 id=\"1-General\"><a href=\"#1-General\" class=\"headerlink\" title=\" 1. General \"></a><font size=3 color=#4169E1> 1. General </font></h4><p>We define an enumeration in Objective-C&#x2F;C as follow:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef enum &#123;</span><br><span class=\"line\">    AFEncapsulationBoundaryPhase = 1,</span><br><span class=\"line\">    AFHeaderPhase                = 2,</span><br><span class=\"line\">    AFBodyPhase                  = 3,</span><br><span class=\"line\">    AFFinalBoundaryPhase         = 4,</span><br><span class=\"line\">&#125; AFHTTPBodyPartReadPhase;</span><br></pre></td></tr></table></figure>\n<p>Or like this:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef NS_ENUM(NSInteger, RoleItemType) &#123;</span><br><span class=\"line\">    RoleItemLabelType = 0,  </span><br><span class=\"line\">    RoleItemImageType = 1,   </span><br><span class=\"line\">    RoleItemMixType = 2,     </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>But In Swift we need to define an enumeration like this:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">CompassPoint</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> north</span><br><span class=\"line\">    <span class=\"keyword\">case</span> south</span><br><span class=\"line\">    <span class=\"keyword\">case</span> east</span><br><span class=\"line\">    <span class=\"keyword\">case</span> west</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Unlike in C&#x2F;OC, enumeration in Swift is a completely different thing. It is somewhat similar to struct. It is very flexible and has a wide range of uses. Enumeration in Swift has the following characteristics:  </p>\n<blockquote>\n<ul>\n<li>It is of value type.</li>\n<li>It can conform to protocols to provide standard functionality.</li>\n<li>It can be extended to expand their functionality beyond their original implementation.</li>\n<li>It can also define initializers to provide an initial case value and define common functions and properties(computed properties).   </li>\n<li>It supports recursion.</li>\n</ul>\n</blockquote>\n<p>Enumerations in Swift are first-class types in their own right. They adopt many features traditionally supported only by classes.</p>\n<h4 id=\"2-Associated-Values-and-Raw-Values\"><a href=\"#2-Associated-Values-and-Raw-Values\" class=\"headerlink\" title=\" 2. Associated Values and Raw Values \"></a><font size=3 color=#4169E1> 2. Associated Values and Raw Values </font></h4><p><strong><strong><font size=3 color=#F5F5F5>2.1 Associated Values</font></strong>  </strong></p>\n<p>Firstly, Associated Values can have different member types. for example:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> &#123;<span class=\"number\">10</span>,<span class=\"number\">0.8</span>,<span class=\"string\">&quot;Hello&quot;</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>Secondly, It always bases on Constant or variable. Thirdly, Associated Value will be set when you create a new constant or variable based on the enumeration member, and its value can be different each time you do so.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Student</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Name</span>(<span class=\"type\">String</span>)</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Mark</span>(<span class=\"type\">Int</span>,<span class=\"type\">Int</span>,<span class=\"type\">Int</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> studDetails <span class=\"operator\">=</span> <span class=\"type\">Student</span>.<span class=\"type\">Name</span>(<span class=\"string\">&quot;Runoob&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> studMarks <span class=\"operator\">=</span> <span class=\"type\">Student</span>.<span class=\"type\">Mark</span>(<span class=\"number\">98</span>,<span class=\"number\">97</span>,<span class=\"number\">95</span>)</span><br><span class=\"line\"><span class=\"keyword\">switch</span> studMarks &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> .<span class=\"type\">Name</span>(<span class=\"keyword\">let</span> studName):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Student Name: <span class=\"subst\">\\(studName)</span>。&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">case</span> .<span class=\"type\">Mark</span>(<span class=\"keyword\">let</span> <span class=\"type\">Mark1</span>, <span class=\"keyword\">let</span> <span class=\"type\">Mark2</span>, <span class=\"keyword\">let</span> <span class=\"type\">Mark3</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Student Mark: <span class=\"subst\">\\(Mark1)</span>,<span class=\"subst\">\\(Mark2)</span>,<span class=\"subst\">\\(Mark3)</span>。&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><strong><font size=3 color=#F5F5F5>2.2 Raw Values</font></strong>  </strong><br>Firstly, Raw Values have the same member types. for example:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> &#123;<span class=\"number\">10</span>,<span class=\"number\">35</span>,<span class=\"number\">50</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>It is pre-populated values and fixed.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">ASCIIControlCharacter</span>: <span class=\"title class_\">Character</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> tab <span class=\"operator\">=</span> <span class=\"string\">&quot;<span class=\"subst\">\\t</span>&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> lineFeed <span class=\"operator\">=</span> <span class=\"string\">&quot;<span class=\"subst\">\\n</span>&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> carriageReturn <span class=\"operator\">=</span> <span class=\"string\">&quot;<span class=\"subst\">\\r</span>&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>NOTE<br>Raw values are not the same as associated values. Raw values are set to prepopulate values when you first define the enumeration in your code, like the three ASCII codes above. The raw value for a particular enumeration case is always the same. Associated values are set when you create a new constant or variable based on one of the enumeration’s cases, and can be different each time you do so.</p>\n</blockquote>\n<p>Usually, An enumeration that has Declaration Type can be implicitly assigned and you do not need to write them all, for example:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Month</span>: <span class=\"title class_\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">January</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>, <span class=\"type\">February</span>, <span class=\"type\">March</span>, <span class=\"type\">April</span>, <span class=\"type\">May</span>, <span class=\"type\">June</span>, <span class=\"type\">July</span>, <span class=\"type\">August</span>, <span class=\"type\">September</span>, <span class=\"type\">October</span>, <span class=\"type\">November</span>, <span class=\"type\">December</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-Add-methods-and-properties-to-enumerations\"><a href=\"#3-Add-methods-and-properties-to-enumerations\" class=\"headerlink\" title=\" 3. Add methods and properties to enumerations \"></a><font size=3 color=#4169E1> 3. Add methods and properties to enumerations </font></h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Device</span> : <span class=\"title class_\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> iPhone4s</span><br><span class=\"line\">    <span class=\"keyword\">case</span> iPhone5</span><br><span class=\"line\">    <span class=\"keyword\">case</span> iPhone6</span><br><span class=\"line\">    <span class=\"keyword\">case</span> iPhone7</span><br><span class=\"line\">    <span class=\"keyword\">var</span> introduced: <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> <span class=\"keyword\">self</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone4s: <span class=\"keyword\">return</span> <span class=\"number\">2011</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone5: <span class=\"keyword\">return</span> <span class=\"number\">2012</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone6: <span class=\"keyword\">return</span> <span class=\"number\">2014</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone7: <span class=\"keyword\">return</span> <span class=\"number\">2016</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> device <span class=\"operator\">=</span> <span class=\"type\">Device</span>.iPhone5</span><br><span class=\"line\"><span class=\"built_in\">print</span>(device.introduced)</span><br><span class=\"line\"><span class=\"comment\">/*result:</span></span><br><span class=\"line\"><span class=\"comment\">2012</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<p>We try to extend this enumeration as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">Device</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">detailedIntroduced</span>()  &#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> <span class=\"keyword\">self</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone4s: <span class=\"built_in\">print</span>(<span class=\"string\">&quot;published in 2011&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone5: <span class=\"built_in\">print</span>(<span class=\"string\">&quot;published in 2012&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone6: <span class=\"built_in\">print</span>(<span class=\"string\">&quot;published in 2014&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone7: <span class=\"built_in\">print</span>(<span class=\"string\">&quot;published in 2016&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> device <span class=\"operator\">=</span> <span class=\"type\">Device</span>.iPhone5</span><br><span class=\"line\">device.detailedIntroduced()</span><br><span class=\"line\"><span class=\"comment\">/* result:</span></span><br><span class=\"line\"><span class=\"comment\">published in 2012</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-Enumeration-and-Protocol\"><a href=\"#4-Enumeration-and-Protocol\" class=\"headerlink\" title=\" 4. Enumeration and Protocol \"></a><font size=3 color=#4169E1> 4. Enumeration and Protocol </font></h4><p>Enumeration can conform to protocols to provide standard functionality.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Beverage</span>: <span class=\"title class_\">CaseIterable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> coffee, tea, juice</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> numberOfChoices <span class=\"operator\">=</span> <span class=\"type\">Beverage</span>.allCases.count</span><br><span class=\"line\"><span class=\"keyword\">for</span> beverage <span class=\"keyword\">in</span> <span class=\"type\">Beverage</span>.allCases &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(beverage)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-Enumeration-and-Generics\"><a href=\"#5-Enumeration-and-Generics\" class=\"headerlink\" title=\" 5. Enumeration and Generics\"></a><font size=3 color=#4169E1> 5. Enumeration and Generics</font></h4><p>A typical example of the application of enumerations in generics is ‘Optional’. ‘Optional’ is an enumeration like that:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Optional</span>&lt;<span class=\"title class_\">T</span>&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">Some</span>(<span class=\"type\">T</span>)</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">None</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Enumeration can have multiple generic parameters, for example:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Either</span>&lt;<span class=\"title class_\">T1</span>, <span class=\"title class_\">T2</span>&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">Left</span>(<span class=\"type\">T1</span>)</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">Right</span>(<span class=\"type\">T2</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://docs.swift.org/swift-book/LanguageGuide/Enumerations.html\">https://docs.swift.org/swift-book/LanguageGuide/Enumerations.html</a><br>[2] <a href=\"https://www.jianshu.com/p/6f5f7a908301\">https://www.jianshu.com/p/6f5f7a908301</a><br>[3] <a href=\"https://juejin.cn/post/7053223443046596644\">https://juejin.cn/post/7053223443046596644</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<h4 id=\"1-General\"><a href=\"#1-General\" class=\"headerlink\" title=\" 1. General \"></a><font size=3 color=#4169E1> 1. General </font></h4><p>We define an enumeration in Objective-C&#x2F;C as follow:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef enum &#123;</span><br><span class=\"line\">    AFEncapsulationBoundaryPhase = 1,</span><br><span class=\"line\">    AFHeaderPhase                = 2,</span><br><span class=\"line\">    AFBodyPhase                  = 3,</span><br><span class=\"line\">    AFFinalBoundaryPhase         = 4,</span><br><span class=\"line\">&#125; AFHTTPBodyPartReadPhase;</span><br></pre></td></tr></table></figure>\n<p>Or like this:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef NS_ENUM(NSInteger, RoleItemType) &#123;</span><br><span class=\"line\">    RoleItemLabelType = 0,  </span><br><span class=\"line\">    RoleItemImageType = 1,   </span><br><span class=\"line\">    RoleItemMixType = 2,     </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>But In Swift we need to define an enumeration like this:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">CompassPoint</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> north</span><br><span class=\"line\">    <span class=\"keyword\">case</span> south</span><br><span class=\"line\">    <span class=\"keyword\">case</span> east</span><br><span class=\"line\">    <span class=\"keyword\">case</span> west</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Unlike in C&#x2F;OC, enumeration in Swift is a completely different thing. It is somewhat similar to struct. It is very flexible and has a wide range of uses. Enumeration in Swift has the following characteristics:  </p>\n<blockquote>\n<ul>\n<li>It is of value type.</li>\n<li>It can conform to protocols to provide standard functionality.</li>\n<li>It can be extended to expand their functionality beyond their original implementation.</li>\n<li>It can also define initializers to provide an initial case value and define common functions and properties(computed properties).   </li>\n<li>It supports recursion.</li>\n</ul>\n</blockquote>\n<p>Enumerations in Swift are first-class types in their own right. They adopt many features traditionally supported only by classes.</p>\n<h4 id=\"2-Associated-Values-and-Raw-Values\"><a href=\"#2-Associated-Values-and-Raw-Values\" class=\"headerlink\" title=\" 2. Associated Values and Raw Values \"></a><font size=3 color=#4169E1> 2. Associated Values and Raw Values </font></h4><p><strong><strong><font size=3 color=#F5F5F5>2.1 Associated Values</font></strong>  </strong></p>\n<p>Firstly, Associated Values can have different member types. for example:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> &#123;<span class=\"number\">10</span>,<span class=\"number\">0.8</span>,<span class=\"string\">&quot;Hello&quot;</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>Secondly, It always bases on Constant or variable. Thirdly, Associated Value will be set when you create a new constant or variable based on the enumeration member, and its value can be different each time you do so.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Student</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Name</span>(<span class=\"type\">String</span>)</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Mark</span>(<span class=\"type\">Int</span>,<span class=\"type\">Int</span>,<span class=\"type\">Int</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> studDetails <span class=\"operator\">=</span> <span class=\"type\">Student</span>.<span class=\"type\">Name</span>(<span class=\"string\">&quot;Runoob&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> studMarks <span class=\"operator\">=</span> <span class=\"type\">Student</span>.<span class=\"type\">Mark</span>(<span class=\"number\">98</span>,<span class=\"number\">97</span>,<span class=\"number\">95</span>)</span><br><span class=\"line\"><span class=\"keyword\">switch</span> studMarks &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> .<span class=\"type\">Name</span>(<span class=\"keyword\">let</span> studName):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Student Name: <span class=\"subst\">\\(studName)</span>。&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">case</span> .<span class=\"type\">Mark</span>(<span class=\"keyword\">let</span> <span class=\"type\">Mark1</span>, <span class=\"keyword\">let</span> <span class=\"type\">Mark2</span>, <span class=\"keyword\">let</span> <span class=\"type\">Mark3</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Student Mark: <span class=\"subst\">\\(Mark1)</span>,<span class=\"subst\">\\(Mark2)</span>,<span class=\"subst\">\\(Mark3)</span>。&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><strong><font size=3 color=#F5F5F5>2.2 Raw Values</font></strong>  </strong><br>Firstly, Raw Values have the same member types. for example:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> &#123;<span class=\"number\">10</span>,<span class=\"number\">35</span>,<span class=\"number\">50</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>It is pre-populated values and fixed.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">ASCIIControlCharacter</span>: <span class=\"title class_\">Character</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> tab <span class=\"operator\">=</span> <span class=\"string\">&quot;<span class=\"subst\">\\t</span>&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> lineFeed <span class=\"operator\">=</span> <span class=\"string\">&quot;<span class=\"subst\">\\n</span>&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> carriageReturn <span class=\"operator\">=</span> <span class=\"string\">&quot;<span class=\"subst\">\\r</span>&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>NOTE<br>Raw values are not the same as associated values. Raw values are set to prepopulate values when you first define the enumeration in your code, like the three ASCII codes above. The raw value for a particular enumeration case is always the same. Associated values are set when you create a new constant or variable based on one of the enumeration’s cases, and can be different each time you do so.</p>\n</blockquote>\n<p>Usually, An enumeration that has Declaration Type can be implicitly assigned and you do not need to write them all, for example:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Month</span>: <span class=\"title class_\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">January</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>, <span class=\"type\">February</span>, <span class=\"type\">March</span>, <span class=\"type\">April</span>, <span class=\"type\">May</span>, <span class=\"type\">June</span>, <span class=\"type\">July</span>, <span class=\"type\">August</span>, <span class=\"type\">September</span>, <span class=\"type\">October</span>, <span class=\"type\">November</span>, <span class=\"type\">December</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-Add-methods-and-properties-to-enumerations\"><a href=\"#3-Add-methods-and-properties-to-enumerations\" class=\"headerlink\" title=\" 3. Add methods and properties to enumerations \"></a><font size=3 color=#4169E1> 3. Add methods and properties to enumerations </font></h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Device</span> : <span class=\"title class_\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> iPhone4s</span><br><span class=\"line\">    <span class=\"keyword\">case</span> iPhone5</span><br><span class=\"line\">    <span class=\"keyword\">case</span> iPhone6</span><br><span class=\"line\">    <span class=\"keyword\">case</span> iPhone7</span><br><span class=\"line\">    <span class=\"keyword\">var</span> introduced: <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> <span class=\"keyword\">self</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone4s: <span class=\"keyword\">return</span> <span class=\"number\">2011</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone5: <span class=\"keyword\">return</span> <span class=\"number\">2012</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone6: <span class=\"keyword\">return</span> <span class=\"number\">2014</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone7: <span class=\"keyword\">return</span> <span class=\"number\">2016</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> device <span class=\"operator\">=</span> <span class=\"type\">Device</span>.iPhone5</span><br><span class=\"line\"><span class=\"built_in\">print</span>(device.introduced)</span><br><span class=\"line\"><span class=\"comment\">/*result:</span></span><br><span class=\"line\"><span class=\"comment\">2012</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<p>We try to extend this enumeration as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">Device</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">detailedIntroduced</span>()  &#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> <span class=\"keyword\">self</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone4s: <span class=\"built_in\">print</span>(<span class=\"string\">&quot;published in 2011&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone5: <span class=\"built_in\">print</span>(<span class=\"string\">&quot;published in 2012&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone6: <span class=\"built_in\">print</span>(<span class=\"string\">&quot;published in 2014&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone7: <span class=\"built_in\">print</span>(<span class=\"string\">&quot;published in 2016&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> device <span class=\"operator\">=</span> <span class=\"type\">Device</span>.iPhone5</span><br><span class=\"line\">device.detailedIntroduced()</span><br><span class=\"line\"><span class=\"comment\">/* result:</span></span><br><span class=\"line\"><span class=\"comment\">published in 2012</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-Enumeration-and-Protocol\"><a href=\"#4-Enumeration-and-Protocol\" class=\"headerlink\" title=\" 4. Enumeration and Protocol \"></a><font size=3 color=#4169E1> 4. Enumeration and Protocol </font></h4><p>Enumeration can conform to protocols to provide standard functionality.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Beverage</span>: <span class=\"title class_\">CaseIterable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> coffee, tea, juice</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> numberOfChoices <span class=\"operator\">=</span> <span class=\"type\">Beverage</span>.allCases.count</span><br><span class=\"line\"><span class=\"keyword\">for</span> beverage <span class=\"keyword\">in</span> <span class=\"type\">Beverage</span>.allCases &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(beverage)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-Enumeration-and-Generics\"><a href=\"#5-Enumeration-and-Generics\" class=\"headerlink\" title=\" 5. Enumeration and Generics\"></a><font size=3 color=#4169E1> 5. Enumeration and Generics</font></h4><p>A typical example of the application of enumerations in generics is ‘Optional’. ‘Optional’ is an enumeration like that:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Optional</span>&lt;<span class=\"title class_\">T</span>&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">Some</span>(<span class=\"type\">T</span>)</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">None</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Enumeration can have multiple generic parameters, for example:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Either</span>&lt;<span class=\"title class_\">T1</span>, <span class=\"title class_\">T2</span>&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">Left</span>(<span class=\"type\">T1</span>)</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">Right</span>(<span class=\"type\">T2</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://docs.swift.org/swift-book/LanguageGuide/Enumerations.html\">https://docs.swift.org/swift-book/LanguageGuide/Enumerations.html</a><br>[2] <a href=\"https://www.jianshu.com/p/6f5f7a908301\">https://www.jianshu.com/p/6f5f7a908301</a><br>[3] <a href=\"https://juejin.cn/post/7053223443046596644\">https://juejin.cn/post/7053223443046596644</a></p>\n"},{"title":"01. Nested Enumeration","date":"2023-03-04T19:10:00.000Z","_content":"\n<font color=gray size=2>*It will take about 1 minutes to finish reading this article.*</font>\n\n <strong>Example Code</strong>\n\n```Swift\nenum Character {\n  enum Weapon {\n    case Bow\n    case Sword\n    case Lance\n    case Dagger\n  }\n  enum Helmet {\n    case Wooden\n    case Iron\n    case Diamond\n  }\n  case Thief\n  case Warrior\n  case Knight\n}\n//Access like this:\nlet character = Character.Thief\nlet weapon = Character.Weapon.Bow\nlet helmet = Character.Helmet.Iron\n```\nWhen accessing nested enumeration members, it is not necessary to enter such a long level every time to access them. You can use convenient methods to access them directly.\n\n```Swift\nfunc strength(of character: Character, \n\n              with weapon: Character.Weapon, \n\n              and armor: Character.Helmet) {\n\n}\nstrength(of: .thief, with: .bow, and: .wooden)\n\n```\n\n\n\n\n\n\n","source":"_posts/Swift/03. Enumerations/01. Nested Enumeration.md","raw":"---\ntitle: 01. Nested Enumeration\ndate: 2023-03-4 20:10:00\ncategories: \n- [Swift, 03. Enumerations]\ntags:\n- enumeration\n- nested\n---\n\n<font color=gray size=2>*It will take about 1 minutes to finish reading this article.*</font>\n\n <strong>Example Code</strong>\n\n```Swift\nenum Character {\n  enum Weapon {\n    case Bow\n    case Sword\n    case Lance\n    case Dagger\n  }\n  enum Helmet {\n    case Wooden\n    case Iron\n    case Diamond\n  }\n  case Thief\n  case Warrior\n  case Knight\n}\n//Access like this:\nlet character = Character.Thief\nlet weapon = Character.Weapon.Bow\nlet helmet = Character.Helmet.Iron\n```\nWhen accessing nested enumeration members, it is not necessary to enter such a long level every time to access them. You can use convenient methods to access them directly.\n\n```Swift\nfunc strength(of character: Character, \n\n              with weapon: Character.Weapon, \n\n              and armor: Character.Helmet) {\n\n}\nstrength(of: .thief, with: .bow, and: .wooden)\n\n```\n\n\n\n\n\n\n","slug":"Swift/03. Enumerations/01. Nested Enumeration","published":1,"updated":"2023-08-18T10:47:56.488Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clm7w97rl001pkb0m0jrk7z1b","content":"<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p>\n<p> <strong>Example Code</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Character</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">enum</span> <span class=\"title class_\">Weapon</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Bow</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Sword</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Lance</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Dagger</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">enum</span> <span class=\"title class_\">Helmet</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Wooden</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Iron</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Diamond</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">Thief</span></span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">Warrior</span></span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">Knight</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Access like this:</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> character <span class=\"operator\">=</span> <span class=\"type\">Character</span>.<span class=\"type\">Thief</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> weapon <span class=\"operator\">=</span> <span class=\"type\">Character</span>.<span class=\"type\">Weapon</span>.<span class=\"type\">Bow</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> helmet <span class=\"operator\">=</span> <span class=\"type\">Character</span>.<span class=\"type\">Helmet</span>.<span class=\"type\">Iron</span></span><br></pre></td></tr></table></figure>\n<p>When accessing nested enumeration members, it is not necessary to enter such a long level every time to access them. You can use convenient methods to access them directly.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">strength</span>(<span class=\"params\">of</span> <span class=\"params\">character</span>: <span class=\"type\">Character</span>, </span><br><span class=\"line\"></span><br><span class=\"line\">              <span class=\"params\">with</span> <span class=\"params\">weapon</span>: <span class=\"type\">Character</span>.<span class=\"type\">Weapon</span>, </span><br><span class=\"line\"></span><br><span class=\"line\">              <span class=\"params\">and</span> <span class=\"params\">armor</span>: <span class=\"type\">Character</span>.<span class=\"type\">Helmet</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">strength(of: .thief, with: .bow, and: .wooden)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p>\n<p> <strong>Example Code</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Character</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">enum</span> <span class=\"title class_\">Weapon</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Bow</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Sword</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Lance</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Dagger</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">enum</span> <span class=\"title class_\">Helmet</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Wooden</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Iron</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Diamond</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">Thief</span></span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">Warrior</span></span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">Knight</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Access like this:</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> character <span class=\"operator\">=</span> <span class=\"type\">Character</span>.<span class=\"type\">Thief</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> weapon <span class=\"operator\">=</span> <span class=\"type\">Character</span>.<span class=\"type\">Weapon</span>.<span class=\"type\">Bow</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> helmet <span class=\"operator\">=</span> <span class=\"type\">Character</span>.<span class=\"type\">Helmet</span>.<span class=\"type\">Iron</span></span><br></pre></td></tr></table></figure>\n<p>When accessing nested enumeration members, it is not necessary to enter such a long level every time to access them. You can use convenient methods to access them directly.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">strength</span>(<span class=\"params\">of</span> <span class=\"params\">character</span>: <span class=\"type\">Character</span>, </span><br><span class=\"line\"></span><br><span class=\"line\">              <span class=\"params\">with</span> <span class=\"params\">weapon</span>: <span class=\"type\">Character</span>.<span class=\"type\">Weapon</span>, </span><br><span class=\"line\"></span><br><span class=\"line\">              <span class=\"params\">and</span> <span class=\"params\">armor</span>: <span class=\"type\">Character</span>.<span class=\"type\">Helmet</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">strength(of: .thief, with: .bow, and: .wooden)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n"},{"title":"02. Inclue Enumeration","date":"2023-03-05T19:12:00.000Z","_content":"\n<font color=gray size=2>*It will take about 1 minutes to finish reading this article.*</font>\n\nWe can also embed enumerations in structures or classes.\n\n<strong>Example Code</strong>\n\n```Swift\nstruct MyCharacter {\n   enum CharacterType {\n        case thief\n        case warrior\n        case knight\n   }\n\n   enum Weapon {\n       case bow\n       case sword\n       case lance\n       case dagger\n   }\n\n   let type: CharacterType\n   let weapon: Weapon\n\n}\n```\nCall as follows:\n```Swift \nlet warrior = MyCharacter(type: .warrior, weapon: .sword)\n```\n\n\n\n\n","source":"_posts/Swift/03. Enumerations/02. Include Enumeration.md","raw":"---\ntitle: 02. Inclue Enumeration\ndate: 2023-03-5 20:12:00\ncategories: \n- [Swift, 03. Enumerations]\ntags:\n- enumeration\n---\n\n<font color=gray size=2>*It will take about 1 minutes to finish reading this article.*</font>\n\nWe can also embed enumerations in structures or classes.\n\n<strong>Example Code</strong>\n\n```Swift\nstruct MyCharacter {\n   enum CharacterType {\n        case thief\n        case warrior\n        case knight\n   }\n\n   enum Weapon {\n       case bow\n       case sword\n       case lance\n       case dagger\n   }\n\n   let type: CharacterType\n   let weapon: Weapon\n\n}\n```\nCall as follows:\n```Swift \nlet warrior = MyCharacter(type: .warrior, weapon: .sword)\n```\n\n\n\n\n","slug":"Swift/03. Enumerations/02. Include Enumeration","published":1,"updated":"2023-08-18T10:47:58.804Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clm7w97rm001skb0m8fw9edkc","content":"<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p>\n<p>We can also embed enumerations in structures or classes.</p>\n<p><strong>Example Code</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">MyCharacter</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">enum</span> <span class=\"title class_\">CharacterType</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> thief</span><br><span class=\"line\">        <span class=\"keyword\">case</span> warrior</span><br><span class=\"line\">        <span class=\"keyword\">case</span> knight</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">enum</span> <span class=\"title class_\">Weapon</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">case</span> bow</span><br><span class=\"line\">       <span class=\"keyword\">case</span> sword</span><br><span class=\"line\">       <span class=\"keyword\">case</span> lance</span><br><span class=\"line\">       <span class=\"keyword\">case</span> dagger</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">let</span> type: <span class=\"type\">CharacterType</span></span><br><span class=\"line\">   <span class=\"keyword\">let</span> weapon: <span class=\"type\">Weapon</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Call as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> warrior <span class=\"operator\">=</span> <span class=\"type\">MyCharacter</span>(type: .warrior, weapon: .sword)</span><br></pre></td></tr></table></figure>\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p>\n<p>We can also embed enumerations in structures or classes.</p>\n<p><strong>Example Code</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">MyCharacter</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">enum</span> <span class=\"title class_\">CharacterType</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> thief</span><br><span class=\"line\">        <span class=\"keyword\">case</span> warrior</span><br><span class=\"line\">        <span class=\"keyword\">case</span> knight</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">enum</span> <span class=\"title class_\">Weapon</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">case</span> bow</span><br><span class=\"line\">       <span class=\"keyword\">case</span> sword</span><br><span class=\"line\">       <span class=\"keyword\">case</span> lance</span><br><span class=\"line\">       <span class=\"keyword\">case</span> dagger</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">let</span> type: <span class=\"type\">CharacterType</span></span><br><span class=\"line\">   <span class=\"keyword\">let</span> weapon: <span class=\"type\">Weapon</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Call as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> warrior <span class=\"operator\">=</span> <span class=\"type\">MyCharacter</span>(type: .warrior, weapon: .sword)</span><br></pre></td></tr></table></figure>\n\n\n\n\n"},{"title":"03. Recursive Enumeration","date":"2023-03-06T19:13:00.000Z","_content":"\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nEnumerations and cases can be marked as indirect, which means that their associated values are stored indirectly, which allows us to define recursive data structures.\n<strong>Example Code</strong>\n\n```Swift\nenum ArithmeticExpression {\n    case number(Int)\n    indirect case addition(ArithmeticExpression, ArithmeticExpression)\n    indirect case multiplication(ArithmeticExpression, ArithmeticExpression)\n}\n// or \nindirect enum ArithmeticExpression {\n    case number(Int)\n    case addition(ArithmeticExpression, ArithmeticExpression)\n    case multiplication(ArithmeticExpression, ArithmeticExpression)\n}\n```\nCall as follows:\n```Swift \nlet five = ArithmeticExpression.number(5)\nlet four = ArithmeticExpression.number(4)\nlet sum = ArithmeticExpression.addition(five, four)\nlet product = ArithmeticExpression.multiplication(sum, ArithmeticExpression.number(2))\n\nfunc evaluate(_ expression: ArithmeticExpression) -> Int {\n    switch expression {\n    case let .number(value):\n        return value\n    case let .addition(left, right):\n        return evaluate(left) + evaluate(right)\n    case let .multiplication(left, right):\n        return evaluate(left) * evaluate(right) // (5 + 4) * 2\n    }\n}\nprint(evaluate(product))\n\n// “18”\n```\n\n\n\n\n","source":"_posts/Swift/03. Enumerations/03. Recursive Enumeration.md","raw":"---\ntitle: 03. Recursive Enumeration\ndate: 2023-03-6 20:13:00\ncategories: \n- [Swift, 03. Enumerations]\ntags:\n- enumeration\n- recursive\n---\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nEnumerations and cases can be marked as indirect, which means that their associated values are stored indirectly, which allows us to define recursive data structures.\n<strong>Example Code</strong>\n\n```Swift\nenum ArithmeticExpression {\n    case number(Int)\n    indirect case addition(ArithmeticExpression, ArithmeticExpression)\n    indirect case multiplication(ArithmeticExpression, ArithmeticExpression)\n}\n// or \nindirect enum ArithmeticExpression {\n    case number(Int)\n    case addition(ArithmeticExpression, ArithmeticExpression)\n    case multiplication(ArithmeticExpression, ArithmeticExpression)\n}\n```\nCall as follows:\n```Swift \nlet five = ArithmeticExpression.number(5)\nlet four = ArithmeticExpression.number(4)\nlet sum = ArithmeticExpression.addition(five, four)\nlet product = ArithmeticExpression.multiplication(sum, ArithmeticExpression.number(2))\n\nfunc evaluate(_ expression: ArithmeticExpression) -> Int {\n    switch expression {\n    case let .number(value):\n        return value\n    case let .addition(left, right):\n        return evaluate(left) + evaluate(right)\n    case let .multiplication(left, right):\n        return evaluate(left) * evaluate(right) // (5 + 4) * 2\n    }\n}\nprint(evaluate(product))\n\n// “18”\n```\n\n\n\n\n","slug":"Swift/03. Enumerations/03. Recursive Enumeration","published":1,"updated":"2023-08-18T10:48:01.705Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clm7w97rm001ukb0m5brog5f8","content":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>Enumerations and cases can be marked as indirect, which means that their associated values are stored indirectly, which allows us to define recursive data structures.<br><strong>Example Code</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">ArithmeticExpression</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> number(<span class=\"type\">Int</span>)</span><br><span class=\"line\">    <span class=\"keyword\">indirect</span> <span class=\"keyword\">case</span> addition(<span class=\"type\">ArithmeticExpression</span>, <span class=\"type\">ArithmeticExpression</span>)</span><br><span class=\"line\">    <span class=\"keyword\">indirect</span> <span class=\"keyword\">case</span> multiplication(<span class=\"type\">ArithmeticExpression</span>, <span class=\"type\">ArithmeticExpression</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// or </span></span><br><span class=\"line\"><span class=\"keyword\">indirect</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">ArithmeticExpression</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> number(<span class=\"type\">Int</span>)</span><br><span class=\"line\">    <span class=\"keyword\">case</span> addition(<span class=\"type\">ArithmeticExpression</span>, <span class=\"type\">ArithmeticExpression</span>)</span><br><span class=\"line\">    <span class=\"keyword\">case</span> multiplication(<span class=\"type\">ArithmeticExpression</span>, <span class=\"type\">ArithmeticExpression</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Call as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> five <span class=\"operator\">=</span> <span class=\"type\">ArithmeticExpression</span>.number(<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> four <span class=\"operator\">=</span> <span class=\"type\">ArithmeticExpression</span>.number(<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> sum <span class=\"operator\">=</span> <span class=\"type\">ArithmeticExpression</span>.addition(five, four)</span><br><span class=\"line\"><span class=\"keyword\">let</span> product <span class=\"operator\">=</span> <span class=\"type\">ArithmeticExpression</span>.multiplication(sum, <span class=\"type\">ArithmeticExpression</span>.number(<span class=\"number\">2</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">evaluate</span>(<span class=\"keyword\">_</span> <span class=\"params\">expression</span>: <span class=\"type\">ArithmeticExpression</span>) -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> expression &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"keyword\">let</span> .number(value):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"keyword\">let</span> .addition(left, right):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> evaluate(left) <span class=\"operator\">+</span> evaluate(right)</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"keyword\">let</span> .multiplication(left, right):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> evaluate(left) <span class=\"operator\">*</span> evaluate(right) <span class=\"comment\">// (5 + 4) * 2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(evaluate(product))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// “18”</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>Enumerations and cases can be marked as indirect, which means that their associated values are stored indirectly, which allows us to define recursive data structures.<br><strong>Example Code</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">ArithmeticExpression</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> number(<span class=\"type\">Int</span>)</span><br><span class=\"line\">    <span class=\"keyword\">indirect</span> <span class=\"keyword\">case</span> addition(<span class=\"type\">ArithmeticExpression</span>, <span class=\"type\">ArithmeticExpression</span>)</span><br><span class=\"line\">    <span class=\"keyword\">indirect</span> <span class=\"keyword\">case</span> multiplication(<span class=\"type\">ArithmeticExpression</span>, <span class=\"type\">ArithmeticExpression</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// or </span></span><br><span class=\"line\"><span class=\"keyword\">indirect</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">ArithmeticExpression</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> number(<span class=\"type\">Int</span>)</span><br><span class=\"line\">    <span class=\"keyword\">case</span> addition(<span class=\"type\">ArithmeticExpression</span>, <span class=\"type\">ArithmeticExpression</span>)</span><br><span class=\"line\">    <span class=\"keyword\">case</span> multiplication(<span class=\"type\">ArithmeticExpression</span>, <span class=\"type\">ArithmeticExpression</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Call as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> five <span class=\"operator\">=</span> <span class=\"type\">ArithmeticExpression</span>.number(<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> four <span class=\"operator\">=</span> <span class=\"type\">ArithmeticExpression</span>.number(<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> sum <span class=\"operator\">=</span> <span class=\"type\">ArithmeticExpression</span>.addition(five, four)</span><br><span class=\"line\"><span class=\"keyword\">let</span> product <span class=\"operator\">=</span> <span class=\"type\">ArithmeticExpression</span>.multiplication(sum, <span class=\"type\">ArithmeticExpression</span>.number(<span class=\"number\">2</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">evaluate</span>(<span class=\"keyword\">_</span> <span class=\"params\">expression</span>: <span class=\"type\">ArithmeticExpression</span>) -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> expression &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"keyword\">let</span> .number(value):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"keyword\">let</span> .addition(left, right):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> evaluate(left) <span class=\"operator\">+</span> evaluate(right)</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"keyword\">let</span> .multiplication(left, right):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> evaluate(left) <span class=\"operator\">*</span> evaluate(right) <span class=\"comment\">// (5 + 4) * 2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(evaluate(product))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// “18”</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n"},{"title":"00. The Operations of zip function","date":"2023-03-09T19:00:00.000Z","_content":"\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nThis zip function is not used to compress files. It is used to merge the elements of two sequences one by one to generate a new sequence.\n\n#### <font size=3 color=#4169E1> 1. Merge two arrays into a new tuple array</font>\n<details>\n<summary>Details</summary>\nIn the following code, we combine zip with map to generate a new array. Note: The number of new sequences generated by the zip function is the minimum of the original sequence.\n\n<strong> Example Code </strong>\n```Swift \nlet a = [1, 2, 3, 4, 5]\nlet b = [ \"a\" ,  \"b\" ,  \"c\"]\nlet c = zip(a, b).map{ $0 }\nprint(c)\n//result: [(1, \"a\"), (2, \"b\"), (3, \"c\")]\n```\nSince the whole operation will stop after a short sequence ends in the zip process, we can also use one-way intervals here. The running results of the following code are the same as those above.\n```Swift \nlet b = [\"a\", \"b\", \"c\"]\nlet c = zip(1..., b).map{ $0 }\nprint(c) \n//result: [(1, \"a\"), (2, \"b\"), (3, \"c\")]\n```\n</details>\n\n\n#### <font size=3 color=#4169E1> 2. Creating dictionaries from key value sequences</font>\n<details>\n<summary>Details</summary>\n\nThe following code combines the two arrays into a dictionary.\n```Swift \nlet names = [\"Apple\", \"Pear\"]\nlet prices = [7, 6]\nlet dict =  Dictionary(uniqueKeysWithValues:zip(names, prices))\nprint(dict)\n//result: [\"Apple\": 7, \"Pear\": 6]\n```\nZip and shorthand + can be used to solve the problem of duplicate keys. For example, the array is converted into a dictionary. The dictionary key is the value of the array element, and the dictionary value is the number of occurrences of the element.\n```Swift \nlet array = [ \"Apple\",  \"Pear\",  \"Pear\",  \"Orange\"]\nlet dic = Dictionary(zip(array, repeatElement(1, count: array.count)), uniquingKeysWith: +)\nprint (dic)\n//result: [\"Pear\": 2, \"Apple\": 1, \"Orange\": 1]\n```\n</details>\n\n#### <font size=3 color=#4169E1> 3. Merge the two arrays into a new array</font>\n<details>\n<summary>Details</summary>\n\nWe know that the flatMap function can also open arrays (two-dimensional arrays, N-dimensional arrays) containing arrays into a new array, but the order of elements in the new array is one after another according to the original array order.With zip, two array elements can be inserted at intervals. The following code compares the two methods.\n```Swift \nlet a = [\"a\", \"b\", \"c\", \"d\"]\nlet b = [\"A\", \"B\", \"C\", \"D\"]\n\nlet c = [a, b].flatMap({ $0 })\nprint (\"c：\\(c)\" )\n\nlet d = zip(a, b).flatMap({[$0, $1]})\nprint (\"d：\\(d)\" )\n//result:\n//c：[\"a\", \"b\", \"c\", \"d\", \"A\", \"B\", \"C\", \"D\"]\nd：[\"a\", \"A\", \"b\", \"B\", \"c\", \"C\", \"d\", \"D\"]\n```\n</details>\n\n#### <font size=3 color=#4169E1> 4. Other convenient operations</font>\n<details>\n<summary>Details</summary>\n\n4.1 Generate the corresponding button array according to the String array.\n\n```Swift\nlet titles = [ \"Button 1\" ,  \"Button 2\" ,  \"Button 3\" ]\nlet buttons = zip(0..., titles).map { (i, title) ->  UIButton  in\n     let button =  UIButton (type: .system)\n     button.setTitle(title,  for :.normal)\n     button.tag = i\n     return button\n}\n```\n4.2 Set the buttons in the button array to the colors in the corresponding color array\n```Swift\nzip(self.buttons,  self.colors).forEach { (button, color)  in\n     button.backgroundColor = color\n}\n//or\nzip(self.buttons,  self.colors).forEach {\n     $0.0.backgroundColor = $0.1\n}\n```\n</details>\n\n#### <font size=3 color=gray>*Reference*</font>\n[1] <https://blog.csdn.net/mo_xiao_mo/article/details/78424769>\n \n","source":"_posts/Swift/05. Collections/00. Zip Function.md","raw":"---\ntitle: 00. The Operations of zip function\ndate: 2023-03-9 20:00:00\ncategories: \n- [Swift, 05. Collections]\ntags:\n- collection\n- zip\n---\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nThis zip function is not used to compress files. It is used to merge the elements of two sequences one by one to generate a new sequence.\n\n#### <font size=3 color=#4169E1> 1. Merge two arrays into a new tuple array</font>\n<details>\n<summary>Details</summary>\nIn the following code, we combine zip with map to generate a new array. Note: The number of new sequences generated by the zip function is the minimum of the original sequence.\n\n<strong> Example Code </strong>\n```Swift \nlet a = [1, 2, 3, 4, 5]\nlet b = [ \"a\" ,  \"b\" ,  \"c\"]\nlet c = zip(a, b).map{ $0 }\nprint(c)\n//result: [(1, \"a\"), (2, \"b\"), (3, \"c\")]\n```\nSince the whole operation will stop after a short sequence ends in the zip process, we can also use one-way intervals here. The running results of the following code are the same as those above.\n```Swift \nlet b = [\"a\", \"b\", \"c\"]\nlet c = zip(1..., b).map{ $0 }\nprint(c) \n//result: [(1, \"a\"), (2, \"b\"), (3, \"c\")]\n```\n</details>\n\n\n#### <font size=3 color=#4169E1> 2. Creating dictionaries from key value sequences</font>\n<details>\n<summary>Details</summary>\n\nThe following code combines the two arrays into a dictionary.\n```Swift \nlet names = [\"Apple\", \"Pear\"]\nlet prices = [7, 6]\nlet dict =  Dictionary(uniqueKeysWithValues:zip(names, prices))\nprint(dict)\n//result: [\"Apple\": 7, \"Pear\": 6]\n```\nZip and shorthand + can be used to solve the problem of duplicate keys. For example, the array is converted into a dictionary. The dictionary key is the value of the array element, and the dictionary value is the number of occurrences of the element.\n```Swift \nlet array = [ \"Apple\",  \"Pear\",  \"Pear\",  \"Orange\"]\nlet dic = Dictionary(zip(array, repeatElement(1, count: array.count)), uniquingKeysWith: +)\nprint (dic)\n//result: [\"Pear\": 2, \"Apple\": 1, \"Orange\": 1]\n```\n</details>\n\n#### <font size=3 color=#4169E1> 3. Merge the two arrays into a new array</font>\n<details>\n<summary>Details</summary>\n\nWe know that the flatMap function can also open arrays (two-dimensional arrays, N-dimensional arrays) containing arrays into a new array, but the order of elements in the new array is one after another according to the original array order.With zip, two array elements can be inserted at intervals. The following code compares the two methods.\n```Swift \nlet a = [\"a\", \"b\", \"c\", \"d\"]\nlet b = [\"A\", \"B\", \"C\", \"D\"]\n\nlet c = [a, b].flatMap({ $0 })\nprint (\"c：\\(c)\" )\n\nlet d = zip(a, b).flatMap({[$0, $1]})\nprint (\"d：\\(d)\" )\n//result:\n//c：[\"a\", \"b\", \"c\", \"d\", \"A\", \"B\", \"C\", \"D\"]\nd：[\"a\", \"A\", \"b\", \"B\", \"c\", \"C\", \"d\", \"D\"]\n```\n</details>\n\n#### <font size=3 color=#4169E1> 4. Other convenient operations</font>\n<details>\n<summary>Details</summary>\n\n4.1 Generate the corresponding button array according to the String array.\n\n```Swift\nlet titles = [ \"Button 1\" ,  \"Button 2\" ,  \"Button 3\" ]\nlet buttons = zip(0..., titles).map { (i, title) ->  UIButton  in\n     let button =  UIButton (type: .system)\n     button.setTitle(title,  for :.normal)\n     button.tag = i\n     return button\n}\n```\n4.2 Set the buttons in the button array to the colors in the corresponding color array\n```Swift\nzip(self.buttons,  self.colors).forEach { (button, color)  in\n     button.backgroundColor = color\n}\n//or\nzip(self.buttons,  self.colors).forEach {\n     $0.0.backgroundColor = $0.1\n}\n```\n</details>\n\n#### <font size=3 color=gray>*Reference*</font>\n[1] <https://blog.csdn.net/mo_xiao_mo/article/details/78424769>\n \n","slug":"Swift/05. Collections/00. Zip Function","published":1,"updated":"2023-08-18T10:47:03.388Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clm7w97rn001wkb0m1nnkgfv3","content":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>This zip function is not used to compress files. It is used to merge the elements of two sequences one by one to generate a new sequence.</p>\n<h4 id=\"1-Merge-two-arrays-into-a-new-tuple-array\"><a href=\"#1-Merge-two-arrays-into-a-new-tuple-array\" class=\"headerlink\" title=\" 1. Merge two arrays into a new tuple array\"></a><font size=3 color=#4169E1> 1. Merge two arrays into a new tuple array</font></h4><details>\n<summary>Details</summary>\nIn the following code, we combine zip with map to generate a new array. Note: The number of new sequences generated by the zip function is the minimum of the original sequence.\n\n<p><strong> Example Code </strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a <span class=\"operator\">=</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> b <span class=\"operator\">=</span> [ <span class=\"string\">&quot;a&quot;</span> ,  <span class=\"string\">&quot;b&quot;</span> ,  <span class=\"string\">&quot;c&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> c <span class=\"operator\">=</span> <span class=\"built_in\">zip</span>(a, b).map&#123; <span class=\"variable\">$0</span> &#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(c)</span><br><span class=\"line\"><span class=\"comment\">//result: [(1, &quot;a&quot;), (2, &quot;b&quot;), (3, &quot;c&quot;)]</span></span><br></pre></td></tr></table></figure>\n<p>Since the whole operation will stop after a short sequence ends in the zip process, we can also use one-way intervals here. The running results of the following code are the same as those above.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> b <span class=\"operator\">=</span> [<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> c <span class=\"operator\">=</span> <span class=\"built_in\">zip</span>(<span class=\"number\">1</span><span class=\"operator\">...</span>, b).map&#123; <span class=\"variable\">$0</span> &#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(c) </span><br><span class=\"line\"><span class=\"comment\">//result: [(1, &quot;a&quot;), (2, &quot;b&quot;), (3, &quot;c&quot;)]</span></span><br></pre></td></tr></table></figure>\n</details>\n\n\n<h4 id=\"2-Creating-dictionaries-from-key-value-sequences\"><a href=\"#2-Creating-dictionaries-from-key-value-sequences\" class=\"headerlink\" title=\" 2. Creating dictionaries from key value sequences\"></a><font size=3 color=#4169E1> 2. Creating dictionaries from key value sequences</font></h4><details>\n<summary>Details</summary>\n\n<p>The following code combines the two arrays into a dictionary.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> names <span class=\"operator\">=</span> [<span class=\"string\">&quot;Apple&quot;</span>, <span class=\"string\">&quot;Pear&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> prices <span class=\"operator\">=</span> [<span class=\"number\">7</span>, <span class=\"number\">6</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> dict <span class=\"operator\">=</span>  <span class=\"type\">Dictionary</span>(uniqueKeysWithValues:<span class=\"built_in\">zip</span>(names, prices))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict)</span><br><span class=\"line\"><span class=\"comment\">//result: [&quot;Apple&quot;: 7, &quot;Pear&quot;: 6]</span></span><br></pre></td></tr></table></figure>\n<p>Zip and shorthand + can be used to solve the problem of duplicate keys. For example, the array is converted into a dictionary. The dictionary key is the value of the array element, and the dictionary value is the number of occurrences of the element.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> array <span class=\"operator\">=</span> [ <span class=\"string\">&quot;Apple&quot;</span>,  <span class=\"string\">&quot;Pear&quot;</span>,  <span class=\"string\">&quot;Pear&quot;</span>,  <span class=\"string\">&quot;Orange&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> dic <span class=\"operator\">=</span> <span class=\"type\">Dictionary</span>(<span class=\"built_in\">zip</span>(array, <span class=\"built_in\">repeatElement</span>(<span class=\"number\">1</span>, count: array.count)), uniquingKeysWith: <span class=\"operator\">+</span>)</span><br><span class=\"line\">print (dic)</span><br><span class=\"line\"><span class=\"comment\">//result: [&quot;Pear&quot;: 2, &quot;Apple&quot;: 1, &quot;Orange&quot;: 1]</span></span><br></pre></td></tr></table></figure>\n</details>\n\n<h4 id=\"3-Merge-the-two-arrays-into-a-new-array\"><a href=\"#3-Merge-the-two-arrays-into-a-new-array\" class=\"headerlink\" title=\" 3. Merge the two arrays into a new array\"></a><font size=3 color=#4169E1> 3. Merge the two arrays into a new array</font></h4><details>\n<summary>Details</summary>\n\n<p>We know that the flatMap function can also open arrays (two-dimensional arrays, N-dimensional arrays) containing arrays into a new array, but the order of elements in the new array is one after another according to the original array order.With zip, two array elements can be inserted at intervals. The following code compares the two methods.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a <span class=\"operator\">=</span> [<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>, <span class=\"string\">&quot;d&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> b <span class=\"operator\">=</span> [<span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;B&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;D&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> c <span class=\"operator\">=</span> [a, b].flatMap(&#123; <span class=\"variable\">$0</span> &#125;)</span><br><span class=\"line\">print (<span class=\"string\">&quot;c：<span class=\"subst\">\\(c)</span>&quot;</span> )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> d <span class=\"operator\">=</span> <span class=\"built_in\">zip</span>(a, b).flatMap(&#123;[<span class=\"variable\">$0</span>, <span class=\"variable\">$1</span>]&#125;)</span><br><span class=\"line\">print (<span class=\"string\">&quot;d：<span class=\"subst\">\\(d)</span>&quot;</span> )</span><br><span class=\"line\"><span class=\"comment\">//result:</span></span><br><span class=\"line\"><span class=\"comment\">//c：[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;]</span></span><br><span class=\"line\">d：[<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;B&quot;</span>, <span class=\"string\">&quot;c&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;d&quot;</span>, <span class=\"string\">&quot;D&quot;</span>]</span><br></pre></td></tr></table></figure>\n</details>\n\n<h4 id=\"4-Other-convenient-operations\"><a href=\"#4-Other-convenient-operations\" class=\"headerlink\" title=\" 4. Other convenient operations\"></a><font size=3 color=#4169E1> 4. Other convenient operations</font></h4><details>\n<summary>Details</summary>\n\n<p>4.1 Generate the corresponding button array according to the String array.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> titles <span class=\"operator\">=</span> [ <span class=\"string\">&quot;Button 1&quot;</span> ,  <span class=\"string\">&quot;Button 2&quot;</span> ,  <span class=\"string\">&quot;Button 3&quot;</span> ]</span><br><span class=\"line\"><span class=\"keyword\">let</span> buttons <span class=\"operator\">=</span> <span class=\"built_in\">zip</span>(<span class=\"number\">0</span><span class=\"operator\">...</span>, titles).map &#123; (i, title) -&gt;  <span class=\"type\">UIButton</span>  <span class=\"keyword\">in</span></span><br><span class=\"line\">     <span class=\"keyword\">let</span> button <span class=\"operator\">=</span>  <span class=\"type\">UIButton</span> (type: .system)</span><br><span class=\"line\">     button.setTitle(title,  for :.normal)</span><br><span class=\"line\">     button.tag <span class=\"operator\">=</span> i</span><br><span class=\"line\">     <span class=\"keyword\">return</span> button</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>4.2 Set the buttons in the button array to the colors in the corresponding color array</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">zip</span>(<span class=\"keyword\">self</span>.buttons,  <span class=\"keyword\">self</span>.colors).forEach &#123; (button, color)  <span class=\"keyword\">in</span></span><br><span class=\"line\">     button.backgroundColor <span class=\"operator\">=</span> color</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//or</span></span><br><span class=\"line\"><span class=\"built_in\">zip</span>(<span class=\"keyword\">self</span>.buttons,  <span class=\"keyword\">self</span>.colors).forEach &#123;</span><br><span class=\"line\">     <span class=\"variable\">$0</span>.<span class=\"number\">0</span>.backgroundColor <span class=\"operator\">=</span> <span class=\"variable\">$0</span>.<span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</details>\n\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://blog.csdn.net/mo_xiao_mo/article/details/78424769\">https://blog.csdn.net/mo_xiao_mo/article/details/78424769</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>This zip function is not used to compress files. It is used to merge the elements of two sequences one by one to generate a new sequence.</p>\n<h4 id=\"1-Merge-two-arrays-into-a-new-tuple-array\"><a href=\"#1-Merge-two-arrays-into-a-new-tuple-array\" class=\"headerlink\" title=\" 1. Merge two arrays into a new tuple array\"></a><font size=3 color=#4169E1> 1. Merge two arrays into a new tuple array</font></h4><details>\n<summary>Details</summary>\nIn the following code, we combine zip with map to generate a new array. Note: The number of new sequences generated by the zip function is the minimum of the original sequence.\n\n<p><strong> Example Code </strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a <span class=\"operator\">=</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> b <span class=\"operator\">=</span> [ <span class=\"string\">&quot;a&quot;</span> ,  <span class=\"string\">&quot;b&quot;</span> ,  <span class=\"string\">&quot;c&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> c <span class=\"operator\">=</span> <span class=\"built_in\">zip</span>(a, b).map&#123; <span class=\"variable\">$0</span> &#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(c)</span><br><span class=\"line\"><span class=\"comment\">//result: [(1, &quot;a&quot;), (2, &quot;b&quot;), (3, &quot;c&quot;)]</span></span><br></pre></td></tr></table></figure>\n<p>Since the whole operation will stop after a short sequence ends in the zip process, we can also use one-way intervals here. The running results of the following code are the same as those above.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> b <span class=\"operator\">=</span> [<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> c <span class=\"operator\">=</span> <span class=\"built_in\">zip</span>(<span class=\"number\">1</span><span class=\"operator\">...</span>, b).map&#123; <span class=\"variable\">$0</span> &#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(c) </span><br><span class=\"line\"><span class=\"comment\">//result: [(1, &quot;a&quot;), (2, &quot;b&quot;), (3, &quot;c&quot;)]</span></span><br></pre></td></tr></table></figure>\n</details>\n\n\n<h4 id=\"2-Creating-dictionaries-from-key-value-sequences\"><a href=\"#2-Creating-dictionaries-from-key-value-sequences\" class=\"headerlink\" title=\" 2. Creating dictionaries from key value sequences\"></a><font size=3 color=#4169E1> 2. Creating dictionaries from key value sequences</font></h4><details>\n<summary>Details</summary>\n\n<p>The following code combines the two arrays into a dictionary.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> names <span class=\"operator\">=</span> [<span class=\"string\">&quot;Apple&quot;</span>, <span class=\"string\">&quot;Pear&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> prices <span class=\"operator\">=</span> [<span class=\"number\">7</span>, <span class=\"number\">6</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> dict <span class=\"operator\">=</span>  <span class=\"type\">Dictionary</span>(uniqueKeysWithValues:<span class=\"built_in\">zip</span>(names, prices))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict)</span><br><span class=\"line\"><span class=\"comment\">//result: [&quot;Apple&quot;: 7, &quot;Pear&quot;: 6]</span></span><br></pre></td></tr></table></figure>\n<p>Zip and shorthand + can be used to solve the problem of duplicate keys. For example, the array is converted into a dictionary. The dictionary key is the value of the array element, and the dictionary value is the number of occurrences of the element.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> array <span class=\"operator\">=</span> [ <span class=\"string\">&quot;Apple&quot;</span>,  <span class=\"string\">&quot;Pear&quot;</span>,  <span class=\"string\">&quot;Pear&quot;</span>,  <span class=\"string\">&quot;Orange&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> dic <span class=\"operator\">=</span> <span class=\"type\">Dictionary</span>(<span class=\"built_in\">zip</span>(array, <span class=\"built_in\">repeatElement</span>(<span class=\"number\">1</span>, count: array.count)), uniquingKeysWith: <span class=\"operator\">+</span>)</span><br><span class=\"line\">print (dic)</span><br><span class=\"line\"><span class=\"comment\">//result: [&quot;Pear&quot;: 2, &quot;Apple&quot;: 1, &quot;Orange&quot;: 1]</span></span><br></pre></td></tr></table></figure>\n</details>\n\n<h4 id=\"3-Merge-the-two-arrays-into-a-new-array\"><a href=\"#3-Merge-the-two-arrays-into-a-new-array\" class=\"headerlink\" title=\" 3. Merge the two arrays into a new array\"></a><font size=3 color=#4169E1> 3. Merge the two arrays into a new array</font></h4><details>\n<summary>Details</summary>\n\n<p>We know that the flatMap function can also open arrays (two-dimensional arrays, N-dimensional arrays) containing arrays into a new array, but the order of elements in the new array is one after another according to the original array order.With zip, two array elements can be inserted at intervals. The following code compares the two methods.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a <span class=\"operator\">=</span> [<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>, <span class=\"string\">&quot;d&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> b <span class=\"operator\">=</span> [<span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;B&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;D&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> c <span class=\"operator\">=</span> [a, b].flatMap(&#123; <span class=\"variable\">$0</span> &#125;)</span><br><span class=\"line\">print (<span class=\"string\">&quot;c：<span class=\"subst\">\\(c)</span>&quot;</span> )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> d <span class=\"operator\">=</span> <span class=\"built_in\">zip</span>(a, b).flatMap(&#123;[<span class=\"variable\">$0</span>, <span class=\"variable\">$1</span>]&#125;)</span><br><span class=\"line\">print (<span class=\"string\">&quot;d：<span class=\"subst\">\\(d)</span>&quot;</span> )</span><br><span class=\"line\"><span class=\"comment\">//result:</span></span><br><span class=\"line\"><span class=\"comment\">//c：[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;]</span></span><br><span class=\"line\">d：[<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;B&quot;</span>, <span class=\"string\">&quot;c&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;d&quot;</span>, <span class=\"string\">&quot;D&quot;</span>]</span><br></pre></td></tr></table></figure>\n</details>\n\n<h4 id=\"4-Other-convenient-operations\"><a href=\"#4-Other-convenient-operations\" class=\"headerlink\" title=\" 4. Other convenient operations\"></a><font size=3 color=#4169E1> 4. Other convenient operations</font></h4><details>\n<summary>Details</summary>\n\n<p>4.1 Generate the corresponding button array according to the String array.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> titles <span class=\"operator\">=</span> [ <span class=\"string\">&quot;Button 1&quot;</span> ,  <span class=\"string\">&quot;Button 2&quot;</span> ,  <span class=\"string\">&quot;Button 3&quot;</span> ]</span><br><span class=\"line\"><span class=\"keyword\">let</span> buttons <span class=\"operator\">=</span> <span class=\"built_in\">zip</span>(<span class=\"number\">0</span><span class=\"operator\">...</span>, titles).map &#123; (i, title) -&gt;  <span class=\"type\">UIButton</span>  <span class=\"keyword\">in</span></span><br><span class=\"line\">     <span class=\"keyword\">let</span> button <span class=\"operator\">=</span>  <span class=\"type\">UIButton</span> (type: .system)</span><br><span class=\"line\">     button.setTitle(title,  for :.normal)</span><br><span class=\"line\">     button.tag <span class=\"operator\">=</span> i</span><br><span class=\"line\">     <span class=\"keyword\">return</span> button</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>4.2 Set the buttons in the button array to the colors in the corresponding color array</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">zip</span>(<span class=\"keyword\">self</span>.buttons,  <span class=\"keyword\">self</span>.colors).forEach &#123; (button, color)  <span class=\"keyword\">in</span></span><br><span class=\"line\">     button.backgroundColor <span class=\"operator\">=</span> color</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//or</span></span><br><span class=\"line\"><span class=\"built_in\">zip</span>(<span class=\"keyword\">self</span>.buttons,  <span class=\"keyword\">self</span>.colors).forEach &#123;</span><br><span class=\"line\">     <span class=\"variable\">$0</span>.<span class=\"number\">0</span>.backgroundColor <span class=\"operator\">=</span> <span class=\"variable\">$0</span>.<span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</details>\n\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://blog.csdn.net/mo_xiao_mo/article/details/78424769\">https://blog.csdn.net/mo_xiao_mo/article/details/78424769</a></p>\n"},{"title":"00. Summary of Protocols","date":"2023-03-07T19:00:00.000Z","_content":"\nProtocols in Swift have many special characters, So I summarize them here to make it clear.\n\n#### <font size=3 color=#4169E1>1. Property Requirements</font>\n\n<font size=2 color=#4169E1>1.1 'var' keyword always be with the properties.</font>      \nFirstly, Property requirements are always declared as variable properties, prefixed with the <strong>var</strong> keyword. Gettable and settable properties are indicated by writing { get set } after their type declaration, and gettable properties are indicated by writing { get }.   \n<font size=2 color=#4169E1>1.2 'mutating' keyword not be forgotten.</font>      \nSecondly, If you define a protocol instance method requirement that’s intended to mutate instances of any type that adopts the protocol, mark the method with the <strong>mutating</strong> keyword as part of the protocol’s definition. \n\n```Swift \nprotocol SomeProtocol {\n    var mustBeSettable: Int { get set }\n    var doesNotNeedToBeSettable: Int { get }\n    mutating func toggle()\n}\n```\n \n#### <font size=3 color=#4169E1>2. Extension and Protocol</font>\n<font size=2 color=#4169E1>2.1 Extend an existing type without accessing source code.</font>      \n1.1 Extend an existing type \nYou can extend an existing type to adopt and conform to a new protocol, even if you don’t have access to the source code for the existing type.\n```Swift\nprotocol TextRepresentable {\n    var textualDescription: String { get }\n}\nextension Dice: TextRepresentable {\n    var textualDescription: String {\n        return \"A \\(sides)-sided dice\"\n    }\n}\n```\n<font size=2 color=#4169E1>2.2 Declaring Protocol Adoption with an Extension.</font>     \nIf a type already conforms to all of the requirements of a protocol, but hasn’t yet stated that it adopts that protocol, you can make it adopt the protocol with an empty extension:\n```Swift\nstruct Hamster {\n    var name: String\n    var textualDescription: String {\n        return \"A hamster named \\(name)\"\n    }\n}\nextension Hamster: TextRepresentable {}\n``` \n<font size=2 color=#4169E1>2.3 Protocol Extensions.</font>    \nProtocols can be extended directly to provide method, initializer, subscript, and computed property implementations to conforming types. This allows you to define behavior on protocols themselves, rather than in each type’s individual conformance or in a global function.\n```Swift\nprotocol RandomNumberGenerator {\n    func random() -> Double\n}\n\nextension RandomNumberGenerator {\n    func randomBool() -> Bool {\n        return random() > 0.5\n    }\n}\n\n```\n<details>\n<summary>Example Code Details</summary>\n\n```Swift\nprotocol RandomNumberGenerator {\n    func random() -> Double\n}\n\nextension RandomNumberGenerator {\n    func randomBool() -> Bool {\n        return random() > 0.5\n    }\n}\n\nclass LinearGeneratorA: RandomNumberGenerator {\n    var lastRandom = 42.0\n    let m = 1000.0\n    let a = 3877.0\n    let c = 29573.0\n    func random() -> Double {\n        lastRandom = ((lastRandom * a + c)\n            .truncatingRemainder(dividingBy:m))\n        return lastRandom / m\n    }\n}\n\nclass LinearGeneratorB: RandomNumberGenerator {\n    var lastRandom = 42.0\n    let m = 2000.0\n    let a = 3877.0\n    let c = 29573.0\n    func random() -> Double {\n        lastRandom = ((lastRandom * a + c)\n            .truncatingRemainder(dividingBy:m))\n        return lastRandom / m\n    }\n}\n\n//Verify as follows:\nlet generatorA = LinearGeneratorA()\nprint(\"Here's a random number A: \\(generatorA.random())\")\nprint(\"And here's a random Boolean A: \\(generatorA.randomBool())\")\n\nlet generatorB = LinearGeneratorB()\nprint(\"Here's a random number B: \\(generatorB.random())\")\nprint(\"And here's a random Boolean B: \\(generatorB.randomBool())\")\n```\n</details>\nYou can use protocol extensions to provide a default implementation to any method or computed property requirement of that protocol.\n\n#### <font size=3 color=#4169E1> 3. Class-Only Protocols</font>\nYou can limit protocol adoption to class types (and not structures or enumerations) by adding the AnyObject protocol to a protocol’s inheritance list.\n```Swift\nprotocol Generator {\n}\nprotocol RandomNumberGenerator : LinearGeneratorA, Generator {\n    func random() -> Double\n}\nclass LinearGeneratorA: RandomNumberGenerator {\n    var lastRandom = 42.0\n    let m = 1000.0\n    let a = 3877.0\n    let c = 29573.0\n    func random() -> Double {\n        lastRandom = ((lastRandom * a + c)\n            .truncatingRemainder(dividingBy:m))\n        return lastRandom / m\n    }\n}\n```\nAnd It will be report errors if you try to do like as follows:\n```Swift\nclass LinearGeneratorB: RandomNumberGenerator {\n    var lastRandom = 42.0\n    let m = 2000.0\n    let a = 3877.0\n    let c = 29573.0\n    func random() -> Double {\n        lastRandom = ((lastRandom * a + c)\n            .truncatingRemainder(dividingBy:m))\n        return lastRandom / m\n    }\n}\n```\nBesides, we can not limit protocol adoption to structures or enumerations types like that:\n```Swift\nprotocol RandomNumberGenerator : LinearGeneratorA, Generator {\n    func random() -> Double\n}\nstruct LinearGeneratorA: RandomNumberGenerator {\n    var lastRandom = 42.0\n    let m = 1000.0\n    let a = 3877.0\n    let c = 29573.0\n    func random() -> Double {\n        lastRandom = ((lastRandom * a + c)\n            .truncatingRemainder(dividingBy:m))\n        return lastRandom / m\n    }\n} // this is wrong.\n```\n\n#### <font size=3 color=gray>*Reference*</font>\n[1] <https://docs.swift.org/swift-book/LanguageGuide/Protocols.html>  \n[2] <https://blog.csdn.net/Forever_wj/article/details/118767086>\n","source":"_posts/Swift/04. Protocols/00. Summary of Protocols.md","raw":"---\ntitle: 00. Summary of Protocols\ndate: 2023-03-7 20:00:00\ncategories: \n- [Swift, 04. Protocols]\ntags:\n- protocol\n---\n\nProtocols in Swift have many special characters, So I summarize them here to make it clear.\n\n#### <font size=3 color=#4169E1>1. Property Requirements</font>\n\n<font size=2 color=#4169E1>1.1 'var' keyword always be with the properties.</font>      \nFirstly, Property requirements are always declared as variable properties, prefixed with the <strong>var</strong> keyword. Gettable and settable properties are indicated by writing { get set } after their type declaration, and gettable properties are indicated by writing { get }.   \n<font size=2 color=#4169E1>1.2 'mutating' keyword not be forgotten.</font>      \nSecondly, If you define a protocol instance method requirement that’s intended to mutate instances of any type that adopts the protocol, mark the method with the <strong>mutating</strong> keyword as part of the protocol’s definition. \n\n```Swift \nprotocol SomeProtocol {\n    var mustBeSettable: Int { get set }\n    var doesNotNeedToBeSettable: Int { get }\n    mutating func toggle()\n}\n```\n \n#### <font size=3 color=#4169E1>2. Extension and Protocol</font>\n<font size=2 color=#4169E1>2.1 Extend an existing type without accessing source code.</font>      \n1.1 Extend an existing type \nYou can extend an existing type to adopt and conform to a new protocol, even if you don’t have access to the source code for the existing type.\n```Swift\nprotocol TextRepresentable {\n    var textualDescription: String { get }\n}\nextension Dice: TextRepresentable {\n    var textualDescription: String {\n        return \"A \\(sides)-sided dice\"\n    }\n}\n```\n<font size=2 color=#4169E1>2.2 Declaring Protocol Adoption with an Extension.</font>     \nIf a type already conforms to all of the requirements of a protocol, but hasn’t yet stated that it adopts that protocol, you can make it adopt the protocol with an empty extension:\n```Swift\nstruct Hamster {\n    var name: String\n    var textualDescription: String {\n        return \"A hamster named \\(name)\"\n    }\n}\nextension Hamster: TextRepresentable {}\n``` \n<font size=2 color=#4169E1>2.3 Protocol Extensions.</font>    \nProtocols can be extended directly to provide method, initializer, subscript, and computed property implementations to conforming types. This allows you to define behavior on protocols themselves, rather than in each type’s individual conformance or in a global function.\n```Swift\nprotocol RandomNumberGenerator {\n    func random() -> Double\n}\n\nextension RandomNumberGenerator {\n    func randomBool() -> Bool {\n        return random() > 0.5\n    }\n}\n\n```\n<details>\n<summary>Example Code Details</summary>\n\n```Swift\nprotocol RandomNumberGenerator {\n    func random() -> Double\n}\n\nextension RandomNumberGenerator {\n    func randomBool() -> Bool {\n        return random() > 0.5\n    }\n}\n\nclass LinearGeneratorA: RandomNumberGenerator {\n    var lastRandom = 42.0\n    let m = 1000.0\n    let a = 3877.0\n    let c = 29573.0\n    func random() -> Double {\n        lastRandom = ((lastRandom * a + c)\n            .truncatingRemainder(dividingBy:m))\n        return lastRandom / m\n    }\n}\n\nclass LinearGeneratorB: RandomNumberGenerator {\n    var lastRandom = 42.0\n    let m = 2000.0\n    let a = 3877.0\n    let c = 29573.0\n    func random() -> Double {\n        lastRandom = ((lastRandom * a + c)\n            .truncatingRemainder(dividingBy:m))\n        return lastRandom / m\n    }\n}\n\n//Verify as follows:\nlet generatorA = LinearGeneratorA()\nprint(\"Here's a random number A: \\(generatorA.random())\")\nprint(\"And here's a random Boolean A: \\(generatorA.randomBool())\")\n\nlet generatorB = LinearGeneratorB()\nprint(\"Here's a random number B: \\(generatorB.random())\")\nprint(\"And here's a random Boolean B: \\(generatorB.randomBool())\")\n```\n</details>\nYou can use protocol extensions to provide a default implementation to any method or computed property requirement of that protocol.\n\n#### <font size=3 color=#4169E1> 3. Class-Only Protocols</font>\nYou can limit protocol adoption to class types (and not structures or enumerations) by adding the AnyObject protocol to a protocol’s inheritance list.\n```Swift\nprotocol Generator {\n}\nprotocol RandomNumberGenerator : LinearGeneratorA, Generator {\n    func random() -> Double\n}\nclass LinearGeneratorA: RandomNumberGenerator {\n    var lastRandom = 42.0\n    let m = 1000.0\n    let a = 3877.0\n    let c = 29573.0\n    func random() -> Double {\n        lastRandom = ((lastRandom * a + c)\n            .truncatingRemainder(dividingBy:m))\n        return lastRandom / m\n    }\n}\n```\nAnd It will be report errors if you try to do like as follows:\n```Swift\nclass LinearGeneratorB: RandomNumberGenerator {\n    var lastRandom = 42.0\n    let m = 2000.0\n    let a = 3877.0\n    let c = 29573.0\n    func random() -> Double {\n        lastRandom = ((lastRandom * a + c)\n            .truncatingRemainder(dividingBy:m))\n        return lastRandom / m\n    }\n}\n```\nBesides, we can not limit protocol adoption to structures or enumerations types like that:\n```Swift\nprotocol RandomNumberGenerator : LinearGeneratorA, Generator {\n    func random() -> Double\n}\nstruct LinearGeneratorA: RandomNumberGenerator {\n    var lastRandom = 42.0\n    let m = 1000.0\n    let a = 3877.0\n    let c = 29573.0\n    func random() -> Double {\n        lastRandom = ((lastRandom * a + c)\n            .truncatingRemainder(dividingBy:m))\n        return lastRandom / m\n    }\n} // this is wrong.\n```\n\n#### <font size=3 color=gray>*Reference*</font>\n[1] <https://docs.swift.org/swift-book/LanguageGuide/Protocols.html>  \n[2] <https://blog.csdn.net/Forever_wj/article/details/118767086>\n","slug":"Swift/04. Protocols/00. Summary of Protocols","published":1,"updated":"2023-08-18T10:47:32.727Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clm7w97rq001ykb0m50oegkxs","content":"<p>Protocols in Swift have many special characters, So I summarize them here to make it clear.</p>\n<h4 id=\"1-Property-Requirements\"><a href=\"#1-Property-Requirements\" class=\"headerlink\" title=\"1. Property Requirements\"></a><font size=3 color=#4169E1>1. Property Requirements</font></h4><p><font size=2 color=#4169E1>1.1 ‘var’ keyword always be with the properties.</font><br>Firstly, Property requirements are always declared as variable properties, prefixed with the <strong>var</strong> keyword. Gettable and settable properties are indicated by writing { get set } after their type declaration, and gettable properties are indicated by writing { get }.<br><font size=2 color=#4169E1>1.2 ‘mutating’ keyword not be forgotten.</font><br>Secondly, If you define a protocol instance method requirement that’s intended to mutate instances of any type that adopts the protocol, mark the method with the <strong>mutating</strong> keyword as part of the protocol’s definition. </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protocol</span> <span class=\"title class_\">SomeProtocol</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> mustBeSettable: <span class=\"type\">Int</span> &#123; <span class=\"keyword\">get</span> <span class=\"keyword\">set</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> doesNotNeedToBeSettable: <span class=\"type\">Int</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">toggle</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-Extension-and-Protocol\"><a href=\"#2-Extension-and-Protocol\" class=\"headerlink\" title=\"2. Extension and Protocol\"></a><font size=3 color=#4169E1>2. Extension and Protocol</font></h4><p><font size=2 color=#4169E1>2.1 Extend an existing type without accessing source code.</font><br>1.1 Extend an existing type<br>You can extend an existing type to adopt and conform to a new protocol, even if you don’t have access to the source code for the existing type.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protocol</span> <span class=\"title class_\">TextRepresentable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> textualDescription: <span class=\"type\">String</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">Dice</span>: <span class=\"title class_\">TextRepresentable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> textualDescription: <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;A <span class=\"subst\">\\(sides)</span>-sided dice&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><font size=2 color=#4169E1>2.2 Declaring Protocol Adoption with an Extension.</font><br>If a type already conforms to all of the requirements of a protocol, but hasn’t yet stated that it adopts that protocol, you can make it adopt the protocol with an empty extension:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Hamster</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> textualDescription: <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;A hamster named <span class=\"subst\">\\(name)</span>&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">Hamster</span>: <span class=\"title class_\">TextRepresentable</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p><font size=2 color=#4169E1>2.3 Protocol Extensions.</font><br>Protocols can be extended directly to provide method, initializer, subscript, and computed property implementations to conforming types. This allows you to define behavior on protocols themselves, rather than in each type’s individual conformance or in a global function.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protocol</span> <span class=\"title class_\">RandomNumberGenerator</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">random</span>() -&gt; <span class=\"type\">Double</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">RandomNumberGenerator</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">randomBool</span>() -&gt; <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> random() <span class=\"operator\">&gt;</span> <span class=\"number\">0.5</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<details>\n<summary>Example Code Details</summary>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protocol</span> <span class=\"title class_\">RandomNumberGenerator</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">random</span>() -&gt; <span class=\"type\">Double</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">RandomNumberGenerator</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">randomBool</span>() -&gt; <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> random() <span class=\"operator\">&gt;</span> <span class=\"number\">0.5</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LinearGeneratorA</span>: <span class=\"title class_\">RandomNumberGenerator</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> lastRandom <span class=\"operator\">=</span> <span class=\"number\">42.0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> m <span class=\"operator\">=</span> <span class=\"number\">1000.0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> a <span class=\"operator\">=</span> <span class=\"number\">3877.0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> c <span class=\"operator\">=</span> <span class=\"number\">29573.0</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">random</span>() -&gt; <span class=\"type\">Double</span> &#123;</span><br><span class=\"line\">        lastRandom <span class=\"operator\">=</span> ((lastRandom <span class=\"operator\">*</span> a <span class=\"operator\">+</span> c)</span><br><span class=\"line\">            .truncatingRemainder(dividingBy:m))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lastRandom <span class=\"operator\">/</span> m</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LinearGeneratorB</span>: <span class=\"title class_\">RandomNumberGenerator</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> lastRandom <span class=\"operator\">=</span> <span class=\"number\">42.0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> m <span class=\"operator\">=</span> <span class=\"number\">2000.0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> a <span class=\"operator\">=</span> <span class=\"number\">3877.0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> c <span class=\"operator\">=</span> <span class=\"number\">29573.0</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">random</span>() -&gt; <span class=\"type\">Double</span> &#123;</span><br><span class=\"line\">        lastRandom <span class=\"operator\">=</span> ((lastRandom <span class=\"operator\">*</span> a <span class=\"operator\">+</span> c)</span><br><span class=\"line\">            .truncatingRemainder(dividingBy:m))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lastRandom <span class=\"operator\">/</span> m</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Verify as follows:</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> generatorA <span class=\"operator\">=</span> <span class=\"type\">LinearGeneratorA</span>()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Here&#x27;s a random number A: <span class=\"subst\">\\(generatorA.random())</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;And here&#x27;s a random Boolean A: <span class=\"subst\">\\(generatorA.randomBool())</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> generatorB <span class=\"operator\">=</span> <span class=\"type\">LinearGeneratorB</span>()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Here&#x27;s a random number B: <span class=\"subst\">\\(generatorB.random())</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;And here&#x27;s a random Boolean B: <span class=\"subst\">\\(generatorB.randomBool())</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n</details>\nYou can use protocol extensions to provide a default implementation to any method or computed property requirement of that protocol.\n\n<h4 id=\"3-Class-Only-Protocols\"><a href=\"#3-Class-Only-Protocols\" class=\"headerlink\" title=\" 3. Class-Only Protocols\"></a><font size=3 color=#4169E1> 3. Class-Only Protocols</font></h4><p>You can limit protocol adoption to class types (and not structures or enumerations) by adding the AnyObject protocol to a protocol’s inheritance list.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protocol</span> <span class=\"title class_\">Generator</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">protocol</span> <span class=\"title class_\">RandomNumberGenerator</span> : <span class=\"title class_\">LinearGeneratorA</span>, <span class=\"title class_\">Generator</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">random</span>() -&gt; <span class=\"type\">Double</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LinearGeneratorA</span>: <span class=\"title class_\">RandomNumberGenerator</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> lastRandom <span class=\"operator\">=</span> <span class=\"number\">42.0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> m <span class=\"operator\">=</span> <span class=\"number\">1000.0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> a <span class=\"operator\">=</span> <span class=\"number\">3877.0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> c <span class=\"operator\">=</span> <span class=\"number\">29573.0</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">random</span>() -&gt; <span class=\"type\">Double</span> &#123;</span><br><span class=\"line\">        lastRandom <span class=\"operator\">=</span> ((lastRandom <span class=\"operator\">*</span> a <span class=\"operator\">+</span> c)</span><br><span class=\"line\">            .truncatingRemainder(dividingBy:m))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lastRandom <span class=\"operator\">/</span> m</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>And It will be report errors if you try to do like as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LinearGeneratorB</span>: <span class=\"title class_\">RandomNumberGenerator</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> lastRandom <span class=\"operator\">=</span> <span class=\"number\">42.0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> m <span class=\"operator\">=</span> <span class=\"number\">2000.0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> a <span class=\"operator\">=</span> <span class=\"number\">3877.0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> c <span class=\"operator\">=</span> <span class=\"number\">29573.0</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">random</span>() -&gt; <span class=\"type\">Double</span> &#123;</span><br><span class=\"line\">        lastRandom <span class=\"operator\">=</span> ((lastRandom <span class=\"operator\">*</span> a <span class=\"operator\">+</span> c)</span><br><span class=\"line\">            .truncatingRemainder(dividingBy:m))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lastRandom <span class=\"operator\">/</span> m</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Besides, we can not limit protocol adoption to structures or enumerations types like that:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protocol</span> <span class=\"title class_\">RandomNumberGenerator</span> : <span class=\"title class_\">LinearGeneratorA</span>, <span class=\"title class_\">Generator</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">random</span>() -&gt; <span class=\"type\">Double</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">LinearGeneratorA</span>: <span class=\"title class_\">RandomNumberGenerator</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> lastRandom <span class=\"operator\">=</span> <span class=\"number\">42.0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> m <span class=\"operator\">=</span> <span class=\"number\">1000.0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> a <span class=\"operator\">=</span> <span class=\"number\">3877.0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> c <span class=\"operator\">=</span> <span class=\"number\">29573.0</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">random</span>() -&gt; <span class=\"type\">Double</span> &#123;</span><br><span class=\"line\">        lastRandom <span class=\"operator\">=</span> ((lastRandom <span class=\"operator\">*</span> a <span class=\"operator\">+</span> c)</span><br><span class=\"line\">            .truncatingRemainder(dividingBy:m))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lastRandom <span class=\"operator\">/</span> m</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"comment\">// this is wrong.</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://docs.swift.org/swift-book/LanguageGuide/Protocols.html\">https://docs.swift.org/swift-book/LanguageGuide/Protocols.html</a><br>[2] <a href=\"https://blog.csdn.net/Forever_wj/article/details/118767086\">https://blog.csdn.net/Forever_wj/article/details/118767086</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Protocols in Swift have many special characters, So I summarize them here to make it clear.</p>\n<h4 id=\"1-Property-Requirements\"><a href=\"#1-Property-Requirements\" class=\"headerlink\" title=\"1. Property Requirements\"></a><font size=3 color=#4169E1>1. Property Requirements</font></h4><p><font size=2 color=#4169E1>1.1 ‘var’ keyword always be with the properties.</font><br>Firstly, Property requirements are always declared as variable properties, prefixed with the <strong>var</strong> keyword. Gettable and settable properties are indicated by writing { get set } after their type declaration, and gettable properties are indicated by writing { get }.<br><font size=2 color=#4169E1>1.2 ‘mutating’ keyword not be forgotten.</font><br>Secondly, If you define a protocol instance method requirement that’s intended to mutate instances of any type that adopts the protocol, mark the method with the <strong>mutating</strong> keyword as part of the protocol’s definition. </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protocol</span> <span class=\"title class_\">SomeProtocol</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> mustBeSettable: <span class=\"type\">Int</span> &#123; <span class=\"keyword\">get</span> <span class=\"keyword\">set</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> doesNotNeedToBeSettable: <span class=\"type\">Int</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">toggle</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-Extension-and-Protocol\"><a href=\"#2-Extension-and-Protocol\" class=\"headerlink\" title=\"2. Extension and Protocol\"></a><font size=3 color=#4169E1>2. Extension and Protocol</font></h4><p><font size=2 color=#4169E1>2.1 Extend an existing type without accessing source code.</font><br>1.1 Extend an existing type<br>You can extend an existing type to adopt and conform to a new protocol, even if you don’t have access to the source code for the existing type.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protocol</span> <span class=\"title class_\">TextRepresentable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> textualDescription: <span class=\"type\">String</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">Dice</span>: <span class=\"title class_\">TextRepresentable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> textualDescription: <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;A <span class=\"subst\">\\(sides)</span>-sided dice&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><font size=2 color=#4169E1>2.2 Declaring Protocol Adoption with an Extension.</font><br>If a type already conforms to all of the requirements of a protocol, but hasn’t yet stated that it adopts that protocol, you can make it adopt the protocol with an empty extension:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Hamster</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> textualDescription: <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;A hamster named <span class=\"subst\">\\(name)</span>&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">Hamster</span>: <span class=\"title class_\">TextRepresentable</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p><font size=2 color=#4169E1>2.3 Protocol Extensions.</font><br>Protocols can be extended directly to provide method, initializer, subscript, and computed property implementations to conforming types. This allows you to define behavior on protocols themselves, rather than in each type’s individual conformance or in a global function.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protocol</span> <span class=\"title class_\">RandomNumberGenerator</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">random</span>() -&gt; <span class=\"type\">Double</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">RandomNumberGenerator</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">randomBool</span>() -&gt; <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> random() <span class=\"operator\">&gt;</span> <span class=\"number\">0.5</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<details>\n<summary>Example Code Details</summary>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protocol</span> <span class=\"title class_\">RandomNumberGenerator</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">random</span>() -&gt; <span class=\"type\">Double</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">RandomNumberGenerator</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">randomBool</span>() -&gt; <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> random() <span class=\"operator\">&gt;</span> <span class=\"number\">0.5</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LinearGeneratorA</span>: <span class=\"title class_\">RandomNumberGenerator</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> lastRandom <span class=\"operator\">=</span> <span class=\"number\">42.0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> m <span class=\"operator\">=</span> <span class=\"number\">1000.0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> a <span class=\"operator\">=</span> <span class=\"number\">3877.0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> c <span class=\"operator\">=</span> <span class=\"number\">29573.0</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">random</span>() -&gt; <span class=\"type\">Double</span> &#123;</span><br><span class=\"line\">        lastRandom <span class=\"operator\">=</span> ((lastRandom <span class=\"operator\">*</span> a <span class=\"operator\">+</span> c)</span><br><span class=\"line\">            .truncatingRemainder(dividingBy:m))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lastRandom <span class=\"operator\">/</span> m</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LinearGeneratorB</span>: <span class=\"title class_\">RandomNumberGenerator</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> lastRandom <span class=\"operator\">=</span> <span class=\"number\">42.0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> m <span class=\"operator\">=</span> <span class=\"number\">2000.0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> a <span class=\"operator\">=</span> <span class=\"number\">3877.0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> c <span class=\"operator\">=</span> <span class=\"number\">29573.0</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">random</span>() -&gt; <span class=\"type\">Double</span> &#123;</span><br><span class=\"line\">        lastRandom <span class=\"operator\">=</span> ((lastRandom <span class=\"operator\">*</span> a <span class=\"operator\">+</span> c)</span><br><span class=\"line\">            .truncatingRemainder(dividingBy:m))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lastRandom <span class=\"operator\">/</span> m</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Verify as follows:</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> generatorA <span class=\"operator\">=</span> <span class=\"type\">LinearGeneratorA</span>()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Here&#x27;s a random number A: <span class=\"subst\">\\(generatorA.random())</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;And here&#x27;s a random Boolean A: <span class=\"subst\">\\(generatorA.randomBool())</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> generatorB <span class=\"operator\">=</span> <span class=\"type\">LinearGeneratorB</span>()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Here&#x27;s a random number B: <span class=\"subst\">\\(generatorB.random())</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;And here&#x27;s a random Boolean B: <span class=\"subst\">\\(generatorB.randomBool())</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n</details>\nYou can use protocol extensions to provide a default implementation to any method or computed property requirement of that protocol.\n\n<h4 id=\"3-Class-Only-Protocols\"><a href=\"#3-Class-Only-Protocols\" class=\"headerlink\" title=\" 3. Class-Only Protocols\"></a><font size=3 color=#4169E1> 3. Class-Only Protocols</font></h4><p>You can limit protocol adoption to class types (and not structures or enumerations) by adding the AnyObject protocol to a protocol’s inheritance list.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protocol</span> <span class=\"title class_\">Generator</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">protocol</span> <span class=\"title class_\">RandomNumberGenerator</span> : <span class=\"title class_\">LinearGeneratorA</span>, <span class=\"title class_\">Generator</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">random</span>() -&gt; <span class=\"type\">Double</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LinearGeneratorA</span>: <span class=\"title class_\">RandomNumberGenerator</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> lastRandom <span class=\"operator\">=</span> <span class=\"number\">42.0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> m <span class=\"operator\">=</span> <span class=\"number\">1000.0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> a <span class=\"operator\">=</span> <span class=\"number\">3877.0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> c <span class=\"operator\">=</span> <span class=\"number\">29573.0</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">random</span>() -&gt; <span class=\"type\">Double</span> &#123;</span><br><span class=\"line\">        lastRandom <span class=\"operator\">=</span> ((lastRandom <span class=\"operator\">*</span> a <span class=\"operator\">+</span> c)</span><br><span class=\"line\">            .truncatingRemainder(dividingBy:m))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lastRandom <span class=\"operator\">/</span> m</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>And It will be report errors if you try to do like as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LinearGeneratorB</span>: <span class=\"title class_\">RandomNumberGenerator</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> lastRandom <span class=\"operator\">=</span> <span class=\"number\">42.0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> m <span class=\"operator\">=</span> <span class=\"number\">2000.0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> a <span class=\"operator\">=</span> <span class=\"number\">3877.0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> c <span class=\"operator\">=</span> <span class=\"number\">29573.0</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">random</span>() -&gt; <span class=\"type\">Double</span> &#123;</span><br><span class=\"line\">        lastRandom <span class=\"operator\">=</span> ((lastRandom <span class=\"operator\">*</span> a <span class=\"operator\">+</span> c)</span><br><span class=\"line\">            .truncatingRemainder(dividingBy:m))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lastRandom <span class=\"operator\">/</span> m</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Besides, we can not limit protocol adoption to structures or enumerations types like that:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protocol</span> <span class=\"title class_\">RandomNumberGenerator</span> : <span class=\"title class_\">LinearGeneratorA</span>, <span class=\"title class_\">Generator</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">random</span>() -&gt; <span class=\"type\">Double</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">LinearGeneratorA</span>: <span class=\"title class_\">RandomNumberGenerator</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> lastRandom <span class=\"operator\">=</span> <span class=\"number\">42.0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> m <span class=\"operator\">=</span> <span class=\"number\">1000.0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> a <span class=\"operator\">=</span> <span class=\"number\">3877.0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> c <span class=\"operator\">=</span> <span class=\"number\">29573.0</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">random</span>() -&gt; <span class=\"type\">Double</span> &#123;</span><br><span class=\"line\">        lastRandom <span class=\"operator\">=</span> ((lastRandom <span class=\"operator\">*</span> a <span class=\"operator\">+</span> c)</span><br><span class=\"line\">            .truncatingRemainder(dividingBy:m))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lastRandom <span class=\"operator\">/</span> m</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"comment\">// this is wrong.</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://docs.swift.org/swift-book/LanguageGuide/Protocols.html\">https://docs.swift.org/swift-book/LanguageGuide/Protocols.html</a><br>[2] <a href=\"https://blog.csdn.net/Forever_wj/article/details/118767086\">https://blog.csdn.net/Forever_wj/article/details/118767086</a></p>\n"},{"title":"01. Summary of the keyword 'associatedtype'","date":"2023-03-08T19:00:00.000Z","_content":"\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\n\nIn Swift, When defining a protocol, we can’t use generics in a protocol as in a class. The following code is incorrect and will be reported as an error.\n\n<strong> Example Code </strong>\n```Swift \nprotocol Stackble <Element> { \n    mutating func push(_ element:Element)\n    mutating func pop()->Element\n    func top() ->Element\n    func size() ->Int\n}\n```\n  \nTherefore, associated types can solve this problem in Swift. It’s sometimes useful to declare one or more associated types as part of the protocol’s definition. An associated type gives a placeholder name to a type that’s used as part of the protocol. The actual type to use for that associated type isn’t specified until the protocol is adopted. Associated types are specified with the associatedtype keyword.\n\n<strong> Example Code </strong>\n```Swift \nprotocol Stackble {    \n    associatedtype Element \n    mutating func push(_ element:Element)\n    mutating func pop()->Element\n    func top() ->Element\n    func size() ->Int\n}\n```\nAssociated types can be applied in situations as follows:\n## **<font size=3 >1. Associated type be replaced by concrete type </font>**\n \n<strong> Example Code </strong>\n```Swift \nclass StringStack: Stackble {\n    //typealias String = Element\n    var elements = [String]()\n    func push(_ element:String){   \n        \n        elements.append(element)\n    }\n    func pop()->String{\n        elements.removeLast()\n    }\n    func top() ->String{\n        elements.last!\n    }\n    func size() ->Int{\n        elements.count\n    }\n}\n```\nThanks to Swift’s type inference, we don’t actually need to declare a concrete Element of String as part of the definition of StringStack. \n\n## **<font size=3 >2. Associated type be replaced by generic type </font>**\nIn a class with generics, generic types replace association types.\n\n<strong> Example Code </strong>\n```Swift \nclass Stack <E>: Stackble {\n    //typealias E = Element\n    var elements = [E]()  \n     func push(_ element:E) {   \n        elements.append(element)\n    }\n     func pop()->E{\n        elements.removeLast()\n    }\n    func top() ->E{\n        elements.last!\n    }\n    func size() ->Int{\n        elements.count\n    }\n}\n```\n\n## **<font size=3 >3. Points for Attention </font>**\n\nA protocol contains associated types cannot be used as return values and function parameters.\n```Swift \n protocol Runnable {\n    // without any associated types\n }\n class Person : Runnable {\n     \n }\n class Car : Runnable {\n     \n }\n func get(_ type:Int) -> Runnable {\n     if(0 == type) {\n         return Person()\n     }\n     return Car()\n }\n //call as follows:\nvar r1 = get(0) \nvar r2 = get(1)\nprint(\"r1=\",r1)\nprint(\"r2=\",r2)\n//everything is ok now\n ```\nThe following is the code of compilation error.\n```Swift\nprotocol Runnable {\n    associatedtype Speed\n    var speed : Speed {get}\n    \n}\nclass Person:Runnable {\n    var speed: Double = 0.0\n}\nclass Car:Runnable {\n    var speed: Double = 0.0\n}\n\n// this code will be reported an error\nfunc get (run: Runnable) {}\n// this code will be reported an error too.\nfunc get(_ type:Int) -> Runnable { \n    if(0 == type ){\n        return Person()\n    }\n    return Car()\n}\n```\nWe can fix this point just by a generic Type that conform to the protocol.\n```Swift \nfunc get<T:Runnable>(_ type:Int)-> T {  \n    if  0 == type {\n        let result = Person() as! T\n        return result\n    }\n    return Car() as! T\n}\n```\n\n#### <font size=3 color=gray>*Reference*</font>\n[1] <https://docs.swift.org/swift-book/LanguageGuide/Generics.html>\n[2] <https://blog.csdn.net/boildoctor/article/details/113116245>\n\n\n\n\n\n","source":"_posts/Swift/04. Protocols/01. Associatedtype.md","raw":"---\ntitle: 01. Summary of the keyword 'associatedtype'\ndate: 2023-03-8 20:00:00\ncategories: \n- [Swift, 04. Protocols]\ntags:\n- protocol\n- associatedtype\n---\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\n\nIn Swift, When defining a protocol, we can’t use generics in a protocol as in a class. The following code is incorrect and will be reported as an error.\n\n<strong> Example Code </strong>\n```Swift \nprotocol Stackble <Element> { \n    mutating func push(_ element:Element)\n    mutating func pop()->Element\n    func top() ->Element\n    func size() ->Int\n}\n```\n  \nTherefore, associated types can solve this problem in Swift. It’s sometimes useful to declare one or more associated types as part of the protocol’s definition. An associated type gives a placeholder name to a type that’s used as part of the protocol. The actual type to use for that associated type isn’t specified until the protocol is adopted. Associated types are specified with the associatedtype keyword.\n\n<strong> Example Code </strong>\n```Swift \nprotocol Stackble {    \n    associatedtype Element \n    mutating func push(_ element:Element)\n    mutating func pop()->Element\n    func top() ->Element\n    func size() ->Int\n}\n```\nAssociated types can be applied in situations as follows:\n## **<font size=3 >1. Associated type be replaced by concrete type </font>**\n \n<strong> Example Code </strong>\n```Swift \nclass StringStack: Stackble {\n    //typealias String = Element\n    var elements = [String]()\n    func push(_ element:String){   \n        \n        elements.append(element)\n    }\n    func pop()->String{\n        elements.removeLast()\n    }\n    func top() ->String{\n        elements.last!\n    }\n    func size() ->Int{\n        elements.count\n    }\n}\n```\nThanks to Swift’s type inference, we don’t actually need to declare a concrete Element of String as part of the definition of StringStack. \n\n## **<font size=3 >2. Associated type be replaced by generic type </font>**\nIn a class with generics, generic types replace association types.\n\n<strong> Example Code </strong>\n```Swift \nclass Stack <E>: Stackble {\n    //typealias E = Element\n    var elements = [E]()  \n     func push(_ element:E) {   \n        elements.append(element)\n    }\n     func pop()->E{\n        elements.removeLast()\n    }\n    func top() ->E{\n        elements.last!\n    }\n    func size() ->Int{\n        elements.count\n    }\n}\n```\n\n## **<font size=3 >3. Points for Attention </font>**\n\nA protocol contains associated types cannot be used as return values and function parameters.\n```Swift \n protocol Runnable {\n    // without any associated types\n }\n class Person : Runnable {\n     \n }\n class Car : Runnable {\n     \n }\n func get(_ type:Int) -> Runnable {\n     if(0 == type) {\n         return Person()\n     }\n     return Car()\n }\n //call as follows:\nvar r1 = get(0) \nvar r2 = get(1)\nprint(\"r1=\",r1)\nprint(\"r2=\",r2)\n//everything is ok now\n ```\nThe following is the code of compilation error.\n```Swift\nprotocol Runnable {\n    associatedtype Speed\n    var speed : Speed {get}\n    \n}\nclass Person:Runnable {\n    var speed: Double = 0.0\n}\nclass Car:Runnable {\n    var speed: Double = 0.0\n}\n\n// this code will be reported an error\nfunc get (run: Runnable) {}\n// this code will be reported an error too.\nfunc get(_ type:Int) -> Runnable { \n    if(0 == type ){\n        return Person()\n    }\n    return Car()\n}\n```\nWe can fix this point just by a generic Type that conform to the protocol.\n```Swift \nfunc get<T:Runnable>(_ type:Int)-> T {  \n    if  0 == type {\n        let result = Person() as! T\n        return result\n    }\n    return Car() as! T\n}\n```\n\n#### <font size=3 color=gray>*Reference*</font>\n[1] <https://docs.swift.org/swift-book/LanguageGuide/Generics.html>\n[2] <https://blog.csdn.net/boildoctor/article/details/113116245>\n\n\n\n\n\n","slug":"Swift/04. Protocols/01. Associatedtype","published":1,"updated":"2023-08-18T10:47:39.588Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clm7w97rq0021kb0mfs99fipe","content":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>In Swift, When defining a protocol, we can’t use generics in a protocol as in a class. The following code is incorrect and will be reported as an error.</p>\n<p><strong> Example Code </strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protocol</span> <span class=\"title class_\">Stackble</span> &lt;<span class=\"title class_\">Element</span>&gt; &#123; </span><br><span class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">push</span>(<span class=\"keyword\">_</span> <span class=\"params\">element</span>:<span class=\"type\">Element</span>)</span><br><span class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">pop</span>()-&gt;<span class=\"type\">Element</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">top</span>() -&gt;<span class=\"type\">Element</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">size</span>() -&gt;<span class=\"type\">Int</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Therefore, associated types can solve this problem in Swift. It’s sometimes useful to declare one or more associated types as part of the protocol’s definition. An associated type gives a placeholder name to a type that’s used as part of the protocol. The actual type to use for that associated type isn’t specified until the protocol is adopted. Associated types are specified with the associatedtype keyword.</p>\n<p><strong> Example Code </strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protocol</span> <span class=\"title class_\">Stackble</span> &#123;    </span><br><span class=\"line\">    <span class=\"keyword\">associatedtype</span> <span class=\"type\">Element</span> </span><br><span class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">push</span>(<span class=\"keyword\">_</span> <span class=\"params\">element</span>:<span class=\"type\">Element</span>)</span><br><span class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">pop</span>()-&gt;<span class=\"type\">Element</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">top</span>() -&gt;<span class=\"type\">Element</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">size</span>() -&gt;<span class=\"type\">Int</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Associated types can be applied in situations as follows:</p>\n<h2 id=\"1-Associated-type-be-replaced-by-concrete-type\"><a href=\"#1-Associated-type-be-replaced-by-concrete-type\" class=\"headerlink\" title=\"1. Associated type be replaced by concrete type \"></a><strong><font size=3 >1. Associated type be replaced by concrete type </font></strong></h2><p><strong> Example Code </strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">StringStack</span>: <span class=\"title class_\">Stackble</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//typealias String = Element</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> elements <span class=\"operator\">=</span> [<span class=\"type\">String</span>]()</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">push</span>(<span class=\"keyword\">_</span> <span class=\"params\">element</span>:<span class=\"type\">String</span>)&#123;   </span><br><span class=\"line\">        </span><br><span class=\"line\">        elements.append(element)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">pop</span>()-&gt;<span class=\"type\">String</span>&#123;</span><br><span class=\"line\">        elements.removeLast()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">top</span>() -&gt;<span class=\"type\">String</span>&#123;</span><br><span class=\"line\">        elements.last<span class=\"operator\">!</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">size</span>() -&gt;<span class=\"type\">Int</span>&#123;</span><br><span class=\"line\">        elements.count</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Thanks to Swift’s type inference, we don’t actually need to declare a concrete Element of String as part of the definition of StringStack. </p>\n<h2 id=\"2-Associated-type-be-replaced-by-generic-type\"><a href=\"#2-Associated-type-be-replaced-by-generic-type\" class=\"headerlink\" title=\"2. Associated type be replaced by generic type \"></a><strong><font size=3 >2. Associated type be replaced by generic type </font></strong></h2><p>In a class with generics, generic types replace association types.</p>\n<p><strong> Example Code </strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Stack</span> &lt;<span class=\"title class_\">E</span>&gt;: <span class=\"title class_\">Stackble</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//typealias E = Element</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> elements <span class=\"operator\">=</span> [<span class=\"type\">E</span>]()  </span><br><span class=\"line\">     <span class=\"keyword\">func</span> <span class=\"title function_\">push</span>(<span class=\"keyword\">_</span> <span class=\"params\">element</span>:<span class=\"type\">E</span>) &#123;   </span><br><span class=\"line\">        elements.append(element)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     <span class=\"keyword\">func</span> <span class=\"title function_\">pop</span>()-&gt;<span class=\"type\">E</span>&#123;</span><br><span class=\"line\">        elements.removeLast()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">top</span>() -&gt;<span class=\"type\">E</span>&#123;</span><br><span class=\"line\">        elements.last<span class=\"operator\">!</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">size</span>() -&gt;<span class=\"type\">Int</span>&#123;</span><br><span class=\"line\">        elements.count</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-Points-for-Attention\"><a href=\"#3-Points-for-Attention\" class=\"headerlink\" title=\"3. Points for Attention \"></a><strong><font size=3 >3. Points for Attention </font></strong></h2><p>A protocol contains associated types cannot be used as return values and function parameters.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">protocol</span> <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// without any associated types</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> : <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\">     </span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">class</span> <span class=\"title class_\">Car</span> : <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\">     </span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">func</span> <span class=\"title function_\">get</span>(<span class=\"keyword\">_</span> <span class=\"params\">type</span>:<span class=\"type\">Int</span>) -&gt; <span class=\"type\">Runnable</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(<span class=\"number\">0</span> <span class=\"operator\">==</span> type) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"type\">Person</span>()</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"type\">Car</span>()</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"comment\">//call as follows:</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> r1 <span class=\"operator\">=</span> <span class=\"keyword\">get</span>(<span class=\"number\">0</span>) </span><br><span class=\"line\"><span class=\"keyword\">var</span> r2 <span class=\"operator\">=</span> <span class=\"keyword\">get</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;r1=&quot;</span>,r1)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;r2=&quot;</span>,r2)</span><br><span class=\"line\"><span class=\"comment\">//everything is ok now</span></span><br></pre></td></tr></table></figure>\n<p>The following is the code of compilation error.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protocol</span> <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">associatedtype</span> <span class=\"type\">Speed</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> speed : <span class=\"type\">Speed</span> &#123;<span class=\"keyword\">get</span>&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>:<span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> speed: <span class=\"type\">Double</span> <span class=\"operator\">=</span> <span class=\"number\">0.0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Car</span>:<span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> speed: <span class=\"type\">Double</span> <span class=\"operator\">=</span> <span class=\"number\">0.0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// this code will be reported an error</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">get</span> (<span class=\"params\">run</span>: <span class=\"type\">Runnable</span>) &#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">// this code will be reported an error too.</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">get</span>(<span class=\"keyword\">_</span> <span class=\"params\">type</span>:<span class=\"type\">Int</span>) -&gt; <span class=\"type\">Runnable</span> &#123; </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"number\">0</span> <span class=\"operator\">==</span> type )&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">Person</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Car</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>We can fix this point just by a generic Type that conform to the protocol.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">get</span>&lt;<span class=\"type\">T</span>:<span class=\"type\">Runnable</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">type</span>:<span class=\"type\">Int</span>)-&gt; <span class=\"type\">T</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span>  <span class=\"number\">0</span> <span class=\"operator\">==</span> type &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> result <span class=\"operator\">=</span> <span class=\"type\">Person</span>() <span class=\"keyword\">as!</span> <span class=\"type\">T</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Car</span>() <span class=\"keyword\">as!</span> <span class=\"type\">T</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://docs.swift.org/swift-book/LanguageGuide/Generics.html\">https://docs.swift.org/swift-book/LanguageGuide/Generics.html</a><br>[2] <a href=\"https://blog.csdn.net/boildoctor/article/details/113116245\">https://blog.csdn.net/boildoctor/article/details/113116245</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>In Swift, When defining a protocol, we can’t use generics in a protocol as in a class. The following code is incorrect and will be reported as an error.</p>\n<p><strong> Example Code </strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protocol</span> <span class=\"title class_\">Stackble</span> &lt;<span class=\"title class_\">Element</span>&gt; &#123; </span><br><span class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">push</span>(<span class=\"keyword\">_</span> <span class=\"params\">element</span>:<span class=\"type\">Element</span>)</span><br><span class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">pop</span>()-&gt;<span class=\"type\">Element</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">top</span>() -&gt;<span class=\"type\">Element</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">size</span>() -&gt;<span class=\"type\">Int</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Therefore, associated types can solve this problem in Swift. It’s sometimes useful to declare one or more associated types as part of the protocol’s definition. An associated type gives a placeholder name to a type that’s used as part of the protocol. The actual type to use for that associated type isn’t specified until the protocol is adopted. Associated types are specified with the associatedtype keyword.</p>\n<p><strong> Example Code </strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protocol</span> <span class=\"title class_\">Stackble</span> &#123;    </span><br><span class=\"line\">    <span class=\"keyword\">associatedtype</span> <span class=\"type\">Element</span> </span><br><span class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">push</span>(<span class=\"keyword\">_</span> <span class=\"params\">element</span>:<span class=\"type\">Element</span>)</span><br><span class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">pop</span>()-&gt;<span class=\"type\">Element</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">top</span>() -&gt;<span class=\"type\">Element</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">size</span>() -&gt;<span class=\"type\">Int</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Associated types can be applied in situations as follows:</p>\n<h2 id=\"1-Associated-type-be-replaced-by-concrete-type\"><a href=\"#1-Associated-type-be-replaced-by-concrete-type\" class=\"headerlink\" title=\"1. Associated type be replaced by concrete type \"></a><strong><font size=3 >1. Associated type be replaced by concrete type </font></strong></h2><p><strong> Example Code </strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">StringStack</span>: <span class=\"title class_\">Stackble</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//typealias String = Element</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> elements <span class=\"operator\">=</span> [<span class=\"type\">String</span>]()</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">push</span>(<span class=\"keyword\">_</span> <span class=\"params\">element</span>:<span class=\"type\">String</span>)&#123;   </span><br><span class=\"line\">        </span><br><span class=\"line\">        elements.append(element)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">pop</span>()-&gt;<span class=\"type\">String</span>&#123;</span><br><span class=\"line\">        elements.removeLast()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">top</span>() -&gt;<span class=\"type\">String</span>&#123;</span><br><span class=\"line\">        elements.last<span class=\"operator\">!</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">size</span>() -&gt;<span class=\"type\">Int</span>&#123;</span><br><span class=\"line\">        elements.count</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Thanks to Swift’s type inference, we don’t actually need to declare a concrete Element of String as part of the definition of StringStack. </p>\n<h2 id=\"2-Associated-type-be-replaced-by-generic-type\"><a href=\"#2-Associated-type-be-replaced-by-generic-type\" class=\"headerlink\" title=\"2. Associated type be replaced by generic type \"></a><strong><font size=3 >2. Associated type be replaced by generic type </font></strong></h2><p>In a class with generics, generic types replace association types.</p>\n<p><strong> Example Code </strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Stack</span> &lt;<span class=\"title class_\">E</span>&gt;: <span class=\"title class_\">Stackble</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//typealias E = Element</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> elements <span class=\"operator\">=</span> [<span class=\"type\">E</span>]()  </span><br><span class=\"line\">     <span class=\"keyword\">func</span> <span class=\"title function_\">push</span>(<span class=\"keyword\">_</span> <span class=\"params\">element</span>:<span class=\"type\">E</span>) &#123;   </span><br><span class=\"line\">        elements.append(element)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     <span class=\"keyword\">func</span> <span class=\"title function_\">pop</span>()-&gt;<span class=\"type\">E</span>&#123;</span><br><span class=\"line\">        elements.removeLast()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">top</span>() -&gt;<span class=\"type\">E</span>&#123;</span><br><span class=\"line\">        elements.last<span class=\"operator\">!</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">size</span>() -&gt;<span class=\"type\">Int</span>&#123;</span><br><span class=\"line\">        elements.count</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-Points-for-Attention\"><a href=\"#3-Points-for-Attention\" class=\"headerlink\" title=\"3. Points for Attention \"></a><strong><font size=3 >3. Points for Attention </font></strong></h2><p>A protocol contains associated types cannot be used as return values and function parameters.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">protocol</span> <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// without any associated types</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> : <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\">     </span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">class</span> <span class=\"title class_\">Car</span> : <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\">     </span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">func</span> <span class=\"title function_\">get</span>(<span class=\"keyword\">_</span> <span class=\"params\">type</span>:<span class=\"type\">Int</span>) -&gt; <span class=\"type\">Runnable</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(<span class=\"number\">0</span> <span class=\"operator\">==</span> type) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"type\">Person</span>()</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"type\">Car</span>()</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"comment\">//call as follows:</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> r1 <span class=\"operator\">=</span> <span class=\"keyword\">get</span>(<span class=\"number\">0</span>) </span><br><span class=\"line\"><span class=\"keyword\">var</span> r2 <span class=\"operator\">=</span> <span class=\"keyword\">get</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;r1=&quot;</span>,r1)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;r2=&quot;</span>,r2)</span><br><span class=\"line\"><span class=\"comment\">//everything is ok now</span></span><br></pre></td></tr></table></figure>\n<p>The following is the code of compilation error.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protocol</span> <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">associatedtype</span> <span class=\"type\">Speed</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> speed : <span class=\"type\">Speed</span> &#123;<span class=\"keyword\">get</span>&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>:<span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> speed: <span class=\"type\">Double</span> <span class=\"operator\">=</span> <span class=\"number\">0.0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Car</span>:<span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> speed: <span class=\"type\">Double</span> <span class=\"operator\">=</span> <span class=\"number\">0.0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// this code will be reported an error</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">get</span> (<span class=\"params\">run</span>: <span class=\"type\">Runnable</span>) &#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">// this code will be reported an error too.</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">get</span>(<span class=\"keyword\">_</span> <span class=\"params\">type</span>:<span class=\"type\">Int</span>) -&gt; <span class=\"type\">Runnable</span> &#123; </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"number\">0</span> <span class=\"operator\">==</span> type )&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">Person</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Car</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>We can fix this point just by a generic Type that conform to the protocol.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">get</span>&lt;<span class=\"type\">T</span>:<span class=\"type\">Runnable</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">type</span>:<span class=\"type\">Int</span>)-&gt; <span class=\"type\">T</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span>  <span class=\"number\">0</span> <span class=\"operator\">==</span> type &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> result <span class=\"operator\">=</span> <span class=\"type\">Person</span>() <span class=\"keyword\">as!</span> <span class=\"type\">T</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Car</span>() <span class=\"keyword\">as!</span> <span class=\"type\">T</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://docs.swift.org/swift-book/LanguageGuide/Generics.html\">https://docs.swift.org/swift-book/LanguageGuide/Generics.html</a><br>[2] <a href=\"https://blog.csdn.net/boildoctor/article/details/113116245\">https://blog.csdn.net/boildoctor/article/details/113116245</a></p>\n"},{"title":"00. Call the Macro definition of Objective-C in Swift","date":"2023-03-10T19:00:00.000Z","_content":"\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nThere are usually lots of macro definitions in Objective-C projects, as follows:\n```Swift \n#define kScreenScale [UIScreen mainScreen].scale\n#define kOnePixelPointValue (1.0f / kScreenScale)\n#define kScreenWidth  [[UIScreen mainScreen] bounds].size.width\n#define kScreenHeight [[UIScreen mainScreen] bounds].size.height\n#define kApplicationWidth  MIN([[UIScreen mainScreen] bounds].size.width, [[UIScreen mainScreen] bounds].size.height)\n#define kApplicationHeight MAX([[UIScreen mainScreen] bounds].size.width, [[UIScreen mainScreen] bounds].size.height)\n#define kScreenCenterX kScreenWidth / 2.0\n#define kScreenCenterY kScreenHeight / 2.0\n```\nActually, Swift cannot directly use the macro definitions of OC. We need to do some conversions For Swift.\n\n#### <font size=3 color=#4169E1> 1. Overwrite them with Swift language entirely</font>\n\n```Swift \npublic struct SizeDefault {\n    public static let screenScale = UIScreen.main.scale\n    public static let onePixelPointValue = (1.0 / screenScale)\n    public static let screenWidth = UIScreen.main.bounds.size.width\n    public static let screenHeight = UIScreen.main.bounds.size.height\n    public static let applicationWidth = min(screenWidth, screenHeight)\n    public static let applicationHeight = max(screenWidth, screenHeight)\n    public static let screenCenterX = screenWidth / 2.0\n    public static let screenCenterY = screenHeight / 2.0\n    ...\n}\nextension UIDevice {\n    public static let ako = SizeDefault.self\n}\n```\nI overwrited all the code and wrapped them in the UIDevice extension, then I can use them as follows:\n```Swift \nlet height = UIDevice.ako.applicationHeight\nprint(height)\n```\nThis is what I recommend if you have enough time. \n\n#### <font size=3 color=#4169E1> 2. Convert them with inline function simply</font>\nIn fact, there are some macros that comprise complicated logic code and you don not have enough time or confidence to overwrite them. Therefore, there is a compromise method to meet our requirement quickly and safely.\n\n```Swift\n#define isIPhoneXSeries ({  \\\n    BOOL iPhoneXSeries = NO;  \\\n    if ([UIDevice currentDevice].userInterfaceIdiom != UIUserInterfaceIdiomPhone) { \\\n        return iPhoneXSeries; \\\n    } \\\n    if (@available(iOS 11.0, *)) { \\\n        UIWindow *mainWindow = [[[UIApplication sharedApplication] delegate] window]; \\\n        if (mainWindow.safeAreaInsets.bottom > 0.0) { \\\n            iPhoneXSeries = YES; \\\n        } \\\n    } \\\n    iPhoneXSeries; \\\n})\n```\nWe can just convert it with incline function like that:\n\n```Swift\nstatic inline BOOL isIPhoneXSeries()\n{\n    BOOL iPhoneXSeries = NO;\n    if ([UIDevice currentDevice].userInterfaceIdiom != UIUserInterfaceIdiomPhone) {\n        return iPhoneXSeries;\n    }\n    if (@available(iOS 11.0, *)) {\n        UIWindow *mainWindow = [[[UIApplication sharedApplication] delegate] window];\n        if (mainWindow.safeAreaInsets.bottom > 0.0) {\n            iPhoneXSeries = YES;\n        }\n    }\n    return iPhoneXSeries;\n}\n```\nor like this:\n```Swift\nstatic inline CGFloat AKOApplicationWidth()\n{\n    return kApplicationWidth;\n}\n\nstatic inline CGFloat AKOApplicationHeight()\n{\n    return kApplicationHeight;\n}\n```\nIt is very convenient. And then We can use it in our Project like this:\n```Swift\nisIPhoneXSeries()\n```\nWe can also add it to UIDevice extension like as below:\n\n```Swift\npublic struct SizeDefault {\n  ...\n  public static let isIPhoneXSeries = AKOISIPhoneXSeries()\n  ...\n\n```\n\n\n\n\n","source":"_posts/Swift/06. Hybrid Programming/00. Call the Macro definition of Objective-C in Swift.md","raw":"---\ntitle: 00. Call the Macro definition of Objective-C in Swift\ndate: 2023-03-10 20:00:00\ncategories: \n- [Swift, 06. Hybrid Programming]\ntags:\n- hybrid\n- macro\n---\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nThere are usually lots of macro definitions in Objective-C projects, as follows:\n```Swift \n#define kScreenScale [UIScreen mainScreen].scale\n#define kOnePixelPointValue (1.0f / kScreenScale)\n#define kScreenWidth  [[UIScreen mainScreen] bounds].size.width\n#define kScreenHeight [[UIScreen mainScreen] bounds].size.height\n#define kApplicationWidth  MIN([[UIScreen mainScreen] bounds].size.width, [[UIScreen mainScreen] bounds].size.height)\n#define kApplicationHeight MAX([[UIScreen mainScreen] bounds].size.width, [[UIScreen mainScreen] bounds].size.height)\n#define kScreenCenterX kScreenWidth / 2.0\n#define kScreenCenterY kScreenHeight / 2.0\n```\nActually, Swift cannot directly use the macro definitions of OC. We need to do some conversions For Swift.\n\n#### <font size=3 color=#4169E1> 1. Overwrite them with Swift language entirely</font>\n\n```Swift \npublic struct SizeDefault {\n    public static let screenScale = UIScreen.main.scale\n    public static let onePixelPointValue = (1.0 / screenScale)\n    public static let screenWidth = UIScreen.main.bounds.size.width\n    public static let screenHeight = UIScreen.main.bounds.size.height\n    public static let applicationWidth = min(screenWidth, screenHeight)\n    public static let applicationHeight = max(screenWidth, screenHeight)\n    public static let screenCenterX = screenWidth / 2.0\n    public static let screenCenterY = screenHeight / 2.0\n    ...\n}\nextension UIDevice {\n    public static let ako = SizeDefault.self\n}\n```\nI overwrited all the code and wrapped them in the UIDevice extension, then I can use them as follows:\n```Swift \nlet height = UIDevice.ako.applicationHeight\nprint(height)\n```\nThis is what I recommend if you have enough time. \n\n#### <font size=3 color=#4169E1> 2. Convert them with inline function simply</font>\nIn fact, there are some macros that comprise complicated logic code and you don not have enough time or confidence to overwrite them. Therefore, there is a compromise method to meet our requirement quickly and safely.\n\n```Swift\n#define isIPhoneXSeries ({  \\\n    BOOL iPhoneXSeries = NO;  \\\n    if ([UIDevice currentDevice].userInterfaceIdiom != UIUserInterfaceIdiomPhone) { \\\n        return iPhoneXSeries; \\\n    } \\\n    if (@available(iOS 11.0, *)) { \\\n        UIWindow *mainWindow = [[[UIApplication sharedApplication] delegate] window]; \\\n        if (mainWindow.safeAreaInsets.bottom > 0.0) { \\\n            iPhoneXSeries = YES; \\\n        } \\\n    } \\\n    iPhoneXSeries; \\\n})\n```\nWe can just convert it with incline function like that:\n\n```Swift\nstatic inline BOOL isIPhoneXSeries()\n{\n    BOOL iPhoneXSeries = NO;\n    if ([UIDevice currentDevice].userInterfaceIdiom != UIUserInterfaceIdiomPhone) {\n        return iPhoneXSeries;\n    }\n    if (@available(iOS 11.0, *)) {\n        UIWindow *mainWindow = [[[UIApplication sharedApplication] delegate] window];\n        if (mainWindow.safeAreaInsets.bottom > 0.0) {\n            iPhoneXSeries = YES;\n        }\n    }\n    return iPhoneXSeries;\n}\n```\nor like this:\n```Swift\nstatic inline CGFloat AKOApplicationWidth()\n{\n    return kApplicationWidth;\n}\n\nstatic inline CGFloat AKOApplicationHeight()\n{\n    return kApplicationHeight;\n}\n```\nIt is very convenient. And then We can use it in our Project like this:\n```Swift\nisIPhoneXSeries()\n```\nWe can also add it to UIDevice extension like as below:\n\n```Swift\npublic struct SizeDefault {\n  ...\n  public static let isIPhoneXSeries = AKOISIPhoneXSeries()\n  ...\n\n```\n\n\n\n\n","slug":"Swift/06. Hybrid Programming/00. Call the Macro definition of Objective-C in Swift","published":1,"updated":"2023-08-18T10:46:48.574Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clm7w97rr0024kb0meruuc9zj","content":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>There are usually lots of macro definitions in Objective-C projects, as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define kScreenScale [<span class=\"type\">UIScreen</span> mainScreen].scale</span><br><span class=\"line\">#define kOnePixelPointValue (<span class=\"number\">1</span>.0f <span class=\"operator\">/</span> kScreenScale)</span><br><span class=\"line\">#define kScreenWidth  [[<span class=\"type\">UIScreen</span> mainScreen] bounds].size.width</span><br><span class=\"line\">#define kScreenHeight [[<span class=\"type\">UIScreen</span> mainScreen] bounds].size.height</span><br><span class=\"line\">#define kApplicationWidth  <span class=\"type\">MIN</span>([[<span class=\"type\">UIScreen</span> mainScreen] bounds].size.width, [[<span class=\"type\">UIScreen</span> mainScreen] bounds].size.height)</span><br><span class=\"line\">#define kApplicationHeight <span class=\"type\">MAX</span>([[<span class=\"type\">UIScreen</span> mainScreen] bounds].size.width, [[<span class=\"type\">UIScreen</span> mainScreen] bounds].size.height)</span><br><span class=\"line\">#define kScreenCenterX kScreenWidth <span class=\"operator\">/</span> <span class=\"number\">2.0</span></span><br><span class=\"line\">#define kScreenCenterY kScreenHeight <span class=\"operator\">/</span> <span class=\"number\">2.0</span></span><br></pre></td></tr></table></figure>\n<p>Actually, Swift cannot directly use the macro definitions of OC. We need to do some conversions For Swift.</p>\n<h4 id=\"1-Overwrite-them-with-Swift-language-entirely\"><a href=\"#1-Overwrite-them-with-Swift-language-entirely\" class=\"headerlink\" title=\" 1. Overwrite them with Swift language entirely\"></a><font size=3 color=#4169E1> 1. Overwrite them with Swift language entirely</font></h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">SizeDefault</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> screenScale <span class=\"operator\">=</span> <span class=\"type\">UIScreen</span>.main.scale</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> onePixelPointValue <span class=\"operator\">=</span> (<span class=\"number\">1.0</span> <span class=\"operator\">/</span> screenScale)</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> screenWidth <span class=\"operator\">=</span> <span class=\"type\">UIScreen</span>.main.bounds.size.width</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> screenHeight <span class=\"operator\">=</span> <span class=\"type\">UIScreen</span>.main.bounds.size.height</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> applicationWidth <span class=\"operator\">=</span> <span class=\"built_in\">min</span>(screenWidth, screenHeight)</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> applicationHeight <span class=\"operator\">=</span> <span class=\"built_in\">max</span>(screenWidth, screenHeight)</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> screenCenterX <span class=\"operator\">=</span> screenWidth <span class=\"operator\">/</span> <span class=\"number\">2.0</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> screenCenterY <span class=\"operator\">=</span> screenHeight <span class=\"operator\">/</span> <span class=\"number\">2.0</span></span><br><span class=\"line\">    <span class=\"operator\">...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">UIDevice</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> ako <span class=\"operator\">=</span> <span class=\"type\">SizeDefault</span>.<span class=\"keyword\">self</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>I overwrited all the code and wrapped them in the UIDevice extension, then I can use them as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> height <span class=\"operator\">=</span> <span class=\"type\">UIDevice</span>.ako.applicationHeight</span><br><span class=\"line\"><span class=\"built_in\">print</span>(height)</span><br></pre></td></tr></table></figure>\n<p>This is what I recommend if you have enough time. </p>\n<h4 id=\"2-Convert-them-with-inline-function-simply\"><a href=\"#2-Convert-them-with-inline-function-simply\" class=\"headerlink\" title=\" 2. Convert them with inline function simply\"></a><font size=3 color=#4169E1> 2. Convert them with inline function simply</font></h4><p>In fact, there are some macros that comprise complicated logic code and you don not have enough time or confidence to overwrite them. Therefore, there is a compromise method to meet our requirement quickly and safely.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define isIPhoneXSeries (&#123;  \\</span><br><span class=\"line\">    <span class=\"type\">BOOL</span> iPhoneXSeries <span class=\"operator\">=</span> <span class=\"type\">NO</span>;  \\</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ([<span class=\"type\">UIDevice</span> currentDevice].userInterfaceIdiom <span class=\"operator\">!=</span> <span class=\"type\">UIUserInterfaceIdiomPhone</span>) &#123; \\</span><br><span class=\"line\">        <span class=\"keyword\">return</span> iPhoneXSeries; \\</span><br><span class=\"line\">    &#125; \\</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">@available</span>(<span class=\"keyword\">iOS</span> <span class=\"number\">11.0</span>, <span class=\"operator\">*</span>)) &#123; \\</span><br><span class=\"line\">        <span class=\"type\">UIWindow</span> <span class=\"operator\">*</span>mainWindow <span class=\"operator\">=</span> [[[<span class=\"type\">UIApplication</span> sharedApplication] delegate] window]; \\</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mainWindow.safeAreaInsets.bottom <span class=\"operator\">&gt;</span> <span class=\"number\">0.0</span>) &#123; \\</span><br><span class=\"line\">            iPhoneXSeries <span class=\"operator\">=</span> <span class=\"type\">YES</span>; \\</span><br><span class=\"line\">        &#125; \\</span><br><span class=\"line\">    &#125; \\</span><br><span class=\"line\">    iPhoneXSeries; \\</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>We can just convert it with incline function like that:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> inline <span class=\"type\">BOOL</span> isIPhoneXSeries()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">BOOL</span> iPhoneXSeries <span class=\"operator\">=</span> <span class=\"type\">NO</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ([<span class=\"type\">UIDevice</span> currentDevice].userInterfaceIdiom <span class=\"operator\">!=</span> <span class=\"type\">UIUserInterfaceIdiomPhone</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> iPhoneXSeries;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">@available</span>(<span class=\"keyword\">iOS</span> <span class=\"number\">11.0</span>, <span class=\"operator\">*</span>)) &#123;</span><br><span class=\"line\">        <span class=\"type\">UIWindow</span> <span class=\"operator\">*</span>mainWindow <span class=\"operator\">=</span> [[[<span class=\"type\">UIApplication</span> sharedApplication] delegate] window];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mainWindow.safeAreaInsets.bottom <span class=\"operator\">&gt;</span> <span class=\"number\">0.0</span>) &#123;</span><br><span class=\"line\">            iPhoneXSeries <span class=\"operator\">=</span> <span class=\"type\">YES</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> iPhoneXSeries;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>or like this:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> inline <span class=\"type\">CGFloat</span> <span class=\"type\">AKOApplicationWidth</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> kApplicationWidth;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> inline <span class=\"type\">CGFloat</span> <span class=\"type\">AKOApplicationHeight</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> kApplicationHeight;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>It is very convenient. And then We can use it in our Project like this:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">isIPhoneXSeries()</span><br></pre></td></tr></table></figure>\n<p>We can also add it to UIDevice extension like as below:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">SizeDefault</span> &#123;</span><br><span class=\"line\">  <span class=\"operator\">...</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> isIPhoneXSeries <span class=\"operator\">=</span> <span class=\"type\">AKOISIPhoneXSeries</span>()</span><br><span class=\"line\">  <span class=\"operator\">...</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>There are usually lots of macro definitions in Objective-C projects, as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define kScreenScale [<span class=\"type\">UIScreen</span> mainScreen].scale</span><br><span class=\"line\">#define kOnePixelPointValue (<span class=\"number\">1</span>.0f <span class=\"operator\">/</span> kScreenScale)</span><br><span class=\"line\">#define kScreenWidth  [[<span class=\"type\">UIScreen</span> mainScreen] bounds].size.width</span><br><span class=\"line\">#define kScreenHeight [[<span class=\"type\">UIScreen</span> mainScreen] bounds].size.height</span><br><span class=\"line\">#define kApplicationWidth  <span class=\"type\">MIN</span>([[<span class=\"type\">UIScreen</span> mainScreen] bounds].size.width, [[<span class=\"type\">UIScreen</span> mainScreen] bounds].size.height)</span><br><span class=\"line\">#define kApplicationHeight <span class=\"type\">MAX</span>([[<span class=\"type\">UIScreen</span> mainScreen] bounds].size.width, [[<span class=\"type\">UIScreen</span> mainScreen] bounds].size.height)</span><br><span class=\"line\">#define kScreenCenterX kScreenWidth <span class=\"operator\">/</span> <span class=\"number\">2.0</span></span><br><span class=\"line\">#define kScreenCenterY kScreenHeight <span class=\"operator\">/</span> <span class=\"number\">2.0</span></span><br></pre></td></tr></table></figure>\n<p>Actually, Swift cannot directly use the macro definitions of OC. We need to do some conversions For Swift.</p>\n<h4 id=\"1-Overwrite-them-with-Swift-language-entirely\"><a href=\"#1-Overwrite-them-with-Swift-language-entirely\" class=\"headerlink\" title=\" 1. Overwrite them with Swift language entirely\"></a><font size=3 color=#4169E1> 1. Overwrite them with Swift language entirely</font></h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">SizeDefault</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> screenScale <span class=\"operator\">=</span> <span class=\"type\">UIScreen</span>.main.scale</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> onePixelPointValue <span class=\"operator\">=</span> (<span class=\"number\">1.0</span> <span class=\"operator\">/</span> screenScale)</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> screenWidth <span class=\"operator\">=</span> <span class=\"type\">UIScreen</span>.main.bounds.size.width</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> screenHeight <span class=\"operator\">=</span> <span class=\"type\">UIScreen</span>.main.bounds.size.height</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> applicationWidth <span class=\"operator\">=</span> <span class=\"built_in\">min</span>(screenWidth, screenHeight)</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> applicationHeight <span class=\"operator\">=</span> <span class=\"built_in\">max</span>(screenWidth, screenHeight)</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> screenCenterX <span class=\"operator\">=</span> screenWidth <span class=\"operator\">/</span> <span class=\"number\">2.0</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> screenCenterY <span class=\"operator\">=</span> screenHeight <span class=\"operator\">/</span> <span class=\"number\">2.0</span></span><br><span class=\"line\">    <span class=\"operator\">...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">UIDevice</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> ako <span class=\"operator\">=</span> <span class=\"type\">SizeDefault</span>.<span class=\"keyword\">self</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>I overwrited all the code and wrapped them in the UIDevice extension, then I can use them as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> height <span class=\"operator\">=</span> <span class=\"type\">UIDevice</span>.ako.applicationHeight</span><br><span class=\"line\"><span class=\"built_in\">print</span>(height)</span><br></pre></td></tr></table></figure>\n<p>This is what I recommend if you have enough time. </p>\n<h4 id=\"2-Convert-them-with-inline-function-simply\"><a href=\"#2-Convert-them-with-inline-function-simply\" class=\"headerlink\" title=\" 2. Convert them with inline function simply\"></a><font size=3 color=#4169E1> 2. Convert them with inline function simply</font></h4><p>In fact, there are some macros that comprise complicated logic code and you don not have enough time or confidence to overwrite them. Therefore, there is a compromise method to meet our requirement quickly and safely.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define isIPhoneXSeries (&#123;  \\</span><br><span class=\"line\">    <span class=\"type\">BOOL</span> iPhoneXSeries <span class=\"operator\">=</span> <span class=\"type\">NO</span>;  \\</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ([<span class=\"type\">UIDevice</span> currentDevice].userInterfaceIdiom <span class=\"operator\">!=</span> <span class=\"type\">UIUserInterfaceIdiomPhone</span>) &#123; \\</span><br><span class=\"line\">        <span class=\"keyword\">return</span> iPhoneXSeries; \\</span><br><span class=\"line\">    &#125; \\</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">@available</span>(<span class=\"keyword\">iOS</span> <span class=\"number\">11.0</span>, <span class=\"operator\">*</span>)) &#123; \\</span><br><span class=\"line\">        <span class=\"type\">UIWindow</span> <span class=\"operator\">*</span>mainWindow <span class=\"operator\">=</span> [[[<span class=\"type\">UIApplication</span> sharedApplication] delegate] window]; \\</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mainWindow.safeAreaInsets.bottom <span class=\"operator\">&gt;</span> <span class=\"number\">0.0</span>) &#123; \\</span><br><span class=\"line\">            iPhoneXSeries <span class=\"operator\">=</span> <span class=\"type\">YES</span>; \\</span><br><span class=\"line\">        &#125; \\</span><br><span class=\"line\">    &#125; \\</span><br><span class=\"line\">    iPhoneXSeries; \\</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>We can just convert it with incline function like that:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> inline <span class=\"type\">BOOL</span> isIPhoneXSeries()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">BOOL</span> iPhoneXSeries <span class=\"operator\">=</span> <span class=\"type\">NO</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ([<span class=\"type\">UIDevice</span> currentDevice].userInterfaceIdiom <span class=\"operator\">!=</span> <span class=\"type\">UIUserInterfaceIdiomPhone</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> iPhoneXSeries;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">@available</span>(<span class=\"keyword\">iOS</span> <span class=\"number\">11.0</span>, <span class=\"operator\">*</span>)) &#123;</span><br><span class=\"line\">        <span class=\"type\">UIWindow</span> <span class=\"operator\">*</span>mainWindow <span class=\"operator\">=</span> [[[<span class=\"type\">UIApplication</span> sharedApplication] delegate] window];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mainWindow.safeAreaInsets.bottom <span class=\"operator\">&gt;</span> <span class=\"number\">0.0</span>) &#123;</span><br><span class=\"line\">            iPhoneXSeries <span class=\"operator\">=</span> <span class=\"type\">YES</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> iPhoneXSeries;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>or like this:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> inline <span class=\"type\">CGFloat</span> <span class=\"type\">AKOApplicationWidth</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> kApplicationWidth;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> inline <span class=\"type\">CGFloat</span> <span class=\"type\">AKOApplicationHeight</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> kApplicationHeight;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>It is very convenient. And then We can use it in our Project like this:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">isIPhoneXSeries()</span><br></pre></td></tr></table></figure>\n<p>We can also add it to UIDevice extension like as below:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">SizeDefault</span> &#123;</span><br><span class=\"line\">  <span class=\"operator\">...</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> isIPhoneXSeries <span class=\"operator\">=</span> <span class=\"type\">AKOISIPhoneXSeries</span>()</span><br><span class=\"line\">  <span class=\"operator\">...</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n"},{"title":"00. How to use do, catch, try, throws in Swift","date":"2023-08-18T08:00:00.000Z","_content":"\n<font color=gray size=2>*It will take about 5 minutes to finish reading this article.*</font>\n\nAlthough these keywords are not new to Swift, they are almost always used when using Swift Concurrency. Before we introduce the formal Concurrency content, let's take a look at these keywords specifically.   \nIn this article, we will introduce do-catch blocks, try, try? And try! The difference between them, as well as an introduction to throw.\n\n #### <font size=3 color=#4169E1>1. how to use do-catch-try-throws in Swift</font> \n A do-catch statement is a mechanism for handling errors that allows you to write blocks of code that catch and handle possible errors. The general form of the do-catch-try-throws statement is as follows:\n\n```Swift\nfunc someFunction() throws {\n    // Code that may throw errors\n}\n\ndo {\n    try someFunction()\n} catch pattern {\n    // Code that executes after a specific type of error is caught\n} catch pattern {\n    // Another type of error is caught\n}\n```\n**Do code block:**      \nIn this block, you can place code that may throw erros.   \n**Catch code block:**  \nThis is where errors are caught and handled. You can use different patterns based on the error type to catch errors and execute the appropriate code when matched. You can have multiple catch blocks that handle different types of errors.\nHere is an example of how to use do-catch statement:\n\n```Swift\nfunc verifyValueValidity(_ value: Int) throws -> Int {\n    \n    if value < 0 {\n        print(\"Value is too small.\")\n        throw CustomError.valueTooSmall\n    } else if value > 100 {\n        print(\"Value is too large.\")\n        throw CustomError.valueTooLarge\n    } else {\n        print(\"Value is within acceptable range.\")\n        return 1\n    }\n  \n}\n\ndo {\n    let valid1 = try verifyValueValidity(50)\n    // let valid2 = try verifyValueValidity(500)\n} catch CustomError.valueTooSmall {\n    print(\"Value is too small.\")\n} catch CustomError.valueTooLarge {\n    print(\"Value is too large.\")\n} catch {\n    print(\"An error occurred: \\(error)\")\n}\n```\n**Note:**   \nif there are multiple try Code in the do statement in the above code, for example:\n\n```Swift\ndo {\n    let valid1 = try verifyValueValidity(50)\n    let valid2 = try verifyValueValidity(500)\n    let valid3 = try verifyValueValidity(5000)//Will not execute\n    let valid4 = try verifyValueValidity(2500)//Will not execute\n} catch CustomError.valueTooSmall {\n    print(\"Value is too small.\")\n} catch CustomError.valueTooLarge {\n    print(\"Value is too large.\")\n} catch {\n    print(\"An error occurred: \\(error)\")\n}\n```\nThen the try statements will be executed in order, and if a statement hits the catch statement below it, it will stop and the following try statements will not be executed. The result of the execution of the above code:\n\n```Swift\nValue is within acceptable range.\nValue is too large.\n```\n\n#### <font size=3 color=#4169E1>2. try？and try！</font>\nThere is a solution about the problem of the execution of exmultiple try statements. as following:\nOne solution to the above multiple try execution problem is to use try?. As follows is the sample code:\n\n```Swift\ndo {\n    let valid1 = try? verifyValueValidity(50)\n    let valid2 = try? verifyValueValidity(500)\n    let valid3 = try? verifyValueValidity(5000)\n    let valid4 = try? verifyValueValidity(2500)\n    \n} catch CustomError.valueTooSmall {\n    print(\"Value is too small.\")\n} catch CustomError.valueTooLarge {\n    print(\"Value is too large.\")\n} catch {\n    print(\"An error occurred: \\(error)\")\n}\n```\nThe results of the execution are as follows:\n\n```Swift\nValue is within acceptable range.\nValue is too large.\nValue is too large.\nValue is too large.\n```\nThe result of the execution shows that all the try statements are executed, but written this way Xcode will give you a Warning:\n\n```Swift\n'catch' block is unreachable because no errors are thrown in 'do' block\n```\nLike this:   \n{% img /assets/Swift/Concurrency/catch_warning.png %}\n<!-- <image src=\"images/catch_warning.png\">     -->\nThat's right, try? will invalidate the catch statement so that all the try statements will be executed. So the above code can just be simplified to:          \n\n```Swift\nlet valid1 = try? verifyValueValidity(50)\nlet valid2 = try? verifyValueValidity(500)\nlet valid3 = try? verifyValueValidity(5000)\nlet valid4 = try? verifyValueValidity(2500)\n```\nSo, when we don't care about the execution of the catch statement, this is the way to write it.\n\n**Note:**\nIf you change try? to try!, the catch statement will also fail, but if the forced parsing fails, it will cause a Crash, so it is not recommended.\n","source":"_posts/Swift/07. Concurrency/00. How to use do, catch, try, throws in Swift.md","raw":"---\ntitle: 00. How to use do, catch, try, throws in Swift\ndate: 2023-08-18 10:00:00\ncategories: \n- [Swift, 07. Concurrency]\ntags:\n- concurrency\n---\n\n<font color=gray size=2>*It will take about 5 minutes to finish reading this article.*</font>\n\nAlthough these keywords are not new to Swift, they are almost always used when using Swift Concurrency. Before we introduce the formal Concurrency content, let's take a look at these keywords specifically.   \nIn this article, we will introduce do-catch blocks, try, try? And try! The difference between them, as well as an introduction to throw.\n\n #### <font size=3 color=#4169E1>1. how to use do-catch-try-throws in Swift</font> \n A do-catch statement is a mechanism for handling errors that allows you to write blocks of code that catch and handle possible errors. The general form of the do-catch-try-throws statement is as follows:\n\n```Swift\nfunc someFunction() throws {\n    // Code that may throw errors\n}\n\ndo {\n    try someFunction()\n} catch pattern {\n    // Code that executes after a specific type of error is caught\n} catch pattern {\n    // Another type of error is caught\n}\n```\n**Do code block:**      \nIn this block, you can place code that may throw erros.   \n**Catch code block:**  \nThis is where errors are caught and handled. You can use different patterns based on the error type to catch errors and execute the appropriate code when matched. You can have multiple catch blocks that handle different types of errors.\nHere is an example of how to use do-catch statement:\n\n```Swift\nfunc verifyValueValidity(_ value: Int) throws -> Int {\n    \n    if value < 0 {\n        print(\"Value is too small.\")\n        throw CustomError.valueTooSmall\n    } else if value > 100 {\n        print(\"Value is too large.\")\n        throw CustomError.valueTooLarge\n    } else {\n        print(\"Value is within acceptable range.\")\n        return 1\n    }\n  \n}\n\ndo {\n    let valid1 = try verifyValueValidity(50)\n    // let valid2 = try verifyValueValidity(500)\n} catch CustomError.valueTooSmall {\n    print(\"Value is too small.\")\n} catch CustomError.valueTooLarge {\n    print(\"Value is too large.\")\n} catch {\n    print(\"An error occurred: \\(error)\")\n}\n```\n**Note:**   \nif there are multiple try Code in the do statement in the above code, for example:\n\n```Swift\ndo {\n    let valid1 = try verifyValueValidity(50)\n    let valid2 = try verifyValueValidity(500)\n    let valid3 = try verifyValueValidity(5000)//Will not execute\n    let valid4 = try verifyValueValidity(2500)//Will not execute\n} catch CustomError.valueTooSmall {\n    print(\"Value is too small.\")\n} catch CustomError.valueTooLarge {\n    print(\"Value is too large.\")\n} catch {\n    print(\"An error occurred: \\(error)\")\n}\n```\nThen the try statements will be executed in order, and if a statement hits the catch statement below it, it will stop and the following try statements will not be executed. The result of the execution of the above code:\n\n```Swift\nValue is within acceptable range.\nValue is too large.\n```\n\n#### <font size=3 color=#4169E1>2. try？and try！</font>\nThere is a solution about the problem of the execution of exmultiple try statements. as following:\nOne solution to the above multiple try execution problem is to use try?. As follows is the sample code:\n\n```Swift\ndo {\n    let valid1 = try? verifyValueValidity(50)\n    let valid2 = try? verifyValueValidity(500)\n    let valid3 = try? verifyValueValidity(5000)\n    let valid4 = try? verifyValueValidity(2500)\n    \n} catch CustomError.valueTooSmall {\n    print(\"Value is too small.\")\n} catch CustomError.valueTooLarge {\n    print(\"Value is too large.\")\n} catch {\n    print(\"An error occurred: \\(error)\")\n}\n```\nThe results of the execution are as follows:\n\n```Swift\nValue is within acceptable range.\nValue is too large.\nValue is too large.\nValue is too large.\n```\nThe result of the execution shows that all the try statements are executed, but written this way Xcode will give you a Warning:\n\n```Swift\n'catch' block is unreachable because no errors are thrown in 'do' block\n```\nLike this:   \n{% img /assets/Swift/Concurrency/catch_warning.png %}\n<!-- <image src=\"images/catch_warning.png\">     -->\nThat's right, try? will invalidate the catch statement so that all the try statements will be executed. So the above code can just be simplified to:          \n\n```Swift\nlet valid1 = try? verifyValueValidity(50)\nlet valid2 = try? verifyValueValidity(500)\nlet valid3 = try? verifyValueValidity(5000)\nlet valid4 = try? verifyValueValidity(2500)\n```\nSo, when we don't care about the execution of the catch statement, this is the way to write it.\n\n**Note:**\nIf you change try? to try!, the catch statement will also fail, but if the forced parsing fails, it will cause a Crash, so it is not recommended.\n","slug":"Swift/07. Concurrency/00. How to use do, catch, try, throws in Swift","published":1,"updated":"2023-08-18T10:46:39.649Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clm7w97rt0028kb0m1fa00qln","content":"<p><font color=gray size=2><em>It will take about 5 minutes to finish reading this article.</em></font></p>\n<p>Although these keywords are not new to Swift, they are almost always used when using Swift Concurrency. Before we introduce the formal Concurrency content, let’s take a look at these keywords specifically.<br>In this article, we will introduce do-catch blocks, try, try? And try! The difference between them, as well as an introduction to throw.</p>\n<h4 id=\"1-how-to-use-do-catch-try-throws-in-Swift\"><a href=\"#1-how-to-use-do-catch-try-throws-in-Swift\" class=\"headerlink\" title=\"1. how to use do-catch-try-throws in Swift\"></a><font size=3 color=#4169E1>1. how to use do-catch-try-throws in Swift</font></h4><p> A do-catch statement is a mechanism for handling errors that allows you to write blocks of code that catch and handle possible errors. The general form of the do-catch-try-throws statement is as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">someFunction</span>() <span class=\"keyword\">throws</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Code that may throw errors</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> someFunction()</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> pattern &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Code that executes after a specific type of error is caught</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> pattern &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Another type of error is caught</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>Do code block:</strong><br>In this block, you can place code that may throw erros.<br><strong>Catch code block:</strong><br>This is where errors are caught and handled. You can use different patterns based on the error type to catch errors and execute the appropriate code when matched. You can have multiple catch blocks that handle different types of errors.<br>Here is an example of how to use do-catch statement:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">verifyValueValidity</span>(<span class=\"keyword\">_</span> <span class=\"params\">value</span>: <span class=\"type\">Int</span>) <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> value <span class=\"operator\">&lt;</span> <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Value is too small.&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"type\">CustomError</span>.valueTooSmall</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> value <span class=\"operator\">&gt;</span> <span class=\"number\">100</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Value is too large.&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"type\">CustomError</span>.valueTooLarge</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Value is within acceptable range.&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> valid1 <span class=\"operator\">=</span> <span class=\"keyword\">try</span> verifyValueValidity(<span class=\"number\">50</span>)</span><br><span class=\"line\">    <span class=\"comment\">// let valid2 = try verifyValueValidity(500)</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> <span class=\"type\">CustomError</span>.valueTooSmall &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Value is too small.&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> <span class=\"type\">CustomError</span>.valueTooLarge &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Value is too large.&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;An error occurred: <span class=\"subst\">\\(error)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>Note:</strong><br>if there are multiple try Code in the do statement in the above code, for example:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> valid1 <span class=\"operator\">=</span> <span class=\"keyword\">try</span> verifyValueValidity(<span class=\"number\">50</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> valid2 <span class=\"operator\">=</span> <span class=\"keyword\">try</span> verifyValueValidity(<span class=\"number\">500</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> valid3 <span class=\"operator\">=</span> <span class=\"keyword\">try</span> verifyValueValidity(<span class=\"number\">5000</span>)<span class=\"comment\">//Will not execute</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> valid4 <span class=\"operator\">=</span> <span class=\"keyword\">try</span> verifyValueValidity(<span class=\"number\">2500</span>)<span class=\"comment\">//Will not execute</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> <span class=\"type\">CustomError</span>.valueTooSmall &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Value is too small.&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> <span class=\"type\">CustomError</span>.valueTooLarge &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Value is too large.&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;An error occurred: <span class=\"subst\">\\(error)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Then the try statements will be executed in order, and if a statement hits the catch statement below it, it will stop and the following try statements will not be executed. The result of the execution of the above code:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Value</span> <span class=\"keyword\">is</span> within acceptable range.</span><br><span class=\"line\"><span class=\"type\">Value</span> <span class=\"keyword\">is</span> too large.</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-try？and-try！\"><a href=\"#2-try？and-try！\" class=\"headerlink\" title=\"2. try？and try！\"></a><font size=3 color=#4169E1>2. try？and try！</font></h4><p>There is a solution about the problem of the execution of exmultiple try statements. as following:<br>One solution to the above multiple try execution problem is to use try?. As follows is the sample code:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> valid1 <span class=\"operator\">=</span> <span class=\"keyword\">try?</span> verifyValueValidity(<span class=\"number\">50</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> valid2 <span class=\"operator\">=</span> <span class=\"keyword\">try?</span> verifyValueValidity(<span class=\"number\">500</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> valid3 <span class=\"operator\">=</span> <span class=\"keyword\">try?</span> verifyValueValidity(<span class=\"number\">5000</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> valid4 <span class=\"operator\">=</span> <span class=\"keyword\">try?</span> verifyValueValidity(<span class=\"number\">2500</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> <span class=\"type\">CustomError</span>.valueTooSmall &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Value is too small.&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> <span class=\"type\">CustomError</span>.valueTooLarge &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Value is too large.&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;An error occurred: <span class=\"subst\">\\(error)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The results of the execution are as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Value</span> <span class=\"keyword\">is</span> within acceptable range.</span><br><span class=\"line\"><span class=\"type\">Value</span> <span class=\"keyword\">is</span> too large.</span><br><span class=\"line\"><span class=\"type\">Value</span> <span class=\"keyword\">is</span> too large.</span><br><span class=\"line\"><span class=\"type\">Value</span> <span class=\"keyword\">is</span> too large.</span><br></pre></td></tr></table></figure>\n<p>The result of the execution shows that all the try statements are executed, but written this way Xcode will give you a Warning:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;<span class=\"keyword\">catch</span>&#x27; block <span class=\"keyword\">is</span> unreachable because no errors are thrown <span class=\"keyword\">in</span> &#x27;<span class=\"keyword\">do</span>&#x27; block</span><br></pre></td></tr></table></figure>\n<p>Like this:   </p>\n<img src=\"/assets/Swift/Concurrency/catch_warning.png\" class=\"\">\n<!-- <image src=\"images/catch_warning.png\">     -->\n<p>That’s right, try? will invalidate the catch statement so that all the try statements will be executed. So the above code can just be simplified to:          </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> valid1 <span class=\"operator\">=</span> <span class=\"keyword\">try?</span> verifyValueValidity(<span class=\"number\">50</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> valid2 <span class=\"operator\">=</span> <span class=\"keyword\">try?</span> verifyValueValidity(<span class=\"number\">500</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> valid3 <span class=\"operator\">=</span> <span class=\"keyword\">try?</span> verifyValueValidity(<span class=\"number\">5000</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> valid4 <span class=\"operator\">=</span> <span class=\"keyword\">try?</span> verifyValueValidity(<span class=\"number\">2500</span>)</span><br></pre></td></tr></table></figure>\n<p>So, when we don’t care about the execution of the catch statement, this is the way to write it.</p>\n<p><strong>Note:</strong><br>If you change try? to try!, the catch statement will also fail, but if the forced parsing fails, it will cause a Crash, so it is not recommended.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 5 minutes to finish reading this article.</em></font></p>\n<p>Although these keywords are not new to Swift, they are almost always used when using Swift Concurrency. Before we introduce the formal Concurrency content, let’s take a look at these keywords specifically.<br>In this article, we will introduce do-catch blocks, try, try? And try! The difference between them, as well as an introduction to throw.</p>\n<h4 id=\"1-how-to-use-do-catch-try-throws-in-Swift\"><a href=\"#1-how-to-use-do-catch-try-throws-in-Swift\" class=\"headerlink\" title=\"1. how to use do-catch-try-throws in Swift\"></a><font size=3 color=#4169E1>1. how to use do-catch-try-throws in Swift</font></h4><p> A do-catch statement is a mechanism for handling errors that allows you to write blocks of code that catch and handle possible errors. The general form of the do-catch-try-throws statement is as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">someFunction</span>() <span class=\"keyword\">throws</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Code that may throw errors</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> someFunction()</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> pattern &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Code that executes after a specific type of error is caught</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> pattern &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Another type of error is caught</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>Do code block:</strong><br>In this block, you can place code that may throw erros.<br><strong>Catch code block:</strong><br>This is where errors are caught and handled. You can use different patterns based on the error type to catch errors and execute the appropriate code when matched. You can have multiple catch blocks that handle different types of errors.<br>Here is an example of how to use do-catch statement:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">verifyValueValidity</span>(<span class=\"keyword\">_</span> <span class=\"params\">value</span>: <span class=\"type\">Int</span>) <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> value <span class=\"operator\">&lt;</span> <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Value is too small.&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"type\">CustomError</span>.valueTooSmall</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> value <span class=\"operator\">&gt;</span> <span class=\"number\">100</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Value is too large.&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"type\">CustomError</span>.valueTooLarge</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Value is within acceptable range.&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> valid1 <span class=\"operator\">=</span> <span class=\"keyword\">try</span> verifyValueValidity(<span class=\"number\">50</span>)</span><br><span class=\"line\">    <span class=\"comment\">// let valid2 = try verifyValueValidity(500)</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> <span class=\"type\">CustomError</span>.valueTooSmall &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Value is too small.&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> <span class=\"type\">CustomError</span>.valueTooLarge &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Value is too large.&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;An error occurred: <span class=\"subst\">\\(error)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>Note:</strong><br>if there are multiple try Code in the do statement in the above code, for example:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> valid1 <span class=\"operator\">=</span> <span class=\"keyword\">try</span> verifyValueValidity(<span class=\"number\">50</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> valid2 <span class=\"operator\">=</span> <span class=\"keyword\">try</span> verifyValueValidity(<span class=\"number\">500</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> valid3 <span class=\"operator\">=</span> <span class=\"keyword\">try</span> verifyValueValidity(<span class=\"number\">5000</span>)<span class=\"comment\">//Will not execute</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> valid4 <span class=\"operator\">=</span> <span class=\"keyword\">try</span> verifyValueValidity(<span class=\"number\">2500</span>)<span class=\"comment\">//Will not execute</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> <span class=\"type\">CustomError</span>.valueTooSmall &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Value is too small.&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> <span class=\"type\">CustomError</span>.valueTooLarge &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Value is too large.&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;An error occurred: <span class=\"subst\">\\(error)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Then the try statements will be executed in order, and if a statement hits the catch statement below it, it will stop and the following try statements will not be executed. The result of the execution of the above code:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Value</span> <span class=\"keyword\">is</span> within acceptable range.</span><br><span class=\"line\"><span class=\"type\">Value</span> <span class=\"keyword\">is</span> too large.</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-try？and-try！\"><a href=\"#2-try？and-try！\" class=\"headerlink\" title=\"2. try？and try！\"></a><font size=3 color=#4169E1>2. try？and try！</font></h4><p>There is a solution about the problem of the execution of exmultiple try statements. as following:<br>One solution to the above multiple try execution problem is to use try?. As follows is the sample code:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> valid1 <span class=\"operator\">=</span> <span class=\"keyword\">try?</span> verifyValueValidity(<span class=\"number\">50</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> valid2 <span class=\"operator\">=</span> <span class=\"keyword\">try?</span> verifyValueValidity(<span class=\"number\">500</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> valid3 <span class=\"operator\">=</span> <span class=\"keyword\">try?</span> verifyValueValidity(<span class=\"number\">5000</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> valid4 <span class=\"operator\">=</span> <span class=\"keyword\">try?</span> verifyValueValidity(<span class=\"number\">2500</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> <span class=\"type\">CustomError</span>.valueTooSmall &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Value is too small.&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> <span class=\"type\">CustomError</span>.valueTooLarge &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Value is too large.&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;An error occurred: <span class=\"subst\">\\(error)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The results of the execution are as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Value</span> <span class=\"keyword\">is</span> within acceptable range.</span><br><span class=\"line\"><span class=\"type\">Value</span> <span class=\"keyword\">is</span> too large.</span><br><span class=\"line\"><span class=\"type\">Value</span> <span class=\"keyword\">is</span> too large.</span><br><span class=\"line\"><span class=\"type\">Value</span> <span class=\"keyword\">is</span> too large.</span><br></pre></td></tr></table></figure>\n<p>The result of the execution shows that all the try statements are executed, but written this way Xcode will give you a Warning:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;<span class=\"keyword\">catch</span>&#x27; block <span class=\"keyword\">is</span> unreachable because no errors are thrown <span class=\"keyword\">in</span> &#x27;<span class=\"keyword\">do</span>&#x27; block</span><br></pre></td></tr></table></figure>\n<p>Like this:   </p>\n<img src=\"/assets/Swift/Concurrency/catch_warning.png\" class=\"\">\n<!-- <image src=\"images/catch_warning.png\">     -->\n<p>That’s right, try? will invalidate the catch statement so that all the try statements will be executed. So the above code can just be simplified to:          </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> valid1 <span class=\"operator\">=</span> <span class=\"keyword\">try?</span> verifyValueValidity(<span class=\"number\">50</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> valid2 <span class=\"operator\">=</span> <span class=\"keyword\">try?</span> verifyValueValidity(<span class=\"number\">500</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> valid3 <span class=\"operator\">=</span> <span class=\"keyword\">try?</span> verifyValueValidity(<span class=\"number\">5000</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> valid4 <span class=\"operator\">=</span> <span class=\"keyword\">try?</span> verifyValueValidity(<span class=\"number\">2500</span>)</span><br></pre></td></tr></table></figure>\n<p>So, when we don’t care about the execution of the catch statement, this is the way to write it.</p>\n<p><strong>Note:</strong><br>If you change try? to try!, the catch statement will also fail, but if the forced parsing fails, it will cause a Crash, so it is not recommended.</p>\n"},{"title":"01. Async and Await","date":"2023-08-23T08:00:00.000Z","_content":"\n<font color=gray size=2>*It will take about 10 minutes to finish reading this article.*</font>\n\n<!-- # **<font size=5 >Async and Await</font>** -->\n#### <font size=3 color=#4169E1>1. Description</font> \n \nIn Swift, async and await are keywords used for asynchronous programming, a cleaner, more readable way to handle asynchronous tasks. These are new features introduced in Swift 5.5 that make asynchronous code look more like synchronous code, and the use of async/await also naturally preserves the semantic structure of the code, providing the necessary support for at least three horizontal improvements: \n(1) Better performance for asynchronous code.   \n(2) Better tools that provide a more consistent experience when debugging, profiling, and exploring code.   \n(3) A foundation for future concurrency features.           \nIn short, they improve the maintainability and understandability of code.\n \n#### <font size=3 color=#4169E1>2. How to use async and await</font>  \n\n<font size=3 color=#4169E1>**2.1 async**</font>  \nA function can be declared as asynchronous by prefixing the return arrow of the function declaration with the async keyword:\n```Swift\nfunc loadSignature() async throws -> String {\n    do {\n        let signature = try await simulateSignatureLoading()\n        return signature\n    } catch {\n        throw CustomError.loadingError\n    }\n}\n```\nAn asynchronous function can pause execution when it encounters the await keyword and wait for an asynchronous operation to complete before resuming execution. \n\n<font size=3 color=#4169E1>**2.2 await**</font>  \nAwait is a keyword used to call asynchronous methods. When await is encountered, the execution of the function pauses until the asynchronous operation completes and returns the result.        \nHere's an example of using await to call an asynchronous function and wait for its result: \n```Swift\n\nfunc simulateSignatureLoading() async throws -> String {\n    // Simulate some asynchronous loading process, eg, from a network request or a file.\n    await Task.sleep(2_000_000_000) // Simulate a 2-second delay\n\n    let success = Bool.random() // Simulate successful or unsuccessful loading\n    if success {\n        let signature = \"This is my signature\"\n        return signature\n    } else {\n        throw CustomError.signatureNotFound\n    }\n}\n```\nSuspension mentioned above:         \n(1) The suspension is the method, not the thread that executes the method.      \n(2) Accurately await should be called a potential suspension point, not a suspension point, because not all await will be suspended, only encountered similar IO, manually start a sub-thread, etc. will suspend the current call stack.        \n(3) Before and after the pause point may occur before and after the thread switch, it is because of the asynchronous method before and after the pause point may change the thread of execution, so in the asynchronous method should be careful to use locks, semaphores and other synchronization operations.\n```Swift\nlet lock = NSLock.init()\nfunc test() async {\n  lock.lock()\n  try? await Task.sleep(nanoseconds: 1_000_000_000)\n  lock.unlock()\n}\n\nfor i in 0..<10 {\n  Task {\n    await test()\n  }\n}\n```\nCode like the above generates a deadlock at lock.lock(), as does switching to a semaphore.      \nNote:       \n async-await is often used companionally in Swift and can be thought of as simply this:         \n\"await is always waiting for a response from its partner, async.\"\n\n\n#### <font size=3 color=#4169E1>3. Application of async-await</font>  \n<font size=3 color=#4169E1>**3.1 Replaces traditional closure callbacks (Asynchronous serial)**</font>  \nTraditional closure callbacks are common in Swift for returning from an asynchronous task, usually in combination with a parameter of type result, as follows:\n```Swift\nfunc fetchImages(completion: ([UIImage]?, Error?) -> Void) {\n    // .. Execution of data requests\n}\n```\nOr\n```Swift\n\nfunc fetchImages(completion: (Result<[UIImage], Error>) -> Void) {\n    // .. Execution of data requests\n}\n```\nWhile this approach is still common, it can have several drawbacks:         \n(1) You have to make sure you call completion closures in every possible exit method.       \n(2) Closure code is often too deeply nested, optional types must be unwrapped, etc., making it harder to read and debug.    \n(3) You need to use weak references to avoid circular references.    \n(4) Implementers need to switch on results to get results (Block callbacks) and cannot use try catch statements from the implementation level.    \nThe fetchImages function above can simply be replaced with async/await as:\n```Swift\nfunc fetchImages() async throws -> [UIImage] {\n    // Simulate asynchronous operations, such as requesting image data from the web\n    return await withCheckedThrowingContinuation { continuation in\n        DispatchQueue.global().async {\n            // Perform an asynchronous operation to get images and errors\n            let images: [UIImage] = []\n            let error: Error? = nil\n\n            if let error = error {\n                continuation.resume(throwing: error)\n            } else {\n                continuation.resume(returning: images)\n            }\n        }\n    }\n}\n```\n```Swift\n\nasync func imagesData() {\n    do {\n        let images = try await fetchImages()\n        // This is where the fetched images are processed\n    } catch {\n        // Handling error\n    }\n}\n\nTask {\n    await imagesData()\n}\n\n```\n**Note 1:**   \nWhen adopting async-await in an existing project, you should be careful not to break all the code at once. When doing such a large-scale refactoring, it's best to consider maintaining the old implementation for the time being so that you don't have to update all the code until you know if the new implementation is stable enough. \nExample:\n```Swift\nstruct ImageFetcher {\n    @available(*, renamed: \"fetchImages()\")\n    func fetchImages(completion: (Result<[UIImage], Error>) -> Void) {\n    \n    }\n    func fetchImages() async throws -> [UIImage] {\n        // .. Execution of data requests\n    }\n}\n```\nThe asynchronous alternative refactoring option is added here, which still retains the old implementation, but adds an available attribute. If you want Xcode's deprecation warning, you can change it to:\n```Swift\n@available(*, deprecated, renamed: \"fetchImages()\")\n```\nThis way you can optimize your code incrementally without having to refactor your entire project at once.\n\n**Note 2:**\nIn the above code, the Result enumeration is also optimized together. Yes, async-await can greatly reduce the use of Result enumerations.\n\n<font size=3 color=#4169E1>**3.2 async-let (asynchronous parallelism)**</font>  \nLet's take a look at the following application for async-await:\n```Swift\nfunc fetchImage(from url: URL) async throws -> UIImage {\n    // Simulate asynchronous downloading of images\n    print(\"fetchImage----- begin \\(Thread.current)\")\n    await Task.sleep(1_000_000_000) // Simulates 1 second download time\n    let data = try await URLSession.shared.data(from: url)\n    guard let image = UIImage(data: data) else {\n        throw NSError(domain: \"ImageDownloadError\", code: 0, userInfo: [NSLocalizedDescriptionKey: \"Failed to download image\"])\n    }\n    print(\"fetchImage----- end \\(Thread.current)\")\n    return image\n}\n```\n```Swift\nfunc downloadImages() async {\n    let imageURLs = [\n        URL(string: \"https://example.com/image1.jpg\")!,\n        URL(string: \"https://example.com/image2.jpg\")!,\n        URL(string: \"https://example.com/image3.jpg\")!\n    ]\n    \n    do {\n        let image1 = await fetchImage(from: imageURLs[0])\n        print(\"Downloaded image 1:\", image1)\n        let image2 = await fetchImage(from: imageURLs[1])\n        print(\"Downloaded image 2:\", image2)\n        let image3 = await fetchImage(from: imageURLs[2])\n        print(\"Downloaded image 3:\", image3)\n        \n    } catch {\n      \n    }\n}\n\nTask {\n    await downloadImages()\n}\n```\nThe 3 images in the example are downloaded serially one by one, using async-let can optimize this code for asynchronous parallelism:\n```Swift\nasync func downloadImages() {\n    let imageURLs = [\n        URL(string: \"https://example.com/image1.jpg\")!,\n        URL(string: \"https://example.com/image2.jpg\")!,\n        URL(string: \"https://example.com/image3.jpg\")!\n    ]\n    var images: [UIImage] = []\n    do {\n        print(\">>>>>>>>>> 1 \\(Thread.current)\")\n        async let fetchImage1 = fetchImage(from: imageURLs[0])\n        async let fetchImage2 = fetchImage(from: imageURLs[1])\n        async let fetchImage3 = fetchImage(from: imageURLs[2])\n        print(\">>>>>>>>>> 2 \\(Thread.current)\")\n        let (image1, image2, image3) = await (try fetchImage1, try fetchImage2, try fetchImage3)\n        print(\">>>>>>>>>> 3 \\(Thread.current)\")\n        images.append(contentsOf: [image1, image2, image3])\n     } catch {\n      \n     }\n}\n```\nThe result of the Print:\n```Swift\n>>>>>>>>>> 1 <_NSMainThread: 0x7b10000003c0>{number = 1, name = main}\n>>>>>>>>>> 2 <_NSMainThread: 0x7b10000003c0>{number = 1, name = main}\nfetchImage----- begin <NSThread: 0x7b1000043a40>{number = 6, name = (null)}\nfetchImage----- begin <NSThread: 0x7b1000046200>{number = 7, name = (null)}\nfetchImage----- begin <NSThread: 0x7b1000046200>{number = 7, name = (null)}\nfetchImage----- begin <NSThread: 0x7b1000043a40>{number = 6, name = (null)}\nfetchImage----- end <NSThread: 0x7b100004b700>{number = 3, name = (null)}\nfetchImage----- end <NSThread: 0x7b1000048ac0>{number = 4, name = (null)}\nfetchImage----- end <NSThread: 0x7b100004b700>{number = 3, name = (null)}\nfetchImage----- end <NSThread: 0x7b1000046200>{number = 7, name = (null)}\n>>>>>>>>>> 3 <_NSMainThread: 0x7b10000003c0>{number = 1, name = main}\n```\n**Note:**   \nAfter modifying the image with async-let, fetchImage hangs, and the thread continues to perform other tasks until it encounters await, and fetchImage will not execute, which is why print2 executes before fetchImage. So async-let is a concurrent binding mechanism to achieve asynchronous concurrency.\n\n#### <font size=3 color=#4169E1>4. Conversion between asynchronous and synchronous functions</font>\nAsynchronous function types differ from synchronous function types. However, there exists an implicit conversion from a synchronous function type to the corresponding asynchronous function type. The approximate rules for combining 'throw' are as follows:\n```Swift\nstruct FunctionTypes {\n  var syncNonThrowing: () -> Void\n  var syncThrowing: () throws -> Void\n  var asyncNonThrowing: () async -> Void\n  var asyncThrowing: () async throws -> Void\n  \n  mutating func demonstrateConversions() {\n    // Okay to add 'async' and/or 'throws'    \n    asyncNonThrowing = syncNonThrowing\n    asyncThrowing = syncThrowing\n    syncThrowing = syncNonThrowing\n    asyncThrowing = asyncNonThrowing\n    \n    // Error to remove 'async' or 'throws'\n    syncNonThrowing = asyncNonThrowing // error\n    syncThrowing = asyncThrowing       // error\n    syncNonThrowing = syncThrowing     // error\n    asyncNonThrowing = syncThrowing    // error\n  }\n}\n```\nAs you can see above, basically synchronous functions can be converted to asynchronous functions, but it doesn't work the other way around.\n\n#### <font size=3 color=gray>*Reference*</font>\n[1] https://cloud.tencent.com/developer/article/2191310     \n[2] https://juejin.cn/post/7025261081291407373      \n[3] https://juejin.cn/post/7076733264798416926     \n[4] https://github.com/apple/swift-evolution/blob/main/proposals/0296-async-await.md     \n","source":"_posts/Swift/07. Concurrency/01. Async and Await.md","raw":"---\ntitle: 01. Async and Await\ndate: 2023-08-23 10:00:00\ncategories: \n- [Swift, 07. Concurrency]\ntags:\n- async\n- await\n---\n\n<font color=gray size=2>*It will take about 10 minutes to finish reading this article.*</font>\n\n<!-- # **<font size=5 >Async and Await</font>** -->\n#### <font size=3 color=#4169E1>1. Description</font> \n \nIn Swift, async and await are keywords used for asynchronous programming, a cleaner, more readable way to handle asynchronous tasks. These are new features introduced in Swift 5.5 that make asynchronous code look more like synchronous code, and the use of async/await also naturally preserves the semantic structure of the code, providing the necessary support for at least three horizontal improvements: \n(1) Better performance for asynchronous code.   \n(2) Better tools that provide a more consistent experience when debugging, profiling, and exploring code.   \n(3) A foundation for future concurrency features.           \nIn short, they improve the maintainability and understandability of code.\n \n#### <font size=3 color=#4169E1>2. How to use async and await</font>  \n\n<font size=3 color=#4169E1>**2.1 async**</font>  \nA function can be declared as asynchronous by prefixing the return arrow of the function declaration with the async keyword:\n```Swift\nfunc loadSignature() async throws -> String {\n    do {\n        let signature = try await simulateSignatureLoading()\n        return signature\n    } catch {\n        throw CustomError.loadingError\n    }\n}\n```\nAn asynchronous function can pause execution when it encounters the await keyword and wait for an asynchronous operation to complete before resuming execution. \n\n<font size=3 color=#4169E1>**2.2 await**</font>  \nAwait is a keyword used to call asynchronous methods. When await is encountered, the execution of the function pauses until the asynchronous operation completes and returns the result.        \nHere's an example of using await to call an asynchronous function and wait for its result: \n```Swift\n\nfunc simulateSignatureLoading() async throws -> String {\n    // Simulate some asynchronous loading process, eg, from a network request or a file.\n    await Task.sleep(2_000_000_000) // Simulate a 2-second delay\n\n    let success = Bool.random() // Simulate successful or unsuccessful loading\n    if success {\n        let signature = \"This is my signature\"\n        return signature\n    } else {\n        throw CustomError.signatureNotFound\n    }\n}\n```\nSuspension mentioned above:         \n(1) The suspension is the method, not the thread that executes the method.      \n(2) Accurately await should be called a potential suspension point, not a suspension point, because not all await will be suspended, only encountered similar IO, manually start a sub-thread, etc. will suspend the current call stack.        \n(3) Before and after the pause point may occur before and after the thread switch, it is because of the asynchronous method before and after the pause point may change the thread of execution, so in the asynchronous method should be careful to use locks, semaphores and other synchronization operations.\n```Swift\nlet lock = NSLock.init()\nfunc test() async {\n  lock.lock()\n  try? await Task.sleep(nanoseconds: 1_000_000_000)\n  lock.unlock()\n}\n\nfor i in 0..<10 {\n  Task {\n    await test()\n  }\n}\n```\nCode like the above generates a deadlock at lock.lock(), as does switching to a semaphore.      \nNote:       \n async-await is often used companionally in Swift and can be thought of as simply this:         \n\"await is always waiting for a response from its partner, async.\"\n\n\n#### <font size=3 color=#4169E1>3. Application of async-await</font>  \n<font size=3 color=#4169E1>**3.1 Replaces traditional closure callbacks (Asynchronous serial)**</font>  \nTraditional closure callbacks are common in Swift for returning from an asynchronous task, usually in combination with a parameter of type result, as follows:\n```Swift\nfunc fetchImages(completion: ([UIImage]?, Error?) -> Void) {\n    // .. Execution of data requests\n}\n```\nOr\n```Swift\n\nfunc fetchImages(completion: (Result<[UIImage], Error>) -> Void) {\n    // .. Execution of data requests\n}\n```\nWhile this approach is still common, it can have several drawbacks:         \n(1) You have to make sure you call completion closures in every possible exit method.       \n(2) Closure code is often too deeply nested, optional types must be unwrapped, etc., making it harder to read and debug.    \n(3) You need to use weak references to avoid circular references.    \n(4) Implementers need to switch on results to get results (Block callbacks) and cannot use try catch statements from the implementation level.    \nThe fetchImages function above can simply be replaced with async/await as:\n```Swift\nfunc fetchImages() async throws -> [UIImage] {\n    // Simulate asynchronous operations, such as requesting image data from the web\n    return await withCheckedThrowingContinuation { continuation in\n        DispatchQueue.global().async {\n            // Perform an asynchronous operation to get images and errors\n            let images: [UIImage] = []\n            let error: Error? = nil\n\n            if let error = error {\n                continuation.resume(throwing: error)\n            } else {\n                continuation.resume(returning: images)\n            }\n        }\n    }\n}\n```\n```Swift\n\nasync func imagesData() {\n    do {\n        let images = try await fetchImages()\n        // This is where the fetched images are processed\n    } catch {\n        // Handling error\n    }\n}\n\nTask {\n    await imagesData()\n}\n\n```\n**Note 1:**   \nWhen adopting async-await in an existing project, you should be careful not to break all the code at once. When doing such a large-scale refactoring, it's best to consider maintaining the old implementation for the time being so that you don't have to update all the code until you know if the new implementation is stable enough. \nExample:\n```Swift\nstruct ImageFetcher {\n    @available(*, renamed: \"fetchImages()\")\n    func fetchImages(completion: (Result<[UIImage], Error>) -> Void) {\n    \n    }\n    func fetchImages() async throws -> [UIImage] {\n        // .. Execution of data requests\n    }\n}\n```\nThe asynchronous alternative refactoring option is added here, which still retains the old implementation, but adds an available attribute. If you want Xcode's deprecation warning, you can change it to:\n```Swift\n@available(*, deprecated, renamed: \"fetchImages()\")\n```\nThis way you can optimize your code incrementally without having to refactor your entire project at once.\n\n**Note 2:**\nIn the above code, the Result enumeration is also optimized together. Yes, async-await can greatly reduce the use of Result enumerations.\n\n<font size=3 color=#4169E1>**3.2 async-let (asynchronous parallelism)**</font>  \nLet's take a look at the following application for async-await:\n```Swift\nfunc fetchImage(from url: URL) async throws -> UIImage {\n    // Simulate asynchronous downloading of images\n    print(\"fetchImage----- begin \\(Thread.current)\")\n    await Task.sleep(1_000_000_000) // Simulates 1 second download time\n    let data = try await URLSession.shared.data(from: url)\n    guard let image = UIImage(data: data) else {\n        throw NSError(domain: \"ImageDownloadError\", code: 0, userInfo: [NSLocalizedDescriptionKey: \"Failed to download image\"])\n    }\n    print(\"fetchImage----- end \\(Thread.current)\")\n    return image\n}\n```\n```Swift\nfunc downloadImages() async {\n    let imageURLs = [\n        URL(string: \"https://example.com/image1.jpg\")!,\n        URL(string: \"https://example.com/image2.jpg\")!,\n        URL(string: \"https://example.com/image3.jpg\")!\n    ]\n    \n    do {\n        let image1 = await fetchImage(from: imageURLs[0])\n        print(\"Downloaded image 1:\", image1)\n        let image2 = await fetchImage(from: imageURLs[1])\n        print(\"Downloaded image 2:\", image2)\n        let image3 = await fetchImage(from: imageURLs[2])\n        print(\"Downloaded image 3:\", image3)\n        \n    } catch {\n      \n    }\n}\n\nTask {\n    await downloadImages()\n}\n```\nThe 3 images in the example are downloaded serially one by one, using async-let can optimize this code for asynchronous parallelism:\n```Swift\nasync func downloadImages() {\n    let imageURLs = [\n        URL(string: \"https://example.com/image1.jpg\")!,\n        URL(string: \"https://example.com/image2.jpg\")!,\n        URL(string: \"https://example.com/image3.jpg\")!\n    ]\n    var images: [UIImage] = []\n    do {\n        print(\">>>>>>>>>> 1 \\(Thread.current)\")\n        async let fetchImage1 = fetchImage(from: imageURLs[0])\n        async let fetchImage2 = fetchImage(from: imageURLs[1])\n        async let fetchImage3 = fetchImage(from: imageURLs[2])\n        print(\">>>>>>>>>> 2 \\(Thread.current)\")\n        let (image1, image2, image3) = await (try fetchImage1, try fetchImage2, try fetchImage3)\n        print(\">>>>>>>>>> 3 \\(Thread.current)\")\n        images.append(contentsOf: [image1, image2, image3])\n     } catch {\n      \n     }\n}\n```\nThe result of the Print:\n```Swift\n>>>>>>>>>> 1 <_NSMainThread: 0x7b10000003c0>{number = 1, name = main}\n>>>>>>>>>> 2 <_NSMainThread: 0x7b10000003c0>{number = 1, name = main}\nfetchImage----- begin <NSThread: 0x7b1000043a40>{number = 6, name = (null)}\nfetchImage----- begin <NSThread: 0x7b1000046200>{number = 7, name = (null)}\nfetchImage----- begin <NSThread: 0x7b1000046200>{number = 7, name = (null)}\nfetchImage----- begin <NSThread: 0x7b1000043a40>{number = 6, name = (null)}\nfetchImage----- end <NSThread: 0x7b100004b700>{number = 3, name = (null)}\nfetchImage----- end <NSThread: 0x7b1000048ac0>{number = 4, name = (null)}\nfetchImage----- end <NSThread: 0x7b100004b700>{number = 3, name = (null)}\nfetchImage----- end <NSThread: 0x7b1000046200>{number = 7, name = (null)}\n>>>>>>>>>> 3 <_NSMainThread: 0x7b10000003c0>{number = 1, name = main}\n```\n**Note:**   \nAfter modifying the image with async-let, fetchImage hangs, and the thread continues to perform other tasks until it encounters await, and fetchImage will not execute, which is why print2 executes before fetchImage. So async-let is a concurrent binding mechanism to achieve asynchronous concurrency.\n\n#### <font size=3 color=#4169E1>4. Conversion between asynchronous and synchronous functions</font>\nAsynchronous function types differ from synchronous function types. However, there exists an implicit conversion from a synchronous function type to the corresponding asynchronous function type. The approximate rules for combining 'throw' are as follows:\n```Swift\nstruct FunctionTypes {\n  var syncNonThrowing: () -> Void\n  var syncThrowing: () throws -> Void\n  var asyncNonThrowing: () async -> Void\n  var asyncThrowing: () async throws -> Void\n  \n  mutating func demonstrateConversions() {\n    // Okay to add 'async' and/or 'throws'    \n    asyncNonThrowing = syncNonThrowing\n    asyncThrowing = syncThrowing\n    syncThrowing = syncNonThrowing\n    asyncThrowing = asyncNonThrowing\n    \n    // Error to remove 'async' or 'throws'\n    syncNonThrowing = asyncNonThrowing // error\n    syncThrowing = asyncThrowing       // error\n    syncNonThrowing = syncThrowing     // error\n    asyncNonThrowing = syncThrowing    // error\n  }\n}\n```\nAs you can see above, basically synchronous functions can be converted to asynchronous functions, but it doesn't work the other way around.\n\n#### <font size=3 color=gray>*Reference*</font>\n[1] https://cloud.tencent.com/developer/article/2191310     \n[2] https://juejin.cn/post/7025261081291407373      \n[3] https://juejin.cn/post/7076733264798416926     \n[4] https://github.com/apple/swift-evolution/blob/main/proposals/0296-async-await.md     \n","slug":"Swift/07. Concurrency/01. Async and Await","published":1,"updated":"2023-08-23T18:33:47.071Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clm7w97ru002ckb0mdccdhjcn","content":"<p><font color=gray size=2><em>It will take about 10 minutes to finish reading this article.</em></font></p>\n<!-- # **<font size=5 >Async and Await</font>** -->\n<h4 id=\"1-Description\"><a href=\"#1-Description\" class=\"headerlink\" title=\"1. Description\"></a><font size=3 color=#4169E1>1. Description</font></h4><p>In Swift, async and await are keywords used for asynchronous programming, a cleaner, more readable way to handle asynchronous tasks. These are new features introduced in Swift 5.5 that make asynchronous code look more like synchronous code, and the use of async&#x2F;await also naturally preserves the semantic structure of the code, providing the necessary support for at least three horizontal improvements:<br>(1) Better performance for asynchronous code.<br>(2) Better tools that provide a more consistent experience when debugging, profiling, and exploring code.<br>(3) A foundation for future concurrency features.<br>In short, they improve the maintainability and understandability of code.</p>\n<h4 id=\"2-How-to-use-async-and-await\"><a href=\"#2-How-to-use-async-and-await\" class=\"headerlink\" title=\"2. How to use async and await\"></a><font size=3 color=#4169E1>2. How to use async and await</font></h4><p><font size=3 color=#4169E1><strong>2.1 async</strong></font><br>A function can be declared as asynchronous by prefixing the return arrow of the function declaration with the async keyword:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">loadSignature</span>() <span class=\"keyword\">async</span> <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> signature <span class=\"operator\">=</span> <span class=\"keyword\">try</span> <span class=\"keyword\">await</span> simulateSignatureLoading()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> signature</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"type\">CustomError</span>.loadingError</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>An asynchronous function can pause execution when it encounters the await keyword and wait for an asynchronous operation to complete before resuming execution. </p>\n<p><font size=3 color=#4169E1><strong>2.2 await</strong></font><br>Await is a keyword used to call asynchronous methods. When await is encountered, the execution of the function pauses until the asynchronous operation completes and returns the result.<br>Here’s an example of using await to call an asynchronous function and wait for its result: </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">simulateSignatureLoading</span>() <span class=\"keyword\">async</span> <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Simulate some asynchronous loading process, eg, from a network request or a file.</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"type\">Task</span>.sleep(<span class=\"number\">2_000_000_000</span>) <span class=\"comment\">// Simulate a 2-second delay</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> success <span class=\"operator\">=</span> <span class=\"type\">Bool</span>.random() <span class=\"comment\">// Simulate successful or unsuccessful loading</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> success &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> signature <span class=\"operator\">=</span> <span class=\"string\">&quot;This is my signature&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> signature</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"type\">CustomError</span>.signatureNotFound</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Suspension mentioned above:<br>(1) The suspension is the method, not the thread that executes the method.<br>(2) Accurately await should be called a potential suspension point, not a suspension point, because not all await will be suspended, only encountered similar IO, manually start a sub-thread, etc. will suspend the current call stack.<br>(3) Before and after the pause point may occur before and after the thread switch, it is because of the asynchronous method before and after the pause point may change the thread of execution, so in the asynchronous method should be careful to use locks, semaphores and other synchronization operations.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> lock <span class=\"operator\">=</span> <span class=\"type\">NSLock</span>.<span class=\"keyword\">init</span>()</span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">test</span>() <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">  lock.lock()</span><br><span class=\"line\">  <span class=\"keyword\">try?</span> <span class=\"keyword\">await</span> <span class=\"type\">Task</span>.sleep(nanoseconds: <span class=\"number\">1_000_000_000</span>)</span><br><span class=\"line\">  lock.unlock()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">0</span><span class=\"operator\">..&lt;</span><span class=\"number\">10</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">Task</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> test()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Code like the above generates a deadlock at lock.lock(), as does switching to a semaphore.<br>Note:<br> async-await is often used companionally in Swift and can be thought of as simply this:<br>“await is always waiting for a response from its partner, async.”</p>\n<h4 id=\"3-Application-of-async-await\"><a href=\"#3-Application-of-async-await\" class=\"headerlink\" title=\"3. Application of async-await\"></a><font size=3 color=#4169E1>3. Application of async-await</font></h4><p><font size=3 color=#4169E1><strong>3.1 Replaces traditional closure callbacks (Asynchronous serial)</strong></font><br>Traditional closure callbacks are common in Swift for returning from an asynchronous task, usually in combination with a parameter of type result, as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">fetchImages</span>(<span class=\"params\">completion</span>: ([<span class=\"type\">UIImage</span>]<span class=\"operator\">?</span>, <span class=\"type\">Error</span>?) -&gt; <span class=\"type\">Void</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// .. Execution of data requests</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Or</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">fetchImages</span>(<span class=\"params\">completion</span>: (<span class=\"type\">Result</span>&lt;[<span class=\"type\">UIImage</span>], <span class=\"type\">Error</span>&gt;) -&gt; <span class=\"type\">Void</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// .. Execution of data requests</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>While this approach is still common, it can have several drawbacks:<br>(1) You have to make sure you call completion closures in every possible exit method.<br>(2) Closure code is often too deeply nested, optional types must be unwrapped, etc., making it harder to read and debug.<br>(3) You need to use weak references to avoid circular references.<br>(4) Implementers need to switch on results to get results (Block callbacks) and cannot use try catch statements from the implementation level.<br>The fetchImages function above can simply be replaced with async&#x2F;await as:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">fetchImages</span>() <span class=\"keyword\">async</span> <span class=\"keyword\">throws</span> -&gt; [<span class=\"type\">UIImage</span>] &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Simulate asynchronous operations, such as requesting image data from the web</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> withCheckedThrowingContinuation &#123; continuation <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"type\">DispatchQueue</span>.global().async &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Perform an asynchronous operation to get images and errors</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> images: [<span class=\"type\">UIImage</span>] <span class=\"operator\">=</span> []</span><br><span class=\"line\">            <span class=\"keyword\">let</span> error: <span class=\"type\">Error</span>? <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> error <span class=\"operator\">=</span> error &#123;</span><br><span class=\"line\">                continuation.resume(throwing: error)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                continuation.resume(returning: images)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">func</span> <span class=\"title function_\">imagesData</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> images <span class=\"operator\">=</span> <span class=\"keyword\">try</span> <span class=\"keyword\">await</span> fetchImages()</span><br><span class=\"line\">        <span class=\"comment\">// This is where the fetched images are processed</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Handling error</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Task</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> imagesData()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>Note 1:</strong><br>When adopting async-await in an existing project, you should be careful not to break all the code at once. When doing such a large-scale refactoring, it’s best to consider maintaining the old implementation for the time being so that you don’t have to update all the code until you know if the new implementation is stable enough.<br>Example:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ImageFetcher</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">@available</span>(<span class=\"operator\">*</span>, renamed: <span class=\"string\">&quot;fetchImages()&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">fetchImages</span>(<span class=\"params\">completion</span>: (<span class=\"type\">Result</span>&lt;[<span class=\"type\">UIImage</span>], <span class=\"type\">Error</span>&gt;) -&gt; <span class=\"type\">Void</span>) &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">fetchImages</span>() <span class=\"keyword\">async</span> <span class=\"keyword\">throws</span> -&gt; [<span class=\"type\">UIImage</span>] &#123;</span><br><span class=\"line\">        <span class=\"comment\">// .. Execution of data requests</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The asynchronous alternative refactoring option is added here, which still retains the old implementation, but adds an available attribute. If you want Xcode’s deprecation warning, you can change it to:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@available</span>(<span class=\"operator\">*</span>, deprecated, renamed: <span class=\"string\">&quot;fetchImages()&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>This way you can optimize your code incrementally without having to refactor your entire project at once.</p>\n<p><strong>Note 2:</strong><br>In the above code, the Result enumeration is also optimized together. Yes, async-await can greatly reduce the use of Result enumerations.</p>\n<p><font size=3 color=#4169E1><strong>3.2 async-let (asynchronous parallelism)</strong></font><br>Let’s take a look at the following application for async-await:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">fetchImage</span>(<span class=\"params\">from</span> <span class=\"params\">url</span>: <span class=\"type\">URL</span>) <span class=\"keyword\">async</span> <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">UIImage</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Simulate asynchronous downloading of images</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;fetchImage----- begin <span class=\"subst\">\\(Thread.current)</span>&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"type\">Task</span>.sleep(<span class=\"number\">1_000_000_000</span>) <span class=\"comment\">// Simulates 1 second download time</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> data <span class=\"operator\">=</span> <span class=\"keyword\">try</span> <span class=\"keyword\">await</span> <span class=\"type\">URLSession</span>.shared.data(from: url)</span><br><span class=\"line\">    <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> image <span class=\"operator\">=</span> <span class=\"type\">UIImage</span>(data: data) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"type\">NSError</span>(domain: <span class=\"string\">&quot;ImageDownloadError&quot;</span>, code: <span class=\"number\">0</span>, userInfo: [NSLocalizedDescriptionKey: <span class=\"string\">&quot;Failed to download image&quot;</span>])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;fetchImage----- end <span class=\"subst\">\\(Thread.current)</span>&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> image</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">downloadImages</span>() <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> imageURLs <span class=\"operator\">=</span> [</span><br><span class=\"line\">        <span class=\"type\">URL</span>(string: <span class=\"string\">&quot;https://example.com/image1.jpg&quot;</span>)<span class=\"operator\">!</span>,</span><br><span class=\"line\">        <span class=\"type\">URL</span>(string: <span class=\"string\">&quot;https://example.com/image2.jpg&quot;</span>)<span class=\"operator\">!</span>,</span><br><span class=\"line\">        <span class=\"type\">URL</span>(string: <span class=\"string\">&quot;https://example.com/image3.jpg&quot;</span>)<span class=\"operator\">!</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> image1 <span class=\"operator\">=</span> <span class=\"keyword\">await</span> fetchImage(from: imageURLs[<span class=\"number\">0</span>])</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Downloaded image 1:&quot;</span>, image1)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> image2 <span class=\"operator\">=</span> <span class=\"keyword\">await</span> fetchImage(from: imageURLs[<span class=\"number\">1</span>])</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Downloaded image 2:&quot;</span>, image2)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> image3 <span class=\"operator\">=</span> <span class=\"keyword\">await</span> fetchImage(from: imageURLs[<span class=\"number\">2</span>])</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Downloaded image 3:&quot;</span>, image3)</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">      </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Task</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> downloadImages()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The 3 images in the example are downloaded serially one by one, using async-let can optimize this code for asynchronous parallelism:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">func</span> <span class=\"title function_\">downloadImages</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> imageURLs <span class=\"operator\">=</span> [</span><br><span class=\"line\">        <span class=\"type\">URL</span>(string: <span class=\"string\">&quot;https://example.com/image1.jpg&quot;</span>)<span class=\"operator\">!</span>,</span><br><span class=\"line\">        <span class=\"type\">URL</span>(string: <span class=\"string\">&quot;https://example.com/image2.jpg&quot;</span>)<span class=\"operator\">!</span>,</span><br><span class=\"line\">        <span class=\"type\">URL</span>(string: <span class=\"string\">&quot;https://example.com/image3.jpg&quot;</span>)<span class=\"operator\">!</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">    <span class=\"keyword\">var</span> images: [<span class=\"type\">UIImage</span>] <span class=\"operator\">=</span> []</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 1 <span class=\"subst\">\\(Thread.current)</span>&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">async</span> <span class=\"keyword\">let</span> fetchImage1 <span class=\"operator\">=</span> fetchImage(from: imageURLs[<span class=\"number\">0</span>])</span><br><span class=\"line\">        <span class=\"keyword\">async</span> <span class=\"keyword\">let</span> fetchImage2 <span class=\"operator\">=</span> fetchImage(from: imageURLs[<span class=\"number\">1</span>])</span><br><span class=\"line\">        <span class=\"keyword\">async</span> <span class=\"keyword\">let</span> fetchImage3 <span class=\"operator\">=</span> fetchImage(from: imageURLs[<span class=\"number\">2</span>])</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 2 <span class=\"subst\">\\(Thread.current)</span>&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> (image1, image2, image3) <span class=\"operator\">=</span> <span class=\"keyword\">await</span> (<span class=\"keyword\">try</span> fetchImage1, <span class=\"keyword\">try</span> fetchImage2, <span class=\"keyword\">try</span> fetchImage3)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 3 <span class=\"subst\">\\(Thread.current)</span>&quot;</span>)</span><br><span class=\"line\">        images.append(contentsOf: [image1, image2, image3])</span><br><span class=\"line\">     &#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">      </span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The result of the Print:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span> <span class=\"number\">1</span> <span class=\"operator\">&lt;</span>_NSMainThread: <span class=\"number\">0x7b10000003c0</span><span class=\"operator\">&gt;</span>&#123;number <span class=\"operator\">=</span> <span class=\"number\">1</span>, name <span class=\"operator\">=</span> main&#125;</span><br><span class=\"line\"><span class=\"operator\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span> <span class=\"number\">2</span> <span class=\"operator\">&lt;</span>_NSMainThread: <span class=\"number\">0x7b10000003c0</span><span class=\"operator\">&gt;</span>&#123;number <span class=\"operator\">=</span> <span class=\"number\">1</span>, name <span class=\"operator\">=</span> main&#125;</span><br><span class=\"line\">fetchImage<span class=\"operator\">-----</span> begin <span class=\"operator\">&lt;</span><span class=\"type\">NSThread</span>: <span class=\"number\">0x7b1000043a40</span><span class=\"operator\">&gt;</span>&#123;number <span class=\"operator\">=</span> <span class=\"number\">6</span>, name <span class=\"operator\">=</span> (null)&#125;</span><br><span class=\"line\">fetchImage<span class=\"operator\">-----</span> begin <span class=\"operator\">&lt;</span><span class=\"type\">NSThread</span>: <span class=\"number\">0x7b1000046200</span><span class=\"operator\">&gt;</span>&#123;number <span class=\"operator\">=</span> <span class=\"number\">7</span>, name <span class=\"operator\">=</span> (null)&#125;</span><br><span class=\"line\">fetchImage<span class=\"operator\">-----</span> begin <span class=\"operator\">&lt;</span><span class=\"type\">NSThread</span>: <span class=\"number\">0x7b1000046200</span><span class=\"operator\">&gt;</span>&#123;number <span class=\"operator\">=</span> <span class=\"number\">7</span>, name <span class=\"operator\">=</span> (null)&#125;</span><br><span class=\"line\">fetchImage<span class=\"operator\">-----</span> begin <span class=\"operator\">&lt;</span><span class=\"type\">NSThread</span>: <span class=\"number\">0x7b1000043a40</span><span class=\"operator\">&gt;</span>&#123;number <span class=\"operator\">=</span> <span class=\"number\">6</span>, name <span class=\"operator\">=</span> (null)&#125;</span><br><span class=\"line\">fetchImage<span class=\"operator\">-----</span> end <span class=\"operator\">&lt;</span><span class=\"type\">NSThread</span>: <span class=\"number\">0x7b100004b700</span><span class=\"operator\">&gt;</span>&#123;number <span class=\"operator\">=</span> <span class=\"number\">3</span>, name <span class=\"operator\">=</span> (null)&#125;</span><br><span class=\"line\">fetchImage<span class=\"operator\">-----</span> end <span class=\"operator\">&lt;</span><span class=\"type\">NSThread</span>: <span class=\"number\">0x7b1000048ac0</span><span class=\"operator\">&gt;</span>&#123;number <span class=\"operator\">=</span> <span class=\"number\">4</span>, name <span class=\"operator\">=</span> (null)&#125;</span><br><span class=\"line\">fetchImage<span class=\"operator\">-----</span> end <span class=\"operator\">&lt;</span><span class=\"type\">NSThread</span>: <span class=\"number\">0x7b100004b700</span><span class=\"operator\">&gt;</span>&#123;number <span class=\"operator\">=</span> <span class=\"number\">3</span>, name <span class=\"operator\">=</span> (null)&#125;</span><br><span class=\"line\">fetchImage<span class=\"operator\">-----</span> end <span class=\"operator\">&lt;</span><span class=\"type\">NSThread</span>: <span class=\"number\">0x7b1000046200</span><span class=\"operator\">&gt;</span>&#123;number <span class=\"operator\">=</span> <span class=\"number\">7</span>, name <span class=\"operator\">=</span> (null)&#125;</span><br><span class=\"line\"><span class=\"operator\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span> <span class=\"number\">3</span> <span class=\"operator\">&lt;</span>_NSMainThread: <span class=\"number\">0x7b10000003c0</span><span class=\"operator\">&gt;</span>&#123;number <span class=\"operator\">=</span> <span class=\"number\">1</span>, name <span class=\"operator\">=</span> main&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>Note:</strong><br>After modifying the image with async-let, fetchImage hangs, and the thread continues to perform other tasks until it encounters await, and fetchImage will not execute, which is why print2 executes before fetchImage. So async-let is a concurrent binding mechanism to achieve asynchronous concurrency.</p>\n<h4 id=\"4-Conversion-between-asynchronous-and-synchronous-functions\"><a href=\"#4-Conversion-between-asynchronous-and-synchronous-functions\" class=\"headerlink\" title=\"4. Conversion between asynchronous and synchronous functions\"></a><font size=3 color=#4169E1>4. Conversion between asynchronous and synchronous functions</font></h4><p>Asynchronous function types differ from synchronous function types. However, there exists an implicit conversion from a synchronous function type to the corresponding asynchronous function type. The approximate rules for combining ‘throw’ are as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">FunctionTypes</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> syncNonThrowing: () -&gt; <span class=\"type\">Void</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> syncThrowing: () <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">Void</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> asyncNonThrowing: () <span class=\"keyword\">async</span> -&gt; <span class=\"type\">Void</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> asyncThrowing: () <span class=\"keyword\">async</span> <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">Void</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">demonstrateConversions</span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Okay to add &#x27;async&#x27; and/or &#x27;throws&#x27;    </span></span><br><span class=\"line\">    asyncNonThrowing <span class=\"operator\">=</span> syncNonThrowing</span><br><span class=\"line\">    asyncThrowing <span class=\"operator\">=</span> syncThrowing</span><br><span class=\"line\">    syncThrowing <span class=\"operator\">=</span> syncNonThrowing</span><br><span class=\"line\">    asyncThrowing <span class=\"operator\">=</span> asyncNonThrowing</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Error to remove &#x27;async&#x27; or &#x27;throws&#x27;</span></span><br><span class=\"line\">    syncNonThrowing <span class=\"operator\">=</span> asyncNonThrowing <span class=\"comment\">// error</span></span><br><span class=\"line\">    syncThrowing <span class=\"operator\">=</span> asyncThrowing       <span class=\"comment\">// error</span></span><br><span class=\"line\">    syncNonThrowing <span class=\"operator\">=</span> syncThrowing     <span class=\"comment\">// error</span></span><br><span class=\"line\">    asyncNonThrowing <span class=\"operator\">=</span> syncThrowing    <span class=\"comment\">// error</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>As you can see above, basically synchronous functions can be converted to asynchronous functions, but it doesn’t work the other way around.</p>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://cloud.tencent.com/developer/article/2191310\">https://cloud.tencent.com/developer/article/2191310</a><br>[2] <a href=\"https://juejin.cn/post/7025261081291407373\">https://juejin.cn/post/7025261081291407373</a><br>[3] <a href=\"https://juejin.cn/post/7076733264798416926\">https://juejin.cn/post/7076733264798416926</a><br>[4] <a href=\"https://github.com/apple/swift-evolution/blob/main/proposals/0296-async-await.md\">https://github.com/apple/swift-evolution/blob/main/proposals/0296-async-await.md</a>     </p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 10 minutes to finish reading this article.</em></font></p>\n<!-- # **<font size=5 >Async and Await</font>** -->\n<h4 id=\"1-Description\"><a href=\"#1-Description\" class=\"headerlink\" title=\"1. Description\"></a><font size=3 color=#4169E1>1. Description</font></h4><p>In Swift, async and await are keywords used for asynchronous programming, a cleaner, more readable way to handle asynchronous tasks. These are new features introduced in Swift 5.5 that make asynchronous code look more like synchronous code, and the use of async&#x2F;await also naturally preserves the semantic structure of the code, providing the necessary support for at least three horizontal improvements:<br>(1) Better performance for asynchronous code.<br>(2) Better tools that provide a more consistent experience when debugging, profiling, and exploring code.<br>(3) A foundation for future concurrency features.<br>In short, they improve the maintainability and understandability of code.</p>\n<h4 id=\"2-How-to-use-async-and-await\"><a href=\"#2-How-to-use-async-and-await\" class=\"headerlink\" title=\"2. How to use async and await\"></a><font size=3 color=#4169E1>2. How to use async and await</font></h4><p><font size=3 color=#4169E1><strong>2.1 async</strong></font><br>A function can be declared as asynchronous by prefixing the return arrow of the function declaration with the async keyword:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">loadSignature</span>() <span class=\"keyword\">async</span> <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> signature <span class=\"operator\">=</span> <span class=\"keyword\">try</span> <span class=\"keyword\">await</span> simulateSignatureLoading()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> signature</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"type\">CustomError</span>.loadingError</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>An asynchronous function can pause execution when it encounters the await keyword and wait for an asynchronous operation to complete before resuming execution. </p>\n<p><font size=3 color=#4169E1><strong>2.2 await</strong></font><br>Await is a keyword used to call asynchronous methods. When await is encountered, the execution of the function pauses until the asynchronous operation completes and returns the result.<br>Here’s an example of using await to call an asynchronous function and wait for its result: </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">simulateSignatureLoading</span>() <span class=\"keyword\">async</span> <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Simulate some asynchronous loading process, eg, from a network request or a file.</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"type\">Task</span>.sleep(<span class=\"number\">2_000_000_000</span>) <span class=\"comment\">// Simulate a 2-second delay</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> success <span class=\"operator\">=</span> <span class=\"type\">Bool</span>.random() <span class=\"comment\">// Simulate successful or unsuccessful loading</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> success &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> signature <span class=\"operator\">=</span> <span class=\"string\">&quot;This is my signature&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> signature</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"type\">CustomError</span>.signatureNotFound</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Suspension mentioned above:<br>(1) The suspension is the method, not the thread that executes the method.<br>(2) Accurately await should be called a potential suspension point, not a suspension point, because not all await will be suspended, only encountered similar IO, manually start a sub-thread, etc. will suspend the current call stack.<br>(3) Before and after the pause point may occur before and after the thread switch, it is because of the asynchronous method before and after the pause point may change the thread of execution, so in the asynchronous method should be careful to use locks, semaphores and other synchronization operations.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> lock <span class=\"operator\">=</span> <span class=\"type\">NSLock</span>.<span class=\"keyword\">init</span>()</span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">test</span>() <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">  lock.lock()</span><br><span class=\"line\">  <span class=\"keyword\">try?</span> <span class=\"keyword\">await</span> <span class=\"type\">Task</span>.sleep(nanoseconds: <span class=\"number\">1_000_000_000</span>)</span><br><span class=\"line\">  lock.unlock()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">0</span><span class=\"operator\">..&lt;</span><span class=\"number\">10</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">Task</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> test()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Code like the above generates a deadlock at lock.lock(), as does switching to a semaphore.<br>Note:<br> async-await is often used companionally in Swift and can be thought of as simply this:<br>“await is always waiting for a response from its partner, async.”</p>\n<h4 id=\"3-Application-of-async-await\"><a href=\"#3-Application-of-async-await\" class=\"headerlink\" title=\"3. Application of async-await\"></a><font size=3 color=#4169E1>3. Application of async-await</font></h4><p><font size=3 color=#4169E1><strong>3.1 Replaces traditional closure callbacks (Asynchronous serial)</strong></font><br>Traditional closure callbacks are common in Swift for returning from an asynchronous task, usually in combination with a parameter of type result, as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">fetchImages</span>(<span class=\"params\">completion</span>: ([<span class=\"type\">UIImage</span>]<span class=\"operator\">?</span>, <span class=\"type\">Error</span>?) -&gt; <span class=\"type\">Void</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// .. Execution of data requests</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Or</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">fetchImages</span>(<span class=\"params\">completion</span>: (<span class=\"type\">Result</span>&lt;[<span class=\"type\">UIImage</span>], <span class=\"type\">Error</span>&gt;) -&gt; <span class=\"type\">Void</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// .. Execution of data requests</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>While this approach is still common, it can have several drawbacks:<br>(1) You have to make sure you call completion closures in every possible exit method.<br>(2) Closure code is often too deeply nested, optional types must be unwrapped, etc., making it harder to read and debug.<br>(3) You need to use weak references to avoid circular references.<br>(4) Implementers need to switch on results to get results (Block callbacks) and cannot use try catch statements from the implementation level.<br>The fetchImages function above can simply be replaced with async&#x2F;await as:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">fetchImages</span>() <span class=\"keyword\">async</span> <span class=\"keyword\">throws</span> -&gt; [<span class=\"type\">UIImage</span>] &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Simulate asynchronous operations, such as requesting image data from the web</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> withCheckedThrowingContinuation &#123; continuation <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"type\">DispatchQueue</span>.global().async &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Perform an asynchronous operation to get images and errors</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> images: [<span class=\"type\">UIImage</span>] <span class=\"operator\">=</span> []</span><br><span class=\"line\">            <span class=\"keyword\">let</span> error: <span class=\"type\">Error</span>? <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> error <span class=\"operator\">=</span> error &#123;</span><br><span class=\"line\">                continuation.resume(throwing: error)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                continuation.resume(returning: images)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">func</span> <span class=\"title function_\">imagesData</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> images <span class=\"operator\">=</span> <span class=\"keyword\">try</span> <span class=\"keyword\">await</span> fetchImages()</span><br><span class=\"line\">        <span class=\"comment\">// This is where the fetched images are processed</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Handling error</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Task</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> imagesData()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>Note 1:</strong><br>When adopting async-await in an existing project, you should be careful not to break all the code at once. When doing such a large-scale refactoring, it’s best to consider maintaining the old implementation for the time being so that you don’t have to update all the code until you know if the new implementation is stable enough.<br>Example:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ImageFetcher</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">@available</span>(<span class=\"operator\">*</span>, renamed: <span class=\"string\">&quot;fetchImages()&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">fetchImages</span>(<span class=\"params\">completion</span>: (<span class=\"type\">Result</span>&lt;[<span class=\"type\">UIImage</span>], <span class=\"type\">Error</span>&gt;) -&gt; <span class=\"type\">Void</span>) &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">fetchImages</span>() <span class=\"keyword\">async</span> <span class=\"keyword\">throws</span> -&gt; [<span class=\"type\">UIImage</span>] &#123;</span><br><span class=\"line\">        <span class=\"comment\">// .. Execution of data requests</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The asynchronous alternative refactoring option is added here, which still retains the old implementation, but adds an available attribute. If you want Xcode’s deprecation warning, you can change it to:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@available</span>(<span class=\"operator\">*</span>, deprecated, renamed: <span class=\"string\">&quot;fetchImages()&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>This way you can optimize your code incrementally without having to refactor your entire project at once.</p>\n<p><strong>Note 2:</strong><br>In the above code, the Result enumeration is also optimized together. Yes, async-await can greatly reduce the use of Result enumerations.</p>\n<p><font size=3 color=#4169E1><strong>3.2 async-let (asynchronous parallelism)</strong></font><br>Let’s take a look at the following application for async-await:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">fetchImage</span>(<span class=\"params\">from</span> <span class=\"params\">url</span>: <span class=\"type\">URL</span>) <span class=\"keyword\">async</span> <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">UIImage</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Simulate asynchronous downloading of images</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;fetchImage----- begin <span class=\"subst\">\\(Thread.current)</span>&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"type\">Task</span>.sleep(<span class=\"number\">1_000_000_000</span>) <span class=\"comment\">// Simulates 1 second download time</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> data <span class=\"operator\">=</span> <span class=\"keyword\">try</span> <span class=\"keyword\">await</span> <span class=\"type\">URLSession</span>.shared.data(from: url)</span><br><span class=\"line\">    <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> image <span class=\"operator\">=</span> <span class=\"type\">UIImage</span>(data: data) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"type\">NSError</span>(domain: <span class=\"string\">&quot;ImageDownloadError&quot;</span>, code: <span class=\"number\">0</span>, userInfo: [NSLocalizedDescriptionKey: <span class=\"string\">&quot;Failed to download image&quot;</span>])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;fetchImage----- end <span class=\"subst\">\\(Thread.current)</span>&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> image</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">downloadImages</span>() <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> imageURLs <span class=\"operator\">=</span> [</span><br><span class=\"line\">        <span class=\"type\">URL</span>(string: <span class=\"string\">&quot;https://example.com/image1.jpg&quot;</span>)<span class=\"operator\">!</span>,</span><br><span class=\"line\">        <span class=\"type\">URL</span>(string: <span class=\"string\">&quot;https://example.com/image2.jpg&quot;</span>)<span class=\"operator\">!</span>,</span><br><span class=\"line\">        <span class=\"type\">URL</span>(string: <span class=\"string\">&quot;https://example.com/image3.jpg&quot;</span>)<span class=\"operator\">!</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> image1 <span class=\"operator\">=</span> <span class=\"keyword\">await</span> fetchImage(from: imageURLs[<span class=\"number\">0</span>])</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Downloaded image 1:&quot;</span>, image1)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> image2 <span class=\"operator\">=</span> <span class=\"keyword\">await</span> fetchImage(from: imageURLs[<span class=\"number\">1</span>])</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Downloaded image 2:&quot;</span>, image2)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> image3 <span class=\"operator\">=</span> <span class=\"keyword\">await</span> fetchImage(from: imageURLs[<span class=\"number\">2</span>])</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Downloaded image 3:&quot;</span>, image3)</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">      </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Task</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> downloadImages()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The 3 images in the example are downloaded serially one by one, using async-let can optimize this code for asynchronous parallelism:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">func</span> <span class=\"title function_\">downloadImages</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> imageURLs <span class=\"operator\">=</span> [</span><br><span class=\"line\">        <span class=\"type\">URL</span>(string: <span class=\"string\">&quot;https://example.com/image1.jpg&quot;</span>)<span class=\"operator\">!</span>,</span><br><span class=\"line\">        <span class=\"type\">URL</span>(string: <span class=\"string\">&quot;https://example.com/image2.jpg&quot;</span>)<span class=\"operator\">!</span>,</span><br><span class=\"line\">        <span class=\"type\">URL</span>(string: <span class=\"string\">&quot;https://example.com/image3.jpg&quot;</span>)<span class=\"operator\">!</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">    <span class=\"keyword\">var</span> images: [<span class=\"type\">UIImage</span>] <span class=\"operator\">=</span> []</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 1 <span class=\"subst\">\\(Thread.current)</span>&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">async</span> <span class=\"keyword\">let</span> fetchImage1 <span class=\"operator\">=</span> fetchImage(from: imageURLs[<span class=\"number\">0</span>])</span><br><span class=\"line\">        <span class=\"keyword\">async</span> <span class=\"keyword\">let</span> fetchImage2 <span class=\"operator\">=</span> fetchImage(from: imageURLs[<span class=\"number\">1</span>])</span><br><span class=\"line\">        <span class=\"keyword\">async</span> <span class=\"keyword\">let</span> fetchImage3 <span class=\"operator\">=</span> fetchImage(from: imageURLs[<span class=\"number\">2</span>])</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 2 <span class=\"subst\">\\(Thread.current)</span>&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> (image1, image2, image3) <span class=\"operator\">=</span> <span class=\"keyword\">await</span> (<span class=\"keyword\">try</span> fetchImage1, <span class=\"keyword\">try</span> fetchImage2, <span class=\"keyword\">try</span> fetchImage3)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 3 <span class=\"subst\">\\(Thread.current)</span>&quot;</span>)</span><br><span class=\"line\">        images.append(contentsOf: [image1, image2, image3])</span><br><span class=\"line\">     &#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">      </span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The result of the Print:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span> <span class=\"number\">1</span> <span class=\"operator\">&lt;</span>_NSMainThread: <span class=\"number\">0x7b10000003c0</span><span class=\"operator\">&gt;</span>&#123;number <span class=\"operator\">=</span> <span class=\"number\">1</span>, name <span class=\"operator\">=</span> main&#125;</span><br><span class=\"line\"><span class=\"operator\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span> <span class=\"number\">2</span> <span class=\"operator\">&lt;</span>_NSMainThread: <span class=\"number\">0x7b10000003c0</span><span class=\"operator\">&gt;</span>&#123;number <span class=\"operator\">=</span> <span class=\"number\">1</span>, name <span class=\"operator\">=</span> main&#125;</span><br><span class=\"line\">fetchImage<span class=\"operator\">-----</span> begin <span class=\"operator\">&lt;</span><span class=\"type\">NSThread</span>: <span class=\"number\">0x7b1000043a40</span><span class=\"operator\">&gt;</span>&#123;number <span class=\"operator\">=</span> <span class=\"number\">6</span>, name <span class=\"operator\">=</span> (null)&#125;</span><br><span class=\"line\">fetchImage<span class=\"operator\">-----</span> begin <span class=\"operator\">&lt;</span><span class=\"type\">NSThread</span>: <span class=\"number\">0x7b1000046200</span><span class=\"operator\">&gt;</span>&#123;number <span class=\"operator\">=</span> <span class=\"number\">7</span>, name <span class=\"operator\">=</span> (null)&#125;</span><br><span class=\"line\">fetchImage<span class=\"operator\">-----</span> begin <span class=\"operator\">&lt;</span><span class=\"type\">NSThread</span>: <span class=\"number\">0x7b1000046200</span><span class=\"operator\">&gt;</span>&#123;number <span class=\"operator\">=</span> <span class=\"number\">7</span>, name <span class=\"operator\">=</span> (null)&#125;</span><br><span class=\"line\">fetchImage<span class=\"operator\">-----</span> begin <span class=\"operator\">&lt;</span><span class=\"type\">NSThread</span>: <span class=\"number\">0x7b1000043a40</span><span class=\"operator\">&gt;</span>&#123;number <span class=\"operator\">=</span> <span class=\"number\">6</span>, name <span class=\"operator\">=</span> (null)&#125;</span><br><span class=\"line\">fetchImage<span class=\"operator\">-----</span> end <span class=\"operator\">&lt;</span><span class=\"type\">NSThread</span>: <span class=\"number\">0x7b100004b700</span><span class=\"operator\">&gt;</span>&#123;number <span class=\"operator\">=</span> <span class=\"number\">3</span>, name <span class=\"operator\">=</span> (null)&#125;</span><br><span class=\"line\">fetchImage<span class=\"operator\">-----</span> end <span class=\"operator\">&lt;</span><span class=\"type\">NSThread</span>: <span class=\"number\">0x7b1000048ac0</span><span class=\"operator\">&gt;</span>&#123;number <span class=\"operator\">=</span> <span class=\"number\">4</span>, name <span class=\"operator\">=</span> (null)&#125;</span><br><span class=\"line\">fetchImage<span class=\"operator\">-----</span> end <span class=\"operator\">&lt;</span><span class=\"type\">NSThread</span>: <span class=\"number\">0x7b100004b700</span><span class=\"operator\">&gt;</span>&#123;number <span class=\"operator\">=</span> <span class=\"number\">3</span>, name <span class=\"operator\">=</span> (null)&#125;</span><br><span class=\"line\">fetchImage<span class=\"operator\">-----</span> end <span class=\"operator\">&lt;</span><span class=\"type\">NSThread</span>: <span class=\"number\">0x7b1000046200</span><span class=\"operator\">&gt;</span>&#123;number <span class=\"operator\">=</span> <span class=\"number\">7</span>, name <span class=\"operator\">=</span> (null)&#125;</span><br><span class=\"line\"><span class=\"operator\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span> <span class=\"number\">3</span> <span class=\"operator\">&lt;</span>_NSMainThread: <span class=\"number\">0x7b10000003c0</span><span class=\"operator\">&gt;</span>&#123;number <span class=\"operator\">=</span> <span class=\"number\">1</span>, name <span class=\"operator\">=</span> main&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>Note:</strong><br>After modifying the image with async-let, fetchImage hangs, and the thread continues to perform other tasks until it encounters await, and fetchImage will not execute, which is why print2 executes before fetchImage. So async-let is a concurrent binding mechanism to achieve asynchronous concurrency.</p>\n<h4 id=\"4-Conversion-between-asynchronous-and-synchronous-functions\"><a href=\"#4-Conversion-between-asynchronous-and-synchronous-functions\" class=\"headerlink\" title=\"4. Conversion between asynchronous and synchronous functions\"></a><font size=3 color=#4169E1>4. Conversion between asynchronous and synchronous functions</font></h4><p>Asynchronous function types differ from synchronous function types. However, there exists an implicit conversion from a synchronous function type to the corresponding asynchronous function type. The approximate rules for combining ‘throw’ are as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">FunctionTypes</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> syncNonThrowing: () -&gt; <span class=\"type\">Void</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> syncThrowing: () <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">Void</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> asyncNonThrowing: () <span class=\"keyword\">async</span> -&gt; <span class=\"type\">Void</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> asyncThrowing: () <span class=\"keyword\">async</span> <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">Void</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">demonstrateConversions</span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Okay to add &#x27;async&#x27; and/or &#x27;throws&#x27;    </span></span><br><span class=\"line\">    asyncNonThrowing <span class=\"operator\">=</span> syncNonThrowing</span><br><span class=\"line\">    asyncThrowing <span class=\"operator\">=</span> syncThrowing</span><br><span class=\"line\">    syncThrowing <span class=\"operator\">=</span> syncNonThrowing</span><br><span class=\"line\">    asyncThrowing <span class=\"operator\">=</span> asyncNonThrowing</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Error to remove &#x27;async&#x27; or &#x27;throws&#x27;</span></span><br><span class=\"line\">    syncNonThrowing <span class=\"operator\">=</span> asyncNonThrowing <span class=\"comment\">// error</span></span><br><span class=\"line\">    syncThrowing <span class=\"operator\">=</span> asyncThrowing       <span class=\"comment\">// error</span></span><br><span class=\"line\">    syncNonThrowing <span class=\"operator\">=</span> syncThrowing     <span class=\"comment\">// error</span></span><br><span class=\"line\">    asyncNonThrowing <span class=\"operator\">=</span> syncThrowing    <span class=\"comment\">// error</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>As you can see above, basically synchronous functions can be converted to asynchronous functions, but it doesn’t work the other way around.</p>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://cloud.tencent.com/developer/article/2191310\">https://cloud.tencent.com/developer/article/2191310</a><br>[2] <a href=\"https://juejin.cn/post/7025261081291407373\">https://juejin.cn/post/7025261081291407373</a><br>[3] <a href=\"https://juejin.cn/post/7076733264798416926\">https://juejin.cn/post/7076733264798416926</a><br>[4] <a href=\"https://github.com/apple/swift-evolution/blob/main/proposals/0296-async-await.md\">https://github.com/apple/swift-evolution/blob/main/proposals/0296-async-await.md</a>     </p>\n"},{"title":"00. Difference between nil in Objective-C and nil in Swift","date":"2023-08-15T19:46:00.000Z","_content":"\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\n#### <font size=3 color=#4169E1>1. nil in Objective-C</font>\n **1.1 The Concept**   \nnil (or Nil) in Objective-C is a pointer to an empty object. In Objective-C, an object can be an instance or a class. When an object is created, it is allocated to memory and initialized to zero. If it is not initialized to another value, the object pointer has a value of nil.\n\nIn Objective-C, sending a message to a nil object is valid because the message does not result in any operation. This is because Objective-C messaging is implemented through method calls that send messages to objects, not through the methods of the objects themselves. So when the object is nil, calling the object's methods has no effect because it is essentially a null pointer.\n \nHere's an example showing the use of nil in Objective-C:\n```Objective-C \nNSString *str = nil;\nNSLog(@\"The value of str is: %@\", str);\n```\nOutput results:\n```Objective-C\nThe value of str is: (null)\n```\n\n **1.2 Implementation Principle**   \nIn terms of the underlying implementation, nil in Objective-C is actually a predefined macro for a null object pointer. In Objective-C, all objects are accessed via pointers, and a nil is actually a pointer with a value of zero. Thus, when an object is assigned a value of nil, it is actually given a pointer with a value of 0, indicating that the object does not exist.\n```\n#define nil __DARWIN_NULL\n```\n'__DARWIN_NULL' is a null pointer constant pointing to a null address, defined in <stddef.h> with the following code:\n```\n#define __DARWIN_NULL ((void *)0)\n```\nThus, in Objective-C, when we use nil, we are actually using a null pointer constant to a null address for a null object pointer.\n\n#### <font size=3 color=#4169E1>2. nil in Swift</font>\n**2.1 The Concept**  \nIn Swift, nil is not a pointer to an empty object. It represents a special type that lacks a value, which is not limited to objects. In Swift, you can use nil to represent any type of value, including basic data types (such as Int, Double, etc.) as well as object types.\n\nnil in Swift is used for optional types. If a variable or constant is declared as an optional type, it can either contain a value or be nil. if an attempt is made to forcibly unwrap (i.e., get the actual value of) a variable or constant of an optional type, and the variable or constant currently has the value of nil, the program will crash.\n\nHere's an example showing the use of nil in Swift:\n```Swift\nvar str: String? = nil\nprint(\"The value of str is: \\(str)\")\n```\nOutput results:\n```Swift\nThe value of str is: nil\n```\nThe above code will report an error if it is changed to the following:\n```Swift\nvar str: String = nil\n```\nOr\n```Swift\nvar str = nil\n```\nThe error messages are as follows:   \n{% img /assets/iOS/Others/001.png %}    \nOr   \n{% img /assets/iOS/Others/002.png %}\n \nThat's because in Swift, the types of variables and constants must be explicitly specified at declaration time. When we declare a variable or constant and initialize it to nil, the Swift compiler can't determine the type of the variable or constant because nil can represent a missing value of many types. Therefore, we need to tell the compiler the type of the variable or constant by way of a type annotation or type inference.\n\n'var str: String = nil ' declares a variable str of type String and initializes it to nil, but the Swift compiler is not able to determine the type of the variable because nil can represent the missing value of multiple types. As a result, the compiler reports an error, suggesting that we need to provide a Contextual Type or an optional type for it.\n\n**2.2 Implementation Principle**   \n\nIn Swift, all types can use optional types to represent the case of missing values. An optional type is actually an enumerated type that has two possible values: a value and no value. When an optional type has a value of nil, it is actually a special enum member that indicates that the value is missing.\n\n```Swift\nenum Optional<T> {\n    case none\n    case some(T)\n}\n\nvar str: String? = \"hello\"\nstr = nil\n\nif let value = str {\n    print(\"The value of str is: \\(value)\")\n} else {\n    print(\"The value of str is nil\")\n}\n```\nOutput results\n```Swift\nThe value of str is nil\n```\n\n#### <font size=3 color=#4169E1>3. Conclusion</font>\n\nIn Objective-C, nil represents a pointer to a null object, which is used to indicate that the object does not exist. In Swift, nil represents a missing value and can be used to represent any type of value. In terms of the underlying implementation, nil in Objective-C is a predefined macro that represents a pointer to a null object, while nil in Swift is a special type that represents the case of an optional type (enumerated type) that is missing a value. In practice, developers need to choose the appropriate language and data type to indicate the presence or absence of a value according to different situations to ensure the correctness and stability of the program.\n","source":"_posts/iOS/00. Tips/00. Difference Of nil in OC and nil in Swift.md","raw":"---\ntitle: 00. Difference between nil in Objective-C and nil in Swift\ndate: 2023-08-15 21:46:00\ncategories: \n- [iOS, 00. Tips]\ntags:\n- nil\n---\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\n#### <font size=3 color=#4169E1>1. nil in Objective-C</font>\n **1.1 The Concept**   \nnil (or Nil) in Objective-C is a pointer to an empty object. In Objective-C, an object can be an instance or a class. When an object is created, it is allocated to memory and initialized to zero. If it is not initialized to another value, the object pointer has a value of nil.\n\nIn Objective-C, sending a message to a nil object is valid because the message does not result in any operation. This is because Objective-C messaging is implemented through method calls that send messages to objects, not through the methods of the objects themselves. So when the object is nil, calling the object's methods has no effect because it is essentially a null pointer.\n \nHere's an example showing the use of nil in Objective-C:\n```Objective-C \nNSString *str = nil;\nNSLog(@\"The value of str is: %@\", str);\n```\nOutput results:\n```Objective-C\nThe value of str is: (null)\n```\n\n **1.2 Implementation Principle**   \nIn terms of the underlying implementation, nil in Objective-C is actually a predefined macro for a null object pointer. In Objective-C, all objects are accessed via pointers, and a nil is actually a pointer with a value of zero. Thus, when an object is assigned a value of nil, it is actually given a pointer with a value of 0, indicating that the object does not exist.\n```\n#define nil __DARWIN_NULL\n```\n'__DARWIN_NULL' is a null pointer constant pointing to a null address, defined in <stddef.h> with the following code:\n```\n#define __DARWIN_NULL ((void *)0)\n```\nThus, in Objective-C, when we use nil, we are actually using a null pointer constant to a null address for a null object pointer.\n\n#### <font size=3 color=#4169E1>2. nil in Swift</font>\n**2.1 The Concept**  \nIn Swift, nil is not a pointer to an empty object. It represents a special type that lacks a value, which is not limited to objects. In Swift, you can use nil to represent any type of value, including basic data types (such as Int, Double, etc.) as well as object types.\n\nnil in Swift is used for optional types. If a variable or constant is declared as an optional type, it can either contain a value or be nil. if an attempt is made to forcibly unwrap (i.e., get the actual value of) a variable or constant of an optional type, and the variable or constant currently has the value of nil, the program will crash.\n\nHere's an example showing the use of nil in Swift:\n```Swift\nvar str: String? = nil\nprint(\"The value of str is: \\(str)\")\n```\nOutput results:\n```Swift\nThe value of str is: nil\n```\nThe above code will report an error if it is changed to the following:\n```Swift\nvar str: String = nil\n```\nOr\n```Swift\nvar str = nil\n```\nThe error messages are as follows:   \n{% img /assets/iOS/Others/001.png %}    \nOr   \n{% img /assets/iOS/Others/002.png %}\n \nThat's because in Swift, the types of variables and constants must be explicitly specified at declaration time. When we declare a variable or constant and initialize it to nil, the Swift compiler can't determine the type of the variable or constant because nil can represent a missing value of many types. Therefore, we need to tell the compiler the type of the variable or constant by way of a type annotation or type inference.\n\n'var str: String = nil ' declares a variable str of type String and initializes it to nil, but the Swift compiler is not able to determine the type of the variable because nil can represent the missing value of multiple types. As a result, the compiler reports an error, suggesting that we need to provide a Contextual Type or an optional type for it.\n\n**2.2 Implementation Principle**   \n\nIn Swift, all types can use optional types to represent the case of missing values. An optional type is actually an enumerated type that has two possible values: a value and no value. When an optional type has a value of nil, it is actually a special enum member that indicates that the value is missing.\n\n```Swift\nenum Optional<T> {\n    case none\n    case some(T)\n}\n\nvar str: String? = \"hello\"\nstr = nil\n\nif let value = str {\n    print(\"The value of str is: \\(value)\")\n} else {\n    print(\"The value of str is nil\")\n}\n```\nOutput results\n```Swift\nThe value of str is nil\n```\n\n#### <font size=3 color=#4169E1>3. Conclusion</font>\n\nIn Objective-C, nil represents a pointer to a null object, which is used to indicate that the object does not exist. In Swift, nil represents a missing value and can be used to represent any type of value. In terms of the underlying implementation, nil in Objective-C is a predefined macro that represents a pointer to a null object, while nil in Swift is a special type that represents the case of an optional type (enumerated type) that is missing a value. In practice, developers need to choose the appropriate language and data type to indicate the presence or absence of a value according to different situations to ensure the correctness and stability of the program.\n","slug":"iOS/00. Tips/00. Difference Of nil in OC and nil in Swift","published":1,"updated":"2023-09-02T19:29:21.341Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clm7w97ru002fkb0meld8hdax","content":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<h4 id=\"1-nil-in-Objective-C\"><a href=\"#1-nil-in-Objective-C\" class=\"headerlink\" title=\"1. nil in Objective-C\"></a><font size=3 color=#4169E1>1. nil in Objective-C</font></h4><p> <strong>1.1 The Concept</strong><br>nil (or Nil) in Objective-C is a pointer to an empty object. In Objective-C, an object can be an instance or a class. When an object is created, it is allocated to memory and initialized to zero. If it is not initialized to another value, the object pointer has a value of nil.</p>\n<p>In Objective-C, sending a message to a nil object is valid because the message does not result in any operation. This is because Objective-C messaging is implemented through method calls that send messages to objects, not through the methods of the objects themselves. So when the object is nil, calling the object’s methods has no effect because it is essentially a null pointer.</p>\n<p>Here’s an example showing the use of nil in Objective-C:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *str = nil;</span><br><span class=\"line\">NSLog(@&quot;The value of str is: %@&quot;, str);</span><br></pre></td></tr></table></figure>\n<p>Output results:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The value of str is: (null)</span><br></pre></td></tr></table></figure>\n\n<p> <strong>1.2 Implementation Principle</strong><br>In terms of the underlying implementation, nil in Objective-C is actually a predefined macro for a null object pointer. In Objective-C, all objects are accessed via pointers, and a nil is actually a pointer with a value of zero. Thus, when an object is assigned a value of nil, it is actually given a pointer with a value of 0, indicating that the object does not exist.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define nil __DARWIN_NULL</span><br></pre></td></tr></table></figure>\n<p>‘__DARWIN_NULL’ is a null pointer constant pointing to a null address, defined in &lt;stddef.h&gt; with the following code:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define __DARWIN_NULL ((void *)0)</span><br></pre></td></tr></table></figure>\n<p>Thus, in Objective-C, when we use nil, we are actually using a null pointer constant to a null address for a null object pointer.</p>\n<h4 id=\"2-nil-in-Swift\"><a href=\"#2-nil-in-Swift\" class=\"headerlink\" title=\"2. nil in Swift\"></a><font size=3 color=#4169E1>2. nil in Swift</font></h4><p><strong>2.1 The Concept</strong><br>In Swift, nil is not a pointer to an empty object. It represents a special type that lacks a value, which is not limited to objects. In Swift, you can use nil to represent any type of value, including basic data types (such as Int, Double, etc.) as well as object types.</p>\n<p>nil in Swift is used for optional types. If a variable or constant is declared as an optional type, it can either contain a value or be nil. if an attempt is made to forcibly unwrap (i.e., get the actual value of) a variable or constant of an optional type, and the variable or constant currently has the value of nil, the program will crash.</p>\n<p>Here’s an example showing the use of nil in Swift:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str: <span class=\"type\">String</span>? <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;The value of str is: <span class=\"subst\">\\(str)</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>Output results:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">The</span> value of str <span class=\"keyword\">is</span>: <span class=\"literal\">nil</span></span><br></pre></td></tr></table></figure>\n<p>The above code will report an error if it is changed to the following:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str: <span class=\"type\">String</span> <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br></pre></td></tr></table></figure>\n<p>Or</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br></pre></td></tr></table></figure>\n<p>The error messages are as follows:   </p>\n<img src=\"/assets/iOS/Others/001.png\" class=\"\">    \n<p>Or   </p>\n<img src=\"/assets/iOS/Others/002.png\" class=\"\">\n<p>That’s because in Swift, the types of variables and constants must be explicitly specified at declaration time. When we declare a variable or constant and initialize it to nil, the Swift compiler can’t determine the type of the variable or constant because nil can represent a missing value of many types. Therefore, we need to tell the compiler the type of the variable or constant by way of a type annotation or type inference.</p>\n<p>‘var str: String &#x3D; nil ‘ declares a variable str of type String and initializes it to nil, but the Swift compiler is not able to determine the type of the variable because nil can represent the missing value of multiple types. As a result, the compiler reports an error, suggesting that we need to provide a Contextual Type or an optional type for it.</p>\n<p><strong>2.2 Implementation Principle</strong>   </p>\n<p>In Swift, all types can use optional types to represent the case of missing values. An optional type is actually an enumerated type that has two possible values: a value and no value. When an optional type has a value of nil, it is actually a special enum member that indicates that the value is missing.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Optional</span>&lt;<span class=\"title class_\">T</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> none</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"keyword\">some</span>(<span class=\"type\">T</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> str: <span class=\"type\">String</span>? <span class=\"operator\">=</span> <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">str <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> value <span class=\"operator\">=</span> str &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;The value of str is: <span class=\"subst\">\\(value)</span>&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;The value of str is nil&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Output results</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">The</span> value of str <span class=\"keyword\">is</span> <span class=\"literal\">nil</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-Conclusion\"><a href=\"#3-Conclusion\" class=\"headerlink\" title=\"3. Conclusion\"></a><font size=3 color=#4169E1>3. Conclusion</font></h4><p>In Objective-C, nil represents a pointer to a null object, which is used to indicate that the object does not exist. In Swift, nil represents a missing value and can be used to represent any type of value. In terms of the underlying implementation, nil in Objective-C is a predefined macro that represents a pointer to a null object, while nil in Swift is a special type that represents the case of an optional type (enumerated type) that is missing a value. In practice, developers need to choose the appropriate language and data type to indicate the presence or absence of a value according to different situations to ensure the correctness and stability of the program.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<h4 id=\"1-nil-in-Objective-C\"><a href=\"#1-nil-in-Objective-C\" class=\"headerlink\" title=\"1. nil in Objective-C\"></a><font size=3 color=#4169E1>1. nil in Objective-C</font></h4><p> <strong>1.1 The Concept</strong><br>nil (or Nil) in Objective-C is a pointer to an empty object. In Objective-C, an object can be an instance or a class. When an object is created, it is allocated to memory and initialized to zero. If it is not initialized to another value, the object pointer has a value of nil.</p>\n<p>In Objective-C, sending a message to a nil object is valid because the message does not result in any operation. This is because Objective-C messaging is implemented through method calls that send messages to objects, not through the methods of the objects themselves. So when the object is nil, calling the object’s methods has no effect because it is essentially a null pointer.</p>\n<p>Here’s an example showing the use of nil in Objective-C:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *str = nil;</span><br><span class=\"line\">NSLog(@&quot;The value of str is: %@&quot;, str);</span><br></pre></td></tr></table></figure>\n<p>Output results:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The value of str is: (null)</span><br></pre></td></tr></table></figure>\n\n<p> <strong>1.2 Implementation Principle</strong><br>In terms of the underlying implementation, nil in Objective-C is actually a predefined macro for a null object pointer. In Objective-C, all objects are accessed via pointers, and a nil is actually a pointer with a value of zero. Thus, when an object is assigned a value of nil, it is actually given a pointer with a value of 0, indicating that the object does not exist.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define nil __DARWIN_NULL</span><br></pre></td></tr></table></figure>\n<p>‘__DARWIN_NULL’ is a null pointer constant pointing to a null address, defined in &lt;stddef.h&gt; with the following code:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define __DARWIN_NULL ((void *)0)</span><br></pre></td></tr></table></figure>\n<p>Thus, in Objective-C, when we use nil, we are actually using a null pointer constant to a null address for a null object pointer.</p>\n<h4 id=\"2-nil-in-Swift\"><a href=\"#2-nil-in-Swift\" class=\"headerlink\" title=\"2. nil in Swift\"></a><font size=3 color=#4169E1>2. nil in Swift</font></h4><p><strong>2.1 The Concept</strong><br>In Swift, nil is not a pointer to an empty object. It represents a special type that lacks a value, which is not limited to objects. In Swift, you can use nil to represent any type of value, including basic data types (such as Int, Double, etc.) as well as object types.</p>\n<p>nil in Swift is used for optional types. If a variable or constant is declared as an optional type, it can either contain a value or be nil. if an attempt is made to forcibly unwrap (i.e., get the actual value of) a variable or constant of an optional type, and the variable or constant currently has the value of nil, the program will crash.</p>\n<p>Here’s an example showing the use of nil in Swift:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str: <span class=\"type\">String</span>? <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;The value of str is: <span class=\"subst\">\\(str)</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>Output results:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">The</span> value of str <span class=\"keyword\">is</span>: <span class=\"literal\">nil</span></span><br></pre></td></tr></table></figure>\n<p>The above code will report an error if it is changed to the following:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str: <span class=\"type\">String</span> <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br></pre></td></tr></table></figure>\n<p>Or</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br></pre></td></tr></table></figure>\n<p>The error messages are as follows:   </p>\n<img src=\"/assets/iOS/Others/001.png\" class=\"\">    \n<p>Or   </p>\n<img src=\"/assets/iOS/Others/002.png\" class=\"\">\n<p>That’s because in Swift, the types of variables and constants must be explicitly specified at declaration time. When we declare a variable or constant and initialize it to nil, the Swift compiler can’t determine the type of the variable or constant because nil can represent a missing value of many types. Therefore, we need to tell the compiler the type of the variable or constant by way of a type annotation or type inference.</p>\n<p>‘var str: String &#x3D; nil ‘ declares a variable str of type String and initializes it to nil, but the Swift compiler is not able to determine the type of the variable because nil can represent the missing value of multiple types. As a result, the compiler reports an error, suggesting that we need to provide a Contextual Type or an optional type for it.</p>\n<p><strong>2.2 Implementation Principle</strong>   </p>\n<p>In Swift, all types can use optional types to represent the case of missing values. An optional type is actually an enumerated type that has two possible values: a value and no value. When an optional type has a value of nil, it is actually a special enum member that indicates that the value is missing.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Optional</span>&lt;<span class=\"title class_\">T</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> none</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"keyword\">some</span>(<span class=\"type\">T</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> str: <span class=\"type\">String</span>? <span class=\"operator\">=</span> <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">str <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> value <span class=\"operator\">=</span> str &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;The value of str is: <span class=\"subst\">\\(value)</span>&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;The value of str is nil&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Output results</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">The</span> value of str <span class=\"keyword\">is</span> <span class=\"literal\">nil</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-Conclusion\"><a href=\"#3-Conclusion\" class=\"headerlink\" title=\"3. Conclusion\"></a><font size=3 color=#4169E1>3. Conclusion</font></h4><p>In Objective-C, nil represents a pointer to a null object, which is used to indicate that the object does not exist. In Swift, nil represents a missing value and can be used to represent any type of value. In terms of the underlying implementation, nil in Objective-C is a predefined macro that represents a pointer to a null object, while nil in Swift is a special type that represents the case of an optional type (enumerated type) that is missing a value. In practice, developers need to choose the appropriate language and data type to indicate the presence or absence of a value according to different situations to ensure the correctness and stability of the program.</p>\n"},{"title":"00. Summary Of Memory Leak","date":"2023-03-08T19:46:59.000Z","_content":"\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nQuestions about Memory leak (memory leak), if the interview was asked this question and such questions, mainly related to the following 3 aspects.\n- What are the common scenarios of memory leaks, and list a few common examples?\n- How to locate and solve memory leaks that actually occur during development?\n- How to avoid memory leaks in development and what are the methods?    \n\nBelow we summarize these 3 aspects respectively.\n\n#### <font size=3 color=#4169E1> Common scenarios for Memory Leak</font>\n<strong>1. Circular References</strong>   \nUnder the ARC mechanism, circular references are a major cause of memory leaks, and it is also divided into many specific scenarios, such as\n- Circular references between two class objects.\n- Circular reference problems in Blocks (including GCD or other system Blocks, etc.).\n- Circular reference problem in Timer. \n- Circular reference problem brought by delegate.\n- Scenarios such as property observation and listening classes.   \n  \n<strong>2. improper object life cycle management</strong>   \nThis kind needs to be analyzed in the context of actual business problems, e.g.\n- Static fields or other global objects lead to improper holding causing memory leaks.\n- The reference relationship of collection classes, etc. is improper or not released in time, etc.   \n\n<strong>3. untimely release of objects</strong>   \nSome objects require manual memory release, such as the Core Foundation (CF) and Core Graphics (CG) framework objects. If these objects are not released in time, it may lead to memory leaks.   \n\n<strong>4. Untimely closure or release of resources</strong>   \nUntimely closure (or failure to release) of resource classes is also a common memory leak scenario, for example\n- The file is opened (FileHandle) and not closed in time.\n- The URLSession object of a network request is not released in time.\n\n\n#### <font size=3 color=#4169E1> How to locate and solve the memory leak</font>\n\nIn fact, after finding the problem, it is basically easy to solve, for example:\n\nCircular reference means to break the cycle by using weak; If the life cycle of the object is improper, the holder can be changed or the code needs to be redesigned; CF or CG objects need to be released manually; The occupation of resource class also needs to be released manually in time.\n\nBut the main problem is how to find the leaked code.\n\n<strong>**<font size=3>1. Manual debugging method</font>**  </strong>\n\nWhen we realize that there is a leak, there are usually obvious symptoms, such as VC Pop failure.\n\nIf we are familiar with the code, generally, I believe many people will directly find the code for manual debugging. Common means include:\n\n- Override dealloc or deinit methods\n\nWe can try to add a log to the dealloc or deinit method breakpoint of some classes. If there is no expected execution, it is a suspected leak point.\n\n- Manually check reference count\n\nManually checking the reference count of an object can help us find out whether there is a memory leak caused by a reference count error. We can manually check the reference count of an object using the retentCount property in Objective-C or Swift.\n\n- Write some extra test code\n\nIf the memory leak point is relatively obscure, it can be reproduced by writing code of some test cases, such as 9999 consecutive cycles to expand the problem and cause memory exhaustion and crash, and then locate the code according to the stack, which is also a common method to locate probabilistic crashes;\n\n- One-by-one ranking method\n\nComment out the code of the problem one by one until the problem point is found. Similar methods are often used to troubleshoot the crash problem during development. Although it looks very low, it is very effective.\n\n<strong>**<font size=3>2. Tools</font>**  </strong>\n\nThere are many ways to use this, such as:\n\n- Instruments toolbox, which uses Leaks tool or memory debugger Analyze to analyze;\n\n- The Memory Graph in Xcode Memory Debugger can help us analyze the memory reference relationship of objects and find circular references and memory leaks.\n\n- Third-party detection tools, such as MLeaksFinder, FBRetainCycleDetector, LeakDetector, HeapInspector, etc.\n\n- Static analysis tools, such as Clang static analyzer, Infer, OCLint, SwiftLint and other tools. These tools generally find some memory leak code incidentally, which can give us some tips or warnings.\n  \n#### <font size=3 color=#4169E1>How to avoid Memory Leak?</font>\nIn actual development, it is unlikely that writing a piece of code to run the tools of Instrument immediately, even some MLeaksFinder these often false alarm tools are too annoying to close directly.\nThen How can we avoid and minimize the generation of problem code?\n\nFirst, there should be some risk awareness. For example, Timer since the choice of it, you should know that its biggest risk is easy to cause memory problems. Know by heart some scenarios that can easily lead to leaks. Also, for example, be careful with global variables or single instances, etc.\n\nSecond, get into some habits. For example, after writing a piece of code or receiving a piece of code, make sure the object is expected to be released at the dealloc or deinit breakpoint. Also for example, Swift as far as possible to take the value type, rather than reference types; development after self-test, some memory detection tools are turned on as an aid to detection.\n\nThird, good system design. Some business scenarios are easy to generate leakage, for example, once I participated in the development of a live business, the room VC and the room's only data model object dataModel is easy to refer to each other, because the dataModel carries a lot of business information, the business is extremely dependent on the dataModel, the object is therefore also passed very deep and wide, and a circular reference occurs easily. For this kind of improper design at the beginning, only a patch can be fixed later (maintain a dataModel weak reference collection, each time you use the id to query and get the corresponding room dataModel object, the business only needs to maintain an id String object or a dictionary object to store the least information). Similar business scenarios are commodity detail pages and so on.\n\nFourth, the regular project code to do a \"physical examination\", the general project volume is larger, this is very necessary, run the Instrumentation or Memory Graph, almost every time there are gains.\n \n\n","source":"_posts/iOS/01. Memory & Performance & Stability/00. Summary of Memory Leak.md","raw":"---\ntitle: 00. Summary Of Memory Leak\ndate: 2023-03-8 20:46:59\ncategories: \n- [iOS, 01. Memory & Performance & Stability]\ntags:\n- memory \n- leak\n---\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nQuestions about Memory leak (memory leak), if the interview was asked this question and such questions, mainly related to the following 3 aspects.\n- What are the common scenarios of memory leaks, and list a few common examples?\n- How to locate and solve memory leaks that actually occur during development?\n- How to avoid memory leaks in development and what are the methods?    \n\nBelow we summarize these 3 aspects respectively.\n\n#### <font size=3 color=#4169E1> Common scenarios for Memory Leak</font>\n<strong>1. Circular References</strong>   \nUnder the ARC mechanism, circular references are a major cause of memory leaks, and it is also divided into many specific scenarios, such as\n- Circular references between two class objects.\n- Circular reference problems in Blocks (including GCD or other system Blocks, etc.).\n- Circular reference problem in Timer. \n- Circular reference problem brought by delegate.\n- Scenarios such as property observation and listening classes.   \n  \n<strong>2. improper object life cycle management</strong>   \nThis kind needs to be analyzed in the context of actual business problems, e.g.\n- Static fields or other global objects lead to improper holding causing memory leaks.\n- The reference relationship of collection classes, etc. is improper or not released in time, etc.   \n\n<strong>3. untimely release of objects</strong>   \nSome objects require manual memory release, such as the Core Foundation (CF) and Core Graphics (CG) framework objects. If these objects are not released in time, it may lead to memory leaks.   \n\n<strong>4. Untimely closure or release of resources</strong>   \nUntimely closure (or failure to release) of resource classes is also a common memory leak scenario, for example\n- The file is opened (FileHandle) and not closed in time.\n- The URLSession object of a network request is not released in time.\n\n\n#### <font size=3 color=#4169E1> How to locate and solve the memory leak</font>\n\nIn fact, after finding the problem, it is basically easy to solve, for example:\n\nCircular reference means to break the cycle by using weak; If the life cycle of the object is improper, the holder can be changed or the code needs to be redesigned; CF or CG objects need to be released manually; The occupation of resource class also needs to be released manually in time.\n\nBut the main problem is how to find the leaked code.\n\n<strong>**<font size=3>1. Manual debugging method</font>**  </strong>\n\nWhen we realize that there is a leak, there are usually obvious symptoms, such as VC Pop failure.\n\nIf we are familiar with the code, generally, I believe many people will directly find the code for manual debugging. Common means include:\n\n- Override dealloc or deinit methods\n\nWe can try to add a log to the dealloc or deinit method breakpoint of some classes. If there is no expected execution, it is a suspected leak point.\n\n- Manually check reference count\n\nManually checking the reference count of an object can help us find out whether there is a memory leak caused by a reference count error. We can manually check the reference count of an object using the retentCount property in Objective-C or Swift.\n\n- Write some extra test code\n\nIf the memory leak point is relatively obscure, it can be reproduced by writing code of some test cases, such as 9999 consecutive cycles to expand the problem and cause memory exhaustion and crash, and then locate the code according to the stack, which is also a common method to locate probabilistic crashes;\n\n- One-by-one ranking method\n\nComment out the code of the problem one by one until the problem point is found. Similar methods are often used to troubleshoot the crash problem during development. Although it looks very low, it is very effective.\n\n<strong>**<font size=3>2. Tools</font>**  </strong>\n\nThere are many ways to use this, such as:\n\n- Instruments toolbox, which uses Leaks tool or memory debugger Analyze to analyze;\n\n- The Memory Graph in Xcode Memory Debugger can help us analyze the memory reference relationship of objects and find circular references and memory leaks.\n\n- Third-party detection tools, such as MLeaksFinder, FBRetainCycleDetector, LeakDetector, HeapInspector, etc.\n\n- Static analysis tools, such as Clang static analyzer, Infer, OCLint, SwiftLint and other tools. These tools generally find some memory leak code incidentally, which can give us some tips or warnings.\n  \n#### <font size=3 color=#4169E1>How to avoid Memory Leak?</font>\nIn actual development, it is unlikely that writing a piece of code to run the tools of Instrument immediately, even some MLeaksFinder these often false alarm tools are too annoying to close directly.\nThen How can we avoid and minimize the generation of problem code?\n\nFirst, there should be some risk awareness. For example, Timer since the choice of it, you should know that its biggest risk is easy to cause memory problems. Know by heart some scenarios that can easily lead to leaks. Also, for example, be careful with global variables or single instances, etc.\n\nSecond, get into some habits. For example, after writing a piece of code or receiving a piece of code, make sure the object is expected to be released at the dealloc or deinit breakpoint. Also for example, Swift as far as possible to take the value type, rather than reference types; development after self-test, some memory detection tools are turned on as an aid to detection.\n\nThird, good system design. Some business scenarios are easy to generate leakage, for example, once I participated in the development of a live business, the room VC and the room's only data model object dataModel is easy to refer to each other, because the dataModel carries a lot of business information, the business is extremely dependent on the dataModel, the object is therefore also passed very deep and wide, and a circular reference occurs easily. For this kind of improper design at the beginning, only a patch can be fixed later (maintain a dataModel weak reference collection, each time you use the id to query and get the corresponding room dataModel object, the business only needs to maintain an id String object or a dictionary object to store the least information). Similar business scenarios are commodity detail pages and so on.\n\nFourth, the regular project code to do a \"physical examination\", the general project volume is larger, this is very necessary, run the Instrumentation or Memory Graph, almost every time there are gains.\n \n\n","slug":"iOS/01. Memory & Performance & Stability/00. Summary of Memory Leak","published":1,"updated":"2023-08-15T17:33:42.218Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clm7w97rv002ikb0m5qsy74fk","content":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>Questions about Memory leak (memory leak), if the interview was asked this question and such questions, mainly related to the following 3 aspects.</p>\n<ul>\n<li>What are the common scenarios of memory leaks, and list a few common examples?</li>\n<li>How to locate and solve memory leaks that actually occur during development?</li>\n<li>How to avoid memory leaks in development and what are the methods?</li>\n</ul>\n<p>Below we summarize these 3 aspects respectively.</p>\n<h4 id=\"Common-scenarios-for-Memory-Leak\"><a href=\"#Common-scenarios-for-Memory-Leak\" class=\"headerlink\" title=\" Common scenarios for Memory Leak\"></a><font size=3 color=#4169E1> Common scenarios for Memory Leak</font></h4><p><strong>1. Circular References</strong><br>Under the ARC mechanism, circular references are a major cause of memory leaks, and it is also divided into many specific scenarios, such as</p>\n<ul>\n<li>Circular references between two class objects.</li>\n<li>Circular reference problems in Blocks (including GCD or other system Blocks, etc.).</li>\n<li>Circular reference problem in Timer. </li>\n<li>Circular reference problem brought by delegate.</li>\n<li>Scenarios such as property observation and listening classes.</li>\n</ul>\n<p><strong>2. improper object life cycle management</strong><br>This kind needs to be analyzed in the context of actual business problems, e.g.</p>\n<ul>\n<li>Static fields or other global objects lead to improper holding causing memory leaks.</li>\n<li>The reference relationship of collection classes, etc. is improper or not released in time, etc.</li>\n</ul>\n<p><strong>3. untimely release of objects</strong><br>Some objects require manual memory release, such as the Core Foundation (CF) and Core Graphics (CG) framework objects. If these objects are not released in time, it may lead to memory leaks.   </p>\n<p><strong>4. Untimely closure or release of resources</strong><br>Untimely closure (or failure to release) of resource classes is also a common memory leak scenario, for example</p>\n<ul>\n<li>The file is opened (FileHandle) and not closed in time.</li>\n<li>The URLSession object of a network request is not released in time.</li>\n</ul>\n<h4 id=\"How-to-locate-and-solve-the-memory-leak\"><a href=\"#How-to-locate-and-solve-the-memory-leak\" class=\"headerlink\" title=\" How to locate and solve the memory leak\"></a><font size=3 color=#4169E1> How to locate and solve the memory leak</font></h4><p>In fact, after finding the problem, it is basically easy to solve, for example:</p>\n<p>Circular reference means to break the cycle by using weak; If the life cycle of the object is improper, the holder can be changed or the code needs to be redesigned; CF or CG objects need to be released manually; The occupation of resource class also needs to be released manually in time.</p>\n<p>But the main problem is how to find the leaked code.</p>\n<p><strong><strong><font size=3>1. Manual debugging method</font></strong>  </strong></p>\n<p>When we realize that there is a leak, there are usually obvious symptoms, such as VC Pop failure.</p>\n<p>If we are familiar with the code, generally, I believe many people will directly find the code for manual debugging. Common means include:</p>\n<ul>\n<li>Override dealloc or deinit methods</li>\n</ul>\n<p>We can try to add a log to the dealloc or deinit method breakpoint of some classes. If there is no expected execution, it is a suspected leak point.</p>\n<ul>\n<li>Manually check reference count</li>\n</ul>\n<p>Manually checking the reference count of an object can help us find out whether there is a memory leak caused by a reference count error. We can manually check the reference count of an object using the retentCount property in Objective-C or Swift.</p>\n<ul>\n<li>Write some extra test code</li>\n</ul>\n<p>If the memory leak point is relatively obscure, it can be reproduced by writing code of some test cases, such as 9999 consecutive cycles to expand the problem and cause memory exhaustion and crash, and then locate the code according to the stack, which is also a common method to locate probabilistic crashes;</p>\n<ul>\n<li>One-by-one ranking method</li>\n</ul>\n<p>Comment out the code of the problem one by one until the problem point is found. Similar methods are often used to troubleshoot the crash problem during development. Although it looks very low, it is very effective.</p>\n<p><strong><strong><font size=3>2. Tools</font></strong>  </strong></p>\n<p>There are many ways to use this, such as:</p>\n<ul>\n<li><p>Instruments toolbox, which uses Leaks tool or memory debugger Analyze to analyze;</p>\n</li>\n<li><p>The Memory Graph in Xcode Memory Debugger can help us analyze the memory reference relationship of objects and find circular references and memory leaks.</p>\n</li>\n<li><p>Third-party detection tools, such as MLeaksFinder, FBRetainCycleDetector, LeakDetector, HeapInspector, etc.</p>\n</li>\n<li><p>Static analysis tools, such as Clang static analyzer, Infer, OCLint, SwiftLint and other tools. These tools generally find some memory leak code incidentally, which can give us some tips or warnings.</p>\n</li>\n</ul>\n<h4 id=\"How-to-avoid-Memory-Leak\"><a href=\"#How-to-avoid-Memory-Leak\" class=\"headerlink\" title=\"How to avoid Memory Leak?\"></a><font size=3 color=#4169E1>How to avoid Memory Leak?</font></h4><p>In actual development, it is unlikely that writing a piece of code to run the tools of Instrument immediately, even some MLeaksFinder these often false alarm tools are too annoying to close directly.<br>Then How can we avoid and minimize the generation of problem code?</p>\n<p>First, there should be some risk awareness. For example, Timer since the choice of it, you should know that its biggest risk is easy to cause memory problems. Know by heart some scenarios that can easily lead to leaks. Also, for example, be careful with global variables or single instances, etc.</p>\n<p>Second, get into some habits. For example, after writing a piece of code or receiving a piece of code, make sure the object is expected to be released at the dealloc or deinit breakpoint. Also for example, Swift as far as possible to take the value type, rather than reference types; development after self-test, some memory detection tools are turned on as an aid to detection.</p>\n<p>Third, good system design. Some business scenarios are easy to generate leakage, for example, once I participated in the development of a live business, the room VC and the room’s only data model object dataModel is easy to refer to each other, because the dataModel carries a lot of business information, the business is extremely dependent on the dataModel, the object is therefore also passed very deep and wide, and a circular reference occurs easily. For this kind of improper design at the beginning, only a patch can be fixed later (maintain a dataModel weak reference collection, each time you use the id to query and get the corresponding room dataModel object, the business only needs to maintain an id String object or a dictionary object to store the least information). Similar business scenarios are commodity detail pages and so on.</p>\n<p>Fourth, the regular project code to do a “physical examination”, the general project volume is larger, this is very necessary, run the Instrumentation or Memory Graph, almost every time there are gains.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>Questions about Memory leak (memory leak), if the interview was asked this question and such questions, mainly related to the following 3 aspects.</p>\n<ul>\n<li>What are the common scenarios of memory leaks, and list a few common examples?</li>\n<li>How to locate and solve memory leaks that actually occur during development?</li>\n<li>How to avoid memory leaks in development and what are the methods?</li>\n</ul>\n<p>Below we summarize these 3 aspects respectively.</p>\n<h4 id=\"Common-scenarios-for-Memory-Leak\"><a href=\"#Common-scenarios-for-Memory-Leak\" class=\"headerlink\" title=\" Common scenarios for Memory Leak\"></a><font size=3 color=#4169E1> Common scenarios for Memory Leak</font></h4><p><strong>1. Circular References</strong><br>Under the ARC mechanism, circular references are a major cause of memory leaks, and it is also divided into many specific scenarios, such as</p>\n<ul>\n<li>Circular references between two class objects.</li>\n<li>Circular reference problems in Blocks (including GCD or other system Blocks, etc.).</li>\n<li>Circular reference problem in Timer. </li>\n<li>Circular reference problem brought by delegate.</li>\n<li>Scenarios such as property observation and listening classes.</li>\n</ul>\n<p><strong>2. improper object life cycle management</strong><br>This kind needs to be analyzed in the context of actual business problems, e.g.</p>\n<ul>\n<li>Static fields or other global objects lead to improper holding causing memory leaks.</li>\n<li>The reference relationship of collection classes, etc. is improper or not released in time, etc.</li>\n</ul>\n<p><strong>3. untimely release of objects</strong><br>Some objects require manual memory release, such as the Core Foundation (CF) and Core Graphics (CG) framework objects. If these objects are not released in time, it may lead to memory leaks.   </p>\n<p><strong>4. Untimely closure or release of resources</strong><br>Untimely closure (or failure to release) of resource classes is also a common memory leak scenario, for example</p>\n<ul>\n<li>The file is opened (FileHandle) and not closed in time.</li>\n<li>The URLSession object of a network request is not released in time.</li>\n</ul>\n<h4 id=\"How-to-locate-and-solve-the-memory-leak\"><a href=\"#How-to-locate-and-solve-the-memory-leak\" class=\"headerlink\" title=\" How to locate and solve the memory leak\"></a><font size=3 color=#4169E1> How to locate and solve the memory leak</font></h4><p>In fact, after finding the problem, it is basically easy to solve, for example:</p>\n<p>Circular reference means to break the cycle by using weak; If the life cycle of the object is improper, the holder can be changed or the code needs to be redesigned; CF or CG objects need to be released manually; The occupation of resource class also needs to be released manually in time.</p>\n<p>But the main problem is how to find the leaked code.</p>\n<p><strong><strong><font size=3>1. Manual debugging method</font></strong>  </strong></p>\n<p>When we realize that there is a leak, there are usually obvious symptoms, such as VC Pop failure.</p>\n<p>If we are familiar with the code, generally, I believe many people will directly find the code for manual debugging. Common means include:</p>\n<ul>\n<li>Override dealloc or deinit methods</li>\n</ul>\n<p>We can try to add a log to the dealloc or deinit method breakpoint of some classes. If there is no expected execution, it is a suspected leak point.</p>\n<ul>\n<li>Manually check reference count</li>\n</ul>\n<p>Manually checking the reference count of an object can help us find out whether there is a memory leak caused by a reference count error. We can manually check the reference count of an object using the retentCount property in Objective-C or Swift.</p>\n<ul>\n<li>Write some extra test code</li>\n</ul>\n<p>If the memory leak point is relatively obscure, it can be reproduced by writing code of some test cases, such as 9999 consecutive cycles to expand the problem and cause memory exhaustion and crash, and then locate the code according to the stack, which is also a common method to locate probabilistic crashes;</p>\n<ul>\n<li>One-by-one ranking method</li>\n</ul>\n<p>Comment out the code of the problem one by one until the problem point is found. Similar methods are often used to troubleshoot the crash problem during development. Although it looks very low, it is very effective.</p>\n<p><strong><strong><font size=3>2. Tools</font></strong>  </strong></p>\n<p>There are many ways to use this, such as:</p>\n<ul>\n<li><p>Instruments toolbox, which uses Leaks tool or memory debugger Analyze to analyze;</p>\n</li>\n<li><p>The Memory Graph in Xcode Memory Debugger can help us analyze the memory reference relationship of objects and find circular references and memory leaks.</p>\n</li>\n<li><p>Third-party detection tools, such as MLeaksFinder, FBRetainCycleDetector, LeakDetector, HeapInspector, etc.</p>\n</li>\n<li><p>Static analysis tools, such as Clang static analyzer, Infer, OCLint, SwiftLint and other tools. These tools generally find some memory leak code incidentally, which can give us some tips or warnings.</p>\n</li>\n</ul>\n<h4 id=\"How-to-avoid-Memory-Leak\"><a href=\"#How-to-avoid-Memory-Leak\" class=\"headerlink\" title=\"How to avoid Memory Leak?\"></a><font size=3 color=#4169E1>How to avoid Memory Leak?</font></h4><p>In actual development, it is unlikely that writing a piece of code to run the tools of Instrument immediately, even some MLeaksFinder these often false alarm tools are too annoying to close directly.<br>Then How can we avoid and minimize the generation of problem code?</p>\n<p>First, there should be some risk awareness. For example, Timer since the choice of it, you should know that its biggest risk is easy to cause memory problems. Know by heart some scenarios that can easily lead to leaks. Also, for example, be careful with global variables or single instances, etc.</p>\n<p>Second, get into some habits. For example, after writing a piece of code or receiving a piece of code, make sure the object is expected to be released at the dealloc or deinit breakpoint. Also for example, Swift as far as possible to take the value type, rather than reference types; development after self-test, some memory detection tools are turned on as an aid to detection.</p>\n<p>Third, good system design. Some business scenarios are easy to generate leakage, for example, once I participated in the development of a live business, the room VC and the room’s only data model object dataModel is easy to refer to each other, because the dataModel carries a lot of business information, the business is extremely dependent on the dataModel, the object is therefore also passed very deep and wide, and a circular reference occurs easily. For this kind of improper design at the beginning, only a patch can be fixed later (maintain a dataModel weak reference collection, each time you use the id to query and get the corresponding room dataModel object, the business only needs to maintain an id String object or a dictionary object to store the least information). Similar business scenarios are commodity detail pages and so on.</p>\n<p>Fourth, the regular project code to do a “physical examination”, the general project volume is larger, this is very necessary, run the Instrumentation or Memory Graph, almost every time there are gains.</p>\n"},{"title":"01. Common Crash Scenarios","date":"2023-03-10T19:46:59.000Z","_content":"\n<font color=gray size=2>*It will take about 5 minutes to finish reading this article.*</font>\n\n#### <font size=3 color=#4169E1> 1. \"Unrecognized selector sent to instance\" </font> \n<strong>Problem analysis：</strong>     \n\"unrecognized selector sent to instance\" is an Objective-C exception that indicates an attempt to call a method or message that does not exist. This exception usually occurs when: \n- When using the performSelector: method, the specified method does not exist; \n- When using KVO (key Value observation), the observed property does not exist; \n- When using NSNotificationCenter, the monitored event does not exist; \n- The specified method is not present when using NSInvocation (message invocation); \n- When extending a class with a Category, methods are implemented directly in the implementation file instead of being declared in the header file; \nAnd so on.        \n\n<strong>Sample code：</strong>\n<details>\n<summary>Objective-C</summary>\n\n```Swift\n@interface MyClass : NSObject\n- (void)doSomething;\n@end\n\n@implementation MyClass\n@end\n\n@interface MyOtherClass : NSObject\n@end\n\n@implementation MyOtherClass\n- (void)doSomethingElse {\n    NSLog(@\"Doing something else...\");\n}\n@end\n\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n        MyClass *object = [[MyClass alloc] init];\n        // unrecognized selector sent to instance\n        [object performSelector:@selector(doSomethingElse)]; \n    }\n    return 0;\n}\n```\n</details>\n\n<strong>Recommended solution:：</strong>     \n- Use the \"respondsToSelector\" judgment before calling, or use ProtocolKit in Release mode to add a default implementation to the protocol to prevent crashes, and turn off the default implementation in Debug mode.\n- Take advantage of the dynamic nature of OC and use several methods of message forwarding to underwrite the process.\n\n\n\n#### <font size=3 color=#4169E1> 2. \"EXC_BAD_ACCESS\" </font> \n<strong>Problem analysis：</strong>         \nThere are many reasons for the problem:\n- Occurrence of hanging pointers (null pointers, wild pointers)\n- Objects are not initialized\n- The accessed object is freed\n- Access to out-of-bounds collection elements\netc.\n\n<strong>Sample code：</strong>     \nOmitted.   \n<strong>Recommended solution:：</strong>   \n1. turn on zombie mode in Debug phase and turn off zombie mode in Release.  \n2. use Xcode's Address Sanitizer to check address access out of bounds.  \n3. remember to initialize when creating objects.  \n4. use the correct modifier for the object's attributes (should use strong/weak, misused assign).   \n5. call block and other objects before the time to make a judgment.  \n\n#### <font size=3 color=#4169E1> 3. Caused by Collection Related </font> \n<strong>Problem analysis：</strong>  \nThere are also many scenarios that lead to Crash.   \n1. Array out-of-bounds, where the access subscript is greater than the number of arrays.   \n2. Adding empty data to the array.     \n3. Multi-threaded environment, a thread is reading, a thread is removing.        \n4. Multi-threaded operation of variable arrays (expansion of arrays, access to zombie objects).   \n\n<strong>Sample code：</strong>  \n\n```Swift \n// Accessing an array out of bounds will cause a crash\nlet array = [1, 2, 3]\nlet item = array[3]\n```\n\n```Swift\n// Forcibly unwrapping an optional type and it's value is nil will cause a crash\nvar dict: [String: String?] = [\"key1\": \"value1\", \"key2\": \"value2\"]\nlet value = dict[\"key1\"]! \n```\n```Swift\n// Forcibly unwrapping an optional type and it's value is nil will cause a crash\nvar set: Set<String?> = [\"value1\", \"value2\", nil]\nlet value = set.first!  \n```\n\n<strong>Recommended solution:：</strong>  \n1. When using dictionaries and sets, check whether the keys and values are nil (use guard, if let, and other syntax to avoid crashes caused by forced unwrapping);\n2. Use extensions to override original methods and perform checks internally;\n3. In Objective-C, use Runtime mechanism to replace original methods with custom secure methods;\n4. When performing multi-threaded operations on arrays, ensure the atomicity of read and write operations, such as locking or other protective measures.\n\n```Swift\n//Use the safe subscript extension provided by Swift to avoid accessing an array out of bounds.\nextension Collection {\n    subscript(safe index: Index) -> Element? {\n        return indices.contains(index) ? self[index] : nil\n    }\n}\n\nlet array = [1, 2, 3]\nlet item = array[safe: 3] //It will not cause a crash, and the resulting value will be nil.\n```\n\n\n#### <font size=3 color=#4169E1> 4. \"Out of Memory\" </font> \n<strong>Problem analysis：</strong>  \nIn iOS applications, if the application allocates too much memory and causes the system to run out of memory, an OOM error will occur. Each application on an iOS device has its own memory limit. When an application needs to allocate more memory, if there is not enough available memory, the system will automatically trigger an OOM error, terminate the application, and release it from memory.\n\nThe causes of OOM errors may include:\n1. The application tries to allocate a large amount of memory when there is not enough memory available.\n2. Memory leaks in the application that cause high memory usage.\n3. The application's memory usage is not compatible with system resources, resulting in high memory usage, etc.\n\n<strong>Sample code：</strong>  \n```Swift\nvar array = [Int]()\nwhile true {\n    array.append(1)\n}\n```\n\n<strong>Recommended solution:：</strong>  \n\nTo avoid OOM errors, the following measures can be taken:\n1. Use appropriate data structures to avoid unnecessary memory usage.\n2. Debug memory leaks.\n3. Release unnecessary memory in a timely manner, such as calling autoreleasepool to release it after using a large memory object.\n4. Reduce object creation. Object pool and other technologies can be used to reuse existing objects rather than frequently creating and destroying objects.\n5. For large memory objects, lazy-loading and other technologies can be used to load them only when needed to reduce memory usage.\n \n\n#### <font size=3 color=#4169E1> 5. \"Type Cast Exception\"or \"Type Mismatch\" </font> \n<strong>Problem analysis：</strong>   \nType Cast Exception or Type Mismatch refers to the exception that occurs during type conversion, leading to application crash. In iOS development, common scenarios include:\n1. Type mismatch occurs when converting an instance of one type to an instance of another type.\n2. Type mismatch occurs when converting from AnyObject to a specific type.\n3. Crash occurs when forcing the unwrapping of an optional type to a non-optional type with a nil value.\n\n<strong>Sample code：</strong>  \n```Swift\n let array: [Any] = [\"A\", \"B\", \"C\"]\n let str = array[0] as! Int\n //Error: Could not cast value of type 'Swift.String' (0x7ff8553bc178) to 'Swift.Int' (0x7ff8553be0e0).\n```\n\n<strong>Recommended solution:：</strong>  \n1. Before performing type conversion, check if the object is an instance of the target type using the is keyword.\n2. Use optional binding to avoid exceptions when typecasting.\n  \nFor example, in the above example, the following code can be used for improvement:\n```Swift\nlet array: [Any] = [\"A\", \"B\", \"C\"]\nif let obj = array[0] as? Int {\n    \n}\n```\n\n#### <font size=3 color=#4169E1> 6. Caused by Deadlock </font> \n<strong>Problem analysis：</strong>   \nDeadlock refers to a situation where two or more threads are waiting for each other to complete their operations, causing the program to become unresponsive. In iOS, the most common cause of a deadlock is when a synchronous operation is executed on the main thread that waits for another thread to complete, while the other thread is also waiting for the main thread to complete, resulting in a deadlock.\n\n<strong>Sample code：</strong>  \nIn the following code, when the main thread calls the queue.sync method, it waits for the completion of Block 1. However, Block 1 calls queue.sync again, causing the thread to enter a waiting state. Since Block 2 depends on the thread to release the lock before it can execute, the entire program is in a deadlock state and cannot continue executing.\n```Swift\nlet queue = DispatchQueue(label: \"com.example.queue\")\nqueue.sync {\n    print(\"Block 1\")\n    queue.sync {\n        print(\"Block 2\")\n    }\n}\nprint(\"Done\")\n``` \n\n{% img /assets/iOS/Memory&Performance&Stability/001.png %}\n\n<strong>Recommended solution:：</strong> \n1. Avoid executing long synchronous operations on the main thread, and instead, perform them on a background thread.\n2. Avoid using synchronous operations that wait for each other on the same queue and use asynchronous operations instead.\n3. Avoid using synchronous operations on multiple queues that cause deadlocks. Use asynchronous operations instead or use techniques such as dispatch_group to solve the issue.\n\nIn the above example, you can replace the synchronous operations with asynchronous operations, as shown below:\n```Swift\nlet queue = DispatchQueue(label: \"com.example.queue\")\nqueue.async {\n    print(\"Block 1\")\n    queue.async {\n        print(\"Block 2\")\n    }\n}\nprint(\"Done\")\n\n```\n\n#### <font size=3 color=#4169E1> 7. Caused by Stack Overflow </font> \n<strong>Problem analysis：</strong>   \nStack Overflow usually occurs in recursive calls. If the recursion does not have a termination condition or the termination condition is incorrect, the recursion depth will continue to increase until the stack space is exhausted, causing a stack overflow. \n\nIn addition, if one method calls another method, a deep call stack can also cause a stack overflow.         \n\n<strong>Sample code：</strong>  \n```Swift\nfunc recursiveFunction() {\n    recursiveFunction()\n}\nrecursiveFunction() \n```\n<strong>Recommended solution:：</strong>  \n1. Optimize algorithms: Optimize recursive algorithms to reduce the depth of the call stack. For example, use iterative instead of recursive algorithms.\n2. Increase stack space: Increase available stack space by changing the thread stack size or using the dispatch_set_concurrency function of GCD.\n3. Reduce stack space usage: Reduce stack space usage by reducing the local variables allocated during function calls, reducing nested calls, or using tail recursion and other techniques.\n4. Use tail recursion: Tail recursion refers to the last operation in a recursive function being a recursive call to itself. In Swift, you can use the @_optimize(speed) and @_optimize(safety) attributes to mark functions so that the compiler can optimize tail recursion.\n5. Avoid infinite recursion: Ensure that the recursive algorithm has the correct termination condition; otherwise, the recursion depth will increase infinitely, eventually leading to a stack overflow.\n6. Use data structures with smaller stack space: For large-scale recursive algorithms, data structures with smaller stack space, such as linked lists or queues, can be used.\n\n\n#### <font size=3 color=#4169E1> 8. Caused by KVO </font> \n<strong>Problem analysis：</strong>   \nKVO (Key-Value Observing) is an observer pattern in the Cocoa framework that allows objects to be notified when the value of another object's property changes. When using KVO, if observers are not removed in a timely manner or the observer object has already been released, it can cause a crash.\n<strong>Sample code：</strong>  \nOmitted.（Objective-C）       \n<strong>Recommended solution:：</strong>  \n1. Remove the observer in a timely manner and ensure the observer object exists.\n2. Best practices for using KVO:    \n    - Use KVO only when necessary to avoid overuse;   \n    - Use Swift's Property Observers instead of KVO;  \n    - Use closures or Notification Center instead of KVO;     \n    - Use the correct method when removing observers to avoid omissions;  \n    - Avoid using strings as keyPaths. Instead, use static variables or constants, or use the #keyPath() method introduced in Swift 4 to obtain the keyPath.\n\n#### <font size=3 color=#4169E1> 9. Caused by Multi-threaded </font> \n<strong>Problem analysis：</strong>   \nCrashes caused by multi-threading are a common issue in iOS, which may occur in different scenarios. Here are some possible scenarios, sample code, and recommended solutions that may cause multi-threading crashes:\n     \n1. Multiple threads accessing the same shared data structure or variable without synchronization or locking.\n2. Using unsafe data structures or APIs in a multi-threaded environment, such as using non-thread-safe mutable collection class Array.\n3. Calling a long-running operation (such as network requests or I/O operations) in a thread, causing the UI thread to be blocked.\n4. Updating the UI in a sub-thread.\n\nIn general, the crash caused by multi-threading will receive a SIGSEGV signal, indicating that an attempt was made to access memory that was not allocated to oneself or to write data to a memory address without write permission.\n\n<strong>Sample code：</strong>  \nThe following is a simple sample code that demonstrates the scenarios and issues caused by multi-threading crashes:  \n```Swift\nvar array = [Int]()\nDispatchQueue.global().async {\n    for i in 0..<100 {\n        array.append(i)\n    }\n}\n\nDispatchQueue.global().async {\n    for i in 100..<200 {\n        array.append(i)\n    }\n}\n```\nAfter running it, the crash occurs:\n{% img /assets/iOS/Memory&Performance&Stability/002.jpeg %}\n\n<strong>Recommended solution:：</strong>  \n\nHere are three possible recommended solutions that can help you avoid multi-threading crashes:\n1. Use thread-safe data structures or APIs, such as using NSLock or dispatch_semaphore_t to synchronize.\n```Swift\nlet lock = NSLock()\nDispatchQueue.global().async {\n    lock.lock()\n    for i in 0..<100 {\n        array.append(i)\n    }\n    lock.unlock()\n}\nDispatchQueue.global().async {\n    lock.lock()\n    for i in 100..<200 {\n        array.append(i)\n    }\n    lock.unlock()\n}\n```\n1. Use GCD for inter-thread communication and avoid long-running operations on the main thread.\n```Swift\nDispatchQueue.global().async {\n    let data = getData() // long-running operation\n    DispatchQueue.main.async {\n        self.updateUI(with: data) // update UI on the main thread\n    }\n}\n```\nThe above code performs a long-running operation on the background thread and uses GCD to send the result to the main thread to update the UI.\n\n1. Use a serial queue to ensure that operations on the same object are executed in order.\n```Swift\nlet serialQueue = DispatchQueue(label: \"com.example.serialQueue\")\n\nserialQueue.async {\n    self.updateUI(with: data1) // operation 1\n}\n\nserialQueue.async {\n    self.updateUI(with: data2) // operation 2\n}\n```\n\n#### <font size=3 color=#4169E1> 10. Caused by Long connection of Socket </font> \n<strong>Problem analysis：</strong>  \nWhen the server closes a connection, if the client continues to send data, according to the TCP protocol, it will receive an RST response. When the client sends data to this server again, the system will send a SIGPIPE signal to the process, telling the process that the connection has been disconnected and not to write anymore. According to the default signal handling rules, the default action of the SIGPIPE signal is to terminate or exit. Therefore, the client will exit.\n\n<strong>Sample code：</strong>  \n```Swift\nclass SocketManager {\n    \n    private var inputStream: InputStream?\n    private var outputStream: OutputStream?\n    private let host: String = \"localhost\"\n    private let port: Int = 12345\n    \n    func connect() {\n        Stream.getStreamsToHost(withName: host, port: port, inputStream: &inputStream, outputStream: &outputStream)\n        \n        inputStream?.open()\n        outputStream?.open()\n    }\n    \n    func disconnect() {\n        inputStream?.close()\n        outputStream?.close()\n    }    \n}\n```\n\n<strong>Recommended solution:：</strong>     \nHere are three possible recommended solutions to avoid the crash caused by long connections of sockets:\n\nFirst, when the application enters the background, immediately close the socket connection:\n```Swift\nfunc applicationWillResignActive(_ application: UIApplication) {\n    socketManager.disconnect()\n}\n```\nSecond, when using the background running mode in the application, handle the socket connection correctly.\n```Swift\nfunc application(_ application: UIApplication, performFetchWithCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void) {\n    if application.backgroundTimeRemaining < 60 {\n        socketManager.disconnect()\n    }\n    \n    // Execute background task here\n}\n\n```\nThe above code shows that when using Background Fetch, check the remaining background running time of the application, and close the socket connection if it is less than 1 minute.\n\nThird, use signal(SIGPIPE,SIG_IGN) to hand over SIGPIPE to the system, which sets SIGPIPE to SIG_IGN, making the client not execute the default operation, that is, not to exit.\n\n#### <font size=3 color=#4169E1> 11. Caused by Watch Dog Timeout </font> \n<strong>Problem analysis：</strong>   \nWatchdog Timeout is a monitoring mechanism built into the iOS system that checks whether the code executed by the application in the main thread exceeds the specified time. If it times out, the system automatically terminates the execution of the application to avoid a poor user experience caused by application freezes.\n\nWatchdog Timeout typically occurs during time-consuming operations such as network requests, IO operations, and large data processing. If these time-consuming operations are not handled correctly, it is easy to trigger Watchdog Timeout, leading to application crashes.\n\n<strong>Sample code：</strong>  \nFor example, executing the following code in the main thread may trigger a Watchdog timeout:\n```Swift\nfunc doHeavyWork() {\n    for i in 1...1000000000 {\n        // execute a large number of loop operations\n    }\n}\n```\n\n<strong>Recommended solution:：</strong>     \nFirst, put time-consuming operations in a separate thread to avoid occupying the main thread for too long, thereby avoiding the occurrence of Watchdog Timeout. You can use GCD or NSOperationQueue to implement this.\n\nSecond, use an asynchronous method to execute time-consuming operations and use an appropriate queue to manage the execution. For example, use DispatchQueue.global() to create a global queue, and then use the async method to asynchronously execute tasks. In addition, you can also use NSOperationQueue to manage tasks.         \n\nThird, use a timer or RunLoop to periodically execute time-consuming operations, and check whether the time exceeds the Watchdog Timeout setting before execution. If it times out, stop executing and put the task on hold until the next execution cycle.  \n\nFourth, if time-consuming operations must be performed in the main thread, you can use NSRunLoop to control the execution time and periodically call the run method to ensure that the Watchdog Timeout setting is not exceeded.\n\n\n#### <font size=3 color=gray>*Reference*</font>\n[1] <https://juejin.cn/post/6844903775203753997>\n[2] <https://juejin.cn/post/6978014329333350430>\n \n\n","source":"_posts/iOS/01. Memory & Performance & Stability/01. Common Crash Scenarios.md","raw":"---\ntitle: 01. Common Crash Scenarios\ndate: 2023-03-10 20:46:59\ncategories: \n- [iOS, 01. Memory & Performance & Stability]\ntags:\n- crash\n---\n\n<font color=gray size=2>*It will take about 5 minutes to finish reading this article.*</font>\n\n#### <font size=3 color=#4169E1> 1. \"Unrecognized selector sent to instance\" </font> \n<strong>Problem analysis：</strong>     \n\"unrecognized selector sent to instance\" is an Objective-C exception that indicates an attempt to call a method or message that does not exist. This exception usually occurs when: \n- When using the performSelector: method, the specified method does not exist; \n- When using KVO (key Value observation), the observed property does not exist; \n- When using NSNotificationCenter, the monitored event does not exist; \n- The specified method is not present when using NSInvocation (message invocation); \n- When extending a class with a Category, methods are implemented directly in the implementation file instead of being declared in the header file; \nAnd so on.        \n\n<strong>Sample code：</strong>\n<details>\n<summary>Objective-C</summary>\n\n```Swift\n@interface MyClass : NSObject\n- (void)doSomething;\n@end\n\n@implementation MyClass\n@end\n\n@interface MyOtherClass : NSObject\n@end\n\n@implementation MyOtherClass\n- (void)doSomethingElse {\n    NSLog(@\"Doing something else...\");\n}\n@end\n\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n        MyClass *object = [[MyClass alloc] init];\n        // unrecognized selector sent to instance\n        [object performSelector:@selector(doSomethingElse)]; \n    }\n    return 0;\n}\n```\n</details>\n\n<strong>Recommended solution:：</strong>     \n- Use the \"respondsToSelector\" judgment before calling, or use ProtocolKit in Release mode to add a default implementation to the protocol to prevent crashes, and turn off the default implementation in Debug mode.\n- Take advantage of the dynamic nature of OC and use several methods of message forwarding to underwrite the process.\n\n\n\n#### <font size=3 color=#4169E1> 2. \"EXC_BAD_ACCESS\" </font> \n<strong>Problem analysis：</strong>         \nThere are many reasons for the problem:\n- Occurrence of hanging pointers (null pointers, wild pointers)\n- Objects are not initialized\n- The accessed object is freed\n- Access to out-of-bounds collection elements\netc.\n\n<strong>Sample code：</strong>     \nOmitted.   \n<strong>Recommended solution:：</strong>   \n1. turn on zombie mode in Debug phase and turn off zombie mode in Release.  \n2. use Xcode's Address Sanitizer to check address access out of bounds.  \n3. remember to initialize when creating objects.  \n4. use the correct modifier for the object's attributes (should use strong/weak, misused assign).   \n5. call block and other objects before the time to make a judgment.  \n\n#### <font size=3 color=#4169E1> 3. Caused by Collection Related </font> \n<strong>Problem analysis：</strong>  \nThere are also many scenarios that lead to Crash.   \n1. Array out-of-bounds, where the access subscript is greater than the number of arrays.   \n2. Adding empty data to the array.     \n3. Multi-threaded environment, a thread is reading, a thread is removing.        \n4. Multi-threaded operation of variable arrays (expansion of arrays, access to zombie objects).   \n\n<strong>Sample code：</strong>  \n\n```Swift \n// Accessing an array out of bounds will cause a crash\nlet array = [1, 2, 3]\nlet item = array[3]\n```\n\n```Swift\n// Forcibly unwrapping an optional type and it's value is nil will cause a crash\nvar dict: [String: String?] = [\"key1\": \"value1\", \"key2\": \"value2\"]\nlet value = dict[\"key1\"]! \n```\n```Swift\n// Forcibly unwrapping an optional type and it's value is nil will cause a crash\nvar set: Set<String?> = [\"value1\", \"value2\", nil]\nlet value = set.first!  \n```\n\n<strong>Recommended solution:：</strong>  \n1. When using dictionaries and sets, check whether the keys and values are nil (use guard, if let, and other syntax to avoid crashes caused by forced unwrapping);\n2. Use extensions to override original methods and perform checks internally;\n3. In Objective-C, use Runtime mechanism to replace original methods with custom secure methods;\n4. When performing multi-threaded operations on arrays, ensure the atomicity of read and write operations, such as locking or other protective measures.\n\n```Swift\n//Use the safe subscript extension provided by Swift to avoid accessing an array out of bounds.\nextension Collection {\n    subscript(safe index: Index) -> Element? {\n        return indices.contains(index) ? self[index] : nil\n    }\n}\n\nlet array = [1, 2, 3]\nlet item = array[safe: 3] //It will not cause a crash, and the resulting value will be nil.\n```\n\n\n#### <font size=3 color=#4169E1> 4. \"Out of Memory\" </font> \n<strong>Problem analysis：</strong>  \nIn iOS applications, if the application allocates too much memory and causes the system to run out of memory, an OOM error will occur. Each application on an iOS device has its own memory limit. When an application needs to allocate more memory, if there is not enough available memory, the system will automatically trigger an OOM error, terminate the application, and release it from memory.\n\nThe causes of OOM errors may include:\n1. The application tries to allocate a large amount of memory when there is not enough memory available.\n2. Memory leaks in the application that cause high memory usage.\n3. The application's memory usage is not compatible with system resources, resulting in high memory usage, etc.\n\n<strong>Sample code：</strong>  \n```Swift\nvar array = [Int]()\nwhile true {\n    array.append(1)\n}\n```\n\n<strong>Recommended solution:：</strong>  \n\nTo avoid OOM errors, the following measures can be taken:\n1. Use appropriate data structures to avoid unnecessary memory usage.\n2. Debug memory leaks.\n3. Release unnecessary memory in a timely manner, such as calling autoreleasepool to release it after using a large memory object.\n4. Reduce object creation. Object pool and other technologies can be used to reuse existing objects rather than frequently creating and destroying objects.\n5. For large memory objects, lazy-loading and other technologies can be used to load them only when needed to reduce memory usage.\n \n\n#### <font size=3 color=#4169E1> 5. \"Type Cast Exception\"or \"Type Mismatch\" </font> \n<strong>Problem analysis：</strong>   \nType Cast Exception or Type Mismatch refers to the exception that occurs during type conversion, leading to application crash. In iOS development, common scenarios include:\n1. Type mismatch occurs when converting an instance of one type to an instance of another type.\n2. Type mismatch occurs when converting from AnyObject to a specific type.\n3. Crash occurs when forcing the unwrapping of an optional type to a non-optional type with a nil value.\n\n<strong>Sample code：</strong>  \n```Swift\n let array: [Any] = [\"A\", \"B\", \"C\"]\n let str = array[0] as! Int\n //Error: Could not cast value of type 'Swift.String' (0x7ff8553bc178) to 'Swift.Int' (0x7ff8553be0e0).\n```\n\n<strong>Recommended solution:：</strong>  \n1. Before performing type conversion, check if the object is an instance of the target type using the is keyword.\n2. Use optional binding to avoid exceptions when typecasting.\n  \nFor example, in the above example, the following code can be used for improvement:\n```Swift\nlet array: [Any] = [\"A\", \"B\", \"C\"]\nif let obj = array[0] as? Int {\n    \n}\n```\n\n#### <font size=3 color=#4169E1> 6. Caused by Deadlock </font> \n<strong>Problem analysis：</strong>   \nDeadlock refers to a situation where two or more threads are waiting for each other to complete their operations, causing the program to become unresponsive. In iOS, the most common cause of a deadlock is when a synchronous operation is executed on the main thread that waits for another thread to complete, while the other thread is also waiting for the main thread to complete, resulting in a deadlock.\n\n<strong>Sample code：</strong>  \nIn the following code, when the main thread calls the queue.sync method, it waits for the completion of Block 1. However, Block 1 calls queue.sync again, causing the thread to enter a waiting state. Since Block 2 depends on the thread to release the lock before it can execute, the entire program is in a deadlock state and cannot continue executing.\n```Swift\nlet queue = DispatchQueue(label: \"com.example.queue\")\nqueue.sync {\n    print(\"Block 1\")\n    queue.sync {\n        print(\"Block 2\")\n    }\n}\nprint(\"Done\")\n``` \n\n{% img /assets/iOS/Memory&Performance&Stability/001.png %}\n\n<strong>Recommended solution:：</strong> \n1. Avoid executing long synchronous operations on the main thread, and instead, perform them on a background thread.\n2. Avoid using synchronous operations that wait for each other on the same queue and use asynchronous operations instead.\n3. Avoid using synchronous operations on multiple queues that cause deadlocks. Use asynchronous operations instead or use techniques such as dispatch_group to solve the issue.\n\nIn the above example, you can replace the synchronous operations with asynchronous operations, as shown below:\n```Swift\nlet queue = DispatchQueue(label: \"com.example.queue\")\nqueue.async {\n    print(\"Block 1\")\n    queue.async {\n        print(\"Block 2\")\n    }\n}\nprint(\"Done\")\n\n```\n\n#### <font size=3 color=#4169E1> 7. Caused by Stack Overflow </font> \n<strong>Problem analysis：</strong>   \nStack Overflow usually occurs in recursive calls. If the recursion does not have a termination condition or the termination condition is incorrect, the recursion depth will continue to increase until the stack space is exhausted, causing a stack overflow. \n\nIn addition, if one method calls another method, a deep call stack can also cause a stack overflow.         \n\n<strong>Sample code：</strong>  \n```Swift\nfunc recursiveFunction() {\n    recursiveFunction()\n}\nrecursiveFunction() \n```\n<strong>Recommended solution:：</strong>  \n1. Optimize algorithms: Optimize recursive algorithms to reduce the depth of the call stack. For example, use iterative instead of recursive algorithms.\n2. Increase stack space: Increase available stack space by changing the thread stack size or using the dispatch_set_concurrency function of GCD.\n3. Reduce stack space usage: Reduce stack space usage by reducing the local variables allocated during function calls, reducing nested calls, or using tail recursion and other techniques.\n4. Use tail recursion: Tail recursion refers to the last operation in a recursive function being a recursive call to itself. In Swift, you can use the @_optimize(speed) and @_optimize(safety) attributes to mark functions so that the compiler can optimize tail recursion.\n5. Avoid infinite recursion: Ensure that the recursive algorithm has the correct termination condition; otherwise, the recursion depth will increase infinitely, eventually leading to a stack overflow.\n6. Use data structures with smaller stack space: For large-scale recursive algorithms, data structures with smaller stack space, such as linked lists or queues, can be used.\n\n\n#### <font size=3 color=#4169E1> 8. Caused by KVO </font> \n<strong>Problem analysis：</strong>   \nKVO (Key-Value Observing) is an observer pattern in the Cocoa framework that allows objects to be notified when the value of another object's property changes. When using KVO, if observers are not removed in a timely manner or the observer object has already been released, it can cause a crash.\n<strong>Sample code：</strong>  \nOmitted.（Objective-C）       \n<strong>Recommended solution:：</strong>  \n1. Remove the observer in a timely manner and ensure the observer object exists.\n2. Best practices for using KVO:    \n    - Use KVO only when necessary to avoid overuse;   \n    - Use Swift's Property Observers instead of KVO;  \n    - Use closures or Notification Center instead of KVO;     \n    - Use the correct method when removing observers to avoid omissions;  \n    - Avoid using strings as keyPaths. Instead, use static variables or constants, or use the #keyPath() method introduced in Swift 4 to obtain the keyPath.\n\n#### <font size=3 color=#4169E1> 9. Caused by Multi-threaded </font> \n<strong>Problem analysis：</strong>   \nCrashes caused by multi-threading are a common issue in iOS, which may occur in different scenarios. Here are some possible scenarios, sample code, and recommended solutions that may cause multi-threading crashes:\n     \n1. Multiple threads accessing the same shared data structure or variable without synchronization or locking.\n2. Using unsafe data structures or APIs in a multi-threaded environment, such as using non-thread-safe mutable collection class Array.\n3. Calling a long-running operation (such as network requests or I/O operations) in a thread, causing the UI thread to be blocked.\n4. Updating the UI in a sub-thread.\n\nIn general, the crash caused by multi-threading will receive a SIGSEGV signal, indicating that an attempt was made to access memory that was not allocated to oneself or to write data to a memory address without write permission.\n\n<strong>Sample code：</strong>  \nThe following is a simple sample code that demonstrates the scenarios and issues caused by multi-threading crashes:  \n```Swift\nvar array = [Int]()\nDispatchQueue.global().async {\n    for i in 0..<100 {\n        array.append(i)\n    }\n}\n\nDispatchQueue.global().async {\n    for i in 100..<200 {\n        array.append(i)\n    }\n}\n```\nAfter running it, the crash occurs:\n{% img /assets/iOS/Memory&Performance&Stability/002.jpeg %}\n\n<strong>Recommended solution:：</strong>  \n\nHere are three possible recommended solutions that can help you avoid multi-threading crashes:\n1. Use thread-safe data structures or APIs, such as using NSLock or dispatch_semaphore_t to synchronize.\n```Swift\nlet lock = NSLock()\nDispatchQueue.global().async {\n    lock.lock()\n    for i in 0..<100 {\n        array.append(i)\n    }\n    lock.unlock()\n}\nDispatchQueue.global().async {\n    lock.lock()\n    for i in 100..<200 {\n        array.append(i)\n    }\n    lock.unlock()\n}\n```\n1. Use GCD for inter-thread communication and avoid long-running operations on the main thread.\n```Swift\nDispatchQueue.global().async {\n    let data = getData() // long-running operation\n    DispatchQueue.main.async {\n        self.updateUI(with: data) // update UI on the main thread\n    }\n}\n```\nThe above code performs a long-running operation on the background thread and uses GCD to send the result to the main thread to update the UI.\n\n1. Use a serial queue to ensure that operations on the same object are executed in order.\n```Swift\nlet serialQueue = DispatchQueue(label: \"com.example.serialQueue\")\n\nserialQueue.async {\n    self.updateUI(with: data1) // operation 1\n}\n\nserialQueue.async {\n    self.updateUI(with: data2) // operation 2\n}\n```\n\n#### <font size=3 color=#4169E1> 10. Caused by Long connection of Socket </font> \n<strong>Problem analysis：</strong>  \nWhen the server closes a connection, if the client continues to send data, according to the TCP protocol, it will receive an RST response. When the client sends data to this server again, the system will send a SIGPIPE signal to the process, telling the process that the connection has been disconnected and not to write anymore. According to the default signal handling rules, the default action of the SIGPIPE signal is to terminate or exit. Therefore, the client will exit.\n\n<strong>Sample code：</strong>  \n```Swift\nclass SocketManager {\n    \n    private var inputStream: InputStream?\n    private var outputStream: OutputStream?\n    private let host: String = \"localhost\"\n    private let port: Int = 12345\n    \n    func connect() {\n        Stream.getStreamsToHost(withName: host, port: port, inputStream: &inputStream, outputStream: &outputStream)\n        \n        inputStream?.open()\n        outputStream?.open()\n    }\n    \n    func disconnect() {\n        inputStream?.close()\n        outputStream?.close()\n    }    \n}\n```\n\n<strong>Recommended solution:：</strong>     \nHere are three possible recommended solutions to avoid the crash caused by long connections of sockets:\n\nFirst, when the application enters the background, immediately close the socket connection:\n```Swift\nfunc applicationWillResignActive(_ application: UIApplication) {\n    socketManager.disconnect()\n}\n```\nSecond, when using the background running mode in the application, handle the socket connection correctly.\n```Swift\nfunc application(_ application: UIApplication, performFetchWithCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void) {\n    if application.backgroundTimeRemaining < 60 {\n        socketManager.disconnect()\n    }\n    \n    // Execute background task here\n}\n\n```\nThe above code shows that when using Background Fetch, check the remaining background running time of the application, and close the socket connection if it is less than 1 minute.\n\nThird, use signal(SIGPIPE,SIG_IGN) to hand over SIGPIPE to the system, which sets SIGPIPE to SIG_IGN, making the client not execute the default operation, that is, not to exit.\n\n#### <font size=3 color=#4169E1> 11. Caused by Watch Dog Timeout </font> \n<strong>Problem analysis：</strong>   \nWatchdog Timeout is a monitoring mechanism built into the iOS system that checks whether the code executed by the application in the main thread exceeds the specified time. If it times out, the system automatically terminates the execution of the application to avoid a poor user experience caused by application freezes.\n\nWatchdog Timeout typically occurs during time-consuming operations such as network requests, IO operations, and large data processing. If these time-consuming operations are not handled correctly, it is easy to trigger Watchdog Timeout, leading to application crashes.\n\n<strong>Sample code：</strong>  \nFor example, executing the following code in the main thread may trigger a Watchdog timeout:\n```Swift\nfunc doHeavyWork() {\n    for i in 1...1000000000 {\n        // execute a large number of loop operations\n    }\n}\n```\n\n<strong>Recommended solution:：</strong>     \nFirst, put time-consuming operations in a separate thread to avoid occupying the main thread for too long, thereby avoiding the occurrence of Watchdog Timeout. You can use GCD or NSOperationQueue to implement this.\n\nSecond, use an asynchronous method to execute time-consuming operations and use an appropriate queue to manage the execution. For example, use DispatchQueue.global() to create a global queue, and then use the async method to asynchronously execute tasks. In addition, you can also use NSOperationQueue to manage tasks.         \n\nThird, use a timer or RunLoop to periodically execute time-consuming operations, and check whether the time exceeds the Watchdog Timeout setting before execution. If it times out, stop executing and put the task on hold until the next execution cycle.  \n\nFourth, if time-consuming operations must be performed in the main thread, you can use NSRunLoop to control the execution time and periodically call the run method to ensure that the Watchdog Timeout setting is not exceeded.\n\n\n#### <font size=3 color=gray>*Reference*</font>\n[1] <https://juejin.cn/post/6844903775203753997>\n[2] <https://juejin.cn/post/6978014329333350430>\n \n\n","slug":"iOS/01. Memory & Performance & Stability/01. Common Crash Scenarios","published":1,"updated":"2023-08-15T17:35:32.834Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clm7w97rw002mkb0m93gjez4j","content":"<p><font color=gray size=2><em>It will take about 5 minutes to finish reading this article.</em></font></p>\n<h4 id=\"1-“Unrecognized-selector-sent-to-instance”\"><a href=\"#1-“Unrecognized-selector-sent-to-instance”\" class=\"headerlink\" title=\" 1. “Unrecognized selector sent to instance” \"></a><font size=3 color=#4169E1> 1. “Unrecognized selector sent to instance” </font></h4><p><strong>Problem analysis：</strong><br>“unrecognized selector sent to instance” is an Objective-C exception that indicates an attempt to call a method or message that does not exist. This exception usually occurs when: </p>\n<ul>\n<li>When using the performSelector: method, the specified method does not exist; </li>\n<li>When using KVO (key Value observation), the observed property does not exist; </li>\n<li>When using NSNotificationCenter, the monitored event does not exist; </li>\n<li>The specified method is not present when using NSInvocation (message invocation); </li>\n<li>When extending a class with a Category, methods are implemented directly in the implementation file instead of being declared in the header file;<br>And so on.</li>\n</ul>\n<p><strong>Sample code：</strong></p>\n<details>\n<summary>Objective-C</summary>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@interface</span> <span class=\"type\">MyClass</span> : <span class=\"type\">NSObject</span></span><br><span class=\"line\"><span class=\"operator\">-</span> (void)doSomething;</span><br><span class=\"line\"><span class=\"meta\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@implementation</span> <span class=\"type\">MyClass</span></span><br><span class=\"line\"><span class=\"meta\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@interface</span> <span class=\"type\">MyOtherClass</span> : <span class=\"type\">NSObject</span></span><br><span class=\"line\"><span class=\"meta\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@implementation</span> <span class=\"type\">MyOtherClass</span></span><br><span class=\"line\"><span class=\"operator\">-</span> (void)doSomethingElse &#123;</span><br><span class=\"line\">    <span class=\"type\">NSLog</span>(@<span class=\"string\">&quot;Doing something else...&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, const char <span class=\"operator\">*</span> argv[]) &#123;</span><br><span class=\"line\">    <span class=\"meta\">@autoreleasepool</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">MyClass</span> <span class=\"operator\">*</span>object <span class=\"operator\">=</span> [[<span class=\"type\">MyClass</span> alloc] <span class=\"keyword\">init</span>];</span><br><span class=\"line\">        <span class=\"comment\">// unrecognized selector sent to instance</span></span><br><span class=\"line\">        [object performSelector:<span class=\"meta\">@selector</span>(doSomethingElse)]; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</details>\n\n<p><strong>Recommended solution:：</strong>     </p>\n<ul>\n<li>Use the “respondsToSelector” judgment before calling, or use ProtocolKit in Release mode to add a default implementation to the protocol to prevent crashes, and turn off the default implementation in Debug mode.</li>\n<li>Take advantage of the dynamic nature of OC and use several methods of message forwarding to underwrite the process.</li>\n</ul>\n<h4 id=\"2-“EXC-BAD-ACCESS”\"><a href=\"#2-“EXC-BAD-ACCESS”\" class=\"headerlink\" title=\" 2. “EXC_BAD_ACCESS” \"></a><font size=3 color=#4169E1> 2. “EXC_BAD_ACCESS” </font></h4><p><strong>Problem analysis：</strong><br>There are many reasons for the problem:</p>\n<ul>\n<li>Occurrence of hanging pointers (null pointers, wild pointers)</li>\n<li>Objects are not initialized</li>\n<li>The accessed object is freed</li>\n<li>Access to out-of-bounds collection elements<br>etc.</li>\n</ul>\n<p><strong>Sample code：</strong><br>Omitted.<br><strong>Recommended solution:：</strong>   </p>\n<ol>\n<li>turn on zombie mode in Debug phase and turn off zombie mode in Release.  </li>\n<li>use Xcode’s Address Sanitizer to check address access out of bounds.  </li>\n<li>remember to initialize when creating objects.  </li>\n<li>use the correct modifier for the object’s attributes (should use strong&#x2F;weak, misused assign).   </li>\n<li>call block and other objects before the time to make a judgment.</li>\n</ol>\n<h4 id=\"3-Caused-by-Collection-Related\"><a href=\"#3-Caused-by-Collection-Related\" class=\"headerlink\" title=\" 3. Caused by Collection Related \"></a><font size=3 color=#4169E1> 3. Caused by Collection Related </font></h4><p><strong>Problem analysis：</strong><br>There are also many scenarios that lead to Crash.   </p>\n<ol>\n<li>Array out-of-bounds, where the access subscript is greater than the number of arrays.   </li>\n<li>Adding empty data to the array.     </li>\n<li>Multi-threaded environment, a thread is reading, a thread is removing.        </li>\n<li>Multi-threaded operation of variable arrays (expansion of arrays, access to zombie objects).</li>\n</ol>\n<p><strong>Sample code：</strong>  </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Accessing an array out of bounds will cause a crash</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> array <span class=\"operator\">=</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> item <span class=\"operator\">=</span> array[<span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Forcibly unwrapping an optional type and it&#x27;s value is nil will cause a crash</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> dict: [<span class=\"type\">String</span>: <span class=\"type\">String</span>?] <span class=\"operator\">=</span> [<span class=\"string\">&quot;key1&quot;</span>: <span class=\"string\">&quot;value1&quot;</span>, <span class=\"string\">&quot;key2&quot;</span>: <span class=\"string\">&quot;value2&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> value <span class=\"operator\">=</span> dict[<span class=\"string\">&quot;key1&quot;</span>]<span class=\"operator\">!</span> </span><br></pre></td></tr></table></figure>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Forcibly unwrapping an optional type and it&#x27;s value is nil will cause a crash</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"keyword\">set</span>: <span class=\"type\">Set</span>&lt;<span class=\"type\">String</span>?&gt; <span class=\"operator\">=</span> [<span class=\"string\">&quot;value1&quot;</span>, <span class=\"string\">&quot;value2&quot;</span>, <span class=\"literal\">nil</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> value <span class=\"operator\">=</span> <span class=\"keyword\">set</span>.first<span class=\"operator\">!</span>  </span><br></pre></td></tr></table></figure>\n\n<p><strong>Recommended solution:：</strong>  </p>\n<ol>\n<li>When using dictionaries and sets, check whether the keys and values are nil (use guard, if let, and other syntax to avoid crashes caused by forced unwrapping);</li>\n<li>Use extensions to override original methods and perform checks internally;</li>\n<li>In Objective-C, use Runtime mechanism to replace original methods with custom secure methods;</li>\n<li>When performing multi-threaded operations on arrays, ensure the atomicity of read and write operations, such as locking or other protective measures.</li>\n</ol>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Use the safe subscript extension provided by Swift to avoid accessing an array out of bounds.</span></span><br><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">Collection</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">subscript</span>(<span class=\"params\">safe</span> <span class=\"params\">index</span>: <span class=\"type\">Index</span>) -&gt; <span class=\"type\">Element</span>? &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> indices.contains(index) <span class=\"operator\">?</span> <span class=\"keyword\">self</span>[index] : <span class=\"literal\">nil</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> array <span class=\"operator\">=</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> item <span class=\"operator\">=</span> array[safe: <span class=\"number\">3</span>] <span class=\"comment\">//It will not cause a crash, and the resulting value will be nil.</span></span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"4-“Out-of-Memory”\"><a href=\"#4-“Out-of-Memory”\" class=\"headerlink\" title=\" 4. “Out of Memory” \"></a><font size=3 color=#4169E1> 4. “Out of Memory” </font></h4><p><strong>Problem analysis：</strong><br>In iOS applications, if the application allocates too much memory and causes the system to run out of memory, an OOM error will occur. Each application on an iOS device has its own memory limit. When an application needs to allocate more memory, if there is not enough available memory, the system will automatically trigger an OOM error, terminate the application, and release it from memory.</p>\n<p>The causes of OOM errors may include:</p>\n<ol>\n<li>The application tries to allocate a large amount of memory when there is not enough memory available.</li>\n<li>Memory leaks in the application that cause high memory usage.</li>\n<li>The application’s memory usage is not compatible with system resources, resulting in high memory usage, etc.</li>\n</ol>\n<p><strong>Sample code：</strong>  </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array <span class=\"operator\">=</span> [<span class=\"type\">Int</span>]()</span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">true</span> &#123;</span><br><span class=\"line\">    array.append(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Recommended solution:：</strong>  </p>\n<p>To avoid OOM errors, the following measures can be taken:</p>\n<ol>\n<li>Use appropriate data structures to avoid unnecessary memory usage.</li>\n<li>Debug memory leaks.</li>\n<li>Release unnecessary memory in a timely manner, such as calling autoreleasepool to release it after using a large memory object.</li>\n<li>Reduce object creation. Object pool and other technologies can be used to reuse existing objects rather than frequently creating and destroying objects.</li>\n<li>For large memory objects, lazy-loading and other technologies can be used to load them only when needed to reduce memory usage.</li>\n</ol>\n<h4 id=\"5-“Type-Cast-Exception”or-“Type-Mismatch”\"><a href=\"#5-“Type-Cast-Exception”or-“Type-Mismatch”\" class=\"headerlink\" title=\" 5. “Type Cast Exception”or “Type Mismatch” \"></a><font size=3 color=#4169E1> 5. “Type Cast Exception”or “Type Mismatch” </font></h4><p><strong>Problem analysis：</strong><br>Type Cast Exception or Type Mismatch refers to the exception that occurs during type conversion, leading to application crash. In iOS development, common scenarios include:</p>\n<ol>\n<li>Type mismatch occurs when converting an instance of one type to an instance of another type.</li>\n<li>Type mismatch occurs when converting from AnyObject to a specific type.</li>\n<li>Crash occurs when forcing the unwrapping of an optional type to a non-optional type with a nil value.</li>\n</ol>\n<p><strong>Sample code：</strong>  </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> array: [<span class=\"keyword\">Any</span>] <span class=\"operator\">=</span> [<span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;B&quot;</span>, <span class=\"string\">&quot;C&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> str <span class=\"operator\">=</span> array[<span class=\"number\">0</span>] <span class=\"keyword\">as!</span> <span class=\"type\">Int</span></span><br><span class=\"line\"><span class=\"comment\">//Error: Could not cast value of type &#x27;Swift.String&#x27; (0x7ff8553bc178) to &#x27;Swift.Int&#x27; (0x7ff8553be0e0).</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>Recommended solution:：</strong>  </p>\n<ol>\n<li>Before performing type conversion, check if the object is an instance of the target type using the is keyword.</li>\n<li>Use optional binding to avoid exceptions when typecasting.</li>\n</ol>\n<p>For example, in the above example, the following code can be used for improvement:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> array: [<span class=\"keyword\">Any</span>] <span class=\"operator\">=</span> [<span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;B&quot;</span>, <span class=\"string\">&quot;C&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> obj <span class=\"operator\">=</span> array[<span class=\"number\">0</span>] <span class=\"keyword\">as?</span> <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-Caused-by-Deadlock\"><a href=\"#6-Caused-by-Deadlock\" class=\"headerlink\" title=\" 6. Caused by Deadlock \"></a><font size=3 color=#4169E1> 6. Caused by Deadlock </font></h4><p><strong>Problem analysis：</strong><br>Deadlock refers to a situation where two or more threads are waiting for each other to complete their operations, causing the program to become unresponsive. In iOS, the most common cause of a deadlock is when a synchronous operation is executed on the main thread that waits for another thread to complete, while the other thread is also waiting for the main thread to complete, resulting in a deadlock.</p>\n<p><strong>Sample code：</strong><br>In the following code, when the main thread calls the queue.sync method, it waits for the completion of Block 1. However, Block 1 calls queue.sync again, causing the thread to enter a waiting state. Since Block 2 depends on the thread to release the lock before it can execute, the entire program is in a deadlock state and cannot continue executing.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> queue <span class=\"operator\">=</span> <span class=\"type\">DispatchQueue</span>(label: <span class=\"string\">&quot;com.example.queue&quot;</span>)</span><br><span class=\"line\">queue.sync &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Block 1&quot;</span>)</span><br><span class=\"line\">    queue.sync &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Block 2&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Done&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<img src=\"/assets/iOS/Memory&Performance&Stability/001.png\" class=\"\">\n\n<p><strong>Recommended solution:：</strong> </p>\n<ol>\n<li>Avoid executing long synchronous operations on the main thread, and instead, perform them on a background thread.</li>\n<li>Avoid using synchronous operations that wait for each other on the same queue and use asynchronous operations instead.</li>\n<li>Avoid using synchronous operations on multiple queues that cause deadlocks. Use asynchronous operations instead or use techniques such as dispatch_group to solve the issue.</li>\n</ol>\n<p>In the above example, you can replace the synchronous operations with asynchronous operations, as shown below:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> queue <span class=\"operator\">=</span> <span class=\"type\">DispatchQueue</span>(label: <span class=\"string\">&quot;com.example.queue&quot;</span>)</span><br><span class=\"line\">queue.async &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Block 1&quot;</span>)</span><br><span class=\"line\">    queue.async &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Block 2&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Done&quot;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"7-Caused-by-Stack-Overflow\"><a href=\"#7-Caused-by-Stack-Overflow\" class=\"headerlink\" title=\" 7. Caused by Stack Overflow \"></a><font size=3 color=#4169E1> 7. Caused by Stack Overflow </font></h4><p><strong>Problem analysis：</strong><br>Stack Overflow usually occurs in recursive calls. If the recursion does not have a termination condition or the termination condition is incorrect, the recursion depth will continue to increase until the stack space is exhausted, causing a stack overflow. </p>\n<p>In addition, if one method calls another method, a deep call stack can also cause a stack overflow.         </p>\n<p><strong>Sample code：</strong>  </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">recursiveFunction</span>() &#123;</span><br><span class=\"line\">    recursiveFunction()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">recursiveFunction() </span><br></pre></td></tr></table></figure>\n<p><strong>Recommended solution:：</strong>  </p>\n<ol>\n<li>Optimize algorithms: Optimize recursive algorithms to reduce the depth of the call stack. For example, use iterative instead of recursive algorithms.</li>\n<li>Increase stack space: Increase available stack space by changing the thread stack size or using the dispatch_set_concurrency function of GCD.</li>\n<li>Reduce stack space usage: Reduce stack space usage by reducing the local variables allocated during function calls, reducing nested calls, or using tail recursion and other techniques.</li>\n<li>Use tail recursion: Tail recursion refers to the last operation in a recursive function being a recursive call to itself. In Swift, you can use the @_optimize(speed) and @_optimize(safety) attributes to mark functions so that the compiler can optimize tail recursion.</li>\n<li>Avoid infinite recursion: Ensure that the recursive algorithm has the correct termination condition; otherwise, the recursion depth will increase infinitely, eventually leading to a stack overflow.</li>\n<li>Use data structures with smaller stack space: For large-scale recursive algorithms, data structures with smaller stack space, such as linked lists or queues, can be used.</li>\n</ol>\n<h4 id=\"8-Caused-by-KVO\"><a href=\"#8-Caused-by-KVO\" class=\"headerlink\" title=\" 8. Caused by KVO \"></a><font size=3 color=#4169E1> 8. Caused by KVO </font></h4><p><strong>Problem analysis：</strong><br>KVO (Key-Value Observing) is an observer pattern in the Cocoa framework that allows objects to be notified when the value of another object’s property changes. When using KVO, if observers are not removed in a timely manner or the observer object has already been released, it can cause a crash.<br><strong>Sample code：</strong><br>Omitted.（Objective-C）<br><strong>Recommended solution:：</strong>  </p>\n<ol>\n<li>Remove the observer in a timely manner and ensure the observer object exists.</li>\n<li>Best practices for using KVO:    <ul>\n<li>Use KVO only when necessary to avoid overuse;   </li>\n<li>Use Swift’s Property Observers instead of KVO;  </li>\n<li>Use closures or Notification Center instead of KVO;     </li>\n<li>Use the correct method when removing observers to avoid omissions;  </li>\n<li>Avoid using strings as keyPaths. Instead, use static variables or constants, or use the #keyPath() method introduced in Swift 4 to obtain the keyPath.</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"9-Caused-by-Multi-threaded\"><a href=\"#9-Caused-by-Multi-threaded\" class=\"headerlink\" title=\" 9. Caused by Multi-threaded \"></a><font size=3 color=#4169E1> 9. Caused by Multi-threaded </font></h4><p><strong>Problem analysis：</strong><br>Crashes caused by multi-threading are a common issue in iOS, which may occur in different scenarios. Here are some possible scenarios, sample code, and recommended solutions that may cause multi-threading crashes:</p>\n<ol>\n<li>Multiple threads accessing the same shared data structure or variable without synchronization or locking.</li>\n<li>Using unsafe data structures or APIs in a multi-threaded environment, such as using non-thread-safe mutable collection class Array.</li>\n<li>Calling a long-running operation (such as network requests or I&#x2F;O operations) in a thread, causing the UI thread to be blocked.</li>\n<li>Updating the UI in a sub-thread.</li>\n</ol>\n<p>In general, the crash caused by multi-threading will receive a SIGSEGV signal, indicating that an attempt was made to access memory that was not allocated to oneself or to write data to a memory address without write permission.</p>\n<p><strong>Sample code：</strong><br>The following is a simple sample code that demonstrates the scenarios and issues caused by multi-threading crashes:  </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array <span class=\"operator\">=</span> [<span class=\"type\">Int</span>]()</span><br><span class=\"line\"><span class=\"type\">DispatchQueue</span>.global().async &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">0</span><span class=\"operator\">..&lt;</span><span class=\"number\">100</span> &#123;</span><br><span class=\"line\">        array.append(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">DispatchQueue</span>.global().async &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">100</span><span class=\"operator\">..&lt;</span><span class=\"number\">200</span> &#123;</span><br><span class=\"line\">        array.append(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>After running it, the crash occurs:</p>\n<img src=\"/assets/iOS/Memory&Performance&Stability/002.jpeg\" class=\"\">\n\n<p><strong>Recommended solution:：</strong>  </p>\n<p>Here are three possible recommended solutions that can help you avoid multi-threading crashes:</p>\n<ol>\n<li><p>Use thread-safe data structures or APIs, such as using NSLock or dispatch_semaphore_t to synchronize.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> lock <span class=\"operator\">=</span> <span class=\"type\">NSLock</span>()</span><br><span class=\"line\"><span class=\"type\">DispatchQueue</span>.global().async &#123;</span><br><span class=\"line\">    lock.lock()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">0</span><span class=\"operator\">..&lt;</span><span class=\"number\">100</span> &#123;</span><br><span class=\"line\">        array.append(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    lock.unlock()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">DispatchQueue</span>.global().async &#123;</span><br><span class=\"line\">    lock.lock()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">100</span><span class=\"operator\">..&lt;</span><span class=\"number\">200</span> &#123;</span><br><span class=\"line\">        array.append(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    lock.unlock()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>Use GCD for inter-thread communication and avoid long-running operations on the main thread.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">DispatchQueue</span>.global().async &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> data <span class=\"operator\">=</span> getData() <span class=\"comment\">// long-running operation</span></span><br><span class=\"line\">    <span class=\"type\">DispatchQueue</span>.main.async &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.updateUI(with: data) <span class=\"comment\">// update UI on the main thread</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The above code performs a long-running operation on the background thread and uses GCD to send the result to the main thread to update the UI.</p>\n</li>\n<li><p>Use a serial queue to ensure that operations on the same object are executed in order.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> serialQueue <span class=\"operator\">=</span> <span class=\"type\">DispatchQueue</span>(label: <span class=\"string\">&quot;com.example.serialQueue&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">serialQueue.async &#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.updateUI(with: data1) <span class=\"comment\">// operation 1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">serialQueue.async &#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.updateUI(with: data2) <span class=\"comment\">// operation 2</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"10-Caused-by-Long-connection-of-Socket\"><a href=\"#10-Caused-by-Long-connection-of-Socket\" class=\"headerlink\" title=\" 10. Caused by Long connection of Socket \"></a><font size=3 color=#4169E1> 10. Caused by Long connection of Socket </font></h4><p><strong>Problem analysis：</strong><br>When the server closes a connection, if the client continues to send data, according to the TCP protocol, it will receive an RST response. When the client sends data to this server again, the system will send a SIGPIPE signal to the process, telling the process that the connection has been disconnected and not to write anymore. According to the default signal handling rules, the default action of the SIGPIPE signal is to terminate or exit. Therefore, the client will exit.</p>\n<p><strong>Sample code：</strong>  </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SocketManager</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> inputStream: <span class=\"type\">InputStream</span>?</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> outputStream: <span class=\"type\">OutputStream</span>?</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">let</span> host: <span class=\"type\">String</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;localhost&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">let</span> port: <span class=\"type\">Int</span> <span class=\"operator\">=</span> <span class=\"number\">12345</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">connect</span>() &#123;</span><br><span class=\"line\">        <span class=\"type\">Stream</span>.getStreamsToHost(withName: host, port: port, inputStream: <span class=\"operator\">&amp;</span>inputStream, outputStream: <span class=\"operator\">&amp;</span>outputStream)</span><br><span class=\"line\">        </span><br><span class=\"line\">        inputStream<span class=\"operator\">?</span>.open()</span><br><span class=\"line\">        outputStream<span class=\"operator\">?</span>.open()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">disconnect</span>() &#123;</span><br><span class=\"line\">        inputStream<span class=\"operator\">?</span>.close()</span><br><span class=\"line\">        outputStream<span class=\"operator\">?</span>.close()</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Recommended solution:：</strong><br>Here are three possible recommended solutions to avoid the crash caused by long connections of sockets:</p>\n<p>First, when the application enters the background, immediately close the socket connection:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">applicationWillResignActive</span>(<span class=\"keyword\">_</span> <span class=\"params\">application</span>: <span class=\"type\">UIApplication</span>) &#123;</span><br><span class=\"line\">    socketManager.disconnect()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Second, when using the background running mode in the application, handle the socket connection correctly.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">application</span>(<span class=\"keyword\">_</span> <span class=\"params\">application</span>: <span class=\"type\">UIApplication</span>, <span class=\"params\">performFetchWithCompletionHandler</span> <span class=\"params\">completionHandler</span>: <span class=\"keyword\">@escaping</span> (<span class=\"type\">UIBackgroundFetchResult</span>) -&gt; <span class=\"type\">Void</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> application.backgroundTimeRemaining <span class=\"operator\">&lt;</span> <span class=\"number\">60</span> &#123;</span><br><span class=\"line\">        socketManager.disconnect()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Execute background task here</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>The above code shows that when using Background Fetch, check the remaining background running time of the application, and close the socket connection if it is less than 1 minute.</p>\n<p>Third, use signal(SIGPIPE,SIG_IGN) to hand over SIGPIPE to the system, which sets SIGPIPE to SIG_IGN, making the client not execute the default operation, that is, not to exit.</p>\n<h4 id=\"11-Caused-by-Watch-Dog-Timeout\"><a href=\"#11-Caused-by-Watch-Dog-Timeout\" class=\"headerlink\" title=\" 11. Caused by Watch Dog Timeout \"></a><font size=3 color=#4169E1> 11. Caused by Watch Dog Timeout </font></h4><p><strong>Problem analysis：</strong><br>Watchdog Timeout is a monitoring mechanism built into the iOS system that checks whether the code executed by the application in the main thread exceeds the specified time. If it times out, the system automatically terminates the execution of the application to avoid a poor user experience caused by application freezes.</p>\n<p>Watchdog Timeout typically occurs during time-consuming operations such as network requests, IO operations, and large data processing. If these time-consuming operations are not handled correctly, it is easy to trigger Watchdog Timeout, leading to application crashes.</p>\n<p><strong>Sample code：</strong><br>For example, executing the following code in the main thread may trigger a Watchdog timeout:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">doHeavyWork</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">1</span><span class=\"operator\">...</span><span class=\"number\">1000000000</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// execute a large number of loop operations</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Recommended solution:：</strong><br>First, put time-consuming operations in a separate thread to avoid occupying the main thread for too long, thereby avoiding the occurrence of Watchdog Timeout. You can use GCD or NSOperationQueue to implement this.</p>\n<p>Second, use an asynchronous method to execute time-consuming operations and use an appropriate queue to manage the execution. For example, use DispatchQueue.global() to create a global queue, and then use the async method to asynchronously execute tasks. In addition, you can also use NSOperationQueue to manage tasks.         </p>\n<p>Third, use a timer or RunLoop to periodically execute time-consuming operations, and check whether the time exceeds the Watchdog Timeout setting before execution. If it times out, stop executing and put the task on hold until the next execution cycle.  </p>\n<p>Fourth, if time-consuming operations must be performed in the main thread, you can use NSRunLoop to control the execution time and periodically call the run method to ensure that the Watchdog Timeout setting is not exceeded.</p>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://juejin.cn/post/6844903775203753997\">https://juejin.cn/post/6844903775203753997</a><br>[2] <a href=\"https://juejin.cn/post/6978014329333350430\">https://juejin.cn/post/6978014329333350430</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 5 minutes to finish reading this article.</em></font></p>\n<h4 id=\"1-“Unrecognized-selector-sent-to-instance”\"><a href=\"#1-“Unrecognized-selector-sent-to-instance”\" class=\"headerlink\" title=\" 1. “Unrecognized selector sent to instance” \"></a><font size=3 color=#4169E1> 1. “Unrecognized selector sent to instance” </font></h4><p><strong>Problem analysis：</strong><br>“unrecognized selector sent to instance” is an Objective-C exception that indicates an attempt to call a method or message that does not exist. This exception usually occurs when: </p>\n<ul>\n<li>When using the performSelector: method, the specified method does not exist; </li>\n<li>When using KVO (key Value observation), the observed property does not exist; </li>\n<li>When using NSNotificationCenter, the monitored event does not exist; </li>\n<li>The specified method is not present when using NSInvocation (message invocation); </li>\n<li>When extending a class with a Category, methods are implemented directly in the implementation file instead of being declared in the header file;<br>And so on.</li>\n</ul>\n<p><strong>Sample code：</strong></p>\n<details>\n<summary>Objective-C</summary>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@interface</span> <span class=\"type\">MyClass</span> : <span class=\"type\">NSObject</span></span><br><span class=\"line\"><span class=\"operator\">-</span> (void)doSomething;</span><br><span class=\"line\"><span class=\"meta\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@implementation</span> <span class=\"type\">MyClass</span></span><br><span class=\"line\"><span class=\"meta\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@interface</span> <span class=\"type\">MyOtherClass</span> : <span class=\"type\">NSObject</span></span><br><span class=\"line\"><span class=\"meta\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@implementation</span> <span class=\"type\">MyOtherClass</span></span><br><span class=\"line\"><span class=\"operator\">-</span> (void)doSomethingElse &#123;</span><br><span class=\"line\">    <span class=\"type\">NSLog</span>(@<span class=\"string\">&quot;Doing something else...&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, const char <span class=\"operator\">*</span> argv[]) &#123;</span><br><span class=\"line\">    <span class=\"meta\">@autoreleasepool</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">MyClass</span> <span class=\"operator\">*</span>object <span class=\"operator\">=</span> [[<span class=\"type\">MyClass</span> alloc] <span class=\"keyword\">init</span>];</span><br><span class=\"line\">        <span class=\"comment\">// unrecognized selector sent to instance</span></span><br><span class=\"line\">        [object performSelector:<span class=\"meta\">@selector</span>(doSomethingElse)]; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</details>\n\n<p><strong>Recommended solution:：</strong>     </p>\n<ul>\n<li>Use the “respondsToSelector” judgment before calling, or use ProtocolKit in Release mode to add a default implementation to the protocol to prevent crashes, and turn off the default implementation in Debug mode.</li>\n<li>Take advantage of the dynamic nature of OC and use several methods of message forwarding to underwrite the process.</li>\n</ul>\n<h4 id=\"2-“EXC-BAD-ACCESS”\"><a href=\"#2-“EXC-BAD-ACCESS”\" class=\"headerlink\" title=\" 2. “EXC_BAD_ACCESS” \"></a><font size=3 color=#4169E1> 2. “EXC_BAD_ACCESS” </font></h4><p><strong>Problem analysis：</strong><br>There are many reasons for the problem:</p>\n<ul>\n<li>Occurrence of hanging pointers (null pointers, wild pointers)</li>\n<li>Objects are not initialized</li>\n<li>The accessed object is freed</li>\n<li>Access to out-of-bounds collection elements<br>etc.</li>\n</ul>\n<p><strong>Sample code：</strong><br>Omitted.<br><strong>Recommended solution:：</strong>   </p>\n<ol>\n<li>turn on zombie mode in Debug phase and turn off zombie mode in Release.  </li>\n<li>use Xcode’s Address Sanitizer to check address access out of bounds.  </li>\n<li>remember to initialize when creating objects.  </li>\n<li>use the correct modifier for the object’s attributes (should use strong&#x2F;weak, misused assign).   </li>\n<li>call block and other objects before the time to make a judgment.</li>\n</ol>\n<h4 id=\"3-Caused-by-Collection-Related\"><a href=\"#3-Caused-by-Collection-Related\" class=\"headerlink\" title=\" 3. Caused by Collection Related \"></a><font size=3 color=#4169E1> 3. Caused by Collection Related </font></h4><p><strong>Problem analysis：</strong><br>There are also many scenarios that lead to Crash.   </p>\n<ol>\n<li>Array out-of-bounds, where the access subscript is greater than the number of arrays.   </li>\n<li>Adding empty data to the array.     </li>\n<li>Multi-threaded environment, a thread is reading, a thread is removing.        </li>\n<li>Multi-threaded operation of variable arrays (expansion of arrays, access to zombie objects).</li>\n</ol>\n<p><strong>Sample code：</strong>  </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Accessing an array out of bounds will cause a crash</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> array <span class=\"operator\">=</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> item <span class=\"operator\">=</span> array[<span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Forcibly unwrapping an optional type and it&#x27;s value is nil will cause a crash</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> dict: [<span class=\"type\">String</span>: <span class=\"type\">String</span>?] <span class=\"operator\">=</span> [<span class=\"string\">&quot;key1&quot;</span>: <span class=\"string\">&quot;value1&quot;</span>, <span class=\"string\">&quot;key2&quot;</span>: <span class=\"string\">&quot;value2&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> value <span class=\"operator\">=</span> dict[<span class=\"string\">&quot;key1&quot;</span>]<span class=\"operator\">!</span> </span><br></pre></td></tr></table></figure>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Forcibly unwrapping an optional type and it&#x27;s value is nil will cause a crash</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"keyword\">set</span>: <span class=\"type\">Set</span>&lt;<span class=\"type\">String</span>?&gt; <span class=\"operator\">=</span> [<span class=\"string\">&quot;value1&quot;</span>, <span class=\"string\">&quot;value2&quot;</span>, <span class=\"literal\">nil</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> value <span class=\"operator\">=</span> <span class=\"keyword\">set</span>.first<span class=\"operator\">!</span>  </span><br></pre></td></tr></table></figure>\n\n<p><strong>Recommended solution:：</strong>  </p>\n<ol>\n<li>When using dictionaries and sets, check whether the keys and values are nil (use guard, if let, and other syntax to avoid crashes caused by forced unwrapping);</li>\n<li>Use extensions to override original methods and perform checks internally;</li>\n<li>In Objective-C, use Runtime mechanism to replace original methods with custom secure methods;</li>\n<li>When performing multi-threaded operations on arrays, ensure the atomicity of read and write operations, such as locking or other protective measures.</li>\n</ol>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Use the safe subscript extension provided by Swift to avoid accessing an array out of bounds.</span></span><br><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">Collection</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">subscript</span>(<span class=\"params\">safe</span> <span class=\"params\">index</span>: <span class=\"type\">Index</span>) -&gt; <span class=\"type\">Element</span>? &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> indices.contains(index) <span class=\"operator\">?</span> <span class=\"keyword\">self</span>[index] : <span class=\"literal\">nil</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> array <span class=\"operator\">=</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> item <span class=\"operator\">=</span> array[safe: <span class=\"number\">3</span>] <span class=\"comment\">//It will not cause a crash, and the resulting value will be nil.</span></span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"4-“Out-of-Memory”\"><a href=\"#4-“Out-of-Memory”\" class=\"headerlink\" title=\" 4. “Out of Memory” \"></a><font size=3 color=#4169E1> 4. “Out of Memory” </font></h4><p><strong>Problem analysis：</strong><br>In iOS applications, if the application allocates too much memory and causes the system to run out of memory, an OOM error will occur. Each application on an iOS device has its own memory limit. When an application needs to allocate more memory, if there is not enough available memory, the system will automatically trigger an OOM error, terminate the application, and release it from memory.</p>\n<p>The causes of OOM errors may include:</p>\n<ol>\n<li>The application tries to allocate a large amount of memory when there is not enough memory available.</li>\n<li>Memory leaks in the application that cause high memory usage.</li>\n<li>The application’s memory usage is not compatible with system resources, resulting in high memory usage, etc.</li>\n</ol>\n<p><strong>Sample code：</strong>  </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array <span class=\"operator\">=</span> [<span class=\"type\">Int</span>]()</span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">true</span> &#123;</span><br><span class=\"line\">    array.append(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Recommended solution:：</strong>  </p>\n<p>To avoid OOM errors, the following measures can be taken:</p>\n<ol>\n<li>Use appropriate data structures to avoid unnecessary memory usage.</li>\n<li>Debug memory leaks.</li>\n<li>Release unnecessary memory in a timely manner, such as calling autoreleasepool to release it after using a large memory object.</li>\n<li>Reduce object creation. Object pool and other technologies can be used to reuse existing objects rather than frequently creating and destroying objects.</li>\n<li>For large memory objects, lazy-loading and other technologies can be used to load them only when needed to reduce memory usage.</li>\n</ol>\n<h4 id=\"5-“Type-Cast-Exception”or-“Type-Mismatch”\"><a href=\"#5-“Type-Cast-Exception”or-“Type-Mismatch”\" class=\"headerlink\" title=\" 5. “Type Cast Exception”or “Type Mismatch” \"></a><font size=3 color=#4169E1> 5. “Type Cast Exception”or “Type Mismatch” </font></h4><p><strong>Problem analysis：</strong><br>Type Cast Exception or Type Mismatch refers to the exception that occurs during type conversion, leading to application crash. In iOS development, common scenarios include:</p>\n<ol>\n<li>Type mismatch occurs when converting an instance of one type to an instance of another type.</li>\n<li>Type mismatch occurs when converting from AnyObject to a specific type.</li>\n<li>Crash occurs when forcing the unwrapping of an optional type to a non-optional type with a nil value.</li>\n</ol>\n<p><strong>Sample code：</strong>  </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> array: [<span class=\"keyword\">Any</span>] <span class=\"operator\">=</span> [<span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;B&quot;</span>, <span class=\"string\">&quot;C&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> str <span class=\"operator\">=</span> array[<span class=\"number\">0</span>] <span class=\"keyword\">as!</span> <span class=\"type\">Int</span></span><br><span class=\"line\"><span class=\"comment\">//Error: Could not cast value of type &#x27;Swift.String&#x27; (0x7ff8553bc178) to &#x27;Swift.Int&#x27; (0x7ff8553be0e0).</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>Recommended solution:：</strong>  </p>\n<ol>\n<li>Before performing type conversion, check if the object is an instance of the target type using the is keyword.</li>\n<li>Use optional binding to avoid exceptions when typecasting.</li>\n</ol>\n<p>For example, in the above example, the following code can be used for improvement:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> array: [<span class=\"keyword\">Any</span>] <span class=\"operator\">=</span> [<span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;B&quot;</span>, <span class=\"string\">&quot;C&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> obj <span class=\"operator\">=</span> array[<span class=\"number\">0</span>] <span class=\"keyword\">as?</span> <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-Caused-by-Deadlock\"><a href=\"#6-Caused-by-Deadlock\" class=\"headerlink\" title=\" 6. Caused by Deadlock \"></a><font size=3 color=#4169E1> 6. Caused by Deadlock </font></h4><p><strong>Problem analysis：</strong><br>Deadlock refers to a situation where two or more threads are waiting for each other to complete their operations, causing the program to become unresponsive. In iOS, the most common cause of a deadlock is when a synchronous operation is executed on the main thread that waits for another thread to complete, while the other thread is also waiting for the main thread to complete, resulting in a deadlock.</p>\n<p><strong>Sample code：</strong><br>In the following code, when the main thread calls the queue.sync method, it waits for the completion of Block 1. However, Block 1 calls queue.sync again, causing the thread to enter a waiting state. Since Block 2 depends on the thread to release the lock before it can execute, the entire program is in a deadlock state and cannot continue executing.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> queue <span class=\"operator\">=</span> <span class=\"type\">DispatchQueue</span>(label: <span class=\"string\">&quot;com.example.queue&quot;</span>)</span><br><span class=\"line\">queue.sync &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Block 1&quot;</span>)</span><br><span class=\"line\">    queue.sync &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Block 2&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Done&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<img src=\"/assets/iOS/Memory&Performance&Stability/001.png\" class=\"\">\n\n<p><strong>Recommended solution:：</strong> </p>\n<ol>\n<li>Avoid executing long synchronous operations on the main thread, and instead, perform them on a background thread.</li>\n<li>Avoid using synchronous operations that wait for each other on the same queue and use asynchronous operations instead.</li>\n<li>Avoid using synchronous operations on multiple queues that cause deadlocks. Use asynchronous operations instead or use techniques such as dispatch_group to solve the issue.</li>\n</ol>\n<p>In the above example, you can replace the synchronous operations with asynchronous operations, as shown below:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> queue <span class=\"operator\">=</span> <span class=\"type\">DispatchQueue</span>(label: <span class=\"string\">&quot;com.example.queue&quot;</span>)</span><br><span class=\"line\">queue.async &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Block 1&quot;</span>)</span><br><span class=\"line\">    queue.async &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Block 2&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Done&quot;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"7-Caused-by-Stack-Overflow\"><a href=\"#7-Caused-by-Stack-Overflow\" class=\"headerlink\" title=\" 7. Caused by Stack Overflow \"></a><font size=3 color=#4169E1> 7. Caused by Stack Overflow </font></h4><p><strong>Problem analysis：</strong><br>Stack Overflow usually occurs in recursive calls. If the recursion does not have a termination condition or the termination condition is incorrect, the recursion depth will continue to increase until the stack space is exhausted, causing a stack overflow. </p>\n<p>In addition, if one method calls another method, a deep call stack can also cause a stack overflow.         </p>\n<p><strong>Sample code：</strong>  </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">recursiveFunction</span>() &#123;</span><br><span class=\"line\">    recursiveFunction()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">recursiveFunction() </span><br></pre></td></tr></table></figure>\n<p><strong>Recommended solution:：</strong>  </p>\n<ol>\n<li>Optimize algorithms: Optimize recursive algorithms to reduce the depth of the call stack. For example, use iterative instead of recursive algorithms.</li>\n<li>Increase stack space: Increase available stack space by changing the thread stack size or using the dispatch_set_concurrency function of GCD.</li>\n<li>Reduce stack space usage: Reduce stack space usage by reducing the local variables allocated during function calls, reducing nested calls, or using tail recursion and other techniques.</li>\n<li>Use tail recursion: Tail recursion refers to the last operation in a recursive function being a recursive call to itself. In Swift, you can use the @_optimize(speed) and @_optimize(safety) attributes to mark functions so that the compiler can optimize tail recursion.</li>\n<li>Avoid infinite recursion: Ensure that the recursive algorithm has the correct termination condition; otherwise, the recursion depth will increase infinitely, eventually leading to a stack overflow.</li>\n<li>Use data structures with smaller stack space: For large-scale recursive algorithms, data structures with smaller stack space, such as linked lists or queues, can be used.</li>\n</ol>\n<h4 id=\"8-Caused-by-KVO\"><a href=\"#8-Caused-by-KVO\" class=\"headerlink\" title=\" 8. Caused by KVO \"></a><font size=3 color=#4169E1> 8. Caused by KVO </font></h4><p><strong>Problem analysis：</strong><br>KVO (Key-Value Observing) is an observer pattern in the Cocoa framework that allows objects to be notified when the value of another object’s property changes. When using KVO, if observers are not removed in a timely manner or the observer object has already been released, it can cause a crash.<br><strong>Sample code：</strong><br>Omitted.（Objective-C）<br><strong>Recommended solution:：</strong>  </p>\n<ol>\n<li>Remove the observer in a timely manner and ensure the observer object exists.</li>\n<li>Best practices for using KVO:    <ul>\n<li>Use KVO only when necessary to avoid overuse;   </li>\n<li>Use Swift’s Property Observers instead of KVO;  </li>\n<li>Use closures or Notification Center instead of KVO;     </li>\n<li>Use the correct method when removing observers to avoid omissions;  </li>\n<li>Avoid using strings as keyPaths. Instead, use static variables or constants, or use the #keyPath() method introduced in Swift 4 to obtain the keyPath.</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"9-Caused-by-Multi-threaded\"><a href=\"#9-Caused-by-Multi-threaded\" class=\"headerlink\" title=\" 9. Caused by Multi-threaded \"></a><font size=3 color=#4169E1> 9. Caused by Multi-threaded </font></h4><p><strong>Problem analysis：</strong><br>Crashes caused by multi-threading are a common issue in iOS, which may occur in different scenarios. Here are some possible scenarios, sample code, and recommended solutions that may cause multi-threading crashes:</p>\n<ol>\n<li>Multiple threads accessing the same shared data structure or variable without synchronization or locking.</li>\n<li>Using unsafe data structures or APIs in a multi-threaded environment, such as using non-thread-safe mutable collection class Array.</li>\n<li>Calling a long-running operation (such as network requests or I&#x2F;O operations) in a thread, causing the UI thread to be blocked.</li>\n<li>Updating the UI in a sub-thread.</li>\n</ol>\n<p>In general, the crash caused by multi-threading will receive a SIGSEGV signal, indicating that an attempt was made to access memory that was not allocated to oneself or to write data to a memory address without write permission.</p>\n<p><strong>Sample code：</strong><br>The following is a simple sample code that demonstrates the scenarios and issues caused by multi-threading crashes:  </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array <span class=\"operator\">=</span> [<span class=\"type\">Int</span>]()</span><br><span class=\"line\"><span class=\"type\">DispatchQueue</span>.global().async &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">0</span><span class=\"operator\">..&lt;</span><span class=\"number\">100</span> &#123;</span><br><span class=\"line\">        array.append(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">DispatchQueue</span>.global().async &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">100</span><span class=\"operator\">..&lt;</span><span class=\"number\">200</span> &#123;</span><br><span class=\"line\">        array.append(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>After running it, the crash occurs:</p>\n<img src=\"/assets/iOS/Memory&Performance&Stability/002.jpeg\" class=\"\">\n\n<p><strong>Recommended solution:：</strong>  </p>\n<p>Here are three possible recommended solutions that can help you avoid multi-threading crashes:</p>\n<ol>\n<li><p>Use thread-safe data structures or APIs, such as using NSLock or dispatch_semaphore_t to synchronize.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> lock <span class=\"operator\">=</span> <span class=\"type\">NSLock</span>()</span><br><span class=\"line\"><span class=\"type\">DispatchQueue</span>.global().async &#123;</span><br><span class=\"line\">    lock.lock()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">0</span><span class=\"operator\">..&lt;</span><span class=\"number\">100</span> &#123;</span><br><span class=\"line\">        array.append(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    lock.unlock()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">DispatchQueue</span>.global().async &#123;</span><br><span class=\"line\">    lock.lock()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">100</span><span class=\"operator\">..&lt;</span><span class=\"number\">200</span> &#123;</span><br><span class=\"line\">        array.append(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    lock.unlock()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>Use GCD for inter-thread communication and avoid long-running operations on the main thread.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">DispatchQueue</span>.global().async &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> data <span class=\"operator\">=</span> getData() <span class=\"comment\">// long-running operation</span></span><br><span class=\"line\">    <span class=\"type\">DispatchQueue</span>.main.async &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.updateUI(with: data) <span class=\"comment\">// update UI on the main thread</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The above code performs a long-running operation on the background thread and uses GCD to send the result to the main thread to update the UI.</p>\n</li>\n<li><p>Use a serial queue to ensure that operations on the same object are executed in order.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> serialQueue <span class=\"operator\">=</span> <span class=\"type\">DispatchQueue</span>(label: <span class=\"string\">&quot;com.example.serialQueue&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">serialQueue.async &#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.updateUI(with: data1) <span class=\"comment\">// operation 1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">serialQueue.async &#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.updateUI(with: data2) <span class=\"comment\">// operation 2</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"10-Caused-by-Long-connection-of-Socket\"><a href=\"#10-Caused-by-Long-connection-of-Socket\" class=\"headerlink\" title=\" 10. Caused by Long connection of Socket \"></a><font size=3 color=#4169E1> 10. Caused by Long connection of Socket </font></h4><p><strong>Problem analysis：</strong><br>When the server closes a connection, if the client continues to send data, according to the TCP protocol, it will receive an RST response. When the client sends data to this server again, the system will send a SIGPIPE signal to the process, telling the process that the connection has been disconnected and not to write anymore. According to the default signal handling rules, the default action of the SIGPIPE signal is to terminate or exit. Therefore, the client will exit.</p>\n<p><strong>Sample code：</strong>  </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SocketManager</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> inputStream: <span class=\"type\">InputStream</span>?</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> outputStream: <span class=\"type\">OutputStream</span>?</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">let</span> host: <span class=\"type\">String</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;localhost&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">let</span> port: <span class=\"type\">Int</span> <span class=\"operator\">=</span> <span class=\"number\">12345</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">connect</span>() &#123;</span><br><span class=\"line\">        <span class=\"type\">Stream</span>.getStreamsToHost(withName: host, port: port, inputStream: <span class=\"operator\">&amp;</span>inputStream, outputStream: <span class=\"operator\">&amp;</span>outputStream)</span><br><span class=\"line\">        </span><br><span class=\"line\">        inputStream<span class=\"operator\">?</span>.open()</span><br><span class=\"line\">        outputStream<span class=\"operator\">?</span>.open()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">disconnect</span>() &#123;</span><br><span class=\"line\">        inputStream<span class=\"operator\">?</span>.close()</span><br><span class=\"line\">        outputStream<span class=\"operator\">?</span>.close()</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Recommended solution:：</strong><br>Here are three possible recommended solutions to avoid the crash caused by long connections of sockets:</p>\n<p>First, when the application enters the background, immediately close the socket connection:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">applicationWillResignActive</span>(<span class=\"keyword\">_</span> <span class=\"params\">application</span>: <span class=\"type\">UIApplication</span>) &#123;</span><br><span class=\"line\">    socketManager.disconnect()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Second, when using the background running mode in the application, handle the socket connection correctly.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">application</span>(<span class=\"keyword\">_</span> <span class=\"params\">application</span>: <span class=\"type\">UIApplication</span>, <span class=\"params\">performFetchWithCompletionHandler</span> <span class=\"params\">completionHandler</span>: <span class=\"keyword\">@escaping</span> (<span class=\"type\">UIBackgroundFetchResult</span>) -&gt; <span class=\"type\">Void</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> application.backgroundTimeRemaining <span class=\"operator\">&lt;</span> <span class=\"number\">60</span> &#123;</span><br><span class=\"line\">        socketManager.disconnect()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Execute background task here</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>The above code shows that when using Background Fetch, check the remaining background running time of the application, and close the socket connection if it is less than 1 minute.</p>\n<p>Third, use signal(SIGPIPE,SIG_IGN) to hand over SIGPIPE to the system, which sets SIGPIPE to SIG_IGN, making the client not execute the default operation, that is, not to exit.</p>\n<h4 id=\"11-Caused-by-Watch-Dog-Timeout\"><a href=\"#11-Caused-by-Watch-Dog-Timeout\" class=\"headerlink\" title=\" 11. Caused by Watch Dog Timeout \"></a><font size=3 color=#4169E1> 11. Caused by Watch Dog Timeout </font></h4><p><strong>Problem analysis：</strong><br>Watchdog Timeout is a monitoring mechanism built into the iOS system that checks whether the code executed by the application in the main thread exceeds the specified time. If it times out, the system automatically terminates the execution of the application to avoid a poor user experience caused by application freezes.</p>\n<p>Watchdog Timeout typically occurs during time-consuming operations such as network requests, IO operations, and large data processing. If these time-consuming operations are not handled correctly, it is easy to trigger Watchdog Timeout, leading to application crashes.</p>\n<p><strong>Sample code：</strong><br>For example, executing the following code in the main thread may trigger a Watchdog timeout:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">doHeavyWork</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">1</span><span class=\"operator\">...</span><span class=\"number\">1000000000</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// execute a large number of loop operations</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Recommended solution:：</strong><br>First, put time-consuming operations in a separate thread to avoid occupying the main thread for too long, thereby avoiding the occurrence of Watchdog Timeout. You can use GCD or NSOperationQueue to implement this.</p>\n<p>Second, use an asynchronous method to execute time-consuming operations and use an appropriate queue to manage the execution. For example, use DispatchQueue.global() to create a global queue, and then use the async method to asynchronously execute tasks. In addition, you can also use NSOperationQueue to manage tasks.         </p>\n<p>Third, use a timer or RunLoop to periodically execute time-consuming operations, and check whether the time exceeds the Watchdog Timeout setting before execution. If it times out, stop executing and put the task on hold until the next execution cycle.  </p>\n<p>Fourth, if time-consuming operations must be performed in the main thread, you can use NSRunLoop to control the execution time and periodically call the run method to ensure that the Watchdog Timeout setting is not exceeded.</p>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://juejin.cn/post/6844903775203753997\">https://juejin.cn/post/6844903775203753997</a><br>[2] <a href=\"https://juejin.cn/post/6978014329333350430\">https://juejin.cn/post/6978014329333350430</a></p>\n"},{"title":"00. An investigation of Lost location Issue","date":"2023-08-31T12:58:00.000Z","_content":"\n<font color=gray size=2>*It will take about 5 minutes to finish reading this article.*</font>\n\n#### <font size=4 color=#4169E1>1. Background</font> \nThis is really one of the issues that impressed me. I'm recording it here specifically because I find it quite fascinating.   \n\nAt that time I was a leader of iOS team based on Oversea business at Meituan. The business was brand new, I was one of the few guys who were familiar all Oversea business. One day, Our data engineer came to me, and told me that the location data of our business had a high lost rate to 30%, even to 50% in some special areas. According to past experience, it may be normal for this loss rate to be between 10% and 15%, so it was too high.\n\nAs we all kown, without the correct location information(City or region information), we could not offer different  business data to the accurate areas we wanted. Soon I realized  it was a serious problem for our business, and I reported it to our technical boss. We decided that until the problem was resolved, the users that lost location information could only read the default H5 page we offered.\n\n#### <font size=4 color=#4169E1>2. Investigation process</font>   \n\nThen I began to investigate the issue and tried to optimize it. Later, I gradually discovered that the issues involved in this process are very complicated, involving many links and requiring a lot of cross-team cooperation.\n\nThe process of getting location data in iOS is as follows:   \n\n(1) iOS gets the longitude and latitude by calling the system callback function in CLLocationManagerDelegate.\n```Swift \n- (void)locationManager:(CLLocationManager *)manager didUpdateLocations:(NSArray *)locations {\n    CLLocation *location = [locations firstObject]; \n    CLLocationCoordinate2D coordinate = location.coordinate; \n    NSLog(@\"Longitude: %f, Latitude: %f\",coordinate.longitude,coordinate.latitude);\n\n}\n```\nAt this step, although there could have been failures with a rate of 5% more or less, what we could do was limited, not only because it was a system-level method, but more importantly, this was the code that existed in the basic library. Any modification to it would have affected the entire company's business.\n\n(2) After getting the latitude and longitude, we used them and some other information (IP address, etc.) to request a back-end interface( we can call it requestPosition), which will return the corresponding location information, which is a basic public interface for all the company's business.\n\nThen by querying the interface logs and the database logs of other businesses, I found that the failure rate of this interface for overseas business was very high, but the failure rate for domestic business was normal. I don't know why. After all, all businesses use the same interface. \n\nBut even though I didn't know why, I pushed for something: to create the interface in a way that in overseas business scenarios, if it failed to acquire location information, it would trigger a retry mechanism, meaning that if the first attempt failed, the subsequent attempt would be made up to 2 times until it succeeded(The actual logic may be more complex.).\n\nAfter doing this optimization, I again verified the location information data for the business and found that the data had improved, but the improvement was limited, about 20% to 25% from the original average of 30% to 40%.\n\n(3) I escalated the issue after that because I felt that it might be beyond our capabilities on the mobile side, and I organized multiple meetings with multiple server-side teams to discuss the issue.  \n\nIn the discussion with the server side I found:\nBecause the company's network services are basically customized http protocol, take the network long connection, with the help of strong domestic server resources, domestic users benefit from this way, the network's end-to-end success rate is very high (long connection that is, through the heartbeat message way to keep alive).\n\nHowever, due to the lack of sufficient server resources in foreign countries, coupled with the network conditions in some foreign regions were not very good, at this time, the end-to-end success rate of the network long connection was very low, and may be even lower than the short link method. We originally wanted to change the overseas business network request to short connection, but after discussion, we felt that this is not a fundamental solution. \n\nLater, I learned that through the efforts of our big boss, we were able to help our overseas business deploy a dedicated server resource in Hong Kong to support the overseas business. Later this data was optimized and finally reached the ideal zone.\n\nSo far, this problem was solved.\n \n\n#### <font size=4 color=#4169E1>3. Review and summary</font> \n\nIn this process, I had to constantly review other teams' code, and communicated with the basic service team many times on how to optimize the code.  \n\nI needed to apply permissions to various databases and learned to write various SQL languages to query data. Query server-side logs, query other business data repeatedly for comparison. \n\nDuring this period, I also needed to discuss and communicate with multiple server teams and multiple data teams.\n\nAlthough this work could be beyond the ability and responsibility of an iOS developer, and the process was full of challenges, But in retrospect, I still benefited a lot from it and learned a lot of knowledge beyond iOS.","source":"_posts/iOS/05. Projects & Issues/00.  An investigation of Lost location Issue.md","raw":"---\ntitle: 00. An investigation of Lost location Issue \ndate: 2023-08-31 14:58:00\ncategories: \n- [iOS, 05. Projects & Issues]\ntags:\n- latitude \n- longitude\n---\n\n<font color=gray size=2>*It will take about 5 minutes to finish reading this article.*</font>\n\n#### <font size=4 color=#4169E1>1. Background</font> \nThis is really one of the issues that impressed me. I'm recording it here specifically because I find it quite fascinating.   \n\nAt that time I was a leader of iOS team based on Oversea business at Meituan. The business was brand new, I was one of the few guys who were familiar all Oversea business. One day, Our data engineer came to me, and told me that the location data of our business had a high lost rate to 30%, even to 50% in some special areas. According to past experience, it may be normal for this loss rate to be between 10% and 15%, so it was too high.\n\nAs we all kown, without the correct location information(City or region information), we could not offer different  business data to the accurate areas we wanted. Soon I realized  it was a serious problem for our business, and I reported it to our technical boss. We decided that until the problem was resolved, the users that lost location information could only read the default H5 page we offered.\n\n#### <font size=4 color=#4169E1>2. Investigation process</font>   \n\nThen I began to investigate the issue and tried to optimize it. Later, I gradually discovered that the issues involved in this process are very complicated, involving many links and requiring a lot of cross-team cooperation.\n\nThe process of getting location data in iOS is as follows:   \n\n(1) iOS gets the longitude and latitude by calling the system callback function in CLLocationManagerDelegate.\n```Swift \n- (void)locationManager:(CLLocationManager *)manager didUpdateLocations:(NSArray *)locations {\n    CLLocation *location = [locations firstObject]; \n    CLLocationCoordinate2D coordinate = location.coordinate; \n    NSLog(@\"Longitude: %f, Latitude: %f\",coordinate.longitude,coordinate.latitude);\n\n}\n```\nAt this step, although there could have been failures with a rate of 5% more or less, what we could do was limited, not only because it was a system-level method, but more importantly, this was the code that existed in the basic library. Any modification to it would have affected the entire company's business.\n\n(2) After getting the latitude and longitude, we used them and some other information (IP address, etc.) to request a back-end interface( we can call it requestPosition), which will return the corresponding location information, which is a basic public interface for all the company's business.\n\nThen by querying the interface logs and the database logs of other businesses, I found that the failure rate of this interface for overseas business was very high, but the failure rate for domestic business was normal. I don't know why. After all, all businesses use the same interface. \n\nBut even though I didn't know why, I pushed for something: to create the interface in a way that in overseas business scenarios, if it failed to acquire location information, it would trigger a retry mechanism, meaning that if the first attempt failed, the subsequent attempt would be made up to 2 times until it succeeded(The actual logic may be more complex.).\n\nAfter doing this optimization, I again verified the location information data for the business and found that the data had improved, but the improvement was limited, about 20% to 25% from the original average of 30% to 40%.\n\n(3) I escalated the issue after that because I felt that it might be beyond our capabilities on the mobile side, and I organized multiple meetings with multiple server-side teams to discuss the issue.  \n\nIn the discussion with the server side I found:\nBecause the company's network services are basically customized http protocol, take the network long connection, with the help of strong domestic server resources, domestic users benefit from this way, the network's end-to-end success rate is very high (long connection that is, through the heartbeat message way to keep alive).\n\nHowever, due to the lack of sufficient server resources in foreign countries, coupled with the network conditions in some foreign regions were not very good, at this time, the end-to-end success rate of the network long connection was very low, and may be even lower than the short link method. We originally wanted to change the overseas business network request to short connection, but after discussion, we felt that this is not a fundamental solution. \n\nLater, I learned that through the efforts of our big boss, we were able to help our overseas business deploy a dedicated server resource in Hong Kong to support the overseas business. Later this data was optimized and finally reached the ideal zone.\n\nSo far, this problem was solved.\n \n\n#### <font size=4 color=#4169E1>3. Review and summary</font> \n\nIn this process, I had to constantly review other teams' code, and communicated with the basic service team many times on how to optimize the code.  \n\nI needed to apply permissions to various databases and learned to write various SQL languages to query data. Query server-side logs, query other business data repeatedly for comparison. \n\nDuring this period, I also needed to discuss and communicate with multiple server teams and multiple data teams.\n\nAlthough this work could be beyond the ability and responsibility of an iOS developer, and the process was full of challenges, But in retrospect, I still benefited a lot from it and learned a lot of knowledge beyond iOS.","slug":"iOS/05. Projects & Issues/00.  An investigation of Lost location Issue","published":1,"updated":"2023-08-31T20:44:04.773Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clm7w97rx002pkb0mg3pj2ygo","content":"<p><font color=gray size=2><em>It will take about 5 minutes to finish reading this article.</em></font></p>\n<h4 id=\"1-Background\"><a href=\"#1-Background\" class=\"headerlink\" title=\"1. Background\"></a><font size=4 color=#4169E1>1. Background</font></h4><p>This is really one of the issues that impressed me. I’m recording it here specifically because I find it quite fascinating.   </p>\n<p>At that time I was a leader of iOS team based on Oversea business at Meituan. The business was brand new, I was one of the few guys who were familiar all Oversea business. One day, Our data engineer came to me, and told me that the location data of our business had a high lost rate to 30%, even to 50% in some special areas. According to past experience, it may be normal for this loss rate to be between 10% and 15%, so it was too high.</p>\n<p>As we all kown, without the correct location information(City or region information), we could not offer different  business data to the accurate areas we wanted. Soon I realized  it was a serious problem for our business, and I reported it to our technical boss. We decided that until the problem was resolved, the users that lost location information could only read the default H5 page we offered.</p>\n<h4 id=\"2-Investigation-process\"><a href=\"#2-Investigation-process\" class=\"headerlink\" title=\"2. Investigation process\"></a><font size=4 color=#4169E1>2. Investigation process</font></h4><p>Then I began to investigate the issue and tried to optimize it. Later, I gradually discovered that the issues involved in this process are very complicated, involving many links and requiring a lot of cross-team cooperation.</p>\n<p>The process of getting location data in iOS is as follows:   </p>\n<p>(1) iOS gets the longitude and latitude by calling the system callback function in CLLocationManagerDelegate.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">-</span> (void)locationManager:(<span class=\"type\">CLLocationManager</span> <span class=\"operator\">*</span>)manager didUpdateLocations:(<span class=\"type\">NSArray</span> <span class=\"operator\">*</span>)locations &#123;</span><br><span class=\"line\">    <span class=\"type\">CLLocation</span> <span class=\"operator\">*</span>location <span class=\"operator\">=</span> [locations firstObject]; </span><br><span class=\"line\">    <span class=\"type\">CLLocationCoordinate2D</span> coordinate <span class=\"operator\">=</span> location.coordinate; </span><br><span class=\"line\">    <span class=\"type\">NSLog</span>(@<span class=\"string\">&quot;Longitude: %f, Latitude: %f&quot;</span>,coordinate.longitude,coordinate.latitude);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>At this step, although there could have been failures with a rate of 5% more or less, what we could do was limited, not only because it was a system-level method, but more importantly, this was the code that existed in the basic library. Any modification to it would have affected the entire company’s business.</p>\n<p>(2) After getting the latitude and longitude, we used them and some other information (IP address, etc.) to request a back-end interface( we can call it requestPosition), which will return the corresponding location information, which is a basic public interface for all the company’s business.</p>\n<p>Then by querying the interface logs and the database logs of other businesses, I found that the failure rate of this interface for overseas business was very high, but the failure rate for domestic business was normal. I don’t know why. After all, all businesses use the same interface. </p>\n<p>But even though I didn’t know why, I pushed for something: to create the interface in a way that in overseas business scenarios, if it failed to acquire location information, it would trigger a retry mechanism, meaning that if the first attempt failed, the subsequent attempt would be made up to 2 times until it succeeded(The actual logic may be more complex.).</p>\n<p>After doing this optimization, I again verified the location information data for the business and found that the data had improved, but the improvement was limited, about 20% to 25% from the original average of 30% to 40%.</p>\n<p>(3) I escalated the issue after that because I felt that it might be beyond our capabilities on the mobile side, and I organized multiple meetings with multiple server-side teams to discuss the issue.  </p>\n<p>In the discussion with the server side I found:<br>Because the company’s network services are basically customized http protocol, take the network long connection, with the help of strong domestic server resources, domestic users benefit from this way, the network’s end-to-end success rate is very high (long connection that is, through the heartbeat message way to keep alive).</p>\n<p>However, due to the lack of sufficient server resources in foreign countries, coupled with the network conditions in some foreign regions were not very good, at this time, the end-to-end success rate of the network long connection was very low, and may be even lower than the short link method. We originally wanted to change the overseas business network request to short connection, but after discussion, we felt that this is not a fundamental solution. </p>\n<p>Later, I learned that through the efforts of our big boss, we were able to help our overseas business deploy a dedicated server resource in Hong Kong to support the overseas business. Later this data was optimized and finally reached the ideal zone.</p>\n<p>So far, this problem was solved.</p>\n<h4 id=\"3-Review-and-summary\"><a href=\"#3-Review-and-summary\" class=\"headerlink\" title=\"3. Review and summary\"></a><font size=4 color=#4169E1>3. Review and summary</font></h4><p>In this process, I had to constantly review other teams’ code, and communicated with the basic service team many times on how to optimize the code.  </p>\n<p>I needed to apply permissions to various databases and learned to write various SQL languages to query data. Query server-side logs, query other business data repeatedly for comparison. </p>\n<p>During this period, I also needed to discuss and communicate with multiple server teams and multiple data teams.</p>\n<p>Although this work could be beyond the ability and responsibility of an iOS developer, and the process was full of challenges, But in retrospect, I still benefited a lot from it and learned a lot of knowledge beyond iOS.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 5 minutes to finish reading this article.</em></font></p>\n<h4 id=\"1-Background\"><a href=\"#1-Background\" class=\"headerlink\" title=\"1. Background\"></a><font size=4 color=#4169E1>1. Background</font></h4><p>This is really one of the issues that impressed me. I’m recording it here specifically because I find it quite fascinating.   </p>\n<p>At that time I was a leader of iOS team based on Oversea business at Meituan. The business was brand new, I was one of the few guys who were familiar all Oversea business. One day, Our data engineer came to me, and told me that the location data of our business had a high lost rate to 30%, even to 50% in some special areas. According to past experience, it may be normal for this loss rate to be between 10% and 15%, so it was too high.</p>\n<p>As we all kown, without the correct location information(City or region information), we could not offer different  business data to the accurate areas we wanted. Soon I realized  it was a serious problem for our business, and I reported it to our technical boss. We decided that until the problem was resolved, the users that lost location information could only read the default H5 page we offered.</p>\n<h4 id=\"2-Investigation-process\"><a href=\"#2-Investigation-process\" class=\"headerlink\" title=\"2. Investigation process\"></a><font size=4 color=#4169E1>2. Investigation process</font></h4><p>Then I began to investigate the issue and tried to optimize it. Later, I gradually discovered that the issues involved in this process are very complicated, involving many links and requiring a lot of cross-team cooperation.</p>\n<p>The process of getting location data in iOS is as follows:   </p>\n<p>(1) iOS gets the longitude and latitude by calling the system callback function in CLLocationManagerDelegate.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">-</span> (void)locationManager:(<span class=\"type\">CLLocationManager</span> <span class=\"operator\">*</span>)manager didUpdateLocations:(<span class=\"type\">NSArray</span> <span class=\"operator\">*</span>)locations &#123;</span><br><span class=\"line\">    <span class=\"type\">CLLocation</span> <span class=\"operator\">*</span>location <span class=\"operator\">=</span> [locations firstObject]; </span><br><span class=\"line\">    <span class=\"type\">CLLocationCoordinate2D</span> coordinate <span class=\"operator\">=</span> location.coordinate; </span><br><span class=\"line\">    <span class=\"type\">NSLog</span>(@<span class=\"string\">&quot;Longitude: %f, Latitude: %f&quot;</span>,coordinate.longitude,coordinate.latitude);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>At this step, although there could have been failures with a rate of 5% more or less, what we could do was limited, not only because it was a system-level method, but more importantly, this was the code that existed in the basic library. Any modification to it would have affected the entire company’s business.</p>\n<p>(2) After getting the latitude and longitude, we used them and some other information (IP address, etc.) to request a back-end interface( we can call it requestPosition), which will return the corresponding location information, which is a basic public interface for all the company’s business.</p>\n<p>Then by querying the interface logs and the database logs of other businesses, I found that the failure rate of this interface for overseas business was very high, but the failure rate for domestic business was normal. I don’t know why. After all, all businesses use the same interface. </p>\n<p>But even though I didn’t know why, I pushed for something: to create the interface in a way that in overseas business scenarios, if it failed to acquire location information, it would trigger a retry mechanism, meaning that if the first attempt failed, the subsequent attempt would be made up to 2 times until it succeeded(The actual logic may be more complex.).</p>\n<p>After doing this optimization, I again verified the location information data for the business and found that the data had improved, but the improvement was limited, about 20% to 25% from the original average of 30% to 40%.</p>\n<p>(3) I escalated the issue after that because I felt that it might be beyond our capabilities on the mobile side, and I organized multiple meetings with multiple server-side teams to discuss the issue.  </p>\n<p>In the discussion with the server side I found:<br>Because the company’s network services are basically customized http protocol, take the network long connection, with the help of strong domestic server resources, domestic users benefit from this way, the network’s end-to-end success rate is very high (long connection that is, through the heartbeat message way to keep alive).</p>\n<p>However, due to the lack of sufficient server resources in foreign countries, coupled with the network conditions in some foreign regions were not very good, at this time, the end-to-end success rate of the network long connection was very low, and may be even lower than the short link method. We originally wanted to change the overseas business network request to short connection, but after discussion, we felt that this is not a fundamental solution. </p>\n<p>Later, I learned that through the efforts of our big boss, we were able to help our overseas business deploy a dedicated server resource in Hong Kong to support the overseas business. Later this data was optimized and finally reached the ideal zone.</p>\n<p>So far, this problem was solved.</p>\n<h4 id=\"3-Review-and-summary\"><a href=\"#3-Review-and-summary\" class=\"headerlink\" title=\"3. Review and summary\"></a><font size=4 color=#4169E1>3. Review and summary</font></h4><p>In this process, I had to constantly review other teams’ code, and communicated with the basic service team many times on how to optimize the code.  </p>\n<p>I needed to apply permissions to various databases and learned to write various SQL languages to query data. Query server-side logs, query other business data repeatedly for comparison. </p>\n<p>During this period, I also needed to discuss and communicate with multiple server teams and multiple data teams.</p>\n<p>Although this work could be beyond the ability and responsibility of an iOS developer, and the process was full of challenges, But in retrospect, I still benefited a lot from it and learned a lot of knowledge beyond iOS.</p>\n"},{"title":"01. How to use iOS Geofencing in your business","date":"2023-09-02T10:00:00.000Z","_content":"\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nHere is a summary of all the possible reasons for publishing failure in Hexo.\n\n#### <font size=3 color=#4169E1>1. Header information is incorrect</font> \nPlease strictly follow the header format:\n```Swift \n---\ntitle: 00. Article publishing failure problem summary\ndate: 2023-01-15 14:00:00\ncategories: \n- [Others, 00. others]\ntags:\n- hexo\n- configuration\n- tool\n---\n```\n**Note:**   \n**There are no empty lines in the first row.**   \n**All the keywords 'title','date','categories','tags' must be in lower case.**\n\n#### <font size=3 color=#4169E1>2. Picture does not show</font> \n\nThe correct image format is as follows: \n{% img /assets/Demo/wallpaper-2311325.jpg %}    \n{% img /assets/Demo/wallpaper-878514.jpg %}\n\n\n#### <font size=3 color=#4169E1>3. Change the font</font> \nOn the basis of this article below:       \nhttps://blog.csdn.net/Reinhart_L/article/details/122587975       \n(1) Enter. / themes/cactus/source/CSS / _variables styl, can change the font;   \n(2) The available fonts are in . /themes/cactus/source/lib/, cactus comes with only two kinds of 'meslo-LG' and 'vazir-font', you can download them yourself if you need.\n\n\n\n#### <font size=3 color=gray>*Reference*</font>\n[1] [Why should we avoid using closures in Swift structs?](https://ohmyswift.com/blog/2020/01/10/why-should-we-avoid-using-closures-in-swift-structs/)  \n[2] https://github.com/probberechts/hexo-theme-cactus\n","source":"_posts/iOS/05. Projects & Issues/01. How to use iOS Geofencing in your business.md","raw":"---\ntitle: 01. How to use iOS Geofencing in your business\ndate: 2023-09-02 12:00:00\ncategories: \n- [iOS, 05. Projects & Issues]\ntags:\n- hexo\n- configuration\n- tool\n---\n\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nHere is a summary of all the possible reasons for publishing failure in Hexo.\n\n#### <font size=3 color=#4169E1>1. Header information is incorrect</font> \nPlease strictly follow the header format:\n```Swift \n---\ntitle: 00. Article publishing failure problem summary\ndate: 2023-01-15 14:00:00\ncategories: \n- [Others, 00. others]\ntags:\n- hexo\n- configuration\n- tool\n---\n```\n**Note:**   \n**There are no empty lines in the first row.**   \n**All the keywords 'title','date','categories','tags' must be in lower case.**\n\n#### <font size=3 color=#4169E1>2. Picture does not show</font> \n\nThe correct image format is as follows: \n{% img /assets/Demo/wallpaper-2311325.jpg %}    \n{% img /assets/Demo/wallpaper-878514.jpg %}\n\n\n#### <font size=3 color=#4169E1>3. Change the font</font> \nOn the basis of this article below:       \nhttps://blog.csdn.net/Reinhart_L/article/details/122587975       \n(1) Enter. / themes/cactus/source/CSS / _variables styl, can change the font;   \n(2) The available fonts are in . /themes/cactus/source/lib/, cactus comes with only two kinds of 'meslo-LG' and 'vazir-font', you can download them yourself if you need.\n\n\n\n#### <font size=3 color=gray>*Reference*</font>\n[1] [Why should we avoid using closures in Swift structs?](https://ohmyswift.com/blog/2020/01/10/why-should-we-avoid-using-closures-in-swift-structs/)  \n[2] https://github.com/probberechts/hexo-theme-cactus\n","slug":"iOS/05. Projects & Issues/01. How to use iOS Geofencing in your business","published":1,"updated":"2023-09-02T10:21:02.958Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clm7w97ry002tkb0m0nbm58mt","content":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>Here is a summary of all the possible reasons for publishing failure in Hexo.</p>\n<h4 id=\"1-Header-information-is-incorrect\"><a href=\"#1-Header-information-is-incorrect\" class=\"headerlink\" title=\"1. Header information is incorrect\"></a><font size=3 color=#4169E1>1. Header information is incorrect</font></h4><p>Please strictly follow the header format:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">---</span></span><br><span class=\"line\">title: <span class=\"number\">00</span>. <span class=\"type\">Article</span> publishing failure problem summary</span><br><span class=\"line\">date: <span class=\"number\">2023</span><span class=\"operator\">-</span><span class=\"number\">01</span><span class=\"operator\">-</span><span class=\"number\">15</span> <span class=\"number\">14</span>:<span class=\"number\">00</span>:<span class=\"number\">00</span></span><br><span class=\"line\">categories: </span><br><span class=\"line\"><span class=\"operator\">-</span> [<span class=\"type\">Others</span>, <span class=\"number\">00</span>. others]</span><br><span class=\"line\">tags:</span><br><span class=\"line\"><span class=\"operator\">-</span> hexo</span><br><span class=\"line\"><span class=\"operator\">-</span> configuration</span><br><span class=\"line\"><span class=\"operator\">-</span> tool</span><br><span class=\"line\"><span class=\"operator\">---</span></span><br></pre></td></tr></table></figure>\n<p><strong>Note:</strong><br><strong>There are no empty lines in the first row.</strong><br><strong>All the keywords ‘title’,’date’,’categories’,’tags’ must be in lower case.</strong></p>\n<h4 id=\"2-Picture-does-not-show\"><a href=\"#2-Picture-does-not-show\" class=\"headerlink\" title=\"2. Picture does not show\"></a><font size=3 color=#4169E1>2. Picture does not show</font></h4><p>The correct image format is as follows: </p>\n<img src=\"/assets/Demo/wallpaper-2311325.jpg\" class=\"\">    \n<img src=\"/assets/Demo/wallpaper-878514.jpg\" class=\"\">\n\n\n<h4 id=\"3-Change-the-font\"><a href=\"#3-Change-the-font\" class=\"headerlink\" title=\"3. Change the font\"></a><font size=3 color=#4169E1>3. Change the font</font></h4><p>On the basis of this article below:<br><a href=\"https://blog.csdn.net/Reinhart_L/article/details/122587975\">https://blog.csdn.net/Reinhart_L/article/details/122587975</a><br>(1) Enter. &#x2F; themes&#x2F;cactus&#x2F;source&#x2F;CSS &#x2F; _variables styl, can change the font;<br>(2) The available fonts are in . &#x2F;themes&#x2F;cactus&#x2F;source&#x2F;lib&#x2F;, cactus comes with only two kinds of ‘meslo-LG’ and ‘vazir-font’, you can download them yourself if you need.</p>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://ohmyswift.com/blog/2020/01/10/why-should-we-avoid-using-closures-in-swift-structs/\">Why should we avoid using closures in Swift structs?</a><br>[2] <a href=\"https://github.com/probberechts/hexo-theme-cactus\">https://github.com/probberechts/hexo-theme-cactus</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>Here is a summary of all the possible reasons for publishing failure in Hexo.</p>\n<h4 id=\"1-Header-information-is-incorrect\"><a href=\"#1-Header-information-is-incorrect\" class=\"headerlink\" title=\"1. Header information is incorrect\"></a><font size=3 color=#4169E1>1. Header information is incorrect</font></h4><p>Please strictly follow the header format:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">---</span></span><br><span class=\"line\">title: <span class=\"number\">00</span>. <span class=\"type\">Article</span> publishing failure problem summary</span><br><span class=\"line\">date: <span class=\"number\">2023</span><span class=\"operator\">-</span><span class=\"number\">01</span><span class=\"operator\">-</span><span class=\"number\">15</span> <span class=\"number\">14</span>:<span class=\"number\">00</span>:<span class=\"number\">00</span></span><br><span class=\"line\">categories: </span><br><span class=\"line\"><span class=\"operator\">-</span> [<span class=\"type\">Others</span>, <span class=\"number\">00</span>. others]</span><br><span class=\"line\">tags:</span><br><span class=\"line\"><span class=\"operator\">-</span> hexo</span><br><span class=\"line\"><span class=\"operator\">-</span> configuration</span><br><span class=\"line\"><span class=\"operator\">-</span> tool</span><br><span class=\"line\"><span class=\"operator\">---</span></span><br></pre></td></tr></table></figure>\n<p><strong>Note:</strong><br><strong>There are no empty lines in the first row.</strong><br><strong>All the keywords ‘title’,’date’,’categories’,’tags’ must be in lower case.</strong></p>\n<h4 id=\"2-Picture-does-not-show\"><a href=\"#2-Picture-does-not-show\" class=\"headerlink\" title=\"2. Picture does not show\"></a><font size=3 color=#4169E1>2. Picture does not show</font></h4><p>The correct image format is as follows: </p>\n<img src=\"/assets/Demo/wallpaper-2311325.jpg\" class=\"\">    \n<img src=\"/assets/Demo/wallpaper-878514.jpg\" class=\"\">\n\n\n<h4 id=\"3-Change-the-font\"><a href=\"#3-Change-the-font\" class=\"headerlink\" title=\"3. Change the font\"></a><font size=3 color=#4169E1>3. Change the font</font></h4><p>On the basis of this article below:<br><a href=\"https://blog.csdn.net/Reinhart_L/article/details/122587975\">https://blog.csdn.net/Reinhart_L/article/details/122587975</a><br>(1) Enter. &#x2F; themes&#x2F;cactus&#x2F;source&#x2F;CSS &#x2F; _variables styl, can change the font;<br>(2) The available fonts are in . &#x2F;themes&#x2F;cactus&#x2F;source&#x2F;lib&#x2F;, cactus comes with only two kinds of ‘meslo-LG’ and ‘vazir-font’, you can download them yourself if you need.</p>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://ohmyswift.com/blog/2020/01/10/why-should-we-avoid-using-closures-in-swift-structs/\">Why should we avoid using closures in Swift structs?</a><br>[2] <a href=\"https://github.com/probberechts/hexo-theme-cactus\">https://github.com/probberechts/hexo-theme-cactus</a></p>\n"},{"title":"00. Article publishing failure problem summary","date":"2023-01-15T13:00:00.000Z","_content":"\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nHere is a summary of all the possible reasons for publishing failure in Hexo.\n\n#### <font size=3 color=#4169E1>1. Header information is incorrect</font> \nPlease strictly follow the header format:\n```Swift \n---\ntitle: 00. Article publishing failure problem summary\ndate: 2023-01-15 14:00:00\ncategories: \n- [Others, 00. others]\ntags:\n- hexo\n- configuration\n- tool\n---\n```\n**Note:**   \n**There are no empty lines in the first row.**   \n**All the keywords 'title','date','categories','tags' must be in lower case.**\n\n#### <font size=3 color=#4169E1>2. Picture does not show</font> \n\nThe correct image format is as follows: \n{% img /assets/Demo/wallpaper-2311325.jpg %}    \n{% img /assets/Demo/wallpaper-878514.jpg %}\n\n\n#### <font size=3 color=#4169E1>3. Change the font</font> \nOn the basis of this article below:       \nhttps://blog.csdn.net/Reinhart_L/article/details/122587975       \n(1) Enter. / themes/cactus/source/CSS / _variables styl, can change the font;   \n(2) The available fonts are in . /themes/cactus/source/lib/, cactus comes with only two kinds of 'meslo-LG' and 'vazir-font', you can download them yourself if you need.\n\n\n\n#### <font size=3 color=gray>*Reference*</font>\n[1] [Why should we avoid using closures in Swift structs?](https://ohmyswift.com/blog/2020/01/10/why-should-we-avoid-using-closures-in-swift-structs/)  \n[2] https://github.com/probberechts/hexo-theme-cactus\n","source":"_posts/iOS/05. Projects & Issues/02. Design of a Document Similarity Comparison Tool.md","raw":"---\ntitle: 00. Article publishing failure problem summary\ndate: 2023-01-15 14:00:00\ncategories: \n- [Others]\ntags:\n- hexo\n- configuration\n- tool\n---\n\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nHere is a summary of all the possible reasons for publishing failure in Hexo.\n\n#### <font size=3 color=#4169E1>1. Header information is incorrect</font> \nPlease strictly follow the header format:\n```Swift \n---\ntitle: 00. Article publishing failure problem summary\ndate: 2023-01-15 14:00:00\ncategories: \n- [Others, 00. others]\ntags:\n- hexo\n- configuration\n- tool\n---\n```\n**Note:**   \n**There are no empty lines in the first row.**   \n**All the keywords 'title','date','categories','tags' must be in lower case.**\n\n#### <font size=3 color=#4169E1>2. Picture does not show</font> \n\nThe correct image format is as follows: \n{% img /assets/Demo/wallpaper-2311325.jpg %}    \n{% img /assets/Demo/wallpaper-878514.jpg %}\n\n\n#### <font size=3 color=#4169E1>3. Change the font</font> \nOn the basis of this article below:       \nhttps://blog.csdn.net/Reinhart_L/article/details/122587975       \n(1) Enter. / themes/cactus/source/CSS / _variables styl, can change the font;   \n(2) The available fonts are in . /themes/cactus/source/lib/, cactus comes with only two kinds of 'meslo-LG' and 'vazir-font', you can download them yourself if you need.\n\n\n\n#### <font size=3 color=gray>*Reference*</font>\n[1] [Why should we avoid using closures in Swift structs?](https://ohmyswift.com/blog/2020/01/10/why-should-we-avoid-using-closures-in-swift-structs/)  \n[2] https://github.com/probberechts/hexo-theme-cactus\n","slug":"iOS/05. Projects & Issues/02. Design of a Document Similarity Comparison Tool","published":1,"updated":"2023-08-23T19:22:57.927Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clm7w97rz002vkb0m5fs2gabj","content":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>Here is a summary of all the possible reasons for publishing failure in Hexo.</p>\n<h4 id=\"1-Header-information-is-incorrect\"><a href=\"#1-Header-information-is-incorrect\" class=\"headerlink\" title=\"1. Header information is incorrect\"></a><font size=3 color=#4169E1>1. Header information is incorrect</font></h4><p>Please strictly follow the header format:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">---</span></span><br><span class=\"line\">title: <span class=\"number\">00</span>. <span class=\"type\">Article</span> publishing failure problem summary</span><br><span class=\"line\">date: <span class=\"number\">2023</span><span class=\"operator\">-</span><span class=\"number\">01</span><span class=\"operator\">-</span><span class=\"number\">15</span> <span class=\"number\">14</span>:<span class=\"number\">00</span>:<span class=\"number\">00</span></span><br><span class=\"line\">categories: </span><br><span class=\"line\"><span class=\"operator\">-</span> [<span class=\"type\">Others</span>, <span class=\"number\">00</span>. others]</span><br><span class=\"line\">tags:</span><br><span class=\"line\"><span class=\"operator\">-</span> hexo</span><br><span class=\"line\"><span class=\"operator\">-</span> configuration</span><br><span class=\"line\"><span class=\"operator\">-</span> tool</span><br><span class=\"line\"><span class=\"operator\">---</span></span><br></pre></td></tr></table></figure>\n<p><strong>Note:</strong><br><strong>There are no empty lines in the first row.</strong><br><strong>All the keywords ‘title’,’date’,’categories’,’tags’ must be in lower case.</strong></p>\n<h4 id=\"2-Picture-does-not-show\"><a href=\"#2-Picture-does-not-show\" class=\"headerlink\" title=\"2. Picture does not show\"></a><font size=3 color=#4169E1>2. Picture does not show</font></h4><p>The correct image format is as follows: </p>\n<img src=\"/assets/Demo/wallpaper-2311325.jpg\" class=\"\">    \n<img src=\"/assets/Demo/wallpaper-878514.jpg\" class=\"\">\n\n\n<h4 id=\"3-Change-the-font\"><a href=\"#3-Change-the-font\" class=\"headerlink\" title=\"3. Change the font\"></a><font size=3 color=#4169E1>3. Change the font</font></h4><p>On the basis of this article below:<br><a href=\"https://blog.csdn.net/Reinhart_L/article/details/122587975\">https://blog.csdn.net/Reinhart_L/article/details/122587975</a><br>(1) Enter. &#x2F; themes&#x2F;cactus&#x2F;source&#x2F;CSS &#x2F; _variables styl, can change the font;<br>(2) The available fonts are in . &#x2F;themes&#x2F;cactus&#x2F;source&#x2F;lib&#x2F;, cactus comes with only two kinds of ‘meslo-LG’ and ‘vazir-font’, you can download them yourself if you need.</p>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://ohmyswift.com/blog/2020/01/10/why-should-we-avoid-using-closures-in-swift-structs/\">Why should we avoid using closures in Swift structs?</a><br>[2] <a href=\"https://github.com/probberechts/hexo-theme-cactus\">https://github.com/probberechts/hexo-theme-cactus</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>Here is a summary of all the possible reasons for publishing failure in Hexo.</p>\n<h4 id=\"1-Header-information-is-incorrect\"><a href=\"#1-Header-information-is-incorrect\" class=\"headerlink\" title=\"1. Header information is incorrect\"></a><font size=3 color=#4169E1>1. Header information is incorrect</font></h4><p>Please strictly follow the header format:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">---</span></span><br><span class=\"line\">title: <span class=\"number\">00</span>. <span class=\"type\">Article</span> publishing failure problem summary</span><br><span class=\"line\">date: <span class=\"number\">2023</span><span class=\"operator\">-</span><span class=\"number\">01</span><span class=\"operator\">-</span><span class=\"number\">15</span> <span class=\"number\">14</span>:<span class=\"number\">00</span>:<span class=\"number\">00</span></span><br><span class=\"line\">categories: </span><br><span class=\"line\"><span class=\"operator\">-</span> [<span class=\"type\">Others</span>, <span class=\"number\">00</span>. others]</span><br><span class=\"line\">tags:</span><br><span class=\"line\"><span class=\"operator\">-</span> hexo</span><br><span class=\"line\"><span class=\"operator\">-</span> configuration</span><br><span class=\"line\"><span class=\"operator\">-</span> tool</span><br><span class=\"line\"><span class=\"operator\">---</span></span><br></pre></td></tr></table></figure>\n<p><strong>Note:</strong><br><strong>There are no empty lines in the first row.</strong><br><strong>All the keywords ‘title’,’date’,’categories’,’tags’ must be in lower case.</strong></p>\n<h4 id=\"2-Picture-does-not-show\"><a href=\"#2-Picture-does-not-show\" class=\"headerlink\" title=\"2. Picture does not show\"></a><font size=3 color=#4169E1>2. Picture does not show</font></h4><p>The correct image format is as follows: </p>\n<img src=\"/assets/Demo/wallpaper-2311325.jpg\" class=\"\">    \n<img src=\"/assets/Demo/wallpaper-878514.jpg\" class=\"\">\n\n\n<h4 id=\"3-Change-the-font\"><a href=\"#3-Change-the-font\" class=\"headerlink\" title=\"3. Change the font\"></a><font size=3 color=#4169E1>3. Change the font</font></h4><p>On the basis of this article below:<br><a href=\"https://blog.csdn.net/Reinhart_L/article/details/122587975\">https://blog.csdn.net/Reinhart_L/article/details/122587975</a><br>(1) Enter. &#x2F; themes&#x2F;cactus&#x2F;source&#x2F;CSS &#x2F; _variables styl, can change the font;<br>(2) The available fonts are in . &#x2F;themes&#x2F;cactus&#x2F;source&#x2F;lib&#x2F;, cactus comes with only two kinds of ‘meslo-LG’ and ‘vazir-font’, you can download them yourself if you need.</p>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://ohmyswift.com/blog/2020/01/10/why-should-we-avoid-using-closures-in-swift-structs/\">Why should we avoid using closures in Swift structs?</a><br>[2] <a href=\"https://github.com/probberechts/hexo-theme-cactus\">https://github.com/probberechts/hexo-theme-cactus</a></p>\n"},{"title":"00. Article publishing failure problem summary","date":"2023-01-15T13:00:00.000Z","_content":"\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nHere is a summary of all the possible reasons for publishing failure in Hexo.\n\n#### <font size=3 color=#4169E1>1. Header information is incorrect</font> \nPlease strictly follow the header format:\n```Swift \n---\ntitle: 00. Article publishing failure problem summary\ndate: 2023-01-15 14:00:00\ncategories: \n- [Others, 00. others]\ntags:\n- hexo\n- configuration\n- tool\n---\n```\n**Note:**   \n**There are no empty lines in the first row.**   \n**All the keywords 'title','date','categories','tags' must be in lower case.**\n\n#### <font size=3 color=#4169E1>2. Picture does not show</font> \n\nThe correct image format is as follows: \n{% img /assets/Demo/wallpaper-2311325.jpg %}    \n{% img /assets/Demo/wallpaper-878514.jpg %}\n\n\n#### <font size=3 color=#4169E1>3. Change the font</font> \nOn the basis of this article below:       \nhttps://blog.csdn.net/Reinhart_L/article/details/122587975       \n(1) Enter. / themes/cactus/source/CSS / _variables styl, can change the font;   \n(2) The available fonts are in . /themes/cactus/source/lib/, cactus comes with only two kinds of 'meslo-LG' and 'vazir-font', you can download them yourself if you need.\n\n\n\n#### <font size=3 color=gray>*Reference*</font>\n[1] [Why should we avoid using closures in Swift structs?](https://ohmyswift.com/blog/2020/01/10/why-should-we-avoid-using-closures-in-swift-structs/)  \n[2] https://github.com/probberechts/hexo-theme-cactus\n","source":"_posts/iOS/05. Projects & Issues/03. A modular page-building solution based on UIView..md","raw":"---\ntitle: 00. Article publishing failure problem summary\ndate: 2023-01-15 14:00:00\ncategories: \n- [Others]\ntags:\n- hexo\n- configuration\n- tool\n---\n\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nHere is a summary of all the possible reasons for publishing failure in Hexo.\n\n#### <font size=3 color=#4169E1>1. Header information is incorrect</font> \nPlease strictly follow the header format:\n```Swift \n---\ntitle: 00. Article publishing failure problem summary\ndate: 2023-01-15 14:00:00\ncategories: \n- [Others, 00. others]\ntags:\n- hexo\n- configuration\n- tool\n---\n```\n**Note:**   \n**There are no empty lines in the first row.**   \n**All the keywords 'title','date','categories','tags' must be in lower case.**\n\n#### <font size=3 color=#4169E1>2. Picture does not show</font> \n\nThe correct image format is as follows: \n{% img /assets/Demo/wallpaper-2311325.jpg %}    \n{% img /assets/Demo/wallpaper-878514.jpg %}\n\n\n#### <font size=3 color=#4169E1>3. Change the font</font> \nOn the basis of this article below:       \nhttps://blog.csdn.net/Reinhart_L/article/details/122587975       \n(1) Enter. / themes/cactus/source/CSS / _variables styl, can change the font;   \n(2) The available fonts are in . /themes/cactus/source/lib/, cactus comes with only two kinds of 'meslo-LG' and 'vazir-font', you can download them yourself if you need.\n\n\n\n#### <font size=3 color=gray>*Reference*</font>\n[1] [Why should we avoid using closures in Swift structs?](https://ohmyswift.com/blog/2020/01/10/why-should-we-avoid-using-closures-in-swift-structs/)  \n[2] https://github.com/probberechts/hexo-theme-cactus\n","slug":"iOS/05. Projects & Issues/03. A modular page-building solution based on UIView.","published":1,"updated":"2023-08-23T19:22:57.927Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clm7w97s00030kb0m9acs088a","content":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>Here is a summary of all the possible reasons for publishing failure in Hexo.</p>\n<h4 id=\"1-Header-information-is-incorrect\"><a href=\"#1-Header-information-is-incorrect\" class=\"headerlink\" title=\"1. Header information is incorrect\"></a><font size=3 color=#4169E1>1. Header information is incorrect</font></h4><p>Please strictly follow the header format:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">---</span></span><br><span class=\"line\">title: <span class=\"number\">00</span>. <span class=\"type\">Article</span> publishing failure problem summary</span><br><span class=\"line\">date: <span class=\"number\">2023</span><span class=\"operator\">-</span><span class=\"number\">01</span><span class=\"operator\">-</span><span class=\"number\">15</span> <span class=\"number\">14</span>:<span class=\"number\">00</span>:<span class=\"number\">00</span></span><br><span class=\"line\">categories: </span><br><span class=\"line\"><span class=\"operator\">-</span> [<span class=\"type\">Others</span>, <span class=\"number\">00</span>. others]</span><br><span class=\"line\">tags:</span><br><span class=\"line\"><span class=\"operator\">-</span> hexo</span><br><span class=\"line\"><span class=\"operator\">-</span> configuration</span><br><span class=\"line\"><span class=\"operator\">-</span> tool</span><br><span class=\"line\"><span class=\"operator\">---</span></span><br></pre></td></tr></table></figure>\n<p><strong>Note:</strong><br><strong>There are no empty lines in the first row.</strong><br><strong>All the keywords ‘title’,’date’,’categories’,’tags’ must be in lower case.</strong></p>\n<h4 id=\"2-Picture-does-not-show\"><a href=\"#2-Picture-does-not-show\" class=\"headerlink\" title=\"2. Picture does not show\"></a><font size=3 color=#4169E1>2. Picture does not show</font></h4><p>The correct image format is as follows: </p>\n<img src=\"/assets/Demo/wallpaper-2311325.jpg\" class=\"\">    \n<img src=\"/assets/Demo/wallpaper-878514.jpg\" class=\"\">\n\n\n<h4 id=\"3-Change-the-font\"><a href=\"#3-Change-the-font\" class=\"headerlink\" title=\"3. Change the font\"></a><font size=3 color=#4169E1>3. Change the font</font></h4><p>On the basis of this article below:<br><a href=\"https://blog.csdn.net/Reinhart_L/article/details/122587975\">https://blog.csdn.net/Reinhart_L/article/details/122587975</a><br>(1) Enter. &#x2F; themes&#x2F;cactus&#x2F;source&#x2F;CSS &#x2F; _variables styl, can change the font;<br>(2) The available fonts are in . &#x2F;themes&#x2F;cactus&#x2F;source&#x2F;lib&#x2F;, cactus comes with only two kinds of ‘meslo-LG’ and ‘vazir-font’, you can download them yourself if you need.</p>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://ohmyswift.com/blog/2020/01/10/why-should-we-avoid-using-closures-in-swift-structs/\">Why should we avoid using closures in Swift structs?</a><br>[2] <a href=\"https://github.com/probberechts/hexo-theme-cactus\">https://github.com/probberechts/hexo-theme-cactus</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>Here is a summary of all the possible reasons for publishing failure in Hexo.</p>\n<h4 id=\"1-Header-information-is-incorrect\"><a href=\"#1-Header-information-is-incorrect\" class=\"headerlink\" title=\"1. Header information is incorrect\"></a><font size=3 color=#4169E1>1. Header information is incorrect</font></h4><p>Please strictly follow the header format:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">---</span></span><br><span class=\"line\">title: <span class=\"number\">00</span>. <span class=\"type\">Article</span> publishing failure problem summary</span><br><span class=\"line\">date: <span class=\"number\">2023</span><span class=\"operator\">-</span><span class=\"number\">01</span><span class=\"operator\">-</span><span class=\"number\">15</span> <span class=\"number\">14</span>:<span class=\"number\">00</span>:<span class=\"number\">00</span></span><br><span class=\"line\">categories: </span><br><span class=\"line\"><span class=\"operator\">-</span> [<span class=\"type\">Others</span>, <span class=\"number\">00</span>. others]</span><br><span class=\"line\">tags:</span><br><span class=\"line\"><span class=\"operator\">-</span> hexo</span><br><span class=\"line\"><span class=\"operator\">-</span> configuration</span><br><span class=\"line\"><span class=\"operator\">-</span> tool</span><br><span class=\"line\"><span class=\"operator\">---</span></span><br></pre></td></tr></table></figure>\n<p><strong>Note:</strong><br><strong>There are no empty lines in the first row.</strong><br><strong>All the keywords ‘title’,’date’,’categories’,’tags’ must be in lower case.</strong></p>\n<h4 id=\"2-Picture-does-not-show\"><a href=\"#2-Picture-does-not-show\" class=\"headerlink\" title=\"2. Picture does not show\"></a><font size=3 color=#4169E1>2. Picture does not show</font></h4><p>The correct image format is as follows: </p>\n<img src=\"/assets/Demo/wallpaper-2311325.jpg\" class=\"\">    \n<img src=\"/assets/Demo/wallpaper-878514.jpg\" class=\"\">\n\n\n<h4 id=\"3-Change-the-font\"><a href=\"#3-Change-the-font\" class=\"headerlink\" title=\"3. Change the font\"></a><font size=3 color=#4169E1>3. Change the font</font></h4><p>On the basis of this article below:<br><a href=\"https://blog.csdn.net/Reinhart_L/article/details/122587975\">https://blog.csdn.net/Reinhart_L/article/details/122587975</a><br>(1) Enter. &#x2F; themes&#x2F;cactus&#x2F;source&#x2F;CSS &#x2F; _variables styl, can change the font;<br>(2) The available fonts are in . &#x2F;themes&#x2F;cactus&#x2F;source&#x2F;lib&#x2F;, cactus comes with only two kinds of ‘meslo-LG’ and ‘vazir-font’, you can download them yourself if you need.</p>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://ohmyswift.com/blog/2020/01/10/why-should-we-avoid-using-closures-in-swift-structs/\">Why should we avoid using closures in Swift structs?</a><br>[2] <a href=\"https://github.com/probberechts/hexo-theme-cactus\">https://github.com/probberechts/hexo-theme-cactus</a></p>\n"},{"title":"00. Article publishing failure problem summary","date":"2023-01-15T13:00:00.000Z","_content":"\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nHere is a summary of all the possible reasons for publishing failure in Hexo.\n\n#### <font size=3 color=#4169E1>1. Header information is incorrect</font> \nPlease strictly follow the header format:\n```Swift \n---\ntitle: 00. Article publishing failure problem summary\ndate: 2023-01-15 14:00:00\ncategories: \n- [Others, 00. others]\ntags:\n- hexo\n- configuration\n- tool\n---\n```\n**Note:**   \n**There are no empty lines in the first row.**   \n**All the keywords 'title','date','categories','tags' must be in lower case.**\n\n#### <font size=3 color=#4169E1>2. Picture does not show</font> \n\nThe correct image format is as follows: \n{% img /assets/Demo/wallpaper-2311325.jpg %}    \n{% img /assets/Demo/wallpaper-878514.jpg %}\n\n\n#### <font size=3 color=#4169E1>3. Change the font</font> \nOn the basis of this article below:       \nhttps://blog.csdn.net/Reinhart_L/article/details/122587975       \n(1) Enter. / themes/cactus/source/CSS / _variables styl, can change the font;   \n(2) The available fonts are in . /themes/cactus/source/lib/, cactus comes with only two kinds of 'meslo-LG' and 'vazir-font', you can download them yourself if you need.\n\n\n\n#### <font size=3 color=gray>*Reference*</font>\n[1] [Why should we avoid using closures in Swift structs?](https://ohmyswift.com/blog/2020/01/10/why-should-we-avoid-using-closures-in-swift-structs/)  \n[2] https://github.com/probberechts/hexo-theme-cactus\n","source":"_posts/iOS/05. Projects & Issues/04. A page-building solution based on State machines..md","raw":"---\ntitle: 00. Article publishing failure problem summary\ndate: 2023-01-15 14:00:00\ncategories: \n- [Others]\ntags:\n- hexo\n- configuration\n- tool\n---\n\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nHere is a summary of all the possible reasons for publishing failure in Hexo.\n\n#### <font size=3 color=#4169E1>1. Header information is incorrect</font> \nPlease strictly follow the header format:\n```Swift \n---\ntitle: 00. Article publishing failure problem summary\ndate: 2023-01-15 14:00:00\ncategories: \n- [Others, 00. others]\ntags:\n- hexo\n- configuration\n- tool\n---\n```\n**Note:**   \n**There are no empty lines in the first row.**   \n**All the keywords 'title','date','categories','tags' must be in lower case.**\n\n#### <font size=3 color=#4169E1>2. Picture does not show</font> \n\nThe correct image format is as follows: \n{% img /assets/Demo/wallpaper-2311325.jpg %}    \n{% img /assets/Demo/wallpaper-878514.jpg %}\n\n\n#### <font size=3 color=#4169E1>3. Change the font</font> \nOn the basis of this article below:       \nhttps://blog.csdn.net/Reinhart_L/article/details/122587975       \n(1) Enter. / themes/cactus/source/CSS / _variables styl, can change the font;   \n(2) The available fonts are in . /themes/cactus/source/lib/, cactus comes with only two kinds of 'meslo-LG' and 'vazir-font', you can download them yourself if you need.\n\n\n\n#### <font size=3 color=gray>*Reference*</font>\n[1] [Why should we avoid using closures in Swift structs?](https://ohmyswift.com/blog/2020/01/10/why-should-we-avoid-using-closures-in-swift-structs/)  \n[2] https://github.com/probberechts/hexo-theme-cactus\n","slug":"iOS/05. Projects & Issues/04. A page-building solution based on State machines.","published":1,"updated":"2023-08-23T19:22:57.927Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clm7w97s10033kb0m6mevftac","content":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>Here is a summary of all the possible reasons for publishing failure in Hexo.</p>\n<h4 id=\"1-Header-information-is-incorrect\"><a href=\"#1-Header-information-is-incorrect\" class=\"headerlink\" title=\"1. Header information is incorrect\"></a><font size=3 color=#4169E1>1. Header information is incorrect</font></h4><p>Please strictly follow the header format:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">---</span></span><br><span class=\"line\">title: <span class=\"number\">00</span>. <span class=\"type\">Article</span> publishing failure problem summary</span><br><span class=\"line\">date: <span class=\"number\">2023</span><span class=\"operator\">-</span><span class=\"number\">01</span><span class=\"operator\">-</span><span class=\"number\">15</span> <span class=\"number\">14</span>:<span class=\"number\">00</span>:<span class=\"number\">00</span></span><br><span class=\"line\">categories: </span><br><span class=\"line\"><span class=\"operator\">-</span> [<span class=\"type\">Others</span>, <span class=\"number\">00</span>. others]</span><br><span class=\"line\">tags:</span><br><span class=\"line\"><span class=\"operator\">-</span> hexo</span><br><span class=\"line\"><span class=\"operator\">-</span> configuration</span><br><span class=\"line\"><span class=\"operator\">-</span> tool</span><br><span class=\"line\"><span class=\"operator\">---</span></span><br></pre></td></tr></table></figure>\n<p><strong>Note:</strong><br><strong>There are no empty lines in the first row.</strong><br><strong>All the keywords ‘title’,’date’,’categories’,’tags’ must be in lower case.</strong></p>\n<h4 id=\"2-Picture-does-not-show\"><a href=\"#2-Picture-does-not-show\" class=\"headerlink\" title=\"2. Picture does not show\"></a><font size=3 color=#4169E1>2. Picture does not show</font></h4><p>The correct image format is as follows: </p>\n<img src=\"/assets/Demo/wallpaper-2311325.jpg\" class=\"\">    \n<img src=\"/assets/Demo/wallpaper-878514.jpg\" class=\"\">\n\n\n<h4 id=\"3-Change-the-font\"><a href=\"#3-Change-the-font\" class=\"headerlink\" title=\"3. Change the font\"></a><font size=3 color=#4169E1>3. Change the font</font></h4><p>On the basis of this article below:<br><a href=\"https://blog.csdn.net/Reinhart_L/article/details/122587975\">https://blog.csdn.net/Reinhart_L/article/details/122587975</a><br>(1) Enter. &#x2F; themes&#x2F;cactus&#x2F;source&#x2F;CSS &#x2F; _variables styl, can change the font;<br>(2) The available fonts are in . &#x2F;themes&#x2F;cactus&#x2F;source&#x2F;lib&#x2F;, cactus comes with only two kinds of ‘meslo-LG’ and ‘vazir-font’, you can download them yourself if you need.</p>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://ohmyswift.com/blog/2020/01/10/why-should-we-avoid-using-closures-in-swift-structs/\">Why should we avoid using closures in Swift structs?</a><br>[2] <a href=\"https://github.com/probberechts/hexo-theme-cactus\">https://github.com/probberechts/hexo-theme-cactus</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>Here is a summary of all the possible reasons for publishing failure in Hexo.</p>\n<h4 id=\"1-Header-information-is-incorrect\"><a href=\"#1-Header-information-is-incorrect\" class=\"headerlink\" title=\"1. Header information is incorrect\"></a><font size=3 color=#4169E1>1. Header information is incorrect</font></h4><p>Please strictly follow the header format:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">---</span></span><br><span class=\"line\">title: <span class=\"number\">00</span>. <span class=\"type\">Article</span> publishing failure problem summary</span><br><span class=\"line\">date: <span class=\"number\">2023</span><span class=\"operator\">-</span><span class=\"number\">01</span><span class=\"operator\">-</span><span class=\"number\">15</span> <span class=\"number\">14</span>:<span class=\"number\">00</span>:<span class=\"number\">00</span></span><br><span class=\"line\">categories: </span><br><span class=\"line\"><span class=\"operator\">-</span> [<span class=\"type\">Others</span>, <span class=\"number\">00</span>. others]</span><br><span class=\"line\">tags:</span><br><span class=\"line\"><span class=\"operator\">-</span> hexo</span><br><span class=\"line\"><span class=\"operator\">-</span> configuration</span><br><span class=\"line\"><span class=\"operator\">-</span> tool</span><br><span class=\"line\"><span class=\"operator\">---</span></span><br></pre></td></tr></table></figure>\n<p><strong>Note:</strong><br><strong>There are no empty lines in the first row.</strong><br><strong>All the keywords ‘title’,’date’,’categories’,’tags’ must be in lower case.</strong></p>\n<h4 id=\"2-Picture-does-not-show\"><a href=\"#2-Picture-does-not-show\" class=\"headerlink\" title=\"2. Picture does not show\"></a><font size=3 color=#4169E1>2. Picture does not show</font></h4><p>The correct image format is as follows: </p>\n<img src=\"/assets/Demo/wallpaper-2311325.jpg\" class=\"\">    \n<img src=\"/assets/Demo/wallpaper-878514.jpg\" class=\"\">\n\n\n<h4 id=\"3-Change-the-font\"><a href=\"#3-Change-the-font\" class=\"headerlink\" title=\"3. Change the font\"></a><font size=3 color=#4169E1>3. Change the font</font></h4><p>On the basis of this article below:<br><a href=\"https://blog.csdn.net/Reinhart_L/article/details/122587975\">https://blog.csdn.net/Reinhart_L/article/details/122587975</a><br>(1) Enter. &#x2F; themes&#x2F;cactus&#x2F;source&#x2F;CSS &#x2F; _variables styl, can change the font;<br>(2) The available fonts are in . &#x2F;themes&#x2F;cactus&#x2F;source&#x2F;lib&#x2F;, cactus comes with only two kinds of ‘meslo-LG’ and ‘vazir-font’, you can download them yourself if you need.</p>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://ohmyswift.com/blog/2020/01/10/why-should-we-avoid-using-closures-in-swift-structs/\">Why should we avoid using closures in Swift structs?</a><br>[2] <a href=\"https://github.com/probberechts/hexo-theme-cactus\">https://github.com/probberechts/hexo-theme-cactus</a></p>\n"},{"title":"00. Article publishing failure problem summary","date":"2023-01-15T13:00:00.000Z","_content":"\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nHere is a summary of all the possible reasons for publishing failure in Hexo.\n\n#### <font size=3 color=#4169E1>1. Header information is incorrect</font> \nPlease strictly follow the header format:\n```Swift \n---\ntitle: 00. Article publishing failure problem summary\ndate: 2023-01-15 14:00:00\ncategories: \n- [Others, 00. others]\ntags:\n- hexo\n- configuration\n- tool\n---\n```\n**Note:**   \n**There are no empty lines in the first row.**   \n**All the keywords 'title','date','categories','tags' must be in lower case.**\n\n#### <font size=3 color=#4169E1>2. Picture does not show</font> \n\nThe correct image format is as follows: \n{% img /assets/Demo/wallpaper-2311325.jpg %}    \n{% img /assets/Demo/wallpaper-878514.jpg %}\n\n\n#### <font size=3 color=#4169E1>3. Change the font</font> \nOn the basis of this article below:       \nhttps://blog.csdn.net/Reinhart_L/article/details/122587975       \n(1) Enter. / themes/cactus/source/CSS / _variables styl, can change the font;   \n(2) The available fonts are in . /themes/cactus/source/lib/, cactus comes with only two kinds of 'meslo-LG' and 'vazir-font', you can download them yourself if you need.\n\n\n\n#### <font size=3 color=gray>*Reference*</font>\n[1] [Why should we avoid using closures in Swift structs?](https://ohmyswift.com/blog/2020/01/10/why-should-we-avoid-using-closures-in-swift-structs/)  \n[2] https://github.com/probberechts/hexo-theme-cactus\n","source":"_posts/iOS/05. Projects & Issues/05. How to support multi-source configuration in a componentized Pod.md","raw":"---\ntitle: 00. Article publishing failure problem summary\ndate: 2023-01-15 14:00:00\ncategories: \n- [Others]\ntags:\n- hexo\n- configuration\n- tool\n---\n\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nHere is a summary of all the possible reasons for publishing failure in Hexo.\n\n#### <font size=3 color=#4169E1>1. Header information is incorrect</font> \nPlease strictly follow the header format:\n```Swift \n---\ntitle: 00. Article publishing failure problem summary\ndate: 2023-01-15 14:00:00\ncategories: \n- [Others, 00. others]\ntags:\n- hexo\n- configuration\n- tool\n---\n```\n**Note:**   \n**There are no empty lines in the first row.**   \n**All the keywords 'title','date','categories','tags' must be in lower case.**\n\n#### <font size=3 color=#4169E1>2. Picture does not show</font> \n\nThe correct image format is as follows: \n{% img /assets/Demo/wallpaper-2311325.jpg %}    \n{% img /assets/Demo/wallpaper-878514.jpg %}\n\n\n#### <font size=3 color=#4169E1>3. Change the font</font> \nOn the basis of this article below:       \nhttps://blog.csdn.net/Reinhart_L/article/details/122587975       \n(1) Enter. / themes/cactus/source/CSS / _variables styl, can change the font;   \n(2) The available fonts are in . /themes/cactus/source/lib/, cactus comes with only two kinds of 'meslo-LG' and 'vazir-font', you can download them yourself if you need.\n\n\n\n#### <font size=3 color=gray>*Reference*</font>\n[1] [Why should we avoid using closures in Swift structs?](https://ohmyswift.com/blog/2020/01/10/why-should-we-avoid-using-closures-in-swift-structs/)  \n[2] https://github.com/probberechts/hexo-theme-cactus\n","slug":"iOS/05. Projects & Issues/05. How to support multi-source configuration in a componentized Pod","published":1,"updated":"2023-08-23T19:22:57.927Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clm7w97s20037kb0m2itohhqe","content":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>Here is a summary of all the possible reasons for publishing failure in Hexo.</p>\n<h4 id=\"1-Header-information-is-incorrect\"><a href=\"#1-Header-information-is-incorrect\" class=\"headerlink\" title=\"1. Header information is incorrect\"></a><font size=3 color=#4169E1>1. Header information is incorrect</font></h4><p>Please strictly follow the header format:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">---</span></span><br><span class=\"line\">title: <span class=\"number\">00</span>. <span class=\"type\">Article</span> publishing failure problem summary</span><br><span class=\"line\">date: <span class=\"number\">2023</span><span class=\"operator\">-</span><span class=\"number\">01</span><span class=\"operator\">-</span><span class=\"number\">15</span> <span class=\"number\">14</span>:<span class=\"number\">00</span>:<span class=\"number\">00</span></span><br><span class=\"line\">categories: </span><br><span class=\"line\"><span class=\"operator\">-</span> [<span class=\"type\">Others</span>, <span class=\"number\">00</span>. others]</span><br><span class=\"line\">tags:</span><br><span class=\"line\"><span class=\"operator\">-</span> hexo</span><br><span class=\"line\"><span class=\"operator\">-</span> configuration</span><br><span class=\"line\"><span class=\"operator\">-</span> tool</span><br><span class=\"line\"><span class=\"operator\">---</span></span><br></pre></td></tr></table></figure>\n<p><strong>Note:</strong><br><strong>There are no empty lines in the first row.</strong><br><strong>All the keywords ‘title’,’date’,’categories’,’tags’ must be in lower case.</strong></p>\n<h4 id=\"2-Picture-does-not-show\"><a href=\"#2-Picture-does-not-show\" class=\"headerlink\" title=\"2. Picture does not show\"></a><font size=3 color=#4169E1>2. Picture does not show</font></h4><p>The correct image format is as follows: </p>\n<img src=\"/assets/Demo/wallpaper-2311325.jpg\" class=\"\">    \n<img src=\"/assets/Demo/wallpaper-878514.jpg\" class=\"\">\n\n\n<h4 id=\"3-Change-the-font\"><a href=\"#3-Change-the-font\" class=\"headerlink\" title=\"3. Change the font\"></a><font size=3 color=#4169E1>3. Change the font</font></h4><p>On the basis of this article below:<br><a href=\"https://blog.csdn.net/Reinhart_L/article/details/122587975\">https://blog.csdn.net/Reinhart_L/article/details/122587975</a><br>(1) Enter. &#x2F; themes&#x2F;cactus&#x2F;source&#x2F;CSS &#x2F; _variables styl, can change the font;<br>(2) The available fonts are in . &#x2F;themes&#x2F;cactus&#x2F;source&#x2F;lib&#x2F;, cactus comes with only two kinds of ‘meslo-LG’ and ‘vazir-font’, you can download them yourself if you need.</p>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://ohmyswift.com/blog/2020/01/10/why-should-we-avoid-using-closures-in-swift-structs/\">Why should we avoid using closures in Swift structs?</a><br>[2] <a href=\"https://github.com/probberechts/hexo-theme-cactus\">https://github.com/probberechts/hexo-theme-cactus</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>Here is a summary of all the possible reasons for publishing failure in Hexo.</p>\n<h4 id=\"1-Header-information-is-incorrect\"><a href=\"#1-Header-information-is-incorrect\" class=\"headerlink\" title=\"1. Header information is incorrect\"></a><font size=3 color=#4169E1>1. Header information is incorrect</font></h4><p>Please strictly follow the header format:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">---</span></span><br><span class=\"line\">title: <span class=\"number\">00</span>. <span class=\"type\">Article</span> publishing failure problem summary</span><br><span class=\"line\">date: <span class=\"number\">2023</span><span class=\"operator\">-</span><span class=\"number\">01</span><span class=\"operator\">-</span><span class=\"number\">15</span> <span class=\"number\">14</span>:<span class=\"number\">00</span>:<span class=\"number\">00</span></span><br><span class=\"line\">categories: </span><br><span class=\"line\"><span class=\"operator\">-</span> [<span class=\"type\">Others</span>, <span class=\"number\">00</span>. others]</span><br><span class=\"line\">tags:</span><br><span class=\"line\"><span class=\"operator\">-</span> hexo</span><br><span class=\"line\"><span class=\"operator\">-</span> configuration</span><br><span class=\"line\"><span class=\"operator\">-</span> tool</span><br><span class=\"line\"><span class=\"operator\">---</span></span><br></pre></td></tr></table></figure>\n<p><strong>Note:</strong><br><strong>There are no empty lines in the first row.</strong><br><strong>All the keywords ‘title’,’date’,’categories’,’tags’ must be in lower case.</strong></p>\n<h4 id=\"2-Picture-does-not-show\"><a href=\"#2-Picture-does-not-show\" class=\"headerlink\" title=\"2. Picture does not show\"></a><font size=3 color=#4169E1>2. Picture does not show</font></h4><p>The correct image format is as follows: </p>\n<img src=\"/assets/Demo/wallpaper-2311325.jpg\" class=\"\">    \n<img src=\"/assets/Demo/wallpaper-878514.jpg\" class=\"\">\n\n\n<h4 id=\"3-Change-the-font\"><a href=\"#3-Change-the-font\" class=\"headerlink\" title=\"3. Change the font\"></a><font size=3 color=#4169E1>3. Change the font</font></h4><p>On the basis of this article below:<br><a href=\"https://blog.csdn.net/Reinhart_L/article/details/122587975\">https://blog.csdn.net/Reinhart_L/article/details/122587975</a><br>(1) Enter. &#x2F; themes&#x2F;cactus&#x2F;source&#x2F;CSS &#x2F; _variables styl, can change the font;<br>(2) The available fonts are in . &#x2F;themes&#x2F;cactus&#x2F;source&#x2F;lib&#x2F;, cactus comes with only two kinds of ‘meslo-LG’ and ‘vazir-font’, you can download them yourself if you need.</p>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://ohmyswift.com/blog/2020/01/10/why-should-we-avoid-using-closures-in-swift-structs/\">Why should we avoid using closures in Swift structs?</a><br>[2] <a href=\"https://github.com/probberechts/hexo-theme-cactus\">https://github.com/probberechts/hexo-theme-cactus</a></p>\n"},{"title":"00. Article publishing failure problem summary","date":"2023-01-15T13:00:00.000Z","_content":"\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nHere is a summary of all the possible reasons for publishing failure in Hexo.\n\n#### <font size=3 color=#4169E1>1. Header information is incorrect</font> \nPlease strictly follow the header format:\n```Swift \n---\ntitle: 00. Article publishing failure problem summary\ndate: 2023-01-15 14:00:00\ncategories: \n- [Others, 00. others]\ntags:\n- hexo\n- configuration\n- tool\n---\n```\n**Note:**   \n**There are no empty lines in the first row.**   \n**All the keywords 'title','date','categories','tags' must be in lower case.**\n\n#### <font size=3 color=#4169E1>2. Picture does not show</font> \n\nThe correct image format is as follows: \n{% img /assets/Demo/wallpaper-2311325.jpg %}    \n{% img /assets/Demo/wallpaper-878514.jpg %}\n\n\n#### <font size=3 color=#4169E1>3. Change the font</font> \nOn the basis of this article below:       \nhttps://blog.csdn.net/Reinhart_L/article/details/122587975       \n(1) Enter. / themes/cactus/source/CSS / _variables styl, can change the font;   \n(2) The available fonts are in . /themes/cactus/source/lib/, cactus comes with only two kinds of 'meslo-LG' and 'vazir-font', you can download them yourself if you need.\n\n\n\n#### <font size=3 color=gray>*Reference*</font>\n[1] [Why should we avoid using closures in Swift structs?](https://ohmyswift.com/blog/2020/01/10/why-should-we-avoid-using-closures-in-swift-structs/)  \n[2] https://github.com/probberechts/hexo-theme-cactus\n","source":"_posts/iOS/05. Projects & Issues/06. An encapsulation of data transmission based on RAC.md","raw":"---\ntitle: 00. Article publishing failure problem summary\ndate: 2023-01-15 14:00:00\ncategories: \n- [Others]\ntags:\n- hexo\n- configuration\n- tool\n---\n\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nHere is a summary of all the possible reasons for publishing failure in Hexo.\n\n#### <font size=3 color=#4169E1>1. Header information is incorrect</font> \nPlease strictly follow the header format:\n```Swift \n---\ntitle: 00. Article publishing failure problem summary\ndate: 2023-01-15 14:00:00\ncategories: \n- [Others, 00. others]\ntags:\n- hexo\n- configuration\n- tool\n---\n```\n**Note:**   \n**There are no empty lines in the first row.**   \n**All the keywords 'title','date','categories','tags' must be in lower case.**\n\n#### <font size=3 color=#4169E1>2. Picture does not show</font> \n\nThe correct image format is as follows: \n{% img /assets/Demo/wallpaper-2311325.jpg %}    \n{% img /assets/Demo/wallpaper-878514.jpg %}\n\n\n#### <font size=3 color=#4169E1>3. Change the font</font> \nOn the basis of this article below:       \nhttps://blog.csdn.net/Reinhart_L/article/details/122587975       \n(1) Enter. / themes/cactus/source/CSS / _variables styl, can change the font;   \n(2) The available fonts are in . /themes/cactus/source/lib/, cactus comes with only two kinds of 'meslo-LG' and 'vazir-font', you can download them yourself if you need.\n\n\n\n#### <font size=3 color=gray>*Reference*</font>\n[1] [Why should we avoid using closures in Swift structs?](https://ohmyswift.com/blog/2020/01/10/why-should-we-avoid-using-closures-in-swift-structs/)  \n[2] https://github.com/probberechts/hexo-theme-cactus\n","slug":"iOS/05. Projects & Issues/06. An encapsulation of data transmission based on RAC","published":1,"updated":"2023-08-23T19:22:57.927Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clm7w97s3003akb0m8gafgkyn","content":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>Here is a summary of all the possible reasons for publishing failure in Hexo.</p>\n<h4 id=\"1-Header-information-is-incorrect\"><a href=\"#1-Header-information-is-incorrect\" class=\"headerlink\" title=\"1. Header information is incorrect\"></a><font size=3 color=#4169E1>1. Header information is incorrect</font></h4><p>Please strictly follow the header format:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">---</span></span><br><span class=\"line\">title: <span class=\"number\">00</span>. <span class=\"type\">Article</span> publishing failure problem summary</span><br><span class=\"line\">date: <span class=\"number\">2023</span><span class=\"operator\">-</span><span class=\"number\">01</span><span class=\"operator\">-</span><span class=\"number\">15</span> <span class=\"number\">14</span>:<span class=\"number\">00</span>:<span class=\"number\">00</span></span><br><span class=\"line\">categories: </span><br><span class=\"line\"><span class=\"operator\">-</span> [<span class=\"type\">Others</span>, <span class=\"number\">00</span>. others]</span><br><span class=\"line\">tags:</span><br><span class=\"line\"><span class=\"operator\">-</span> hexo</span><br><span class=\"line\"><span class=\"operator\">-</span> configuration</span><br><span class=\"line\"><span class=\"operator\">-</span> tool</span><br><span class=\"line\"><span class=\"operator\">---</span></span><br></pre></td></tr></table></figure>\n<p><strong>Note:</strong><br><strong>There are no empty lines in the first row.</strong><br><strong>All the keywords ‘title’,’date’,’categories’,’tags’ must be in lower case.</strong></p>\n<h4 id=\"2-Picture-does-not-show\"><a href=\"#2-Picture-does-not-show\" class=\"headerlink\" title=\"2. Picture does not show\"></a><font size=3 color=#4169E1>2. Picture does not show</font></h4><p>The correct image format is as follows: </p>\n<img src=\"/assets/Demo/wallpaper-2311325.jpg\" class=\"\">    \n<img src=\"/assets/Demo/wallpaper-878514.jpg\" class=\"\">\n\n\n<h4 id=\"3-Change-the-font\"><a href=\"#3-Change-the-font\" class=\"headerlink\" title=\"3. Change the font\"></a><font size=3 color=#4169E1>3. Change the font</font></h4><p>On the basis of this article below:<br><a href=\"https://blog.csdn.net/Reinhart_L/article/details/122587975\">https://blog.csdn.net/Reinhart_L/article/details/122587975</a><br>(1) Enter. &#x2F; themes&#x2F;cactus&#x2F;source&#x2F;CSS &#x2F; _variables styl, can change the font;<br>(2) The available fonts are in . &#x2F;themes&#x2F;cactus&#x2F;source&#x2F;lib&#x2F;, cactus comes with only two kinds of ‘meslo-LG’ and ‘vazir-font’, you can download them yourself if you need.</p>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://ohmyswift.com/blog/2020/01/10/why-should-we-avoid-using-closures-in-swift-structs/\">Why should we avoid using closures in Swift structs?</a><br>[2] <a href=\"https://github.com/probberechts/hexo-theme-cactus\">https://github.com/probberechts/hexo-theme-cactus</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>Here is a summary of all the possible reasons for publishing failure in Hexo.</p>\n<h4 id=\"1-Header-information-is-incorrect\"><a href=\"#1-Header-information-is-incorrect\" class=\"headerlink\" title=\"1. Header information is incorrect\"></a><font size=3 color=#4169E1>1. Header information is incorrect</font></h4><p>Please strictly follow the header format:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">---</span></span><br><span class=\"line\">title: <span class=\"number\">00</span>. <span class=\"type\">Article</span> publishing failure problem summary</span><br><span class=\"line\">date: <span class=\"number\">2023</span><span class=\"operator\">-</span><span class=\"number\">01</span><span class=\"operator\">-</span><span class=\"number\">15</span> <span class=\"number\">14</span>:<span class=\"number\">00</span>:<span class=\"number\">00</span></span><br><span class=\"line\">categories: </span><br><span class=\"line\"><span class=\"operator\">-</span> [<span class=\"type\">Others</span>, <span class=\"number\">00</span>. others]</span><br><span class=\"line\">tags:</span><br><span class=\"line\"><span class=\"operator\">-</span> hexo</span><br><span class=\"line\"><span class=\"operator\">-</span> configuration</span><br><span class=\"line\"><span class=\"operator\">-</span> tool</span><br><span class=\"line\"><span class=\"operator\">---</span></span><br></pre></td></tr></table></figure>\n<p><strong>Note:</strong><br><strong>There are no empty lines in the first row.</strong><br><strong>All the keywords ‘title’,’date’,’categories’,’tags’ must be in lower case.</strong></p>\n<h4 id=\"2-Picture-does-not-show\"><a href=\"#2-Picture-does-not-show\" class=\"headerlink\" title=\"2. Picture does not show\"></a><font size=3 color=#4169E1>2. Picture does not show</font></h4><p>The correct image format is as follows: </p>\n<img src=\"/assets/Demo/wallpaper-2311325.jpg\" class=\"\">    \n<img src=\"/assets/Demo/wallpaper-878514.jpg\" class=\"\">\n\n\n<h4 id=\"3-Change-the-font\"><a href=\"#3-Change-the-font\" class=\"headerlink\" title=\"3. Change the font\"></a><font size=3 color=#4169E1>3. Change the font</font></h4><p>On the basis of this article below:<br><a href=\"https://blog.csdn.net/Reinhart_L/article/details/122587975\">https://blog.csdn.net/Reinhart_L/article/details/122587975</a><br>(1) Enter. &#x2F; themes&#x2F;cactus&#x2F;source&#x2F;CSS &#x2F; _variables styl, can change the font;<br>(2) The available fonts are in . &#x2F;themes&#x2F;cactus&#x2F;source&#x2F;lib&#x2F;, cactus comes with only two kinds of ‘meslo-LG’ and ‘vazir-font’, you can download them yourself if you need.</p>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://ohmyswift.com/blog/2020/01/10/why-should-we-avoid-using-closures-in-swift-structs/\">Why should we avoid using closures in Swift structs?</a><br>[2] <a href=\"https://github.com/probberechts/hexo-theme-cactus\">https://github.com/probberechts/hexo-theme-cactus</a></p>\n"},{"title":"00. Waterfall development vs Agile development","date":"2023-09-06T14:31:00.000Z","_content":"\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\n \n\n#### <font size=3 color=#4169E1>1. Waterfall development</font> \nIn the waterfall development model, there are several distinguishing features:\n\n(1) Emphasis on documentation, with a particular focus on detailed documentation, especially the project requirements document, both for the development team and the test team is particularly important, high-quality documentation for the latter processes are critical.\n\n(2) Longer Cycles and Larger Manpower Sizes: Development cycles are fixed and lengthy, often measured in months, and team members must follow project schedules and various specifications.\n\n(3) Fixed requirements: requirement changes, and rework issues tend to be more costly.\n\n\n#### <font size=3 color=#4169E1>2. Agile development</font> \nIt is a human-centered, iterative, step-by-step development pattern. In Agile development, it aims to deliver core functionality quickly and continuously improve it by slicing up the project into smaller parts and delivering and testing them incrementally. Instead of emphasizing perfect design and coding, it seeks to quickly release usable versions and then continuously iterate and improve. \n\nAgile development mainly includes SCRUM, XP (Extreme Programming), Crystal Methods, FDD (Feature Driven Development) and so on. And we mainly use Scrum model in actual development.\n\nThe Scrum workflow model also needs to be built on top of well-established specifications, development tools and facilities (Git/Jenkins/Cocoapods/coding specifications, etc.). It has the following main elements:\n\n(1) Product Owner's clarity on requirements, including prioritization, resource dependencies, etc.\n\n(2) Developer's task splitting, including clear prioritization, deadline, manpower allocation, etc.\n\n(3) Daily meeting for all parties to update the status of each task (ToDo, Doing, Done) and discuss issues, etc.\n\n(4) Tasks completed by developers can be prioritized for delivery to product owners for experience and testers for testing;\n\n(5) Review meetings are held to summarize the problems that occurred in the middle and how to avoid them;\n\n#### <font size=3 color=#4169E1>3. Waterfall development vs Agile development</font> \n\nIn a team, not one model dominates, which model to take depends on the situation.\n\nFor some of the more core features that require high quality (e.g., payment business), cross-team, third-party, and other collaboration scenarios where communication is not very efficient, waterfall development can still be adopted.\n\nAgile development can be adopted when the product's scenarios are time-sensitive and need to be validated and market captured quickly, with all the people available for quick face-to-face communication.\n","source":"_posts/iOS/06. Others/00. Waterfall development vs Agile development.md","raw":"---\ntitle: 00. Waterfall development vs Agile development\ndate: 2023-09-06 16:31:00\ncategories: \n- [iOS, Others]\ntags:\n- Agile\n- waterfall\n---\n\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\n \n\n#### <font size=3 color=#4169E1>1. Waterfall development</font> \nIn the waterfall development model, there are several distinguishing features:\n\n(1) Emphasis on documentation, with a particular focus on detailed documentation, especially the project requirements document, both for the development team and the test team is particularly important, high-quality documentation for the latter processes are critical.\n\n(2) Longer Cycles and Larger Manpower Sizes: Development cycles are fixed and lengthy, often measured in months, and team members must follow project schedules and various specifications.\n\n(3) Fixed requirements: requirement changes, and rework issues tend to be more costly.\n\n\n#### <font size=3 color=#4169E1>2. Agile development</font> \nIt is a human-centered, iterative, step-by-step development pattern. In Agile development, it aims to deliver core functionality quickly and continuously improve it by slicing up the project into smaller parts and delivering and testing them incrementally. Instead of emphasizing perfect design and coding, it seeks to quickly release usable versions and then continuously iterate and improve. \n\nAgile development mainly includes SCRUM, XP (Extreme Programming), Crystal Methods, FDD (Feature Driven Development) and so on. And we mainly use Scrum model in actual development.\n\nThe Scrum workflow model also needs to be built on top of well-established specifications, development tools and facilities (Git/Jenkins/Cocoapods/coding specifications, etc.). It has the following main elements:\n\n(1) Product Owner's clarity on requirements, including prioritization, resource dependencies, etc.\n\n(2) Developer's task splitting, including clear prioritization, deadline, manpower allocation, etc.\n\n(3) Daily meeting for all parties to update the status of each task (ToDo, Doing, Done) and discuss issues, etc.\n\n(4) Tasks completed by developers can be prioritized for delivery to product owners for experience and testers for testing;\n\n(5) Review meetings are held to summarize the problems that occurred in the middle and how to avoid them;\n\n#### <font size=3 color=#4169E1>3. Waterfall development vs Agile development</font> \n\nIn a team, not one model dominates, which model to take depends on the situation.\n\nFor some of the more core features that require high quality (e.g., payment business), cross-team, third-party, and other collaboration scenarios where communication is not very efficient, waterfall development can still be adopted.\n\nAgile development can be adopted when the product's scenarios are time-sensitive and need to be validated and market captured quickly, with all the people available for quick face-to-face communication.\n","slug":"iOS/06. Others/00. Waterfall development vs Agile development","published":1,"updated":"2023-09-06T15:09:21.707Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clm7w97s4003fkb0m6lrs2euj","content":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<h4 id=\"1-Waterfall-development\"><a href=\"#1-Waterfall-development\" class=\"headerlink\" title=\"1. Waterfall development\"></a><font size=3 color=#4169E1>1. Waterfall development</font></h4><p>In the waterfall development model, there are several distinguishing features:</p>\n<p>(1) Emphasis on documentation, with a particular focus on detailed documentation, especially the project requirements document, both for the development team and the test team is particularly important, high-quality documentation for the latter processes are critical.</p>\n<p>(2) Longer Cycles and Larger Manpower Sizes: Development cycles are fixed and lengthy, often measured in months, and team members must follow project schedules and various specifications.</p>\n<p>(3) Fixed requirements: requirement changes, and rework issues tend to be more costly.</p>\n<h4 id=\"2-Agile-development\"><a href=\"#2-Agile-development\" class=\"headerlink\" title=\"2. Agile development\"></a><font size=3 color=#4169E1>2. Agile development</font></h4><p>It is a human-centered, iterative, step-by-step development pattern. In Agile development, it aims to deliver core functionality quickly and continuously improve it by slicing up the project into smaller parts and delivering and testing them incrementally. Instead of emphasizing perfect design and coding, it seeks to quickly release usable versions and then continuously iterate and improve. </p>\n<p>Agile development mainly includes SCRUM, XP (Extreme Programming), Crystal Methods, FDD (Feature Driven Development) and so on. And we mainly use Scrum model in actual development.</p>\n<p>The Scrum workflow model also needs to be built on top of well-established specifications, development tools and facilities (Git&#x2F;Jenkins&#x2F;Cocoapods&#x2F;coding specifications, etc.). It has the following main elements:</p>\n<p>(1) Product Owner’s clarity on requirements, including prioritization, resource dependencies, etc.</p>\n<p>(2) Developer’s task splitting, including clear prioritization, deadline, manpower allocation, etc.</p>\n<p>(3) Daily meeting for all parties to update the status of each task (ToDo, Doing, Done) and discuss issues, etc.</p>\n<p>(4) Tasks completed by developers can be prioritized for delivery to product owners for experience and testers for testing;</p>\n<p>(5) Review meetings are held to summarize the problems that occurred in the middle and how to avoid them;</p>\n<h4 id=\"3-Waterfall-development-vs-Agile-development\"><a href=\"#3-Waterfall-development-vs-Agile-development\" class=\"headerlink\" title=\"3. Waterfall development vs Agile development\"></a><font size=3 color=#4169E1>3. Waterfall development vs Agile development</font></h4><p>In a team, not one model dominates, which model to take depends on the situation.</p>\n<p>For some of the more core features that require high quality (e.g., payment business), cross-team, third-party, and other collaboration scenarios where communication is not very efficient, waterfall development can still be adopted.</p>\n<p>Agile development can be adopted when the product’s scenarios are time-sensitive and need to be validated and market captured quickly, with all the people available for quick face-to-face communication.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<h4 id=\"1-Waterfall-development\"><a href=\"#1-Waterfall-development\" class=\"headerlink\" title=\"1. Waterfall development\"></a><font size=3 color=#4169E1>1. Waterfall development</font></h4><p>In the waterfall development model, there are several distinguishing features:</p>\n<p>(1) Emphasis on documentation, with a particular focus on detailed documentation, especially the project requirements document, both for the development team and the test team is particularly important, high-quality documentation for the latter processes are critical.</p>\n<p>(2) Longer Cycles and Larger Manpower Sizes: Development cycles are fixed and lengthy, often measured in months, and team members must follow project schedules and various specifications.</p>\n<p>(3) Fixed requirements: requirement changes, and rework issues tend to be more costly.</p>\n<h4 id=\"2-Agile-development\"><a href=\"#2-Agile-development\" class=\"headerlink\" title=\"2. Agile development\"></a><font size=3 color=#4169E1>2. Agile development</font></h4><p>It is a human-centered, iterative, step-by-step development pattern. In Agile development, it aims to deliver core functionality quickly and continuously improve it by slicing up the project into smaller parts and delivering and testing them incrementally. Instead of emphasizing perfect design and coding, it seeks to quickly release usable versions and then continuously iterate and improve. </p>\n<p>Agile development mainly includes SCRUM, XP (Extreme Programming), Crystal Methods, FDD (Feature Driven Development) and so on. And we mainly use Scrum model in actual development.</p>\n<p>The Scrum workflow model also needs to be built on top of well-established specifications, development tools and facilities (Git&#x2F;Jenkins&#x2F;Cocoapods&#x2F;coding specifications, etc.). It has the following main elements:</p>\n<p>(1) Product Owner’s clarity on requirements, including prioritization, resource dependencies, etc.</p>\n<p>(2) Developer’s task splitting, including clear prioritization, deadline, manpower allocation, etc.</p>\n<p>(3) Daily meeting for all parties to update the status of each task (ToDo, Doing, Done) and discuss issues, etc.</p>\n<p>(4) Tasks completed by developers can be prioritized for delivery to product owners for experience and testers for testing;</p>\n<p>(5) Review meetings are held to summarize the problems that occurred in the middle and how to avoid them;</p>\n<h4 id=\"3-Waterfall-development-vs-Agile-development\"><a href=\"#3-Waterfall-development-vs-Agile-development\" class=\"headerlink\" title=\"3. Waterfall development vs Agile development\"></a><font size=3 color=#4169E1>3. Waterfall development vs Agile development</font></h4><p>In a team, not one model dominates, which model to take depends on the situation.</p>\n<p>For some of the more core features that require high quality (e.g., payment business), cross-team, third-party, and other collaboration scenarios where communication is not very efficient, waterfall development can still be adopted.</p>\n<p>Agile development can be adopted when the product’s scenarios are time-sensitive and need to be validated and market captured quickly, with all the people available for quick face-to-face communication.</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clm7w97qy0003kb0m083zaugo","category_id":"clm7w97r20009kb0md2g8awag","_id":"clm7w97r7000jkb0m96qy2e8d"},{"post_id":"clm7w97qz0005kb0maq344ozk","category_id":"clm7w97r4000dkb0m2i7f98pp","_id":"clm7w97r9000okb0m59y155ph"},{"post_id":"clm7w97r10008kb0mcxcjcoqe","category_id":"clm7w97r4000dkb0m2i7f98pp","_id":"clm7w97rb000vkb0m06lc3kww"},{"post_id":"clm7w97r3000bkb0m4xr1cec7","category_id":"clm7w97r4000dkb0m2i7f98pp","_id":"clm7w97rd0011kb0m5tkpdbhd"},{"post_id":"clm7w97rb000ukb0m7ht5h75g","category_id":"clm7w97ra000skb0me7q2ctv3","_id":"clm7w97rq0020kb0mcajyhqb5"},{"post_id":"clm7w97rb000ukb0m7ht5h75g","category_id":"clm7w97rl001okb0m4fx81nor","_id":"clm7w97rr0023kb0mb25m8x2b"},{"post_id":"clm7w97r4000ekb0mgxhf9o5y","category_id":"clm7w97ra000skb0me7q2ctv3","_id":"clm7w97rt0027kb0m063i6pcz"},{"post_id":"clm7w97r4000ekb0mgxhf9o5y","category_id":"clm7w97rl001okb0m4fx81nor","_id":"clm7w97rt002bkb0m6k0m77y7"},{"post_id":"clm7w97rc000xkb0m5yhxejqy","category_id":"clm7w97ra000skb0me7q2ctv3","_id":"clm7w97ru002ekb0m4k29b30v"},{"post_id":"clm7w97rc000xkb0m5yhxejqy","category_id":"clm7w97rl001okb0m4fx81nor","_id":"clm7w97rv002gkb0m6ailedm0"},{"post_id":"clm7w97rc000zkb0mc013fuhp","category_id":"clm7w97ra000skb0me7q2ctv3","_id":"clm7w97rw002lkb0m206deh3s"},{"post_id":"clm7w97rc000zkb0mc013fuhp","category_id":"clm7w97rl001okb0m4fx81nor","_id":"clm7w97rx002okb0ma0sf1ngy"},{"post_id":"clm7w97r5000fkb0maksa94uw","category_id":"clm7w97ra000skb0me7q2ctv3","_id":"clm7w97ry002skb0mbc6cg2m3"},{"post_id":"clm7w97r5000fkb0maksa94uw","category_id":"clm7w97rl001okb0m4fx81nor","_id":"clm7w97rz002ukb0m6pn02opt"},{"post_id":"clm7w97rd0013kb0mfn2vczhq","category_id":"clm7w97ra000skb0me7q2ctv3","_id":"clm7w97s0002zkb0m1cht9bef"},{"post_id":"clm7w97rd0013kb0mfn2vczhq","category_id":"clm7w97rl001okb0m4fx81nor","_id":"clm7w97s10032kb0madg67ruu"},{"post_id":"clm7w97re0016kb0mh80a3il0","category_id":"clm7w97ra000skb0me7q2ctv3","_id":"clm7w97s20038kb0m0i2x387i"},{"post_id":"clm7w97re0016kb0mh80a3il0","category_id":"clm7w97ry002qkb0m1jm6dkw6","_id":"clm7w97s4003bkb0m906i7uje"},{"post_id":"clm7w97rz002vkb0m5fs2gabj","category_id":"clm7w97r20009kb0md2g8awag","_id":"clm7w97s5003gkb0mew9m3m33"},{"post_id":"clm7w97s00030kb0m9acs088a","category_id":"clm7w97r20009kb0md2g8awag","_id":"clm7w97s5003ikb0mhio67v8f"},{"post_id":"clm7w97r7000ikb0mdhwkf33t","category_id":"clm7w97ra000skb0me7q2ctv3","_id":"clm7w97s6003lkb0m22977jnx"},{"post_id":"clm7w97r7000ikb0mdhwkf33t","category_id":"clm7w97rl001okb0m4fx81nor","_id":"clm7w97s6003okb0mc120hk9z"},{"post_id":"clm7w97s10033kb0m6mevftac","category_id":"clm7w97r20009kb0md2g8awag","_id":"clm7w97s6003rkb0m767t45mq"},{"post_id":"clm7w97s20037kb0m2itohhqe","category_id":"clm7w97r20009kb0md2g8awag","_id":"clm7w97s7003ukb0m7o8013cn"},{"post_id":"clm7w97rf0018kb0mai004ex8","category_id":"clm7w97ra000skb0me7q2ctv3","_id":"clm7w97s7003xkb0m5j2v21w7"},{"post_id":"clm7w97rf0018kb0mai004ex8","category_id":"clm7w97ry002qkb0m1jm6dkw6","_id":"clm7w97s70040kb0m7fhy5kbr"},{"post_id":"clm7w97s3003akb0m8gafgkyn","category_id":"clm7w97r20009kb0md2g8awag","_id":"clm7w97s80043kb0m3zicca9b"},{"post_id":"clm7w97rg001akb0mckox6e7g","category_id":"clm7w97ra000skb0me7q2ctv3","_id":"clm7w97s80046kb0m47yxclif"},{"post_id":"clm7w97rg001akb0mckox6e7g","category_id":"clm7w97s4003ckb0metyc6llb","_id":"clm7w97s90049kb0m4mjhg78b"},{"post_id":"clm7w97r8000kkb0m8io24dft","category_id":"clm7w97ra000skb0me7q2ctv3","_id":"clm7w97s9004bkb0mcjlk3g2r"},{"post_id":"clm7w97r8000kkb0m8io24dft","category_id":"clm7w97rl001okb0m4fx81nor","_id":"clm7w97sa004fkb0m4cpu9pku"},{"post_id":"clm7w97rh001ckb0m0xaa5g0m","category_id":"clm7w97ra000skb0me7q2ctv3","_id":"clm7w97sa004hkb0m6uxa3oix"},{"post_id":"clm7w97rh001ckb0m0xaa5g0m","category_id":"clm7w97s4003ckb0metyc6llb","_id":"clm7w97sa004lkb0m85upgwmk"},{"post_id":"clm7w97ri001fkb0m83agdj79","category_id":"clm7w97ra000skb0me7q2ctv3","_id":"clm7w97sa004nkb0m6xneh8e2"},{"post_id":"clm7w97ri001fkb0m83agdj79","category_id":"clm7w97s4003ckb0metyc6llb","_id":"clm7w97sb004rkb0mgwd8068e"},{"post_id":"clm7w97r9000nkb0m9ky93w1v","category_id":"clm7w97ra000skb0me7q2ctv3","_id":"clm7w97sb004tkb0m6nsh0rc7"},{"post_id":"clm7w97r9000nkb0m9ky93w1v","category_id":"clm7w97rl001okb0m4fx81nor","_id":"clm7w97sc004xkb0m0hrd28cv"},{"post_id":"clm7w97rj001ikb0m98zr6ype","category_id":"clm7w97ra000skb0me7q2ctv3","_id":"clm7w97sc004zkb0m2yggamdn"},{"post_id":"clm7w97rj001ikb0m98zr6ype","category_id":"clm7w97s4003ckb0metyc6llb","_id":"clm7w97sc0052kb0m9ekv4jxe"},{"post_id":"clm7w97rj001kkb0m04csedvn","category_id":"clm7w97ra000skb0me7q2ctv3","_id":"clm7w97sd0055kb0m6z6ohzpw"},{"post_id":"clm7w97rj001kkb0m04csedvn","category_id":"clm7w97s4003ckb0metyc6llb","_id":"clm7w97sd0058kb0mho74hfrj"},{"post_id":"clm7w97ra000qkb0mgwjq4qc3","category_id":"clm7w97ra000skb0me7q2ctv3","_id":"clm7w97sd005bkb0m13a38zav"},{"post_id":"clm7w97ra000qkb0mgwjq4qc3","category_id":"clm7w97rl001okb0m4fx81nor","_id":"clm7w97se005ekb0mc7qr4w3n"},{"post_id":"clm7w97rk001mkb0m8wvy394d","category_id":"clm7w97ra000skb0me7q2ctv3","_id":"clm7w97se005hkb0megc4fbwp"},{"post_id":"clm7w97rk001mkb0m8wvy394d","category_id":"clm7w97sb004okb0mdp9z9c0j","_id":"clm7w97sf005kkb0m0nsyclgm"},{"post_id":"clm7w97rl001pkb0m0jrk7z1b","category_id":"clm7w97ra000skb0me7q2ctv3","_id":"clm7w97sf005nkb0m9s9vbuvi"},{"post_id":"clm7w97rl001pkb0m0jrk7z1b","category_id":"clm7w97sb004okb0mdp9z9c0j","_id":"clm7w97sf005pkb0m7o713u9b"},{"post_id":"clm7w97rm001skb0m8fw9edkc","category_id":"clm7w97ra000skb0me7q2ctv3","_id":"clm7w97sg005skb0mfbq23sbu"},{"post_id":"clm7w97rm001skb0m8fw9edkc","category_id":"clm7w97sb004okb0mdp9z9c0j","_id":"clm7w97sg005ukb0mb9ando60"},{"post_id":"clm7w97rm001ukb0m5brog5f8","category_id":"clm7w97ra000skb0me7q2ctv3","_id":"clm7w97sg005ykb0m1tv71l9b"},{"post_id":"clm7w97rm001ukb0m5brog5f8","category_id":"clm7w97sb004okb0mdp9z9c0j","_id":"clm7w97sg005zkb0mbtjnhgba"},{"post_id":"clm7w97rn001wkb0m1nnkgfv3","category_id":"clm7w97ra000skb0me7q2ctv3","_id":"clm7w97sh0062kb0mggznal3i"},{"post_id":"clm7w97rn001wkb0m1nnkgfv3","category_id":"clm7w97se005dkb0m8glj2pjz","_id":"clm7w97sh0063kb0m7y030uhk"},{"post_id":"clm7w97rq001ykb0m50oegkxs","category_id":"clm7w97ra000skb0me7q2ctv3","_id":"clm7w97sh0065kb0m52qa239q"},{"post_id":"clm7w97rq001ykb0m50oegkxs","category_id":"clm7w97se005jkb0m5q3fdzrt","_id":"clm7w97si0068kb0mb43a4ejw"},{"post_id":"clm7w97rq0021kb0mfs99fipe","category_id":"clm7w97ra000skb0me7q2ctv3","_id":"clm7w97si006bkb0m594bgtj7"},{"post_id":"clm7w97rq0021kb0mfs99fipe","category_id":"clm7w97se005jkb0m5q3fdzrt","_id":"clm7w97si006ekb0m9gkp432b"},{"post_id":"clm7w97rr0024kb0meruuc9zj","category_id":"clm7w97ra000skb0me7q2ctv3","_id":"clm7w97sj006gkb0me2cfca5g"},{"post_id":"clm7w97rr0024kb0meruuc9zj","category_id":"clm7w97sg005vkb0m1zf0dfxs","_id":"clm7w97sj006ikb0m7yit28c0"},{"post_id":"clm7w97rt0028kb0m1fa00qln","category_id":"clm7w97ra000skb0me7q2ctv3","_id":"clm7w97sj006lkb0m8mu6dcck"},{"post_id":"clm7w97rt0028kb0m1fa00qln","category_id":"clm7w97sh0060kb0m46ycfz5u","_id":"clm7w97sk006okb0mfl9241hb"},{"post_id":"clm7w97ru002ckb0mdccdhjcn","category_id":"clm7w97ra000skb0me7q2ctv3","_id":"clm7w97sk006rkb0m1yeb6b75"},{"post_id":"clm7w97ru002ckb0mdccdhjcn","category_id":"clm7w97sh0060kb0m46ycfz5u","_id":"clm7w97sl006tkb0mhgem5yqf"},{"post_id":"clm7w97ru002fkb0meld8hdax","category_id":"clm7w97si0069kb0m562aefx8","_id":"clm7w97so0078kb0megvohhrh"},{"post_id":"clm7w97ru002fkb0meld8hdax","category_id":"clm7w97sn0071kb0m7vvsexap","_id":"clm7w97sp007akb0mg1xyb74f"},{"post_id":"clm7w97rv002ikb0m5qsy74fk","category_id":"clm7w97si0069kb0m562aefx8","_id":"clm7w97sp007ckb0mecxo1wpf"},{"post_id":"clm7w97rv002ikb0m5qsy74fk","category_id":"clm7w97so0073kb0mg4wsf3qy","_id":"clm7w97sq007ekb0mcerm3usa"},{"post_id":"clm7w97rw002mkb0m93gjez4j","category_id":"clm7w97si0069kb0m562aefx8","_id":"clm7w97sq007hkb0mgwh70wts"},{"post_id":"clm7w97rw002mkb0m93gjez4j","category_id":"clm7w97so0073kb0mg4wsf3qy","_id":"clm7w97sr007kkb0m1qsshr0u"},{"post_id":"clm7w97rx002pkb0mg3pj2ygo","category_id":"clm7w97si0069kb0m562aefx8","_id":"clm7w97ss007nkb0m6vhlhgjq"},{"post_id":"clm7w97rx002pkb0mg3pj2ygo","category_id":"clm7w97sp007bkb0memc32j0x","_id":"clm7w97st007pkb0m9fwk6zuj"},{"post_id":"clm7w97ry002tkb0m0nbm58mt","category_id":"clm7w97si0069kb0m562aefx8","_id":"clm7w97st007qkb0mdr1x4ahd"},{"post_id":"clm7w97ry002tkb0m0nbm58mt","category_id":"clm7w97sp007bkb0memc32j0x","_id":"clm7w97st007skb0macuw4hpi"},{"post_id":"clm7w97s4003fkb0m6lrs2euj","category_id":"clm7w97si0069kb0m562aefx8","_id":"clm7w97st007ukb0m40bnhf57"},{"post_id":"clm7w97s4003fkb0m6lrs2euj","category_id":"clm7w97ss007mkb0md6bec33l","_id":"clm7w97su007xkb0m1z2v5mb3"}],"PostTag":[{"post_id":"clm7w97qy0003kb0m083zaugo","tag_id":"clm7w97r00006kb0m3dim3lyf","_id":"clm7w97ra000pkb0m8v074gsi"},{"post_id":"clm7w97qy0003kb0m083zaugo","tag_id":"clm7w97r4000ckb0mapcg9gge","_id":"clm7w97ra000rkb0mgtag8917"},{"post_id":"clm7w97qy0003kb0m083zaugo","tag_id":"clm7w97r6000gkb0meiq282pu","_id":"clm7w97rb000wkb0me0qu94sq"},{"post_id":"clm7w97qz0005kb0maq344ozk","tag_id":"clm7w97r8000mkb0mgy37gzha","_id":"clm7w97rd0012kb0m9rx31uqt"},{"post_id":"clm7w97qz0005kb0maq344ozk","tag_id":"clm7w97rb000tkb0mco5jddh5","_id":"clm7w97re0015kb0m3d2d7dom"},{"post_id":"clm7w97r10008kb0mcxcjcoqe","tag_id":"clm7w97rd0010kb0mh2p604rx","_id":"clm7w97rh001dkb0map0q2hag"},{"post_id":"clm7w97r10008kb0mcxcjcoqe","tag_id":"clm7w97rf0017kb0m8mai0z6m","_id":"clm7w97ri001gkb0mc9ga2hqt"},{"post_id":"clm7w97r3000bkb0m4xr1cec7","tag_id":"clm7w97rd0010kb0mh2p604rx","_id":"clm7w97rl001nkb0m9tmr436b"},{"post_id":"clm7w97r3000bkb0m4xr1cec7","tag_id":"clm7w97rf0017kb0m8mai0z6m","_id":"clm7w97rm001qkb0m6rwc3gce"},{"post_id":"clm7w97r4000ekb0mgxhf9o5y","tag_id":"clm7w97rk001lkb0mc3cq5r5c","_id":"clm7w97rm001tkb0mcl6k6t42"},{"post_id":"clm7w97r5000fkb0maksa94uw","tag_id":"clm7w97rm001rkb0m0xrn6czg","_id":"clm7w97rs0026kb0mdhhi3rkj"},{"post_id":"clm7w97r5000fkb0maksa94uw","tag_id":"clm7w97rp001xkb0may0qd6gf","_id":"clm7w97rt0029kb0m28fmheqp"},{"post_id":"clm7w97r7000ikb0mdhwkf33t","tag_id":"clm7w97rr0022kb0md3hic4vv","_id":"clm7w97rw002kkb0mdy3n9del"},{"post_id":"clm7w97r7000ikb0mdhwkf33t","tag_id":"clm7w97rt002akb0mgoqj0afp","_id":"clm7w97rx002nkb0mcoikegpo"},{"post_id":"clm7w97ry002tkb0m0nbm58mt","tag_id":"clm7w97r00006kb0m3dim3lyf","_id":"clm7w97s0002ykb0m2kh484v2"},{"post_id":"clm7w97ry002tkb0m0nbm58mt","tag_id":"clm7w97r4000ckb0mapcg9gge","_id":"clm7w97s00031kb0md7091ehc"},{"post_id":"clm7w97ry002tkb0m0nbm58mt","tag_id":"clm7w97r6000gkb0meiq282pu","_id":"clm7w97s20036kb0m18uo5wa4"},{"post_id":"clm7w97r8000kkb0m8io24dft","tag_id":"clm7w97rv002hkb0margtf5cr","_id":"clm7w97s30039kb0m6uuobev9"},{"post_id":"clm7w97r8000kkb0m8io24dft","tag_id":"clm7w97ry002rkb0mbvjyhbe8","_id":"clm7w97s4003dkb0mfa0b18st"},{"post_id":"clm7w97rz002vkb0m5fs2gabj","tag_id":"clm7w97r00006kb0m3dim3lyf","_id":"clm7w97s5003hkb0m0oea7zp6"},{"post_id":"clm7w97rz002vkb0m5fs2gabj","tag_id":"clm7w97r4000ckb0mapcg9gge","_id":"clm7w97s5003kkb0m3kyx4jm3"},{"post_id":"clm7w97rz002vkb0m5fs2gabj","tag_id":"clm7w97r6000gkb0meiq282pu","_id":"clm7w97s6003nkb0m6fox98x5"},{"post_id":"clm7w97s00030kb0m9acs088a","tag_id":"clm7w97r00006kb0m3dim3lyf","_id":"clm7w97s6003qkb0m6fxq126r"},{"post_id":"clm7w97s00030kb0m9acs088a","tag_id":"clm7w97r4000ckb0mapcg9gge","_id":"clm7w97s7003tkb0m1z8n6qsk"},{"post_id":"clm7w97s00030kb0m9acs088a","tag_id":"clm7w97r6000gkb0meiq282pu","_id":"clm7w97s7003wkb0m8vqm5jzs"},{"post_id":"clm7w97r9000nkb0m9ky93w1v","tag_id":"clm7w97rz002xkb0m3j2l1zlh","_id":"clm7w97s7003zkb0m3c1y8cew"},{"post_id":"clm7w97s10033kb0m6mevftac","tag_id":"clm7w97r00006kb0m3dim3lyf","_id":"clm7w97s80042kb0m5ie2b33q"},{"post_id":"clm7w97s10033kb0m6mevftac","tag_id":"clm7w97r4000ckb0mapcg9gge","_id":"clm7w97s80044kb0m8fgvcbvf"},{"post_id":"clm7w97s10033kb0m6mevftac","tag_id":"clm7w97r6000gkb0meiq282pu","_id":"clm7w97s80048kb0m8o1r1vl4"},{"post_id":"clm7w97s20037kb0m2itohhqe","tag_id":"clm7w97r00006kb0m3dim3lyf","_id":"clm7w97s9004akb0mcuy27650"},{"post_id":"clm7w97s20037kb0m2itohhqe","tag_id":"clm7w97r4000ckb0mapcg9gge","_id":"clm7w97s9004ekb0mhkht3we8"},{"post_id":"clm7w97s20037kb0m2itohhqe","tag_id":"clm7w97r6000gkb0meiq282pu","_id":"clm7w97sa004gkb0m8q8q2yn8"},{"post_id":"clm7w97s3003akb0m8gafgkyn","tag_id":"clm7w97r00006kb0m3dim3lyf","_id":"clm7w97sa004kkb0m4tv103ar"},{"post_id":"clm7w97s3003akb0m8gafgkyn","tag_id":"clm7w97r4000ckb0mapcg9gge","_id":"clm7w97sa004mkb0m69257mwa"},{"post_id":"clm7w97s3003akb0m8gafgkyn","tag_id":"clm7w97r6000gkb0meiq282pu","_id":"clm7w97sb004qkb0md16c166x"},{"post_id":"clm7w97ra000qkb0mgwjq4qc3","tag_id":"clm7w97s10035kb0m9eca2yy5","_id":"clm7w97sb004skb0m9xoih9as"},{"post_id":"clm7w97ra000qkb0mgwjq4qc3","tag_id":"clm7w97s4003ekb0m61wpemqj","_id":"clm7w97sb004ukb0m4sajhx6v"},{"post_id":"clm7w97rb000ukb0m7ht5h75g","tag_id":"clm7w97s6003mkb0m8swe9sgs","_id":"clm7w97sc004ykb0m4dew1hxq"},{"post_id":"clm7w97rc000xkb0m5yhxejqy","tag_id":"clm7w97s6003skb0mbqok43yu","_id":"clm7w97sc0050kb0mgujsf293"},{"post_id":"clm7w97rc000zkb0mc013fuhp","tag_id":"clm7w97s7003ykb0m04r18n3o","_id":"clm7w97sd0054kb0merdlcppq"},{"post_id":"clm7w97rc000zkb0mc013fuhp","tag_id":"clm7w97s80045kb0m0ei27997","_id":"clm7w97sd0056kb0m38k0f3wd"},{"post_id":"clm7w97rd0013kb0mfn2vczhq","tag_id":"clm7w97s9004ckb0mginqd8ei","_id":"clm7w97sd005akb0mgo3z0e74"},{"post_id":"clm7w97re0016kb0mh80a3il0","tag_id":"clm7w97sa004ikb0mcunb20np","_id":"clm7w97se005ckb0mejm53r1x"},{"post_id":"clm7w97rf0018kb0mai004ex8","tag_id":"clm7w97sb004pkb0mcsurfkrk","_id":"clm7w97se005gkb0m6fr15381"},{"post_id":"clm7w97rg001akb0mckox6e7g","tag_id":"clm7w97sb004wkb0m6fpe937r","_id":"clm7w97se005ikb0m12qj0ptl"},{"post_id":"clm7w97rg001akb0mckox6e7g","tag_id":"clm7w97sc0053kb0m5d0k3dnb","_id":"clm7w97sf005mkb0m2rwj7n2q"},{"post_id":"clm7w97rh001ckb0m0xaa5g0m","tag_id":"clm7w97sb004wkb0m6fpe937r","_id":"clm7w97sf005okb0m1133cvyt"},{"post_id":"clm7w97ri001fkb0m83agdj79","tag_id":"clm7w97sb004wkb0m6fpe937r","_id":"clm7w97sg005tkb0mezbzb4r4"},{"post_id":"clm7w97ri001fkb0m83agdj79","tag_id":"clm7w97sf005lkb0mf1wt0wbh","_id":"clm7w97sg005wkb0mfpwf27ef"},{"post_id":"clm7w97rj001ikb0m98zr6ype","tag_id":"clm7w97sb004wkb0m6fpe937r","_id":"clm7w97si0067kb0mep6bc3fq"},{"post_id":"clm7w97rj001ikb0m98zr6ype","tag_id":"clm7w97sg005xkb0m1en2htrv","_id":"clm7w97si006akb0mguaf77fw"},{"post_id":"clm7w97rj001ikb0m98zr6ype","tag_id":"clm7w97sh0061kb0m4tt88sig","_id":"clm7w97si006dkb0mfr3s0f37"},{"post_id":"clm7w97rj001kkb0m04csedvn","tag_id":"clm7w97sb004wkb0m6fpe937r","_id":"clm7w97sj006jkb0mgnuxfpm3"},{"post_id":"clm7w97rj001kkb0m04csedvn","tag_id":"clm7w97si006ckb0m9wqs6c4j","_id":"clm7w97sj006mkb0m68n30jq9"},{"post_id":"clm7w97rk001mkb0m8wvy394d","tag_id":"clm7w97sj006hkb0mhg2sgmik","_id":"clm7w97sk006pkb0mbqbj5how"},{"post_id":"clm7w97rl001pkb0m0jrk7z1b","tag_id":"clm7w97sj006hkb0mhg2sgmik","_id":"clm7w97sm006wkb0mgwrgh8tt"},{"post_id":"clm7w97rl001pkb0m0jrk7z1b","tag_id":"clm7w97sk006skb0m7do76hif","_id":"clm7w97sn006ykb0mabk110o9"},{"post_id":"clm7w97rm001skb0m8fw9edkc","tag_id":"clm7w97sj006hkb0mhg2sgmik","_id":"clm7w97sn0070kb0m14ma0wd4"},{"post_id":"clm7w97rm001ukb0m5brog5f8","tag_id":"clm7w97sj006hkb0mhg2sgmik","_id":"clm7w97so0075kb0mgp4f8w8e"},{"post_id":"clm7w97rm001ukb0m5brog5f8","tag_id":"clm7w97sn0072kb0mfhuw49bz","_id":"clm7w97so0077kb0me0fdb4kk"},{"post_id":"clm7w97rn001wkb0m1nnkgfv3","tag_id":"clm7w97so0074kb0m96jm3s4t","_id":"clm7w97sq007fkb0m7k7bhehq"},{"post_id":"clm7w97rn001wkb0m1nnkgfv3","tag_id":"clm7w97so0079kb0melulapw6","_id":"clm7w97sq007ikb0m768sg7ls"},{"post_id":"clm7w97rq001ykb0m50oegkxs","tag_id":"clm7w97sq007dkb0m9n6ihpwc","_id":"clm7w97ss007lkb0mghldgh0j"},{"post_id":"clm7w97rq0021kb0mfs99fipe","tag_id":"clm7w97sq007dkb0m9n6ihpwc","_id":"clm7w97st007tkb0mbo561ru9"},{"post_id":"clm7w97rq0021kb0mfs99fipe","tag_id":"clm7w97ss007okb0mg45nhwol","_id":"clm7w97st007vkb0m119hb9tw"},{"post_id":"clm7w97rr0024kb0meruuc9zj","tag_id":"clm7w97st007rkb0mdagk585v","_id":"clm7w97su007zkb0m7dr1guuz"},{"post_id":"clm7w97rr0024kb0meruuc9zj","tag_id":"clm7w97st007wkb0mak7fffga","_id":"clm7w97su0080kb0mdr7l7ov5"},{"post_id":"clm7w97rt0028kb0m1fa00qln","tag_id":"clm7w97su007ykb0m3bj13fdj","_id":"clm7w97su0082kb0m1owa6o3q"},{"post_id":"clm7w97ru002ckb0mdccdhjcn","tag_id":"clm7w97su0081kb0m9287akim","_id":"clm7w97sv0085kb0m5gg99h83"},{"post_id":"clm7w97ru002ckb0mdccdhjcn","tag_id":"clm7w97su0083kb0mbf437kvz","_id":"clm7w97sv0086kb0m0s2ra2ty"},{"post_id":"clm7w97ru002fkb0meld8hdax","tag_id":"clm7w97su0084kb0m7joj1sjs","_id":"clm7w97sv0088kb0m855o8owi"},{"post_id":"clm7w97rv002ikb0m5qsy74fk","tag_id":"clm7w97sv0087kb0mg1vfd9ld","_id":"clm7w97sv008bkb0meoxkgs10"},{"post_id":"clm7w97rv002ikb0m5qsy74fk","tag_id":"clm7w97sv0089kb0mg5cbcivl","_id":"clm7w97sw008ckb0m3ywq4qks"},{"post_id":"clm7w97rw002mkb0m93gjez4j","tag_id":"clm7w97sv008akb0m091y84sg","_id":"clm7w97sw008ekb0magdxbcyq"},{"post_id":"clm7w97rx002pkb0mg3pj2ygo","tag_id":"clm7w97sw008dkb0m9azp4nm9","_id":"clm7w97sw008hkb0m0xos9jze"},{"post_id":"clm7w97rx002pkb0mg3pj2ygo","tag_id":"clm7w97sw008fkb0me7k98bkr","_id":"clm7w97sw008ikb0md7902ss0"},{"post_id":"clm7w97s4003fkb0m6lrs2euj","tag_id":"clm7w97sw008gkb0mgizn1xm6","_id":"clm7w97sx008kkb0m1opc20op"},{"post_id":"clm7w97s4003fkb0m6lrs2euj","tag_id":"clm7w97sw008jkb0m79ov19kj","_id":"clm7w97sx008lkb0m0tsigyne"}],"Tag":[{"name":"hexo","_id":"clm7w97r00006kb0m3dim3lyf"},{"name":"configuration","_id":"clm7w97r4000ckb0mapcg9gge"},{"name":"tool","_id":"clm7w97r6000gkb0meiq282pu"},{"name":"SwiftUI","_id":"clm7w97r8000mkb0mgy37gzha"},{"name":"UIKit","_id":"clm7w97rb000tkb0mco5jddh5"},{"name":"ContentView","_id":"clm7w97rd0010kb0mh2p604rx"},{"name":"View","_id":"clm7w97rf0017kb0m8mai0z6m"},{"name":"random","_id":"clm7w97rk001lkb0mc3cq5r5c"},{"name":"errors","_id":"clm7w97rm001rkb0m0xrn6czg"},{"name":"exceptions","_id":"clm7w97rp001xkb0may0qd6gf"},{"name":"lazy","_id":"clm7w97rr0022kb0md3hic4vv"},{"name":"anonymous","_id":"clm7w97rt002akb0mgoqj0afp"},{"name":"nsstring","_id":"clm7w97rv002hkb0margtf5cr"},{"name":"string","_id":"clm7w97ry002rkb0mbvjyhbe8"},{"name":"read-only","_id":"clm7w97rz002xkb0m3j2l1zlh"},{"name":"computed","_id":"clm7w97s10035kb0m9eca2yy5"},{"name":"stored","_id":"clm7w97s4003ekb0m61wpemqj"},{"name":"singleton","_id":"clm7w97s6003mkb0m8swe9sgs"},{"name":"memory address","_id":"clm7w97s6003skb0mbqok43yu"},{"name":"force unwrapping","_id":"clm7w97s7003ykb0m04r18n3o"},{"name":"Implicitly Unwrapped","_id":"clm7w97s80045kb0m0ei27997"},{"name":"rethrows","_id":"clm7w97s9004ckb0mginqd8ei"},{"name":"Closures","_id":"clm7w97sa004ikb0mcunb20np"},{"name":"Capturing","_id":"clm7w97sb004pkb0mcsurfkrk"},{"name":"struct","_id":"clm7w97sb004wkb0m6fpe937r"},{"name":"class","_id":"clm7w97sc0053kb0m5d0k3dnb"},{"name":"performance","_id":"clm7w97sf005lkb0mf1wt0wbh"},{"name":"initialization","_id":"clm7w97sg005xkb0m1en2htrv"},{"name":"constructors","_id":"clm7w97sh0061kb0m4tt88sig"},{"name":"closures","_id":"clm7w97si006ckb0m9wqs6c4j"},{"name":"enumeration","_id":"clm7w97sj006hkb0mhg2sgmik"},{"name":"nested","_id":"clm7w97sk006skb0m7do76hif"},{"name":"recursive","_id":"clm7w97sn0072kb0mfhuw49bz"},{"name":"collection","_id":"clm7w97so0074kb0m96jm3s4t"},{"name":"zip","_id":"clm7w97so0079kb0melulapw6"},{"name":"protocol","_id":"clm7w97sq007dkb0m9n6ihpwc"},{"name":"associatedtype","_id":"clm7w97ss007okb0mg45nhwol"},{"name":"hybrid","_id":"clm7w97st007rkb0mdagk585v"},{"name":"macro","_id":"clm7w97st007wkb0mak7fffga"},{"name":"concurrency","_id":"clm7w97su007ykb0m3bj13fdj"},{"name":"async","_id":"clm7w97su0081kb0m9287akim"},{"name":"await","_id":"clm7w97su0083kb0mbf437kvz"},{"name":"nil","_id":"clm7w97su0084kb0m7joj1sjs"},{"name":"memory","_id":"clm7w97sv0087kb0mg1vfd9ld"},{"name":"leak","_id":"clm7w97sv0089kb0mg5cbcivl"},{"name":"crash","_id":"clm7w97sv008akb0m091y84sg"},{"name":"latitude","_id":"clm7w97sw008dkb0m9azp4nm9"},{"name":"longitude","_id":"clm7w97sw008fkb0me7k98bkr"},{"name":"Agile","_id":"clm7w97sw008gkb0mgizn1xm6"},{"name":"waterfall","_id":"clm7w97sw008jkb0m79ov19kj"}]}}