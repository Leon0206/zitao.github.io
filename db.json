{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/assets/cactus.png","path":"assets/cactus.png","modified":1,"renderable":0},{"_id":"source/assets/wallpaper-2311325.jpg","path":"assets/wallpaper-2311325.jpg","modified":1,"renderable":0},{"_id":"source/assets/wallpaper-2572384.jpg","path":"assets/wallpaper-2572384.jpg","modified":1,"renderable":0},{"_id":"source/assets/wallpaper-878514.jpg","path":"assets/wallpaper-878514.jpg","modified":1,"renderable":0},{"_id":"source/about/images/qrcode.bmp","path":"about/images/qrcode.bmp","modified":1,"renderable":0},{"_id":"source/assets/Swift/Tips/image00.jpg","path":"assets/Swift/Tips/image00.jpg","modified":1,"renderable":0},{"_id":"themes/cactus/source/css/rtl.styl","path":"css/rtl.styl","modified":1,"renderable":1},{"_id":"themes/cactus/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/cactus/source/images/apple-touch-icon.png","path":"images/apple-touch-icon.png","modified":1,"renderable":1},{"_id":"themes/cactus/source/images/favicon-192x192.png","path":"images/favicon-192x192.png","modified":1,"renderable":1},{"_id":"themes/cactus/source/images/favicon.ico","path":"images/favicon.ico","modified":1,"renderable":1},{"_id":"themes/cactus/source/images/logo.png","path":"images/logo.png","modified":1,"renderable":1},{"_id":"themes/cactus/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/cactus/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/clipboard/clipboard.min.js","path":"lib/clipboard/clipboard.min.js","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/jquery/jquery.min.js","path":"lib/jquery/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Bold.ttf","path":"lib/meslo-LG/MesloLGL-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGL-BoldItalic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Italic.ttf","path":"lib/meslo-LG/MesloLGL-Italic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Regular.ttf","path":"lib/meslo-LG/MesloLGL-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Bold.ttf","path":"lib/meslo-LG/MesloLGM-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGM-BoldItalic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Italic.ttf","path":"lib/meslo-LG/MesloLGM-Italic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Regular.ttf","path":"lib/meslo-LG/MesloLGM-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Bold.ttf","path":"lib/meslo-LG/MesloLGS-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGS-BoldItalic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Italic.ttf","path":"lib/meslo-LG/MesloLGS-Italic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Regular.ttf","path":"lib/meslo-LG/MesloLGS-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.eot","path":"lib/vazir-font/Vazir-Black.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.ttf","path":"lib/vazir-font/Vazir-Black.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff","path":"lib/vazir-font/Vazir-Black.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff2","path":"lib/vazir-font/Vazir-Black.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.eot","path":"lib/vazir-font/Vazir-Bold.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.ttf","path":"lib/vazir-font/Vazir-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff","path":"lib/vazir-font/Vazir-Bold.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff2","path":"lib/vazir-font/Vazir-Bold.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.eot","path":"lib/vazir-font/Vazir-Light.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.ttf","path":"lib/vazir-font/Vazir-Light.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff","path":"lib/vazir-font/Vazir-Light.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff2","path":"lib/vazir-font/Vazir-Light.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.eot","path":"lib/vazir-font/Vazir-Medium.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.ttf","path":"lib/vazir-font/Vazir-Medium.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff","path":"lib/vazir-font/Vazir-Medium.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff2","path":"lib/vazir-font/Vazir-Medium.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.eot","path":"lib/vazir-font/Vazir-Regular.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.ttf","path":"lib/vazir-font/Vazir-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.woff","path":"lib/vazir-font/Vazir-Regular.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.woff2","path":"lib/vazir-font/Vazir-Regular.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.eot","path":"lib/vazir-font/Vazir-Thin.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.ttf","path":"lib/vazir-font/Vazir-Thin.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff","path":"lib/vazir-font/Vazir-Thin.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff2","path":"lib/vazir-font/Vazir-Thin.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.eot","path":"lib/vazir-font/Vazir-Variable.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.ttf","path":"lib/vazir-font/Vazir-Variable.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.woff","path":"lib/vazir-font/Vazir-Variable.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.woff2","path":"lib/vazir-font/Vazir-Variable.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/font-face.css","path":"lib/vazir-font/font-face.css","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","path":"lib/font-awesome/webfonts/fa-brands-400.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","path":"lib/font-awesome/webfonts/fa-regular-400.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","path":"lib/font-awesome/webfonts/fa-solid-900.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-v4compatibility.ttf","path":"lib/font-awesome/webfonts/fa-v4compatibility.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-v4compatibility.woff2","path":"lib/font-awesome/webfonts/fa-v4compatibility.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","path":"lib/justified-gallery/css/justifiedGallery.min.css","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","path":"lib/justified-gallery/js/jquery.justifiedGallery.min.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"34e4d42befe0f95ca7e4ff2d7eae4ea8e37e7c6d","modified":1692110732788},{"_id":"source/_posts/.DS_Store","hash":"38ab89cd8992ed44781741e1a1a1505e7d3f6d2c","modified":1692110732826},{"_id":"source/_drafts/draft1.md","hash":"66654f23017ce4ddc0b6f608c4951a024e8b320e","modified":1692081783313},{"_id":"source/about/.DS_Store","hash":"77adaae9ad1d5df0f44fb5fc7926f913acc3a2bc","modified":1692110732787},{"_id":"source/about/index.md","hash":"bbc453066e3d771e5d97ca98a764fa0ca436e6ac","modified":1692088841850},{"_id":"source/search/index.md","hash":"2b8a605872a558552e6c9e4dcc47d0b38b5773fa","modified":1692043978970},{"_id":"source/assets/.DS_Store","hash":"c709f665e1e78cd3d53519eb8b7e2a8a40b84c48","modified":1692110732761},{"_id":"source/categories/index.md","hash":"37a6458fc4e0e44f3ceddb32b326f15081806d88","modified":1692043991587},{"_id":"source/tags/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1692044659745},{"_id":"source/tags/index.md","hash":"771d3c462625b9b564baa21b16b7b2aa44c2c9ec","modified":1692044693854},{"_id":"source/_posts/Swift/.DS_Store","hash":"150dbe23bb97a677d51a08e3ae14f30933a3424f","modified":1692110732763},{"_id":"source/about/images/qrcode.bmp","hash":"a4dcee22ec1e54d4441d602e4a1baaa826ad4705","modified":1692083753427},{"_id":"source/assets/Swift/.DS_Store","hash":"788bcefde70b84ba3a84abee4bd336e89e3cad92","modified":1692110732809},{"_id":"source/_posts/Swift/00. Tips/00. Generation of random numbers.md","hash":"1f8bf985c20e4899ffb8a10085685470d59574c6","modified":1692090843345},{"_id":"source/_posts/Swift/00. Tips/01. Handling of errors and exceptions.md","hash":"c9c3b35d6ac1ecba57d28786379bb4e3a7c46009","modified":1692090849045},{"_id":"source/_posts/Swift/00. Tips/02. Lazy loading and Anonymous function.md","hash":"a69105388338e8f27317896a75ff79375ce821bd","modified":1692090894625},{"_id":"source/_posts/Swift/00. Tips/03. NSString and String.md","hash":"0d4c9238b1c39718a4aff1e1154e2287e505190c","modified":1692090796519},{"_id":"source/_posts/Swift/00. Tips/04. Set Read-only permission of the property.md","hash":"670cedef878edba1a9447df80b530a5144dd528f","modified":1692090873781},{"_id":"source/_posts/Swift/00. Tips/05. Computed properties and Stored properties.md","hash":"e72c8dd2fc0c286d3ffff21d394d2e409e39d923","modified":1692091006244},{"_id":"source/_posts/Swift/00. Tips/06. How to Define a singleton?.md","hash":"218c5aa36cee44c364cdb8553431d9b63d23ef74","modified":1692091026876},{"_id":"source/_posts/Swift/00. Tips/07. How to print the memory address of a variable?.md","hash":"9fada94f9428bce225895509af1f8595a70b5c92","modified":1692091066684},{"_id":"source/_posts/Swift/00. Tips/08. Implicitly Unwrapped Optionals and Force unwrapping.md","hash":"de40d2fbf184373fac2ae6ea3d7b256edba69f7f","modified":1692091115140},{"_id":"source/_posts/Swift/02. Closures/.DS_Store","hash":"038721af54d7f958a44270824333e6739d4d38ef","modified":1692110054641},{"_id":"source/_posts/Swift/02. Closures/00. Three Forms of Closures.md","hash":"79553d546b17503f560351e7de56be9b43a2552d","modified":1692091998676},{"_id":"source/_posts/Swift/02. Closures/01. Capturing Values.md","hash":"730e831746d256ab70b4d5fc5ab16696cb9e7ac5","modified":1692110179831},{"_id":"source/assets/Swift/Tips/image00.jpg","hash":"5f98da7ebb53b3a5c9f6f46cef3ad4ac1fab604c","modified":1677588464882},{"_id":"source/assets/cactus.png","hash":"4633bf3d6601dfa2dc86ac8341df85e440dff128","modified":1692108039130},{"_id":"source/assets/wallpaper-2572384.jpg","hash":"1df3620ab8c69fe2498a746f8ead057162df0637","modified":1692108039134},{"_id":"themes/cactus/.DS_Store","hash":"7e7c40954bb2ff8598f0b1dc91e244f536042a79","modified":1692040877155},{"_id":"themes/cactus/.gitignore","hash":"72267ee409a324fc197c150b3c4bf28b87b709a8","modified":1685777179000},{"_id":"themes/cactus/.stylintrc","hash":"eb5f48e83657928cb0cbee031373b2cd36ca0083","modified":1685777179000},{"_id":"themes/cactus/.jshintrc","hash":"2548bd6ce44422edc7e6f9f68061ab47f26c4f57","modified":1685777179000},{"_id":"themes/cactus/LICENSE","hash":"346ece39a983b0e7858c11f785cd846cef9eb875","modified":1685777179000},{"_id":"themes/cactus/README.md","hash":"52fafba48b0c792478e134a659bc8f0f61b4557b","modified":1685777179000},{"_id":"themes/cactus/_config.yml","hash":"a041df6b55cb476c1a2eb625a9ed044afadbf426","modified":1692091519686},{"_id":"themes/cactus/gulpfile.js","hash":"70d419549ba72e0906fd2fc8103701142eb883a7","modified":1685777179000},{"_id":"themes/cactus/package.json","hash":"dbb0a486006e7d4ecdb4b005b6a9b264b5d542dc","modified":1685777179000},{"_id":"themes/cactus/languages/ar.yml","hash":"81a88b0593fc89de3118d686681b1f69883c847b","modified":1685777179000},{"_id":"themes/cactus/languages/ca.yml","hash":"b79dd2c21dc6697c635e92db1f661a4b8d5d2305","modified":1685777179000},{"_id":"themes/cactus/languages/de.yml","hash":"43b2f4e078b042aaae0377a4235216a51ed82e0d","modified":1685777179000},{"_id":"themes/cactus/languages/default.yml","hash":"6a84970bf69c3e9490e5382747ca2b4c4b4dccde","modified":1685777179000},{"_id":"themes/cactus/languages/en.yml","hash":"6a84970bf69c3e9490e5382747ca2b4c4b4dccde","modified":1685777179000},{"_id":"themes/cactus/languages/es.yml","hash":"2b1fc8b0d636123e9ee39017fa20053bd1913a5a","modified":1685777179000},{"_id":"themes/cactus/languages/fa.yml","hash":"63f32e50953af1c4bd0308a4fca5862b5287c2cb","modified":1685777179000},{"_id":"themes/cactus/languages/it.yml","hash":"62800bcae1f2d2454f87f4bcf4d7593848424f61","modified":1685777179000},{"_id":"themes/cactus/languages/fr.yml","hash":"5c07406998f19d219a5a7b65c0d88b6b023f85b2","modified":1685777179000},{"_id":"themes/cactus/languages/kr.yml","hash":"651fb83991c91b13b53ed55740e5402cf0f1c5e8","modified":1685777179000},{"_id":"themes/cactus/languages/nl.yml","hash":"ac0573352ad2c737a7686bcca498b985e7bd6447","modified":1685777179000},{"_id":"themes/cactus/languages/pl.yml","hash":"8a2d6dc874d86c38d42c2c861c39590647b5d536","modified":1685777179000},{"_id":"themes/cactus/languages/pt-br.yml","hash":"4859aba788a050c2d5d0b997693b0c8c24b349f7","modified":1685777179000},{"_id":"themes/cactus/languages/ru.yml","hash":"81b57fcd1977ef534f4bf303dbc1b4710cc7f057","modified":1685777179000},{"_id":"themes/cactus/languages/tr.yml","hash":"2702914007e6bade9d6861078c0e179ac05bf48c","modified":1685777179000},{"_id":"themes/cactus/languages/vi.yml","hash":"f84893c3ec3e45875c90069e14b17ed3016ed973","modified":1685777179000},{"_id":"themes/cactus/languages/zh-CN.yml","hash":"d016060817311addb4c528de440126b975038c31","modified":1685777179000},{"_id":"themes/cactus/languages/zh-TW.yml","hash":"2f4e050c9b35a67f4a7278cec3a949533c2ac16a","modified":1685777179000},{"_id":"themes/cactus/layout/404.ejs","hash":"b911da998c160cceb8cd7c4dae709a1374ed2491","modified":1685777179000},{"_id":"themes/cactus/layout/archive.ejs","hash":"8e9bb1199694b229d2a3de1c3a55188a28e6f5e7","modified":1685777179000},{"_id":"themes/cactus/layout/index.ejs","hash":"fb73e020655ec4696eb7f91a350bf3b9c0fa2755","modified":1685777179000},{"_id":"themes/cactus/layout/layout.ejs","hash":"e03062a5a70d71dff9f09dd86769d1a13b33afd9","modified":1685777179000},{"_id":"themes/cactus/layout/page.ejs","hash":"c5465d5315a7544aa466b01fd8cfb62917a8bb1d","modified":1685777179000},{"_id":"themes/cactus/layout/post.ejs","hash":"f8eac342118298447ef38c21f9560a359e488395","modified":1685777179000},{"_id":"themes/cactus/source/.DS_Store","hash":"44d7b2c711f5b0e064f79cb28a42499f79e3ae37","modified":1692110732827},{"_id":"themes/cactus/scripts/cdn.js","hash":"887edec364d51efa7c524446483188c6ad05adaf","modified":1685777179000},{"_id":"themes/cactus/scripts/error_404.js","hash":"f83b290e47cb78a2754152fccc34e571a72087bd","modified":1685777179000},{"_id":"themes/cactus/scripts/merge-configs.js","hash":"2048c3415d96b17b9d84aa44bc0c25f1210525f8","modified":1685777179000},{"_id":"themes/cactus/scripts/meta.js","hash":"654868666b6573b2cee7e750b47ad8a3c2ee13a0","modified":1685777179000},{"_id":"themes/cactus/scripts/page_title.js","hash":"fa662dbdb82779af1b95e35ed7ccdf4866a53dee","modified":1685777179000},{"_id":"themes/cactus/scripts/thumbnail.js","hash":"df8829fd8c3119650037eba5ec11bdce06acff9d","modified":1685777179000},{"_id":"themes/cactus/layout/_partial/comments.ejs","hash":"4e75035a427fd137ae7f12940209e8e97845df3b","modified":1685777179000},{"_id":"themes/cactus/layout/_partial/footer.ejs","hash":"12fd63b51472c9c5b8b7d167eb1a96bf1d686c20","modified":1685777179000},{"_id":"themes/cactus/layout/_partial/google_analytics.ejs","hash":"64aeee0fdfc06207573ddbf8b91f6d3f007ccea9","modified":1685777179000},{"_id":"themes/cactus/layout/_partial/head.ejs","hash":"4709e17487315e8f0a5b38f0611f0244f16fdd87","modified":1685777179000},{"_id":"themes/cactus/layout/_partial/header.ejs","hash":"21d60f0bb82367cc2bee0c7eb3c06c7f5ab56a6d","modified":1685777179000},{"_id":"themes/cactus/layout/_partial/pagination.ejs","hash":"247bf8ec39965fe07b52f5a3d04e02e0aaf2da57","modified":1685777179000},{"_id":"themes/cactus/layout/_partial/scripts.ejs","hash":"9bbc0cf2dd0d7cdaafe827c3945a9bea1503da83","modified":1685777179000},{"_id":"themes/cactus/layout/_partial/search.ejs","hash":"8b4bf9cf5db0ce762a31fc3baae0f2fc004bece4","modified":1685777179000},{"_id":"themes/cactus/layout/_partial/styles.ejs","hash":"c6bc7e8a422c5bb57f88fed1d1b0694d03e24e74","modified":1685777179000},{"_id":"themes/cactus/layout/_partial/umami_analytics.ejs","hash":"3e79be7343c4d0a5971d3aa659e3750672a91e72","modified":1685777179000},{"_id":"themes/cactus/source/css/.DS_Store","hash":"1148eeb79c2c7a779586e545a1be9a338e46ca1a","modified":1692040343035},{"_id":"themes/cactus/source/css/_extend.styl","hash":"b6a4e5905a7515dda66919167531a5ab2b3d1fe2","modified":1685777179000},{"_id":"themes/cactus/source/css/_fonts.styl","hash":"354809b5a64e8a47a66c66fd1a28ac597c1460a6","modified":1685777179000},{"_id":"themes/cactus/source/css/_mixins.styl","hash":"1a9e309523df9685e8d088dcff0a809c58e2c392","modified":1685777179000},{"_id":"themes/cactus/source/css/_util.styl","hash":"2bfeb2e2605dd5235693b00c71a212646d2e0410","modified":1685777179000},{"_id":"themes/cactus/source/css/_variables.styl","hash":"69d9c5e95edcaee5ccd8218262b989ce721cce79","modified":1685777179000},{"_id":"themes/cactus/source/css/rtl.styl","hash":"ff8700e1626feeb53d905a2df2777bda7d1eca50","modified":1685777179000},{"_id":"themes/cactus/source/css/style.styl","hash":"4ee0091bfa3cf43fa528d54df378f3d977257342","modified":1685777179000},{"_id":"themes/cactus/source/images/apple-touch-icon.png","hash":"57e2def34682655f41a0be2d083f16765ba7858b","modified":1685777179000},{"_id":"themes/cactus/source/images/favicon-192x192.png","hash":"96e6fcbbb13a5914a6131391e210eb7dfd13d692","modified":1685777179000},{"_id":"themes/cactus/source/images/favicon.ico","hash":"189f9842bcb79a6f8f9e8445bc8bbd773443826b","modified":1685777179000},{"_id":"themes/cactus/source/js/main.js","hash":"619ac6529d140711e3b14f739a192bb31c4824ff","modified":1685777179000},{"_id":"themes/cactus/source/js/search.js","hash":"914a2ce72fb325106c61600200be823b72bfb39f","modified":1685777179000},{"_id":"themes/cactus/source/lib/.DS_Store","hash":"28f0378331a0a08009bd483874b79042a3462f26","modified":1692040343056},{"_id":"themes/cactus/layout/_partial/post/actions_desktop.ejs","hash":"54a590e39e2d6e9ee41b8a1423a7bc67ab03363d","modified":1685777179000},{"_id":"themes/cactus/layout/_partial/post/actions_mobile.ejs","hash":"5ee47fffaf428802cfe47dd2e6186c6bbff85067","modified":1685777179000},{"_id":"themes/cactus/layout/_partial/post/category.ejs","hash":"aeb99694d8492d4fcda320493b259fb68bf21830","modified":1685777179000},{"_id":"themes/cactus/layout/_partial/post/date.ejs","hash":"23770328c7d900ecc7fd87930dc24b095eb272ac","modified":1685777179000},{"_id":"themes/cactus/layout/_partial/post/gallery.ejs","hash":"9aecd8908e8a684f33dc20c02497c0f1774137c7","modified":1685777179000},{"_id":"themes/cactus/layout/_partial/post/share.ejs","hash":"9a15a7c005cfe518fdc9ec61a5107c76012f49d0","modified":1685777179000},{"_id":"themes/cactus/layout/_partial/post/tag.ejs","hash":"80bd2afd49b296e6441ab977a0614add710c32a3","modified":1685777179000},{"_id":"themes/cactus/layout/_partial/post/title.ejs","hash":"b2a00781d1301ff4d362b5d2a97480052ee4cae1","modified":1685777179000},{"_id":"themes/cactus/source/css/_colors/classic.styl","hash":"bc09f8777a6c99030da953dfdb84f793c5e4fd85","modified":1685777179000},{"_id":"themes/cactus/source/css/_colors/dark.styl","hash":"9aa43b1f23d5d268dfa36bd942d6ce97b7677c4d","modified":1685777179000},{"_id":"themes/cactus/source/css/_colors/light.styl","hash":"d14ef1aa02d0895b6f9321ebfc23a1ec84b054b8","modified":1685777179000},{"_id":"themes/cactus/source/css/_colors/white.styl","hash":"88e93a9d3fe1d0270d65cabdeacc18bd94d45937","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/agate.styl","hash":"53027913ed8d4f75ac3e49e76aad824f0df62da3","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/androidstudio.styl","hash":"2af0861725f97f0ee2ded67c3d2d4548c62b2d16","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/arta.styl","hash":"b3e81e3e694ceb8deed178adb8b91013c5120e30","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-cave-dark.styl","hash":"ce63dd8548688d88254405eedfa75b1d7c82449e","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-dune-dark.styl","hash":"c196ff0ee064af0e507823694ae39020addfc280","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-estuary-dark.styl","hash":"0bb16a4eff93688f40787abc2f9e56e7d5cc93e7","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-forest-dark.styl","hash":"effbc5d75fa87203c847039869c22031b40d5b7d","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-heath-dark.styl","hash":"9a2e9a1d0a01bbdf158560c3ed1c134e098b2c68","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-lakeside-dark.styl","hash":"10ee3882fca7b97a37bd309d2d35fce9868647bb","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-plateau-dark.styl","hash":"84c80e6f67f62fce958d25817c277d2360272617","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-savanna-dark.styl","hash":"e32c1c70def8060fce5e790979a126da650ac642","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-seaside-dark.styl","hash":"2edf385215bbe1985b1a10106525d362667d28c2","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"538a14321193cd8abf2ddc484306631e54149ffb","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/brown-paper.styl","hash":"c2326ba20a5020a66ca7895258d18833327d4334","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/codepen-embed.styl","hash":"8b7b34484f76a6c2c3b1a9e49abb9b382f439ae8","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/dark.styl","hash":"f5e6e75958de59e87fc6be3a1668e870e20bc836","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/darkula.styl","hash":"9717efa9194837ba3fb4d762997d33075dcf8bfa","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/far.styl","hash":"aaac3028f5e33123cd123a583cddc9290c45ec8e","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/gruvbox-dark.styl","hash":"76b744c14fd5600bea64731c05df97c2df75523f","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/highlightjs.styl","hash":"0e198b7a59191c7a39b641a4ddd22c948edb9358","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/hopscotch.styl","hash":"1378a6bc67a32c0cbff72ab771268b53f9aa586d","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/hybrid.styl","hash":"b8eb5c69d12f2ee5ebc50265ae271699d7f1a8d3","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/index.styl","hash":"002d5596f6379cc87dbd43d9145bc764aa666be1","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/ir-black.styl","hash":"53e5d74326a4527b92272bbd6946d4fec92720e8","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/kimbie.styl","hash":"51b889ca7c6fe178cfbbe28d875a6ea427184441","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/monokai-sublime.styl","hash":"c385b11345894be7e6ce3c5f08663e199933b8e4","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/monokai.styl","hash":"f87be027848ea6bee623a08ad1e17b2f5b7937ee","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/obsidian.styl","hash":"199e28326be8590883f0813ebbd54fcfaa4750fd","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/paraiso.styl","hash":"75f181eece6b71d033ea0c8d6cf00ae7efb9e29b","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/pojoaque.styl","hash":"4e7b6b046b8575ac749f6aec4e953a62ada27a36","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/railscasts.styl","hash":"b6674db9210e0c4444e4835fff2d1361f3ebd64c","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/rainbow.styl","hash":"c0cf97aae3e10fdcd10414547a711c9effbc39b8","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/school-book.styl","hash":"d43560fe519a931ce6da7d57416d7aa148441b83","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/solarized-dark.styl","hash":"90c9da5aa594383697e5b18892a7f95beb053f55","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/sunburst.styl","hash":"af3eec0fd56151e55bbd49c31b151f36717611d8","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-blue.styl","hash":"f24c17d0ab815dcfaab3438cb9fe2ab4839f5e0d","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-bright.styl","hash":"7674fecb6d27350727dc0d2dc93bc018382ebbd0","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-eighties.styl","hash":"28d751075ebabf7d0327a36f725076fe82fdf626","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night.styl","hash":"16ba09b2db501e4e3e2e7d62595d9bf935bf27c4","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/zenburn.styl","hash":"68ff9332ccc03f9389b15b713415cde016f8088f","modified":1685777179000},{"_id":"themes/cactus/source/css/_partial/archive.styl","hash":"31aef892437d5734a134c34f2a8a6610a8f671c3","modified":1685777179000},{"_id":"themes/cactus/source/css/_partial/article.styl","hash":"258370d8ab98e63804ead9bc030f633ca97a1235","modified":1685777179000},{"_id":"themes/cactus/source/css/_partial/categories.styl","hash":"a43f00e61b3507f130b8a3f8108a4eeca147c2a0","modified":1685777179000},{"_id":"themes/cactus/source/css/_partial/comments.styl","hash":"1e90f1fb9d4c155df518cacb5a537e9de9c042c1","modified":1685777179000},{"_id":"themes/cactus/source/css/_partial/footer.styl","hash":"61c2c7c5f73a0022ec41830bea0812a97f522d7c","modified":1685777179000},{"_id":"themes/cactus/source/css/_partial/header.styl","hash":"8ce12f14382b6d471e3fe1266573b34fa84deaa0","modified":1685777179000},{"_id":"themes/cactus/source/css/_partial/index.styl","hash":"59c99f4ea3a73bf47ce030df166c5e33d5de31fb","modified":1685777179000},{"_id":"themes/cactus/source/css/_partial/pagination.styl","hash":"950bf517bbe7adb9a9aa4eb5ddec74ffc7598787","modified":1685777179000},{"_id":"themes/cactus/source/css/_partial/search.styl","hash":"159be002780c62a77f46947cf854a7342fba24f4","modified":1685777179000},{"_id":"themes/cactus/source/css/_partial/tags.styl","hash":"d571d5c7c960300d29c5f0ec3fe1140322ecd6b3","modified":1685777179000},{"_id":"themes/cactus/source/css/_partial/tooltip.styl","hash":"2daff581ec3efaec840cbfdee512195919c32629","modified":1685777179000},{"_id":"themes/cactus/source/lib/clipboard/clipboard.min.js","hash":"9a7cb405f9beed005891587d41f76a0720893ffc","modified":1685777179000},{"_id":"themes/cactus/source/lib/font-awesome/.DS_Store","hash":"163818f8a0c6ce6a884baaaf8e19886d83b8c8d4","modified":1692110732779},{"_id":"themes/cactus/source/lib/justified-gallery/.DS_Store","hash":"dff321e4e2ba49992df0b63b5a44b65939d8e7a5","modified":1692110732777},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff","hash":"f6fda2de0348b3e3b7de73267f9f8e97a62f8353","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff2","hash":"7ea4fd7dd4cd4f480af78a0e2c5849eb921b1aeb","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff","hash":"56e632c9196fac364c66f812a3b4635dd999ad1c","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff2","hash":"6e40d0c7669c1adbcbf034bdc459f7bed4d6676d","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff","hash":"1c3dbf17411b1f6a6b22c2b76e9d8511586643d0","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff2","hash":"50b654d916204c30987d1987abd890ef92085ae3","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff","hash":"43a8aaa3fca8721dd32a5d20f7a98dfbc87c97fd","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff2","hash":"14b3e257c51a6a11d23b2a078017ff340c9777e4","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.woff","hash":"235889d59ddad2b1f3243ccaab7733bd713a2a21","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.woff2","hash":"a9714ffb842afc74836e64de04b52d8c37c87c8a","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff","hash":"c0e784de2eb5261cca244928f8a81fd893c3fe16","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff2","hash":"9b03b1a9071709f5b7dbca13412ecef6cb7a2a67","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.woff","hash":"2e8e6d38d361def5f48baac366f04e3db3ed4828","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.woff2","hash":"e213bb26bc7f10e1df3fe2d03d3ecaecd6e6d371","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/font-face.css","hash":"ba0030e1cd28a8caa7a5bb74b98da7c7bb185c90","modified":1685777179000},{"_id":"themes/cactus/source/css/_partial/post/actions_desktop.styl","hash":"a1f36f9a3fd5ffcd832bf39e9402678978035d48","modified":1685777179000},{"_id":"themes/cactus/source/css/_partial/post/actions_mobile.styl","hash":"0d2966c1d870392476864af8ee3ba312ba30cb82","modified":1685777179000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"fb363d27cfdfe71a243fa2ac3dab2815232b9b7e","modified":1685777179000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"67afa6237670ab99125056f2899129f22912dcf3","modified":1685777179000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-v4compatibility.ttf","hash":"a9d072aca9e0fadc2a7167671ce3d6b18d9cd2cc","modified":1685777179000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-v4compatibility.woff2","hash":"8f80d0bbe995f7fe92320fdaec10cd5ccd710a51","modified":1685777179000},{"_id":"themes/cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","hash":"dd3052149d3054f35efb823c68dd78e78aad5875","modified":1685777179000},{"_id":"themes/cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","hash":"ad8f48b4022498078b089fcdd1e8b47faf496931","modified":1685777179000},{"_id":"themes/cactus/source/lib/jquery/jquery.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.eot","hash":"91152bd73e7ff8d943e3bde3ddb0fa0a018e1c21","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.ttf","hash":"b65915e3fa57b5c19995d15dc2341d115c1971b9","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.eot","hash":"5c1c680fade45393e4a5bb4548a092cd5ea6811e","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.ttf","hash":"122bb778b17a152c426a825ee981610a4bd59bf3","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.eot","hash":"a059359e9bea17dc2ff2ede955a05bf0dc4d00d0","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.ttf","hash":"df82b80c4d3b11e70dcd269fc62ac97cbfa0414d","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.eot","hash":"d9ec1f9f3fefd57e446cbe86dc297f1ff269b6de","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.ttf","hash":"948a091f0fdb8c7ae17d5ef8e51bd8830d65dd9a","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.eot","hash":"521c01f0eb79a48025e972ecbe21b0d7fb15437b","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.ttf","hash":"643c28c8f8a2bce1a0d62525aa045cd9883773cd","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.eot","hash":"a0ea0bdaef00b35544f9a21d25d35db9a79f7189","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.ttf","hash":"6aacb0eecb03c660570b6e159ba5ca97ca7461cf","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.eot","hash":"af46f7f4e10a1440a4c97b350622d279143e6798","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.ttf","hash":"1e08b6373c2e086f24776df9b11e4be6bbcc8a4a","modified":1685777179000},{"_id":"themes/cactus/source/lib/font-awesome/css/all.min.css","hash":"8c06d82739d14b094ff6d9036021a252bd1d985d","modified":1685777179000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"4350f9ba93384634faf35f41c503c99c767f1069","modified":1685777179000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"f0982a77285d53653845b0a78170b4688db972f1","modified":1685777179000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"6b99aa650bd12a36caa14e0127435d8f4cd3ba73","modified":1685777179000},{"_id":"themes/cactus/source/images/logo.png","hash":"0e3029251dfda26adee2761f71377297e8c26871","modified":1685777179000},{"_id":"source/assets/wallpaper-878514.jpg","hash":"9f9705a377c42320b335b3c66b023e62b80e56e3","modified":1692108039138},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"20bd663830188cbadd2264e1daf9497c3ffc3621","modified":1685777179000},{"_id":"source/assets/wallpaper-2311325.jpg","hash":"ddaaaeb4fa04a05c83053c1f8149720d18c9c8de","modified":1692108039132},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Italic.ttf","hash":"96c97a0a098ca40802f948ae56fa37aa6683d034","modified":1685777179000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Italic.ttf","hash":"68700db02debd4b922304134da83b829cbfddfc9","modified":1685777179000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Italic.ttf","hash":"7f7cdbdcc26279c04046632e22d872f111bc9399","modified":1685777179000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Bold.ttf","hash":"bfa1ed9a263ed78462f06d322de13bd5bd0906b2","modified":1685777179000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","hash":"a9a431fc7a6c3a67c98021d4035c12a07a4f1070","modified":1685777179000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Regular.ttf","hash":"2b912dd13f052f645ee19951604610bb350d50af","modified":1685777179000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Bold.ttf","hash":"a8a8df3393bccc365335fc5eb0a62a6b7ccd32b9","modified":1685777179000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","hash":"65ddb11e75ee93909e845ab912a36717c48f1c94","modified":1685777179000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Regular.ttf","hash":"5e220152adefe905b2197f873d7cee99eca50e91","modified":1685777179000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Bold.ttf","hash":"df202ce09cbdc70bc16b81983a13ef0f94e46f10","modified":1685777179000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","hash":"d895a1bd25e36c58b7f463ebe14de09f186d5ab4","modified":1685777179000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Regular.ttf","hash":"56fa0e33a390b704afc56af93a31576ccdbbdd9e","modified":1685777179000},{"_id":"public/search.xml","hash":"e5a8bdec358c404e20760a812f88727b15d17b2a","modified":1692111038169},{"_id":"public/about/index.html","hash":"9e8ffe6070b8cd45fcd1629793c1e0b6fdcbf9fd","modified":1692111038169},{"_id":"public/search/index.html","hash":"e8d20fb5d2c03268d195b7085eceb6e2adff5170","modified":1692111038169},{"_id":"public/categories/index.html","hash":"5f7e956894f86cb20258eb5524e66811976ed89c","modified":1692111038169},{"_id":"public/tags/index.html","hash":"169189a1a4bdf8e9b520eae3c776202080e9c2ba","modified":1692111038169},{"_id":"public/categories/Swift/index.html","hash":"b25fecdd6d0ab79b8b8deb09873944f5166d4e8f","modified":1692111038169},{"_id":"public/categories/Swift/page/2/index.html","hash":"4f6ad8e9d404153c07f63ad982a12fc0662ea91b","modified":1692111038169},{"_id":"public/categories/Swift/00-Tips/index.html","hash":"279dc90f923bd1657c599db65d13c04726587710","modified":1692111038169},{"_id":"public/categories/Swift/02-Closures/index.html","hash":"318aedb4c2f6364ccb3dff94d26e35672d0722f3","modified":1692111038169},{"_id":"public/archives/index.html","hash":"b89472156c8780883cb38080470d7c540f50f9ce","modified":1692111038169},{"_id":"public/archives/page/2/index.html","hash":"55b7120429f4ec2f3898f8dc9ae42b9d9a43ee14","modified":1692111038169},{"_id":"public/archives/2023/index.html","hash":"29a38244af1f697cf5a297bb912bff3be9f433f8","modified":1692111038169},{"_id":"public/archives/2023/page/2/index.html","hash":"fad80231d375794396bb8f691457cae2aa8a270c","modified":1692111038169},{"_id":"public/archives/2023/02/index.html","hash":"9a84016e82a207095ac6110995319b85e1f31dc7","modified":1692111038169},{"_id":"public/archives/2023/03/index.html","hash":"db8d422dc93faa409282be1babe041ee7a8bfb0c","modified":1692111038169},{"_id":"public/index.html","hash":"58e0b9d0739b3483bade0e79b7dbaba73fa6613d","modified":1692111038169},{"_id":"public/tags/random/index.html","hash":"e864429be53b657fd70e6bc2535e192bdbecc2ac","modified":1692111038169},{"_id":"public/tags/errors/index.html","hash":"df57984e7172b5d71a58669dc0942a22a78bba33","modified":1692111038169},{"_id":"public/tags/exceptions/index.html","hash":"9fa6ea2a31e4988aef15d7d092acfd04c53238d1","modified":1692111038169},{"_id":"public/tags/Lazy/index.html","hash":"2db448366f04af2468a753eeb104589170e71c31","modified":1692111038169},{"_id":"public/tags/Anonymous/index.html","hash":"da2c7d196f364ded556fb80624a8e12dff15bf94","modified":1692111038169},{"_id":"public/tags/NSString/index.html","hash":"66b72076ad74fd3f293b37124c5fba03de276583","modified":1692111038169},{"_id":"public/tags/String/index.html","hash":"590fbf5363929b91f9dc9949ef20d13e75fab63a","modified":1692111038169},{"_id":"public/tags/Read-only/index.html","hash":"0c699cfc967e86934444400f4ae41772dd996ff2","modified":1692111038169},{"_id":"public/tags/Computed/index.html","hash":"4274c77ba0b805e9a949b4403813ab06fa5eea1b","modified":1692111038169},{"_id":"public/tags/Stored/index.html","hash":"c3ac2da4e000f3ab4ff8f2d6992282817221ccb8","modified":1692111038169},{"_id":"public/tags/singleton/index.html","hash":"965f37a8e33633fee832aeb34942587361cbf3eb","modified":1692111038169},{"_id":"public/tags/memory-address/index.html","hash":"b57f24b6451ee7ff0acda048c0a6512f5308ba4a","modified":1692111038169},{"_id":"public/tags/Force-unwrapping/index.html","hash":"3a9474bee66a28631e32235ab68b01cb8ed27dc9","modified":1692111038169},{"_id":"public/tags/Implicitly-Unwrapped/index.html","hash":"8f93789fffc1ab7c3631e6b58a815d72648fbb48","modified":1692111038169},{"_id":"public/tags/Closures/index.html","hash":"88e44735b5a3e9422eb4024834c3e49da6fe0e23","modified":1692111038169},{"_id":"public/tags/Capturing/index.html","hash":"069d603835f0328d1f3b416a0dd81aab1ae122c6","modified":1692111038169},{"_id":"public/404.html","hash":"341c5cb4371dc4e45ca42c9e34c6cfbe35dde49e","modified":1692111038169},{"_id":"public/2023/03/01/Swift/02. Closures/00. Three Forms of Closures/index.html","hash":"871fc02f452c655f9e83e93ff0ed5af9369490b7","modified":1692111038169},{"_id":"public/2023/03/01/Swift/02. Closures/01. Capturing Values/index.html","hash":"15d656c4023f4aff7f1cac3545b9506c51935e6a","modified":1692111038169},{"_id":"public/2023/02/28/Swift/00. Tips/08. Implicitly Unwrapped Optionals and Force unwrapping/index.html","hash":"57734ec638df29cf1d06d6846b9190c9cb99c8c3","modified":1692111038169},{"_id":"public/2023/02/28/Swift/00. Tips/07. How to print the memory address of a variable","hash":"84dbc845187a723c6f3480c1c07554815bd75679","modified":1692111038169},{"_id":"public/2023/02/28/Swift/00. Tips/06. How to Define a singleton","hash":"32e6fae7f07c5debda615040e5983b196e50a26e","modified":1692111038169},{"_id":"public/2023/02/28/Swift/00. Tips/05. Computed properties and Stored properties/index.html","hash":"5d2b2b7bb3cc63263ca51ee711cb57ba399984c5","modified":1692111038169},{"_id":"public/2023/02/28/Swift/00. Tips/04. Set Read-only permission of the property/index.html","hash":"581d0bff5d1a4ef86d6d9c19fc95b46902eb3317","modified":1692111038169},{"_id":"public/2023/02/28/Swift/00. Tips/03. NSString and String/index.html","hash":"0fa99ddc6df12d2bf5f3feffc0631d7b5e8902b1","modified":1692111038169},{"_id":"public/2023/02/28/Swift/00. Tips/02. Lazy loading and Anonymous function/index.html","hash":"7416a6f4474d50392bf4ba54cf1e8db071819ce1","modified":1692111038169},{"_id":"public/2023/02/28/Swift/00. Tips/01. Handling of errors and exceptions/index.html","hash":"5f9561f91724134e2cd60edba646cef3e1e49281","modified":1692111038169},{"_id":"public/2023/02/28/Swift/00. Tips/00. Generation of random numbers/index.html","hash":"bf1e9d1b32abb5a95587ecb7bb4c886bf5d7a864","modified":1692111038169},{"_id":"public/about/images/qrcode.bmp","hash":"a4dcee22ec1e54d4441d602e4a1baaa826ad4705","modified":1692111038169},{"_id":"public/images/apple-touch-icon.png","hash":"57e2def34682655f41a0be2d083f16765ba7858b","modified":1692111038169},{"_id":"public/assets/Swift/Tips/image00.jpg","hash":"5f98da7ebb53b3a5c9f6f46cef3ad4ac1fab604c","modified":1692111038169},{"_id":"public/images/favicon-192x192.png","hash":"96e6fcbbb13a5914a6131391e210eb7dfd13d692","modified":1692111038169},{"_id":"public/images/favicon.ico","hash":"189f9842bcb79a6f8f9e8445bc8bbd773443826b","modified":1692111038169},{"_id":"public/lib/vazir-font/Vazir-Black.woff2","hash":"7ea4fd7dd4cd4f480af78a0e2c5849eb921b1aeb","modified":1692111038169},{"_id":"public/lib/vazir-font/Vazir-Black.woff","hash":"f6fda2de0348b3e3b7de73267f9f8e97a62f8353","modified":1692111038169},{"_id":"public/lib/vazir-font/Vazir-Bold.woff","hash":"56e632c9196fac364c66f812a3b4635dd999ad1c","modified":1692111038169},{"_id":"public/lib/vazir-font/Vazir-Bold.woff2","hash":"6e40d0c7669c1adbcbf034bdc459f7bed4d6676d","modified":1692111038169},{"_id":"public/lib/vazir-font/Vazir-Light.woff","hash":"1c3dbf17411b1f6a6b22c2b76e9d8511586643d0","modified":1692111038169},{"_id":"public/lib/vazir-font/Vazir-Light.woff2","hash":"50b654d916204c30987d1987abd890ef92085ae3","modified":1692111038169},{"_id":"public/lib/vazir-font/Vazir-Medium.woff","hash":"43a8aaa3fca8721dd32a5d20f7a98dfbc87c97fd","modified":1692111038169},{"_id":"public/lib/vazir-font/Vazir-Medium.woff2","hash":"14b3e257c51a6a11d23b2a078017ff340c9777e4","modified":1692111038169},{"_id":"public/lib/vazir-font/Vazir-Regular.woff2","hash":"a9714ffb842afc74836e64de04b52d8c37c87c8a","modified":1692111038169},{"_id":"public/lib/vazir-font/Vazir-Regular.woff","hash":"235889d59ddad2b1f3243ccaab7733bd713a2a21","modified":1692111038169},{"_id":"public/lib/vazir-font/Vazir-Thin.woff","hash":"c0e784de2eb5261cca244928f8a81fd893c3fe16","modified":1692111038169},{"_id":"public/lib/vazir-font/Vazir-Thin.woff2","hash":"9b03b1a9071709f5b7dbca13412ecef6cb7a2a67","modified":1692111038169},{"_id":"public/lib/vazir-font/Vazir-Variable.woff","hash":"2e8e6d38d361def5f48baac366f04e3db3ed4828","modified":1692111038169},{"_id":"public/lib/vazir-font/Vazir-Variable.woff2","hash":"e213bb26bc7f10e1df3fe2d03d3ecaecd6e6d371","modified":1692111038169},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"67afa6237670ab99125056f2899129f22912dcf3","modified":1692111038169},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"fb363d27cfdfe71a243fa2ac3dab2815232b9b7e","modified":1692111038169},{"_id":"public/lib/font-awesome/webfonts/fa-v4compatibility.woff2","hash":"8f80d0bbe995f7fe92320fdaec10cd5ccd710a51","modified":1692111038169},{"_id":"public/lib/font-awesome/webfonts/fa-v4compatibility.ttf","hash":"a9d072aca9e0fadc2a7167671ce3d6b18d9cd2cc","modified":1692111038169},{"_id":"public/assets/cactus.png","hash":"4633bf3d6601dfa2dc86ac8341df85e440dff128","modified":1692111038169},{"_id":"public/lib/vazir-font/Vazir-Black.eot","hash":"91152bd73e7ff8d943e3bde3ddb0fa0a018e1c21","modified":1692111038169},{"_id":"public/lib/vazir-font/Vazir-Black.ttf","hash":"b65915e3fa57b5c19995d15dc2341d115c1971b9","modified":1692111038169},{"_id":"public/lib/vazir-font/Vazir-Bold.eot","hash":"5c1c680fade45393e4a5bb4548a092cd5ea6811e","modified":1692111038169},{"_id":"public/lib/vazir-font/Vazir-Bold.ttf","hash":"122bb778b17a152c426a825ee981610a4bd59bf3","modified":1692111038169},{"_id":"public/lib/vazir-font/Vazir-Light.eot","hash":"a059359e9bea17dc2ff2ede955a05bf0dc4d00d0","modified":1692111038169},{"_id":"public/lib/vazir-font/Vazir-Light.ttf","hash":"df82b80c4d3b11e70dcd269fc62ac97cbfa0414d","modified":1692111038169},{"_id":"public/lib/vazir-font/Vazir-Medium.ttf","hash":"948a091f0fdb8c7ae17d5ef8e51bd8830d65dd9a","modified":1692111038169},{"_id":"public/lib/vazir-font/Vazir-Medium.eot","hash":"d9ec1f9f3fefd57e446cbe86dc297f1ff269b6de","modified":1692111038169},{"_id":"public/lib/vazir-font/Vazir-Regular.eot","hash":"521c01f0eb79a48025e972ecbe21b0d7fb15437b","modified":1692111038169},{"_id":"public/lib/vazir-font/Vazir-Regular.ttf","hash":"643c28c8f8a2bce1a0d62525aa045cd9883773cd","modified":1692111038169},{"_id":"public/lib/vazir-font/Vazir-Thin.eot","hash":"a0ea0bdaef00b35544f9a21d25d35db9a79f7189","modified":1692111038169},{"_id":"public/lib/vazir-font/Vazir-Thin.ttf","hash":"6aacb0eecb03c660570b6e159ba5ca97ca7461cf","modified":1692111038169},{"_id":"public/lib/vazir-font/Vazir-Variable.eot","hash":"af46f7f4e10a1440a4c97b350622d279143e6798","modified":1692111038169},{"_id":"public/lib/vazir-font/Vazir-Variable.ttf","hash":"1e08b6373c2e086f24776df9b11e4be6bbcc8a4a","modified":1692111038169},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"4350f9ba93384634faf35f41c503c99c767f1069","modified":1692111038169},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"f0982a77285d53653845b0a78170b4688db972f1","modified":1692111038169},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"6b99aa650bd12a36caa14e0127435d8f4cd3ba73","modified":1692111038169},{"_id":"public/css/rtl.css","hash":"9589fac02a34fd9084f805f801889028756bbb65","modified":1692111038169},{"_id":"public/js/main.js","hash":"619ac6529d140711e3b14f739a192bb31c4824ff","modified":1692111038169},{"_id":"public/js/search.js","hash":"914a2ce72fb325106c61600200be823b72bfb39f","modified":1692111038169},{"_id":"public/lib/clipboard/clipboard.min.js","hash":"9a7cb405f9beed005891587d41f76a0720893ffc","modified":1692111038169},{"_id":"public/lib/vazir-font/font-face.css","hash":"ba0030e1cd28a8caa7a5bb74b98da7c7bb185c90","modified":1692111038169},{"_id":"public/lib/justified-gallery/css/justifiedGallery.min.css","hash":"dd3052149d3054f35efb823c68dd78e78aad5875","modified":1692111038169},{"_id":"public/css/style.css","hash":"102142affab6470b7d143a07a89c479945eac37b","modified":1692111038169},{"_id":"public/lib/jquery/jquery.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1692111038169},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"8c06d82739d14b094ff6d9036021a252bd1d985d","modified":1692111038169},{"_id":"public/lib/justified-gallery/js/jquery.justifiedGallery.min.js","hash":"ad8f48b4022498078b089fcdd1e8b47faf496931","modified":1692111038169},{"_id":"public/assets/wallpaper-2572384.jpg","hash":"1df3620ab8c69fe2498a746f8ead057162df0637","modified":1692111038169},{"_id":"public/images/logo.png","hash":"0e3029251dfda26adee2761f71377297e8c26871","modified":1692111038169},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"20bd663830188cbadd2264e1daf9497c3ffc3621","modified":1692111038169},{"_id":"public/lib/meslo-LG/MesloLGL-Italic.ttf","hash":"96c97a0a098ca40802f948ae56fa37aa6683d034","modified":1692111038169},{"_id":"public/lib/meslo-LG/MesloLGM-Italic.ttf","hash":"68700db02debd4b922304134da83b829cbfddfc9","modified":1692111038169},{"_id":"public/lib/meslo-LG/MesloLGS-Italic.ttf","hash":"7f7cdbdcc26279c04046632e22d872f111bc9399","modified":1692111038169},{"_id":"public/assets/wallpaper-878514.jpg","hash":"9f9705a377c42320b335b3c66b023e62b80e56e3","modified":1692111038169},{"_id":"public/lib/meslo-LG/MesloLGL-Bold.ttf","hash":"bfa1ed9a263ed78462f06d322de13bd5bd0906b2","modified":1692111038169},{"_id":"public/lib/meslo-LG/MesloLGL-BoldItalic.ttf","hash":"a9a431fc7a6c3a67c98021d4035c12a07a4f1070","modified":1692111038169},{"_id":"public/lib/meslo-LG/MesloLGL-Regular.ttf","hash":"2b912dd13f052f645ee19951604610bb350d50af","modified":1692111038169},{"_id":"public/lib/meslo-LG/MesloLGM-Bold.ttf","hash":"a8a8df3393bccc365335fc5eb0a62a6b7ccd32b9","modified":1692111038169},{"_id":"public/lib/meslo-LG/MesloLGM-BoldItalic.ttf","hash":"65ddb11e75ee93909e845ab912a36717c48f1c94","modified":1692111038169},{"_id":"public/lib/meslo-LG/MesloLGM-Regular.ttf","hash":"5e220152adefe905b2197f873d7cee99eca50e91","modified":1692111038169},{"_id":"public/lib/meslo-LG/MesloLGS-Bold.ttf","hash":"df202ce09cbdc70bc16b81983a13ef0f94e46f10","modified":1692111038169},{"_id":"public/lib/meslo-LG/MesloLGS-BoldItalic.ttf","hash":"d895a1bd25e36c58b7f463ebe14de09f186d5ab4","modified":1692111038169},{"_id":"public/lib/meslo-LG/MesloLGS-Regular.ttf","hash":"56fa0e33a390b704afc56af93a31576ccdbbdd9e","modified":1692111038169},{"_id":"public/assets/wallpaper-2311325.jpg","hash":"ddaaaeb4fa04a05c83053c1f8149720d18c9c8de","modified":1692111038169}],"Category":[{"name":"Swift","_id":"cllcf81fz0009ps0m4xghfnu4"},{"name":"00.Tips","parent":"cllcf81fz0009ps0m4xghfnu4","_id":"cllcf81g6000lps0m687w5nts"},{"name":"02. Closures","parent":"cllcf81fz0009ps0m4xghfnu4","_id":"cllcf81gd001rps0mgtapehjr"}],"Data":[],"Page":[{"title":"About","date":"2023-08-14T19:49:14.000Z","type":"about","_content":"You can contact me with the following contact information:     \n\n1. Email:    \n<font size=3 color=#4169E1>**zitao.li0206@gmail.com**</font>     \n\n2. WeChat Official Account:    \n<font size=3 color=#4169E1>**ios_hunter**</font>    \nOr you can scan with WeChat directly:     \n<div align=left>\n<image src=\"images/qrcode.bmp\">\n</div>   \n \n\n","source":"about/index.md","raw":"---\ntitle: About\ndate: 2023-08-14 21:49:14\ntype: about\n---\nYou can contact me with the following contact information:     \n\n1. Email:    \n<font size=3 color=#4169E1>**zitao.li0206@gmail.com**</font>     \n\n2. WeChat Official Account:    \n<font size=3 color=#4169E1>**ios_hunter**</font>    \nOr you can scan with WeChat directly:     \n<div align=left>\n<image src=\"images/qrcode.bmp\">\n</div>   \n \n\n","updated":"2023-08-15T08:40:41.850Z","path":"about/index.html","comments":1,"layout":"page","_id":"cllcf81fq0000ps0m7r9q92on","content":"<p>You can contact me with the following contact information:     </p>\n<ol>\n<li><p>Email:<br><font size=3 color=#4169E1><strong><a href=\"mailto:&#x7a;&#105;&#x74;&#x61;&#111;&#x2e;&#108;&#x69;&#48;&#50;&#x30;&#x36;&#x40;&#x67;&#109;&#x61;&#105;&#x6c;&#46;&#x63;&#x6f;&#x6d;\">&#x7a;&#105;&#x74;&#x61;&#111;&#x2e;&#108;&#x69;&#48;&#50;&#x30;&#x36;&#x40;&#x67;&#109;&#x61;&#105;&#x6c;&#46;&#x63;&#x6f;&#x6d;</a></strong></font>     </p>\n</li>\n<li><p>WeChat Official Account:<br><font size=3 color=#4169E1><strong>ios_hunter</strong></font><br>Or you can scan with WeChat directly:     </p>\n<div align=left>\n<image src=\"images/qrcode.bmp\">\n</div></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>You can contact me with the following contact information:     </p>\n<ol>\n<li><p>Email:<br><font size=3 color=#4169E1><strong><a href=\"mailto:&#x7a;&#105;&#x74;&#x61;&#111;&#x2e;&#108;&#x69;&#48;&#50;&#x30;&#x36;&#x40;&#x67;&#109;&#x61;&#105;&#x6c;&#46;&#x63;&#x6f;&#x6d;\">&#x7a;&#105;&#x74;&#x61;&#111;&#x2e;&#108;&#x69;&#48;&#50;&#x30;&#x36;&#x40;&#x67;&#109;&#x61;&#105;&#x6c;&#46;&#x63;&#x6f;&#x6d;</a></strong></font>     </p>\n</li>\n<li><p>WeChat Official Account:<br><font size=3 color=#4169E1><strong>ios_hunter</strong></font><br>Or you can scan with WeChat directly:     </p>\n<div align=left>\n<image src=\"images/qrcode.bmp\">\n</div></li>\n</ol>\n"},{"title":"Search","date":"2023-08-14T20:12:21.000Z","type":"search","_content":"","source":"search/index.md","raw":"---\ntitle: Search\ndate: 2023-08-14 22:12:21\ntype: search\n---\n","updated":"2023-08-14T20:12:58.970Z","path":"search/index.html","comments":1,"layout":"page","_id":"cllcf81fu0002ps0mejg2dqr1","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Categories","date":"2023-08-14T19:47:40.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: Categories\ndate: 2023-08-14 21:47:40\ntype: categories\n---\n","updated":"2023-08-14T20:13:11.587Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cllcf81fw0004ps0mhfnia4vw","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Tags","date":"2023-08-14T20:23:33.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: Tags\ndate: 2023-08-14 22:23:33\ntype: tags\n---\n","updated":"2023-08-14T20:24:53.854Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cllcf81fy0007ps0m4ls91bgt","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"draft1","_content":"","source":"_drafts/draft1.md","raw":"---\ntitle: draft1\ntags:\n---\n","slug":"draft1","published":0,"date":"2023-08-15T06:43:03.313Z","updated":"2023-08-15T06:43:03.313Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllcf81fs0001ps0mas7og0xm","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"00. Generation of random numbers","date":"2023-02-28T12:47:59.000Z","_content":"  \n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nIn Swift, we can still use the ** arc4random ** method to obtain random numbers. However, it should be noted that:\n> Arc4random() uses the key stream generator encrypted by Arc4 password to generate a random number in the interval [0, 2 ^ 32). The return type of this function is always UInt32.\n\n```Swift \nlet faceCount = 6\nlet randomResult = Int(arc4random()) % faceCount + 1\nprint(randomResult)\n```\nThe above code is not a problem on 64 bit machines, but there is a risk of crash if you may encounter iPhone 5 and its previous devices. In this case, it is relatively safe to use an improved version:\n\n```Swift\nfunc arc4random_uniform(_: UInt32) -> UInt32\n```\nIt accepts a UInt32 type number as input, and reduces the result to 0 to n-1.\n```Swift\nlet faceCount: UInt32 = 6\nlet randomResult = Int(arc4random_uniform(faceCount)) + 1\nprint(randomResult)\n```\nThe following is a best practice based on Range:\n```Swift\nfunc random(in range: Range<Int>) -> Int {\n    let count = UInt32(range.endIndex - range.startIndex)\n    return  Int(arc4random_uniform(count)) + range.startIndex\n}\nfor _ in 0...100 {\n    let range = Range<Int>(1...6)\n    print(random(in: range))\n}\n```\n \n\n\n\n\n\n\n","source":"_posts/Swift/00. Tips/00. Generation of random numbers.md","raw":"---\ntitle: 00. Generation of random numbers\ndate: 2023-02-28 13:47:59\ncategories: \n- [Swift, 00.Tips]\ntags:\n- random\n---\n  \n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nIn Swift, we can still use the ** arc4random ** method to obtain random numbers. However, it should be noted that:\n> Arc4random() uses the key stream generator encrypted by Arc4 password to generate a random number in the interval [0, 2 ^ 32). The return type of this function is always UInt32.\n\n```Swift \nlet faceCount = 6\nlet randomResult = Int(arc4random()) % faceCount + 1\nprint(randomResult)\n```\nThe above code is not a problem on 64 bit machines, but there is a risk of crash if you may encounter iPhone 5 and its previous devices. In this case, it is relatively safe to use an improved version:\n\n```Swift\nfunc arc4random_uniform(_: UInt32) -> UInt32\n```\nIt accepts a UInt32 type number as input, and reduces the result to 0 to n-1.\n```Swift\nlet faceCount: UInt32 = 6\nlet randomResult = Int(arc4random_uniform(faceCount)) + 1\nprint(randomResult)\n```\nThe following is a best practice based on Range:\n```Swift\nfunc random(in range: Range<Int>) -> Int {\n    let count = UInt32(range.endIndex - range.startIndex)\n    return  Int(arc4random_uniform(count)) + range.startIndex\n}\nfor _ in 0...100 {\n    let range = Range<Int>(1...6)\n    print(random(in: range))\n}\n```\n \n\n\n\n\n\n\n","slug":"Swift/00. Tips/00. Generation of random numbers","published":1,"updated":"2023-08-15T09:14:03.345Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllcf81fv0003ps0m2j49ge52","content":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>In Swift, we can still use the ** arc4random ** method to obtain random numbers. However, it should be noted that:</p>\n<blockquote>\n<p>Arc4random() uses the key stream generator encrypted by Arc4 password to generate a random number in the interval [0, 2 ^ 32). The return type of this function is always UInt32.</p>\n</blockquote>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> faceCount <span class=\"operator\">=</span> <span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> randomResult <span class=\"operator\">=</span> <span class=\"type\">Int</span>(arc4random()) <span class=\"operator\">%</span> faceCount <span class=\"operator\">+</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(randomResult)</span><br></pre></td></tr></table></figure>\n<p>The above code is not a problem on 64 bit machines, but there is a risk of crash if you may encounter iPhone 5 and its previous devices. In this case, it is relatively safe to use an improved version:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">arc4random_uniform</span>(<span class=\"keyword\">_</span>: <span class=\"type\">UInt32</span>) -&gt; <span class=\"type\">UInt32</span></span><br></pre></td></tr></table></figure>\n<p>It accepts a UInt32 type number as input, and reduces the result to 0 to n-1.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> faceCount: <span class=\"type\">UInt32</span> <span class=\"operator\">=</span> <span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> randomResult <span class=\"operator\">=</span> <span class=\"type\">Int</span>(arc4random_uniform(faceCount)) <span class=\"operator\">+</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(randomResult)</span><br></pre></td></tr></table></figure>\n<p>The following is a best practice based on Range:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">random</span>(<span class=\"params\">in</span> <span class=\"params\">range</span>: <span class=\"type\">Range</span>&lt;<span class=\"type\">Int</span>&gt;) -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> count <span class=\"operator\">=</span> <span class=\"type\">UInt32</span>(range.endIndex <span class=\"operator\">-</span> range.startIndex)</span><br><span class=\"line\">    <span class=\"keyword\">return</span>  <span class=\"type\">Int</span>(arc4random_uniform(count)) <span class=\"operator\">+</span> range.startIndex</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"keyword\">_</span> <span class=\"keyword\">in</span> <span class=\"number\">0</span><span class=\"operator\">...</span><span class=\"number\">100</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> range <span class=\"operator\">=</span> <span class=\"type\">Range</span>&lt;<span class=\"type\">Int</span>&gt;(<span class=\"number\">1</span><span class=\"operator\">...</span><span class=\"number\">6</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(random(in: range))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>In Swift, we can still use the ** arc4random ** method to obtain random numbers. However, it should be noted that:</p>\n<blockquote>\n<p>Arc4random() uses the key stream generator encrypted by Arc4 password to generate a random number in the interval [0, 2 ^ 32). The return type of this function is always UInt32.</p>\n</blockquote>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> faceCount <span class=\"operator\">=</span> <span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> randomResult <span class=\"operator\">=</span> <span class=\"type\">Int</span>(arc4random()) <span class=\"operator\">%</span> faceCount <span class=\"operator\">+</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(randomResult)</span><br></pre></td></tr></table></figure>\n<p>The above code is not a problem on 64 bit machines, but there is a risk of crash if you may encounter iPhone 5 and its previous devices. In this case, it is relatively safe to use an improved version:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">arc4random_uniform</span>(<span class=\"keyword\">_</span>: <span class=\"type\">UInt32</span>) -&gt; <span class=\"type\">UInt32</span></span><br></pre></td></tr></table></figure>\n<p>It accepts a UInt32 type number as input, and reduces the result to 0 to n-1.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> faceCount: <span class=\"type\">UInt32</span> <span class=\"operator\">=</span> <span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> randomResult <span class=\"operator\">=</span> <span class=\"type\">Int</span>(arc4random_uniform(faceCount)) <span class=\"operator\">+</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(randomResult)</span><br></pre></td></tr></table></figure>\n<p>The following is a best practice based on Range:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">random</span>(<span class=\"params\">in</span> <span class=\"params\">range</span>: <span class=\"type\">Range</span>&lt;<span class=\"type\">Int</span>&gt;) -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> count <span class=\"operator\">=</span> <span class=\"type\">UInt32</span>(range.endIndex <span class=\"operator\">-</span> range.startIndex)</span><br><span class=\"line\">    <span class=\"keyword\">return</span>  <span class=\"type\">Int</span>(arc4random_uniform(count)) <span class=\"operator\">+</span> range.startIndex</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"keyword\">_</span> <span class=\"keyword\">in</span> <span class=\"number\">0</span><span class=\"operator\">...</span><span class=\"number\">100</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> range <span class=\"operator\">=</span> <span class=\"type\">Range</span>&lt;<span class=\"type\">Int</span>&gt;(<span class=\"number\">1</span><span class=\"operator\">...</span><span class=\"number\">6</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(random(in: range))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"01. Handling of errors and exceptions","date":"2023-02-28T12:48:59.000Z","_content":"\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\n## **<font size=3 >1. Handlings of Objective-C </font>**\n \n \nIn Objective-C, we often write code like this:\n```Swift \nNSError *error;\nBOOL success = [data writeToFile: path options: options error: &error];\nif(error) {\n// something happens\n}\n```\nThat is a very good method to handle possible errors. However we often simply this code like this:\n```Swift \n[data writeToFile: path options: options error: nil];\n```\nWe set varaible error to nil, Maybe we don't care about this error when we are developing. However this method can report errors. For example, if the space of the device's disk is full, you will write unsuccessfully, and this error can't not be found easily becase of our laziness.\n\n## **<font size=3 >2. Handlings of Swift</font>**\nIn Swift, we don't need to write an pointer variable error that waiting to be written by called method. we can use 'try catch' to take place of it. \n```Swift\ndo {\n    try d.write(toFile: \"Hello\", options: [])\n} catch let error as NSError {\n    print (\"Error: \\(error.domain)\")\n}\n```\n\nIt is a very common to use 'try catch' to hand errors and exceptions in Swift. The sample code is as follows.\n```Swift \nenum LoginError: Error {\n    case UserNotFound, UserPasswordNotMatch\n}\n\nfunc login(user: String, password: String) throws {\n    if !users.keys.contains(user) {\n        throw LoginError.UserNotFound\n    }\n    if users[user] != password {\n        throw LoginError.UserPasswordNotMatch\n    }\n    print(\"Login successfully.\")\n}\n// call\nlet users:[String:String] = [\"liudehua\":\"One\", \"wanggang\":\"Two\", \"liming\":\"Three\"]\ndo {\n    try login(user: \"ll\", password: \"234\")\n} catch LoginError.UserNotFound {\n    print(\"UserNotFound\")\n} catch LoginError.UserPasswordNotMatch {\n    print(\"UserPasswordNotMatch\")\n} catch {\n    //default handling, don't delete it, or it would report an error.\n}\n\n\n","source":"_posts/Swift/00. Tips/01. Handling of errors and exceptions.md","raw":"---\ntitle: 01. Handling of errors and exceptions\ndate: 2023-02-28 13:48:59\ncategories: \n- [Swift, 00.Tips]\ntags:\n- errors\n- exceptions\n---\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\n## **<font size=3 >1. Handlings of Objective-C </font>**\n \n \nIn Objective-C, we often write code like this:\n```Swift \nNSError *error;\nBOOL success = [data writeToFile: path options: options error: &error];\nif(error) {\n// something happens\n}\n```\nThat is a very good method to handle possible errors. However we often simply this code like this:\n```Swift \n[data writeToFile: path options: options error: nil];\n```\nWe set varaible error to nil, Maybe we don't care about this error when we are developing. However this method can report errors. For example, if the space of the device's disk is full, you will write unsuccessfully, and this error can't not be found easily becase of our laziness.\n\n## **<font size=3 >2. Handlings of Swift</font>**\nIn Swift, we don't need to write an pointer variable error that waiting to be written by called method. we can use 'try catch' to take place of it. \n```Swift\ndo {\n    try d.write(toFile: \"Hello\", options: [])\n} catch let error as NSError {\n    print (\"Error: \\(error.domain)\")\n}\n```\n\nIt is a very common to use 'try catch' to hand errors and exceptions in Swift. The sample code is as follows.\n```Swift \nenum LoginError: Error {\n    case UserNotFound, UserPasswordNotMatch\n}\n\nfunc login(user: String, password: String) throws {\n    if !users.keys.contains(user) {\n        throw LoginError.UserNotFound\n    }\n    if users[user] != password {\n        throw LoginError.UserPasswordNotMatch\n    }\n    print(\"Login successfully.\")\n}\n// call\nlet users:[String:String] = [\"liudehua\":\"One\", \"wanggang\":\"Two\", \"liming\":\"Three\"]\ndo {\n    try login(user: \"ll\", password: \"234\")\n} catch LoginError.UserNotFound {\n    print(\"UserNotFound\")\n} catch LoginError.UserPasswordNotMatch {\n    print(\"UserPasswordNotMatch\")\n} catch {\n    //default handling, don't delete it, or it would report an error.\n}\n\n\n","slug":"Swift/00. Tips/01. Handling of errors and exceptions","published":1,"updated":"2023-08-15T09:14:09.045Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllcf81fw0005ps0m01z75645","content":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<h2 id=\"1-Handlings-of-Objective-C\"><a href=\"#1-Handlings-of-Objective-C\" class=\"headerlink\" title=\"1. Handlings of Objective-C \"></a><strong><font size=3 >1. Handlings of Objective-C </font></strong></h2><p>In Objective-C, we often write code like this:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">NSError</span> <span class=\"operator\">*</span>error;</span><br><span class=\"line\"><span class=\"type\">BOOL</span> success <span class=\"operator\">=</span> [data writeToFile: path options: options error: <span class=\"operator\">&amp;</span>error];</span><br><span class=\"line\"><span class=\"keyword\">if</span>(error) &#123;</span><br><span class=\"line\"><span class=\"comment\">// something happens</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>That is a very good method to handle possible errors. However we often simply this code like this:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[data writeToFile: path options: options error: <span class=\"literal\">nil</span>];</span><br></pre></td></tr></table></figure>\n<p>We set varaible error to nil, Maybe we don’t care about this error when we are developing. However this method can report errors. For example, if the space of the device’s disk is full, you will write unsuccessfully, and this error can’t not be found easily becase of our laziness.</p>\n<h2 id=\"2-Handlings-of-Swift\"><a href=\"#2-Handlings-of-Swift\" class=\"headerlink\" title=\"2. Handlings of Swift\"></a><strong><font size=3 >2. Handlings of Swift</font></strong></h2><p>In Swift, we don’t need to write an pointer variable error that waiting to be written by called method. we can use ‘try catch’ to take place of it. </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> d.write(toFile: <span class=\"string\">&quot;Hello&quot;</span>, options: [])</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> <span class=\"keyword\">let</span> error <span class=\"keyword\">as</span> <span class=\"type\">NSError</span> &#123;</span><br><span class=\"line\">    print (<span class=\"string\">&quot;Error: <span class=\"subst\">\\(error.domain)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>It is a very common to use ‘try catch’ to hand errors and exceptions in Swift. The sample code is as follows.</p>\n<pre><code class=\"Swift\">enum LoginError: Error &#123;\n    case UserNotFound, UserPasswordNotMatch\n&#125;\n\nfunc login(user: String, password: String) throws &#123;\n    if !users.keys.contains(user) &#123;\n        throw LoginError.UserNotFound\n    &#125;\n    if users[user] != password &#123;\n        throw LoginError.UserPasswordNotMatch\n    &#125;\n    print(&quot;Login successfully.&quot;)\n&#125;\n// call\nlet users:[String:String] = [&quot;liudehua&quot;:&quot;One&quot;, &quot;wanggang&quot;:&quot;Two&quot;, &quot;liming&quot;:&quot;Three&quot;]\ndo &#123;\n    try login(user: &quot;ll&quot;, password: &quot;234&quot;)\n&#125; catch LoginError.UserNotFound &#123;\n    print(&quot;UserNotFound&quot;)\n&#125; catch LoginError.UserPasswordNotMatch &#123;\n    print(&quot;UserPasswordNotMatch&quot;)\n&#125; catch &#123;\n    //default handling, don&#39;t delete it, or it would report an error.\n&#125;\n\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<h2 id=\"1-Handlings-of-Objective-C\"><a href=\"#1-Handlings-of-Objective-C\" class=\"headerlink\" title=\"1. Handlings of Objective-C \"></a><strong><font size=3 >1. Handlings of Objective-C </font></strong></h2><p>In Objective-C, we often write code like this:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">NSError</span> <span class=\"operator\">*</span>error;</span><br><span class=\"line\"><span class=\"type\">BOOL</span> success <span class=\"operator\">=</span> [data writeToFile: path options: options error: <span class=\"operator\">&amp;</span>error];</span><br><span class=\"line\"><span class=\"keyword\">if</span>(error) &#123;</span><br><span class=\"line\"><span class=\"comment\">// something happens</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>That is a very good method to handle possible errors. However we often simply this code like this:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[data writeToFile: path options: options error: <span class=\"literal\">nil</span>];</span><br></pre></td></tr></table></figure>\n<p>We set varaible error to nil, Maybe we don’t care about this error when we are developing. However this method can report errors. For example, if the space of the device’s disk is full, you will write unsuccessfully, and this error can’t not be found easily becase of our laziness.</p>\n<h2 id=\"2-Handlings-of-Swift\"><a href=\"#2-Handlings-of-Swift\" class=\"headerlink\" title=\"2. Handlings of Swift\"></a><strong><font size=3 >2. Handlings of Swift</font></strong></h2><p>In Swift, we don’t need to write an pointer variable error that waiting to be written by called method. we can use ‘try catch’ to take place of it. </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> d.write(toFile: <span class=\"string\">&quot;Hello&quot;</span>, options: [])</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> <span class=\"keyword\">let</span> error <span class=\"keyword\">as</span> <span class=\"type\">NSError</span> &#123;</span><br><span class=\"line\">    print (<span class=\"string\">&quot;Error: <span class=\"subst\">\\(error.domain)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>It is a very common to use ‘try catch’ to hand errors and exceptions in Swift. The sample code is as follows.</p>\n<pre><code class=\"Swift\">enum LoginError: Error &#123;\n    case UserNotFound, UserPasswordNotMatch\n&#125;\n\nfunc login(user: String, password: String) throws &#123;\n    if !users.keys.contains(user) &#123;\n        throw LoginError.UserNotFound\n    &#125;\n    if users[user] != password &#123;\n        throw LoginError.UserPasswordNotMatch\n    &#125;\n    print(&quot;Login successfully.&quot;)\n&#125;\n// call\nlet users:[String:String] = [&quot;liudehua&quot;:&quot;One&quot;, &quot;wanggang&quot;:&quot;Two&quot;, &quot;liming&quot;:&quot;Three&quot;]\ndo &#123;\n    try login(user: &quot;ll&quot;, password: &quot;234&quot;)\n&#125; catch LoginError.UserNotFound &#123;\n    print(&quot;UserNotFound&quot;)\n&#125; catch LoginError.UserPasswordNotMatch &#123;\n    print(&quot;UserPasswordNotMatch&quot;)\n&#125; catch &#123;\n    //default handling, don&#39;t delete it, or it would report an error.\n&#125;\n\n</code></pre>\n"},{"title":"02. Lazy loading and Anonymous function","date":"2023-02-28T12:50:59.000Z","_content":"  \n<font color=gray size=2>*It will take about 1 minutes to finish reading this article.*</font>\n\n\nIn Swift, we use the lazy keyword before the property to simply implement delayed loading, for example:\n\n```Swift \nlazy var str: String = {\n    let str = \"Hello\" \n    print(\"Only access the output for the first time\")\n    return str\n}()\n```\nThis style of writing is similar to closure, but it is actually an kind of anonymous function. We can use anonymous functions to initilize data. As shown below, it is an anoymous function creation call operation:\n```Swift\n{\n\t//anonymous function code\n}()\n```\nWe can try to print the type of this type.\n```Swift\nfunc test() {\n\n}\nfunc TestCase() {\n    let a: () = {}()\n    let b = test\n    print(type(of: a))\n    print(type(of: b))\n}\n```\nThe result is:\n```\n()\n() -> ()\n```\n\n\n\n","source":"_posts/Swift/00. Tips/02. Lazy loading and Anonymous function.md","raw":"---\ntitle: 02. Lazy loading and Anonymous function\ndate: 2023-02-28 13:50:59\ncategories: \n- [Swift, 00.Tips]\ntags:\n- Lazy\n- Anonymous\n---\n  \n<font color=gray size=2>*It will take about 1 minutes to finish reading this article.*</font>\n\n\nIn Swift, we use the lazy keyword before the property to simply implement delayed loading, for example:\n\n```Swift \nlazy var str: String = {\n    let str = \"Hello\" \n    print(\"Only access the output for the first time\")\n    return str\n}()\n```\nThis style of writing is similar to closure, but it is actually an kind of anonymous function. We can use anonymous functions to initilize data. As shown below, it is an anoymous function creation call operation:\n```Swift\n{\n\t//anonymous function code\n}()\n```\nWe can try to print the type of this type.\n```Swift\nfunc test() {\n\n}\nfunc TestCase() {\n    let a: () = {}()\n    let b = test\n    print(type(of: a))\n    print(type(of: b))\n}\n```\nThe result is:\n```\n()\n() -> ()\n```\n\n\n\n","slug":"Swift/00. Tips/02. Lazy loading and Anonymous function","published":1,"updated":"2023-08-15T09:14:54.625Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllcf81fy0008ps0m3yci2u7z","content":"<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p>\n<p>In Swift, we use the lazy keyword before the property to simply implement delayed loading, for example:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">lazy</span> <span class=\"keyword\">var</span> str: <span class=\"type\">String</span> <span class=\"operator\">=</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> str <span class=\"operator\">=</span> <span class=\"string\">&quot;Hello&quot;</span> </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Only access the output for the first time&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str</span><br><span class=\"line\">&#125;()</span><br></pre></td></tr></table></figure>\n<p>This style of writing is similar to closure, but it is actually an kind of anonymous function. We can use anonymous functions to initilize data. As shown below, it is an anoymous function creation call operation:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//anonymous function code</span></span><br><span class=\"line\">&#125;()</span><br></pre></td></tr></table></figure>\n<p>We can try to print the type of this type.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">test</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">TestCase</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a: () <span class=\"operator\">=</span> &#123;&#125;()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> b <span class=\"operator\">=</span> test</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(of: a))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(of: b))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The result is:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">()</span><br><span class=\"line\">() -&gt; ()</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p>\n<p>In Swift, we use the lazy keyword before the property to simply implement delayed loading, for example:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">lazy</span> <span class=\"keyword\">var</span> str: <span class=\"type\">String</span> <span class=\"operator\">=</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> str <span class=\"operator\">=</span> <span class=\"string\">&quot;Hello&quot;</span> </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Only access the output for the first time&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str</span><br><span class=\"line\">&#125;()</span><br></pre></td></tr></table></figure>\n<p>This style of writing is similar to closure, but it is actually an kind of anonymous function. We can use anonymous functions to initilize data. As shown below, it is an anoymous function creation call operation:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//anonymous function code</span></span><br><span class=\"line\">&#125;()</span><br></pre></td></tr></table></figure>\n<p>We can try to print the type of this type.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">test</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">TestCase</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a: () <span class=\"operator\">=</span> &#123;&#125;()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> b <span class=\"operator\">=</span> test</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(of: a))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(of: b))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The result is:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">()</span><br><span class=\"line\">() -&gt; ()</span><br></pre></td></tr></table></figure>\n\n\n\n"},{"title":"03. NSString and String","date":"2023-02-28T12:51:59.000Z","_content":"\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\n\n## **<font size=3 >1. Mutual Transformation</font>**\nNSString and String can transform to each other.   \n<strong> Example Code </strong>\n```Swift \nfunc StringToNSString()  {\n    let a = String(\"1234567890\")\n    let b = a as NSString\n    print(b.integerValue)\n    print(b.length)\n}\n\nfunc NSStringToString()  {\n    let a : NSString = \"1234567890\"\n    let b = a as String\n    print(b)\n}\n```\n## **<font size=3 >2. Differences between NSString and String</font>**\nNSString is a subclass of NSObject and that is to say, it is a class that is a reference type.\n```Swift \nopen class NSString : NSObject, NSCopying, NSMutableCopying, NSSecureCoding {\n\n    open var length: Int { get }\n    ...\n}\n```\n\nHowever, String is a value type which is a kind of struct.\n```Swift \n@frozen public struct String {  \n    @inlinable public init()\n    ...\n}\n```\nThey have some identical APIs, but they also have their own independent APIs.  \n```Swift\n    var str = String()\n    str = \"123456\"\n    var nsStr = NSString();\n    nsStr = \"123456\";\n```\n\n<strong>1.1 Similar or Identical APIs</strong>\n<details>\n<summary>Sample Code</summary>\n\n```Swift\n//1. Get the number of characters in the string\nprint(str.count);   //6\nprint(nsStr.length);   //6\n//2. Prefix/Suffix Operations\nvar str = \"123456\";\nstr.hasPrefix(\"12\") //true\nstr.hasSuffix(\"56\") //true\n\nvar nsStr = NSString(stringLiteral: \"123456\");\nnsStr.hasPrefix(\"12\")   //true\nnsStr.hasSuffix(\"56\")   //true\n//3. Prefix/Suffix Operations\nvar str = \"123456-11\";\nstr.components(separatedBy: \"-\");   //[\"123456\", \"11\"]\nvar nsStr = NSString(stringLiteral: \"123456-22\");\nnsStr.components(separatedBy: \"-\"); //[\"123456\", \"22\"]\n//4. Letter case conversion ops for uppercased/lowercased/capitalized\nvar str = \"abc\";\nprint(str.uppercased());    //ABC\nprint(str.lowercased());    //abc\n\nvar nsStr = NSString(stringLiteral: \"cba\");\nprint(nsStr.uppercased);    //CBA\nprint(nsStr.lowercased);    //cba\n\nvar str = \"abc\";\nprint(str.capitalized);    //Abc\n\nvar nsStr = NSString(stringLiteral: \"cba\");\nprint(nsStr.capitalized);    //Cba\n//5. Strip specific strings ops for trimmingCharacters\nlet str = \"\\r abc \";\nlet strTrimed = str.trimmingCharacters(in: .whitespacesAndNewlines)\nprint(strTrimed);   //abc\n\nlet nsStr = NSString(stringLiteral: \"\\r cba \");\nlet nsStrTrimed = nsStr.trimmingCharacters(in: .whitespacesAndNewlines);\nprint(nsStrTrimed); //cba\n//6. Character substitution ops for replacingOccurrences:of:with\nlet str = \"hello String\";\nlet str1 = str.replacingOccurrences(of: \"String\", with: \"world\")\nprint(str1) //\"hello world\"\n\nlet nsStr = NSString(stringLiteral:\"hello NSString\");\nlet nsStr1 = nsStr.replacingOccurrences(of: \"NSString\", with: \"world\")\nprint(nsStr1)   //\"hello world\"\n\n//7. Convert decimal hexadecimal octal data to string\nlet hexStr = String().appendingFormat(\"%x\",16)//10->16，result:\"10\"\nlet oStr = String().appendingFormat(\"%o\",16)//10->8，result:\"20\"\nlet dStr = String().appendingFormat(\"%d\",0x10)//16->10，result:\"16\"\nlet dStr1 = String(format: \"%d\", 0o10)//8->10，result: \"8\"\n\nlet hexNSStr = NSString().appendingFormat(\"%x\", 16)//10->16，result:\"10\"\nlet oNSStr = NSString().appendingFormat(\"%o\",16)//10->8，result:\"20\"\nlet dNSStr = NSString().appendingFormat(\"%d\",0x10)//16->10，result:\"16\"\nlet dNSStr1 = NSString(format: \"%d\", 0o10)//8->10，result: \"8\"\n \n```\n</details>\n\n<strong>1.2 Independent APIs</strong>  \n1.2.1 Independent APIs of String    \n<details>\n<summary>Sample Code</summary>\n\n```Swift\n//1. isEmpty\nvar str = String();\nstr = \"123456\";\nprint(str.isEmpty);\n//2. sorted()\nvar str = \"215423\";\nprint(str.sorted()); //[\"1\", \"2\", \"2\", \"3\", \"4\", \"5\"]\n\n//3. filter()\nlet str = \"12 34 56\";\nlet filter = str.filter { (char) -> Bool in\n    char != \" \"\n};\nprint(filter);//123456\n\n//4. enumerated()\nlet str = \"123456\";\nfor data in str.enumerated() {\n    print(data);\n}\n```\n</details>\n\n1.2.2 Independent APIs of NSString\n<details>\n<summary>Sample Code</summary>\n\n```Swift\n// 1. initialize methods\nvar nsStr = NSString(stringLiteral: \"123456\");\nvar nsStr = NSString.init(string: \"123456\");\n\n// 2. boolValue\nvar nsStr = NSString(stringLiteral: \"123456\");\nprint(nsStr.boolValue);//true\n\n// 3. isEqual()\nvar nsStr = NSString(stringLiteral: \"123456\");\nprint(nsStr.isEqual(to: \"123456\"));//true\n\n// 4. Numeric Ops\nvar nsStr = NSString(stringLiteral: \"123456\")\nprint(nsStr.intValue);\nprint(nsStr.floatValue);\nprint(nsStr.doubleValue);\n```\n</details>\n","source":"_posts/Swift/00. Tips/03. NSString and String.md","raw":"---\ntitle: 03. NSString and String\ndate: 2023-02-28 13:51:59\ncategories: \n- [Swift, 00.Tips]\ntags:\n- NSString\n- String\n---\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\n\n## **<font size=3 >1. Mutual Transformation</font>**\nNSString and String can transform to each other.   \n<strong> Example Code </strong>\n```Swift \nfunc StringToNSString()  {\n    let a = String(\"1234567890\")\n    let b = a as NSString\n    print(b.integerValue)\n    print(b.length)\n}\n\nfunc NSStringToString()  {\n    let a : NSString = \"1234567890\"\n    let b = a as String\n    print(b)\n}\n```\n## **<font size=3 >2. Differences between NSString and String</font>**\nNSString is a subclass of NSObject and that is to say, it is a class that is a reference type.\n```Swift \nopen class NSString : NSObject, NSCopying, NSMutableCopying, NSSecureCoding {\n\n    open var length: Int { get }\n    ...\n}\n```\n\nHowever, String is a value type which is a kind of struct.\n```Swift \n@frozen public struct String {  \n    @inlinable public init()\n    ...\n}\n```\nThey have some identical APIs, but they also have their own independent APIs.  \n```Swift\n    var str = String()\n    str = \"123456\"\n    var nsStr = NSString();\n    nsStr = \"123456\";\n```\n\n<strong>1.1 Similar or Identical APIs</strong>\n<details>\n<summary>Sample Code</summary>\n\n```Swift\n//1. Get the number of characters in the string\nprint(str.count);   //6\nprint(nsStr.length);   //6\n//2. Prefix/Suffix Operations\nvar str = \"123456\";\nstr.hasPrefix(\"12\") //true\nstr.hasSuffix(\"56\") //true\n\nvar nsStr = NSString(stringLiteral: \"123456\");\nnsStr.hasPrefix(\"12\")   //true\nnsStr.hasSuffix(\"56\")   //true\n//3. Prefix/Suffix Operations\nvar str = \"123456-11\";\nstr.components(separatedBy: \"-\");   //[\"123456\", \"11\"]\nvar nsStr = NSString(stringLiteral: \"123456-22\");\nnsStr.components(separatedBy: \"-\"); //[\"123456\", \"22\"]\n//4. Letter case conversion ops for uppercased/lowercased/capitalized\nvar str = \"abc\";\nprint(str.uppercased());    //ABC\nprint(str.lowercased());    //abc\n\nvar nsStr = NSString(stringLiteral: \"cba\");\nprint(nsStr.uppercased);    //CBA\nprint(nsStr.lowercased);    //cba\n\nvar str = \"abc\";\nprint(str.capitalized);    //Abc\n\nvar nsStr = NSString(stringLiteral: \"cba\");\nprint(nsStr.capitalized);    //Cba\n//5. Strip specific strings ops for trimmingCharacters\nlet str = \"\\r abc \";\nlet strTrimed = str.trimmingCharacters(in: .whitespacesAndNewlines)\nprint(strTrimed);   //abc\n\nlet nsStr = NSString(stringLiteral: \"\\r cba \");\nlet nsStrTrimed = nsStr.trimmingCharacters(in: .whitespacesAndNewlines);\nprint(nsStrTrimed); //cba\n//6. Character substitution ops for replacingOccurrences:of:with\nlet str = \"hello String\";\nlet str1 = str.replacingOccurrences(of: \"String\", with: \"world\")\nprint(str1) //\"hello world\"\n\nlet nsStr = NSString(stringLiteral:\"hello NSString\");\nlet nsStr1 = nsStr.replacingOccurrences(of: \"NSString\", with: \"world\")\nprint(nsStr1)   //\"hello world\"\n\n//7. Convert decimal hexadecimal octal data to string\nlet hexStr = String().appendingFormat(\"%x\",16)//10->16，result:\"10\"\nlet oStr = String().appendingFormat(\"%o\",16)//10->8，result:\"20\"\nlet dStr = String().appendingFormat(\"%d\",0x10)//16->10，result:\"16\"\nlet dStr1 = String(format: \"%d\", 0o10)//8->10，result: \"8\"\n\nlet hexNSStr = NSString().appendingFormat(\"%x\", 16)//10->16，result:\"10\"\nlet oNSStr = NSString().appendingFormat(\"%o\",16)//10->8，result:\"20\"\nlet dNSStr = NSString().appendingFormat(\"%d\",0x10)//16->10，result:\"16\"\nlet dNSStr1 = NSString(format: \"%d\", 0o10)//8->10，result: \"8\"\n \n```\n</details>\n\n<strong>1.2 Independent APIs</strong>  \n1.2.1 Independent APIs of String    \n<details>\n<summary>Sample Code</summary>\n\n```Swift\n//1. isEmpty\nvar str = String();\nstr = \"123456\";\nprint(str.isEmpty);\n//2. sorted()\nvar str = \"215423\";\nprint(str.sorted()); //[\"1\", \"2\", \"2\", \"3\", \"4\", \"5\"]\n\n//3. filter()\nlet str = \"12 34 56\";\nlet filter = str.filter { (char) -> Bool in\n    char != \" \"\n};\nprint(filter);//123456\n\n//4. enumerated()\nlet str = \"123456\";\nfor data in str.enumerated() {\n    print(data);\n}\n```\n</details>\n\n1.2.2 Independent APIs of NSString\n<details>\n<summary>Sample Code</summary>\n\n```Swift\n// 1. initialize methods\nvar nsStr = NSString(stringLiteral: \"123456\");\nvar nsStr = NSString.init(string: \"123456\");\n\n// 2. boolValue\nvar nsStr = NSString(stringLiteral: \"123456\");\nprint(nsStr.boolValue);//true\n\n// 3. isEqual()\nvar nsStr = NSString(stringLiteral: \"123456\");\nprint(nsStr.isEqual(to: \"123456\"));//true\n\n// 4. Numeric Ops\nvar nsStr = NSString(stringLiteral: \"123456\")\nprint(nsStr.intValue);\nprint(nsStr.floatValue);\nprint(nsStr.doubleValue);\n```\n</details>\n","slug":"Swift/00. Tips/03. NSString and String","published":1,"updated":"2023-08-15T09:13:16.519Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllcf81fz000aps0m3mpn7l4w","content":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<h2 id=\"1-Mutual-Transformation\"><a href=\"#1-Mutual-Transformation\" class=\"headerlink\" title=\"1. Mutual Transformation\"></a><strong><font size=3 >1. Mutual Transformation</font></strong></h2><p>NSString and String can transform to each other.<br><strong> Example Code </strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">StringToNSString</span>()  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a <span class=\"operator\">=</span> <span class=\"type\">String</span>(<span class=\"string\">&quot;1234567890&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> b <span class=\"operator\">=</span> a <span class=\"keyword\">as</span> <span class=\"type\">NSString</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(b.integerValue)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(b.length)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">NSStringToString</span>()  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a : <span class=\"type\">NSString</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;1234567890&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> b <span class=\"operator\">=</span> a <span class=\"keyword\">as</span> <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(b)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-Differences-between-NSString-and-String\"><a href=\"#2-Differences-between-NSString-and-String\" class=\"headerlink\" title=\"2. Differences between NSString and String\"></a><strong><font size=3 >2. Differences between NSString and String</font></strong></h2><p>NSString is a subclass of NSObject and that is to say, it is a class that is a reference type.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">open</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NSString</span> : <span class=\"title class_\">NSObject</span>, <span class=\"title class_\">NSCopying</span>, <span class=\"title class_\">NSMutableCopying</span>, <span class=\"title class_\">NSSecureCoding</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">open</span> <span class=\"keyword\">var</span> length: <span class=\"type\">Int</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\">    <span class=\"operator\">...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>However, String is a value type which is a kind of struct.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@frozen</span> <span class=\"keyword\">public</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">String</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">@inlinable</span> <span class=\"keyword\">public</span> <span class=\"keyword\">init</span>()</span><br><span class=\"line\">    <span class=\"operator\">...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>They have some identical APIs, but they also have their own independent APIs.  </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str <span class=\"operator\">=</span> <span class=\"type\">String</span>()</span><br><span class=\"line\">str <span class=\"operator\">=</span> <span class=\"string\">&quot;123456&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>();</span><br><span class=\"line\">nsStr <span class=\"operator\">=</span> <span class=\"string\">&quot;123456&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>1.1 Similar or Identical APIs</strong></p>\n<details>\n<summary>Sample Code</summary>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1. Get the number of characters in the string</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str.count);   <span class=\"comment\">//6</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(nsStr.length);   <span class=\"comment\">//6</span></span><br><span class=\"line\"><span class=\"comment\">//2. Prefix/Suffix Operations</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str <span class=\"operator\">=</span> <span class=\"string\">&quot;123456&quot;</span>;</span><br><span class=\"line\">str.hasPrefix(<span class=\"string\">&quot;12&quot;</span>) <span class=\"comment\">//true</span></span><br><span class=\"line\">str.hasSuffix(<span class=\"string\">&quot;56&quot;</span>) <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>(stringLiteral: <span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\">nsStr.hasPrefix(<span class=\"string\">&quot;12&quot;</span>)   <span class=\"comment\">//true</span></span><br><span class=\"line\">nsStr.hasSuffix(<span class=\"string\">&quot;56&quot;</span>)   <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"comment\">//3. Prefix/Suffix Operations</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str <span class=\"operator\">=</span> <span class=\"string\">&quot;123456-11&quot;</span>;</span><br><span class=\"line\">str.components(separatedBy: <span class=\"string\">&quot;-&quot;</span>);   <span class=\"comment\">//[&quot;123456&quot;, &quot;11&quot;]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>(stringLiteral: <span class=\"string\">&quot;123456-22&quot;</span>);</span><br><span class=\"line\">nsStr.components(separatedBy: <span class=\"string\">&quot;-&quot;</span>); <span class=\"comment\">//[&quot;123456&quot;, &quot;22&quot;]</span></span><br><span class=\"line\"><span class=\"comment\">//4. Letter case conversion ops for uppercased/lowercased/capitalized</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str <span class=\"operator\">=</span> <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str.uppercased());    <span class=\"comment\">//ABC</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str.lowercased());    <span class=\"comment\">//abc</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>(stringLiteral: <span class=\"string\">&quot;cba&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nsStr.uppercased);    <span class=\"comment\">//CBA</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(nsStr.lowercased);    <span class=\"comment\">//cba</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> str <span class=\"operator\">=</span> <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str.capitalized);    <span class=\"comment\">//Abc</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>(stringLiteral: <span class=\"string\">&quot;cba&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nsStr.capitalized);    <span class=\"comment\">//Cba</span></span><br><span class=\"line\"><span class=\"comment\">//5. Strip specific strings ops for trimmingCharacters</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> str <span class=\"operator\">=</span> <span class=\"string\">&quot;<span class=\"subst\">\\r</span> abc &quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> strTrimed <span class=\"operator\">=</span> str.trimmingCharacters(in: .whitespacesAndNewlines)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(strTrimed);   <span class=\"comment\">//abc</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>(stringLiteral: <span class=\"string\">&quot;<span class=\"subst\">\\r</span> cba &quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> nsStrTrimed <span class=\"operator\">=</span> nsStr.trimmingCharacters(in: .whitespacesAndNewlines);</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nsStrTrimed); <span class=\"comment\">//cba</span></span><br><span class=\"line\"><span class=\"comment\">//6. Character substitution ops for replacingOccurrences:of:with</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> str <span class=\"operator\">=</span> <span class=\"string\">&quot;hello String&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> str1 <span class=\"operator\">=</span> str.replacingOccurrences(of: <span class=\"string\">&quot;String&quot;</span>, with: <span class=\"string\">&quot;world&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str1) <span class=\"comment\">//&quot;hello world&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>(stringLiteral:<span class=\"string\">&quot;hello NSString&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> nsStr1 <span class=\"operator\">=</span> nsStr.replacingOccurrences(of: <span class=\"string\">&quot;NSString&quot;</span>, with: <span class=\"string\">&quot;world&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nsStr1)   <span class=\"comment\">//&quot;hello world&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//7. Convert decimal hexadecimal octal data to string</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> hexStr <span class=\"operator\">=</span> <span class=\"type\">String</span>().appendingFormat(<span class=\"string\">&quot;%x&quot;</span>,<span class=\"number\">16</span>)<span class=\"comment\">//10-&gt;16，result:&quot;10&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> oStr <span class=\"operator\">=</span> <span class=\"type\">String</span>().appendingFormat(<span class=\"string\">&quot;%o&quot;</span>,<span class=\"number\">16</span>)<span class=\"comment\">//10-&gt;8，result:&quot;20&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> dStr <span class=\"operator\">=</span> <span class=\"type\">String</span>().appendingFormat(<span class=\"string\">&quot;%d&quot;</span>,<span class=\"number\">0x10</span>)<span class=\"comment\">//16-&gt;10，result:&quot;16&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> dStr1 <span class=\"operator\">=</span> <span class=\"type\">String</span>(format: <span class=\"string\">&quot;%d&quot;</span>, <span class=\"number\">0o10</span>)<span class=\"comment\">//8-&gt;10，result: &quot;8&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> hexNSStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>().appendingFormat(<span class=\"string\">&quot;%x&quot;</span>, <span class=\"number\">16</span>)<span class=\"comment\">//10-&gt;16，result:&quot;10&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> oNSStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>().appendingFormat(<span class=\"string\">&quot;%o&quot;</span>,<span class=\"number\">16</span>)<span class=\"comment\">//10-&gt;8，result:&quot;20&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> dNSStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>().appendingFormat(<span class=\"string\">&quot;%d&quot;</span>,<span class=\"number\">0x10</span>)<span class=\"comment\">//16-&gt;10，result:&quot;16&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> dNSStr1 <span class=\"operator\">=</span> <span class=\"type\">NSString</span>(format: <span class=\"string\">&quot;%d&quot;</span>, <span class=\"number\">0o10</span>)<span class=\"comment\">//8-&gt;10，result: &quot;8&quot;</span></span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n</details>\n\n<p><strong>1.2 Independent APIs</strong><br>1.2.1 Independent APIs of String    </p>\n<details>\n<summary>Sample Code</summary>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1. isEmpty</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str <span class=\"operator\">=</span> <span class=\"type\">String</span>();</span><br><span class=\"line\">str <span class=\"operator\">=</span> <span class=\"string\">&quot;123456&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str.isEmpty);</span><br><span class=\"line\"><span class=\"comment\">//2. sorted()</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str <span class=\"operator\">=</span> <span class=\"string\">&quot;215423&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str.sorted()); <span class=\"comment\">//[&quot;1&quot;, &quot;2&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//3. filter()</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> str <span class=\"operator\">=</span> <span class=\"string\">&quot;12 34 56&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> filter <span class=\"operator\">=</span> str.filter &#123; (char) -&gt; <span class=\"type\">Bool</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    char <span class=\"operator\">!=</span> <span class=\"string\">&quot; &quot;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(filter);<span class=\"comment\">//123456</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//4. enumerated()</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> str <span class=\"operator\">=</span> <span class=\"string\">&quot;123456&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> str.enumerated() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(data);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</details>\n\n<p>1.2.2 Independent APIs of NSString</p>\n<details>\n<summary>Sample Code</summary>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. initialize methods</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>(stringLiteral: <span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>.<span class=\"keyword\">init</span>(string: <span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. boolValue</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>(stringLiteral: <span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nsStr.boolValue);<span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3. isEqual()</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>(stringLiteral: <span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nsStr.isEqual(to: <span class=\"string\">&quot;123456&quot;</span>));<span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 4. Numeric Ops</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>(stringLiteral: <span class=\"string\">&quot;123456&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nsStr.intValue);</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nsStr.floatValue);</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nsStr.doubleValue);</span><br></pre></td></tr></table></figure>\n</details>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<h2 id=\"1-Mutual-Transformation\"><a href=\"#1-Mutual-Transformation\" class=\"headerlink\" title=\"1. Mutual Transformation\"></a><strong><font size=3 >1. Mutual Transformation</font></strong></h2><p>NSString and String can transform to each other.<br><strong> Example Code </strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">StringToNSString</span>()  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a <span class=\"operator\">=</span> <span class=\"type\">String</span>(<span class=\"string\">&quot;1234567890&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> b <span class=\"operator\">=</span> a <span class=\"keyword\">as</span> <span class=\"type\">NSString</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(b.integerValue)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(b.length)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">NSStringToString</span>()  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a : <span class=\"type\">NSString</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;1234567890&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> b <span class=\"operator\">=</span> a <span class=\"keyword\">as</span> <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(b)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-Differences-between-NSString-and-String\"><a href=\"#2-Differences-between-NSString-and-String\" class=\"headerlink\" title=\"2. Differences between NSString and String\"></a><strong><font size=3 >2. Differences between NSString and String</font></strong></h2><p>NSString is a subclass of NSObject and that is to say, it is a class that is a reference type.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">open</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NSString</span> : <span class=\"title class_\">NSObject</span>, <span class=\"title class_\">NSCopying</span>, <span class=\"title class_\">NSMutableCopying</span>, <span class=\"title class_\">NSSecureCoding</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">open</span> <span class=\"keyword\">var</span> length: <span class=\"type\">Int</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\">    <span class=\"operator\">...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>However, String is a value type which is a kind of struct.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@frozen</span> <span class=\"keyword\">public</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">String</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">@inlinable</span> <span class=\"keyword\">public</span> <span class=\"keyword\">init</span>()</span><br><span class=\"line\">    <span class=\"operator\">...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>They have some identical APIs, but they also have their own independent APIs.  </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str <span class=\"operator\">=</span> <span class=\"type\">String</span>()</span><br><span class=\"line\">str <span class=\"operator\">=</span> <span class=\"string\">&quot;123456&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>();</span><br><span class=\"line\">nsStr <span class=\"operator\">=</span> <span class=\"string\">&quot;123456&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>1.1 Similar or Identical APIs</strong></p>\n<details>\n<summary>Sample Code</summary>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1. Get the number of characters in the string</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str.count);   <span class=\"comment\">//6</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(nsStr.length);   <span class=\"comment\">//6</span></span><br><span class=\"line\"><span class=\"comment\">//2. Prefix/Suffix Operations</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str <span class=\"operator\">=</span> <span class=\"string\">&quot;123456&quot;</span>;</span><br><span class=\"line\">str.hasPrefix(<span class=\"string\">&quot;12&quot;</span>) <span class=\"comment\">//true</span></span><br><span class=\"line\">str.hasSuffix(<span class=\"string\">&quot;56&quot;</span>) <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>(stringLiteral: <span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\">nsStr.hasPrefix(<span class=\"string\">&quot;12&quot;</span>)   <span class=\"comment\">//true</span></span><br><span class=\"line\">nsStr.hasSuffix(<span class=\"string\">&quot;56&quot;</span>)   <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"comment\">//3. Prefix/Suffix Operations</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str <span class=\"operator\">=</span> <span class=\"string\">&quot;123456-11&quot;</span>;</span><br><span class=\"line\">str.components(separatedBy: <span class=\"string\">&quot;-&quot;</span>);   <span class=\"comment\">//[&quot;123456&quot;, &quot;11&quot;]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>(stringLiteral: <span class=\"string\">&quot;123456-22&quot;</span>);</span><br><span class=\"line\">nsStr.components(separatedBy: <span class=\"string\">&quot;-&quot;</span>); <span class=\"comment\">//[&quot;123456&quot;, &quot;22&quot;]</span></span><br><span class=\"line\"><span class=\"comment\">//4. Letter case conversion ops for uppercased/lowercased/capitalized</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str <span class=\"operator\">=</span> <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str.uppercased());    <span class=\"comment\">//ABC</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str.lowercased());    <span class=\"comment\">//abc</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>(stringLiteral: <span class=\"string\">&quot;cba&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nsStr.uppercased);    <span class=\"comment\">//CBA</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(nsStr.lowercased);    <span class=\"comment\">//cba</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> str <span class=\"operator\">=</span> <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str.capitalized);    <span class=\"comment\">//Abc</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>(stringLiteral: <span class=\"string\">&quot;cba&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nsStr.capitalized);    <span class=\"comment\">//Cba</span></span><br><span class=\"line\"><span class=\"comment\">//5. Strip specific strings ops for trimmingCharacters</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> str <span class=\"operator\">=</span> <span class=\"string\">&quot;<span class=\"subst\">\\r</span> abc &quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> strTrimed <span class=\"operator\">=</span> str.trimmingCharacters(in: .whitespacesAndNewlines)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(strTrimed);   <span class=\"comment\">//abc</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>(stringLiteral: <span class=\"string\">&quot;<span class=\"subst\">\\r</span> cba &quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> nsStrTrimed <span class=\"operator\">=</span> nsStr.trimmingCharacters(in: .whitespacesAndNewlines);</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nsStrTrimed); <span class=\"comment\">//cba</span></span><br><span class=\"line\"><span class=\"comment\">//6. Character substitution ops for replacingOccurrences:of:with</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> str <span class=\"operator\">=</span> <span class=\"string\">&quot;hello String&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> str1 <span class=\"operator\">=</span> str.replacingOccurrences(of: <span class=\"string\">&quot;String&quot;</span>, with: <span class=\"string\">&quot;world&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str1) <span class=\"comment\">//&quot;hello world&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>(stringLiteral:<span class=\"string\">&quot;hello NSString&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> nsStr1 <span class=\"operator\">=</span> nsStr.replacingOccurrences(of: <span class=\"string\">&quot;NSString&quot;</span>, with: <span class=\"string\">&quot;world&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nsStr1)   <span class=\"comment\">//&quot;hello world&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//7. Convert decimal hexadecimal octal data to string</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> hexStr <span class=\"operator\">=</span> <span class=\"type\">String</span>().appendingFormat(<span class=\"string\">&quot;%x&quot;</span>,<span class=\"number\">16</span>)<span class=\"comment\">//10-&gt;16，result:&quot;10&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> oStr <span class=\"operator\">=</span> <span class=\"type\">String</span>().appendingFormat(<span class=\"string\">&quot;%o&quot;</span>,<span class=\"number\">16</span>)<span class=\"comment\">//10-&gt;8，result:&quot;20&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> dStr <span class=\"operator\">=</span> <span class=\"type\">String</span>().appendingFormat(<span class=\"string\">&quot;%d&quot;</span>,<span class=\"number\">0x10</span>)<span class=\"comment\">//16-&gt;10，result:&quot;16&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> dStr1 <span class=\"operator\">=</span> <span class=\"type\">String</span>(format: <span class=\"string\">&quot;%d&quot;</span>, <span class=\"number\">0o10</span>)<span class=\"comment\">//8-&gt;10，result: &quot;8&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> hexNSStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>().appendingFormat(<span class=\"string\">&quot;%x&quot;</span>, <span class=\"number\">16</span>)<span class=\"comment\">//10-&gt;16，result:&quot;10&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> oNSStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>().appendingFormat(<span class=\"string\">&quot;%o&quot;</span>,<span class=\"number\">16</span>)<span class=\"comment\">//10-&gt;8，result:&quot;20&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> dNSStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>().appendingFormat(<span class=\"string\">&quot;%d&quot;</span>,<span class=\"number\">0x10</span>)<span class=\"comment\">//16-&gt;10，result:&quot;16&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> dNSStr1 <span class=\"operator\">=</span> <span class=\"type\">NSString</span>(format: <span class=\"string\">&quot;%d&quot;</span>, <span class=\"number\">0o10</span>)<span class=\"comment\">//8-&gt;10，result: &quot;8&quot;</span></span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n</details>\n\n<p><strong>1.2 Independent APIs</strong><br>1.2.1 Independent APIs of String    </p>\n<details>\n<summary>Sample Code</summary>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1. isEmpty</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str <span class=\"operator\">=</span> <span class=\"type\">String</span>();</span><br><span class=\"line\">str <span class=\"operator\">=</span> <span class=\"string\">&quot;123456&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str.isEmpty);</span><br><span class=\"line\"><span class=\"comment\">//2. sorted()</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str <span class=\"operator\">=</span> <span class=\"string\">&quot;215423&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str.sorted()); <span class=\"comment\">//[&quot;1&quot;, &quot;2&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//3. filter()</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> str <span class=\"operator\">=</span> <span class=\"string\">&quot;12 34 56&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> filter <span class=\"operator\">=</span> str.filter &#123; (char) -&gt; <span class=\"type\">Bool</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    char <span class=\"operator\">!=</span> <span class=\"string\">&quot; &quot;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(filter);<span class=\"comment\">//123456</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//4. enumerated()</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> str <span class=\"operator\">=</span> <span class=\"string\">&quot;123456&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> str.enumerated() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(data);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</details>\n\n<p>1.2.2 Independent APIs of NSString</p>\n<details>\n<summary>Sample Code</summary>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. initialize methods</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>(stringLiteral: <span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>.<span class=\"keyword\">init</span>(string: <span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. boolValue</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>(stringLiteral: <span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nsStr.boolValue);<span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3. isEqual()</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>(stringLiteral: <span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nsStr.isEqual(to: <span class=\"string\">&quot;123456&quot;</span>));<span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 4. Numeric Ops</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>(stringLiteral: <span class=\"string\">&quot;123456&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nsStr.intValue);</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nsStr.floatValue);</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nsStr.doubleValue);</span><br></pre></td></tr></table></figure>\n</details>\n"},{"title":"04. Set Read-only permission of the property","date":"2023-02-28T12:52:59.000Z","_content":"  \n<font color=gray size=2>*It will take about 1 minutes to finish reading this article.*</font>\n\n  \nIn Swift, there is no keyword \"readonly\" like Objective-C to set read-only access permissions. How can Swift implement read-only access permissions? We can do this as follows:\n\n```Swift \nclass MyClass {\n    private(set) var name: String?\n} \n```\nExternal access is normal:\n```\nlet a = ClassA()\nprint(a.title)\n```\nBut the following is wrong:\n```\na.title = \"1234\"\n```\nThe following errors will be reported:\n```\nCannot assign to property: 'title' setter is inaccessible\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/Swift/00. Tips/04. Set Read-only permission of the property.md","raw":"---\ntitle: 04. Set Read-only permission of the property\ndate: 2023-02-28 13:52:59\ncategories: \n- [Swift, 00.Tips]\ntags:\n- Read-only\n---\n  \n<font color=gray size=2>*It will take about 1 minutes to finish reading this article.*</font>\n\n  \nIn Swift, there is no keyword \"readonly\" like Objective-C to set read-only access permissions. How can Swift implement read-only access permissions? We can do this as follows:\n\n```Swift \nclass MyClass {\n    private(set) var name: String?\n} \n```\nExternal access is normal:\n```\nlet a = ClassA()\nprint(a.title)\n```\nBut the following is wrong:\n```\na.title = \"1234\"\n```\nThe following errors will be reported:\n```\nCannot assign to property: 'title' setter is inaccessible\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"Swift/00. Tips/04. Set Read-only permission of the property","published":1,"updated":"2023-08-15T09:14:33.781Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllcf81g0000bps0mh0mp7s5o","content":"<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p>\n<p>In Swift, there is no keyword “readonly” like Objective-C to set read-only access permissions. How can Swift implement read-only access permissions? We can do this as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private(set)</span> <span class=\"keyword\">var</span> name: <span class=\"type\">String</span>?</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>External access is normal:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a = ClassA()</span><br><span class=\"line\">print(a.title)</span><br></pre></td></tr></table></figure>\n<p>But the following is wrong:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a.title = &quot;1234&quot;</span><br></pre></td></tr></table></figure>\n<p>The following errors will be reported:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cannot assign to property: &#x27;title&#x27; setter is inaccessible</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p>\n<p>In Swift, there is no keyword “readonly” like Objective-C to set read-only access permissions. How can Swift implement read-only access permissions? We can do this as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private(set)</span> <span class=\"keyword\">var</span> name: <span class=\"type\">String</span>?</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>External access is normal:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a = ClassA()</span><br><span class=\"line\">print(a.title)</span><br></pre></td></tr></table></figure>\n<p>But the following is wrong:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a.title = &quot;1234&quot;</span><br></pre></td></tr></table></figure>\n<p>The following errors will be reported:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cannot assign to property: &#x27;title&#x27; setter is inaccessible</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"title":"05. Computed properties and Stored properties","date":"2023-02-28T12:53:59.000Z","_content":"\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\n<strong> Example Code </strong>\n```Swift \n//arr1\nvar arr1:[Int] =  {\n    return [1,2,3];\n}()\n//arr2\nvar arr2:[Int] {\n    return [1,2,3];\n}\n//arr3\nvar arr3:[Int] {\n    get {\n        return [1,2,3];\n    }\n}\n//arr4\nvar arr4:[Int] {\n    get {\n        return [1];\n    }\n    set {\n        print(newValue);\n    }\n}\n```\n> arr1 declares a Stored-Property assigned value through a closure operation.    \n> arr2 declares a read-only Computed-Property.    \n> arr3 declares a read-only Computed-Property too.    \n> arr4 declares a read-write Computed-Property too.\n\nIt can be seen that the Stored-Property can be directly read and written. The Computed-Property cannot be operated directly. It is only used for calculation and has no specific value.\n\n> Note:\n> 1. Computed-Properties can be used for classes, structures, and enumerations, while Stored-Properties can only be used for classes and structures.    \n> 2. The Stored-Properties can be defined with the keyword 'var' or the keyword let'. The Computed-Property can only be defined with the keyword 'var'.   \n> 3. Computed-Properties do not directly store values, but provide a getter and an optional setter to indirectly obtain and set the values of other properties or variables.\n\n \n## **<font color=gray size=3 >*Reference Documents*</font>**\n<https://cloud.tencent.com/developer/article/1610855>  \n","source":"_posts/Swift/00. Tips/05. Computed properties and Stored properties.md","raw":"---\ntitle: 05. Computed properties and Stored properties\ndate: 2023-02-28 13:53:59\ncategories: \n- [Swift, 00.Tips]\ntags:\n- Computed\n- Stored\n---\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\n<strong> Example Code </strong>\n```Swift \n//arr1\nvar arr1:[Int] =  {\n    return [1,2,3];\n}()\n//arr2\nvar arr2:[Int] {\n    return [1,2,3];\n}\n//arr3\nvar arr3:[Int] {\n    get {\n        return [1,2,3];\n    }\n}\n//arr4\nvar arr4:[Int] {\n    get {\n        return [1];\n    }\n    set {\n        print(newValue);\n    }\n}\n```\n> arr1 declares a Stored-Property assigned value through a closure operation.    \n> arr2 declares a read-only Computed-Property.    \n> arr3 declares a read-only Computed-Property too.    \n> arr4 declares a read-write Computed-Property too.\n\nIt can be seen that the Stored-Property can be directly read and written. The Computed-Property cannot be operated directly. It is only used for calculation and has no specific value.\n\n> Note:\n> 1. Computed-Properties can be used for classes, structures, and enumerations, while Stored-Properties can only be used for classes and structures.    \n> 2. The Stored-Properties can be defined with the keyword 'var' or the keyword let'. The Computed-Property can only be defined with the keyword 'var'.   \n> 3. Computed-Properties do not directly store values, but provide a getter and an optional setter to indirectly obtain and set the values of other properties or variables.\n\n \n## **<font color=gray size=3 >*Reference Documents*</font>**\n<https://cloud.tencent.com/developer/article/1610855>  \n","slug":"Swift/00. Tips/05. Computed properties and Stored properties","published":1,"updated":"2023-08-15T09:16:46.244Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllcf81g2000fps0m4fcrdx23","content":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p><strong> Example Code </strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//arr1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1:[<span class=\"type\">Int</span>] <span class=\"operator\">=</span>  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;()</span><br><span class=\"line\"><span class=\"comment\">//arr2</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2:[<span class=\"type\">Int</span>] &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//arr3</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr3:[<span class=\"type\">Int</span>] &#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//arr4</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr4:[<span class=\"type\">Int</span>] &#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [<span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">set</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(newValue);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>arr1 declares a Stored-Property assigned value through a closure operation.<br>arr2 declares a read-only Computed-Property.<br>arr3 declares a read-only Computed-Property too.<br>arr4 declares a read-write Computed-Property too.</p>\n</blockquote>\n<p>It can be seen that the Stored-Property can be directly read and written. The Computed-Property cannot be operated directly. It is only used for calculation and has no specific value.</p>\n<blockquote>\n<p>Note:</p>\n<ol>\n<li>Computed-Properties can be used for classes, structures, and enumerations, while Stored-Properties can only be used for classes and structures.    </li>\n<li>The Stored-Properties can be defined with the keyword ‘var’ or the keyword let’. The Computed-Property can only be defined with the keyword ‘var’.   </li>\n<li>Computed-Properties do not directly store values, but provide a getter and an optional setter to indirectly obtain and set the values of other properties or variables.</li>\n</ol>\n</blockquote>\n<h2 id=\"Reference-Documents\"><a href=\"#Reference-Documents\" class=\"headerlink\" title=\"Reference Documents\"></a><strong><font color=gray size=3 ><em>Reference Documents</em></font></strong></h2><p><a href=\"https://cloud.tencent.com/developer/article/1610855\">https://cloud.tencent.com/developer/article/1610855</a>  </p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p><strong> Example Code </strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//arr1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1:[<span class=\"type\">Int</span>] <span class=\"operator\">=</span>  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;()</span><br><span class=\"line\"><span class=\"comment\">//arr2</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2:[<span class=\"type\">Int</span>] &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//arr3</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr3:[<span class=\"type\">Int</span>] &#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//arr4</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr4:[<span class=\"type\">Int</span>] &#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [<span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">set</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(newValue);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>arr1 declares a Stored-Property assigned value through a closure operation.<br>arr2 declares a read-only Computed-Property.<br>arr3 declares a read-only Computed-Property too.<br>arr4 declares a read-write Computed-Property too.</p>\n</blockquote>\n<p>It can be seen that the Stored-Property can be directly read and written. The Computed-Property cannot be operated directly. It is only used for calculation and has no specific value.</p>\n<blockquote>\n<p>Note:</p>\n<ol>\n<li>Computed-Properties can be used for classes, structures, and enumerations, while Stored-Properties can only be used for classes and structures.    </li>\n<li>The Stored-Properties can be defined with the keyword ‘var’ or the keyword let’. The Computed-Property can only be defined with the keyword ‘var’.   </li>\n<li>Computed-Properties do not directly store values, but provide a getter and an optional setter to indirectly obtain and set the values of other properties or variables.</li>\n</ol>\n</blockquote>\n<h2 id=\"Reference-Documents\"><a href=\"#Reference-Documents\" class=\"headerlink\" title=\"Reference Documents\"></a><strong><font color=gray size=3 ><em>Reference Documents</em></font></strong></h2><p><a href=\"https://cloud.tencent.com/developer/article/1610855\">https://cloud.tencent.com/developer/article/1610855</a>  </p>\n"},{"title":"06. How to Define a singleton?","date":"2023-02-28T12:54:59.000Z","_content":"\n<font color=gray size=2>*It will take about 1 minutes to finish reading this article.*</font>\n\n\nWe can define a singleton in OC like this:\n```Swift\n+ (instancetype) sharedManager {\n    static Object *obj = nil;\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        obj = [[Object alloc] init];\n    });\n    return obj;\n}\n```\nUse dispatch_once_t in GCD can ensure that the code in it is called only once, so as to ensure the safety of the singleton on the thread. However, since the original Dispatch once method is abandoned in Swift, dispatch_once_t cannot be used to create a singleton. 'Let' is a simpler way to ensure thread safety. So the final code is as follows：\n\n<strong> Example Code</strong>\n```Swift \nfinal class SingleOne {\n    static let shared = SingleOne()\n    private init() {}\n\n    var first: Bool = false\n    var second: String = \"\"\n}\n```\n\n## **<font color=gray size=3 >*Reference Documents*</font>**\n <https://blog.csdn.net/LiqunZhang/article/details/115127156>\n","source":"_posts/Swift/00. Tips/06. How to Define a singleton?.md","raw":"---\ntitle: 06. How to Define a singleton?\ndate: 2023-02-28 13:54:59\ncategories: \n- [Swift, 00.Tips]\ntags:\n- singleton\n---\n\n<font color=gray size=2>*It will take about 1 minutes to finish reading this article.*</font>\n\n\nWe can define a singleton in OC like this:\n```Swift\n+ (instancetype) sharedManager {\n    static Object *obj = nil;\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        obj = [[Object alloc] init];\n    });\n    return obj;\n}\n```\nUse dispatch_once_t in GCD can ensure that the code in it is called only once, so as to ensure the safety of the singleton on the thread. However, since the original Dispatch once method is abandoned in Swift, dispatch_once_t cannot be used to create a singleton. 'Let' is a simpler way to ensure thread safety. So the final code is as follows：\n\n<strong> Example Code</strong>\n```Swift \nfinal class SingleOne {\n    static let shared = SingleOne()\n    private init() {}\n\n    var first: Bool = false\n    var second: String = \"\"\n}\n```\n\n## **<font color=gray size=3 >*Reference Documents*</font>**\n <https://blog.csdn.net/LiqunZhang/article/details/115127156>\n","slug":"Swift/00. Tips/06. How to Define a singleton?","published":1,"updated":"2023-08-15T09:17:06.876Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllcf81g3000gps0me2v7g85s","content":"<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p>\n<p>We can define a singleton in OC like this:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">+</span> (instancetype) sharedManager &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">Object</span> <span class=\"operator\">*</span>obj <span class=\"operator\">=</span> <span class=\"literal\">nil</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> dispatch_once_t onceToken;</span><br><span class=\"line\">    dispatch_once(<span class=\"operator\">&amp;</span>onceToken, <span class=\"operator\">^</span>&#123;</span><br><span class=\"line\">        obj <span class=\"operator\">=</span> [[<span class=\"type\">Object</span> alloc] <span class=\"keyword\">init</span>];</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Use dispatch_once_t in GCD can ensure that the code in it is called only once, so as to ensure the safety of the singleton on the thread. However, since the original Dispatch once method is abandoned in Swift, dispatch_once_t cannot be used to create a singleton. ‘Let’ is a simpler way to ensure thread safety. So the final code is as follows：</p>\n<p><strong> Example Code</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SingleOne</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> shared <span class=\"operator\">=</span> <span class=\"type\">SingleOne</span>()</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">init</span>() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> first: <span class=\"type\">Bool</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> second: <span class=\"type\">String</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Reference-Documents\"><a href=\"#Reference-Documents\" class=\"headerlink\" title=\"Reference Documents\"></a><strong><font color=gray size=3 ><em>Reference Documents</em></font></strong></h2><p> <a href=\"https://blog.csdn.net/LiqunZhang/article/details/115127156\">https://blog.csdn.net/LiqunZhang/article/details/115127156</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p>\n<p>We can define a singleton in OC like this:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">+</span> (instancetype) sharedManager &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">Object</span> <span class=\"operator\">*</span>obj <span class=\"operator\">=</span> <span class=\"literal\">nil</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> dispatch_once_t onceToken;</span><br><span class=\"line\">    dispatch_once(<span class=\"operator\">&amp;</span>onceToken, <span class=\"operator\">^</span>&#123;</span><br><span class=\"line\">        obj <span class=\"operator\">=</span> [[<span class=\"type\">Object</span> alloc] <span class=\"keyword\">init</span>];</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Use dispatch_once_t in GCD can ensure that the code in it is called only once, so as to ensure the safety of the singleton on the thread. However, since the original Dispatch once method is abandoned in Swift, dispatch_once_t cannot be used to create a singleton. ‘Let’ is a simpler way to ensure thread safety. So the final code is as follows：</p>\n<p><strong> Example Code</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SingleOne</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> shared <span class=\"operator\">=</span> <span class=\"type\">SingleOne</span>()</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">init</span>() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> first: <span class=\"type\">Bool</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> second: <span class=\"type\">String</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Reference-Documents\"><a href=\"#Reference-Documents\" class=\"headerlink\" title=\"Reference Documents\"></a><strong><font color=gray size=3 ><em>Reference Documents</em></font></strong></h2><p> <a href=\"https://blog.csdn.net/LiqunZhang/article/details/115127156\">https://blog.csdn.net/LiqunZhang/article/details/115127156</a></p>\n"},{"title":"07. How to print the memory address of a variable?","date":"2023-02-28T12:55:59.000Z","_content":"\n<font color=gray size=2>*It will take about 1 minutes to finish reading this article.*</font>\n\nWe can print the memory address of a variable like this:\n```Swift\nvar a = 100\nwithUnsafePointer(to: &a) {ptr in print(ptr)}\n//result: 0x00007ff7bfeff210\n```\nOr using the following method is OK:\n```Swift\nfunc printPointer<T>(ptr: UnsafePointer<T>) {\n    print(ptr)\n}\nvar a = 100\nprintPointer(ptr: &a)\n//result: 0x00007ff7bfeff220\n```\n","source":"_posts/Swift/00. Tips/07. How to print the memory address of a variable?.md","raw":"---\ntitle: 07. How to print the memory address of a variable?\ndate: 2023-02-28 13:55:59\ncategories: \n- [Swift, 00.Tips]\ntags:\n- memory address\n---\n\n<font color=gray size=2>*It will take about 1 minutes to finish reading this article.*</font>\n\nWe can print the memory address of a variable like this:\n```Swift\nvar a = 100\nwithUnsafePointer(to: &a) {ptr in print(ptr)}\n//result: 0x00007ff7bfeff210\n```\nOr using the following method is OK:\n```Swift\nfunc printPointer<T>(ptr: UnsafePointer<T>) {\n    print(ptr)\n}\nvar a = 100\nprintPointer(ptr: &a)\n//result: 0x00007ff7bfeff220\n```\n","slug":"Swift/00. Tips/07. How to print the memory address of a variable?","published":1,"updated":"2023-08-15T09:17:46.684Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllcf81g5000jps0m38gg4wem","content":"<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p>\n<p>We can print the memory address of a variable like this:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"built_in\">withUnsafePointer</span>(to: <span class=\"operator\">&amp;</span>a) &#123;ptr <span class=\"keyword\">in</span> <span class=\"built_in\">print</span>(ptr)&#125;</span><br><span class=\"line\"><span class=\"comment\">//result: 0x00007ff7bfeff210</span></span><br></pre></td></tr></table></figure>\n<p>Or using the following method is OK:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">printPointer</span>&lt;<span class=\"type\">T</span>&gt;(<span class=\"params\">ptr</span>: <span class=\"type\">UnsafePointer</span>&lt;<span class=\"type\">T</span>&gt;) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(ptr)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\">printPointer(ptr: <span class=\"operator\">&amp;</span>a)</span><br><span class=\"line\"><span class=\"comment\">//result: 0x00007ff7bfeff220</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p>\n<p>We can print the memory address of a variable like this:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"built_in\">withUnsafePointer</span>(to: <span class=\"operator\">&amp;</span>a) &#123;ptr <span class=\"keyword\">in</span> <span class=\"built_in\">print</span>(ptr)&#125;</span><br><span class=\"line\"><span class=\"comment\">//result: 0x00007ff7bfeff210</span></span><br></pre></td></tr></table></figure>\n<p>Or using the following method is OK:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">printPointer</span>&lt;<span class=\"type\">T</span>&gt;(<span class=\"params\">ptr</span>: <span class=\"type\">UnsafePointer</span>&lt;<span class=\"type\">T</span>&gt;) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(ptr)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\">printPointer(ptr: <span class=\"operator\">&amp;</span>a)</span><br><span class=\"line\"><span class=\"comment\">//result: 0x00007ff7bfeff220</span></span><br></pre></td></tr></table></figure>\n"},{"title":"08. Force unwrapping and Implicitly Unwrapped Optionals","date":"2023-02-28T12:56:59.000Z","_content":"\n<font color=gray size=2>*It will take about 1 minutes to finish reading this article.*</font>\n\n## **<font size=4>1. Force unwrapping </font>**\nForced unwrapping of optional types means that when we are sure that an optional type must have a value, we can use the exclamation mark ! to force parsing of it and thus get the value in it. If we use forced parsing on an optional type that has no value, a runtime error will be triggered. Therefore, when using forced parsing, we must make sure that the optional type does have a value.\n```Swift\nlet possibleString: String? = \"An optional string.\"\nlet forcedString: String = possibleString! // Need exclamation mark to get value\n```\n\n## **<font size=4>2. Implicitly Unwrapped Optionals </font>**\nAn implicitly Unwrapped Optionals type is a special kind of optional type that is declared with the exclamation mark ! flag to indicate that this optional type can be implicitly treated as a non-optional type for subsequent use, without the need to force resolution each time. At declaration time, we can declare an optional type as an implicitly resolved optional type, which will throw an error at runtime if the variable or constant is not initialized to a non-nil value at the time of use.\n\n```Swift\nlet assumedString2: String! = \"123\"\nlet possibleString2: String? = assumedString2\nlet implicitString2: String = assumedString2  //No exclamation point needed\n```\n\n```Swift\nlet assumedString1: String! = nil\nlet possibleString1: String? = assumedString1\nlet implicitString1: String = assumedString1  // Report Error\n```\nSo, implicitly unwrapped optionals type is special optionals type that can be used to get the value in it directly using the variable name, without having to force unwrapping every time.\nWe can do these as follows:\n```Swift\nif assumedString != nil {\n    print(assumedString!)\n}\n// Prints \"An implicitly unwrapped optional string.\"\n```\nYou can also use an implicitly unwrapped optional with optional binding, to check and unwrap its value in a single statement:\n```Swift\nif let definiteString = assumedString {\n    print(definiteString)\n}\n// Prints \"An implicitly unwrapped optional string.\"\n```\n","source":"_posts/Swift/00. Tips/08. Implicitly Unwrapped Optionals and Force unwrapping.md","raw":"---\ntitle: 08. Force unwrapping and Implicitly Unwrapped Optionals\ndate: 2023-02-28 13:56:59\ncategories: \n- [Swift, 00.Tips]\ntags:\n- Force unwrapping\n- Implicitly Unwrapped\n---\n\n<font color=gray size=2>*It will take about 1 minutes to finish reading this article.*</font>\n\n## **<font size=4>1. Force unwrapping </font>**\nForced unwrapping of optional types means that when we are sure that an optional type must have a value, we can use the exclamation mark ! to force parsing of it and thus get the value in it. If we use forced parsing on an optional type that has no value, a runtime error will be triggered. Therefore, when using forced parsing, we must make sure that the optional type does have a value.\n```Swift\nlet possibleString: String? = \"An optional string.\"\nlet forcedString: String = possibleString! // Need exclamation mark to get value\n```\n\n## **<font size=4>2. Implicitly Unwrapped Optionals </font>**\nAn implicitly Unwrapped Optionals type is a special kind of optional type that is declared with the exclamation mark ! flag to indicate that this optional type can be implicitly treated as a non-optional type for subsequent use, without the need to force resolution each time. At declaration time, we can declare an optional type as an implicitly resolved optional type, which will throw an error at runtime if the variable or constant is not initialized to a non-nil value at the time of use.\n\n```Swift\nlet assumedString2: String! = \"123\"\nlet possibleString2: String? = assumedString2\nlet implicitString2: String = assumedString2  //No exclamation point needed\n```\n\n```Swift\nlet assumedString1: String! = nil\nlet possibleString1: String? = assumedString1\nlet implicitString1: String = assumedString1  // Report Error\n```\nSo, implicitly unwrapped optionals type is special optionals type that can be used to get the value in it directly using the variable name, without having to force unwrapping every time.\nWe can do these as follows:\n```Swift\nif assumedString != nil {\n    print(assumedString!)\n}\n// Prints \"An implicitly unwrapped optional string.\"\n```\nYou can also use an implicitly unwrapped optional with optional binding, to check and unwrap its value in a single statement:\n```Swift\nif let definiteString = assumedString {\n    print(definiteString)\n}\n// Prints \"An implicitly unwrapped optional string.\"\n```\n","slug":"Swift/00. Tips/08. Implicitly Unwrapped Optionals and Force unwrapping","published":1,"updated":"2023-08-15T09:18:35.140Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllcf81g5000kps0m97li0s6k","content":"<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p>\n<h2 id=\"1-Force-unwrapping\"><a href=\"#1-Force-unwrapping\" class=\"headerlink\" title=\"1. Force unwrapping \"></a><strong><font size=4>1. Force unwrapping </font></strong></h2><p>Forced unwrapping of optional types means that when we are sure that an optional type must have a value, we can use the exclamation mark ! to force parsing of it and thus get the value in it. If we use forced parsing on an optional type that has no value, a runtime error will be triggered. Therefore, when using forced parsing, we must make sure that the optional type does have a value.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> possibleString: <span class=\"type\">String</span>? <span class=\"operator\">=</span> <span class=\"string\">&quot;An optional string.&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> forcedString: <span class=\"type\">String</span> <span class=\"operator\">=</span> possibleString<span class=\"operator\">!</span> <span class=\"comment\">// Need exclamation mark to get value</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-Implicitly-Unwrapped-Optionals\"><a href=\"#2-Implicitly-Unwrapped-Optionals\" class=\"headerlink\" title=\"2. Implicitly Unwrapped Optionals \"></a><strong><font size=4>2. Implicitly Unwrapped Optionals </font></strong></h2><p>An implicitly Unwrapped Optionals type is a special kind of optional type that is declared with the exclamation mark ! flag to indicate that this optional type can be implicitly treated as a non-optional type for subsequent use, without the need to force resolution each time. At declaration time, we can declare an optional type as an implicitly resolved optional type, which will throw an error at runtime if the variable or constant is not initialized to a non-nil value at the time of use.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> assumedString2: <span class=\"type\">String</span>! <span class=\"operator\">=</span> <span class=\"string\">&quot;123&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> possibleString2: <span class=\"type\">String</span>? <span class=\"operator\">=</span> assumedString2</span><br><span class=\"line\"><span class=\"keyword\">let</span> implicitString2: <span class=\"type\">String</span> <span class=\"operator\">=</span> assumedString2  <span class=\"comment\">//No exclamation point needed</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> assumedString1: <span class=\"type\">String</span>! <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> possibleString1: <span class=\"type\">String</span>? <span class=\"operator\">=</span> assumedString1</span><br><span class=\"line\"><span class=\"keyword\">let</span> implicitString1: <span class=\"type\">String</span> <span class=\"operator\">=</span> assumedString1  <span class=\"comment\">// Report Error</span></span><br></pre></td></tr></table></figure>\n<p>So, implicitly unwrapped optionals type is special optionals type that can be used to get the value in it directly using the variable name, without having to force unwrapping every time.<br>We can do these as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> assumedString <span class=\"operator\">!=</span> <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(assumedString<span class=\"operator\">!</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Prints &quot;An implicitly unwrapped optional string.&quot;</span></span><br></pre></td></tr></table></figure>\n<p>You can also use an implicitly unwrapped optional with optional binding, to check and unwrap its value in a single statement:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> definiteString <span class=\"operator\">=</span> assumedString &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(definiteString)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Prints &quot;An implicitly unwrapped optional string.&quot;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p>\n<h2 id=\"1-Force-unwrapping\"><a href=\"#1-Force-unwrapping\" class=\"headerlink\" title=\"1. Force unwrapping \"></a><strong><font size=4>1. Force unwrapping </font></strong></h2><p>Forced unwrapping of optional types means that when we are sure that an optional type must have a value, we can use the exclamation mark ! to force parsing of it and thus get the value in it. If we use forced parsing on an optional type that has no value, a runtime error will be triggered. Therefore, when using forced parsing, we must make sure that the optional type does have a value.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> possibleString: <span class=\"type\">String</span>? <span class=\"operator\">=</span> <span class=\"string\">&quot;An optional string.&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> forcedString: <span class=\"type\">String</span> <span class=\"operator\">=</span> possibleString<span class=\"operator\">!</span> <span class=\"comment\">// Need exclamation mark to get value</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-Implicitly-Unwrapped-Optionals\"><a href=\"#2-Implicitly-Unwrapped-Optionals\" class=\"headerlink\" title=\"2. Implicitly Unwrapped Optionals \"></a><strong><font size=4>2. Implicitly Unwrapped Optionals </font></strong></h2><p>An implicitly Unwrapped Optionals type is a special kind of optional type that is declared with the exclamation mark ! flag to indicate that this optional type can be implicitly treated as a non-optional type for subsequent use, without the need to force resolution each time. At declaration time, we can declare an optional type as an implicitly resolved optional type, which will throw an error at runtime if the variable or constant is not initialized to a non-nil value at the time of use.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> assumedString2: <span class=\"type\">String</span>! <span class=\"operator\">=</span> <span class=\"string\">&quot;123&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> possibleString2: <span class=\"type\">String</span>? <span class=\"operator\">=</span> assumedString2</span><br><span class=\"line\"><span class=\"keyword\">let</span> implicitString2: <span class=\"type\">String</span> <span class=\"operator\">=</span> assumedString2  <span class=\"comment\">//No exclamation point needed</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> assumedString1: <span class=\"type\">String</span>! <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> possibleString1: <span class=\"type\">String</span>? <span class=\"operator\">=</span> assumedString1</span><br><span class=\"line\"><span class=\"keyword\">let</span> implicitString1: <span class=\"type\">String</span> <span class=\"operator\">=</span> assumedString1  <span class=\"comment\">// Report Error</span></span><br></pre></td></tr></table></figure>\n<p>So, implicitly unwrapped optionals type is special optionals type that can be used to get the value in it directly using the variable name, without having to force unwrapping every time.<br>We can do these as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> assumedString <span class=\"operator\">!=</span> <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(assumedString<span class=\"operator\">!</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Prints &quot;An implicitly unwrapped optional string.&quot;</span></span><br></pre></td></tr></table></figure>\n<p>You can also use an implicitly unwrapped optional with optional binding, to check and unwrap its value in a single statement:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> definiteString <span class=\"operator\">=</span> assumedString &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(definiteString)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Prints &quot;An implicitly unwrapped optional string.&quot;</span></span><br></pre></td></tr></table></figure>\n"},{"title":"00. Three forms of Closures","date":"2023-03-01T20:40:59.000Z","_content":"\n<font color=gray size=2>*It will take about 1 minutes to finish reading this article.*</font>\n\nAs the Apple official documents says, closures take one of three forms:\n\n\n### <font size=3 color=#4169E1>**1. Global functions**</font> \nGlobal functions are closures that have a name and don’t capture any values.\n```Swift \nfunc setupBlock {\n    print(\"Hello\")\n}\n```\nIt is a special closure.\n\n### <font size=3 color=#4169E1>**2. Nested functions**</font>\nNested functions are closures that have a name and can capture values from their enclosing function. \n```Swift \nfunc makeIncrementer() -> () -> Int {\n    var runningTotal = 10\n    // nested function，it is a closure too.\n    func incrementer() -> Int{\n        runningTotal += 1\n        return runningTotal\n    }\n    return incrementer\n}\n```\n### <font size=3 color=#4169E1>**3. Closure expressions**</font>\nClosure expressions are unnamed closures written in a lightweight syntax that can capture values from their surrounding context.\n```Swift \n{ (param) -> ReturnType in\n    // Method body\n}\n```\nSwift’s closure expressions have a clean, clear style, with optimizations that encourage brief, clutter-free syntax in common scenarios. These optimizations include:\n1. Inferring parameter and return value types from context\n2. Implicit returns from single-expression closures\n3. Shorthand argument names\n4. Trailing closure syntax\n\n## **<font color=gray size=3 >*Reference Documents*</font>**\n<https://docs.swift.org/swift-book/LanguageGuide/Closures.html>  \n","source":"_posts/Swift/02. Closures/00. Three Forms of Closures.md","raw":"---\ntitle: 00. Three forms of Closures\ndate: 2023-02-29 21:40:59\ncategories: \n- [Swift, 02. Closures]\ntags:\n- Closures\n---\n\n<font color=gray size=2>*It will take about 1 minutes to finish reading this article.*</font>\n\nAs the Apple official documents says, closures take one of three forms:\n\n\n### <font size=3 color=#4169E1>**1. Global functions**</font> \nGlobal functions are closures that have a name and don’t capture any values.\n```Swift \nfunc setupBlock {\n    print(\"Hello\")\n}\n```\nIt is a special closure.\n\n### <font size=3 color=#4169E1>**2. Nested functions**</font>\nNested functions are closures that have a name and can capture values from their enclosing function. \n```Swift \nfunc makeIncrementer() -> () -> Int {\n    var runningTotal = 10\n    // nested function，it is a closure too.\n    func incrementer() -> Int{\n        runningTotal += 1\n        return runningTotal\n    }\n    return incrementer\n}\n```\n### <font size=3 color=#4169E1>**3. Closure expressions**</font>\nClosure expressions are unnamed closures written in a lightweight syntax that can capture values from their surrounding context.\n```Swift \n{ (param) -> ReturnType in\n    // Method body\n}\n```\nSwift’s closure expressions have a clean, clear style, with optimizations that encourage brief, clutter-free syntax in common scenarios. These optimizations include:\n1. Inferring parameter and return value types from context\n2. Implicit returns from single-expression closures\n3. Shorthand argument names\n4. Trailing closure syntax\n\n## **<font color=gray size=3 >*Reference Documents*</font>**\n<https://docs.swift.org/swift-book/LanguageGuide/Closures.html>  \n","slug":"Swift/02. Closures/00. Three Forms of Closures","published":1,"updated":"2023-08-15T09:33:18.676Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllcf81g6000nps0m0olr016q","content":"<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p>\n<p>As the Apple official documents says, closures take one of three forms:</p>\n<h3 id=\"1-Global-functions\"><a href=\"#1-Global-functions\" class=\"headerlink\" title=\"1. Global functions\"></a><font size=3 color=#4169E1><strong>1. Global functions</strong></font></h3><p>Global functions are closures that have a name and don’t capture any values.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">setupBlock</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Hello&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>It is a special closure.</p>\n<h3 id=\"2-Nested-functions\"><a href=\"#2-Nested-functions\" class=\"headerlink\" title=\"2. Nested functions\"></a><font size=3 color=#4169E1><strong>2. Nested functions</strong></font></h3><p>Nested functions are closures that have a name and can capture values from their enclosing function. </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">makeIncrementer</span>() -&gt; () -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> runningTotal <span class=\"operator\">=</span> <span class=\"number\">10</span></span><br><span class=\"line\">    <span class=\"comment\">// nested function，it is a closure too.</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">incrementer</span>() -&gt; <span class=\"type\">Int</span>&#123;</span><br><span class=\"line\">        runningTotal <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> runningTotal</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> incrementer</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-Closure-expressions\"><a href=\"#3-Closure-expressions\" class=\"headerlink\" title=\"3. Closure expressions\"></a><font size=3 color=#4169E1><strong>3. Closure expressions</strong></font></h3><p>Closure expressions are unnamed closures written in a lightweight syntax that can capture values from their surrounding context.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; (param) -&gt; <span class=\"type\">ReturnType</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"comment\">// Method body</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Swift’s closure expressions have a clean, clear style, with optimizations that encourage brief, clutter-free syntax in common scenarios. These optimizations include:</p>\n<ol>\n<li>Inferring parameter and return value types from context</li>\n<li>Implicit returns from single-expression closures</li>\n<li>Shorthand argument names</li>\n<li>Trailing closure syntax</li>\n</ol>\n<h2 id=\"Reference-Documents\"><a href=\"#Reference-Documents\" class=\"headerlink\" title=\"Reference Documents\"></a><strong><font color=gray size=3 ><em>Reference Documents</em></font></strong></h2><p><a href=\"https://docs.swift.org/swift-book/LanguageGuide/Closures.html\">https://docs.swift.org/swift-book/LanguageGuide/Closures.html</a>  </p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p>\n<p>As the Apple official documents says, closures take one of three forms:</p>\n<h3 id=\"1-Global-functions\"><a href=\"#1-Global-functions\" class=\"headerlink\" title=\"1. Global functions\"></a><font size=3 color=#4169E1><strong>1. Global functions</strong></font></h3><p>Global functions are closures that have a name and don’t capture any values.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">setupBlock</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Hello&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>It is a special closure.</p>\n<h3 id=\"2-Nested-functions\"><a href=\"#2-Nested-functions\" class=\"headerlink\" title=\"2. Nested functions\"></a><font size=3 color=#4169E1><strong>2. Nested functions</strong></font></h3><p>Nested functions are closures that have a name and can capture values from their enclosing function. </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">makeIncrementer</span>() -&gt; () -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> runningTotal <span class=\"operator\">=</span> <span class=\"number\">10</span></span><br><span class=\"line\">    <span class=\"comment\">// nested function，it is a closure too.</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">incrementer</span>() -&gt; <span class=\"type\">Int</span>&#123;</span><br><span class=\"line\">        runningTotal <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> runningTotal</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> incrementer</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-Closure-expressions\"><a href=\"#3-Closure-expressions\" class=\"headerlink\" title=\"3. Closure expressions\"></a><font size=3 color=#4169E1><strong>3. Closure expressions</strong></font></h3><p>Closure expressions are unnamed closures written in a lightweight syntax that can capture values from their surrounding context.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; (param) -&gt; <span class=\"type\">ReturnType</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"comment\">// Method body</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Swift’s closure expressions have a clean, clear style, with optimizations that encourage brief, clutter-free syntax in common scenarios. These optimizations include:</p>\n<ol>\n<li>Inferring parameter and return value types from context</li>\n<li>Implicit returns from single-expression closures</li>\n<li>Shorthand argument names</li>\n<li>Trailing closure syntax</li>\n</ol>\n<h2 id=\"Reference-Documents\"><a href=\"#Reference-Documents\" class=\"headerlink\" title=\"Reference Documents\"></a><strong><font color=gray size=3 ><em>Reference Documents</em></font></strong></h2><p><a href=\"https://docs.swift.org/swift-book/LanguageGuide/Closures.html\">https://docs.swift.org/swift-book/LanguageGuide/Closures.html</a>  </p>\n"},{"title":"01. Capturing Values","date":"2023-03-01T20:40:59.000Z","_content":"\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nThe capture of values in Swift's closure and OC's Block is different.\n\n### <font size=3 color=#4169E1>**1. The capture of values in OC.**</font> \n```Swift \nNSInteger a = 100;\nvoid(^block)(void) = ^{\n    NSLog(@\"block = %ld:\", a);\n};\n \na += 1;\nNSLog(@\"out1 = %ld:\", a);\nblock();\nNSLog(@\"out2 = %ld:\", a);\n//result:\n2021-08-17 11:27:13.846743+0800 MDProject[30746:23593763] out1 = 101\n2021-08-17 11:27:13.846885+0800 MDProject[30746:23593763] block = 100\n2021-08-17 11:27:13.847002+0800 MDProject[30746:23593763] out2 = 101\n```\n### <font size=3 color=#4169E1>**2. The capture of values in Swift.**</font> \n```Swift\nvar a = 100\nlet closure = {\n    print(\"closure = \\(a)\")\n}\na += 1\nprint(\"out 1 = \\(a)\")\nclosure()\nprint(\"out 2 = \\(a)\")\n```\nResult:\n```Swift\nout1 = 101\nclosure = 101\nout 2 = 101\n```\nSwift closures capture \"references\", not the objects they reference. We can print the address of variable a to prove this.\n```Swift\nvar a = 100\nwithUnsafePointer(to: &a) {ptr in print(ptr)}\nlet closure = {\n    print(\"closure = \\(a)\")\n    withUnsafePointer(to: &a) {ptr in print(ptr)}\n}\nclosure()\na += 1\nprint(\"out 1 = \\(a)\")\nwithUnsafePointer(to: &a) {ptr in print(ptr)}\n\nclosure()\nprint(\"out 2 = \\(a)\")\nwithUnsafePointer(to: &a) {ptr in print(ptr)}\n```\nResult as follows:\n```Swift\n0x0000600000209490\nclosure = 100\n0x0000600000209490\nout 1 = 101\n0x0000600000209490\nclosure = 101\n0x0000600000209490\nout 2 = 101\n0x0000600000209490\n```\nThey all have the same address, It proves that closure capture the reference of the variable, not like block in OC.\n\n### <font size=3 color=#4169E1>**3. Modify value in closure.**</font>  \nIf we want to modity value in block, we should add \"__block\" or \"__weak\", that will make the block capture reference of variable from outside.\nLet me see how closure handle this case.\n```Swift\nvar a = 100\nlet closure = {\n    a += 1\n    print(\"closure = \\(a)\")\n}\nprint(\"out 1 = \\(a)\")\nclosure()\nprint(\"out 2 = \\(a)\")\n```\nResult:\n```Swift\nout 1 = 100\nclosure = 101\nout 2 = 101\n```\nWe can modify the value of the variable in closure directly because closure capture the reference of the variable by default.\n\n### <font size=3 color=#4169E1>**4. Capturing list in closure.**</font>   \nIf we capture variable in capturing list in closure, what will happen? Let me see that.\n```Swift\nvar a = 100\nlet closure = {\n    [a] in\n    print(\"closure = \\(a)\")\n}\na += 1\nprint(\"out 1 = \\(a)\")\nclosure()\nprint(\"out 2 = \\(a)\")\n```\nResult:\n```Swift\nout 1 = 101\nclosure = 100\nout 2 = 101\n```\nAt this time if we want to modify 'a' in closure:\n```Swift\nvar a = 100\nlet closure = {\n    [a] in\n    a += 1\n    print(\"closure = \\(a)\")\n}\na += 1\nprint(\"out 1 = \\(a)\")\nclosure()\nprint(\"out 2 = \\(a)\")\n```\nIt will get an error like that:  \n\n{% img /assets/Swift/Tips/image00.jpg %}\n\nAnd this is a tip for us that variable 'a' is an immutable capture now.\n","source":"_posts/Swift/02. Closures/01. Capturing Values.md","raw":"---\ntitle: 01. Capturing Values\ndate: 2023-02-29 21:40:59\ncategories: \n- [Swift, 02. Closures]\ntags:\n- Capturing\n---\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nThe capture of values in Swift's closure and OC's Block is different.\n\n### <font size=3 color=#4169E1>**1. The capture of values in OC.**</font> \n```Swift \nNSInteger a = 100;\nvoid(^block)(void) = ^{\n    NSLog(@\"block = %ld:\", a);\n};\n \na += 1;\nNSLog(@\"out1 = %ld:\", a);\nblock();\nNSLog(@\"out2 = %ld:\", a);\n//result:\n2021-08-17 11:27:13.846743+0800 MDProject[30746:23593763] out1 = 101\n2021-08-17 11:27:13.846885+0800 MDProject[30746:23593763] block = 100\n2021-08-17 11:27:13.847002+0800 MDProject[30746:23593763] out2 = 101\n```\n### <font size=3 color=#4169E1>**2. The capture of values in Swift.**</font> \n```Swift\nvar a = 100\nlet closure = {\n    print(\"closure = \\(a)\")\n}\na += 1\nprint(\"out 1 = \\(a)\")\nclosure()\nprint(\"out 2 = \\(a)\")\n```\nResult:\n```Swift\nout1 = 101\nclosure = 101\nout 2 = 101\n```\nSwift closures capture \"references\", not the objects they reference. We can print the address of variable a to prove this.\n```Swift\nvar a = 100\nwithUnsafePointer(to: &a) {ptr in print(ptr)}\nlet closure = {\n    print(\"closure = \\(a)\")\n    withUnsafePointer(to: &a) {ptr in print(ptr)}\n}\nclosure()\na += 1\nprint(\"out 1 = \\(a)\")\nwithUnsafePointer(to: &a) {ptr in print(ptr)}\n\nclosure()\nprint(\"out 2 = \\(a)\")\nwithUnsafePointer(to: &a) {ptr in print(ptr)}\n```\nResult as follows:\n```Swift\n0x0000600000209490\nclosure = 100\n0x0000600000209490\nout 1 = 101\n0x0000600000209490\nclosure = 101\n0x0000600000209490\nout 2 = 101\n0x0000600000209490\n```\nThey all have the same address, It proves that closure capture the reference of the variable, not like block in OC.\n\n### <font size=3 color=#4169E1>**3. Modify value in closure.**</font>  \nIf we want to modity value in block, we should add \"__block\" or \"__weak\", that will make the block capture reference of variable from outside.\nLet me see how closure handle this case.\n```Swift\nvar a = 100\nlet closure = {\n    a += 1\n    print(\"closure = \\(a)\")\n}\nprint(\"out 1 = \\(a)\")\nclosure()\nprint(\"out 2 = \\(a)\")\n```\nResult:\n```Swift\nout 1 = 100\nclosure = 101\nout 2 = 101\n```\nWe can modify the value of the variable in closure directly because closure capture the reference of the variable by default.\n\n### <font size=3 color=#4169E1>**4. Capturing list in closure.**</font>   \nIf we capture variable in capturing list in closure, what will happen? Let me see that.\n```Swift\nvar a = 100\nlet closure = {\n    [a] in\n    print(\"closure = \\(a)\")\n}\na += 1\nprint(\"out 1 = \\(a)\")\nclosure()\nprint(\"out 2 = \\(a)\")\n```\nResult:\n```Swift\nout 1 = 101\nclosure = 100\nout 2 = 101\n```\nAt this time if we want to modify 'a' in closure:\n```Swift\nvar a = 100\nlet closure = {\n    [a] in\n    a += 1\n    print(\"closure = \\(a)\")\n}\na += 1\nprint(\"out 1 = \\(a)\")\nclosure()\nprint(\"out 2 = \\(a)\")\n```\nIt will get an error like that:  \n\n{% img /assets/Swift/Tips/image00.jpg %}\n\nAnd this is a tip for us that variable 'a' is an immutable capture now.\n","slug":"Swift/02. Closures/01. Capturing Values","published":1,"updated":"2023-08-15T14:36:19.831Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllcf81g7000pps0m9lzfgl10","content":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>The capture of values in Swift’s closure and OC’s Block is different.</p>\n<h3 id=\"1-The-capture-of-values-in-OC\"><a href=\"#1-The-capture-of-values-in-OC\" class=\"headerlink\" title=\"1. The capture of values in OC.\"></a><font size=3 color=#4169E1><strong>1. The capture of values in OC.</strong></font></h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">NSInteger</span> a <span class=\"operator\">=</span> <span class=\"number\">100</span>;</span><br><span class=\"line\">void(<span class=\"operator\">^</span>block)(void) <span class=\"operator\">=</span> <span class=\"operator\">^</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">NSLog</span>(@<span class=\"string\">&quot;block = %ld:&quot;</span>, a);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">a <span class=\"operator\">+=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"type\">NSLog</span>(@<span class=\"string\">&quot;out1 = %ld:&quot;</span>, a);</span><br><span class=\"line\">block();</span><br><span class=\"line\"><span class=\"type\">NSLog</span>(@<span class=\"string\">&quot;out2 = %ld:&quot;</span>, a);</span><br><span class=\"line\"><span class=\"comment\">//result:</span></span><br><span class=\"line\"><span class=\"number\">2021</span><span class=\"operator\">-</span><span class=\"number\">08</span><span class=\"operator\">-</span><span class=\"number\">17</span> <span class=\"number\">11</span>:<span class=\"number\">27</span>:<span class=\"number\">13.846743</span><span class=\"operator\">+</span><span class=\"number\">0800</span> <span class=\"type\">MDProject</span>[<span class=\"number\">30746</span>:<span class=\"number\">23593763</span>] out1 <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br><span class=\"line\"><span class=\"number\">2021</span><span class=\"operator\">-</span><span class=\"number\">08</span><span class=\"operator\">-</span><span class=\"number\">17</span> <span class=\"number\">11</span>:<span class=\"number\">27</span>:<span class=\"number\">13.846885</span><span class=\"operator\">+</span><span class=\"number\">0800</span> <span class=\"type\">MDProject</span>[<span class=\"number\">30746</span>:<span class=\"number\">23593763</span>] block <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"number\">2021</span><span class=\"operator\">-</span><span class=\"number\">08</span><span class=\"operator\">-</span><span class=\"number\">17</span> <span class=\"number\">11</span>:<span class=\"number\">27</span>:<span class=\"number\">13.847002</span><span class=\"operator\">+</span><span class=\"number\">0800</span> <span class=\"type\">MDProject</span>[<span class=\"number\">30746</span>:<span class=\"number\">23593763</span>] out2 <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-The-capture-of-values-in-Swift\"><a href=\"#2-The-capture-of-values-in-Swift\" class=\"headerlink\" title=\"2. The capture of values in Swift.\"></a><font size=3 color=#4169E1><strong>2. The capture of values in Swift.</strong></font></h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> closure <span class=\"operator\">=</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;closure = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;out 1 = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br><span class=\"line\">closure()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;out 2 = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>Result:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">out1 <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br><span class=\"line\">closure <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br><span class=\"line\">out <span class=\"number\">2</span> <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br></pre></td></tr></table></figure>\n<p>Swift closures capture “references”, not the objects they reference. We can print the address of variable a to prove this.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"built_in\">withUnsafePointer</span>(to: <span class=\"operator\">&amp;</span>a) &#123;ptr <span class=\"keyword\">in</span> <span class=\"built_in\">print</span>(ptr)&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> closure <span class=\"operator\">=</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;closure = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">withUnsafePointer</span>(to: <span class=\"operator\">&amp;</span>a) &#123;ptr <span class=\"keyword\">in</span> <span class=\"built_in\">print</span>(ptr)&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">closure()</span><br><span class=\"line\">a <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;out 1 = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">withUnsafePointer</span>(to: <span class=\"operator\">&amp;</span>a) &#123;ptr <span class=\"keyword\">in</span> <span class=\"built_in\">print</span>(ptr)&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">closure()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;out 2 = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">withUnsafePointer</span>(to: <span class=\"operator\">&amp;</span>a) &#123;ptr <span class=\"keyword\">in</span> <span class=\"built_in\">print</span>(ptr)&#125;</span><br></pre></td></tr></table></figure>\n<p>Result as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0x0000600000209490</span></span><br><span class=\"line\">closure <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"number\">0x0000600000209490</span></span><br><span class=\"line\">out <span class=\"number\">1</span> <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br><span class=\"line\"><span class=\"number\">0x0000600000209490</span></span><br><span class=\"line\">closure <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br><span class=\"line\"><span class=\"number\">0x0000600000209490</span></span><br><span class=\"line\">out <span class=\"number\">2</span> <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br><span class=\"line\"><span class=\"number\">0x0000600000209490</span></span><br></pre></td></tr></table></figure>\n<p>They all have the same address, It proves that closure capture the reference of the variable, not like block in OC.</p>\n<h3 id=\"3-Modify-value-in-closure\"><a href=\"#3-Modify-value-in-closure\" class=\"headerlink\" title=\"3. Modify value in closure.\"></a><font size=3 color=#4169E1><strong>3. Modify value in closure.</strong></font></h3><p>If we want to modity value in block, we should add “__block” or “__weak”, that will make the block capture reference of variable from outside.<br>Let me see how closure handle this case.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> closure <span class=\"operator\">=</span> &#123;</span><br><span class=\"line\">    a <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;closure = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;out 1 = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br><span class=\"line\">closure()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;out 2 = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>Result:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">out <span class=\"number\">1</span> <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\">closure <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br><span class=\"line\">out <span class=\"number\">2</span> <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br></pre></td></tr></table></figure>\n<p>We can modify the value of the variable in closure directly because closure capture the reference of the variable by default.</p>\n<h3 id=\"4-Capturing-list-in-closure\"><a href=\"#4-Capturing-list-in-closure\" class=\"headerlink\" title=\"4. Capturing list in closure.\"></a><font size=3 color=#4169E1><strong>4. Capturing list in closure.</strong></font></h3><p>If we capture variable in capturing list in closure, what will happen? Let me see that.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> closure <span class=\"operator\">=</span> &#123;</span><br><span class=\"line\">    [a] <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;closure = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;out 1 = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br><span class=\"line\">closure()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;out 2 = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>Result:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">out <span class=\"number\">1</span> <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br><span class=\"line\">closure <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\">out <span class=\"number\">2</span> <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br></pre></td></tr></table></figure>\n<p>At this time if we want to modify ‘a’ in closure:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> closure <span class=\"operator\">=</span> &#123;</span><br><span class=\"line\">    [a] <span class=\"keyword\">in</span></span><br><span class=\"line\">    a <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;closure = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;out 1 = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br><span class=\"line\">closure()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;out 2 = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>It will get an error like that:  </p>\n<img src=\"/assets/Swift/Tips/image00.jpg\" class=\"\">\n\n<p>And this is a tip for us that variable ‘a’ is an immutable capture now.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>The capture of values in Swift’s closure and OC’s Block is different.</p>\n<h3 id=\"1-The-capture-of-values-in-OC\"><a href=\"#1-The-capture-of-values-in-OC\" class=\"headerlink\" title=\"1. The capture of values in OC.\"></a><font size=3 color=#4169E1><strong>1. The capture of values in OC.</strong></font></h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">NSInteger</span> a <span class=\"operator\">=</span> <span class=\"number\">100</span>;</span><br><span class=\"line\">void(<span class=\"operator\">^</span>block)(void) <span class=\"operator\">=</span> <span class=\"operator\">^</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">NSLog</span>(@<span class=\"string\">&quot;block = %ld:&quot;</span>, a);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">a <span class=\"operator\">+=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"type\">NSLog</span>(@<span class=\"string\">&quot;out1 = %ld:&quot;</span>, a);</span><br><span class=\"line\">block();</span><br><span class=\"line\"><span class=\"type\">NSLog</span>(@<span class=\"string\">&quot;out2 = %ld:&quot;</span>, a);</span><br><span class=\"line\"><span class=\"comment\">//result:</span></span><br><span class=\"line\"><span class=\"number\">2021</span><span class=\"operator\">-</span><span class=\"number\">08</span><span class=\"operator\">-</span><span class=\"number\">17</span> <span class=\"number\">11</span>:<span class=\"number\">27</span>:<span class=\"number\">13.846743</span><span class=\"operator\">+</span><span class=\"number\">0800</span> <span class=\"type\">MDProject</span>[<span class=\"number\">30746</span>:<span class=\"number\">23593763</span>] out1 <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br><span class=\"line\"><span class=\"number\">2021</span><span class=\"operator\">-</span><span class=\"number\">08</span><span class=\"operator\">-</span><span class=\"number\">17</span> <span class=\"number\">11</span>:<span class=\"number\">27</span>:<span class=\"number\">13.846885</span><span class=\"operator\">+</span><span class=\"number\">0800</span> <span class=\"type\">MDProject</span>[<span class=\"number\">30746</span>:<span class=\"number\">23593763</span>] block <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"number\">2021</span><span class=\"operator\">-</span><span class=\"number\">08</span><span class=\"operator\">-</span><span class=\"number\">17</span> <span class=\"number\">11</span>:<span class=\"number\">27</span>:<span class=\"number\">13.847002</span><span class=\"operator\">+</span><span class=\"number\">0800</span> <span class=\"type\">MDProject</span>[<span class=\"number\">30746</span>:<span class=\"number\">23593763</span>] out2 <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-The-capture-of-values-in-Swift\"><a href=\"#2-The-capture-of-values-in-Swift\" class=\"headerlink\" title=\"2. The capture of values in Swift.\"></a><font size=3 color=#4169E1><strong>2. The capture of values in Swift.</strong></font></h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> closure <span class=\"operator\">=</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;closure = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;out 1 = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br><span class=\"line\">closure()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;out 2 = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>Result:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">out1 <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br><span class=\"line\">closure <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br><span class=\"line\">out <span class=\"number\">2</span> <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br></pre></td></tr></table></figure>\n<p>Swift closures capture “references”, not the objects they reference. We can print the address of variable a to prove this.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"built_in\">withUnsafePointer</span>(to: <span class=\"operator\">&amp;</span>a) &#123;ptr <span class=\"keyword\">in</span> <span class=\"built_in\">print</span>(ptr)&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> closure <span class=\"operator\">=</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;closure = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">withUnsafePointer</span>(to: <span class=\"operator\">&amp;</span>a) &#123;ptr <span class=\"keyword\">in</span> <span class=\"built_in\">print</span>(ptr)&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">closure()</span><br><span class=\"line\">a <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;out 1 = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">withUnsafePointer</span>(to: <span class=\"operator\">&amp;</span>a) &#123;ptr <span class=\"keyword\">in</span> <span class=\"built_in\">print</span>(ptr)&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">closure()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;out 2 = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">withUnsafePointer</span>(to: <span class=\"operator\">&amp;</span>a) &#123;ptr <span class=\"keyword\">in</span> <span class=\"built_in\">print</span>(ptr)&#125;</span><br></pre></td></tr></table></figure>\n<p>Result as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0x0000600000209490</span></span><br><span class=\"line\">closure <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"number\">0x0000600000209490</span></span><br><span class=\"line\">out <span class=\"number\">1</span> <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br><span class=\"line\"><span class=\"number\">0x0000600000209490</span></span><br><span class=\"line\">closure <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br><span class=\"line\"><span class=\"number\">0x0000600000209490</span></span><br><span class=\"line\">out <span class=\"number\">2</span> <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br><span class=\"line\"><span class=\"number\">0x0000600000209490</span></span><br></pre></td></tr></table></figure>\n<p>They all have the same address, It proves that closure capture the reference of the variable, not like block in OC.</p>\n<h3 id=\"3-Modify-value-in-closure\"><a href=\"#3-Modify-value-in-closure\" class=\"headerlink\" title=\"3. Modify value in closure.\"></a><font size=3 color=#4169E1><strong>3. Modify value in closure.</strong></font></h3><p>If we want to modity value in block, we should add “__block” or “__weak”, that will make the block capture reference of variable from outside.<br>Let me see how closure handle this case.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> closure <span class=\"operator\">=</span> &#123;</span><br><span class=\"line\">    a <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;closure = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;out 1 = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br><span class=\"line\">closure()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;out 2 = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>Result:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">out <span class=\"number\">1</span> <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\">closure <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br><span class=\"line\">out <span class=\"number\">2</span> <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br></pre></td></tr></table></figure>\n<p>We can modify the value of the variable in closure directly because closure capture the reference of the variable by default.</p>\n<h3 id=\"4-Capturing-list-in-closure\"><a href=\"#4-Capturing-list-in-closure\" class=\"headerlink\" title=\"4. Capturing list in closure.\"></a><font size=3 color=#4169E1><strong>4. Capturing list in closure.</strong></font></h3><p>If we capture variable in capturing list in closure, what will happen? Let me see that.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> closure <span class=\"operator\">=</span> &#123;</span><br><span class=\"line\">    [a] <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;closure = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;out 1 = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br><span class=\"line\">closure()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;out 2 = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>Result:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">out <span class=\"number\">1</span> <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br><span class=\"line\">closure <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\">out <span class=\"number\">2</span> <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br></pre></td></tr></table></figure>\n<p>At this time if we want to modify ‘a’ in closure:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> closure <span class=\"operator\">=</span> &#123;</span><br><span class=\"line\">    [a] <span class=\"keyword\">in</span></span><br><span class=\"line\">    a <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;closure = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;out 1 = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br><span class=\"line\">closure()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;out 2 = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>It will get an error like that:  </p>\n<img src=\"/assets/Swift/Tips/image00.jpg\" class=\"\">\n\n<p>And this is a tip for us that variable ‘a’ is an immutable capture now.</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cllcf81fz000aps0m3mpn7l4w","category_id":"cllcf81fz0009ps0m4xghfnu4","_id":"cllcf81g9000vps0meerq2018"},{"post_id":"cllcf81fz000aps0m3mpn7l4w","category_id":"cllcf81g6000lps0m687w5nts","_id":"cllcf81g9000xps0mbvuddwqk"},{"post_id":"cllcf81fv0003ps0m2j49ge52","category_id":"cllcf81fz0009ps0m4xghfnu4","_id":"cllcf81ga0010ps0m7hac5qj8"},{"post_id":"cllcf81fv0003ps0m2j49ge52","category_id":"cllcf81g6000lps0m687w5nts","_id":"cllcf81ga0012ps0m1opvek7u"},{"post_id":"cllcf81g0000bps0mh0mp7s5o","category_id":"cllcf81fz0009ps0m4xghfnu4","_id":"cllcf81ga0014ps0mbo7g0ine"},{"post_id":"cllcf81g0000bps0mh0mp7s5o","category_id":"cllcf81g6000lps0m687w5nts","_id":"cllcf81gb0016ps0mgn707yhq"},{"post_id":"cllcf81g2000fps0m4fcrdx23","category_id":"cllcf81fz0009ps0m4xghfnu4","_id":"cllcf81gb0019ps0mhfs39g72"},{"post_id":"cllcf81g2000fps0m4fcrdx23","category_id":"cllcf81g6000lps0m687w5nts","_id":"cllcf81gb001cps0mdkvn5crz"},{"post_id":"cllcf81fw0005ps0m01z75645","category_id":"cllcf81fz0009ps0m4xghfnu4","_id":"cllcf81gc001fps0mbndm5gtv"},{"post_id":"cllcf81fw0005ps0m01z75645","category_id":"cllcf81g6000lps0m687w5nts","_id":"cllcf81gc001hps0m038kchr7"},{"post_id":"cllcf81g3000gps0me2v7g85s","category_id":"cllcf81fz0009ps0m4xghfnu4","_id":"cllcf81gd001jps0m1kspabai"},{"post_id":"cllcf81g3000gps0me2v7g85s","category_id":"cllcf81g6000lps0m687w5nts","_id":"cllcf81gd001kps0mepdrh78d"},{"post_id":"cllcf81g5000jps0m38gg4wem","category_id":"cllcf81fz0009ps0m4xghfnu4","_id":"cllcf81gd001ops0mf0y57iv2"},{"post_id":"cllcf81g5000jps0m38gg4wem","category_id":"cllcf81g6000lps0m687w5nts","_id":"cllcf81gd001qps0m2231gu3y"},{"post_id":"cllcf81fy0008ps0m3yci2u7z","category_id":"cllcf81fz0009ps0m4xghfnu4","_id":"cllcf81ge001tps0mgor0du8b"},{"post_id":"cllcf81fy0008ps0m3yci2u7z","category_id":"cllcf81g6000lps0m687w5nts","_id":"cllcf81ge001vps0m5y2hfv2b"},{"post_id":"cllcf81g5000kps0m97li0s6k","category_id":"cllcf81fz0009ps0m4xghfnu4","_id":"cllcf81gf001yps0m0lzn4q98"},{"post_id":"cllcf81g5000kps0m97li0s6k","category_id":"cllcf81g6000lps0m687w5nts","_id":"cllcf81gf0020ps0m6d6ogl07"},{"post_id":"cllcf81g6000nps0m0olr016q","category_id":"cllcf81fz0009ps0m4xghfnu4","_id":"cllcf81gf0022ps0mgwkccw9r"},{"post_id":"cllcf81g6000nps0m0olr016q","category_id":"cllcf81gd001rps0mgtapehjr","_id":"cllcf81gf0023ps0mf90v3hsi"},{"post_id":"cllcf81g7000pps0m9lzfgl10","category_id":"cllcf81fz0009ps0m4xghfnu4","_id":"cllcf81gf0025ps0m8vw2gwhh"},{"post_id":"cllcf81g7000pps0m9lzfgl10","category_id":"cllcf81gd001rps0mgtapehjr","_id":"cllcf81gg0027ps0mdk0wcd3g"}],"PostTag":[{"post_id":"cllcf81fv0003ps0m2j49ge52","tag_id":"cllcf81fx0006ps0mazmecaix","_id":"cllcf81g2000eps0mhatv8684"},{"post_id":"cllcf81fw0005ps0m01z75645","tag_id":"cllcf81g0000cps0m65534ek6","_id":"cllcf81g7000ops0mdaai2nfp"},{"post_id":"cllcf81fw0005ps0m01z75645","tag_id":"cllcf81g4000ips0mbvlnfre8","_id":"cllcf81g8000qps0mhesra8kt"},{"post_id":"cllcf81fy0008ps0m3yci2u7z","tag_id":"cllcf81g6000mps0m7z185uxg","_id":"cllcf81g9000wps0m9psxcv6t"},{"post_id":"cllcf81fy0008ps0m3yci2u7z","tag_id":"cllcf81g8000sps0maseydkce","_id":"cllcf81ga000zps0mcnoj66ia"},{"post_id":"cllcf81fz000aps0m3mpn7l4w","tag_id":"cllcf81g9000ups0m9uc766oa","_id":"cllcf81gb0017ps0m0t3u2lpr"},{"post_id":"cllcf81fz000aps0m3mpn7l4w","tag_id":"cllcf81ga0011ps0md7ph19wt","_id":"cllcf81gb001aps0m0x6f3sb2"},{"post_id":"cllcf81g0000bps0mh0mp7s5o","tag_id":"cllcf81ga0015ps0m7g2aejbi","_id":"cllcf81gc001eps0mf0y021z1"},{"post_id":"cllcf81g2000fps0m4fcrdx23","tag_id":"cllcf81gb001bps0m4b5p3sid","_id":"cllcf81gd001nps0m0sjb0a6g"},{"post_id":"cllcf81g2000fps0m4fcrdx23","tag_id":"cllcf81gc001gps0mg802eh45","_id":"cllcf81gd001pps0mcy6whll2"},{"post_id":"cllcf81g3000gps0me2v7g85s","tag_id":"cllcf81gd001lps0m9uyx6217","_id":"cllcf81ge001ups0mc9jp6eav"},{"post_id":"cllcf81g5000jps0m38gg4wem","tag_id":"cllcf81ge001sps0manrmfuxm","_id":"cllcf81gf001zps0m1tz82jfi"},{"post_id":"cllcf81g5000kps0m97li0s6k","tag_id":"cllcf81ge001xps0m720cfahg","_id":"cllcf81gg0026ps0mgtrdha2z"},{"post_id":"cllcf81g5000kps0m97li0s6k","tag_id":"cllcf81gf0021ps0mchwc3inf","_id":"cllcf81gg0028ps0m0fwhbtre"},{"post_id":"cllcf81g6000nps0m0olr016q","tag_id":"cllcf81gf0024ps0m7yit3r3v","_id":"cllcf81gg002aps0m2t683pcw"},{"post_id":"cllcf81g7000pps0m9lzfgl10","tag_id":"cllcf81gg0029ps0m44cl77ac","_id":"cllcf81gg002bps0m7xm51j6f"}],"Tag":[{"name":"random","_id":"cllcf81fx0006ps0mazmecaix"},{"name":"errors","_id":"cllcf81g0000cps0m65534ek6"},{"name":"exceptions","_id":"cllcf81g4000ips0mbvlnfre8"},{"name":"Lazy","_id":"cllcf81g6000mps0m7z185uxg"},{"name":"Anonymous","_id":"cllcf81g8000sps0maseydkce"},{"name":"NSString","_id":"cllcf81g9000ups0m9uc766oa"},{"name":"String","_id":"cllcf81ga0011ps0md7ph19wt"},{"name":"Read-only","_id":"cllcf81ga0015ps0m7g2aejbi"},{"name":"Computed","_id":"cllcf81gb001bps0m4b5p3sid"},{"name":"Stored","_id":"cllcf81gc001gps0mg802eh45"},{"name":"singleton","_id":"cllcf81gd001lps0m9uyx6217"},{"name":"memory address","_id":"cllcf81ge001sps0manrmfuxm"},{"name":"Force unwrapping","_id":"cllcf81ge001xps0m720cfahg"},{"name":"Implicitly Unwrapped","_id":"cllcf81gf0021ps0mchwc3inf"},{"name":"Closures","_id":"cllcf81gf0024ps0m7yit3r3v"},{"name":"Capturing","_id":"cllcf81gg0029ps0m44cl77ac"}]}}