{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/cactus/source/css/rtl.styl","path":"css/rtl.styl","modified":1,"renderable":1},{"_id":"themes/cactus/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/cactus/source/images/apple-touch-icon.png","path":"images/apple-touch-icon.png","modified":1,"renderable":1},{"_id":"themes/cactus/source/images/favicon-192x192.png","path":"images/favicon-192x192.png","modified":1,"renderable":1},{"_id":"themes/cactus/source/images/favicon.ico","path":"images/favicon.ico","modified":1,"renderable":1},{"_id":"themes/cactus/source/images/logo.png","path":"images/logo.png","modified":1,"renderable":1},{"_id":"themes/cactus/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/cactus/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/clipboard/clipboard.min.js","path":"lib/clipboard/clipboard.min.js","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/jquery/jquery.min.js","path":"lib/jquery/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Bold.ttf","path":"lib/meslo-LG/MesloLGL-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGL-BoldItalic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Italic.ttf","path":"lib/meslo-LG/MesloLGL-Italic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Regular.ttf","path":"lib/meslo-LG/MesloLGL-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Bold.ttf","path":"lib/meslo-LG/MesloLGM-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGM-BoldItalic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Italic.ttf","path":"lib/meslo-LG/MesloLGM-Italic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Regular.ttf","path":"lib/meslo-LG/MesloLGM-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Bold.ttf","path":"lib/meslo-LG/MesloLGS-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGS-BoldItalic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Italic.ttf","path":"lib/meslo-LG/MesloLGS-Italic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Regular.ttf","path":"lib/meslo-LG/MesloLGS-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.eot","path":"lib/vazir-font/Vazir-Black.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.ttf","path":"lib/vazir-font/Vazir-Black.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff","path":"lib/vazir-font/Vazir-Black.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff2","path":"lib/vazir-font/Vazir-Black.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.eot","path":"lib/vazir-font/Vazir-Bold.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.ttf","path":"lib/vazir-font/Vazir-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff","path":"lib/vazir-font/Vazir-Bold.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff2","path":"lib/vazir-font/Vazir-Bold.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.eot","path":"lib/vazir-font/Vazir-Light.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.ttf","path":"lib/vazir-font/Vazir-Light.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff","path":"lib/vazir-font/Vazir-Light.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff2","path":"lib/vazir-font/Vazir-Light.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.eot","path":"lib/vazir-font/Vazir-Medium.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.ttf","path":"lib/vazir-font/Vazir-Medium.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff","path":"lib/vazir-font/Vazir-Medium.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff2","path":"lib/vazir-font/Vazir-Medium.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.eot","path":"lib/vazir-font/Vazir-Regular.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.ttf","path":"lib/vazir-font/Vazir-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.woff","path":"lib/vazir-font/Vazir-Regular.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.woff2","path":"lib/vazir-font/Vazir-Regular.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.eot","path":"lib/vazir-font/Vazir-Thin.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.ttf","path":"lib/vazir-font/Vazir-Thin.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff","path":"lib/vazir-font/Vazir-Thin.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff2","path":"lib/vazir-font/Vazir-Thin.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.eot","path":"lib/vazir-font/Vazir-Variable.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.ttf","path":"lib/vazir-font/Vazir-Variable.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.woff","path":"lib/vazir-font/Vazir-Variable.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.woff2","path":"lib/vazir-font/Vazir-Variable.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/font-face.css","path":"lib/vazir-font/font-face.css","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","path":"lib/font-awesome/webfonts/fa-brands-400.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","path":"lib/font-awesome/webfonts/fa-regular-400.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","path":"lib/font-awesome/webfonts/fa-solid-900.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-v4compatibility.ttf","path":"lib/font-awesome/webfonts/fa-v4compatibility.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-v4compatibility.woff2","path":"lib/font-awesome/webfonts/fa-v4compatibility.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","path":"lib/justified-gallery/css/justifiedGallery.min.css","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","path":"lib/justified-gallery/js/jquery.justifiedGallery.min.js","modified":1,"renderable":1},{"_id":"source/assets/cactus.png","path":"assets/cactus.png","modified":1,"renderable":0},{"_id":"source/about/images/qrcode.bmp","path":"about/images/qrcode.bmp","modified":1,"renderable":0},{"_id":"source/assets/Demo/wallpaper-2311325.jpg","path":"assets/Demo/wallpaper-2311325.jpg","modified":1,"renderable":0},{"_id":"source/assets/Demo/wallpaper-2572384.jpg","path":"assets/Demo/wallpaper-2572384.jpg","modified":1,"renderable":0},{"_id":"source/assets/Demo/wallpaper-878514.jpg","path":"assets/Demo/wallpaper-878514.jpg","modified":1,"renderable":0},{"_id":"source/assets/ReactiveProgramming/RxSwift/00.jpg","path":"assets/ReactiveProgramming/RxSwift/00.jpg","modified":1,"renderable":0},{"_id":"source/assets/ReactiveProgramming/RxSwift/01.jpeg","path":"assets/ReactiveProgramming/RxSwift/01.jpeg","modified":1,"renderable":0},{"_id":"source/assets/ReactiveProgramming/RxSwift/02.jpeg","path":"assets/ReactiveProgramming/RxSwift/02.jpeg","modified":1,"renderable":0},{"_id":"source/assets/ReactiveProgramming/RxSwift/03.jpeg","path":"assets/ReactiveProgramming/RxSwift/03.jpeg","modified":1,"renderable":0},{"_id":"source/assets/ReactiveProgramming/RxSwift/04.jpeg","path":"assets/ReactiveProgramming/RxSwift/04.jpeg","modified":1,"renderable":0},{"_id":"source/assets/ReactiveProgramming/RxSwift/05.jpeg","path":"assets/ReactiveProgramming/RxSwift/05.jpeg","modified":1,"renderable":0},{"_id":"source/assets/ReactiveProgramming/RxSwift/06.jpeg","path":"assets/ReactiveProgramming/RxSwift/06.jpeg","modified":1,"renderable":0},{"_id":"source/assets/ReactiveProgramming/RxSwift/07.png","path":"assets/ReactiveProgramming/RxSwift/07.png","modified":1,"renderable":0},{"_id":"source/assets/ReactiveProgramming/RxSwift/08.png","path":"assets/ReactiveProgramming/RxSwift/08.png","modified":1,"renderable":0},{"_id":"source/assets/ReactiveProgramming/RxSwift/09.png","path":"assets/ReactiveProgramming/RxSwift/09.png","modified":1,"renderable":0},{"_id":"source/assets/ReactiveProgramming/RxSwift/10.jpeg","path":"assets/ReactiveProgramming/RxSwift/10.jpeg","modified":1,"renderable":0},{"_id":"source/assets/ReactiveProgramming/RxSwift/11.jpeg","path":"assets/ReactiveProgramming/RxSwift/11.jpeg","modified":1,"renderable":0},{"_id":"source/assets/ReactiveProgramming/RxSwift/12.jpeg","path":"assets/ReactiveProgramming/RxSwift/12.jpeg","modified":1,"renderable":0},{"_id":"source/assets/ReactiveProgramming/RxSwift/13.jpeg","path":"assets/ReactiveProgramming/RxSwift/13.jpeg","modified":1,"renderable":0},{"_id":"source/assets/ReactiveProgramming/RxSwift/14.jpeg","path":"assets/ReactiveProgramming/RxSwift/14.jpeg","modified":1,"renderable":0},{"_id":"source/assets/Swift/Concurrency/catch_warning.png","path":"assets/Swift/Concurrency/catch_warning.png","modified":1,"renderable":0},{"_id":"source/assets/Swift/Tips/image00.jpg","path":"assets/Swift/Tips/image00.jpg","modified":1,"renderable":0},{"_id":"source/assets/SwiftUI/BasicConcepts/000.png","path":"assets/SwiftUI/BasicConcepts/000.png","modified":1,"renderable":0},{"_id":"source/assets/SwiftUI/BasicConcepts/001.png","path":"assets/SwiftUI/BasicConcepts/001.png","modified":1,"renderable":0},{"_id":"source/assets/SwiftUI/BasicConcepts/002.png","path":"assets/SwiftUI/BasicConcepts/002.png","modified":1,"renderable":0},{"_id":"source/assets/SwiftUI/BasicConcepts/003.png","path":"assets/SwiftUI/BasicConcepts/003.png","modified":1,"renderable":0},{"_id":"source/assets/SwiftUI/BasicConcepts/004.png","path":"assets/SwiftUI/BasicConcepts/004.png","modified":1,"renderable":0},{"_id":"source/assets/SwiftUI/BasicConcepts/005.png","path":"assets/SwiftUI/BasicConcepts/005.png","modified":1,"renderable":0},{"_id":"source/assets/SwiftUI/BasicConcepts/006.png","path":"assets/SwiftUI/BasicConcepts/006.png","modified":1,"renderable":0},{"_id":"source/assets/SwiftUI/BasicConcepts/007.png","path":"assets/SwiftUI/BasicConcepts/007.png","modified":1,"renderable":0},{"_id":"source/assets/SwiftUI/BasicConcepts/008.png","path":"assets/SwiftUI/BasicConcepts/008.png","modified":1,"renderable":0},{"_id":"source/assets/SwiftUI/BasicConcepts/009.png","path":"assets/SwiftUI/BasicConcepts/009.png","modified":1,"renderable":0},{"_id":"source/assets/SwiftUI/BasicConcepts/010.png","path":"assets/SwiftUI/BasicConcepts/010.png","modified":1,"renderable":0},{"_id":"source/assets/SwiftUI/BasicConcepts/011.png","path":"assets/SwiftUI/BasicConcepts/011.png","modified":1,"renderable":0},{"_id":"source/assets/SwiftUI/BasicConcepts/012.png","path":"assets/SwiftUI/BasicConcepts/012.png","modified":1,"renderable":0},{"_id":"source/assets/SwiftUI/BasicConcepts/013.png","path":"assets/SwiftUI/BasicConcepts/013.png","modified":1,"renderable":0},{"_id":"source/assets/SwiftUI/BasicConcepts/014.png","path":"assets/SwiftUI/BasicConcepts/014.png","modified":1,"renderable":0},{"_id":"source/assets/iOS/Memory&Performance&Stability/001.png","path":"assets/iOS/Memory&Performance&Stability/001.png","modified":1,"renderable":0},{"_id":"source/assets/iOS/Memory&Performance&Stability/002.jpeg","path":"assets/iOS/Memory&Performance&Stability/002.jpeg","modified":1,"renderable":0},{"_id":"source/assets/iOS/Others/001.png","path":"assets/iOS/Others/001.png","modified":1,"renderable":0},{"_id":"source/assets/iOS/Others/002.png","path":"assets/iOS/Others/002.png","modified":1,"renderable":0},{"_id":"source/assets/iOS/Projects&Issues/000.png","path":"assets/iOS/Projects&Issues/000.png","modified":1,"renderable":0},{"_id":"source/assets/iOS/Projects&Issues/001.png","path":"assets/iOS/Projects&Issues/001.png","modified":1,"renderable":0},{"_id":"source/assets/iOS/Projects&Issues/002.png","path":"assets/iOS/Projects&Issues/002.png","modified":1,"renderable":0},{"_id":"source/assets/iOS/Projects&Issues/003.png","path":"assets/iOS/Projects&Issues/003.png","modified":1,"renderable":0},{"_id":"source/assets/iOS/Projects&Issues/004.png","path":"assets/iOS/Projects&Issues/004.png","modified":1,"renderable":0},{"_id":"source/assets/iOS/Projects&Issues/005.png","path":"assets/iOS/Projects&Issues/005.png","modified":1,"renderable":0},{"_id":"source/assets/iOS/Projects&Issues/006.png","path":"assets/iOS/Projects&Issues/006.png","modified":1,"renderable":0},{"_id":"source/assets/iOS/Projects&Issues/007.png","path":"assets/iOS/Projects&Issues/007.png","modified":1,"renderable":0},{"_id":"source/assets/iOS/Tools&Configurations/00/00_rebase.png","path":"assets/iOS/Tools&Configurations/00/00_rebase.png","modified":1,"renderable":0},{"_id":"source/assets/iOS/Tools&Configurations/00/01_merge.png","path":"assets/iOS/Tools&Configurations/00/01_merge.png","modified":1,"renderable":0},{"_id":"source/assets/iOS/Tools&Configurations/00/03_gitlog.png","path":"assets/iOS/Tools&Configurations/00/03_gitlog.png","modified":1,"renderable":0},{"_id":"source/assets/iOS/Tools&Configurations/00/04_gitshortlog.png","path":"assets/iOS/Tools&Configurations/00/04_gitshortlog.png","modified":1,"renderable":0},{"_id":"source/assets/iOS/Tools&Configurations/00/05_gitshow.png","path":"assets/iOS/Tools&Configurations/00/05_gitshow.png","modified":1,"renderable":0},{"_id":"source/assets/iOS/Tools&Configurations/00/06_gitblame.png","path":"assets/iOS/Tools&Configurations/00/06_gitblame.png","modified":1,"renderable":0},{"_id":"source/assets/iOS/Tools&Configurations/00/07_gitreflog.png","path":"assets/iOS/Tools&Configurations/00/07_gitreflog.png","modified":1,"renderable":0},{"_id":"source/assets/iOS/Tools&Configurations/00/08_gitshortlogsn.png","path":"assets/iOS/Tools&Configurations/00/08_gitshortlogsn.png","modified":1,"renderable":0},{"_id":"source/assets/iOS/Tools&Configurations/01/00.png","path":"assets/iOS/Tools&Configurations/01/00.png","modified":1,"renderable":0},{"_id":"source/assets/iOS/Tools&Configurations/01/01.png","path":"assets/iOS/Tools&Configurations/01/01.png","modified":1,"renderable":0},{"_id":"source/assets/iOS/Tools&Configurations/01/03.png","path":"assets/iOS/Tools&Configurations/01/03.png","modified":1,"renderable":0},{"_id":"source/assets/iOS/Tools&Configurations/01/02.png","path":"assets/iOS/Tools&Configurations/01/02.png","modified":1,"renderable":0},{"_id":"source/assets/iOS/Tools&Configurations/01/04.png","path":"assets/iOS/Tools&Configurations/01/04.png","modified":1,"renderable":0},{"_id":"source/assets/iOS/Tools&Configurations/01/05.png","path":"assets/iOS/Tools&Configurations/01/05.png","modified":1,"renderable":0},{"_id":"source/assets/iOS/Tools&Configurations/01/06.png","path":"assets/iOS/Tools&Configurations/01/06.png","modified":1,"renderable":0},{"_id":"source/assets/iOS/Tools&Configurations/01/07.png","path":"assets/iOS/Tools&Configurations/01/07.png","modified":1,"renderable":0},{"_id":"source/assets/iOS/Tools&Configurations/01/08.png","path":"assets/iOS/Tools&Configurations/01/08.png","modified":1,"renderable":0},{"_id":"source/assets/iOS/Tools&Configurations/01/09.png","path":"assets/iOS/Tools&Configurations/01/09.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"69f1127349ffce5c783a206a4e87ed2a0e009484","modified":1700215094243},{"_id":"source/_drafts/draft1.md","hash":"66654f23017ce4ddc0b6f608c4951a024e8b320e","modified":1692081783313},{"_id":"source/about/.DS_Store","hash":"77adaae9ad1d5df0f44fb5fc7926f913acc3a2bc","modified":1692110732787},{"_id":"source/about/index.md","hash":"ad9e1ca33aac17f384cec1a5099ace083f0fcd26","modified":1693314357019},{"_id":"source/assets/.DS_Store","hash":"8e102b134b3e2cda1716cd901b7d912b7cd07bda","modified":1695365859498},{"_id":"source/_posts/.DS_Store","hash":"f13f2d8e571f2a2dab1a49ce27d951c05db2b774","modified":1696972115129},{"_id":"source/search/index.md","hash":"2b8a605872a558552e6c9e4dcc47d0b38b5773fa","modified":1692043978970},{"_id":"source/categories/index.md","hash":"37a6458fc4e0e44f3ceddb32b326f15081806d88","modified":1692043991587},{"_id":"source/tags/index.md","hash":"771d3c462625b9b564baa21b16b7b2aa44c2c9ec","modified":1692044693854},{"_id":"source/tags/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1692044659745},{"_id":"source/about/images/qrcode.bmp","hash":"a4dcee22ec1e54d4441d602e4a1baaa826ad4705","modified":1692083753427},{"_id":"source/assets/ReactiveProgramming/.DS_Store","hash":"9bfeceb1548cf909edc2cbe1d75c125b8bdf6155","modified":1695330572736},{"_id":"source/assets/Swift/.DS_Store","hash":"594a52b6f50bfdecf8fcd87de8292a623515eae2","modified":1692350915364},{"_id":"source/assets/SwiftUI/.DS_Store","hash":"ea10eb7f415fee5b9526d0aebb8d4a34b04bfd97","modified":1694027976895},{"_id":"source/assets/iOS/.DS_Store","hash":"2e8f2566bafb4c4cc4129b896be172f0720d897f","modified":1700062036342},{"_id":"source/_posts/Interview/.DS_Store","hash":"1334104774d4b6259794444fd504c43d5296fa63","modified":1699368222760},{"_id":"source/_posts/Reactive Programming/.DS_Store","hash":"1d541784c2dc2c66e17e5486a5893c94b541ef21","modified":1697814948210},{"_id":"source/_posts/Others/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1694107651685},{"_id":"source/_posts/Swift/.DS_Store","hash":"f3c726b6e6e481b64cf886b31c59a8cef1092aad","modified":1699374039639},{"_id":"source/_posts/Others/00. Article publishing failure problem summary.md","hash":"b21911d00aabe82cce2ab6123329fbde86bcaa08","modified":1699371595009},{"_id":"source/_posts/SwiftUI/00. SwiftUI vs UIKit.md","hash":"82a14f5aee37bb0b4d85a89d9fc4141045018c84","modified":1694003600869},{"_id":"source/_posts/SwiftUI/01. Basic Concepts of SwiftUI (1).md","hash":"b805ffdf42cef21c51ab678f70f813141c2854e7","modified":1694027463659},{"_id":"source/_posts/SwiftUI/02. Basic Concepts of SwiftUI (2).md","hash":"e40a0856a9fa93d965af02fbc8f5ad207dd89d60","modified":1694027524089},{"_id":"source/_posts/SwiftUI/03. Basic Concepts of SwiftUI (3).md","hash":"fd94e1d88a85e373543d30d5be44393ca9e4a9d0","modified":1695395779894},{"_id":"source/_posts/iOS/.DS_Store","hash":"f305cbf6d0a8450fbe17212ad7c3e13e57ac18ee","modified":1700215094242},{"_id":"source/assets/ReactiveProgramming/RxSwift/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1695395902597},{"_id":"source/assets/ReactiveProgramming/RxSwift/00.jpg","hash":"759a6e4ee5741811d986046fb552405c643a7536","modified":1695330515992},{"_id":"source/assets/ReactiveProgramming/RxSwift/01.jpeg","hash":"b0d74d598ad135ecedf4ffc1d73d1b8c31a9f327","modified":1695391364180},{"_id":"source/assets/ReactiveProgramming/RxSwift/02.jpeg","hash":"07265b50dff9ac34c9cfa7c0adff671a83cba8be","modified":1695391835890},{"_id":"source/assets/ReactiveProgramming/RxSwift/03.jpeg","hash":"1ff3c204ec4fddb265018fdc1b2f83c48c67c61f","modified":1695391878957},{"_id":"source/assets/ReactiveProgramming/RxSwift/05.jpeg","hash":"5e97d323876c5c25abd382869bc9de46d1c04f4f","modified":1695391901974},{"_id":"source/assets/ReactiveProgramming/RxSwift/04.jpeg","hash":"b47f9da3625055c149c8e2f220a7b0a6506cf8ad","modified":1695391892926},{"_id":"source/assets/ReactiveProgramming/RxSwift/06.jpeg","hash":"17238827068a3f940b0742e683f06d5776d8923e","modified":1695391910968},{"_id":"source/assets/ReactiveProgramming/RxSwift/07.png","hash":"e2b39adcbb50e73ea236a49c77ab6090c7f04364","modified":1695392728980},{"_id":"source/assets/ReactiveProgramming/RxSwift/10.jpeg","hash":"68aa487236e3c6aaf8cdc1244bc29597a1b371ef","modified":1695393624029},{"_id":"source/assets/ReactiveProgramming/RxSwift/11.jpeg","hash":"ccd868bd743428eb34a0308d527ec395f5ff9e35","modified":1695393639909},{"_id":"source/assets/ReactiveProgramming/RxSwift/12.jpeg","hash":"53cc43c2aa04cfd74d8d74a2bf996a57d4b51a4e","modified":1695393646722},{"_id":"source/assets/ReactiveProgramming/RxSwift/13.jpeg","hash":"a5beb62dfb3e057ddd11fc74d1b594023540db6e","modified":1695393655089},{"_id":"source/assets/ReactiveProgramming/RxSwift/14.jpeg","hash":"3a57c15ec214067882569534833990c71d617d93","modified":1695393664724},{"_id":"source/assets/Swift/Tips/image00.jpg","hash":"5f98da7ebb53b3a5c9f6f46cef3ad4ac1fab604c","modified":1677588464882},{"_id":"source/assets/Swift/Concurrency/catch_warning.png","hash":"621728b2255253fc1fb86d5a5df086fe70d8ef82","modified":1692349729253},{"_id":"source/assets/SwiftUI/BasicConcepts/001.png","hash":"e18badd408db3b2b7d7c16978f4595b179b9613a","modified":1693744722122},{"_id":"source/assets/SwiftUI/BasicConcepts/005.png","hash":"c00bc7b8d54de3fbcfe5ecc7e50ab68724c0f052","modified":1694018656286},{"_id":"source/assets/SwiftUI/BasicConcepts/004.png","hash":"3da1f1854ee8f21af9bf789f6871d1897b6d93eb","modified":1694018637780},{"_id":"source/assets/SwiftUI/BasicConcepts/006.png","hash":"4445f2230812449f947c0e70bb28d1f8b259b347","modified":1694018663924},{"_id":"source/assets/SwiftUI/BasicConcepts/007.png","hash":"44f7ad3f9a66726e78b21bd585d06f184433a181","modified":1694018672107},{"_id":"source/assets/SwiftUI/BasicConcepts/008.png","hash":"9dbe560315b1ee5b0aa52c1969bfe88d6556b58f","modified":1694018677591},{"_id":"source/assets/SwiftUI/BasicConcepts/009.png","hash":"f71f1e56f8d9f5caf2aeca8a77d14cb0b2e74702","modified":1694018683641},{"_id":"source/assets/SwiftUI/BasicConcepts/010.png","hash":"39d41931af63ee8983ddd31bec55adeea540e6f4","modified":1694018688692},{"_id":"source/assets/SwiftUI/BasicConcepts/011.png","hash":"d66627ea7b0275fbcf3b92bfaa2e88547ae57f2c","modified":1694018696186},{"_id":"source/assets/SwiftUI/BasicConcepts/013.png","hash":"220e3d6de3a8e76764b05cda0a3e90a0e7dc2fb3","modified":1694018708442},{"_id":"source/assets/iOS/Memory&Performance&Stability/.DS_Store","hash":"decc55950a6bfd49531dd6747ebdd3f6b9d0737c","modified":1696601242432},{"_id":"source/assets/iOS/Others/.DS_Store","hash":"decc55950a6bfd49531dd6747ebdd3f6b9d0737c","modified":1692129173073},{"_id":"source/assets/iOS/Others/001.png","hash":"1e9a719557b378e404d030b51c5dc2eab041b1ac","modified":1677644763291},{"_id":"source/assets/iOS/Others/002.png","hash":"72a12b81eae831bedf7a5ead7382133f136b2b66","modified":1677644784493},{"_id":"source/assets/iOS/Tools&Configurations/.DS_Store","hash":"f07de5900d90d4b80af25df374aea477bf97865f","modified":1700216600045},{"_id":"source/_posts/Reactive Programming/00. RxSwift/00. RxSwift (0).md","hash":"a65de7ef157567f3234f1a3c028bb04c3d7762f6","modified":1696972553509},{"_id":"source/_posts/Reactive Programming/00. RxSwift/01. RxSwift (1).md","hash":"7e2d6b99f744126afea78bfa6a16042a144a374f","modified":1696972549957},{"_id":"source/_posts/Interview/01. Swift/.DS_Store","hash":"d2a189b8da9b2c5e68760896a08aed61923d80ec","modified":1699365017159},{"_id":"source/_posts/Reactive Programming/00. RxSwift/02. RxSwift (2).md","hash":"32ad532a1a7bf96fb244563615da26f6dedce189","modified":1696972560692},{"_id":"source/_posts/Reactive Programming/00. RxSwift/03. RxSwift (3).md","hash":"44afb14ac0b280845d7dab6c281112d9be067d9a","modified":1696972566719},{"_id":"source/_posts/Reactive Programming/00. RxSwift/04. RxSwift (4).md","hash":"6fe71738b1304050eae8b89dcde96a4e22a7e6b4","modified":1696972572633},{"_id":"source/_posts/Reactive Programming/01. Combine/00. Combine (0).md","hash":"4ebbec6481949776a95833d2b5ff77c6f8a5a7bc","modified":1696972605616},{"_id":"source/_posts/Reactive Programming/01. Combine/01. Combine (1).md","hash":"179db45f2498df3667edc91c9c3af941922baa7c","modified":1696972621374},{"_id":"source/_posts/Reactive Programming/01. Combine/02. Combine (2).md","hash":"a9a34ceeb19850c34ef983d9b2b6ac440e99c7c9","modified":1697744614638},{"_id":"source/_posts/Reactive Programming/01. Combine/03. Combine (3).md","hash":"577b6121c08a288e409b90d86a4810b7ea6cccef","modified":1697816104750},{"_id":"source/_posts/Swift/00. Fundamental Concepts/.DS_Store","hash":"d2a189b8da9b2c5e68760896a08aed61923d80ec","modified":1699364450805},{"_id":"source/_posts/Swift/00. Fundamental Concepts/00. The concept of Copy-on-Write.md","hash":"2c6b9b3a9926b5c1db1ca897e31f12f095ededef","modified":1699365281105},{"_id":"source/_posts/Swift/00. Fundamental Concepts/01. The difference between try? and try!.md","hash":"0ed00ae80bb216a4db4afe0cc59952459cbab49e","modified":1699366436140},{"_id":"source/_posts/Swift/00. Fundamental Concepts/02. The Access Control Keywords.md","hash":"74f4f9a50721278a0e08602c91189b39843f0efb","modified":1699369065325},{"_id":"source/_posts/Swift/00. Fundamental Concepts/03. The Self and self in Swift.md","hash":"e9dc3f145d7d08828aa0ec214faf3c57b5dd305a","modified":1699369975562},{"_id":"source/_posts/Swift/00. Fundamental Concepts/04. Optional type in Swift.md","hash":"a35f544a5bdb60fbe15a08582ca7764457b9888f","modified":1699371624368},{"_id":"source/_posts/Swift/01. Tips/00. Generation of random numbers.md","hash":"dc534333926699d72ad06fba455131afc4d5417c","modified":1699365295399},{"_id":"source/_posts/Swift/01. Tips/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1699363894436},{"_id":"source/_posts/Swift/01. Tips/01. Handling of errors and exceptions.md","hash":"4b0ad5623b8c911d2c451d995af4299368c0f101","modified":1699365298160},{"_id":"source/_posts/Swift/01. Tips/03. NSString and String.md","hash":"ed16d3ece71256002fe036f0ff4cf31a312e6acd","modified":1699365304967},{"_id":"source/_posts/Swift/01. Tips/02. Lazy loading and Anonymous function.md","hash":"a72671e087ee3266661fb44b87d2ecad6c3632f5","modified":1699365301951},{"_id":"source/_posts/Swift/01. Tips/05. Computed properties and Stored properties.md","hash":"9b728182285ab8be68595229e38d5757cf4101aa","modified":1699365310594},{"_id":"source/_posts/Swift/01. Tips/04. Set Read-only permission of the property.md","hash":"1967cf32d9e43b97d42b8a260b388d5eb20e3e19","modified":1699365307290},{"_id":"source/_posts/Swift/01. Tips/06. How to Define a singleton.md","hash":"614e8274480d3f98ebcaa6bd706bb801fa9c4a74","modified":1699365313098},{"_id":"source/_posts/Swift/01. Tips/07. How to print the memory address of a variable.md","hash":"34d251adf2e7e040cb78419bf9a536e746e3b138","modified":1699365315834},{"_id":"source/_posts/Swift/01. Tips/08. Implicitly Unwrapped Optionals and Force unwrapping.md","hash":"98025e3495a12aac48853263593c0f59125b6dc1","modified":1699365318216},{"_id":"source/_posts/Swift/01. Tips/09. How to use rethrows in Swift.md","hash":"7f115a3d3655f3fb6f8256f896bc43a5a0f1cf4e","modified":1699365321980},{"_id":"source/_posts/Swift/01. Tips/10. How to use defer in Swift.md","hash":"905cd86ac239bca49b7bc7669ae3e182e46cd3dd","modified":1699368304320},{"_id":"source/_posts/Swift/01. Tips/11. How to use final.md","hash":"9a9c71a2c35a079d8dacd8d6eaa32361b1daa58a","modified":1699368339952},{"_id":"source/_posts/Swift/01. Tips/12. How to customize subscripting in Swift.md","hash":"1f234a097785105b90f57d8dbc10fb79711b69d5","modified":1699372384053},{"_id":"source/_posts/Swift/01. Tips/13. How to use OptionSet Protocol.md","hash":"0fd9a00f4c505d3be4c8112f99d86adf6fa90298","modified":1700056255688},{"_id":"source/_posts/Swift/01. Tips/14. How to use inout in Swift.md","hash":"ddb013d7c1b646affdd9b0a544c91c8187531f5e","modified":1699375288254},{"_id":"source/_posts/Swift/01. Tips/15. How to make the Error type compatible with NSError in Swift.md","hash":"d45e6ddc5ed4d66172d2d73921eb6eb50d25bccd","modified":1700056292665},{"_id":"source/_posts/Swift/01. Tips/16. How to use Numeric or BinaryInteger protocol.md","hash":"57290acba5c162874ba0ba1e86d2a0ab6305313e","modified":1699379280856},{"_id":"source/_posts/Swift/03. Structs/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1694282332680},{"_id":"source/_posts/Swift/03. Structs/00. Structures and Classes.md","hash":"a7f28d676dc3b1a46d733e5fd15324da5c3a8947","modified":1699365345391},{"_id":"source/_posts/Swift/03. Structs/01. Cases of Structures.md","hash":"21db1cebbd422203aaae3148e4ce28226e255019","modified":1699365348698},{"_id":"source/_posts/Swift/03. Structs/02. Performance Comparison Between Structure and Class.md","hash":"7ec1add5a308b48e3dbdd832a718262e619128ce","modified":1699365351443},{"_id":"source/_posts/Swift/03. Structs/03. A Case of Initialization Constructor.md","hash":"8f81573b6634f4c78aa5bb8fef4df2318318dc11","modified":1699365354306},{"_id":"source/_posts/Swift/03. Structs/04. Why should we avoid using closures in structs.md","hash":"108624b4b200dbc2dfb761e5d623ce9a314e6451","modified":1699365358501},{"_id":"source/_posts/Swift/02. Closures/.DS_Store","hash":"038721af54d7f958a44270824333e6739d4d38ef","modified":1692110054641},{"_id":"source/_posts/Swift/02. Closures/00. Three Forms of Closures.md","hash":"50c6f09da76859a1b01bf1d3d67ec743335817b7","modified":1699365333617},{"_id":"source/_posts/Swift/02. Closures/01. Capturing Values.md","hash":"c8fe4fe7882715cf731930cbbe5d66a6cb3d3829","modified":1699365335963},{"_id":"source/_posts/Swift/04. Enumerations/.DS_Store","hash":"0d2a793a51fbf332a17f3994279115912c0f785b","modified":1699364309690},{"_id":"source/_posts/Swift/04. Enumerations/00. Summary of Enumerations.md","hash":"537f95d1d2d4f4030a5b65b520929f7ddf2bb50c","modified":1699365380409},{"_id":"source/_posts/Swift/04. Enumerations/01. Nested Enumeration.md","hash":"526484912995f2eea3ad5c8ee53a837ac1216540","modified":1699365382952},{"_id":"source/_posts/Swift/04. Enumerations/02. Include Enumeration.md","hash":"a8907f2fa7e4dd16818f827dde741cd54597c772","modified":1699365386357},{"_id":"source/_posts/Swift/04. Enumerations/03. Recursive Enumeration.md","hash":"a582fd4672adfc38f81262a17da22e12bab7e39f","modified":1699365389748},{"_id":"source/_posts/Swift/05. Protocols/.DS_Store","hash":"1a310ba3385eeeb690f0d5c7e2a00f00edd24008","modified":1699374051067},{"_id":"source/_posts/Swift/05. Protocols/00. Summary of Protocols.md","hash":"ca2e7a4e094ca0c854b792d0d8ef7cd655c73c2f","modified":1699365428979},{"_id":"source/_posts/Swift/05. Protocols/01. Associatedtype.md","hash":"0d925cee6da876bbb8c193dab3c1fff9f4565988","modified":1699365454377},{"_id":"source/_posts/Swift/06. Collections/00. Common higher-order functions.md","hash":"df15b3a529927516a52e76271e75bd9851f80cda","modified":1699378305905},{"_id":"source/_posts/Swift/06. Collections/01. Zip Function.md","hash":"c99aa89f3996bfb39c49324b194d9031133807bc","modified":1699365446154},{"_id":"source/_posts/Swift/07. Concurrency/.DS_Store","hash":"0d602378ca206f861e75a69376b3d0014c0b9ef2","modified":1696616903827},{"_id":"source/_posts/Swift/07. Concurrency/00. How to use do, catch, try, throws in Swift.md","hash":"0ba819cf71cc60a10404b3ac7cd6712b15e6240f","modified":1700056310369},{"_id":"source/_posts/Swift/07. Concurrency/01. Async and Await.md","hash":"c26e6095a53c08a46fea3e79cf315c102004b38c","modified":1692815627071},{"_id":"source/_posts/Swift/07. Concurrency/02. The use of Continuation.md","hash":"102f45bd06c7c77f7d6f03fc8b25c5677712e79c","modified":1695236040322},{"_id":"source/_posts/Swift/07. Concurrency/03. Task.md","hash":"8f1b8fbc8bd1779fcd2aca3d258592120ce3379a","modified":1695669441296},{"_id":"source/_posts/Swift/07. Concurrency/04. Actor.md","hash":"adb996359cd7b008cd60315037f263c664954e8b","modified":1695669233500},{"_id":"source/_posts/Swift/07. Concurrency/05. Sendable.md","hash":"bc93a59b53f1637653ee74c2097b7d55b42bea87","modified":1695757298527},{"_id":"source/_posts/Swift/07. Concurrency/06. Structured concurrency.md","hash":"4b6761b16ff739c737654d71b1718e046fc0ad79","modified":1695987686794},{"_id":"source/_posts/Swift/08. Hybrid Programming/00. Call the Macro definition of Objective-C in Swift.md","hash":"d57e6f9be7f8faae30bcd93208a60f959eed028d","modified":1699365465457},{"_id":"source/_posts/iOS/00. Tips/.DS_Store","hash":"3f1a044829408a46f1b7ca31be07137430893a7d","modified":1699968325942},{"_id":"source/_posts/iOS/00. Tips/00. Difference Of nil in OC and nil in Swift.md","hash":"ac298ab6d3a721726de06c684f547d19cffc2572","modified":1693682961341},{"_id":"source/_posts/iOS/00. Tips/01. The ways to extend a class in Objective-C.md","hash":"be9c3bcf9960ede6f6cb785acc0b3ff595cc951e","modified":1699888123180},{"_id":"source/_posts/iOS/01. Memory & Performance & Stability/.DS_Store","hash":"938dc2d8ac5b96f9f780d4dfdd09ac686839c2c3","modified":1695328511877},{"_id":"source/_posts/iOS/01. Memory & Performance & Stability/00. Summary of Memory Leak.md","hash":"cc732d12a4135e6c8df4f69ad143c35f25ada1ae","modified":1692120822218},{"_id":"source/_posts/iOS/01. Memory & Performance & Stability/01. Common Crash Scenarios.md","hash":"d784d8c3e867ff85ff385949b3e6b63deb0d9e15","modified":1692120932834},{"_id":"source/_posts/iOS/01. Memory & Performance & Stability/02. Summary of Local Data Persistence Solutions.md","hash":"be4fe55506024295bf631c18b7cb38c6542cb1c8","modified":1699996989424},{"_id":"source/_posts/iOS/02. Architecture & Design/.DS_Store","hash":"373f03b75a4c84caa057033232b690fc958786a7","modified":1695328511881},{"_id":"source/_posts/iOS/03. Graphics & images/.DS_Store","hash":"526dc4b4c90cb373704980b81aa599e2e0e96c74","modified":1695328494311},{"_id":"source/_posts/iOS/04. Tools & Configurations/.DS_Store","hash":"526dc4b4c90cb373704980b81aa599e2e0e96c74","modified":1693683065457},{"_id":"source/_posts/iOS/04. Tools & Configurations/00. Common Git Commands.md","hash":"480e7fb1f3e6b61ab3f57f4f85a068d1da80705b","modified":1700906414566},{"_id":"source/_posts/iOS/04. Tools & Configurations/01. How to simulate a weak network environment in iOS.md","hash":"e82859227a08e1666b603bcd744eab7bec14efa1","modified":1700217907776},{"_id":"source/_posts/iOS/05. Projects & Issues/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1693487331274},{"_id":"source/_posts/iOS/05. Projects & Issues/00. An investigation of Lost location Issue.md","hash":"6c59bc15a0751ffda9acb9051735314188df55b0","modified":1694074090541},{"_id":"source/_posts/iOS/05. Projects & Issues/01. How to use iOS Geofencing in your business.md","hash":"87b0f5f1a40e7f7e0ed7b01cc775c218bb633234","modified":1696603799635},{"_id":"source/_posts/iOS/05. Projects & Issues/02. Design of a Document Similarity Comparison Tool.md","hash":"de5b3847d4183f04bca23161b6ff6d413fc03e59","modified":1692818577927},{"_id":"source/_posts/iOS/05. Projects & Issues/03. A modular page-building solution based on UIView..md","hash":"de5b3847d4183f04bca23161b6ff6d413fc03e59","modified":1692818577927},{"_id":"source/_posts/iOS/05. Projects & Issues/04. A page-building solution based on State machines..md","hash":"de5b3847d4183f04bca23161b6ff6d413fc03e59","modified":1692818577927},{"_id":"source/_posts/iOS/05. Projects & Issues/05. How to support multi-source configuration in a componentized Pod.md","hash":"7088afe9819f49984b316ebfa8904c35d152d18a","modified":1700056338691},{"_id":"source/_posts/iOS/05. Projects & Issues/06. H5 hybrid.md","hash":"4b942299c7d14c8da44bf7cf1d36b7db44073534","modified":1698070124055},{"_id":"source/_posts/iOS/06. Others/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1694107669515},{"_id":"source/_posts/iOS/06. Others/00. Waterfall development vs Agile development.md","hash":"39084983f4bc33a7c43647fd4159e24d10276627","modified":1696605470883},{"_id":"source/_posts/iOS/06. Others/01. All we need to know about Restful API.md","hash":"9b44302d52f09093263b90300b16e064a9803072","modified":1695236122781},{"_id":"source/_posts/iOS/06. Others/02. All about CI:CDs.md","hash":"731da3e8eabbf7f0605cad9320ef80345af68723","modified":1698079506911},{"_id":"source/assets/iOS/Tools&Configurations/00/08_gitshortlogsn.png","hash":"aab2df20eabe1e3fbea75d8a8056b7380d7f202b","modified":1700065916305},{"_id":"source/assets/iOS/Tools&Configurations/01/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1700216964029},{"_id":"source/_posts/iOS/00. Tips/images/.DS_Store","hash":"decc55950a6bfd49531dd6747ebdd3f6b9d0737c","modified":1677645701805},{"_id":"source/_posts/iOS/00. Tips/images/001.png","hash":"1e9a719557b378e404d030b51c5dc2eab041b1ac","modified":1677644763291},{"_id":"source/_posts/iOS/00. Tips/images/002.png","hash":"72a12b81eae831bedf7a5ead7382133f136b2b66","modified":1677644784493},{"_id":"source/assets/cactus.png","hash":"4633bf3d6601dfa2dc86ac8341df85e440dff128","modified":1692108039130},{"_id":"source/assets/ReactiveProgramming/RxSwift/08.png","hash":"952beee0b1c0f6a87075f50440175240b561167f","modified":1695392739077},{"_id":"source/assets/ReactiveProgramming/RxSwift/09.png","hash":"c3f887442f8de45f142dce5395318c376e6fca91","modified":1695392746801},{"_id":"source/assets/SwiftUI/BasicConcepts/000.png","hash":"56b25c93bc84e5c89c719767800177f73c236ffd","modified":1693744095722},{"_id":"source/assets/SwiftUI/BasicConcepts/002.png","hash":"fa4630723e342f7f9279f0ccf268e1057320f201","modified":1693744730083},{"_id":"source/assets/SwiftUI/BasicConcepts/003.png","hash":"6872d4ec09a72b5270ac59737f1023c3280d7134","modified":1693744737020},{"_id":"source/assets/SwiftUI/BasicConcepts/012.png","hash":"a7e1cc5aec52993fbcb00ffd18ea121eb97e5929","modified":1694018702846},{"_id":"source/assets/SwiftUI/BasicConcepts/014.png","hash":"877322a860f464c786387f7251b9d9048647eda7","modified":1694018713095},{"_id":"source/assets/iOS/Memory&Performance&Stability/001.png","hash":"0f495a3cf267209ee14f332e7b10aa9837d6b860","modified":1677658574077},{"_id":"source/assets/iOS/Projects&Issues/000.png","hash":"02ac7a29167f245c37d360978ee946cd39b70caa","modified":1696601788034},{"_id":"source/assets/iOS/Projects&Issues/003.png","hash":"5d86fc96aaf05a7c6812eb9010a41caf126e161d","modified":1696602770266},{"_id":"source/assets/iOS/Projects&Issues/004.png","hash":"b4562e5d62e750a24cd989a0e48c41ce7233f47a","modified":1696601368968},{"_id":"source/assets/iOS/Projects&Issues/007.png","hash":"2f74ce5c65712197911c381b6641b30b596b2b27","modified":1696601389582},{"_id":"source/assets/iOS/Tools&Configurations/00/00_rebase.png","hash":"0a6000bf8ed9810f333b106a81a32e0154a5a90c","modified":1700061777406},{"_id":"source/assets/iOS/Tools&Configurations/00/01_merge.png","hash":"c7af5468309b42436c68222131deb7099237ece0","modified":1700061784880},{"_id":"source/assets/iOS/Tools&Configurations/01/08.png","hash":"61d503e74b657779d03a42dc13313e3a11932da3","modified":1700217631689},{"_id":"source/assets/iOS/Tools&Configurations/01/09.png","hash":"a5ce13954aef8605f06af48cc0f3b16fb1a49388","modified":1700217408039},{"_id":"source/_posts/iOS/00. Tips/images/003.png","hash":"0f495a3cf267209ee14f332e7b10aa9837d6b860","modified":1677658574077},{"_id":"themes/cactus/.DS_Store","hash":"7e7c40954bb2ff8598f0b1dc91e244f536042a79","modified":1692040877155},{"_id":"themes/cactus/.gitignore","hash":"72267ee409a324fc197c150b3c4bf28b87b709a8","modified":1685777179000},{"_id":"themes/cactus/.jshintrc","hash":"2548bd6ce44422edc7e6f9f68061ab47f26c4f57","modified":1685777179000},{"_id":"themes/cactus/LICENSE","hash":"346ece39a983b0e7858c11f785cd846cef9eb875","modified":1685777179000},{"_id":"themes/cactus/README.md","hash":"52fafba48b0c792478e134a659bc8f0f61b4557b","modified":1685777179000},{"_id":"themes/cactus/.stylintrc","hash":"eb5f48e83657928cb0cbee031373b2cd36ca0083","modified":1685777179000},{"_id":"themes/cactus/gulpfile.js","hash":"70d419549ba72e0906fd2fc8103701142eb883a7","modified":1685777179000},{"_id":"themes/cactus/_config.yml","hash":"3358a736346593461cd987ee09b43cf0a05574aa","modified":1694275217196},{"_id":"themes/cactus/package.json","hash":"dbb0a486006e7d4ecdb4b005b6a9b264b5d542dc","modified":1685777179000},{"_id":"themes/cactus/languages/ar.yml","hash":"81a88b0593fc89de3118d686681b1f69883c847b","modified":1685777179000},{"_id":"themes/cactus/languages/ca.yml","hash":"b79dd2c21dc6697c635e92db1f661a4b8d5d2305","modified":1685777179000},{"_id":"themes/cactus/languages/de.yml","hash":"43b2f4e078b042aaae0377a4235216a51ed82e0d","modified":1685777179000},{"_id":"themes/cactus/languages/default.yml","hash":"6a84970bf69c3e9490e5382747ca2b4c4b4dccde","modified":1685777179000},{"_id":"themes/cactus/languages/es.yml","hash":"2b1fc8b0d636123e9ee39017fa20053bd1913a5a","modified":1685777179000},{"_id":"themes/cactus/languages/en.yml","hash":"6a84970bf69c3e9490e5382747ca2b4c4b4dccde","modified":1685777179000},{"_id":"themes/cactus/languages/fa.yml","hash":"63f32e50953af1c4bd0308a4fca5862b5287c2cb","modified":1685777179000},{"_id":"themes/cactus/languages/fr.yml","hash":"5c07406998f19d219a5a7b65c0d88b6b023f85b2","modified":1685777179000},{"_id":"themes/cactus/languages/it.yml","hash":"62800bcae1f2d2454f87f4bcf4d7593848424f61","modified":1685777179000},{"_id":"themes/cactus/languages/kr.yml","hash":"651fb83991c91b13b53ed55740e5402cf0f1c5e8","modified":1685777179000},{"_id":"themes/cactus/languages/pl.yml","hash":"8a2d6dc874d86c38d42c2c861c39590647b5d536","modified":1685777179000},{"_id":"themes/cactus/languages/nl.yml","hash":"ac0573352ad2c737a7686bcca498b985e7bd6447","modified":1685777179000},{"_id":"themes/cactus/languages/pt-br.yml","hash":"4859aba788a050c2d5d0b997693b0c8c24b349f7","modified":1685777179000},{"_id":"themes/cactus/languages/ru.yml","hash":"81b57fcd1977ef534f4bf303dbc1b4710cc7f057","modified":1685777179000},{"_id":"themes/cactus/languages/tr.yml","hash":"2702914007e6bade9d6861078c0e179ac05bf48c","modified":1685777179000},{"_id":"themes/cactus/languages/vi.yml","hash":"f84893c3ec3e45875c90069e14b17ed3016ed973","modified":1685777179000},{"_id":"themes/cactus/languages/zh-CN.yml","hash":"d016060817311addb4c528de440126b975038c31","modified":1685777179000},{"_id":"themes/cactus/languages/zh-TW.yml","hash":"2f4e050c9b35a67f4a7278cec3a949533c2ac16a","modified":1685777179000},{"_id":"themes/cactus/layout/404.ejs","hash":"b911da998c160cceb8cd7c4dae709a1374ed2491","modified":1685777179000},{"_id":"themes/cactus/layout/archive.ejs","hash":"8e9bb1199694b229d2a3de1c3a55188a28e6f5e7","modified":1685777179000},{"_id":"themes/cactus/layout/index.ejs","hash":"fb73e020655ec4696eb7f91a350bf3b9c0fa2755","modified":1685777179000},{"_id":"themes/cactus/layout/layout.ejs","hash":"e03062a5a70d71dff9f09dd86769d1a13b33afd9","modified":1685777179000},{"_id":"themes/cactus/layout/page.ejs","hash":"c5465d5315a7544aa466b01fd8cfb62917a8bb1d","modified":1685777179000},{"_id":"themes/cactus/layout/post.ejs","hash":"f8eac342118298447ef38c21f9560a359e488395","modified":1685777179000},{"_id":"themes/cactus/scripts/cdn.js","hash":"887edec364d51efa7c524446483188c6ad05adaf","modified":1685777179000},{"_id":"themes/cactus/scripts/merge-configs.js","hash":"2048c3415d96b17b9d84aa44bc0c25f1210525f8","modified":1685777179000},{"_id":"themes/cactus/scripts/error_404.js","hash":"f83b290e47cb78a2754152fccc34e571a72087bd","modified":1685777179000},{"_id":"themes/cactus/scripts/meta.js","hash":"654868666b6573b2cee7e750b47ad8a3c2ee13a0","modified":1685777179000},{"_id":"themes/cactus/scripts/page_title.js","hash":"fa662dbdb82779af1b95e35ed7ccdf4866a53dee","modified":1685777179000},{"_id":"themes/cactus/scripts/thumbnail.js","hash":"df8829fd8c3119650037eba5ec11bdce06acff9d","modified":1685777179000},{"_id":"themes/cactus/source/.DS_Store","hash":"ddfe4e10016aa47aa8034684d4fb1d9a30014d84","modified":1692907366594},{"_id":"themes/cactus/layout/_partial/comments.ejs","hash":"4e75035a427fd137ae7f12940209e8e97845df3b","modified":1685777179000},{"_id":"themes/cactus/layout/_partial/footer.ejs","hash":"12fd63b51472c9c5b8b7d167eb1a96bf1d686c20","modified":1685777179000},{"_id":"themes/cactus/layout/_partial/google_analytics.ejs","hash":"64aeee0fdfc06207573ddbf8b91f6d3f007ccea9","modified":1685777179000},{"_id":"themes/cactus/layout/_partial/head.ejs","hash":"4709e17487315e8f0a5b38f0611f0244f16fdd87","modified":1685777179000},{"_id":"themes/cactus/layout/_partial/header.ejs","hash":"21d60f0bb82367cc2bee0c7eb3c06c7f5ab56a6d","modified":1685777179000},{"_id":"themes/cactus/layout/_partial/pagination.ejs","hash":"247bf8ec39965fe07b52f5a3d04e02e0aaf2da57","modified":1685777179000},{"_id":"themes/cactus/layout/_partial/scripts.ejs","hash":"9bbc0cf2dd0d7cdaafe827c3945a9bea1503da83","modified":1685777179000},{"_id":"themes/cactus/layout/_partial/search.ejs","hash":"8b4bf9cf5db0ce762a31fc3baae0f2fc004bece4","modified":1685777179000},{"_id":"themes/cactus/layout/_partial/umami_analytics.ejs","hash":"3e79be7343c4d0a5971d3aa659e3750672a91e72","modified":1685777179000},{"_id":"themes/cactus/layout/_partial/styles.ejs","hash":"c6bc7e8a422c5bb57f88fed1d1b0694d03e24e74","modified":1685777179000},{"_id":"themes/cactus/source/_data/projects.json","hash":"ffca6b630d7d49eee4f5a95c6a4a2bec301381d4","modified":1692907494405},{"_id":"themes/cactus/source/css/.DS_Store","hash":"1148eeb79c2c7a779586e545a1be9a338e46ca1a","modified":1692040343035},{"_id":"themes/cactus/source/css/_extend.styl","hash":"b6a4e5905a7515dda66919167531a5ab2b3d1fe2","modified":1685777179000},{"_id":"themes/cactus/source/css/_mixins.styl","hash":"1a9e309523df9685e8d088dcff0a809c58e2c392","modified":1685777179000},{"_id":"themes/cactus/source/css/_fonts.styl","hash":"354809b5a64e8a47a66c66fd1a28ac597c1460a6","modified":1692818160295},{"_id":"themes/cactus/source/css/_util.styl","hash":"2bfeb2e2605dd5235693b00c71a212646d2e0410","modified":1685777179000},{"_id":"themes/cactus/source/css/_variables.styl","hash":"bea4e21c46b723eb984f22d456230cac8cf2d6e3","modified":1692818233051},{"_id":"themes/cactus/source/css/rtl.styl","hash":"ff8700e1626feeb53d905a2df2777bda7d1eca50","modified":1685777179000},{"_id":"themes/cactus/source/css/style.styl","hash":"1af0d60459f4d5e26fae655bea917579bd1bfbec","modified":1692817938425},{"_id":"themes/cactus/source/images/apple-touch-icon.png","hash":"57e2def34682655f41a0be2d083f16765ba7858b","modified":1685777179000},{"_id":"themes/cactus/source/images/favicon-192x192.png","hash":"96e6fcbbb13a5914a6131391e210eb7dfd13d692","modified":1685777179000},{"_id":"themes/cactus/source/images/favicon.ico","hash":"189f9842bcb79a6f8f9e8445bc8bbd773443826b","modified":1685777179000},{"_id":"themes/cactus/source/js/search.js","hash":"914a2ce72fb325106c61600200be823b72bfb39f","modified":1685777179000},{"_id":"themes/cactus/source/js/main.js","hash":"9eb41deaf7d743b60a30ca1b1ffe050128ce9d2c","modified":1692798855378},{"_id":"themes/cactus/layout/_partial/post/actions_desktop.ejs","hash":"54a590e39e2d6e9ee41b8a1423a7bc67ab03363d","modified":1685777179000},{"_id":"themes/cactus/layout/_partial/post/actions_mobile.ejs","hash":"5ee47fffaf428802cfe47dd2e6186c6bbff85067","modified":1685777179000},{"_id":"themes/cactus/source/lib/.DS_Store","hash":"28f0378331a0a08009bd483874b79042a3462f26","modified":1692040343056},{"_id":"themes/cactus/layout/_partial/post/category.ejs","hash":"aeb99694d8492d4fcda320493b259fb68bf21830","modified":1685777179000},{"_id":"themes/cactus/layout/_partial/post/date.ejs","hash":"23770328c7d900ecc7fd87930dc24b095eb272ac","modified":1685777179000},{"_id":"themes/cactus/layout/_partial/post/share.ejs","hash":"9a15a7c005cfe518fdc9ec61a5107c76012f49d0","modified":1685777179000},{"_id":"themes/cactus/layout/_partial/post/gallery.ejs","hash":"9aecd8908e8a684f33dc20c02497c0f1774137c7","modified":1685777179000},{"_id":"themes/cactus/layout/_partial/post/tag.ejs","hash":"80bd2afd49b296e6441ab977a0614add710c32a3","modified":1685777179000},{"_id":"themes/cactus/layout/_partial/post/title.ejs","hash":"b2a00781d1301ff4d362b5d2a97480052ee4cae1","modified":1685777179000},{"_id":"themes/cactus/source/css/_colors/classic.styl","hash":"bc09f8777a6c99030da953dfdb84f793c5e4fd85","modified":1685777179000},{"_id":"themes/cactus/source/css/_colors/dark.styl","hash":"9aa43b1f23d5d268dfa36bd942d6ce97b7677c4d","modified":1685777179000},{"_id":"themes/cactus/source/css/_colors/light.styl","hash":"d14ef1aa02d0895b6f9321ebfc23a1ec84b054b8","modified":1685777179000},{"_id":"themes/cactus/source/css/_colors/white.styl","hash":"60adf17521e170369eea8dbe8b9f0974ce477474","modified":1692817884172},{"_id":"themes/cactus/source/css/_highlight/agate.styl","hash":"53027913ed8d4f75ac3e49e76aad824f0df62da3","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/androidstudio.styl","hash":"2af0861725f97f0ee2ded67c3d2d4548c62b2d16","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/arta.styl","hash":"b3e81e3e694ceb8deed178adb8b91013c5120e30","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-cave-dark.styl","hash":"ce63dd8548688d88254405eedfa75b1d7c82449e","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-dune-dark.styl","hash":"c196ff0ee064af0e507823694ae39020addfc280","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-estuary-dark.styl","hash":"0bb16a4eff93688f40787abc2f9e56e7d5cc93e7","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-forest-dark.styl","hash":"effbc5d75fa87203c847039869c22031b40d5b7d","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-heath-dark.styl","hash":"9a2e9a1d0a01bbdf158560c3ed1c134e098b2c68","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-lakeside-dark.styl","hash":"10ee3882fca7b97a37bd309d2d35fce9868647bb","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-plateau-dark.styl","hash":"84c80e6f67f62fce958d25817c277d2360272617","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-savanna-dark.styl","hash":"e32c1c70def8060fce5e790979a126da650ac642","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-seaside-dark.styl","hash":"2edf385215bbe1985b1a10106525d362667d28c2","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"538a14321193cd8abf2ddc484306631e54149ffb","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/brown-paper.styl","hash":"c2326ba20a5020a66ca7895258d18833327d4334","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/codepen-embed.styl","hash":"8b7b34484f76a6c2c3b1a9e49abb9b382f439ae8","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/dark.styl","hash":"f5e6e75958de59e87fc6be3a1668e870e20bc836","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/darkula.styl","hash":"9717efa9194837ba3fb4d762997d33075dcf8bfa","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/far.styl","hash":"aaac3028f5e33123cd123a583cddc9290c45ec8e","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/gruvbox-dark.styl","hash":"76b744c14fd5600bea64731c05df97c2df75523f","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/highlightjs.styl","hash":"0e198b7a59191c7a39b641a4ddd22c948edb9358","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/hopscotch.styl","hash":"1378a6bc67a32c0cbff72ab771268b53f9aa586d","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/hybrid.styl","hash":"b8eb5c69d12f2ee5ebc50265ae271699d7f1a8d3","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/index.styl","hash":"002d5596f6379cc87dbd43d9145bc764aa666be1","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/ir-black.styl","hash":"53e5d74326a4527b92272bbd6946d4fec92720e8","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/kimbie.styl","hash":"51b889ca7c6fe178cfbbe28d875a6ea427184441","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/monokai-sublime.styl","hash":"c385b11345894be7e6ce3c5f08663e199933b8e4","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/monokai.styl","hash":"f87be027848ea6bee623a08ad1e17b2f5b7937ee","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/obsidian.styl","hash":"199e28326be8590883f0813ebbd54fcfaa4750fd","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/paraiso.styl","hash":"75f181eece6b71d033ea0c8d6cf00ae7efb9e29b","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/pojoaque.styl","hash":"4e7b6b046b8575ac749f6aec4e953a62ada27a36","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/railscasts.styl","hash":"b6674db9210e0c4444e4835fff2d1361f3ebd64c","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/rainbow.styl","hash":"c0cf97aae3e10fdcd10414547a711c9effbc39b8","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/school-book.styl","hash":"d43560fe519a931ce6da7d57416d7aa148441b83","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/solarized-dark.styl","hash":"90c9da5aa594383697e5b18892a7f95beb053f55","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/sunburst.styl","hash":"af3eec0fd56151e55bbd49c31b151f36717611d8","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-blue.styl","hash":"f24c17d0ab815dcfaab3438cb9fe2ab4839f5e0d","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-bright.styl","hash":"7674fecb6d27350727dc0d2dc93bc018382ebbd0","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-eighties.styl","hash":"28d751075ebabf7d0327a36f725076fe82fdf626","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night.styl","hash":"16ba09b2db501e4e3e2e7d62595d9bf935bf27c4","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/zenburn.styl","hash":"68ff9332ccc03f9389b15b713415cde016f8088f","modified":1685777179000},{"_id":"themes/cactus/source/css/_partial/archive.styl","hash":"31aef892437d5734a134c34f2a8a6610a8f671c3","modified":1685777179000},{"_id":"themes/cactus/source/css/_partial/article.styl","hash":"258370d8ab98e63804ead9bc030f633ca97a1235","modified":1685777179000},{"_id":"themes/cactus/source/css/_partial/categories.styl","hash":"a43f00e61b3507f130b8a3f8108a4eeca147c2a0","modified":1685777179000},{"_id":"themes/cactus/source/css/_partial/comments.styl","hash":"1e90f1fb9d4c155df518cacb5a537e9de9c042c1","modified":1685777179000},{"_id":"themes/cactus/source/css/_partial/footer.styl","hash":"61c2c7c5f73a0022ec41830bea0812a97f522d7c","modified":1685777179000},{"_id":"themes/cactus/source/css/_partial/header.styl","hash":"8ce12f14382b6d471e3fe1266573b34fa84deaa0","modified":1685777179000},{"_id":"themes/cactus/source/css/_partial/index.styl","hash":"59c99f4ea3a73bf47ce030df166c5e33d5de31fb","modified":1685777179000},{"_id":"themes/cactus/source/css/_partial/pagination.styl","hash":"950bf517bbe7adb9a9aa4eb5ddec74ffc7598787","modified":1685777179000},{"_id":"themes/cactus/source/css/_partial/search.styl","hash":"159be002780c62a77f46947cf854a7342fba24f4","modified":1685777179000},{"_id":"themes/cactus/source/css/_partial/tags.styl","hash":"d571d5c7c960300d29c5f0ec3fe1140322ecd6b3","modified":1685777179000},{"_id":"themes/cactus/source/css/_partial/tooltip.styl","hash":"2daff581ec3efaec840cbfdee512195919c32629","modified":1685777179000},{"_id":"themes/cactus/source/lib/clipboard/clipboard.min.js","hash":"9a7cb405f9beed005891587d41f76a0720893ffc","modified":1685777179000},{"_id":"themes/cactus/source/lib/font-awesome/.DS_Store","hash":"163818f8a0c6ce6a884baaaf8e19886d83b8c8d4","modified":1692110732779},{"_id":"themes/cactus/source/lib/justified-gallery/.DS_Store","hash":"dff321e4e2ba49992df0b63b5a44b65939d8e7a5","modified":1692110732777},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff","hash":"f6fda2de0348b3e3b7de73267f9f8e97a62f8353","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff2","hash":"7ea4fd7dd4cd4f480af78a0e2c5849eb921b1aeb","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff","hash":"56e632c9196fac364c66f812a3b4635dd999ad1c","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff2","hash":"6e40d0c7669c1adbcbf034bdc459f7bed4d6676d","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff","hash":"1c3dbf17411b1f6a6b22c2b76e9d8511586643d0","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff2","hash":"50b654d916204c30987d1987abd890ef92085ae3","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff","hash":"43a8aaa3fca8721dd32a5d20f7a98dfbc87c97fd","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff2","hash":"14b3e257c51a6a11d23b2a078017ff340c9777e4","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.woff","hash":"235889d59ddad2b1f3243ccaab7733bd713a2a21","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.woff2","hash":"a9714ffb842afc74836e64de04b52d8c37c87c8a","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff","hash":"c0e784de2eb5261cca244928f8a81fd893c3fe16","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff2","hash":"9b03b1a9071709f5b7dbca13412ecef6cb7a2a67","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.woff","hash":"2e8e6d38d361def5f48baac366f04e3db3ed4828","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.woff2","hash":"e213bb26bc7f10e1df3fe2d03d3ecaecd6e6d371","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/font-face.css","hash":"ba0030e1cd28a8caa7a5bb74b98da7c7bb185c90","modified":1685777179000},{"_id":"themes/cactus/source/css/_partial/post/actions_desktop.styl","hash":"a1f36f9a3fd5ffcd832bf39e9402678978035d48","modified":1685777179000},{"_id":"themes/cactus/source/css/_partial/post/actions_mobile.styl","hash":"0d2966c1d870392476864af8ee3ba312ba30cb82","modified":1685777179000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"67afa6237670ab99125056f2899129f22912dcf3","modified":1685777179000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"fb363d27cfdfe71a243fa2ac3dab2815232b9b7e","modified":1685777179000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-v4compatibility.ttf","hash":"a9d072aca9e0fadc2a7167671ce3d6b18d9cd2cc","modified":1685777179000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-v4compatibility.woff2","hash":"8f80d0bbe995f7fe92320fdaec10cd5ccd710a51","modified":1685777179000},{"_id":"themes/cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","hash":"dd3052149d3054f35efb823c68dd78e78aad5875","modified":1685777179000},{"_id":"themes/cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","hash":"ad8f48b4022498078b089fcdd1e8b47faf496931","modified":1685777179000},{"_id":"source/assets/iOS/Tools&Configurations/00/03_gitlog.png","hash":"cced7870fa22427a17029bc4f4edc27c8fea5a08","modified":1700062909271},{"_id":"source/assets/iOS/Tools&Configurations/00/04_gitshortlog.png","hash":"d1344a7f48412470d1af81dc899fc88cdaee9297","modified":1700062931095},{"_id":"source/assets/iOS/Tools&Configurations/01/05.png","hash":"42312fa033315349aefbcb1561a60f96bf3b15bc","modified":1700217357570},{"_id":"source/assets/iOS/Tools&Configurations/01/07.png","hash":"2e62491396f9822c95e73d3fbcb4f9a4ad8a644c","modified":1700217574863},{"_id":"themes/cactus/source/lib/jquery/jquery.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.eot","hash":"91152bd73e7ff8d943e3bde3ddb0fa0a018e1c21","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.ttf","hash":"b65915e3fa57b5c19995d15dc2341d115c1971b9","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.eot","hash":"5c1c680fade45393e4a5bb4548a092cd5ea6811e","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.ttf","hash":"122bb778b17a152c426a825ee981610a4bd59bf3","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.eot","hash":"a059359e9bea17dc2ff2ede955a05bf0dc4d00d0","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.ttf","hash":"df82b80c4d3b11e70dcd269fc62ac97cbfa0414d","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.eot","hash":"d9ec1f9f3fefd57e446cbe86dc297f1ff269b6de","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.ttf","hash":"948a091f0fdb8c7ae17d5ef8e51bd8830d65dd9a","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.eot","hash":"521c01f0eb79a48025e972ecbe21b0d7fb15437b","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.ttf","hash":"643c28c8f8a2bce1a0d62525aa045cd9883773cd","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.eot","hash":"a0ea0bdaef00b35544f9a21d25d35db9a79f7189","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.ttf","hash":"6aacb0eecb03c660570b6e159ba5ca97ca7461cf","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.eot","hash":"af46f7f4e10a1440a4c97b350622d279143e6798","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.ttf","hash":"1e08b6373c2e086f24776df9b11e4be6bbcc8a4a","modified":1685777179000},{"_id":"themes/cactus/source/lib/font-awesome/css/all.min.css","hash":"caf0d708f7fbeb4638ab3df16e47b5c54881f093","modified":1692799207029},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"4350f9ba93384634faf35f41c503c99c767f1069","modified":1685777179000},{"_id":"source/assets/Demo/wallpaper-2572384.jpg","hash":"1df3620ab8c69fe2498a746f8ead057162df0637","modified":1692108039134},{"_id":"source/assets/iOS/Memory&Performance&Stability/002.jpeg","hash":"4344a70e74ddc793e34c2f90f1a56fda8e14143c","modified":1677671190534},{"_id":"source/assets/iOS/Tools&Configurations/00/05_gitshow.png","hash":"4a24cc835c65908ea8471c0e0d911755e703152f","modified":1700063589930},{"_id":"source/assets/iOS/Tools&Configurations/01/04.png","hash":"94d1928510a51570b73f4af1db9a91b3354395bc","modified":1700217417192},{"_id":"source/assets/iOS/Tools&Configurations/01/06.png","hash":"cf8d2065bfcec655b306dd231ebdbef202f04884","modified":1700217526658},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"f0982a77285d53653845b0a78170b4688db972f1","modified":1685777179000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"6b99aa650bd12a36caa14e0127435d8f4cd3ba73","modified":1685777179000},{"_id":"source/assets/iOS/Tools&Configurations/01/03.png","hash":"b6155767fac645c1f4c46026945e0efba03cb70f","modified":1700216933593},{"_id":"themes/cactus/source/images/logo.png","hash":"0e3029251dfda26adee2761f71377297e8c26871","modified":1685777179000},{"_id":"source/assets/iOS/Tools&Configurations/01/02.png","hash":"22e078fe9f1b5a3a0aa66f9d461beb189b74a66e","modified":1700216912618},{"_id":"source/assets/iOS/Tools&Configurations/00/07_gitreflog.png","hash":"36980ba1fd5d77a987c565e0c05dce772040080c","modified":1700065652033},{"_id":"source/assets/iOS/Tools&Configurations/01/01.png","hash":"d8a7ebc93e803179a8ce67ce9235eea2a1d4952e","modified":1700216863219},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"20bd663830188cbadd2264e1daf9497c3ffc3621","modified":1685777179000},{"_id":"source/assets/iOS/Projects&Issues/002.png","hash":"02366cf5046a2d4ea2c6099a9a7b8c1257a3a467","modified":1696601361847},{"_id":"source/assets/iOS/Tools&Configurations/01/00.png","hash":"2c2d52d5e8779debf98685bf857c03d2431f5df8","modified":1700216836186},{"_id":"source/assets/Demo/wallpaper-878514.jpg","hash":"9f9705a377c42320b335b3c66b023e62b80e56e3","modified":1692108039138},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Italic.ttf","hash":"96c97a0a098ca40802f948ae56fa37aa6683d034","modified":1685777179000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Italic.ttf","hash":"68700db02debd4b922304134da83b829cbfddfc9","modified":1685777179000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Italic.ttf","hash":"7f7cdbdcc26279c04046632e22d872f111bc9399","modified":1685777179000},{"_id":"source/assets/iOS/Projects&Issues/001.png","hash":"d473a4e920e7949114353502452faab5c01e701d","modified":1696601264224},{"_id":"source/assets/iOS/Projects&Issues/006.png","hash":"1be67b3e0b76bcd8c7f8aeb3c0854d4ff5670f0a","modified":1696601382127},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Bold.ttf","hash":"bfa1ed9a263ed78462f06d322de13bd5bd0906b2","modified":1685777179000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","hash":"a9a431fc7a6c3a67c98021d4035c12a07a4f1070","modified":1685777179000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Regular.ttf","hash":"2b912dd13f052f645ee19951604610bb350d50af","modified":1685777179000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","hash":"65ddb11e75ee93909e845ab912a36717c48f1c94","modified":1685777179000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Bold.ttf","hash":"a8a8df3393bccc365335fc5eb0a62a6b7ccd32b9","modified":1685777179000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Regular.ttf","hash":"5e220152adefe905b2197f873d7cee99eca50e91","modified":1685777179000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Bold.ttf","hash":"df202ce09cbdc70bc16b81983a13ef0f94e46f10","modified":1685777179000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","hash":"d895a1bd25e36c58b7f463ebe14de09f186d5ab4","modified":1685777179000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Regular.ttf","hash":"56fa0e33a390b704afc56af93a31576ccdbbdd9e","modified":1685777179000},{"_id":"source/assets/Demo/wallpaper-2311325.jpg","hash":"ddaaaeb4fa04a05c83053c1f8149720d18c9c8de","modified":1692108039132},{"_id":"source/assets/iOS/Tools&Configurations/00/06_gitblame.png","hash":"f69f357d37d4285a0bfbadb4c6780738ede38eca","modified":1700063491021},{"_id":"source/assets/iOS/Projects&Issues/005.png","hash":"335f189a09bc9dc6c13af7e9bb864bae05435739","modified":1696601375429},{"_id":"public/search.xml","hash":"583a94eb4caa3754578810f0d13508ad8d6568b4","modified":1701036970699},{"_id":"public/about/index.html","hash":"f386a7852ad3f72668e2a9132f4ef9ba8a1918ee","modified":1701036970699},{"_id":"public/search/index.html","hash":"2ffdbc40e48edb623f9cee20d4b5b7dffe8c9fa5","modified":1701036970699},{"_id":"public/categories/index.html","hash":"3ef5403b15568d575e4d83d23855cfdcd2e3bf1d","modified":1701036970699},{"_id":"public/archives/index.html","hash":"d5dc81da527ea3b442e0040f984f2d621d96de79","modified":1701036970699},{"_id":"public/archives/page/2/index.html","hash":"7967ce44cc54d6d7dbbf446059459fb084312069","modified":1701036970699},{"_id":"public/archives/page/3/index.html","hash":"75bd57ab0ee2d1b074dc73ee33689cd6f0ae234f","modified":1701036970699},{"_id":"public/archives/page/4/index.html","hash":"7aefcbe0da9524d09171bb48e933c0ab76043b8c","modified":1701036970699},{"_id":"public/archives/2023/index.html","hash":"1d7549334c3b7ddb81fb4752466efc2e7fae86fb","modified":1701036970699},{"_id":"public/archives/2023/page/2/index.html","hash":"03abaf15127b6054aaa38a9c5d7e1b76def5f258","modified":1701036970699},{"_id":"public/archives/2023/page/3/index.html","hash":"b4ba9e01f51442811e2326a105b764294e1bae03","modified":1701036970699},{"_id":"public/archives/2023/page/4/index.html","hash":"f8cc6a4a062d806e905e7baff20acf59ca1c54b3","modified":1701036970699},{"_id":"public/archives/2023/01/index.html","hash":"82bfb3557a8b42da890849662fc6bae52db0157e","modified":1701036970699},{"_id":"public/archives/2023/02/index.html","hash":"7b6d48a4ff9acfa0d3b490db96dcce9cf55f5b9c","modified":1701036970699},{"_id":"public/archives/2023/03/index.html","hash":"90c3520f84f7593f5958e1d2e09d8ff44afcaedf","modified":1701036970699},{"_id":"public/archives/2023/08/index.html","hash":"8668883b5b7a04070db925a0831a80baedd0cea9","modified":1701036970699},{"_id":"public/archives/2023/09/index.html","hash":"1ec7e7efad34d1942da1b71359639179838f9a33","modified":1701036970699},{"_id":"public/archives/2023/10/index.html","hash":"46be719ee866805555d53e23401a8c4e1f5e8977","modified":1701036970699},{"_id":"public/archives/2023/11/index.html","hash":"bc64e0f2b7b3c11dbcebe9b3debd3c7c3b029f47","modified":1701036970699},{"_id":"public/index.html","hash":"80df8c12ff131ab1ec51391e11713dbba47ffed0","modified":1701036970699},{"_id":"public/page/2/index.html","hash":"dca2cd7fdcaaac7570a85efedbb39ea49e4d752c","modified":1701036970699},{"_id":"public/page/3/index.html","hash":"ed14f475180c5c18c38a82173fccf7aabe5ffe21","modified":1701036970699},{"_id":"public/page/4/index.html","hash":"04400b032dc4aa53fbb966d647cf2abff267a06b","modified":1701036970699},{"_id":"public/page/5/index.html","hash":"351064b0ad8b02126a66b6f5701825f690aa6651","modified":1701036970699},{"_id":"public/page/6/index.html","hash":"024875b8b08e9a37e358c24b975c9fd43dba3aac","modified":1701036970699},{"_id":"public/page/7/index.html","hash":"9195f26a04eaed1f9d84524a12c2776befdb996f","modified":1701036970699},{"_id":"public/page/8/index.html","hash":"b646ef6cb444f5a9dfa232c30ac72e689f313494","modified":1701036970699},{"_id":"public/categories/Others/index.html","hash":"d7749d82e1468688ef8d8e00425f72a3a5a67a12","modified":1701036970699},{"_id":"public/categories/SwiftUI/index.html","hash":"de037f3c0262b983aa4b8919cab5cd1ba0bd603f","modified":1701036970699},{"_id":"public/categories/Reactive-Programming/index.html","hash":"0d26004829e70e50631213d259e39f871b363452","modified":1701036970699},{"_id":"public/categories/Reactive-Programming/01-Combine/index.html","hash":"d8e20c4a790c24bb8b314305da575c0536253cdd","modified":1701036970699},{"_id":"public/categories/Reactive-Programming/00-RxSwift/index.html","hash":"57d30805d2ac5b28d8cfc62837f0c3d7cb2102a2","modified":1701036970699},{"_id":"public/categories/Swift/index.html","hash":"40ba3aca32a534b96745d386cc507012694bb3a6","modified":1701036970699},{"_id":"public/categories/Swift/page/2/index.html","hash":"c5a8a73e0f9a60742dc21dc2c2646895490c7bb6","modified":1701036970699},{"_id":"public/categories/Swift/page/3/index.html","hash":"f79d7cf25eb85d66d78d6a53ee970be636dcc392","modified":1701036970699},{"_id":"public/categories/Swift/01-Tips/index.html","hash":"87542b0d3e9a7642eb130acf5d5f60d67826d2dc","modified":1701036970699},{"_id":"public/categories/Swift/00-Fundamental-Concepts/index.html","hash":"aeff97fc80237e815efc03f00a7668001ebbfd38","modified":1701036970699},{"_id":"public/categories/Swift/03-Structs/index.html","hash":"ba5e1dda2ff3e6366e4d10afb0ab44bbcf538c66","modified":1701036970699},{"_id":"public/categories/Swift/02-Closures/index.html","hash":"f52b52c5c6012410c7f71f03c51e29ff26c5bc36","modified":1701036970699},{"_id":"public/categories/Swift/04-Enumerations/index.html","hash":"89b48fb6f1aedc601036e6177ffda29217e098a1","modified":1701036970699},{"_id":"public/categories/Swift/05-Protocols/index.html","hash":"f8e980464612fdad97584ba33cfca4a95ce9bbbd","modified":1701036970699},{"_id":"public/categories/Swift/06-Collections/index.html","hash":"f6d64652c1f10ab851e5f531c169718eb0d917bd","modified":1701036970699},{"_id":"public/categories/Swift/07-Concurrency/index.html","hash":"a5c7854a50de195e8d1cf80f688dada933a31762","modified":1701036970699},{"_id":"public/categories/Swift/08-Hybrid-Programming/index.html","hash":"69d46ef2927085c910e305699c7c6db4dc3689fa","modified":1701036970699},{"_id":"public/categories/iOS/index.html","hash":"714a4b3b52eeb6cba761c2637dbd02d6799ada83","modified":1701036970699},{"_id":"public/categories/iOS/00-Tips/index.html","hash":"00af5326ecff34d3b1c85be651b04cb98b952386","modified":1701036970699},{"_id":"public/categories/iOS/01-Memory-Performance-Stability/index.html","hash":"b2da4c36872d50234103c36953ef17a0296a5a87","modified":1701036970699},{"_id":"public/categories/iOS/04-Tools-Configurations/index.html","hash":"ab18a8e7bca25d4cb1f272913386a8800fb4b851","modified":1701036970699},{"_id":"public/categories/iOS/05-Projects-Issues/index.html","hash":"a611c71060fa6175e4844d3adede16cdb96d231f","modified":1701036970699},{"_id":"public/categories/iOS/06-Others/index.html","hash":"8e6e7e66d93bffbd337489ab7273af1d661fe8e4","modified":1701036970699},{"_id":"public/tags/hexo/index.html","hash":"47b27991875b21d7cde7193e30cab7d681fd5e01","modified":1701036970699},{"_id":"public/tags/configuration/index.html","hash":"485f678914494600c8a1a209faced91f20b95886","modified":1701036970699},{"_id":"public/tags/tool/index.html","hash":"cc0852097c04eb884c7ba08a88b44740ce00e3d4","modified":1701036970699},{"_id":"public/tags/SwiftUI/index.html","hash":"4ec1c87f366bbd00931871ec2f1a44d5e5418191","modified":1701036970699},{"_id":"public/tags/UIKit/index.html","hash":"5d83294832b551b73ce1c59a9872c50d63a66cbf","modified":1701036970699},{"_id":"public/tags/ContentView/index.html","hash":"5cd8cbbda1de47d45ef1104f36587f0367773347","modified":1701036970699},{"_id":"public/tags/View/index.html","hash":"01ec425990ada27c94b5da9749e8b8993831b536","modified":1701036970699},{"_id":"public/tags/Never/index.html","hash":"b135c4f309ae6ecc029c66f0daebf50534dc3144","modified":1701036970699},{"_id":"public/tags/Body/index.html","hash":"b2dfbe2df71c0ac0bf69fca42e1f1e2840bc9ad2","modified":1701036970699},{"_id":"public/tags/State/index.html","hash":"c905bab54d704e550c69c4e10e9f0f519a9f403b","modified":1701036970699},{"_id":"public/tags/binding/index.html","hash":"27e35109ff0f8da6497ef753e824bfb6d57a1fd2","modified":1701036970699},{"_id":"public/tags/ObservableObject/index.html","hash":"98fdbd851ab738a31d2d3fb6734fbdc56c7e5d3d","modified":1701036970699},{"_id":"public/tags/StateObject/index.html","hash":"7904451a1942d5fb74578ddc70df0720e8f7031b","modified":1701036970699},{"_id":"public/tags/EnvironmentObject/index.html","hash":"1eb422bf0ecbd8f29270b09f35362c527a8d1a36","modified":1701036970699},{"_id":"public/tags/FocusState/index.html","hash":"7a5d51d279a9641375e84fcca3053f59e222dff6","modified":1701036970699},{"_id":"public/tags/AppStorage/index.html","hash":"62ed4ecef018dc6a4c520c5c1f7de69e4c872d78","modified":1701036970699},{"_id":"public/tags/RxSwift/index.html","hash":"6e9836bb75eb22980ea1535effe6de84b56b0b2f","modified":1701036970699},{"_id":"public/tags/ReactiveCocoa/index.html","hash":"52b0ae11383220d8ffd70d2ae79e904fab65c71f","modified":1701036970699},{"_id":"public/tags/Subjects/index.html","hash":"98cb55b001b8dea6585330f89688fb2e641960af","modified":1701036970699},{"_id":"public/tags/Combine/index.html","hash":"f3d3a9f695eb0ef8647112021b7b80104c7c35a5","modified":1701036970699},{"_id":"public/tags/Copy-on-Write/index.html","hash":"b365ed69d39cfc202682b6a6d667c79f410fb335","modified":1701036970699},{"_id":"public/tags/try-and-try/index.html","hash":"4ef9024cdd231a92c2e0964f3f6a6b9389a3dbdf","modified":1701036970699},{"_id":"public/tags/open/index.html","hash":"133eab2d62caa9550746b0852583224f4da00d44","modified":1701036970699},{"_id":"public/tags/public/index.html","hash":"a965094a1feb3da08f0430efb5420852d384d4b6","modified":1701036970699},{"_id":"public/tags/internal/index.html","hash":"92c5f8e7c8df922316ff9c002262df8313edeee5","modified":1701036970699},{"_id":"public/tags/fileprivate/index.html","hash":"d7dbabf9be44cdee72067a8926a873c65d9acda9","modified":1701036970699},{"_id":"public/tags/private/index.html","hash":"a5fe04de77b54fed3e17d04b9f6747da3ae27a46","modified":1701036970699},{"_id":"public/tags/Self/index.html","hash":"538d7daa8101d5c1650c5a2783704f0bd90472bd","modified":1701036970699},{"_id":"public/tags/self/index.html","hash":"b9949b50da47223b757471f06ed4e2d14a4271d3","modified":1701036970699},{"_id":"public/tags/Optional/index.html","hash":"223433b29b45f29a4adbb794a2081d3b7170b072","modified":1701036970699},{"_id":"public/tags/random/index.html","hash":"933541130ba22abfd2123d432cb45d53e3acd11c","modified":1701036970699},{"_id":"public/tags/errors/index.html","hash":"28ea13c93c514e7482af5f529a67149c0d2efcfd","modified":1701036970699},{"_id":"public/tags/exceptions/index.html","hash":"b6ff99046bda45cc964c357fe888982b50939166","modified":1701036970699},{"_id":"public/tags/lazy/index.html","hash":"43d694f769ea6beef20fe840a95f3d7962517d12","modified":1701036970699},{"_id":"public/tags/anonymous/index.html","hash":"a08e7a49a451c90f13e2d62d7aeec1adf95b378c","modified":1701036970699},{"_id":"public/tags/nsstring/index.html","hash":"01fc44b05b20ccd4596de40471e3705fab90619c","modified":1701036970699},{"_id":"public/tags/string/index.html","hash":"eae4670474978ddbf17e0cc202a173e862d829c9","modified":1701036970699},{"_id":"public/tags/read-only/index.html","hash":"4bc176611e20a723f1ae1a71d49a9d9c78ebe18d","modified":1701036970699},{"_id":"public/tags/computed/index.html","hash":"bd682f1d475c0f7c030b474e882701fd3a1af804","modified":1701036970699},{"_id":"public/tags/stored/index.html","hash":"d82f294ae33fdd3d38c9aca9638d493f77ad9267","modified":1701036970699},{"_id":"public/tags/singleton/index.html","hash":"581ab55c988442dbbe17fc24ce26cc60a01552e0","modified":1701036970699},{"_id":"public/tags/memory-address/index.html","hash":"27d3aac96b6c00779261458ddb4afed69a8c3767","modified":1701036970699},{"_id":"public/tags/force-unwrapping/index.html","hash":"b97a7368ead6e5b249ff8387a4279973391dc56d","modified":1701036970699},{"_id":"public/tags/Implicitly-Unwrapped/index.html","hash":"47d97ca0eea67f687cb305e6fc759b3cb22730e5","modified":1701036970699},{"_id":"public/tags/rethrows/index.html","hash":"f5cf213594c5a9129d41e1d51d8d1d5748b9024d","modified":1701036970699},{"_id":"public/tags/defer/index.html","hash":"ed372ccfb0d6857ec9d5b155eac41abbdf0318de","modified":1701036970699},{"_id":"public/tags/final/index.html","hash":"e366717850440d3086ea1da33221638c67c20a77","modified":1701036970699},{"_id":"public/tags/subscript/index.html","hash":"cf3c40a014f30fd4e3e803b63bfdea00b8af79d3","modified":1701036970699},{"_id":"public/tags/OptionSet/index.html","hash":"157400e9e73ad5ce63988bcc0a7bb81f05cb620e","modified":1701036970699},{"_id":"public/tags/NS-OPTIONS/index.html","hash":"51c77fe4be7fac21030328907771dc27dd0506e0","modified":1701036970699},{"_id":"public/tags/inout/index.html","hash":"51c8baad23dcdc7a473d5f5e9100931f6d3fc41b","modified":1701036970699},{"_id":"public/tags/Error/index.html","hash":"1ff6a6120fd79d90dd80898379c513442fb7d565","modified":1701036970699},{"_id":"public/tags/NSError/index.html","hash":"cefd5bd0f6d2195d0eb87ae229ecfcfe478f33bd","modified":1701036970699},{"_id":"public/tags/struct/index.html","hash":"b5b41e40af40e022f49cccdc8d9eb195636cc4cc","modified":1701036970699},{"_id":"public/tags/class/index.html","hash":"9637b2c8eaf6c34ca3b1f943b2d191bc0e47ea72","modified":1701036970699},{"_id":"public/tags/performance/index.html","hash":"4cf292caee234f8f7b569f2f09152f68b08a1fb8","modified":1701036970699},{"_id":"public/tags/initialization/index.html","hash":"b6b3a29c82e8151e2af831a2c2509213b498c9db","modified":1701036970699},{"_id":"public/tags/constructors/index.html","hash":"dd3f1383a3d66577572e79c0b3d689e52db67c9f","modified":1701036970699},{"_id":"public/tags/closures/index.html","hash":"214e03f73e451f37b807893c8a6833a3fca32a6a","modified":1701036970699},{"_id":"public/tags/Closures/index.html","hash":"9dfc4b68b22c73af5e6224ed5359f3483b90d469","modified":1701036970699},{"_id":"public/tags/Capturing/index.html","hash":"e150caad60d62c8c67742aafeb7933687cb146f3","modified":1701036970699},{"_id":"public/tags/enumeration/index.html","hash":"7cc2beb4ff21fc1bb30ae307bc9892714ea3e896","modified":1701036970699},{"_id":"public/tags/nested/index.html","hash":"e57178e859fbbb4dcd7a7c69afa85a624619b094","modified":1701036970699},{"_id":"public/tags/recursive/index.html","hash":"c60456f8e89fee3a34816a0fdfcc66aaa242f0c3","modified":1701036970699},{"_id":"public/tags/protocol/index.html","hash":"d7a017d44941cf535beb24d1a7c561f0e32f4b87","modified":1701036970699},{"_id":"public/tags/associatedtype/index.html","hash":"202f84a70f33c3bf109ef3a77aee561f8d2fbd0f","modified":1701036970699},{"_id":"public/tags/map/index.html","hash":"c88807a9ce7ed9edbbaedef0071363423dda95a0","modified":1701036970699},{"_id":"public/tags/reduce/index.html","hash":"6bf32a720008d93c23533bd0bf07b2e16654045e","modified":1701036970699},{"_id":"public/tags/filter/index.html","hash":"bd431594c867e3df8829468867d2ff58e22e77ee","modified":1701036970699},{"_id":"public/tags/flatMap/index.html","hash":"49834c3493c18e2a4a6bb616a2cb0a8a2109a53f","modified":1701036970699},{"_id":"public/tags/collection/index.html","hash":"1d7b54cf772ad6422b20f13a3deb65e931a2ac5a","modified":1701036970699},{"_id":"public/tags/zip/index.html","hash":"b995a1454b1dc6792e794ced7bb8fa191ad00f81","modified":1701036970699},{"_id":"public/tags/concurrency/index.html","hash":"43f83a9245769b4a29df982951bd7947a0b68713","modified":1701036970699},{"_id":"public/tags/async/index.html","hash":"444149c89fc8cebd9c9b5ab5f6042f7f40b37c72","modified":1701036970699},{"_id":"public/tags/await/index.html","hash":"79014c08d407e752341891bfa6c6a6448844424b","modified":1701036970699},{"_id":"public/tags/Continuations/index.html","hash":"7896b2ff788862ad0a0f894287061a8aa55d9aa4","modified":1701036970699},{"_id":"public/tags/task/index.html","hash":"7469235445e5cac54713922b6ea2ceb9ac4b5ec8","modified":1701036970699},{"_id":"public/tags/actor/index.html","hash":"eddacc6575d8bbe978a0c4db3bf3676956fdcf9a","modified":1701036970699},{"_id":"public/tags/Sendable/index.html","hash":"faaa2dfefa6fd8fdcfe1ee47fae6a63d3edf9e94","modified":1701036970699},{"_id":"public/tags/Structured-Concurrency/index.html","hash":"f19127c8354327ec703f9f43f297333bf4459c8f","modified":1701036970699},{"_id":"public/tags/hybrid/index.html","hash":"9c7da89df97ead798e6def75d43a8268d5e481ce","modified":1701036970699},{"_id":"public/tags/macro/index.html","hash":"9eb441ca682d07f886a0144a128dbab1684b017d","modified":1701036970699},{"_id":"public/tags/nil/index.html","hash":"44de4b88939e655af8ac1de4bcf3e627ca315316","modified":1701036970699},{"_id":"public/tags/memory/index.html","hash":"6d687cfaba6a894d945f281ea392cc06e9e9a9e5","modified":1701036970699},{"_id":"public/tags/leak/index.html","hash":"d87ebadf1cfaed566b9fbbc87e402f1b2b0f89a4","modified":1701036970699},{"_id":"public/tags/crash/index.html","hash":"20f7840c53b4aaec2ce6b5571dc2a01443d2b6b8","modified":1701036970699},{"_id":"public/tags/Data-Persistence/index.html","hash":"557c33e587545b1d6ff2c18afab202c30e6092c3","modified":1701036970699},{"_id":"public/tags/git/index.html","hash":"400444313c9a79a129f3869aa0224bec97c4dbe1","modified":1701036970699},{"_id":"public/tags/weak-network/index.html","hash":"792077e2a47504db9ce32884faab0c013ae3ed14","modified":1701036970699},{"_id":"public/tags/latitude/index.html","hash":"73adf5c9cdd3ee6056af1006f15ef4a11679fa26","modified":1701036970699},{"_id":"public/tags/longitude/index.html","hash":"afb838d1706f4e2af5fd8c464a916bb86c628ca8","modified":1701036970699},{"_id":"public/tags/Geofencing/index.html","hash":"456382b81e18c814e7a805d7146c3aad90c91531","modified":1701036970699},{"_id":"public/tags/Restful/index.html","hash":"f86cb328f154a57bea1bfc951803929d37fa4ab4","modified":1701036970699},{"_id":"public/tags/Agile/index.html","hash":"c6e5801090bac09eb52f3f07685868ab95d473b6","modified":1701036970699},{"_id":"public/tags/waterfall/index.html","hash":"3aa5c6c91163f6b4b734628001ce68134f471ea8","modified":1701036970699},{"_id":"public/tags/CI-CDs/index.html","hash":"a8da79ba648cdd1957297521a306b677cb2f9b79","modified":1701036970699},{"_id":"public/tags/Jenkins/index.html","hash":"64bda152a17f642983ac94d78fe5779f1304bfb2","modified":1701036970699},{"_id":"public/tags/Fastlane/index.html","hash":"4e97677b791823af98b35293aca2fecb932959df","modified":1701036970699},{"_id":"public/404.html","hash":"5dd020dc8a5214d6cc045ddf43074b0183a15caa","modified":1701036970699},{"_id":"public/tags/index.html","hash":"75e880c3f1c5129eab1ef1b3248bcc4311904507","modified":1701036970699},{"_id":"public/2023/11/17/iOS/04. Tools & Configurations/01. How to simulate a weak network environment in iOS/index.html","hash":"f95e737776977ef88fd57129ac93304741bea4c3","modified":1701036970699},{"_id":"public/2023/11/16/iOS/04. Tools & Configurations/00. Common Git Commands/index.html","hash":"88994c0f5f1d4e5e717914410b7db0f247213b9d","modified":1701036970699},{"_id":"public/2023/11/14/iOS/01. Memory & Performance & Stability/02. Summary of Local Data Persistence Solutions/index.html","hash":"48e31258499ec848d5f46dbb562a4dd9cf04672f","modified":1701036970699},{"_id":"public/2023/11/13/iOS/00. Tips/01. The ways to extend a class in Objective-C/index.html","hash":"c6458cfd6a830654a18a9e8038e20919ce099abb","modified":1701036970699},{"_id":"public/2023/11/11/Swift/01. Tips/16. How to use Numeric or BinaryInteger protocol/index.html","hash":"1959dd55222bf88d9129cb7c42425ce12b79545d","modified":1701036970699},{"_id":"public/2023/11/11/Swift/06. Collections/00. Common higher-order functions/index.html","hash":"c050c67644ea3dd08b4d4a05d90f62856929e966","modified":1701036970699},{"_id":"public/2023/11/10/Swift/01. Tips/15. How to make the Error type compatible with NSError in Swift/index.html","hash":"60dbe7781a6aae93e22ca5ed4fbb335258a630d3","modified":1701036970699},{"_id":"public/2023/11/09/Swift/01. Tips/14. How to use inout in Swift/index.html","hash":"47053918a1a487a30c25ff5bcf2cc33afa4149cb","modified":1701036970699},{"_id":"public/2023/11/08/Swift/01. Tips/13. How to use OptionSet Protocol/index.html","hash":"88adb929e4e2cfde562aff976612c39da5adaee3","modified":1701036970699},{"_id":"public/2023/11/07/Swift/00. Fundamental Concepts/04. Optional type in Swift/index.html","hash":"b72dac48d2dd59346caf0f634e8e2037e18e61f4","modified":1701036970699},{"_id":"public/2023/11/07/Swift/01. Tips/12. How to customize subscripting in Swift/index.html","hash":"8f28b796248f464f694aa1de784a5b15cdd61dc0","modified":1701036970699},{"_id":"public/2023/11/07/Swift/00. Fundamental Concepts/03. The Self and self in Swift/index.html","hash":"49c4992400ad85421347bdcdc0eabbfb4751bd4b","modified":1701036970699},{"_id":"public/2023/11/07/Swift/00. Fundamental Concepts/02. The Access Control Keywords/index.html","hash":"32d365b2250e9e3b57b3f840e1c67fe16902c379","modified":1701036970699},{"_id":"public/2023/11/07/Swift/01. Tips/11. How to use final/index.html","hash":"35f0a473726a4a43024b4c919ffeb30552431413","modified":1701036970699},{"_id":"public/2023/11/07/Swift/00. Fundamental Concepts/01. The difference between try","hash":"60e7c1ce8105d89cca12a6236ebc1539ecb94ff1","modified":1701036970699},{"_id":"public/2023/11/07/Swift/01. Tips/10. How to use defer in Swift/index.html","hash":"25263c0babf923b1863f5dabd3092531a7bca497","modified":1701036970699},{"_id":"public/2023/11/07/Swift/00. Fundamental Concepts/00. The concept of Copy-on-Write/index.html","hash":"56107caf062c47996a6b4838454ab2dd74fa6dc9","modified":1701036970699},{"_id":"public/2023/10/23/iOS/06. Others/02. All about CI:CDs/index.html","hash":"f3edee59955d969734cfaa10ca5eae70741a9609","modified":1701036970699},{"_id":"public/2023/10/20/Reactive Programming/01. Combine/03. Combine (3)/index.html","hash":"098bfde9463a6813a99071c87bdb2f4875989ef7","modified":1701036970699},{"_id":"public/2023/10/18/Reactive Programming/01. Combine/02. Combine (2)/index.html","hash":"8b46a828d3806b24cc94b25fa0b7ac12b80700d7","modified":1701036970699},{"_id":"public/2023/10/08/Reactive Programming/01. Combine/01. Combine (1)/index.html","hash":"1490372248ccd419b8efd5fd05f4a0d46e08d4fd","modified":1701036970699},{"_id":"public/2023/10/06/iOS/05. Projects & Issues/01. How to use iOS Geofencing in your business/index.html","hash":"829c3a4379f92dad4cffd7da79985a1aca78e3a5","modified":1701036970699},{"_id":"public/2023/10/04/Reactive Programming/01. Combine/00. Combine (0)/index.html","hash":"db952a1c08a782d99931b4e389482bd60d78535e","modified":1701036970699},{"_id":"public/2023/09/28/Swift/07. Concurrency/06. Structured concurrency/index.html","hash":"31011a79291a561c26e2e4a0592f6e7ead9ab74c","modified":1701036970699},{"_id":"public/2023/09/24/Swift/07. Concurrency/05. Sendable/index.html","hash":"5c27cec3392a1384bf2a83ca0b34d8387e919dbf","modified":1701036970699},{"_id":"public/2023/09/22/Reactive Programming/00. RxSwift/04. RxSwift (4)/index.html","hash":"d756bf07bd5c189410a05d020fdd9365aa3a7a2b","modified":1701036970699},{"_id":"public/2023/09/22/Reactive Programming/00. RxSwift/03. RxSwift (3)/index.html","hash":"20e47a4e95290837131880919e1c7a9a4f5bcad6","modified":1701036970699},{"_id":"public/2023/09/22/Reactive Programming/00. RxSwift/02. RxSwift (2)/index.html","hash":"85797554595e52acb1d3f1d6e75c12c8b3eb93a8","modified":1701036970699},{"_id":"public/2023/09/21/Reactive Programming/00. RxSwift/01. RxSwift (1)/index.html","hash":"0c712dbf91e476e0caac82591a1aba7fa1b4dd77","modified":1701036970699},{"_id":"public/2023/09/21/Reactive Programming/00. RxSwift/00. RxSwift (0)/index.html","hash":"29b1ea5bd92db596914787efb5720c8775cab566","modified":1701036970699},{"_id":"public/2023/09/21/Swift/07. Concurrency/04. Actor/index.html","hash":"80820c655a29b443bc3c1a1ca4cbf2c08255d4f1","modified":1701036970699},{"_id":"public/2023/09/20/Swift/07. Concurrency/03. Task/index.html","hash":"7df0a51e4cbe263c7f3fbc7df4f4b9436b82d863","modified":1701036970699},{"_id":"public/2023/09/09/Swift/07. Concurrency/02. The use of Continuation/index.html","hash":"e0f4e156bf9761c475ba78ac782e0930facaad0a","modified":1701036970699},{"_id":"public/2023/09/09/Swift/03. Structs/04. Why should we avoid using closures in structs/index.html","hash":"b2ea99e3e77a89ebd696499727853a9612239c05","modified":1701036970699},{"_id":"public/2023/09/07/iOS/06. Others/01. All we need to know about Restful API/index.html","hash":"384728da733526e5a011c8fbf437177ecb0e9979","modified":1701036970699},{"_id":"public/2023/09/06/SwiftUI/03. Basic Concepts of SwiftUI (3)/index.html","hash":"0736ba01e290ecc0c2f82b0c9752a7dbf96cd78d","modified":1701036970699},{"_id":"public/2023/09/06/SwiftUI/02. Basic Concepts of SwiftUI (2)/index.html","hash":"4ced6236cfa9dbb37a6d1049b172203b1355eb62","modified":1701036970699},{"_id":"public/2023/09/06/iOS/06. Others/00. Waterfall development vs Agile development/index.html","hash":"fc68cd6dacb974c40629309c2075fd62e7cb79e8","modified":1701036970699},{"_id":"public/2023/09/03/SwiftUI/01. Basic Concepts of SwiftUI (1)/index.html","hash":"4a8b70b8a248ffd2f77d9398f7ca232f09232f2d","modified":1701036970699},{"_id":"public/2023/09/02/SwiftUI/00. SwiftUI vs UIKit/index.html","hash":"985f787b05737041d4781a079572657f554e2cb7","modified":1701036970699},{"_id":"public/2023/08/31/iOS/05. Projects & Issues/00. An investigation of Lost location Issue/index.html","hash":"142c33300574ded5a929abc5533185ad94e5635b","modified":1701036970699},{"_id":"public/2023/08/23/Swift/07. Concurrency/01. Async and Await/index.html","hash":"64214ca78a34198beb1c61cca13dfffeb8644f2b","modified":1701036970699},{"_id":"public/2023/08/19/Swift/01. Tips/09. How to use rethrows in Swift/index.html","hash":"055706017bd71fb104b1eb9ae6d8e4d01c415032","modified":1701036970699},{"_id":"public/2023/08/18/Swift/07. Concurrency/00. How to use do, catch, try, throws in Swift/index.html","hash":"85792edfae911b0b42a78a2d36ca6a7614d14b3e","modified":1701036970699},{"_id":"public/2023/08/15/iOS/00. Tips/00. Difference Of nil in OC and nil in Swift/index.html","hash":"ee0e97669a640f451360bb80790fa87b807b2c30","modified":1701036970699},{"_id":"public/2023/03/10/iOS/01. Memory & Performance & Stability/01. Common Crash Scenarios/index.html","hash":"7de99efcc6c6ddf163b98cd8180a48a647b71982","modified":1701036970699},{"_id":"public/2023/03/10/Swift/08. Hybrid Programming/00. Call the Macro definition of Objective-C in Swift/index.html","hash":"79b0955ea7cf43baca61898fef0e57856c06fc4f","modified":1701036970699},{"_id":"public/2023/03/09/Swift/06. Collections/01. Zip Function/index.html","hash":"d3031529eeb322cc303c12e0d102e9152459a431","modified":1701036970699},{"_id":"public/2023/03/08/iOS/01. Memory & Performance & Stability/00. Summary of Memory Leak/index.html","hash":"9c337aef416de9103695f92f03a27503290660f6","modified":1701036970699},{"_id":"public/2023/03/08/Swift/05. Protocols/01. Associatedtype/index.html","hash":"93f9f1ed82ef5c481df85215dbcbe3cc29e80108","modified":1701036970699},{"_id":"public/2023/03/07/Swift/05. Protocols/00. Summary of Protocols/index.html","hash":"27566f906e6d1f5d48f6819be5ec155a434aed68","modified":1701036970699},{"_id":"public/2023/03/06/Swift/04. Enumerations/03. Recursive Enumeration/index.html","hash":"a18d6b710efa5433c0880ec2f85af2186ef5024a","modified":1701036970699},{"_id":"public/2023/03/05/Swift/04. Enumerations/02. Include Enumeration/index.html","hash":"6c102a8b71672d250ce93f3a435a497e7857749b","modified":1701036970699},{"_id":"public/2023/03/04/Swift/04. Enumerations/01. Nested Enumeration/index.html","hash":"0bbbfc4d69176abdaa07a538cc095bef9eeaef6a","modified":1701036970699},{"_id":"public/2023/03/03/Swift/04. Enumerations/00. Summary of Enumerations/index.html","hash":"6cb7ba0f55a6b9fe0c8f9c30c6ed2024ea7f5973","modified":1701036970699},{"_id":"public/2023/03/02/Swift/03. Structs/03. A Case of Initialization Constructor/index.html","hash":"0bc125bf3ecbb26d39f1d8fe98476f4600247a40","modified":1701036970699},{"_id":"public/2023/03/02/Swift/03. Structs/02. Performance Comparison Between Structure and Class/index.html","hash":"364ebb48e6c5cfe49e95fea50403200d3c2c0112","modified":1701036970699},{"_id":"public/2023/03/02/Swift/03. Structs/01. Cases of Structures/index.html","hash":"b1be78cba6f02e3cb60f2162f62a06abee0f938d","modified":1701036970699},{"_id":"public/2023/03/02/Swift/03. Structs/00. Structures and Classes/index.html","hash":"998650a720fb5815215ca3c2a262da9a941b06cd","modified":1701036970699},{"_id":"public/2023/03/01/Swift/02. Closures/00. Three Forms of Closures/index.html","hash":"c01a0f148ba91c6386227cd9655273590515b6a8","modified":1701036970699},{"_id":"public/2023/03/01/Swift/02. Closures/01. Capturing Values/index.html","hash":"4dfeb3ad61b82626b049f6968ee65fb2378af723","modified":1701036970699},{"_id":"public/2023/02/28/Swift/01. Tips/08. Implicitly Unwrapped Optionals and Force unwrapping/index.html","hash":"c62553761b5a86e6c63c7cd64ece9a242c110f66","modified":1701036970699},{"_id":"public/2023/02/28/Swift/01. Tips/07. How to print the memory address of a variable/index.html","hash":"822cc07b0446e021103957d2f51f1a951c42f71b","modified":1701036970699},{"_id":"public/2023/02/28/Swift/01. Tips/06. How to Define a singleton/index.html","hash":"5e3fd86656377a35b89c9b4d9a793bd4da1bbb69","modified":1701036970699},{"_id":"public/2023/02/28/Swift/01. Tips/05. Computed properties and Stored properties/index.html","hash":"8824baed8e4cf0d3e0963915d8a2fafa43244a42","modified":1701036970699},{"_id":"public/2023/02/28/Swift/01. Tips/04. Set Read-only permission of the property/index.html","hash":"61a140c3b173a9aea294b443511c19032dddf18d","modified":1701036970699},{"_id":"public/2023/02/28/Swift/01. Tips/03. NSString and String/index.html","hash":"8a0e59862279904872764157aabe041ab58061c8","modified":1701036970699},{"_id":"public/2023/02/28/Swift/01. Tips/02. Lazy loading and Anonymous function/index.html","hash":"ffe40cf1d1c16e145a8c9592b22be788ca9f7453","modified":1701036970699},{"_id":"public/2023/02/28/Swift/01. Tips/01. Handling of errors and exceptions/index.html","hash":"f6d6b86d25b0c7d47132d6374809db965ccb1ed5","modified":1701036970699},{"_id":"public/2023/02/28/Swift/01. Tips/00. Generation of random numbers/index.html","hash":"d4338229449abeb81800c88da8d2953c837fb0b9","modified":1701036970699},{"_id":"public/2023/01/15/Others/00. Article publishing failure problem summary/index.html","hash":"141ed69e294a0c54deca1427b58189042ad2ebc9","modified":1701036970699},{"_id":"public/2023/01/15/iOS/05. Projects & Issues/02. Design of a Document Similarity Comparison Tool/index.html","hash":"783730142dee0d9ff3e8eccf314568345620c0bc","modified":1701036970699},{"_id":"public/2023/01/15/iOS/05. Projects & Issues/03. A modular page-building solution based on UIView./index.html","hash":"0907a1eec870fd30285e93e2625f975eeb239351","modified":1701036970699},{"_id":"public/2023/01/15/iOS/05. Projects & Issues/04. A page-building solution based on State machines./index.html","hash":"3d06deff94f8a4e7f9febe9814ac6cbbe39eae72","modified":1701036970699},{"_id":"public/2023/01/15/iOS/05. Projects & Issues/05. How to support multi-source configuration in a componentized Pod/index.html","hash":"d2484bdca1390966b34b176e61d2231af1606b50","modified":1701036970699},{"_id":"public/images/apple-touch-icon.png","hash":"57e2def34682655f41a0be2d083f16765ba7858b","modified":1701036970699},{"_id":"public/images/favicon-192x192.png","hash":"96e6fcbbb13a5914a6131391e210eb7dfd13d692","modified":1701036970699},{"_id":"public/images/favicon.ico","hash":"189f9842bcb79a6f8f9e8445bc8bbd773443826b","modified":1701036970699},{"_id":"public/lib/vazir-font/Vazir-Black.woff","hash":"f6fda2de0348b3e3b7de73267f9f8e97a62f8353","modified":1701036970699},{"_id":"public/lib/vazir-font/Vazir-Black.woff2","hash":"7ea4fd7dd4cd4f480af78a0e2c5849eb921b1aeb","modified":1701036970699},{"_id":"public/lib/vazir-font/Vazir-Bold.woff","hash":"56e632c9196fac364c66f812a3b4635dd999ad1c","modified":1701036970699},{"_id":"public/lib/vazir-font/Vazir-Bold.woff2","hash":"6e40d0c7669c1adbcbf034bdc459f7bed4d6676d","modified":1701036970699},{"_id":"public/lib/vazir-font/Vazir-Light.woff","hash":"1c3dbf17411b1f6a6b22c2b76e9d8511586643d0","modified":1701036970699},{"_id":"public/lib/vazir-font/Vazir-Light.woff2","hash":"50b654d916204c30987d1987abd890ef92085ae3","modified":1701036970699},{"_id":"public/lib/vazir-font/Vazir-Medium.woff","hash":"43a8aaa3fca8721dd32a5d20f7a98dfbc87c97fd","modified":1701036970699},{"_id":"public/lib/vazir-font/Vazir-Medium.woff2","hash":"14b3e257c51a6a11d23b2a078017ff340c9777e4","modified":1701036970699},{"_id":"public/lib/vazir-font/Vazir-Regular.woff","hash":"235889d59ddad2b1f3243ccaab7733bd713a2a21","modified":1701036970699},{"_id":"public/lib/vazir-font/Vazir-Regular.woff2","hash":"a9714ffb842afc74836e64de04b52d8c37c87c8a","modified":1701036970699},{"_id":"public/lib/vazir-font/Vazir-Thin.woff","hash":"c0e784de2eb5261cca244928f8a81fd893c3fe16","modified":1701036970699},{"_id":"public/lib/vazir-font/Vazir-Thin.woff2","hash":"9b03b1a9071709f5b7dbca13412ecef6cb7a2a67","modified":1701036970699},{"_id":"public/lib/vazir-font/Vazir-Variable.woff","hash":"2e8e6d38d361def5f48baac366f04e3db3ed4828","modified":1701036970699},{"_id":"public/lib/vazir-font/Vazir-Variable.woff2","hash":"e213bb26bc7f10e1df3fe2d03d3ecaecd6e6d371","modified":1701036970699},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"67afa6237670ab99125056f2899129f22912dcf3","modified":1701036970699},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"fb363d27cfdfe71a243fa2ac3dab2815232b9b7e","modified":1701036970699},{"_id":"public/lib/font-awesome/webfonts/fa-v4compatibility.ttf","hash":"a9d072aca9e0fadc2a7167671ce3d6b18d9cd2cc","modified":1701036970699},{"_id":"public/lib/font-awesome/webfonts/fa-v4compatibility.woff2","hash":"8f80d0bbe995f7fe92320fdaec10cd5ccd710a51","modified":1701036970699},{"_id":"public/about/images/qrcode.bmp","hash":"a4dcee22ec1e54d4441d602e4a1baaa826ad4705","modified":1701036970699},{"_id":"public/assets/ReactiveProgramming/RxSwift/00.jpg","hash":"759a6e4ee5741811d986046fb552405c643a7536","modified":1701036970699},{"_id":"public/assets/ReactiveProgramming/RxSwift/01.jpeg","hash":"b0d74d598ad135ecedf4ffc1d73d1b8c31a9f327","modified":1701036970699},{"_id":"public/assets/ReactiveProgramming/RxSwift/03.jpeg","hash":"1ff3c204ec4fddb265018fdc1b2f83c48c67c61f","modified":1701036970699},{"_id":"public/assets/ReactiveProgramming/RxSwift/02.jpeg","hash":"07265b50dff9ac34c9cfa7c0adff671a83cba8be","modified":1701036970699},{"_id":"public/assets/ReactiveProgramming/RxSwift/04.jpeg","hash":"b47f9da3625055c149c8e2f220a7b0a6506cf8ad","modified":1701036970699},{"_id":"public/assets/ReactiveProgramming/RxSwift/05.jpeg","hash":"5e97d323876c5c25abd382869bc9de46d1c04f4f","modified":1701036970699},{"_id":"public/assets/ReactiveProgramming/RxSwift/07.png","hash":"e2b39adcbb50e73ea236a49c77ab6090c7f04364","modified":1701036970699},{"_id":"public/assets/ReactiveProgramming/RxSwift/06.jpeg","hash":"17238827068a3f940b0742e683f06d5776d8923e","modified":1701036970699},{"_id":"public/assets/ReactiveProgramming/RxSwift/10.jpeg","hash":"68aa487236e3c6aaf8cdc1244bc29597a1b371ef","modified":1701036970699},{"_id":"public/assets/ReactiveProgramming/RxSwift/11.jpeg","hash":"ccd868bd743428eb34a0308d527ec395f5ff9e35","modified":1701036970699},{"_id":"public/assets/ReactiveProgramming/RxSwift/12.jpeg","hash":"53cc43c2aa04cfd74d8d74a2bf996a57d4b51a4e","modified":1701036970699},{"_id":"public/assets/ReactiveProgramming/RxSwift/13.jpeg","hash":"a5beb62dfb3e057ddd11fc74d1b594023540db6e","modified":1701036970699},{"_id":"public/assets/ReactiveProgramming/RxSwift/14.jpeg","hash":"3a57c15ec214067882569534833990c71d617d93","modified":1701036970699},{"_id":"public/assets/Swift/Tips/image00.jpg","hash":"5f98da7ebb53b3a5c9f6f46cef3ad4ac1fab604c","modified":1701036970699},{"_id":"public/assets/Swift/Concurrency/catch_warning.png","hash":"621728b2255253fc1fb86d5a5df086fe70d8ef82","modified":1701036970699},{"_id":"public/assets/SwiftUI/BasicConcepts/001.png","hash":"e18badd408db3b2b7d7c16978f4595b179b9613a","modified":1701036970699},{"_id":"public/assets/SwiftUI/BasicConcepts/004.png","hash":"3da1f1854ee8f21af9bf789f6871d1897b6d93eb","modified":1701036970699},{"_id":"public/assets/SwiftUI/BasicConcepts/005.png","hash":"c00bc7b8d54de3fbcfe5ecc7e50ab68724c0f052","modified":1701036970699},{"_id":"public/assets/SwiftUI/BasicConcepts/006.png","hash":"4445f2230812449f947c0e70bb28d1f8b259b347","modified":1701036970699},{"_id":"public/assets/SwiftUI/BasicConcepts/007.png","hash":"44f7ad3f9a66726e78b21bd585d06f184433a181","modified":1701036970699},{"_id":"public/assets/SwiftUI/BasicConcepts/008.png","hash":"9dbe560315b1ee5b0aa52c1969bfe88d6556b58f","modified":1701036970699},{"_id":"public/assets/SwiftUI/BasicConcepts/010.png","hash":"39d41931af63ee8983ddd31bec55adeea540e6f4","modified":1701036970699},{"_id":"public/assets/SwiftUI/BasicConcepts/009.png","hash":"f71f1e56f8d9f5caf2aeca8a77d14cb0b2e74702","modified":1701036970699},{"_id":"public/assets/SwiftUI/BasicConcepts/011.png","hash":"d66627ea7b0275fbcf3b92bfaa2e88547ae57f2c","modified":1701036970699},{"_id":"public/assets/SwiftUI/BasicConcepts/013.png","hash":"220e3d6de3a8e76764b05cda0a3e90a0e7dc2fb3","modified":1701036970699},{"_id":"public/assets/iOS/Others/001.png","hash":"1e9a719557b378e404d030b51c5dc2eab041b1ac","modified":1701036970699},{"_id":"public/assets/iOS/Others/002.png","hash":"72a12b81eae831bedf7a5ead7382133f136b2b66","modified":1701036970699},{"_id":"public/assets/iOS/Tools&Configurations/00/08_gitshortlogsn.png","hash":"aab2df20eabe1e3fbea75d8a8056b7380d7f202b","modified":1701036970699},{"_id":"public/lib/vazir-font/Vazir-Black.eot","hash":"91152bd73e7ff8d943e3bde3ddb0fa0a018e1c21","modified":1701036970699},{"_id":"public/lib/vazir-font/Vazir-Bold.ttf","hash":"122bb778b17a152c426a825ee981610a4bd59bf3","modified":1701036970699},{"_id":"public/lib/vazir-font/Vazir-Bold.eot","hash":"5c1c680fade45393e4a5bb4548a092cd5ea6811e","modified":1701036970699},{"_id":"public/lib/vazir-font/Vazir-Black.ttf","hash":"b65915e3fa57b5c19995d15dc2341d115c1971b9","modified":1701036970699},{"_id":"public/lib/vazir-font/Vazir-Light.eot","hash":"a059359e9bea17dc2ff2ede955a05bf0dc4d00d0","modified":1701036970699},{"_id":"public/lib/vazir-font/Vazir-Light.ttf","hash":"df82b80c4d3b11e70dcd269fc62ac97cbfa0414d","modified":1701036970699},{"_id":"public/lib/vazir-font/Vazir-Medium.ttf","hash":"948a091f0fdb8c7ae17d5ef8e51bd8830d65dd9a","modified":1701036970699},{"_id":"public/lib/vazir-font/Vazir-Medium.eot","hash":"d9ec1f9f3fefd57e446cbe86dc297f1ff269b6de","modified":1701036970699},{"_id":"public/lib/vazir-font/Vazir-Regular.eot","hash":"521c01f0eb79a48025e972ecbe21b0d7fb15437b","modified":1701036970699},{"_id":"public/lib/vazir-font/Vazir-Regular.ttf","hash":"643c28c8f8a2bce1a0d62525aa045cd9883773cd","modified":1701036970699},{"_id":"public/lib/vazir-font/Vazir-Thin.eot","hash":"a0ea0bdaef00b35544f9a21d25d35db9a79f7189","modified":1701036970699},{"_id":"public/lib/vazir-font/Vazir-Thin.ttf","hash":"6aacb0eecb03c660570b6e159ba5ca97ca7461cf","modified":1701036970699},{"_id":"public/lib/vazir-font/Vazir-Variable.eot","hash":"af46f7f4e10a1440a4c97b350622d279143e6798","modified":1701036970699},{"_id":"public/lib/vazir-font/Vazir-Variable.ttf","hash":"1e08b6373c2e086f24776df9b11e4be6bbcc8a4a","modified":1701036970699},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"4350f9ba93384634faf35f41c503c99c767f1069","modified":1701036970699},{"_id":"public/assets/cactus.png","hash":"4633bf3d6601dfa2dc86ac8341df85e440dff128","modified":1701036970699},{"_id":"public/assets/ReactiveProgramming/RxSwift/08.png","hash":"952beee0b1c0f6a87075f50440175240b561167f","modified":1701036970699},{"_id":"public/assets/ReactiveProgramming/RxSwift/09.png","hash":"c3f887442f8de45f142dce5395318c376e6fca91","modified":1701036970699},{"_id":"public/assets/SwiftUI/BasicConcepts/000.png","hash":"56b25c93bc84e5c89c719767800177f73c236ffd","modified":1701036970699},{"_id":"public/assets/SwiftUI/BasicConcepts/002.png","hash":"fa4630723e342f7f9279f0ccf268e1057320f201","modified":1701036970699},{"_id":"public/assets/SwiftUI/BasicConcepts/003.png","hash":"6872d4ec09a72b5270ac59737f1023c3280d7134","modified":1701036970699},{"_id":"public/assets/SwiftUI/BasicConcepts/012.png","hash":"a7e1cc5aec52993fbcb00ffd18ea121eb97e5929","modified":1701036970699},{"_id":"public/assets/SwiftUI/BasicConcepts/014.png","hash":"877322a860f464c786387f7251b9d9048647eda7","modified":1701036970699},{"_id":"public/assets/iOS/Memory&Performance&Stability/001.png","hash":"0f495a3cf267209ee14f332e7b10aa9837d6b860","modified":1701036970699},{"_id":"public/assets/iOS/Projects&Issues/000.png","hash":"02ac7a29167f245c37d360978ee946cd39b70caa","modified":1701036970699},{"_id":"public/assets/iOS/Projects&Issues/003.png","hash":"5d86fc96aaf05a7c6812eb9010a41caf126e161d","modified":1701036970699},{"_id":"public/assets/iOS/Projects&Issues/004.png","hash":"b4562e5d62e750a24cd989a0e48c41ce7233f47a","modified":1701036970699},{"_id":"public/assets/iOS/Projects&Issues/007.png","hash":"2f74ce5c65712197911c381b6641b30b596b2b27","modified":1701036970699},{"_id":"public/assets/iOS/Tools&Configurations/00/00_rebase.png","hash":"0a6000bf8ed9810f333b106a81a32e0154a5a90c","modified":1701036970699},{"_id":"public/assets/iOS/Tools&Configurations/00/01_merge.png","hash":"c7af5468309b42436c68222131deb7099237ece0","modified":1701036970699},{"_id":"public/assets/iOS/Tools&Configurations/01/08.png","hash":"61d503e74b657779d03a42dc13313e3a11932da3","modified":1701036970699},{"_id":"public/assets/iOS/Tools&Configurations/01/09.png","hash":"a5ce13954aef8605f06af48cc0f3b16fb1a49388","modified":1701036970699},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"f0982a77285d53653845b0a78170b4688db972f1","modified":1701036970699},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"6b99aa650bd12a36caa14e0127435d8f4cd3ba73","modified":1701036970699},{"_id":"public/assets/iOS/Tools&Configurations/00/03_gitlog.png","hash":"cced7870fa22427a17029bc4f4edc27c8fea5a08","modified":1701036970699},{"_id":"public/assets/iOS/Tools&Configurations/00/04_gitshortlog.png","hash":"d1344a7f48412470d1af81dc899fc88cdaee9297","modified":1701036970699},{"_id":"public/assets/iOS/Tools&Configurations/01/05.png","hash":"42312fa033315349aefbcb1561a60f96bf3b15bc","modified":1701036970699},{"_id":"public/assets/iOS/Tools&Configurations/01/07.png","hash":"2e62491396f9822c95e73d3fbcb4f9a4ad8a644c","modified":1701036970699},{"_id":"public/css/rtl.css","hash":"9589fac02a34fd9084f805f801889028756bbb65","modified":1701036970699},{"_id":"public/js/main.js","hash":"9eb41deaf7d743b60a30ca1b1ffe050128ce9d2c","modified":1701036970699},{"_id":"public/js/search.js","hash":"914a2ce72fb325106c61600200be823b72bfb39f","modified":1701036970699},{"_id":"public/lib/clipboard/clipboard.min.js","hash":"9a7cb405f9beed005891587d41f76a0720893ffc","modified":1701036970699},{"_id":"public/lib/vazir-font/font-face.css","hash":"ba0030e1cd28a8caa7a5bb74b98da7c7bb185c90","modified":1701036970699},{"_id":"public/lib/justified-gallery/css/justifiedGallery.min.css","hash":"dd3052149d3054f35efb823c68dd78e78aad5875","modified":1701036970699},{"_id":"public/css/style.css","hash":"41517d782066fad851005c236943a96d3d6c5d2e","modified":1701036970699},{"_id":"public/lib/jquery/jquery.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1701036970699},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"caf0d708f7fbeb4638ab3df16e47b5c54881f093","modified":1701036970699},{"_id":"public/lib/justified-gallery/js/jquery.justifiedGallery.min.js","hash":"ad8f48b4022498078b089fcdd1e8b47faf496931","modified":1701036970699},{"_id":"public/images/logo.png","hash":"0e3029251dfda26adee2761f71377297e8c26871","modified":1701036970699},{"_id":"public/assets/Demo/wallpaper-2572384.jpg","hash":"1df3620ab8c69fe2498a746f8ead057162df0637","modified":1701036970699},{"_id":"public/assets/iOS/Memory&Performance&Stability/002.jpeg","hash":"4344a70e74ddc793e34c2f90f1a56fda8e14143c","modified":1701036970699},{"_id":"public/assets/iOS/Tools&Configurations/00/05_gitshow.png","hash":"4a24cc835c65908ea8471c0e0d911755e703152f","modified":1701036970699},{"_id":"public/assets/iOS/Tools&Configurations/01/04.png","hash":"94d1928510a51570b73f4af1db9a91b3354395bc","modified":1701036970699},{"_id":"public/assets/iOS/Tools&Configurations/01/06.png","hash":"cf8d2065bfcec655b306dd231ebdbef202f04884","modified":1701036970699},{"_id":"public/assets/iOS/Tools&Configurations/01/03.png","hash":"b6155767fac645c1f4c46026945e0efba03cb70f","modified":1701036970699},{"_id":"public/assets/iOS/Tools&Configurations/01/02.png","hash":"22e078fe9f1b5a3a0aa66f9d461beb189b74a66e","modified":1701036970699},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"20bd663830188cbadd2264e1daf9497c3ffc3621","modified":1701036970699},{"_id":"public/assets/iOS/Tools&Configurations/00/07_gitreflog.png","hash":"36980ba1fd5d77a987c565e0c05dce772040080c","modified":1701036970699},{"_id":"public/assets/iOS/Tools&Configurations/01/01.png","hash":"d8a7ebc93e803179a8ce67ce9235eea2a1d4952e","modified":1701036970699},{"_id":"public/lib/meslo-LG/MesloLGL-Italic.ttf","hash":"96c97a0a098ca40802f948ae56fa37aa6683d034","modified":1701036970699},{"_id":"public/lib/meslo-LG/MesloLGM-Italic.ttf","hash":"68700db02debd4b922304134da83b829cbfddfc9","modified":1701036970699},{"_id":"public/assets/iOS/Projects&Issues/002.png","hash":"02366cf5046a2d4ea2c6099a9a7b8c1257a3a467","modified":1701036970699},{"_id":"public/lib/meslo-LG/MesloLGS-Italic.ttf","hash":"7f7cdbdcc26279c04046632e22d872f111bc9399","modified":1701036970699},{"_id":"public/assets/iOS/Tools&Configurations/01/00.png","hash":"2c2d52d5e8779debf98685bf857c03d2431f5df8","modified":1701036970699},{"_id":"public/lib/meslo-LG/MesloLGL-BoldItalic.ttf","hash":"a9a431fc7a6c3a67c98021d4035c12a07a4f1070","modified":1701036970699},{"_id":"public/lib/meslo-LG/MesloLGL-Bold.ttf","hash":"bfa1ed9a263ed78462f06d322de13bd5bd0906b2","modified":1701036970699},{"_id":"public/lib/meslo-LG/MesloLGL-Regular.ttf","hash":"2b912dd13f052f645ee19951604610bb350d50af","modified":1701036970699},{"_id":"public/lib/meslo-LG/MesloLGM-Bold.ttf","hash":"a8a8df3393bccc365335fc5eb0a62a6b7ccd32b9","modified":1701036970699},{"_id":"public/lib/meslo-LG/MesloLGS-BoldItalic.ttf","hash":"d895a1bd25e36c58b7f463ebe14de09f186d5ab4","modified":1701036970699},{"_id":"public/lib/meslo-LG/MesloLGM-BoldItalic.ttf","hash":"65ddb11e75ee93909e845ab912a36717c48f1c94","modified":1701036970699},{"_id":"public/assets/Demo/wallpaper-878514.jpg","hash":"9f9705a377c42320b335b3c66b023e62b80e56e3","modified":1701036970699},{"_id":"public/lib/meslo-LG/MesloLGM-Regular.ttf","hash":"5e220152adefe905b2197f873d7cee99eca50e91","modified":1701036970699},{"_id":"public/lib/meslo-LG/MesloLGS-Regular.ttf","hash":"56fa0e33a390b704afc56af93a31576ccdbbdd9e","modified":1701036970699},{"_id":"public/lib/meslo-LG/MesloLGS-Bold.ttf","hash":"df202ce09cbdc70bc16b81983a13ef0f94e46f10","modified":1701036970699},{"_id":"public/assets/iOS/Projects&Issues/001.png","hash":"d473a4e920e7949114353502452faab5c01e701d","modified":1701036970699},{"_id":"public/assets/iOS/Projects&Issues/006.png","hash":"1be67b3e0b76bcd8c7f8aeb3c0854d4ff5670f0a","modified":1701036970699},{"_id":"public/assets/Demo/wallpaper-2311325.jpg","hash":"ddaaaeb4fa04a05c83053c1f8149720d18c9c8de","modified":1701036970699},{"_id":"public/assets/iOS/Tools&Configurations/00/06_gitblame.png","hash":"f69f357d37d4285a0bfbadb4c6780738ede38eca","modified":1701036970699},{"_id":"public/assets/iOS/Projects&Issues/005.png","hash":"335f189a09bc9dc6c13af7e9bb864bae05435739","modified":1701036970699}],"Category":[{"name":"Others","_id":"clpg1hr4h0009vu0m1zh9ccvi"},{"name":"SwiftUI","_id":"clpg1hr4j000dvu0mfiaj0oxg"},{"name":"Reactive Programming","_id":"clpg1hr4s000yvu0m8otl9u0c"},{"name":"01. Combine","parent":"clpg1hr4s000yvu0m8otl9u0c","_id":"clpg1hr560021vu0mb6p22kjb"},{"name":"00. RxSwift","parent":"clpg1hr4s000yvu0m8otl9u0c","_id":"clpg1hr580026vu0makxxh67j"},{"name":"Swift","_id":"clpg1hr59002avu0mh764gd23"},{"name":"01. Tips","parent":"clpg1hr59002avu0mh764gd23","_id":"clpg1hr6e006hvu0magsv779s"},{"name":"00. Fundamental Concepts","parent":"clpg1hr59002avu0mh764gd23","_id":"clpg1hr6e006lvu0m0ek03tcx"},{"name":"03. Structs","parent":"clpg1hr59002avu0mh764gd23","_id":"clpg1hr6f006tvu0m4ayzbuom"},{"name":"02. Closures","parent":"clpg1hr59002avu0mh764gd23","_id":"clpg1hr6k007svu0mdw5b6yqk"},{"name":"04. Enumerations","parent":"clpg1hr59002avu0mh764gd23","_id":"clpg1hr6m0085vu0m3giw4cz8"},{"name":"05. Protocols","parent":"clpg1hr59002avu0mh764gd23","_id":"clpg1hr6r008vvu0mczjx0x5u"},{"name":"06. Collections","parent":"clpg1hr59002avu0mh764gd23","_id":"clpg1hr6s0099vu0m4wrseoop"},{"name":"07. Concurrency","parent":"clpg1hr59002avu0mh764gd23","_id":"clpg1hr6t009ivu0mg8s40aoo"},{"name":"08. Hybrid Programming","parent":"clpg1hr59002avu0mh764gd23","_id":"clpg1hr7000aqvu0m17hocjwi"},{"name":"iOS","_id":"clpg1hr7100azvu0m25tg36ah"},{"name":"00. Tips","parent":"clpg1hr7100azvu0m25tg36ah","_id":"clpg1hr7e00d7vu0m6c517534"},{"name":"01. Memory & Performance & Stability","parent":"clpg1hr7100azvu0m25tg36ah","_id":"clpg1hr7f00dhvu0mbdny3r35"},{"name":"04. Tools & Configurations","parent":"clpg1hr7100azvu0m25tg36ah","_id":"clpg1hr7g00dwvu0m2bww41tp"},{"name":"05. Projects & Issues","parent":"clpg1hr7100azvu0m25tg36ah","_id":"clpg1hr7h00e6vu0m4n98fjcq"},{"name":"06. Others","parent":"clpg1hr7100azvu0m25tg36ah","_id":"clpg1hr7u00fdvu0mhnzx94uf"}],"Data":[],"Page":[{"title":"About","date":"2023-08-14T19:49:14.000Z","type":"about","_content":"\n<font size=4>**1. Contact information:**</font>     \n① Email:    \n**zitao.li0206@gmail.com**   \n② WeChat Official Account:    \n<font size=4>**ios_hunter**</font>\nNote: It contains the latest accumulation of Chinese technology.\n③ Other Chinese blog:    \n**https://blog.csdn.net/lizitao**  \n<!--Or you can scan with WeChat directly:     -->\n<!--<image src=\"images/qrcode.bmp\">  -->\n\n\n\n<font size=4>**2. Level Up**</font>  \n<font size=4>Already: **200+2+3** hours</font>  \n<font size=4>Senior: **1,000** hours, Percentage: **200/1,000 = 20%**</font>        \n<font size=4>Expert: **5,000** hours, Percentage: **200/10,000 = 4%**</font>         \n<font size=4>Master: **10,000** hours, Percentage: **200/10,000 = 1%**</font>         \nThe time ends at 2023-08-29.\n\n\n\n","source":"about/index.md","raw":"---\ntitle: About\ndate: 2023-08-14 21:49:14\ntype: about\n---\n\n<font size=4>**1. Contact information:**</font>     \n① Email:    \n**zitao.li0206@gmail.com**   \n② WeChat Official Account:    \n<font size=4>**ios_hunter**</font>\nNote: It contains the latest accumulation of Chinese technology.\n③ Other Chinese blog:    \n**https://blog.csdn.net/lizitao**  \n<!--Or you can scan with WeChat directly:     -->\n<!--<image src=\"images/qrcode.bmp\">  -->\n\n\n\n<font size=4>**2. Level Up**</font>  \n<font size=4>Already: **200+2+3** hours</font>  \n<font size=4>Senior: **1,000** hours, Percentage: **200/1,000 = 20%**</font>        \n<font size=4>Expert: **5,000** hours, Percentage: **200/10,000 = 4%**</font>         \n<font size=4>Master: **10,000** hours, Percentage: **200/10,000 = 1%**</font>         \nThe time ends at 2023-08-29.\n\n\n\n","updated":"2023-08-29T13:05:57.019Z","path":"about/index.html","comments":1,"layout":"page","_id":"clpg1hr480000vu0m7d2x82km","content":"<p><font size=4><strong>1. Contact information:</strong></font><br>① Email:<br><strong><a href=\"mailto:&#x7a;&#105;&#x74;&#97;&#111;&#x2e;&#x6c;&#105;&#x30;&#50;&#48;&#x36;&#x40;&#x67;&#109;&#x61;&#105;&#x6c;&#46;&#x63;&#x6f;&#109;\">&#x7a;&#105;&#x74;&#97;&#111;&#x2e;&#x6c;&#105;&#x30;&#50;&#48;&#x36;&#x40;&#x67;&#109;&#x61;&#105;&#x6c;&#46;&#x63;&#x6f;&#109;</a></strong><br>② WeChat Official Account:<br><font size=4><strong>ios_hunter</strong></font><br>Note: It contains the latest accumulation of Chinese technology.<br>③ Other Chinese blog:<br><strong><a href=\"https://blog.csdn.net/lizitao\">https://blog.csdn.net/lizitao</a></strong>  </p>\n<!--Or you can scan with WeChat directly:     -->\n<!--<image src=\"images/qrcode.bmp\">  -->\n\n\n\n<p><font size=4><strong>2. Level Up</strong></font><br><font size=4>Already: <strong>200+2+3</strong> hours</font><br><font size=4>Senior: <strong>1,000</strong> hours, Percentage: <strong>200&#x2F;1,000 &#x3D; 20%</strong></font><br><font size=4>Expert: <strong>5,000</strong> hours, Percentage: <strong>200&#x2F;10,000 &#x3D; 4%</strong></font><br><font size=4>Master: <strong>10,000</strong> hours, Percentage: <strong>200&#x2F;10,000 &#x3D; 1%</strong></font><br>The time ends at 2023-08-29.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><font size=4><strong>1. Contact information:</strong></font><br>① Email:<br><strong><a href=\"mailto:&#x7a;&#105;&#x74;&#97;&#111;&#x2e;&#x6c;&#105;&#x30;&#50;&#48;&#x36;&#x40;&#x67;&#109;&#x61;&#105;&#x6c;&#46;&#x63;&#x6f;&#109;\">&#x7a;&#105;&#x74;&#97;&#111;&#x2e;&#x6c;&#105;&#x30;&#50;&#48;&#x36;&#x40;&#x67;&#109;&#x61;&#105;&#x6c;&#46;&#x63;&#x6f;&#109;</a></strong><br>② WeChat Official Account:<br><font size=4><strong>ios_hunter</strong></font><br>Note: It contains the latest accumulation of Chinese technology.<br>③ Other Chinese blog:<br><strong><a href=\"https://blog.csdn.net/lizitao\">https://blog.csdn.net/lizitao</a></strong>  </p>\n<!--Or you can scan with WeChat directly:     -->\n<!--<image src=\"images/qrcode.bmp\">  -->\n\n\n\n<p><font size=4><strong>2. Level Up</strong></font><br><font size=4>Already: <strong>200+2+3</strong> hours</font><br><font size=4>Senior: <strong>1,000</strong> hours, Percentage: <strong>200&#x2F;1,000 &#x3D; 20%</strong></font><br><font size=4>Expert: <strong>5,000</strong> hours, Percentage: <strong>200&#x2F;10,000 &#x3D; 4%</strong></font><br><font size=4>Master: <strong>10,000</strong> hours, Percentage: <strong>200&#x2F;10,000 &#x3D; 1%</strong></font><br>The time ends at 2023-08-29.</p>\n"},{"title":"Search","date":"2023-08-14T20:12:21.000Z","type":"search","_content":"","source":"search/index.md","raw":"---\ntitle: Search\ndate: 2023-08-14 22:12:21\ntype: search\n---\n","updated":"2023-08-14T20:12:58.970Z","path":"search/index.html","comments":1,"layout":"page","_id":"clpg1hr4d0002vu0mbipg6zjc","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Categories","date":"2023-08-14T19:47:40.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: Categories\ndate: 2023-08-14 21:47:40\ntype: categories\n---\n","updated":"2023-08-14T20:13:11.587Z","path":"categories/index.html","comments":1,"layout":"page","_id":"clpg1hr4e0004vu0m19y69rz2","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Tags","date":"2023-08-14T20:23:33.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: Tags\ndate: 2023-08-14 22:23:33\ntype: tags\n---\n","updated":"2023-08-14T20:24:53.854Z","path":"tags/index.html","comments":1,"layout":"page","_id":"clpg1hr4g0007vu0me925crmx","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"draft1","_content":"","source":"_drafts/draft1.md","raw":"---\ntitle: draft1\ntags:\n---\n","slug":"draft1","published":0,"date":"2023-08-15T06:43:03.313Z","updated":"2023-08-15T06:43:03.313Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr4b0001vu0mgeq2fbyu","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"00. Article publishing failure problem summary","date":"2023-01-15T13:00:00.000Z","_content":"\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nHere is a summary of all the possible reasons for publishing failure in Hexo.\n\n#### <font size=5 color=#4169E1>1. Header information is incorrect</font> \n\n<font size=4>**1.1 Header format**</font>  \n\nPlease strictly follow the header format:\n```Swift \n---\ntitle: 00. Article publishing failure problem summary\ndate: 2023-01-15 14:00:00\ncategories: \n- [Others, 00. others]\ntags:\n- hexo\n- configuration\n- tool\n---\n```\n**Note:**   \n**After the second ``` there is no space.**  \n\n<font size=4>**1.2 Note**</font>  \n\n**Note:**   \n**There are no empty lines in the first row.**   \n**All the keywords 'title','date','categories','tags' must be in lower case.**\n\n\n#### <font size=5 color=#4169E1>2. Picture does not show</font> \n\n\n\nThe correct image format is as follows:   \n{% img /assets/Demo/wallpaper-2311325.jpg %}    \n{% img /assets/Demo/wallpaper-878514.jpg %}\n\n\n#### <font size=5 color=#4169E1>3. Change the font</font> \nOn the basis of this article below:       \nhttps://blog.csdn.net/Reinhart_L/article/details/122587975       \n(1) Enter. / themes/cactus/source/CSS / _variables styl, can change the font;   \n(2) The available fonts are in . /themes/cactus/source/lib/, cactus comes with only two kinds of 'meslo-LG' and 'vazir-font', you can download them yourself if you need.\n\n#### <font size=5 color=#4169E1>4. Opening a link doesn't make it jump, it downloads it instead.</font> \nThe name of your article cannot contain '?', and you had better also not contain other special characters for insurance.\nBut, you can contain '?' in your article title.\n\n#### <font size=5 color=gray>*Reference*</font>\n[1] https://ohmyswift.com/blog/2020/01/10/why-should-we-avoid-using-closures-in-swift-structs/\n[2] https://github.com/probberechts/hexo-theme-cactus\n","source":"_posts/Others/00. Article publishing failure problem summary.md","raw":"---\ntitle: 00. Article publishing failure problem summary\ndate: 2023-01-15 14:00:00\ncategories: \n- [Others]\ntags:\n- hexo\n- configuration\n- tool\n---\n\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nHere is a summary of all the possible reasons for publishing failure in Hexo.\n\n#### <font size=5 color=#4169E1>1. Header information is incorrect</font> \n\n<font size=4>**1.1 Header format**</font>  \n\nPlease strictly follow the header format:\n```Swift \n---\ntitle: 00. Article publishing failure problem summary\ndate: 2023-01-15 14:00:00\ncategories: \n- [Others, 00. others]\ntags:\n- hexo\n- configuration\n- tool\n---\n```\n**Note:**   \n**After the second ``` there is no space.**  \n\n<font size=4>**1.2 Note**</font>  \n\n**Note:**   \n**There are no empty lines in the first row.**   \n**All the keywords 'title','date','categories','tags' must be in lower case.**\n\n\n#### <font size=5 color=#4169E1>2. Picture does not show</font> \n\n\n\nThe correct image format is as follows:   \n{% img /assets/Demo/wallpaper-2311325.jpg %}    \n{% img /assets/Demo/wallpaper-878514.jpg %}\n\n\n#### <font size=5 color=#4169E1>3. Change the font</font> \nOn the basis of this article below:       \nhttps://blog.csdn.net/Reinhart_L/article/details/122587975       \n(1) Enter. / themes/cactus/source/CSS / _variables styl, can change the font;   \n(2) The available fonts are in . /themes/cactus/source/lib/, cactus comes with only two kinds of 'meslo-LG' and 'vazir-font', you can download them yourself if you need.\n\n#### <font size=5 color=#4169E1>4. Opening a link doesn't make it jump, it downloads it instead.</font> \nThe name of your article cannot contain '?', and you had better also not contain other special characters for insurance.\nBut, you can contain '?' in your article title.\n\n#### <font size=5 color=gray>*Reference*</font>\n[1] https://ohmyswift.com/blog/2020/01/10/why-should-we-avoid-using-closures-in-swift-structs/\n[2] https://github.com/probberechts/hexo-theme-cactus\n","slug":"Others/00. Article publishing failure problem summary","published":1,"updated":"2023-11-07T15:39:55.009Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr4d0003vu0ma3uc2p00","content":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>Here is a summary of all the possible reasons for publishing failure in Hexo.</p>\n<h4 id=\"1-Header-information-is-incorrect\"><a href=\"#1-Header-information-is-incorrect\" class=\"headerlink\" title=\"1. Header information is incorrect\"></a><font size=5 color=#4169E1>1. Header information is incorrect</font></h4><p><font size=4><strong>1.1 Header format</strong></font>  </p>\n<p>Please strictly follow the header format:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">---</span></span><br><span class=\"line\">title: <span class=\"number\">00</span>. <span class=\"type\">Article</span> publishing failure problem summary</span><br><span class=\"line\">date: <span class=\"number\">2023</span><span class=\"operator\">-</span><span class=\"number\">01</span><span class=\"operator\">-</span><span class=\"number\">15</span> <span class=\"number\">14</span>:<span class=\"number\">00</span>:<span class=\"number\">00</span></span><br><span class=\"line\">categories: </span><br><span class=\"line\"><span class=\"operator\">-</span> [<span class=\"type\">Others</span>, <span class=\"number\">00</span>. others]</span><br><span class=\"line\">tags:</span><br><span class=\"line\"><span class=\"operator\">-</span> hexo</span><br><span class=\"line\"><span class=\"operator\">-</span> configuration</span><br><span class=\"line\"><span class=\"operator\">-</span> tool</span><br><span class=\"line\"><span class=\"operator\">---</span></span><br></pre></td></tr></table></figure>\n<p><strong>Note:</strong><br><strong>After the second &#96;&#96;&#96; there is no space.</strong>  </p>\n<p><font size=4><strong>1.2 Note</strong></font>  </p>\n<p><strong>Note:</strong><br><strong>There are no empty lines in the first row.</strong><br><strong>All the keywords ‘title’,’date’,’categories’,’tags’ must be in lower case.</strong></p>\n<h4 id=\"2-Picture-does-not-show\"><a href=\"#2-Picture-does-not-show\" class=\"headerlink\" title=\"2. Picture does not show\"></a><font size=5 color=#4169E1>2. Picture does not show</font></h4><p>The correct image format is as follows:   </p>\n<img src=\"/assets/Demo/wallpaper-2311325.jpg\" class=\"\">    \n<img src=\"/assets/Demo/wallpaper-878514.jpg\" class=\"\">\n\n\n<h4 id=\"3-Change-the-font\"><a href=\"#3-Change-the-font\" class=\"headerlink\" title=\"3. Change the font\"></a><font size=5 color=#4169E1>3. Change the font</font></h4><p>On the basis of this article below:<br><a href=\"https://blog.csdn.net/Reinhart_L/article/details/122587975\">https://blog.csdn.net/Reinhart_L/article/details/122587975</a><br>(1) Enter. &#x2F; themes&#x2F;cactus&#x2F;source&#x2F;CSS &#x2F; _variables styl, can change the font;<br>(2) The available fonts are in . &#x2F;themes&#x2F;cactus&#x2F;source&#x2F;lib&#x2F;, cactus comes with only two kinds of ‘meslo-LG’ and ‘vazir-font’, you can download them yourself if you need.</p>\n<h4 id=\"4-Opening-a-link-doesn’t-make-it-jump-it-downloads-it-instead\"><a href=\"#4-Opening-a-link-doesn’t-make-it-jump-it-downloads-it-instead\" class=\"headerlink\" title=\"4. Opening a link doesn’t make it jump, it downloads it instead.\"></a><font size=5 color=#4169E1>4. Opening a link doesn’t make it jump, it downloads it instead.</font></h4><p>The name of your article cannot contain ‘?’, and you had better also not contain other special characters for insurance.<br>But, you can contain ‘?’ in your article title.</p>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=5 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://ohmyswift.com/blog/2020/01/10/why-should-we-avoid-using-closures-in-swift-structs/\">https://ohmyswift.com/blog/2020/01/10/why-should-we-avoid-using-closures-in-swift-structs/</a><br>[2] <a href=\"https://github.com/probberechts/hexo-theme-cactus\">https://github.com/probberechts/hexo-theme-cactus</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>Here is a summary of all the possible reasons for publishing failure in Hexo.</p>\n<h4 id=\"1-Header-information-is-incorrect\"><a href=\"#1-Header-information-is-incorrect\" class=\"headerlink\" title=\"1. Header information is incorrect\"></a><font size=5 color=#4169E1>1. Header information is incorrect</font></h4><p><font size=4><strong>1.1 Header format</strong></font>  </p>\n<p>Please strictly follow the header format:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">---</span></span><br><span class=\"line\">title: <span class=\"number\">00</span>. <span class=\"type\">Article</span> publishing failure problem summary</span><br><span class=\"line\">date: <span class=\"number\">2023</span><span class=\"operator\">-</span><span class=\"number\">01</span><span class=\"operator\">-</span><span class=\"number\">15</span> <span class=\"number\">14</span>:<span class=\"number\">00</span>:<span class=\"number\">00</span></span><br><span class=\"line\">categories: </span><br><span class=\"line\"><span class=\"operator\">-</span> [<span class=\"type\">Others</span>, <span class=\"number\">00</span>. others]</span><br><span class=\"line\">tags:</span><br><span class=\"line\"><span class=\"operator\">-</span> hexo</span><br><span class=\"line\"><span class=\"operator\">-</span> configuration</span><br><span class=\"line\"><span class=\"operator\">-</span> tool</span><br><span class=\"line\"><span class=\"operator\">---</span></span><br></pre></td></tr></table></figure>\n<p><strong>Note:</strong><br><strong>After the second &#96;&#96;&#96; there is no space.</strong>  </p>\n<p><font size=4><strong>1.2 Note</strong></font>  </p>\n<p><strong>Note:</strong><br><strong>There are no empty lines in the first row.</strong><br><strong>All the keywords ‘title’,’date’,’categories’,’tags’ must be in lower case.</strong></p>\n<h4 id=\"2-Picture-does-not-show\"><a href=\"#2-Picture-does-not-show\" class=\"headerlink\" title=\"2. Picture does not show\"></a><font size=5 color=#4169E1>2. Picture does not show</font></h4><p>The correct image format is as follows:   </p>\n<img src=\"/assets/Demo/wallpaper-2311325.jpg\" class=\"\">    \n<img src=\"/assets/Demo/wallpaper-878514.jpg\" class=\"\">\n\n\n<h4 id=\"3-Change-the-font\"><a href=\"#3-Change-the-font\" class=\"headerlink\" title=\"3. Change the font\"></a><font size=5 color=#4169E1>3. Change the font</font></h4><p>On the basis of this article below:<br><a href=\"https://blog.csdn.net/Reinhart_L/article/details/122587975\">https://blog.csdn.net/Reinhart_L/article/details/122587975</a><br>(1) Enter. &#x2F; themes&#x2F;cactus&#x2F;source&#x2F;CSS &#x2F; _variables styl, can change the font;<br>(2) The available fonts are in . &#x2F;themes&#x2F;cactus&#x2F;source&#x2F;lib&#x2F;, cactus comes with only two kinds of ‘meslo-LG’ and ‘vazir-font’, you can download them yourself if you need.</p>\n<h4 id=\"4-Opening-a-link-doesn’t-make-it-jump-it-downloads-it-instead\"><a href=\"#4-Opening-a-link-doesn’t-make-it-jump-it-downloads-it-instead\" class=\"headerlink\" title=\"4. Opening a link doesn’t make it jump, it downloads it instead.\"></a><font size=5 color=#4169E1>4. Opening a link doesn’t make it jump, it downloads it instead.</font></h4><p>The name of your article cannot contain ‘?’, and you had better also not contain other special characters for insurance.<br>But, you can contain ‘?’ in your article title.</p>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=5 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://ohmyswift.com/blog/2020/01/10/why-should-we-avoid-using-closures-in-swift-structs/\">https://ohmyswift.com/blog/2020/01/10/why-should-we-avoid-using-closures-in-swift-structs/</a><br>[2] <a href=\"https://github.com/probberechts/hexo-theme-cactus\">https://github.com/probberechts/hexo-theme-cactus</a></p>\n"},{"title":"00. SwiftUI vs UIKit","date":"2023-09-02T20:00:00.000Z","_content":"\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nJust as we struggled with whether or not to embrace Swift, are many people today struggling with whether or not to embrace SwiftUI. Then I can tell you very clearly that if you choose to embrace Swift, then SwiftUI is a hurdle you won't be able to get past sooner or later! Take my advice, it's not too late to embrace SwiftUI, you'll find more and more hiring JD's asking for SwiftUI. I've also been learning SwiftUI on my own lately, and I'm going to be writing a series of posts about SwiftUI, so let's start with this one on SwiftUI vs UIKit and why we're going to go with SwiftUI.\n\n\n#### <font size=3 color=#4169E1>1. UIKit</font> \n\nUIKit was publicly released in 2008 and is built on the object-oriented Objective-C language. In UIKit, all views inherit from a class called UIView, which has a very large number of properties and methods-such as background, layout, layers for rendering, and so on-there are almost 200 properties, and every UIView and subclass of UIView, whether you want it or not, will have Every UIView and subclass of UIView will have these properties whether you want them or not. \n\nFor example, there is a special UIStackView in UIKit, which is a view type that will not be rendered for the design intent of making layouts simpler. But because of the inheritance mechanism, even though it doesn't render, it has those various unused properties including background color. \n\nSo, in UIKit, when we draw a UI that contains a series of labels/buttons, etc., it's a stack of \"big\" and \"heavy\" Views that contain more than 200 attributes.\n\n#### <font size=3 color=#4169E1>2. SwiftUI</font> \n\nBorn in 2019, SwiftUI is a modern framework for building user interfaces introduced by Apple. As new devices evolve in terms of processing power, graphics performance, and other technical features, SwiftUI takes full advantage of these new hardware and technical capabilities, optimizing and tuning the underlying implementation so that apps running on new devices can render interfaces, handle user interactions, and deliver smoother animations and effects more efficiently.\n\nSwiftUI is based on responsive programming approach to UI development, all the views are fine-grained structure struct, compared struct and class can be known, Swift is very much advocate the use of struct, the specific why will not expand.  In SwiftUI, each view is a lightweight struct structure, which abandons UIKit's inheritance approach and uses protocols to contain the few properties and modifiers needed. All in all, SwiftUI is much more performant and faster than UIKit, with less overhead for creating the same view.\n\nIn addition, SwiftUI provides a number of keywords like State, which not only allows us to write less code, but also allows us to focus more on the UI changes caused by value changes in responsive programming thinking. Since class can freely modify the value of attributes, which may bring complicated logic, in contrast, struct under the SwiftUI development of UI code is more \"independent\" (many of the capabilities it has also provided you, do not need to build the wheel again)\n\n#### <font size=3 color=#4169E1>3. Final Thoughts </font> \n\nBecause SwiftUI will only come out in 2019, compatibility for previous iOS versions is expected to be a bit of a problem. Because UIKit has been developed for many years, SwiftUI has not been as powerful as UIKit third-party libraries, but it is only a matter of time. And Apple in order to be compatible with some of the methods used, such as UIHostingController. read a lot of foreign articles, many of them developers are very clear point: SwiftUI will eventually replace UIKit, and UIKit will eventually be abandoned.\n\n#### <font size=3 color=#4169E1>4. Recommended Learning Resources: </font> \n1. Apple Official:   \n[1] https://developer.apple.com/tutorials/swiftui  \n[2] https://developer.apple.com/documentation/SwiftUI/View-fundamentals\n2. Hackingwithswift Series:  \n[1] https://www.hackingwithswift.com/books/ios-swiftui/\n3. SwiftfulThinking Series:    \n[1] https://www.youtube.com/playlist?list=PLwvDm4VfkdphqETTBf-DdjCoAvhai1QpO   \n[2] https://www.bilibili.com/video/BV1KY411f7in   \n[3] https://github.com/SwiftfulThinking   \n\n","source":"_posts/SwiftUI/00. SwiftUI vs UIKit.md","raw":"---\ntitle: 00. SwiftUI vs UIKit\ndate: 2023-09-02 22:00:00\ncategories: \n- [SwiftUI]\ntags:\n- SwiftUI\n- UIKit\n---\n\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nJust as we struggled with whether or not to embrace Swift, are many people today struggling with whether or not to embrace SwiftUI. Then I can tell you very clearly that if you choose to embrace Swift, then SwiftUI is a hurdle you won't be able to get past sooner or later! Take my advice, it's not too late to embrace SwiftUI, you'll find more and more hiring JD's asking for SwiftUI. I've also been learning SwiftUI on my own lately, and I'm going to be writing a series of posts about SwiftUI, so let's start with this one on SwiftUI vs UIKit and why we're going to go with SwiftUI.\n\n\n#### <font size=3 color=#4169E1>1. UIKit</font> \n\nUIKit was publicly released in 2008 and is built on the object-oriented Objective-C language. In UIKit, all views inherit from a class called UIView, which has a very large number of properties and methods-such as background, layout, layers for rendering, and so on-there are almost 200 properties, and every UIView and subclass of UIView, whether you want it or not, will have Every UIView and subclass of UIView will have these properties whether you want them or not. \n\nFor example, there is a special UIStackView in UIKit, which is a view type that will not be rendered for the design intent of making layouts simpler. But because of the inheritance mechanism, even though it doesn't render, it has those various unused properties including background color. \n\nSo, in UIKit, when we draw a UI that contains a series of labels/buttons, etc., it's a stack of \"big\" and \"heavy\" Views that contain more than 200 attributes.\n\n#### <font size=3 color=#4169E1>2. SwiftUI</font> \n\nBorn in 2019, SwiftUI is a modern framework for building user interfaces introduced by Apple. As new devices evolve in terms of processing power, graphics performance, and other technical features, SwiftUI takes full advantage of these new hardware and technical capabilities, optimizing and tuning the underlying implementation so that apps running on new devices can render interfaces, handle user interactions, and deliver smoother animations and effects more efficiently.\n\nSwiftUI is based on responsive programming approach to UI development, all the views are fine-grained structure struct, compared struct and class can be known, Swift is very much advocate the use of struct, the specific why will not expand.  In SwiftUI, each view is a lightweight struct structure, which abandons UIKit's inheritance approach and uses protocols to contain the few properties and modifiers needed. All in all, SwiftUI is much more performant and faster than UIKit, with less overhead for creating the same view.\n\nIn addition, SwiftUI provides a number of keywords like State, which not only allows us to write less code, but also allows us to focus more on the UI changes caused by value changes in responsive programming thinking. Since class can freely modify the value of attributes, which may bring complicated logic, in contrast, struct under the SwiftUI development of UI code is more \"independent\" (many of the capabilities it has also provided you, do not need to build the wheel again)\n\n#### <font size=3 color=#4169E1>3. Final Thoughts </font> \n\nBecause SwiftUI will only come out in 2019, compatibility for previous iOS versions is expected to be a bit of a problem. Because UIKit has been developed for many years, SwiftUI has not been as powerful as UIKit third-party libraries, but it is only a matter of time. And Apple in order to be compatible with some of the methods used, such as UIHostingController. read a lot of foreign articles, many of them developers are very clear point: SwiftUI will eventually replace UIKit, and UIKit will eventually be abandoned.\n\n#### <font size=3 color=#4169E1>4. Recommended Learning Resources: </font> \n1. Apple Official:   \n[1] https://developer.apple.com/tutorials/swiftui  \n[2] https://developer.apple.com/documentation/SwiftUI/View-fundamentals\n2. Hackingwithswift Series:  \n[1] https://www.hackingwithswift.com/books/ios-swiftui/\n3. SwiftfulThinking Series:    \n[1] https://www.youtube.com/playlist?list=PLwvDm4VfkdphqETTBf-DdjCoAvhai1QpO   \n[2] https://www.bilibili.com/video/BV1KY411f7in   \n[3] https://github.com/SwiftfulThinking   \n\n","slug":"SwiftUI/00. SwiftUI vs UIKit","published":1,"updated":"2023-09-06T12:33:20.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr4f0005vu0mbtmr9pf9","content":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>Just as we struggled with whether or not to embrace Swift, are many people today struggling with whether or not to embrace SwiftUI. Then I can tell you very clearly that if you choose to embrace Swift, then SwiftUI is a hurdle you won’t be able to get past sooner or later! Take my advice, it’s not too late to embrace SwiftUI, you’ll find more and more hiring JD’s asking for SwiftUI. I’ve also been learning SwiftUI on my own lately, and I’m going to be writing a series of posts about SwiftUI, so let’s start with this one on SwiftUI vs UIKit and why we’re going to go with SwiftUI.</p>\n<h4 id=\"1-UIKit\"><a href=\"#1-UIKit\" class=\"headerlink\" title=\"1. UIKit\"></a><font size=3 color=#4169E1>1. UIKit</font></h4><p>UIKit was publicly released in 2008 and is built on the object-oriented Objective-C language. In UIKit, all views inherit from a class called UIView, which has a very large number of properties and methods-such as background, layout, layers for rendering, and so on-there are almost 200 properties, and every UIView and subclass of UIView, whether you want it or not, will have Every UIView and subclass of UIView will have these properties whether you want them or not. </p>\n<p>For example, there is a special UIStackView in UIKit, which is a view type that will not be rendered for the design intent of making layouts simpler. But because of the inheritance mechanism, even though it doesn’t render, it has those various unused properties including background color. </p>\n<p>So, in UIKit, when we draw a UI that contains a series of labels&#x2F;buttons, etc., it’s a stack of “big” and “heavy” Views that contain more than 200 attributes.</p>\n<h4 id=\"2-SwiftUI\"><a href=\"#2-SwiftUI\" class=\"headerlink\" title=\"2. SwiftUI\"></a><font size=3 color=#4169E1>2. SwiftUI</font></h4><p>Born in 2019, SwiftUI is a modern framework for building user interfaces introduced by Apple. As new devices evolve in terms of processing power, graphics performance, and other technical features, SwiftUI takes full advantage of these new hardware and technical capabilities, optimizing and tuning the underlying implementation so that apps running on new devices can render interfaces, handle user interactions, and deliver smoother animations and effects more efficiently.</p>\n<p>SwiftUI is based on responsive programming approach to UI development, all the views are fine-grained structure struct, compared struct and class can be known, Swift is very much advocate the use of struct, the specific why will not expand.  In SwiftUI, each view is a lightweight struct structure, which abandons UIKit’s inheritance approach and uses protocols to contain the few properties and modifiers needed. All in all, SwiftUI is much more performant and faster than UIKit, with less overhead for creating the same view.</p>\n<p>In addition, SwiftUI provides a number of keywords like State, which not only allows us to write less code, but also allows us to focus more on the UI changes caused by value changes in responsive programming thinking. Since class can freely modify the value of attributes, which may bring complicated logic, in contrast, struct under the SwiftUI development of UI code is more “independent” (many of the capabilities it has also provided you, do not need to build the wheel again)</p>\n<h4 id=\"3-Final-Thoughts\"><a href=\"#3-Final-Thoughts\" class=\"headerlink\" title=\"3. Final Thoughts \"></a><font size=3 color=#4169E1>3. Final Thoughts </font></h4><p>Because SwiftUI will only come out in 2019, compatibility for previous iOS versions is expected to be a bit of a problem. Because UIKit has been developed for many years, SwiftUI has not been as powerful as UIKit third-party libraries, but it is only a matter of time. And Apple in order to be compatible with some of the methods used, such as UIHostingController. read a lot of foreign articles, many of them developers are very clear point: SwiftUI will eventually replace UIKit, and UIKit will eventually be abandoned.</p>\n<h4 id=\"4-Recommended-Learning-Resources\"><a href=\"#4-Recommended-Learning-Resources\" class=\"headerlink\" title=\"4. Recommended Learning Resources: \"></a><font size=3 color=#4169E1>4. Recommended Learning Resources: </font></h4><ol>\n<li>Apple Official:<br>[1] <a href=\"https://developer.apple.com/tutorials/swiftui\">https://developer.apple.com/tutorials/swiftui</a><br>[2] <a href=\"https://developer.apple.com/documentation/SwiftUI/View-fundamentals\">https://developer.apple.com/documentation/SwiftUI/View-fundamentals</a></li>\n<li>Hackingwithswift Series:<br>[1] <a href=\"https://www.hackingwithswift.com/books/ios-swiftui/\">https://www.hackingwithswift.com/books/ios-swiftui/</a></li>\n<li>SwiftfulThinking Series:<br>[1] <a href=\"https://www.youtube.com/playlist?list=PLwvDm4VfkdphqETTBf-DdjCoAvhai1QpO\">https://www.youtube.com/playlist?list=PLwvDm4VfkdphqETTBf-DdjCoAvhai1QpO</a><br>[2] <a href=\"https://www.bilibili.com/video/BV1KY411f7in\">https://www.bilibili.com/video/BV1KY411f7in</a><br>[3] <a href=\"https://github.com/SwiftfulThinking\">https://github.com/SwiftfulThinking</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>Just as we struggled with whether or not to embrace Swift, are many people today struggling with whether or not to embrace SwiftUI. Then I can tell you very clearly that if you choose to embrace Swift, then SwiftUI is a hurdle you won’t be able to get past sooner or later! Take my advice, it’s not too late to embrace SwiftUI, you’ll find more and more hiring JD’s asking for SwiftUI. I’ve also been learning SwiftUI on my own lately, and I’m going to be writing a series of posts about SwiftUI, so let’s start with this one on SwiftUI vs UIKit and why we’re going to go with SwiftUI.</p>\n<h4 id=\"1-UIKit\"><a href=\"#1-UIKit\" class=\"headerlink\" title=\"1. UIKit\"></a><font size=3 color=#4169E1>1. UIKit</font></h4><p>UIKit was publicly released in 2008 and is built on the object-oriented Objective-C language. In UIKit, all views inherit from a class called UIView, which has a very large number of properties and methods-such as background, layout, layers for rendering, and so on-there are almost 200 properties, and every UIView and subclass of UIView, whether you want it or not, will have Every UIView and subclass of UIView will have these properties whether you want them or not. </p>\n<p>For example, there is a special UIStackView in UIKit, which is a view type that will not be rendered for the design intent of making layouts simpler. But because of the inheritance mechanism, even though it doesn’t render, it has those various unused properties including background color. </p>\n<p>So, in UIKit, when we draw a UI that contains a series of labels&#x2F;buttons, etc., it’s a stack of “big” and “heavy” Views that contain more than 200 attributes.</p>\n<h4 id=\"2-SwiftUI\"><a href=\"#2-SwiftUI\" class=\"headerlink\" title=\"2. SwiftUI\"></a><font size=3 color=#4169E1>2. SwiftUI</font></h4><p>Born in 2019, SwiftUI is a modern framework for building user interfaces introduced by Apple. As new devices evolve in terms of processing power, graphics performance, and other technical features, SwiftUI takes full advantage of these new hardware and technical capabilities, optimizing and tuning the underlying implementation so that apps running on new devices can render interfaces, handle user interactions, and deliver smoother animations and effects more efficiently.</p>\n<p>SwiftUI is based on responsive programming approach to UI development, all the views are fine-grained structure struct, compared struct and class can be known, Swift is very much advocate the use of struct, the specific why will not expand.  In SwiftUI, each view is a lightweight struct structure, which abandons UIKit’s inheritance approach and uses protocols to contain the few properties and modifiers needed. All in all, SwiftUI is much more performant and faster than UIKit, with less overhead for creating the same view.</p>\n<p>In addition, SwiftUI provides a number of keywords like State, which not only allows us to write less code, but also allows us to focus more on the UI changes caused by value changes in responsive programming thinking. Since class can freely modify the value of attributes, which may bring complicated logic, in contrast, struct under the SwiftUI development of UI code is more “independent” (many of the capabilities it has also provided you, do not need to build the wheel again)</p>\n<h4 id=\"3-Final-Thoughts\"><a href=\"#3-Final-Thoughts\" class=\"headerlink\" title=\"3. Final Thoughts \"></a><font size=3 color=#4169E1>3. Final Thoughts </font></h4><p>Because SwiftUI will only come out in 2019, compatibility for previous iOS versions is expected to be a bit of a problem. Because UIKit has been developed for many years, SwiftUI has not been as powerful as UIKit third-party libraries, but it is only a matter of time. And Apple in order to be compatible with some of the methods used, such as UIHostingController. read a lot of foreign articles, many of them developers are very clear point: SwiftUI will eventually replace UIKit, and UIKit will eventually be abandoned.</p>\n<h4 id=\"4-Recommended-Learning-Resources\"><a href=\"#4-Recommended-Learning-Resources\" class=\"headerlink\" title=\"4. Recommended Learning Resources: \"></a><font size=3 color=#4169E1>4. Recommended Learning Resources: </font></h4><ol>\n<li>Apple Official:<br>[1] <a href=\"https://developer.apple.com/tutorials/swiftui\">https://developer.apple.com/tutorials/swiftui</a><br>[2] <a href=\"https://developer.apple.com/documentation/SwiftUI/View-fundamentals\">https://developer.apple.com/documentation/SwiftUI/View-fundamentals</a></li>\n<li>Hackingwithswift Series:<br>[1] <a href=\"https://www.hackingwithswift.com/books/ios-swiftui/\">https://www.hackingwithswift.com/books/ios-swiftui/</a></li>\n<li>SwiftfulThinking Series:<br>[1] <a href=\"https://www.youtube.com/playlist?list=PLwvDm4VfkdphqETTBf-DdjCoAvhai1QpO\">https://www.youtube.com/playlist?list=PLwvDm4VfkdphqETTBf-DdjCoAvhai1QpO</a><br>[2] <a href=\"https://www.bilibili.com/video/BV1KY411f7in\">https://www.bilibili.com/video/BV1KY411f7in</a><br>[3] <a href=\"https://github.com/SwiftfulThinking\">https://github.com/SwiftfulThinking</a></li>\n</ol>\n"},{"title":"01. Basic Concepts of SwiftUI (1)","date":"2023-09-03T12:00:00.000Z","_content":"\n\n<font color=gray size=2>*It will take about 5 minutes to finish reading this article.*</font>\n\nLet's start with a piece of SwiftUI code and its Canvas display as follows:  \n\n\n{% img /assets/SwiftUI/BasicConcepts/000.png %}\n\nExplain this code:\n```Swift\nimport SwiftUI\n\nstruct ContentView: View {\n    var body: some View {\n        Button(\"Hello, world!\") {\n        }\n        .background(.red)\n        .frame(width: 200, height: 200)\n    }\n}\n\n```\n\n(1) Create a ContentView structure and follow the View protocol. This means that ContentView is a view type and needs to implement the body property.    \n\n(2) The body attribute returns a some View type, which means that any view that conforms to the View protocol can be returned.\n\n(3) In the body, we have created a view that displays the text \"Hello World!\" using the Button view.    \n\n(4) Several modifiers are applied to the Button view to customize its appearance, such as background to set the background color and frame to set the size to 200*200.  \n\nHow does such a few lines of code accomplish the display of a view?\nIn fact, SwiftUI combines these views and modifiers to form a complete view hierarchy based on the view hierarchy structure and modifier chaining. SwiftUI converts the view hierarchy and modifier chain from the declarative description to the underlying rendering instructions. These rendering instructions are passed to the system, which then performs the actual drawing and rendering operations that are ultimately rendered on the screen. \n\nBelow we introduce a few concepts in conjunction with the code above.\n\n#### <font size=3 color=#4169E1>1. View Protocol</font> \n\nThe View protocol is one of the core protocols in SwiftUI that defines the fundamentals of building user interfaces and how to use them.The source code for the View protocol is as follows:\n\n```Swift\npublic protocol View {\n    associatedtype Body : View\n    @ViewBuilder var body: Self.Body { get }\n}\n```\n\nAs you can see from the source code, the View protocol has the following key features:\n\n'associatedtype Body: View' :    \nThe View protocol uses the associated type associatedtype, which means that types that follow the View protocol must specify a concrete type associated with the View. This concrete type is named Body and must also conform to the View protocol.\n\n'var body: Self.Body { get }' :   \nThe View protocol requires that followers must provide a computed property named body. This property returns a view type that is the previously defined association type Body.\n\nThe View protocol works by returning a specific view hierarchy via the body property. This view hierarchy can contain other views or components to form a complex user interface, and SwiftUI renders the final user interface based on this view hierarchy.\n\n#### <font size=3 color=#4169E1>2. some View</font> \nUsing 'some View' as a return type means that the view can return any type that conforms to the View protocol. This syntax is called opaque return type, a feature that allows the compiler to infer the type of view returned without requiring the developer to explicitly specify it. It means that \"an object conforms to the View protocol, but we do not care whether it is a Button or Text, as long as the compiler knows on the line\".\n\n```Swift\nimport SwiftUI\n\nstruct ContentView: View {\n    var body: Button { //This is not a View but a Button.\n        Button(\"Hello, world!\") {\n        }\n        .background(.red)\n        .frame(width: 200, height: 200)\n    }\n}\n\n``` \n\nThe effect of the above code is the same, only the lack of flexibility, each time you need to figure out what type of specific return in the body, too tired, in fact, to the compiler on the line.         \n\n'some' is a special generic type placeholder in Swift that supports more complex combinations and reuse of multiple view types, making SwiftUI code more flexible and concise and reducing the possibility of type errors, which is also a reflection of SwiftUI's polymorphism.\n\n\n#### <font size=3 color=#4169E1>3. Modifier</font> \n\nLet's take a look at the effect of executing each of the following two types of code:     \n\n{% img /assets/SwiftUI/BasicConcepts/001.png %}    \n\nAttribute modifier code after switching the order:\n\n{% img /assets/SwiftUI/BasicConcepts/002.png %}      \n\nJust adjusting the order in which the two lines of code are executed results in a different outcome, which almost turns our perception upside down.\n\nHere we need to understand the working mechanism of Modifier in SwiftUI, unlike UIKit where each modifier acts as an object, you can simply think of each modifier in SwiftUI as \"working alone\", for example, after modifier A modifies an object, it will become another object after modifier B modifies it. For example, after modifier A is modified, it forms an object, and after it is modified by modifier B, it becomes another object.\n```Swift\nButton(\"Hello, world!\") {\n    print(type(of: self.body))\n}    \n.background(.red)\n.frame(width: 200, height: 200)\n```\n\nWith type you can print the exact type of a value as follows:\n\n```Swift\nModifiedContent<ModifiedContent<Button<Text>, _BackgroundStyleModifier<Color>>, _FrameLayout>\n```\n\nIt first generates a Button with text and background color via 'ModifiedContent<Button<Text>, _BackgroundStyleModifier<Color>'. Then, it sets a larger frame to it via 'ModifiedContent<..., _framayout >'.\n\nSo, end up with a stack of 'ModifiedContent' types - each of which transforms a view plus the actual changes to be made, rather than modifying the view directly.   \n\nSimply, the front Modified A production \"product\" is like a brick out of the kiln pit has been molded, the back of the Modifier B, Modifier C ... Modifier B, Modifier C ... can not be changed, only in the original basis of \"stacking\".\n\n{% img /assets/SwiftUI/BasicConcepts/003.png %}    \n \n#### <font size=3 color=gray>*Reference*</font>\n[1] [Why modifier order matters](https://www.hackingwithswift.com/books/ios-swiftui/why-modifier-order-matters)  \n[2] [Why does SwiftUI use “some View” for its view type?](https://www.hackingwithswift.com/books/ios-swiftui/why-does-swiftui-use-some-view-for-its-view-type)\n\n","source":"_posts/SwiftUI/01. Basic Concepts of SwiftUI (1).md","raw":"---\ntitle: 01. Basic Concepts of SwiftUI (1)\ndate: 2023-09-03 14:00:00\ncategories: \n- [SwiftUI]\ntags:\n- ContentView\n- View\n---\n\n\n<font color=gray size=2>*It will take about 5 minutes to finish reading this article.*</font>\n\nLet's start with a piece of SwiftUI code and its Canvas display as follows:  \n\n\n{% img /assets/SwiftUI/BasicConcepts/000.png %}\n\nExplain this code:\n```Swift\nimport SwiftUI\n\nstruct ContentView: View {\n    var body: some View {\n        Button(\"Hello, world!\") {\n        }\n        .background(.red)\n        .frame(width: 200, height: 200)\n    }\n}\n\n```\n\n(1) Create a ContentView structure and follow the View protocol. This means that ContentView is a view type and needs to implement the body property.    \n\n(2) The body attribute returns a some View type, which means that any view that conforms to the View protocol can be returned.\n\n(3) In the body, we have created a view that displays the text \"Hello World!\" using the Button view.    \n\n(4) Several modifiers are applied to the Button view to customize its appearance, such as background to set the background color and frame to set the size to 200*200.  \n\nHow does such a few lines of code accomplish the display of a view?\nIn fact, SwiftUI combines these views and modifiers to form a complete view hierarchy based on the view hierarchy structure and modifier chaining. SwiftUI converts the view hierarchy and modifier chain from the declarative description to the underlying rendering instructions. These rendering instructions are passed to the system, which then performs the actual drawing and rendering operations that are ultimately rendered on the screen. \n\nBelow we introduce a few concepts in conjunction with the code above.\n\n#### <font size=3 color=#4169E1>1. View Protocol</font> \n\nThe View protocol is one of the core protocols in SwiftUI that defines the fundamentals of building user interfaces and how to use them.The source code for the View protocol is as follows:\n\n```Swift\npublic protocol View {\n    associatedtype Body : View\n    @ViewBuilder var body: Self.Body { get }\n}\n```\n\nAs you can see from the source code, the View protocol has the following key features:\n\n'associatedtype Body: View' :    \nThe View protocol uses the associated type associatedtype, which means that types that follow the View protocol must specify a concrete type associated with the View. This concrete type is named Body and must also conform to the View protocol.\n\n'var body: Self.Body { get }' :   \nThe View protocol requires that followers must provide a computed property named body. This property returns a view type that is the previously defined association type Body.\n\nThe View protocol works by returning a specific view hierarchy via the body property. This view hierarchy can contain other views or components to form a complex user interface, and SwiftUI renders the final user interface based on this view hierarchy.\n\n#### <font size=3 color=#4169E1>2. some View</font> \nUsing 'some View' as a return type means that the view can return any type that conforms to the View protocol. This syntax is called opaque return type, a feature that allows the compiler to infer the type of view returned without requiring the developer to explicitly specify it. It means that \"an object conforms to the View protocol, but we do not care whether it is a Button or Text, as long as the compiler knows on the line\".\n\n```Swift\nimport SwiftUI\n\nstruct ContentView: View {\n    var body: Button { //This is not a View but a Button.\n        Button(\"Hello, world!\") {\n        }\n        .background(.red)\n        .frame(width: 200, height: 200)\n    }\n}\n\n``` \n\nThe effect of the above code is the same, only the lack of flexibility, each time you need to figure out what type of specific return in the body, too tired, in fact, to the compiler on the line.         \n\n'some' is a special generic type placeholder in Swift that supports more complex combinations and reuse of multiple view types, making SwiftUI code more flexible and concise and reducing the possibility of type errors, which is also a reflection of SwiftUI's polymorphism.\n\n\n#### <font size=3 color=#4169E1>3. Modifier</font> \n\nLet's take a look at the effect of executing each of the following two types of code:     \n\n{% img /assets/SwiftUI/BasicConcepts/001.png %}    \n\nAttribute modifier code after switching the order:\n\n{% img /assets/SwiftUI/BasicConcepts/002.png %}      \n\nJust adjusting the order in which the two lines of code are executed results in a different outcome, which almost turns our perception upside down.\n\nHere we need to understand the working mechanism of Modifier in SwiftUI, unlike UIKit where each modifier acts as an object, you can simply think of each modifier in SwiftUI as \"working alone\", for example, after modifier A modifies an object, it will become another object after modifier B modifies it. For example, after modifier A is modified, it forms an object, and after it is modified by modifier B, it becomes another object.\n```Swift\nButton(\"Hello, world!\") {\n    print(type(of: self.body))\n}    \n.background(.red)\n.frame(width: 200, height: 200)\n```\n\nWith type you can print the exact type of a value as follows:\n\n```Swift\nModifiedContent<ModifiedContent<Button<Text>, _BackgroundStyleModifier<Color>>, _FrameLayout>\n```\n\nIt first generates a Button with text and background color via 'ModifiedContent<Button<Text>, _BackgroundStyleModifier<Color>'. Then, it sets a larger frame to it via 'ModifiedContent<..., _framayout >'.\n\nSo, end up with a stack of 'ModifiedContent' types - each of which transforms a view plus the actual changes to be made, rather than modifying the view directly.   \n\nSimply, the front Modified A production \"product\" is like a brick out of the kiln pit has been molded, the back of the Modifier B, Modifier C ... Modifier B, Modifier C ... can not be changed, only in the original basis of \"stacking\".\n\n{% img /assets/SwiftUI/BasicConcepts/003.png %}    \n \n#### <font size=3 color=gray>*Reference*</font>\n[1] [Why modifier order matters](https://www.hackingwithswift.com/books/ios-swiftui/why-modifier-order-matters)  \n[2] [Why does SwiftUI use “some View” for its view type?](https://www.hackingwithswift.com/books/ios-swiftui/why-does-swiftui-use-some-view-for-its-view-type)\n\n","slug":"SwiftUI/01. Basic Concepts of SwiftUI (1)","published":1,"updated":"2023-09-06T19:11:03.659Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr4g0008vu0m968q2pl0","content":"<p><font color=gray size=2><em>It will take about 5 minutes to finish reading this article.</em></font></p>\n<p>Let’s start with a piece of SwiftUI code and its Canvas display as follows:  </p>\n<img src=\"/assets/SwiftUI/BasicConcepts/000.png\" class=\"\">\n\n<p>Explain this code:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> SwiftUI</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span>: <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Button</span>(<span class=\"string\">&quot;Hello, world!&quot;</span>) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .background(.red)</span><br><span class=\"line\">        .frame(width: <span class=\"number\">200</span>, height: <span class=\"number\">200</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>(1) Create a ContentView structure and follow the View protocol. This means that ContentView is a view type and needs to implement the body property.    </p>\n<p>(2) The body attribute returns a some View type, which means that any view that conforms to the View protocol can be returned.</p>\n<p>(3) In the body, we have created a view that displays the text “Hello World!” using the Button view.    </p>\n<p>(4) Several modifiers are applied to the Button view to customize its appearance, such as background to set the background color and frame to set the size to 200*200.  </p>\n<p>How does such a few lines of code accomplish the display of a view?<br>In fact, SwiftUI combines these views and modifiers to form a complete view hierarchy based on the view hierarchy structure and modifier chaining. SwiftUI converts the view hierarchy and modifier chain from the declarative description to the underlying rendering instructions. These rendering instructions are passed to the system, which then performs the actual drawing and rendering operations that are ultimately rendered on the screen. </p>\n<p>Below we introduce a few concepts in conjunction with the code above.</p>\n<h4 id=\"1-View-Protocol\"><a href=\"#1-View-Protocol\" class=\"headerlink\" title=\"1. View Protocol\"></a><font size=3 color=#4169E1>1. View Protocol</font></h4><p>The View protocol is one of the core protocols in SwiftUI that defines the fundamentals of building user interfaces and how to use them.The source code for the View protocol is as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">protocol</span> <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">associatedtype</span> <span class=\"type\">Body</span> : <span class=\"type\">View</span></span><br><span class=\"line\">    <span class=\"meta\">@ViewBuilder</span> <span class=\"keyword\">var</span> body: <span class=\"keyword\">Self</span>.<span class=\"type\">Body</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>As you can see from the source code, the View protocol has the following key features:</p>\n<p>‘associatedtype Body: View’ :<br>The View protocol uses the associated type associatedtype, which means that types that follow the View protocol must specify a concrete type associated with the View. This concrete type is named Body and must also conform to the View protocol.</p>\n<p>‘var body: Self.Body { get }’ :<br>The View protocol requires that followers must provide a computed property named body. This property returns a view type that is the previously defined association type Body.</p>\n<p>The View protocol works by returning a specific view hierarchy via the body property. This view hierarchy can contain other views or components to form a complex user interface, and SwiftUI renders the final user interface based on this view hierarchy.</p>\n<h4 id=\"2-some-View\"><a href=\"#2-some-View\" class=\"headerlink\" title=\"2. some View\"></a><font size=3 color=#4169E1>2. some View</font></h4><p>Using ‘some View’ as a return type means that the view can return any type that conforms to the View protocol. This syntax is called opaque return type, a feature that allows the compiler to infer the type of view returned without requiring the developer to explicitly specify it. It means that “an object conforms to the View protocol, but we do not care whether it is a Button or Text, as long as the compiler knows on the line”.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> SwiftUI</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span>: <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"type\">Button</span> &#123; <span class=\"comment\">//This is not a View but a Button.</span></span><br><span class=\"line\">        <span class=\"type\">Button</span>(<span class=\"string\">&quot;Hello, world!&quot;</span>) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .background(.red)</span><br><span class=\"line\">        .frame(width: <span class=\"number\">200</span>, height: <span class=\"number\">200</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>The effect of the above code is the same, only the lack of flexibility, each time you need to figure out what type of specific return in the body, too tired, in fact, to the compiler on the line.         </p>\n<p>‘some’ is a special generic type placeholder in Swift that supports more complex combinations and reuse of multiple view types, making SwiftUI code more flexible and concise and reducing the possibility of type errors, which is also a reflection of SwiftUI’s polymorphism.</p>\n<h4 id=\"3-Modifier\"><a href=\"#3-Modifier\" class=\"headerlink\" title=\"3. Modifier\"></a><font size=3 color=#4169E1>3. Modifier</font></h4><p>Let’s take a look at the effect of executing each of the following two types of code:     </p>\n<img src=\"/assets/SwiftUI/BasicConcepts/001.png\" class=\"\">    \n\n<p>Attribute modifier code after switching the order:</p>\n<img src=\"/assets/SwiftUI/BasicConcepts/002.png\" class=\"\">      \n\n<p>Just adjusting the order in which the two lines of code are executed results in a different outcome, which almost turns our perception upside down.</p>\n<p>Here we need to understand the working mechanism of Modifier in SwiftUI, unlike UIKit where each modifier acts as an object, you can simply think of each modifier in SwiftUI as “working alone”, for example, after modifier A modifies an object, it will become another object after modifier B modifies it. For example, after modifier A is modified, it forms an object, and after it is modified by modifier B, it becomes another object.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Button</span>(<span class=\"string\">&quot;Hello, world!&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(of: <span class=\"keyword\">self</span>.body))</span><br><span class=\"line\">&#125;    </span><br><span class=\"line\">.background(.red)</span><br><span class=\"line\">.frame(width: <span class=\"number\">200</span>, height: <span class=\"number\">200</span>)</span><br></pre></td></tr></table></figure>\n\n<p>With type you can print the exact type of a value as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ModifiedContent</span>&lt;<span class=\"type\">ModifiedContent</span>&lt;<span class=\"type\">Button</span>&lt;<span class=\"type\">Text</span>&gt;, _BackgroundStyleModifier&lt;<span class=\"type\">Color</span>&gt;&gt;, _FrameLayout<span class=\"operator\">&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>It first generates a Button with text and background color via ‘ModifiedContent&lt;Button<Text>, _BackgroundStyleModifier<Color>‘. Then, it sets a larger frame to it via ‘ModifiedContent&lt;…, _framayout &gt;’.</p>\n<p>So, end up with a stack of ‘ModifiedContent’ types - each of which transforms a view plus the actual changes to be made, rather than modifying the view directly.   </p>\n<p>Simply, the front Modified A production “product” is like a brick out of the kiln pit has been molded, the back of the Modifier B, Modifier C … Modifier B, Modifier C … can not be changed, only in the original basis of “stacking”.</p>\n<img src=\"/assets/SwiftUI/BasicConcepts/003.png\" class=\"\">    \n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://www.hackingwithswift.com/books/ios-swiftui/why-modifier-order-matters\">Why modifier order matters</a><br>[2] <a href=\"https://www.hackingwithswift.com/books/ios-swiftui/why-does-swiftui-use-some-view-for-its-view-type\">Why does SwiftUI use “some View” for its view type?</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 5 minutes to finish reading this article.</em></font></p>\n<p>Let’s start with a piece of SwiftUI code and its Canvas display as follows:  </p>\n<img src=\"/assets/SwiftUI/BasicConcepts/000.png\" class=\"\">\n\n<p>Explain this code:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> SwiftUI</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span>: <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Button</span>(<span class=\"string\">&quot;Hello, world!&quot;</span>) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .background(.red)</span><br><span class=\"line\">        .frame(width: <span class=\"number\">200</span>, height: <span class=\"number\">200</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>(1) Create a ContentView structure and follow the View protocol. This means that ContentView is a view type and needs to implement the body property.    </p>\n<p>(2) The body attribute returns a some View type, which means that any view that conforms to the View protocol can be returned.</p>\n<p>(3) In the body, we have created a view that displays the text “Hello World!” using the Button view.    </p>\n<p>(4) Several modifiers are applied to the Button view to customize its appearance, such as background to set the background color and frame to set the size to 200*200.  </p>\n<p>How does such a few lines of code accomplish the display of a view?<br>In fact, SwiftUI combines these views and modifiers to form a complete view hierarchy based on the view hierarchy structure and modifier chaining. SwiftUI converts the view hierarchy and modifier chain from the declarative description to the underlying rendering instructions. These rendering instructions are passed to the system, which then performs the actual drawing and rendering operations that are ultimately rendered on the screen. </p>\n<p>Below we introduce a few concepts in conjunction with the code above.</p>\n<h4 id=\"1-View-Protocol\"><a href=\"#1-View-Protocol\" class=\"headerlink\" title=\"1. View Protocol\"></a><font size=3 color=#4169E1>1. View Protocol</font></h4><p>The View protocol is one of the core protocols in SwiftUI that defines the fundamentals of building user interfaces and how to use them.The source code for the View protocol is as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">protocol</span> <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">associatedtype</span> <span class=\"type\">Body</span> : <span class=\"type\">View</span></span><br><span class=\"line\">    <span class=\"meta\">@ViewBuilder</span> <span class=\"keyword\">var</span> body: <span class=\"keyword\">Self</span>.<span class=\"type\">Body</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>As you can see from the source code, the View protocol has the following key features:</p>\n<p>‘associatedtype Body: View’ :<br>The View protocol uses the associated type associatedtype, which means that types that follow the View protocol must specify a concrete type associated with the View. This concrete type is named Body and must also conform to the View protocol.</p>\n<p>‘var body: Self.Body { get }’ :<br>The View protocol requires that followers must provide a computed property named body. This property returns a view type that is the previously defined association type Body.</p>\n<p>The View protocol works by returning a specific view hierarchy via the body property. This view hierarchy can contain other views or components to form a complex user interface, and SwiftUI renders the final user interface based on this view hierarchy.</p>\n<h4 id=\"2-some-View\"><a href=\"#2-some-View\" class=\"headerlink\" title=\"2. some View\"></a><font size=3 color=#4169E1>2. some View</font></h4><p>Using ‘some View’ as a return type means that the view can return any type that conforms to the View protocol. This syntax is called opaque return type, a feature that allows the compiler to infer the type of view returned without requiring the developer to explicitly specify it. It means that “an object conforms to the View protocol, but we do not care whether it is a Button or Text, as long as the compiler knows on the line”.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> SwiftUI</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span>: <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"type\">Button</span> &#123; <span class=\"comment\">//This is not a View but a Button.</span></span><br><span class=\"line\">        <span class=\"type\">Button</span>(<span class=\"string\">&quot;Hello, world!&quot;</span>) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .background(.red)</span><br><span class=\"line\">        .frame(width: <span class=\"number\">200</span>, height: <span class=\"number\">200</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>The effect of the above code is the same, only the lack of flexibility, each time you need to figure out what type of specific return in the body, too tired, in fact, to the compiler on the line.         </p>\n<p>‘some’ is a special generic type placeholder in Swift that supports more complex combinations and reuse of multiple view types, making SwiftUI code more flexible and concise and reducing the possibility of type errors, which is also a reflection of SwiftUI’s polymorphism.</p>\n<h4 id=\"3-Modifier\"><a href=\"#3-Modifier\" class=\"headerlink\" title=\"3. Modifier\"></a><font size=3 color=#4169E1>3. Modifier</font></h4><p>Let’s take a look at the effect of executing each of the following two types of code:     </p>\n<img src=\"/assets/SwiftUI/BasicConcepts/001.png\" class=\"\">    \n\n<p>Attribute modifier code after switching the order:</p>\n<img src=\"/assets/SwiftUI/BasicConcepts/002.png\" class=\"\">      \n\n<p>Just adjusting the order in which the two lines of code are executed results in a different outcome, which almost turns our perception upside down.</p>\n<p>Here we need to understand the working mechanism of Modifier in SwiftUI, unlike UIKit where each modifier acts as an object, you can simply think of each modifier in SwiftUI as “working alone”, for example, after modifier A modifies an object, it will become another object after modifier B modifies it. For example, after modifier A is modified, it forms an object, and after it is modified by modifier B, it becomes another object.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Button</span>(<span class=\"string\">&quot;Hello, world!&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(of: <span class=\"keyword\">self</span>.body))</span><br><span class=\"line\">&#125;    </span><br><span class=\"line\">.background(.red)</span><br><span class=\"line\">.frame(width: <span class=\"number\">200</span>, height: <span class=\"number\">200</span>)</span><br></pre></td></tr></table></figure>\n\n<p>With type you can print the exact type of a value as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ModifiedContent</span>&lt;<span class=\"type\">ModifiedContent</span>&lt;<span class=\"type\">Button</span>&lt;<span class=\"type\">Text</span>&gt;, _BackgroundStyleModifier&lt;<span class=\"type\">Color</span>&gt;&gt;, _FrameLayout<span class=\"operator\">&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>It first generates a Button with text and background color via ‘ModifiedContent&lt;Button<Text>, _BackgroundStyleModifier<Color>‘. Then, it sets a larger frame to it via ‘ModifiedContent&lt;…, _framayout &gt;’.</p>\n<p>So, end up with a stack of ‘ModifiedContent’ types - each of which transforms a view plus the actual changes to be made, rather than modifying the view directly.   </p>\n<p>Simply, the front Modified A production “product” is like a brick out of the kiln pit has been molded, the back of the Modifier B, Modifier C … Modifier B, Modifier C … can not be changed, only in the original basis of “stacking”.</p>\n<img src=\"/assets/SwiftUI/BasicConcepts/003.png\" class=\"\">    \n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://www.hackingwithswift.com/books/ios-swiftui/why-modifier-order-matters\">Why modifier order matters</a><br>[2] <a href=\"https://www.hackingwithswift.com/books/ios-swiftui/why-does-swiftui-use-some-view-for-its-view-type\">Why does SwiftUI use “some View” for its view type?</a></p>\n"},{"title":"02. Basic Concepts of SwiftUI (2)","date":"2023-09-06T17:00:00.000Z","_content":"\n\n<font color=gray size=2>*It will take about 5 minutes to finish reading this article.*</font>\n\n#### <font size=3 color=#4169E1>1. \"Special\" views in SwiftUI</font> \n\nIn SwiftUI, every type that follows the View protocol must define a computational property called Body that represents the body content of that view. The type of this Body property determines the structure and content of the view. Typically, the type of Body is a specific View type.\n\n```Swift\nstruct MyView: View {\n    var body: some View {\n        Text(\"Hello, World!\")\n    }\n}\n```\n\nHowever, sometimes we create special views whose type of the Body property may not be a specific View type, but a special placeholder type indicating that the view has no actual content. In this case, we can set the type of Body to Never.\n\nNever is a special type that denotes an impossible value or a result that will never be returned. In this context, setting the type of Body to Never means that this view has no actual content; it exists only as a container or modifier for other views.\n\nThe purpose of using Body = Never in these view types is to indicate that they have no actual content or may not show any content depending on certain conditions. This avoids processing these views at the SwiftUI runtime, improving performance and efficiency.\n\nHere we introduce a few SwiftUI in several common such special views, they are not directly used in SwiftUI rendering display with, they are mainly used for layout, placeholder, packaging and other roles, they have a very important role in the development of SwiftUI.\n\n#### <font size=3 color=#4169E1>2. Introduction to \"Special\" views</font> \n\n<font size=3 color=#4169E1>**2.1 VStack, HStack, ZStack**</font>  \nUIKit has an invisible view, UIStackView, which is used for arranging other views. In SwiftUI we can create flexible layouts using three view containers, VStack, HStack, and ZStack, which are container views that help us organize and arrange other views to create a variety of complex interfaces.\n\nVStack: a vertical stack layout container that arranges the contained views vertically from top to bottom. This means the views will be laid out vertically in order. As follows:       \n{% img /assets/SwiftUI/BasicConcepts/004.png %} \n\nHStack: Horizontal Stack Container View, arranges the contained views horizontally from left to right, and the views will be laid out horizontally in order. As follows:\n{% img /assets/SwiftUI/BasicConcepts/005.png %} \n\nZStack: cascades container views, cascading the contained views in the order they appear in the ZStack, which means that later views will override earlier ones. As follows:\n{% img /assets/SwiftUI/BasicConcepts/006.png %} \n\n<font size=3 color=#4169E1>**2.2 Spacer()**</font>\nSpacer is a flexible spatial view that expands along the main axis that contains the Stack layout, or on both x or y axes if it is not included in the stack.Spacer is mostly used in combination with the Stack layout trying to work together. As follows:\n\n{% img /assets/SwiftUI/BasicConcepts/007.png %}       \n{% img /assets/SwiftUI/BasicConcepts/008.png %} \n\nSpacer() will \"fill\" the space it can occupy. \n\n<font size=3 color=#4169E1>**2.3 Group**</font>  \nGroup is a container view in SwiftUI for combining multiple views into a logical whole. It does not apply specific layout or modifications to the views, but is only used to place multiple views in a common container.\n\n{% img /assets/SwiftUI/BasicConcepts/009.png %}    \n{% img /assets/SwiftUI/BasicConcepts/010.png %}    \n\n<font size=3 color=#4169E1>**2.4 NavigationView**</font>    \nNavigationView is a container view for building navigation interfaces in SwiftUI. It provides a simple way to manage navigation stacks and navigation links, and provides the user with the ability to navigate interactively.     \n\n{% img /assets/SwiftUI/BasicConcepts/011.png %}    \n\n<font size=3 color=#4169E1>**2.5 EmptyView**</font>    \nEmptyView is a special view type in SwiftUI that represents an empty view without any content. It is often used as a placeholder or to hide a view under certain conditions.\n{% img /assets/SwiftUI/BasicConcepts/012.png %}    \n\nAlthough EmptyView doesn't display anything, it's still a valid view type and can participate in the combination and layout of views. Its presence in SwiftUI gives us the flexibility to control and manage the showing and hiding of views while keeping the code clean and consistent.\n\n<font size=3 color=#4169E1>**2.6 TupleView**</font>    \nTupleView is a view type in SwiftUI for combining multiple views into a tuple view. It allows multiple views to be passed as parameters and combined as a tuple to form a view container.\n\n{% img /assets/SwiftUI/BasicConcepts/013.png %}  \n\n<font size=3 color=#4169E1>**2.7 AnyView**</font>    \nAnyView is a type eraser in SwiftUI that allows to encapsulate any type of view into an opaque type. In SwiftUI, each view has a specific type, but sometimes we need to manipulate views without caring about the specific type, or mix views of different types. This is where you can use AnyView to encapsulate these views and treat them as a unified type. Here is an example showing how to encapsulate and manipulate different types of views using AnyView:\n\n{% img /assets/SwiftUI/BasicConcepts/014.png %}  \n\n\nThe above list is provided by SwiftUI, of course, we can define some special Views according to our needs.","source":"_posts/SwiftUI/02. Basic Concepts of SwiftUI (2).md","raw":"---\ntitle: 02. Basic Concepts of SwiftUI (2)\ndate: 2023-09-06 19:00:00\ncategories: \n- [SwiftUI]\ntags:\n- Never\n- Body\n---\n\n\n<font color=gray size=2>*It will take about 5 minutes to finish reading this article.*</font>\n\n#### <font size=3 color=#4169E1>1. \"Special\" views in SwiftUI</font> \n\nIn SwiftUI, every type that follows the View protocol must define a computational property called Body that represents the body content of that view. The type of this Body property determines the structure and content of the view. Typically, the type of Body is a specific View type.\n\n```Swift\nstruct MyView: View {\n    var body: some View {\n        Text(\"Hello, World!\")\n    }\n}\n```\n\nHowever, sometimes we create special views whose type of the Body property may not be a specific View type, but a special placeholder type indicating that the view has no actual content. In this case, we can set the type of Body to Never.\n\nNever is a special type that denotes an impossible value or a result that will never be returned. In this context, setting the type of Body to Never means that this view has no actual content; it exists only as a container or modifier for other views.\n\nThe purpose of using Body = Never in these view types is to indicate that they have no actual content or may not show any content depending on certain conditions. This avoids processing these views at the SwiftUI runtime, improving performance and efficiency.\n\nHere we introduce a few SwiftUI in several common such special views, they are not directly used in SwiftUI rendering display with, they are mainly used for layout, placeholder, packaging and other roles, they have a very important role in the development of SwiftUI.\n\n#### <font size=3 color=#4169E1>2. Introduction to \"Special\" views</font> \n\n<font size=3 color=#4169E1>**2.1 VStack, HStack, ZStack**</font>  \nUIKit has an invisible view, UIStackView, which is used for arranging other views. In SwiftUI we can create flexible layouts using three view containers, VStack, HStack, and ZStack, which are container views that help us organize and arrange other views to create a variety of complex interfaces.\n\nVStack: a vertical stack layout container that arranges the contained views vertically from top to bottom. This means the views will be laid out vertically in order. As follows:       \n{% img /assets/SwiftUI/BasicConcepts/004.png %} \n\nHStack: Horizontal Stack Container View, arranges the contained views horizontally from left to right, and the views will be laid out horizontally in order. As follows:\n{% img /assets/SwiftUI/BasicConcepts/005.png %} \n\nZStack: cascades container views, cascading the contained views in the order they appear in the ZStack, which means that later views will override earlier ones. As follows:\n{% img /assets/SwiftUI/BasicConcepts/006.png %} \n\n<font size=3 color=#4169E1>**2.2 Spacer()**</font>\nSpacer is a flexible spatial view that expands along the main axis that contains the Stack layout, or on both x or y axes if it is not included in the stack.Spacer is mostly used in combination with the Stack layout trying to work together. As follows:\n\n{% img /assets/SwiftUI/BasicConcepts/007.png %}       \n{% img /assets/SwiftUI/BasicConcepts/008.png %} \n\nSpacer() will \"fill\" the space it can occupy. \n\n<font size=3 color=#4169E1>**2.3 Group**</font>  \nGroup is a container view in SwiftUI for combining multiple views into a logical whole. It does not apply specific layout or modifications to the views, but is only used to place multiple views in a common container.\n\n{% img /assets/SwiftUI/BasicConcepts/009.png %}    \n{% img /assets/SwiftUI/BasicConcepts/010.png %}    \n\n<font size=3 color=#4169E1>**2.4 NavigationView**</font>    \nNavigationView is a container view for building navigation interfaces in SwiftUI. It provides a simple way to manage navigation stacks and navigation links, and provides the user with the ability to navigate interactively.     \n\n{% img /assets/SwiftUI/BasicConcepts/011.png %}    \n\n<font size=3 color=#4169E1>**2.5 EmptyView**</font>    \nEmptyView is a special view type in SwiftUI that represents an empty view without any content. It is often used as a placeholder or to hide a view under certain conditions.\n{% img /assets/SwiftUI/BasicConcepts/012.png %}    \n\nAlthough EmptyView doesn't display anything, it's still a valid view type and can participate in the combination and layout of views. Its presence in SwiftUI gives us the flexibility to control and manage the showing and hiding of views while keeping the code clean and consistent.\n\n<font size=3 color=#4169E1>**2.6 TupleView**</font>    \nTupleView is a view type in SwiftUI for combining multiple views into a tuple view. It allows multiple views to be passed as parameters and combined as a tuple to form a view container.\n\n{% img /assets/SwiftUI/BasicConcepts/013.png %}  \n\n<font size=3 color=#4169E1>**2.7 AnyView**</font>    \nAnyView is a type eraser in SwiftUI that allows to encapsulate any type of view into an opaque type. In SwiftUI, each view has a specific type, but sometimes we need to manipulate views without caring about the specific type, or mix views of different types. This is where you can use AnyView to encapsulate these views and treat them as a unified type. Here is an example showing how to encapsulate and manipulate different types of views using AnyView:\n\n{% img /assets/SwiftUI/BasicConcepts/014.png %}  \n\n\nThe above list is provided by SwiftUI, of course, we can define some special Views according to our needs.","slug":"SwiftUI/02. Basic Concepts of SwiftUI (2)","published":1,"updated":"2023-09-06T19:12:04.089Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr4i000avu0m58zqcqrt","content":"<p><font color=gray size=2><em>It will take about 5 minutes to finish reading this article.</em></font></p>\n<h4 id=\"1-“Special”-views-in-SwiftUI\"><a href=\"#1-“Special”-views-in-SwiftUI\" class=\"headerlink\" title=\"1. “Special” views in SwiftUI\"></a><font size=3 color=#4169E1>1. “Special” views in SwiftUI</font></h4><p>In SwiftUI, every type that follows the View protocol must define a computational property called Body that represents the body content of that view. The type of this Body property determines the structure and content of the view. Typically, the type of Body is a specific View type.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">MyView</span>: <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Text</span>(<span class=\"string\">&quot;Hello, World!&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>However, sometimes we create special views whose type of the Body property may not be a specific View type, but a special placeholder type indicating that the view has no actual content. In this case, we can set the type of Body to Never.</p>\n<p>Never is a special type that denotes an impossible value or a result that will never be returned. In this context, setting the type of Body to Never means that this view has no actual content; it exists only as a container or modifier for other views.</p>\n<p>The purpose of using Body &#x3D; Never in these view types is to indicate that they have no actual content or may not show any content depending on certain conditions. This avoids processing these views at the SwiftUI runtime, improving performance and efficiency.</p>\n<p>Here we introduce a few SwiftUI in several common such special views, they are not directly used in SwiftUI rendering display with, they are mainly used for layout, placeholder, packaging and other roles, they have a very important role in the development of SwiftUI.</p>\n<h4 id=\"2-Introduction-to-“Special”-views\"><a href=\"#2-Introduction-to-“Special”-views\" class=\"headerlink\" title=\"2. Introduction to “Special” views\"></a><font size=3 color=#4169E1>2. Introduction to “Special” views</font></h4><p><font size=3 color=#4169E1><strong>2.1 VStack, HStack, ZStack</strong></font><br>UIKit has an invisible view, UIStackView, which is used for arranging other views. In SwiftUI we can create flexible layouts using three view containers, VStack, HStack, and ZStack, which are container views that help us organize and arrange other views to create a variety of complex interfaces.</p>\n<p>VStack: a vertical stack layout container that arranges the contained views vertically from top to bottom. This means the views will be laid out vertically in order. As follows:       </p>\n<img src=\"/assets/SwiftUI/BasicConcepts/004.png\" class=\"\"> \n\n<p>HStack: Horizontal Stack Container View, arranges the contained views horizontally from left to right, and the views will be laid out horizontally in order. As follows:</p>\n<img src=\"/assets/SwiftUI/BasicConcepts/005.png\" class=\"\"> \n\n<p>ZStack: cascades container views, cascading the contained views in the order they appear in the ZStack, which means that later views will override earlier ones. As follows:</p>\n<img src=\"/assets/SwiftUI/BasicConcepts/006.png\" class=\"\"> \n\n<p><font size=3 color=#4169E1><strong>2.2 Spacer()</strong></font><br>Spacer is a flexible spatial view that expands along the main axis that contains the Stack layout, or on both x or y axes if it is not included in the stack.Spacer is mostly used in combination with the Stack layout trying to work together. As follows:</p>\n<img src=\"/assets/SwiftUI/BasicConcepts/007.png\" class=\"\">       \n<img src=\"/assets/SwiftUI/BasicConcepts/008.png\" class=\"\"> \n\n<p>Spacer() will “fill” the space it can occupy. </p>\n<p><font size=3 color=#4169E1><strong>2.3 Group</strong></font><br>Group is a container view in SwiftUI for combining multiple views into a logical whole. It does not apply specific layout or modifications to the views, but is only used to place multiple views in a common container.</p>\n<img src=\"/assets/SwiftUI/BasicConcepts/009.png\" class=\"\">    \n<img src=\"/assets/SwiftUI/BasicConcepts/010.png\" class=\"\">    \n\n<p><font size=3 color=#4169E1><strong>2.4 NavigationView</strong></font><br>NavigationView is a container view for building navigation interfaces in SwiftUI. It provides a simple way to manage navigation stacks and navigation links, and provides the user with the ability to navigate interactively.     </p>\n<img src=\"/assets/SwiftUI/BasicConcepts/011.png\" class=\"\">    \n\n<p><font size=3 color=#4169E1><strong>2.5 EmptyView</strong></font><br>EmptyView is a special view type in SwiftUI that represents an empty view without any content. It is often used as a placeholder or to hide a view under certain conditions.</p>\n<img src=\"/assets/SwiftUI/BasicConcepts/012.png\" class=\"\">    \n\n<p>Although EmptyView doesn’t display anything, it’s still a valid view type and can participate in the combination and layout of views. Its presence in SwiftUI gives us the flexibility to control and manage the showing and hiding of views while keeping the code clean and consistent.</p>\n<p><font size=3 color=#4169E1><strong>2.6 TupleView</strong></font><br>TupleView is a view type in SwiftUI for combining multiple views into a tuple view. It allows multiple views to be passed as parameters and combined as a tuple to form a view container.</p>\n<img src=\"/assets/SwiftUI/BasicConcepts/013.png\" class=\"\">  \n\n<p><font size=3 color=#4169E1><strong>2.7 AnyView</strong></font><br>AnyView is a type eraser in SwiftUI that allows to encapsulate any type of view into an opaque type. In SwiftUI, each view has a specific type, but sometimes we need to manipulate views without caring about the specific type, or mix views of different types. This is where you can use AnyView to encapsulate these views and treat them as a unified type. Here is an example showing how to encapsulate and manipulate different types of views using AnyView:</p>\n<img src=\"/assets/SwiftUI/BasicConcepts/014.png\" class=\"\">  \n\n\n<p>The above list is provided by SwiftUI, of course, we can define some special Views according to our needs.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 5 minutes to finish reading this article.</em></font></p>\n<h4 id=\"1-“Special”-views-in-SwiftUI\"><a href=\"#1-“Special”-views-in-SwiftUI\" class=\"headerlink\" title=\"1. “Special” views in SwiftUI\"></a><font size=3 color=#4169E1>1. “Special” views in SwiftUI</font></h4><p>In SwiftUI, every type that follows the View protocol must define a computational property called Body that represents the body content of that view. The type of this Body property determines the structure and content of the view. Typically, the type of Body is a specific View type.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">MyView</span>: <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Text</span>(<span class=\"string\">&quot;Hello, World!&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>However, sometimes we create special views whose type of the Body property may not be a specific View type, but a special placeholder type indicating that the view has no actual content. In this case, we can set the type of Body to Never.</p>\n<p>Never is a special type that denotes an impossible value or a result that will never be returned. In this context, setting the type of Body to Never means that this view has no actual content; it exists only as a container or modifier for other views.</p>\n<p>The purpose of using Body &#x3D; Never in these view types is to indicate that they have no actual content or may not show any content depending on certain conditions. This avoids processing these views at the SwiftUI runtime, improving performance and efficiency.</p>\n<p>Here we introduce a few SwiftUI in several common such special views, they are not directly used in SwiftUI rendering display with, they are mainly used for layout, placeholder, packaging and other roles, they have a very important role in the development of SwiftUI.</p>\n<h4 id=\"2-Introduction-to-“Special”-views\"><a href=\"#2-Introduction-to-“Special”-views\" class=\"headerlink\" title=\"2. Introduction to “Special” views\"></a><font size=3 color=#4169E1>2. Introduction to “Special” views</font></h4><p><font size=3 color=#4169E1><strong>2.1 VStack, HStack, ZStack</strong></font><br>UIKit has an invisible view, UIStackView, which is used for arranging other views. In SwiftUI we can create flexible layouts using three view containers, VStack, HStack, and ZStack, which are container views that help us organize and arrange other views to create a variety of complex interfaces.</p>\n<p>VStack: a vertical stack layout container that arranges the contained views vertically from top to bottom. This means the views will be laid out vertically in order. As follows:       </p>\n<img src=\"/assets/SwiftUI/BasicConcepts/004.png\" class=\"\"> \n\n<p>HStack: Horizontal Stack Container View, arranges the contained views horizontally from left to right, and the views will be laid out horizontally in order. As follows:</p>\n<img src=\"/assets/SwiftUI/BasicConcepts/005.png\" class=\"\"> \n\n<p>ZStack: cascades container views, cascading the contained views in the order they appear in the ZStack, which means that later views will override earlier ones. As follows:</p>\n<img src=\"/assets/SwiftUI/BasicConcepts/006.png\" class=\"\"> \n\n<p><font size=3 color=#4169E1><strong>2.2 Spacer()</strong></font><br>Spacer is a flexible spatial view that expands along the main axis that contains the Stack layout, or on both x or y axes if it is not included in the stack.Spacer is mostly used in combination with the Stack layout trying to work together. As follows:</p>\n<img src=\"/assets/SwiftUI/BasicConcepts/007.png\" class=\"\">       \n<img src=\"/assets/SwiftUI/BasicConcepts/008.png\" class=\"\"> \n\n<p>Spacer() will “fill” the space it can occupy. </p>\n<p><font size=3 color=#4169E1><strong>2.3 Group</strong></font><br>Group is a container view in SwiftUI for combining multiple views into a logical whole. It does not apply specific layout or modifications to the views, but is only used to place multiple views in a common container.</p>\n<img src=\"/assets/SwiftUI/BasicConcepts/009.png\" class=\"\">    \n<img src=\"/assets/SwiftUI/BasicConcepts/010.png\" class=\"\">    \n\n<p><font size=3 color=#4169E1><strong>2.4 NavigationView</strong></font><br>NavigationView is a container view for building navigation interfaces in SwiftUI. It provides a simple way to manage navigation stacks and navigation links, and provides the user with the ability to navigate interactively.     </p>\n<img src=\"/assets/SwiftUI/BasicConcepts/011.png\" class=\"\">    \n\n<p><font size=3 color=#4169E1><strong>2.5 EmptyView</strong></font><br>EmptyView is a special view type in SwiftUI that represents an empty view without any content. It is often used as a placeholder or to hide a view under certain conditions.</p>\n<img src=\"/assets/SwiftUI/BasicConcepts/012.png\" class=\"\">    \n\n<p>Although EmptyView doesn’t display anything, it’s still a valid view type and can participate in the combination and layout of views. Its presence in SwiftUI gives us the flexibility to control and manage the showing and hiding of views while keeping the code clean and consistent.</p>\n<p><font size=3 color=#4169E1><strong>2.6 TupleView</strong></font><br>TupleView is a view type in SwiftUI for combining multiple views into a tuple view. It allows multiple views to be passed as parameters and combined as a tuple to form a view container.</p>\n<img src=\"/assets/SwiftUI/BasicConcepts/013.png\" class=\"\">  \n\n<p><font size=3 color=#4169E1><strong>2.7 AnyView</strong></font><br>AnyView is a type eraser in SwiftUI that allows to encapsulate any type of view into an opaque type. In SwiftUI, each view has a specific type, but sometimes we need to manipulate views without caring about the specific type, or mix views of different types. This is where you can use AnyView to encapsulate these views and treat them as a unified type. Here is an example showing how to encapsulate and manipulate different types of views using AnyView:</p>\n<img src=\"/assets/SwiftUI/BasicConcepts/014.png\" class=\"\">  \n\n\n<p>The above list is provided by SwiftUI, of course, we can define some special Views according to our needs.</p>\n"},{"title":"03. Basic Concepts of SwiftUI (3)","date":"2023-09-06T18:30:00.000Z","_content":"\n\n<font color=gray size=2>*It will take about 5 minutes to finish reading this article.*</font>\n\nThis article focuses on some common property wrappers in SwiftUI.\n\n#### <font size=4 color=#4169E1>1. @State</font> \nIn Swift, a computed property is a property that does not have a directly stored value, it is a calculated property value. Therefore, the mutating keyword is not allowed to modify computed properties. So code like the following is not allowed:\n```Swift\nmutating var body: some View\n```\nHowever, in SwiftUI, a special solution called property wrapper @State is provided, which is not only used to create mutable properties that can respond to user interaction and state changes, but also to share and pass data between views.\n```Swift\nimport SwiftUI\n\nstruct ContentView: View {\n    @State private var counter: Int = 0\n\n    var body: some View {\n        VStack {\n            Text(\"Counter: \\(counter)\")\n                .font(.largeTitle)\n\n            Button(\"Increment\") {\n                counter += 1\n            }\n        }\n    }\n}\n```\n@State allows us to bypass the limitations of structs: we know their properties cannot be changed because the struct is fixed, but @State allows SwiftUI to store that value alone where it can be modified. Let's take a look at its implementation:\n```Swift\n@frozen @propertyWrapper public struct State<Value> : DynamicProperty {\n\n    /// Creates the state with an initial wrapped value.\n    public init(wrappedValue value: Value)\n\n    /// Creates the state with an initial value.\n    public init(initialValue value: Value)\n\n    /// The underlying value referenced by the state variable.\n    public var wrappedValue: Value { get nonmutating set }\n\n    /// A binding to the state value.\n    public var projectedValue: Binding<Value> { get }\n}\n```\n(1) @propertyWrapper:   \nThis is a property tag indicating that State is a property wrapper.\n\n(2) Follow the DynamicProperty protocol:\nThis protocol is a special protocol used to indicate that the value of a property may change dynamically at runtime. This protocol completes the interface needed to create dependent operations on data (state) and views. Only a few interfaces are exposed right now, and we can't fully use it for now.\n```Swift\npublic protocol DynamicProperty {\n\n    /// Called immediately before the view's body() function is\n    /// executed, after updating the values of any dynamic properties\n    /// stored in `self`.\n    mutating func update()\n}\n```\n(3) Its projectedValue (projected value) is of Binding type. Binding is a first-level reference to data. It serves as a bridge for two-way binding of data (state) in SwiftUI, allowing data to be read and written without owning the data. We will introduce it separately later.\n```Swift\n@frozen @propertyWrapper @dynamicMemberLookup struct Binding<Value>\n```\n\n#### <font size=4 color=#4169E1>2. @binding</font> \nIn SwiftUI, @Binding is used to create a two-way-bindable property, which allows properties to be bound to mutable state in other views in order to share and synchronize data between multiple views.\n\nBecause sometimes we will pass a property of a view to a child node, but it cannot be directly passed to the child node, because the value transfer form in Swift is the value type transfer method, that is, a copy is passed to the child node past value.\n\nBut after being modified by the @Binding decorator, the attribute becomes a reference type, and the transfer becomes a reference transfer, so that the state of the parent-child view can be associated.\n\n```Swift\nimport SwiftUI\n\nstruct ContentView: View {\n    @State private var count: Int = 0\n\n    var body: some View {\n        VStack {\n            Text(\"Count: \\(count)\")\n                .font(.largeTitle)\n\n            ChildView(count: $count)\n        }\n    }\n}\n\nstruct ChildView: View {\n    @Binding var count: Int\n\n    var body: some View {\n        Button(\"Increment\") {\n            count += 1\n        }\n    }\n}\n```\n@Binding actually encapsulates a reference to a value and provides an interface for reading and writing the value. When the bound value changes, the binding will automatically notify its dependencies, thereby triggering updates and re-rendering.\n\n#### <font size=4 color=#4169E1>3. @ObservableObject</font> \n@ObservableObject is used to create observable objects that can be used by multiple independent Views. If you use @ObservedObject to decorate an object, then that object must implement the ObservableObject protocol, and then use @Published to decorate the property in the object, indicating that this property needs to be monitored by SwiftUI.\n```Swift\nimport SwiftUI\n\nclass UserData: ObservableObject {\n    @Published var name: String = \"John\"\n    @Published var age: Int = 30\n}\n\nstruct ContentView: View {\n    @ObservedObject var userData = UserData()\n\n    var body: some View {\n        VStack {\n            Text(\"Name: \\(userData.name)\")\n                .font(.largeTitle)\n\n            Text(\"Age: \\(userData.age)\")\n                .font(.largeTitle)\n\n            Button(\"Change Data\") {\n                userData.name = \"Jane\"\n                userData.age = 25\n            }\n        }\n    }\n}\n```\nIn this example, we create a custom class called UserData and mark its properties name and age as observable using the @Published property wrapper. This means that when these properties change, SwiftUI will automatically post a notification, and the associated views will be notified and automatically updated to reflect the new value.\n\nBy using @ObservableObject and @Published property wrappers, we can create observable data models in SwiftUI, and realize dynamic updates of data and synchronization of views. This mechanism makes building responsive user interfaces easier and more efficient.\n\n#### <font size=4 color=#4169E1>4. @StateObject</font> \n@State modifies value type data, and @StateObject is basically an upgraded version of @State for class.\n\nThe main function of @StateObject is to create an independent, observable object in the view and is responsible for managing the life cycle of the object.\n\nUnlike @ObservedObject, @StateObject does not reinitialize the object when the view is recreated, but keeps its state unchanged. This makes sharing and managing observables in view hierarchies more convenient and reliable. Let's compare it with an example:\n```Swift\nimport SwiftUI\n\nclass UserAuth: ObservableObject {\n    @Published var isLoggedIn: Bool = false\n    // Other user-related properties and methods... \n}\n\nstruct ContentView: View {\n    @StateObject var userAuth = UserAuth()\n\n    var body: some View {\n        VStack {\n            if userAuth.isLoggedIn {\n                Text(\"Welcome, User!\")\n                    .font(.largeTitle)\n            } else {\n                LoginView(userAuth: userAuth)\n            }\n        }\n    }\n}\n\nstruct LoginView: View {\n    @State private var username: String = \"\"\n    @State private var password: String = \"\"\n\n    @ObservedObject var userAuth: UserAuth\n\n    var body: some View {\n        VStack {\n            TextField(\"Username\", text: $username)\n                .textFieldStyle(RoundedBorderTextFieldStyle())\n            SecureField(\"Password\", text: $password)\n                .textFieldStyle(RoundedBorderTextFieldStyle())\n\n            Button(\"Login\") {\n                // Simulate authenticated users \n                if username == \"admin\" && password == \"password\" {\n                    userAuth.isLoggedIn = true\n                }\n            }\n        }\n    }\n}\n```\nIn the above example, UserAuth is an ObservableObject that holds the logged-in state isLoggedIn. In the ContentView, we create a persistent UserAuth object using the @StateObject property wrapper and display a welcome message or a login view depending on the user's login status.\n\nExample of using @ObservableObject: \n```Swift\n\nimport SwiftUI\n\nclass UserAuth: ObservableObject {\n    @Published var isLoggedIn: Bool = false\n    // Other user-related properties and methods... \n}\n\nstruct ContentView: View {\n    @ObservedObject var userAuth = UserAuth()\n\n    var body: some View {\n        VStack {\n            if userAuth.isLoggedIn {\n                Text(\"Welcome, User!\")\n                    .font(.largeTitle)\n            } else {\n                LoginView(userAuth: userAuth)\n            }\n        }\n    }\n}\n\nstruct LoginView: View {\n    @State private var username: String = \"\"\n    @State private var password: String = \"\"\n\n    @ObservedObject var userAuth: UserAuth\n\n    var body: some View {\n        VStack {\n            TextField(\"Username\", text: $username)\n                .textFieldStyle(RoundedBorderTextFieldStyle())\n            SecureField(\"Password\", text: $password)\n                .textFieldStyle(RoundedBorderTextFieldStyle())\n\n            Button(\"Login\") {\n                // Simulate authenticated users \n                if username == \"admin\" && password == \"password\" {\n                    userAuth.isLoggedIn = true\n                }\n            }\n        }\n    }\n}\n```\nIn this example, we also use UserAuth as an ObservableObject to manage the user's login status. The difference is that in the ContentView, we used the @ObservedObject property wrapper to create the UserAuth object. This means that whenever the ContentView is recreated, a new instance of the UserAuth object is created.\n\nTo sum up, @ObservedObject will be created multiple times with the creation of View regardless of storage, which is suitable for temporary and partial data models.\n\nWhile @StateObject guarantees that the object will only be created once, it is suitable for objects that need to share and maintain persistent state in the entire view hierarchy.\n\nTherefore, if it is an ObservableObject model object created by itself in View, using @StateObject will most likely be a more correct choice.\n\n#### <font size=4 color=#4169E1>5. @EnvironmentObject</font> \nIn SwiftUI, the main function of @EnvironmentObject is to share observable objects throughout the application and make them update automatically in views. By setting an observable as an environment variable, it is available throughout the view hierarchy without having to manually pass it to each view.\n\n```Swift\nimport SwiftUI\n\nclass UserData: ObservableObject {\n    @Published var name: String = \"John\"\n}\n\nstruct ContentView: View {\n    @EnvironmentObject var userData: UserData\n\n    var body: some View {\n        VStack {\n            Text(\"Name: \\(userData.name)\")\n                .font(.largeTitle)\n\n            Button(\"Change Name\") {\n                userData.name = \"Jane\"\n            }\n        }\n    }\n}\n\nstruct DetailView: View {\n    @EnvironmentObject var userData: UserData\n\n    var body: some View {\n        Text(\"Welcome, \\(userData.name)!\")\n            .font(.title)\n    }\n}\n\nstruct AppView: View {\n    var body: some View {\n        ContentView()\n            .environmentObject(UserData())\n    }\n}\n\n@main\nstruct MyApp: App {\n    var body: some Scene {\n        WindowGroup {\n            AppView()\n        }\n    }\n}\n```\nIn this example, we created a custom class called UserData and marked it as ObservableObject. We then use @EnvironmentObject property wrappers in ContentView and DetailView to set the UserData object as the environment object.\n\nIn ContentView, we can access the properties of the userData object and update them as needed. In the DetailView, we can also access the same userData object and use its properties to display the welcome message.\n\nIn the AppView, we use the environmentObject(_:) function to set the UserData instance as the application's environment object so that it is shared across the application.\n\nBy using @EnvironmentObject property wrappers, we can share and access global observable objects throughout the application, making data transfer and synchronization easier and more convenient.\n\n#### <font size=4 color=#4169E1>5. @FocusState</font> \nIn SwiftUI, @FocusState is used to manage the focus state in a view. It allows you to track and control focus in the UI for automation if needed.\n\n@FocusState provides a mechanism to track and control focus state in order to manage keyboard interactions and user input in the view hierarchy. It can be used to automatically switch focus between multiple text fields or views, and to perform focus-related actions such as submitting a form or handling user input.\n\nHere is a simple sample code:\n\n```Swift\nimport SwiftUI\n\nstruct ContentView: View {\n    @State private var name: String = \"\"\n    @FocusState private var isNameFocused: Bool\n\n    var body: some View {\n        VStack {\n            TextField(\"Name\", text: $name)\n                .focused($isNameFocused)\n\n            Button(\"Submit\") {\n                isNameFocused = false\n                // Execute the commit operation\n                print(\"Submitted: \\(name)\")\n            }\n        }\n    }\n}\n```\nIn this example, we have used the @State property wrapper in the ContentView to store the value of the name. We also use the @FocusState property wrapper to manage the focus state of the name text field.\n\nBy using the .focused($isNameFocused) modifier on the TextField, we associate the focus state with the name text field. This means that when the value of isNameFocused is true, the name text field will get focus.\n\nIn the action closure of the submit button, we set the value of isNameFocused to false to defocus the name text field. You can then perform commit operations or other focus-related operations.\n\n#### <font size=4 color=#4169E1>6. @AppStorage</font> \nIn SwiftUI, @AppStorage is used to conveniently read and write values in the app's persistent storage. It provides an easy way to handle application user settings, preferences, or other data that needs to be stored persistently.\n\nThe main function of @AppStorage is to associate properties with the persistent storage of the application, so that the value of the property can be loaded when the application starts, and automatically persisted when it is changed. It uses UserDefaults to achieve data persistence.\n\nHere is a simple sample code:\n \n```Swift\nimport SwiftUI\n\nstruct ContentView: View {\n    @AppStorage(\"username\") private var username: String = \"Guest\"\n\n    var body: some View {\n        VStack {\n            Text(\"Welcome, \\(username)!\")\n                .font(.largeTitle)\n\n            Button(\"Logout\") {\n                // Clear the username and reset to default\n                username = \"Guest\"\n            }\n        }\n    }\n}\n```\nIn this example, we've used the @AppStorage property wrapper to associate the username property with the key \"username\" in the application's persistent storage. If a value for the \"username\" key has been saved at application startup, then that value will be loaded into the username property.\n\nIn the view, we can directly use the username property to display the welcome message. When the \"Logout\" button is clicked, we can update the username by setting the username property to the new value and persist it to the application's persistent storage.\n\nBy using the @AppStorage property wrapper, we can easily read and write to the application's persistent storage for user settings, preferences, or other data that needs to be stored persistently. It provides a convenient way to handle persistent data for applications.\n\n#### <font size=4 color=gray>*Reference*</font>\n[1] https://juejin.cn/post/6976448420722507784     \n[2] https://zhuanlan.zhihu.com/p/151286558      \n[3] https://zhuanlan.zhihu.com/p/349079593     \n[4] https://onevcat.com/2020/06/stateobject     \n","source":"_posts/SwiftUI/03. Basic Concepts of SwiftUI (3).md","raw":"---\ntitle: 03. Basic Concepts of SwiftUI (3)\ndate: 2023-09-06 20:30:00\ncategories: \n- [SwiftUI]\ntags:\n- State\n- binding\n- ObservableObject\n- StateObject\n- EnvironmentObject\n- FocusState\n- AppStorage\n---\n\n\n<font color=gray size=2>*It will take about 5 minutes to finish reading this article.*</font>\n\nThis article focuses on some common property wrappers in SwiftUI.\n\n#### <font size=4 color=#4169E1>1. @State</font> \nIn Swift, a computed property is a property that does not have a directly stored value, it is a calculated property value. Therefore, the mutating keyword is not allowed to modify computed properties. So code like the following is not allowed:\n```Swift\nmutating var body: some View\n```\nHowever, in SwiftUI, a special solution called property wrapper @State is provided, which is not only used to create mutable properties that can respond to user interaction and state changes, but also to share and pass data between views.\n```Swift\nimport SwiftUI\n\nstruct ContentView: View {\n    @State private var counter: Int = 0\n\n    var body: some View {\n        VStack {\n            Text(\"Counter: \\(counter)\")\n                .font(.largeTitle)\n\n            Button(\"Increment\") {\n                counter += 1\n            }\n        }\n    }\n}\n```\n@State allows us to bypass the limitations of structs: we know their properties cannot be changed because the struct is fixed, but @State allows SwiftUI to store that value alone where it can be modified. Let's take a look at its implementation:\n```Swift\n@frozen @propertyWrapper public struct State<Value> : DynamicProperty {\n\n    /// Creates the state with an initial wrapped value.\n    public init(wrappedValue value: Value)\n\n    /// Creates the state with an initial value.\n    public init(initialValue value: Value)\n\n    /// The underlying value referenced by the state variable.\n    public var wrappedValue: Value { get nonmutating set }\n\n    /// A binding to the state value.\n    public var projectedValue: Binding<Value> { get }\n}\n```\n(1) @propertyWrapper:   \nThis is a property tag indicating that State is a property wrapper.\n\n(2) Follow the DynamicProperty protocol:\nThis protocol is a special protocol used to indicate that the value of a property may change dynamically at runtime. This protocol completes the interface needed to create dependent operations on data (state) and views. Only a few interfaces are exposed right now, and we can't fully use it for now.\n```Swift\npublic protocol DynamicProperty {\n\n    /// Called immediately before the view's body() function is\n    /// executed, after updating the values of any dynamic properties\n    /// stored in `self`.\n    mutating func update()\n}\n```\n(3) Its projectedValue (projected value) is of Binding type. Binding is a first-level reference to data. It serves as a bridge for two-way binding of data (state) in SwiftUI, allowing data to be read and written without owning the data. We will introduce it separately later.\n```Swift\n@frozen @propertyWrapper @dynamicMemberLookup struct Binding<Value>\n```\n\n#### <font size=4 color=#4169E1>2. @binding</font> \nIn SwiftUI, @Binding is used to create a two-way-bindable property, which allows properties to be bound to mutable state in other views in order to share and synchronize data between multiple views.\n\nBecause sometimes we will pass a property of a view to a child node, but it cannot be directly passed to the child node, because the value transfer form in Swift is the value type transfer method, that is, a copy is passed to the child node past value.\n\nBut after being modified by the @Binding decorator, the attribute becomes a reference type, and the transfer becomes a reference transfer, so that the state of the parent-child view can be associated.\n\n```Swift\nimport SwiftUI\n\nstruct ContentView: View {\n    @State private var count: Int = 0\n\n    var body: some View {\n        VStack {\n            Text(\"Count: \\(count)\")\n                .font(.largeTitle)\n\n            ChildView(count: $count)\n        }\n    }\n}\n\nstruct ChildView: View {\n    @Binding var count: Int\n\n    var body: some View {\n        Button(\"Increment\") {\n            count += 1\n        }\n    }\n}\n```\n@Binding actually encapsulates a reference to a value and provides an interface for reading and writing the value. When the bound value changes, the binding will automatically notify its dependencies, thereby triggering updates and re-rendering.\n\n#### <font size=4 color=#4169E1>3. @ObservableObject</font> \n@ObservableObject is used to create observable objects that can be used by multiple independent Views. If you use @ObservedObject to decorate an object, then that object must implement the ObservableObject protocol, and then use @Published to decorate the property in the object, indicating that this property needs to be monitored by SwiftUI.\n```Swift\nimport SwiftUI\n\nclass UserData: ObservableObject {\n    @Published var name: String = \"John\"\n    @Published var age: Int = 30\n}\n\nstruct ContentView: View {\n    @ObservedObject var userData = UserData()\n\n    var body: some View {\n        VStack {\n            Text(\"Name: \\(userData.name)\")\n                .font(.largeTitle)\n\n            Text(\"Age: \\(userData.age)\")\n                .font(.largeTitle)\n\n            Button(\"Change Data\") {\n                userData.name = \"Jane\"\n                userData.age = 25\n            }\n        }\n    }\n}\n```\nIn this example, we create a custom class called UserData and mark its properties name and age as observable using the @Published property wrapper. This means that when these properties change, SwiftUI will automatically post a notification, and the associated views will be notified and automatically updated to reflect the new value.\n\nBy using @ObservableObject and @Published property wrappers, we can create observable data models in SwiftUI, and realize dynamic updates of data and synchronization of views. This mechanism makes building responsive user interfaces easier and more efficient.\n\n#### <font size=4 color=#4169E1>4. @StateObject</font> \n@State modifies value type data, and @StateObject is basically an upgraded version of @State for class.\n\nThe main function of @StateObject is to create an independent, observable object in the view and is responsible for managing the life cycle of the object.\n\nUnlike @ObservedObject, @StateObject does not reinitialize the object when the view is recreated, but keeps its state unchanged. This makes sharing and managing observables in view hierarchies more convenient and reliable. Let's compare it with an example:\n```Swift\nimport SwiftUI\n\nclass UserAuth: ObservableObject {\n    @Published var isLoggedIn: Bool = false\n    // Other user-related properties and methods... \n}\n\nstruct ContentView: View {\n    @StateObject var userAuth = UserAuth()\n\n    var body: some View {\n        VStack {\n            if userAuth.isLoggedIn {\n                Text(\"Welcome, User!\")\n                    .font(.largeTitle)\n            } else {\n                LoginView(userAuth: userAuth)\n            }\n        }\n    }\n}\n\nstruct LoginView: View {\n    @State private var username: String = \"\"\n    @State private var password: String = \"\"\n\n    @ObservedObject var userAuth: UserAuth\n\n    var body: some View {\n        VStack {\n            TextField(\"Username\", text: $username)\n                .textFieldStyle(RoundedBorderTextFieldStyle())\n            SecureField(\"Password\", text: $password)\n                .textFieldStyle(RoundedBorderTextFieldStyle())\n\n            Button(\"Login\") {\n                // Simulate authenticated users \n                if username == \"admin\" && password == \"password\" {\n                    userAuth.isLoggedIn = true\n                }\n            }\n        }\n    }\n}\n```\nIn the above example, UserAuth is an ObservableObject that holds the logged-in state isLoggedIn. In the ContentView, we create a persistent UserAuth object using the @StateObject property wrapper and display a welcome message or a login view depending on the user's login status.\n\nExample of using @ObservableObject: \n```Swift\n\nimport SwiftUI\n\nclass UserAuth: ObservableObject {\n    @Published var isLoggedIn: Bool = false\n    // Other user-related properties and methods... \n}\n\nstruct ContentView: View {\n    @ObservedObject var userAuth = UserAuth()\n\n    var body: some View {\n        VStack {\n            if userAuth.isLoggedIn {\n                Text(\"Welcome, User!\")\n                    .font(.largeTitle)\n            } else {\n                LoginView(userAuth: userAuth)\n            }\n        }\n    }\n}\n\nstruct LoginView: View {\n    @State private var username: String = \"\"\n    @State private var password: String = \"\"\n\n    @ObservedObject var userAuth: UserAuth\n\n    var body: some View {\n        VStack {\n            TextField(\"Username\", text: $username)\n                .textFieldStyle(RoundedBorderTextFieldStyle())\n            SecureField(\"Password\", text: $password)\n                .textFieldStyle(RoundedBorderTextFieldStyle())\n\n            Button(\"Login\") {\n                // Simulate authenticated users \n                if username == \"admin\" && password == \"password\" {\n                    userAuth.isLoggedIn = true\n                }\n            }\n        }\n    }\n}\n```\nIn this example, we also use UserAuth as an ObservableObject to manage the user's login status. The difference is that in the ContentView, we used the @ObservedObject property wrapper to create the UserAuth object. This means that whenever the ContentView is recreated, a new instance of the UserAuth object is created.\n\nTo sum up, @ObservedObject will be created multiple times with the creation of View regardless of storage, which is suitable for temporary and partial data models.\n\nWhile @StateObject guarantees that the object will only be created once, it is suitable for objects that need to share and maintain persistent state in the entire view hierarchy.\n\nTherefore, if it is an ObservableObject model object created by itself in View, using @StateObject will most likely be a more correct choice.\n\n#### <font size=4 color=#4169E1>5. @EnvironmentObject</font> \nIn SwiftUI, the main function of @EnvironmentObject is to share observable objects throughout the application and make them update automatically in views. By setting an observable as an environment variable, it is available throughout the view hierarchy without having to manually pass it to each view.\n\n```Swift\nimport SwiftUI\n\nclass UserData: ObservableObject {\n    @Published var name: String = \"John\"\n}\n\nstruct ContentView: View {\n    @EnvironmentObject var userData: UserData\n\n    var body: some View {\n        VStack {\n            Text(\"Name: \\(userData.name)\")\n                .font(.largeTitle)\n\n            Button(\"Change Name\") {\n                userData.name = \"Jane\"\n            }\n        }\n    }\n}\n\nstruct DetailView: View {\n    @EnvironmentObject var userData: UserData\n\n    var body: some View {\n        Text(\"Welcome, \\(userData.name)!\")\n            .font(.title)\n    }\n}\n\nstruct AppView: View {\n    var body: some View {\n        ContentView()\n            .environmentObject(UserData())\n    }\n}\n\n@main\nstruct MyApp: App {\n    var body: some Scene {\n        WindowGroup {\n            AppView()\n        }\n    }\n}\n```\nIn this example, we created a custom class called UserData and marked it as ObservableObject. We then use @EnvironmentObject property wrappers in ContentView and DetailView to set the UserData object as the environment object.\n\nIn ContentView, we can access the properties of the userData object and update them as needed. In the DetailView, we can also access the same userData object and use its properties to display the welcome message.\n\nIn the AppView, we use the environmentObject(_:) function to set the UserData instance as the application's environment object so that it is shared across the application.\n\nBy using @EnvironmentObject property wrappers, we can share and access global observable objects throughout the application, making data transfer and synchronization easier and more convenient.\n\n#### <font size=4 color=#4169E1>5. @FocusState</font> \nIn SwiftUI, @FocusState is used to manage the focus state in a view. It allows you to track and control focus in the UI for automation if needed.\n\n@FocusState provides a mechanism to track and control focus state in order to manage keyboard interactions and user input in the view hierarchy. It can be used to automatically switch focus between multiple text fields or views, and to perform focus-related actions such as submitting a form or handling user input.\n\nHere is a simple sample code:\n\n```Swift\nimport SwiftUI\n\nstruct ContentView: View {\n    @State private var name: String = \"\"\n    @FocusState private var isNameFocused: Bool\n\n    var body: some View {\n        VStack {\n            TextField(\"Name\", text: $name)\n                .focused($isNameFocused)\n\n            Button(\"Submit\") {\n                isNameFocused = false\n                // Execute the commit operation\n                print(\"Submitted: \\(name)\")\n            }\n        }\n    }\n}\n```\nIn this example, we have used the @State property wrapper in the ContentView to store the value of the name. We also use the @FocusState property wrapper to manage the focus state of the name text field.\n\nBy using the .focused($isNameFocused) modifier on the TextField, we associate the focus state with the name text field. This means that when the value of isNameFocused is true, the name text field will get focus.\n\nIn the action closure of the submit button, we set the value of isNameFocused to false to defocus the name text field. You can then perform commit operations or other focus-related operations.\n\n#### <font size=4 color=#4169E1>6. @AppStorage</font> \nIn SwiftUI, @AppStorage is used to conveniently read and write values in the app's persistent storage. It provides an easy way to handle application user settings, preferences, or other data that needs to be stored persistently.\n\nThe main function of @AppStorage is to associate properties with the persistent storage of the application, so that the value of the property can be loaded when the application starts, and automatically persisted when it is changed. It uses UserDefaults to achieve data persistence.\n\nHere is a simple sample code:\n \n```Swift\nimport SwiftUI\n\nstruct ContentView: View {\n    @AppStorage(\"username\") private var username: String = \"Guest\"\n\n    var body: some View {\n        VStack {\n            Text(\"Welcome, \\(username)!\")\n                .font(.largeTitle)\n\n            Button(\"Logout\") {\n                // Clear the username and reset to default\n                username = \"Guest\"\n            }\n        }\n    }\n}\n```\nIn this example, we've used the @AppStorage property wrapper to associate the username property with the key \"username\" in the application's persistent storage. If a value for the \"username\" key has been saved at application startup, then that value will be loaded into the username property.\n\nIn the view, we can directly use the username property to display the welcome message. When the \"Logout\" button is clicked, we can update the username by setting the username property to the new value and persist it to the application's persistent storage.\n\nBy using the @AppStorage property wrapper, we can easily read and write to the application's persistent storage for user settings, preferences, or other data that needs to be stored persistently. It provides a convenient way to handle persistent data for applications.\n\n#### <font size=4 color=gray>*Reference*</font>\n[1] https://juejin.cn/post/6976448420722507784     \n[2] https://zhuanlan.zhihu.com/p/151286558      \n[3] https://zhuanlan.zhihu.com/p/349079593     \n[4] https://onevcat.com/2020/06/stateobject     \n","slug":"SwiftUI/03. Basic Concepts of SwiftUI (3)","published":1,"updated":"2023-09-22T15:16:19.894Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr4i000bvu0m8m2beqjc","content":"<p><font color=gray size=2><em>It will take about 5 minutes to finish reading this article.</em></font></p>\n<p>This article focuses on some common property wrappers in SwiftUI.</p>\n<h4 id=\"1-State\"><a href=\"#1-State\" class=\"headerlink\" title=\"1. @State\"></a><font size=4 color=#4169E1>1. @State</font></h4><p>In Swift, a computed property is a property that does not have a directly stored value, it is a calculated property value. Therefore, the mutating keyword is not allowed to modify computed properties. So code like the following is not allowed:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">mutating</span> <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span></span><br></pre></td></tr></table></figure>\n<p>However, in SwiftUI, a special solution called property wrapper @State is provided, which is not only used to create mutable properties that can respond to user interaction and state changes, but also to share and pass data between views.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> SwiftUI</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span>: <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@State</span> <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> counter: <span class=\"type\">Int</span> <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">VStack</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Text</span>(<span class=\"string\">&quot;Counter: <span class=\"subst\">\\(counter)</span>&quot;</span>)</span><br><span class=\"line\">                .font(.largeTitle)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">Button</span>(<span class=\"string\">&quot;Increment&quot;</span>) &#123;</span><br><span class=\"line\">                counter <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>@State allows us to bypass the limitations of structs: we know their properties cannot be changed because the struct is fixed, but @State allows SwiftUI to store that value alone where it can be modified. Let’s take a look at its implementation:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@frozen</span> <span class=\"keyword\">@propertyWrapper</span> <span class=\"keyword\">public</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">State</span>&lt;<span class=\"title class_\">Value</span>&gt; : <span class=\"title class_\">DynamicProperty</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// Creates the state with an initial wrapped value.</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">init</span>(<span class=\"params\">wrappedValue</span> <span class=\"params\">value</span>: <span class=\"type\">Value</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// Creates the state with an initial value.</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">init</span>(<span class=\"params\">initialValue</span> <span class=\"params\">value</span>: <span class=\"type\">Value</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// The underlying value referenced by the state variable.</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> wrappedValue: <span class=\"type\">Value</span> &#123; <span class=\"keyword\">get</span> <span class=\"keyword\">nonmutating</span> <span class=\"keyword\">set</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// A binding to the state value.</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> projectedValue: <span class=\"type\">Binding</span>&lt;<span class=\"type\">Value</span>&gt; &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>(1) @propertyWrapper:<br>This is a property tag indicating that State is a property wrapper.</p>\n<p>(2) Follow the DynamicProperty protocol:<br>This protocol is a special protocol used to indicate that the value of a property may change dynamically at runtime. This protocol completes the interface needed to create dependent operations on data (state) and views. Only a few interfaces are exposed right now, and we can’t fully use it for now.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">protocol</span> <span class=\"title class_\">DynamicProperty</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// Called immediately before the view&#x27;s body() function is</span></span><br><span class=\"line\">    <span class=\"comment\">/// executed, after updating the values of any dynamic properties</span></span><br><span class=\"line\">    <span class=\"comment\">/// stored in `self`.</span></span><br><span class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">update</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>(3) Its projectedValue (projected value) is of Binding type. Binding is a first-level reference to data. It serves as a bridge for two-way binding of data (state) in SwiftUI, allowing data to be read and written without owning the data. We will introduce it separately later.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@frozen</span> <span class=\"keyword\">@propertyWrapper</span> <span class=\"keyword\">@dynamicMemberLookup</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">Binding</span>&lt;<span class=\"title class_\">Value</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-binding\"><a href=\"#2-binding\" class=\"headerlink\" title=\"2. @binding\"></a><font size=4 color=#4169E1>2. @binding</font></h4><p>In SwiftUI, @Binding is used to create a two-way-bindable property, which allows properties to be bound to mutable state in other views in order to share and synchronize data between multiple views.</p>\n<p>Because sometimes we will pass a property of a view to a child node, but it cannot be directly passed to the child node, because the value transfer form in Swift is the value type transfer method, that is, a copy is passed to the child node past value.</p>\n<p>But after being modified by the @Binding decorator, the attribute becomes a reference type, and the transfer becomes a reference transfer, so that the state of the parent-child view can be associated.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> SwiftUI</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span>: <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@State</span> <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> count: <span class=\"type\">Int</span> <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">VStack</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Text</span>(<span class=\"string\">&quot;Count: <span class=\"subst\">\\(count)</span>&quot;</span>)</span><br><span class=\"line\">                .font(.largeTitle)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">ChildView</span>(count: <span class=\"variable\">$count</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ChildView</span>: <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Binding</span> <span class=\"keyword\">var</span> count: <span class=\"type\">Int</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Button</span>(<span class=\"string\">&quot;Increment&quot;</span>) &#123;</span><br><span class=\"line\">            count <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>@Binding actually encapsulates a reference to a value and provides an interface for reading and writing the value. When the bound value changes, the binding will automatically notify its dependencies, thereby triggering updates and re-rendering.</p>\n<h4 id=\"3-ObservableObject\"><a href=\"#3-ObservableObject\" class=\"headerlink\" title=\"3. @ObservableObject\"></a><font size=4 color=#4169E1>3. @ObservableObject</font></h4><p>@ObservableObject is used to create observable objects that can be used by multiple independent Views. If you use @ObservedObject to decorate an object, then that object must implement the ObservableObject protocol, and then use @Published to decorate the property in the object, indicating that this property needs to be monitored by SwiftUI.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> SwiftUI</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UserData</span>: <span class=\"title class_\">ObservableObject</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Published</span> <span class=\"keyword\">var</span> name: <span class=\"type\">String</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;John&quot;</span></span><br><span class=\"line\">    <span class=\"meta\">@Published</span> <span class=\"keyword\">var</span> age: <span class=\"type\">Int</span> <span class=\"operator\">=</span> <span class=\"number\">30</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span>: <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@ObservedObject</span> <span class=\"keyword\">var</span> userData <span class=\"operator\">=</span> <span class=\"type\">UserData</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">VStack</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Text</span>(<span class=\"string\">&quot;Name: <span class=\"subst\">\\(userData.name)</span>&quot;</span>)</span><br><span class=\"line\">                .font(.largeTitle)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">Text</span>(<span class=\"string\">&quot;Age: <span class=\"subst\">\\(userData.age)</span>&quot;</span>)</span><br><span class=\"line\">                .font(.largeTitle)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">Button</span>(<span class=\"string\">&quot;Change Data&quot;</span>) &#123;</span><br><span class=\"line\">                userData.name <span class=\"operator\">=</span> <span class=\"string\">&quot;Jane&quot;</span></span><br><span class=\"line\">                userData.age <span class=\"operator\">=</span> <span class=\"number\">25</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>In this example, we create a custom class called UserData and mark its properties name and age as observable using the @Published property wrapper. This means that when these properties change, SwiftUI will automatically post a notification, and the associated views will be notified and automatically updated to reflect the new value.</p>\n<p>By using @ObservableObject and @Published property wrappers, we can create observable data models in SwiftUI, and realize dynamic updates of data and synchronization of views. This mechanism makes building responsive user interfaces easier and more efficient.</p>\n<h4 id=\"4-StateObject\"><a href=\"#4-StateObject\" class=\"headerlink\" title=\"4. @StateObject\"></a><font size=4 color=#4169E1>4. @StateObject</font></h4><p>@State modifies value type data, and @StateObject is basically an upgraded version of @State for class.</p>\n<p>The main function of @StateObject is to create an independent, observable object in the view and is responsible for managing the life cycle of the object.</p>\n<p>Unlike @ObservedObject, @StateObject does not reinitialize the object when the view is recreated, but keeps its state unchanged. This makes sharing and managing observables in view hierarchies more convenient and reliable. Let’s compare it with an example:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> SwiftUI</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UserAuth</span>: <span class=\"title class_\">ObservableObject</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Published</span> <span class=\"keyword\">var</span> isLoggedIn: <span class=\"type\">Bool</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"comment\">// Other user-related properties and methods... </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span>: <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@StateObject</span> <span class=\"keyword\">var</span> userAuth <span class=\"operator\">=</span> <span class=\"type\">UserAuth</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">VStack</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> userAuth.isLoggedIn &#123;</span><br><span class=\"line\">                <span class=\"type\">Text</span>(<span class=\"string\">&quot;Welcome, User!&quot;</span>)</span><br><span class=\"line\">                    .font(.largeTitle)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"type\">LoginView</span>(userAuth: userAuth)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">LoginView</span>: <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@State</span> <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> username: <span class=\"type\">String</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"meta\">@State</span> <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> password: <span class=\"type\">String</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ObservedObject</span> <span class=\"keyword\">var</span> userAuth: <span class=\"type\">UserAuth</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">VStack</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">TextField</span>(<span class=\"string\">&quot;Username&quot;</span>, text: <span class=\"variable\">$username</span>)</span><br><span class=\"line\">                .textFieldStyle(<span class=\"type\">RoundedBorderTextFieldStyle</span>())</span><br><span class=\"line\">            <span class=\"type\">SecureField</span>(<span class=\"string\">&quot;Password&quot;</span>, text: <span class=\"variable\">$password</span>)</span><br><span class=\"line\">                .textFieldStyle(<span class=\"type\">RoundedBorderTextFieldStyle</span>())</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">Button</span>(<span class=\"string\">&quot;Login&quot;</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Simulate authenticated users </span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> username <span class=\"operator\">==</span> <span class=\"string\">&quot;admin&quot;</span> <span class=\"operator\">&amp;&amp;</span> password <span class=\"operator\">==</span> <span class=\"string\">&quot;password&quot;</span> &#123;</span><br><span class=\"line\">                    userAuth.isLoggedIn <span class=\"operator\">=</span> <span class=\"literal\">true</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>In the above example, UserAuth is an ObservableObject that holds the logged-in state isLoggedIn. In the ContentView, we create a persistent UserAuth object using the @StateObject property wrapper and display a welcome message or a login view depending on the user’s login status.</p>\n<p>Example of using @ObservableObject: </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> SwiftUI</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UserAuth</span>: <span class=\"title class_\">ObservableObject</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Published</span> <span class=\"keyword\">var</span> isLoggedIn: <span class=\"type\">Bool</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"comment\">// Other user-related properties and methods... </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span>: <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@ObservedObject</span> <span class=\"keyword\">var</span> userAuth <span class=\"operator\">=</span> <span class=\"type\">UserAuth</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">VStack</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> userAuth.isLoggedIn &#123;</span><br><span class=\"line\">                <span class=\"type\">Text</span>(<span class=\"string\">&quot;Welcome, User!&quot;</span>)</span><br><span class=\"line\">                    .font(.largeTitle)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"type\">LoginView</span>(userAuth: userAuth)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">LoginView</span>: <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@State</span> <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> username: <span class=\"type\">String</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"meta\">@State</span> <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> password: <span class=\"type\">String</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ObservedObject</span> <span class=\"keyword\">var</span> userAuth: <span class=\"type\">UserAuth</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">VStack</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">TextField</span>(<span class=\"string\">&quot;Username&quot;</span>, text: <span class=\"variable\">$username</span>)</span><br><span class=\"line\">                .textFieldStyle(<span class=\"type\">RoundedBorderTextFieldStyle</span>())</span><br><span class=\"line\">            <span class=\"type\">SecureField</span>(<span class=\"string\">&quot;Password&quot;</span>, text: <span class=\"variable\">$password</span>)</span><br><span class=\"line\">                .textFieldStyle(<span class=\"type\">RoundedBorderTextFieldStyle</span>())</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">Button</span>(<span class=\"string\">&quot;Login&quot;</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Simulate authenticated users </span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> username <span class=\"operator\">==</span> <span class=\"string\">&quot;admin&quot;</span> <span class=\"operator\">&amp;&amp;</span> password <span class=\"operator\">==</span> <span class=\"string\">&quot;password&quot;</span> &#123;</span><br><span class=\"line\">                    userAuth.isLoggedIn <span class=\"operator\">=</span> <span class=\"literal\">true</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>In this example, we also use UserAuth as an ObservableObject to manage the user’s login status. The difference is that in the ContentView, we used the @ObservedObject property wrapper to create the UserAuth object. This means that whenever the ContentView is recreated, a new instance of the UserAuth object is created.</p>\n<p>To sum up, @ObservedObject will be created multiple times with the creation of View regardless of storage, which is suitable for temporary and partial data models.</p>\n<p>While @StateObject guarantees that the object will only be created once, it is suitable for objects that need to share and maintain persistent state in the entire view hierarchy.</p>\n<p>Therefore, if it is an ObservableObject model object created by itself in View, using @StateObject will most likely be a more correct choice.</p>\n<h4 id=\"5-EnvironmentObject\"><a href=\"#5-EnvironmentObject\" class=\"headerlink\" title=\"5. @EnvironmentObject\"></a><font size=4 color=#4169E1>5. @EnvironmentObject</font></h4><p>In SwiftUI, the main function of @EnvironmentObject is to share observable objects throughout the application and make them update automatically in views. By setting an observable as an environment variable, it is available throughout the view hierarchy without having to manually pass it to each view.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> SwiftUI</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UserData</span>: <span class=\"title class_\">ObservableObject</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Published</span> <span class=\"keyword\">var</span> name: <span class=\"type\">String</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;John&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span>: <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@EnvironmentObject</span> <span class=\"keyword\">var</span> userData: <span class=\"type\">UserData</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">VStack</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Text</span>(<span class=\"string\">&quot;Name: <span class=\"subst\">\\(userData.name)</span>&quot;</span>)</span><br><span class=\"line\">                .font(.largeTitle)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">Button</span>(<span class=\"string\">&quot;Change Name&quot;</span>) &#123;</span><br><span class=\"line\">                userData.name <span class=\"operator\">=</span> <span class=\"string\">&quot;Jane&quot;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">DetailView</span>: <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@EnvironmentObject</span> <span class=\"keyword\">var</span> userData: <span class=\"type\">UserData</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Text</span>(<span class=\"string\">&quot;Welcome, <span class=\"subst\">\\(userData.name)</span>!&quot;</span>)</span><br><span class=\"line\">            .font(.title)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">AppView</span>: <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ContentView</span>()</span><br><span class=\"line\">            .environmentObject(<span class=\"type\">UserData</span>())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@main</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">MyApp</span>: <span class=\"title class_\">App</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">Scene</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">WindowGroup</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">AppView</span>()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>In this example, we created a custom class called UserData and marked it as ObservableObject. We then use @EnvironmentObject property wrappers in ContentView and DetailView to set the UserData object as the environment object.</p>\n<p>In ContentView, we can access the properties of the userData object and update them as needed. In the DetailView, we can also access the same userData object and use its properties to display the welcome message.</p>\n<p>In the AppView, we use the environmentObject(_:) function to set the UserData instance as the application’s environment object so that it is shared across the application.</p>\n<p>By using @EnvironmentObject property wrappers, we can share and access global observable objects throughout the application, making data transfer and synchronization easier and more convenient.</p>\n<h4 id=\"5-FocusState\"><a href=\"#5-FocusState\" class=\"headerlink\" title=\"5. @FocusState\"></a><font size=4 color=#4169E1>5. @FocusState</font></h4><p>In SwiftUI, @FocusState is used to manage the focus state in a view. It allows you to track and control focus in the UI for automation if needed.</p>\n<p>@FocusState provides a mechanism to track and control focus state in order to manage keyboard interactions and user input in the view hierarchy. It can be used to automatically switch focus between multiple text fields or views, and to perform focus-related actions such as submitting a form or handling user input.</p>\n<p>Here is a simple sample code:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> SwiftUI</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span>: <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@State</span> <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> name: <span class=\"type\">String</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"meta\">@FocusState</span> <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> isNameFocused: <span class=\"type\">Bool</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">VStack</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">TextField</span>(<span class=\"string\">&quot;Name&quot;</span>, text: <span class=\"variable\">$name</span>)</span><br><span class=\"line\">                .focused(<span class=\"variable\">$isNameFocused</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">Button</span>(<span class=\"string\">&quot;Submit&quot;</span>) &#123;</span><br><span class=\"line\">                isNameFocused <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">                <span class=\"comment\">// Execute the commit operation</span></span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Submitted: <span class=\"subst\">\\(name)</span>&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>In this example, we have used the @State property wrapper in the ContentView to store the value of the name. We also use the @FocusState property wrapper to manage the focus state of the name text field.</p>\n<p>By using the .focused($isNameFocused) modifier on the TextField, we associate the focus state with the name text field. This means that when the value of isNameFocused is true, the name text field will get focus.</p>\n<p>In the action closure of the submit button, we set the value of isNameFocused to false to defocus the name text field. You can then perform commit operations or other focus-related operations.</p>\n<h4 id=\"6-AppStorage\"><a href=\"#6-AppStorage\" class=\"headerlink\" title=\"6. @AppStorage\"></a><font size=4 color=#4169E1>6. @AppStorage</font></h4><p>In SwiftUI, @AppStorage is used to conveniently read and write values in the app’s persistent storage. It provides an easy way to handle application user settings, preferences, or other data that needs to be stored persistently.</p>\n<p>The main function of @AppStorage is to associate properties with the persistent storage of the application, so that the value of the property can be loaded when the application starts, and automatically persisted when it is changed. It uses UserDefaults to achieve data persistence.</p>\n<p>Here is a simple sample code:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> SwiftUI</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span>: <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@AppStorage</span>(<span class=\"string\">&quot;username&quot;</span>) <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> username: <span class=\"type\">String</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Guest&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">VStack</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Text</span>(<span class=\"string\">&quot;Welcome, <span class=\"subst\">\\(username)</span>!&quot;</span>)</span><br><span class=\"line\">                .font(.largeTitle)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">Button</span>(<span class=\"string\">&quot;Logout&quot;</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Clear the username and reset to default</span></span><br><span class=\"line\">                username <span class=\"operator\">=</span> <span class=\"string\">&quot;Guest&quot;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>In this example, we’ve used the @AppStorage property wrapper to associate the username property with the key “username” in the application’s persistent storage. If a value for the “username” key has been saved at application startup, then that value will be loaded into the username property.</p>\n<p>In the view, we can directly use the username property to display the welcome message. When the “Logout” button is clicked, we can update the username by setting the username property to the new value and persist it to the application’s persistent storage.</p>\n<p>By using the @AppStorage property wrapper, we can easily read and write to the application’s persistent storage for user settings, preferences, or other data that needs to be stored persistently. It provides a convenient way to handle persistent data for applications.</p>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=4 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://juejin.cn/post/6976448420722507784\">https://juejin.cn/post/6976448420722507784</a><br>[2] <a href=\"https://zhuanlan.zhihu.com/p/151286558\">https://zhuanlan.zhihu.com/p/151286558</a><br>[3] <a href=\"https://zhuanlan.zhihu.com/p/349079593\">https://zhuanlan.zhihu.com/p/349079593</a><br>[4] <a href=\"https://onevcat.com/2020/06/stateobject\">https://onevcat.com/2020/06/stateobject</a>     </p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 5 minutes to finish reading this article.</em></font></p>\n<p>This article focuses on some common property wrappers in SwiftUI.</p>\n<h4 id=\"1-State\"><a href=\"#1-State\" class=\"headerlink\" title=\"1. @State\"></a><font size=4 color=#4169E1>1. @State</font></h4><p>In Swift, a computed property is a property that does not have a directly stored value, it is a calculated property value. Therefore, the mutating keyword is not allowed to modify computed properties. So code like the following is not allowed:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">mutating</span> <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span></span><br></pre></td></tr></table></figure>\n<p>However, in SwiftUI, a special solution called property wrapper @State is provided, which is not only used to create mutable properties that can respond to user interaction and state changes, but also to share and pass data between views.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> SwiftUI</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span>: <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@State</span> <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> counter: <span class=\"type\">Int</span> <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">VStack</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Text</span>(<span class=\"string\">&quot;Counter: <span class=\"subst\">\\(counter)</span>&quot;</span>)</span><br><span class=\"line\">                .font(.largeTitle)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">Button</span>(<span class=\"string\">&quot;Increment&quot;</span>) &#123;</span><br><span class=\"line\">                counter <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>@State allows us to bypass the limitations of structs: we know their properties cannot be changed because the struct is fixed, but @State allows SwiftUI to store that value alone where it can be modified. Let’s take a look at its implementation:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@frozen</span> <span class=\"keyword\">@propertyWrapper</span> <span class=\"keyword\">public</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">State</span>&lt;<span class=\"title class_\">Value</span>&gt; : <span class=\"title class_\">DynamicProperty</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// Creates the state with an initial wrapped value.</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">init</span>(<span class=\"params\">wrappedValue</span> <span class=\"params\">value</span>: <span class=\"type\">Value</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// Creates the state with an initial value.</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">init</span>(<span class=\"params\">initialValue</span> <span class=\"params\">value</span>: <span class=\"type\">Value</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// The underlying value referenced by the state variable.</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> wrappedValue: <span class=\"type\">Value</span> &#123; <span class=\"keyword\">get</span> <span class=\"keyword\">nonmutating</span> <span class=\"keyword\">set</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// A binding to the state value.</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> projectedValue: <span class=\"type\">Binding</span>&lt;<span class=\"type\">Value</span>&gt; &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>(1) @propertyWrapper:<br>This is a property tag indicating that State is a property wrapper.</p>\n<p>(2) Follow the DynamicProperty protocol:<br>This protocol is a special protocol used to indicate that the value of a property may change dynamically at runtime. This protocol completes the interface needed to create dependent operations on data (state) and views. Only a few interfaces are exposed right now, and we can’t fully use it for now.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">protocol</span> <span class=\"title class_\">DynamicProperty</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// Called immediately before the view&#x27;s body() function is</span></span><br><span class=\"line\">    <span class=\"comment\">/// executed, after updating the values of any dynamic properties</span></span><br><span class=\"line\">    <span class=\"comment\">/// stored in `self`.</span></span><br><span class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">update</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>(3) Its projectedValue (projected value) is of Binding type. Binding is a first-level reference to data. It serves as a bridge for two-way binding of data (state) in SwiftUI, allowing data to be read and written without owning the data. We will introduce it separately later.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@frozen</span> <span class=\"keyword\">@propertyWrapper</span> <span class=\"keyword\">@dynamicMemberLookup</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">Binding</span>&lt;<span class=\"title class_\">Value</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-binding\"><a href=\"#2-binding\" class=\"headerlink\" title=\"2. @binding\"></a><font size=4 color=#4169E1>2. @binding</font></h4><p>In SwiftUI, @Binding is used to create a two-way-bindable property, which allows properties to be bound to mutable state in other views in order to share and synchronize data between multiple views.</p>\n<p>Because sometimes we will pass a property of a view to a child node, but it cannot be directly passed to the child node, because the value transfer form in Swift is the value type transfer method, that is, a copy is passed to the child node past value.</p>\n<p>But after being modified by the @Binding decorator, the attribute becomes a reference type, and the transfer becomes a reference transfer, so that the state of the parent-child view can be associated.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> SwiftUI</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span>: <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@State</span> <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> count: <span class=\"type\">Int</span> <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">VStack</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Text</span>(<span class=\"string\">&quot;Count: <span class=\"subst\">\\(count)</span>&quot;</span>)</span><br><span class=\"line\">                .font(.largeTitle)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">ChildView</span>(count: <span class=\"variable\">$count</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ChildView</span>: <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Binding</span> <span class=\"keyword\">var</span> count: <span class=\"type\">Int</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Button</span>(<span class=\"string\">&quot;Increment&quot;</span>) &#123;</span><br><span class=\"line\">            count <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>@Binding actually encapsulates a reference to a value and provides an interface for reading and writing the value. When the bound value changes, the binding will automatically notify its dependencies, thereby triggering updates and re-rendering.</p>\n<h4 id=\"3-ObservableObject\"><a href=\"#3-ObservableObject\" class=\"headerlink\" title=\"3. @ObservableObject\"></a><font size=4 color=#4169E1>3. @ObservableObject</font></h4><p>@ObservableObject is used to create observable objects that can be used by multiple independent Views. If you use @ObservedObject to decorate an object, then that object must implement the ObservableObject protocol, and then use @Published to decorate the property in the object, indicating that this property needs to be monitored by SwiftUI.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> SwiftUI</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UserData</span>: <span class=\"title class_\">ObservableObject</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Published</span> <span class=\"keyword\">var</span> name: <span class=\"type\">String</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;John&quot;</span></span><br><span class=\"line\">    <span class=\"meta\">@Published</span> <span class=\"keyword\">var</span> age: <span class=\"type\">Int</span> <span class=\"operator\">=</span> <span class=\"number\">30</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span>: <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@ObservedObject</span> <span class=\"keyword\">var</span> userData <span class=\"operator\">=</span> <span class=\"type\">UserData</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">VStack</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Text</span>(<span class=\"string\">&quot;Name: <span class=\"subst\">\\(userData.name)</span>&quot;</span>)</span><br><span class=\"line\">                .font(.largeTitle)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">Text</span>(<span class=\"string\">&quot;Age: <span class=\"subst\">\\(userData.age)</span>&quot;</span>)</span><br><span class=\"line\">                .font(.largeTitle)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">Button</span>(<span class=\"string\">&quot;Change Data&quot;</span>) &#123;</span><br><span class=\"line\">                userData.name <span class=\"operator\">=</span> <span class=\"string\">&quot;Jane&quot;</span></span><br><span class=\"line\">                userData.age <span class=\"operator\">=</span> <span class=\"number\">25</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>In this example, we create a custom class called UserData and mark its properties name and age as observable using the @Published property wrapper. This means that when these properties change, SwiftUI will automatically post a notification, and the associated views will be notified and automatically updated to reflect the new value.</p>\n<p>By using @ObservableObject and @Published property wrappers, we can create observable data models in SwiftUI, and realize dynamic updates of data and synchronization of views. This mechanism makes building responsive user interfaces easier and more efficient.</p>\n<h4 id=\"4-StateObject\"><a href=\"#4-StateObject\" class=\"headerlink\" title=\"4. @StateObject\"></a><font size=4 color=#4169E1>4. @StateObject</font></h4><p>@State modifies value type data, and @StateObject is basically an upgraded version of @State for class.</p>\n<p>The main function of @StateObject is to create an independent, observable object in the view and is responsible for managing the life cycle of the object.</p>\n<p>Unlike @ObservedObject, @StateObject does not reinitialize the object when the view is recreated, but keeps its state unchanged. This makes sharing and managing observables in view hierarchies more convenient and reliable. Let’s compare it with an example:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> SwiftUI</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UserAuth</span>: <span class=\"title class_\">ObservableObject</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Published</span> <span class=\"keyword\">var</span> isLoggedIn: <span class=\"type\">Bool</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"comment\">// Other user-related properties and methods... </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span>: <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@StateObject</span> <span class=\"keyword\">var</span> userAuth <span class=\"operator\">=</span> <span class=\"type\">UserAuth</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">VStack</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> userAuth.isLoggedIn &#123;</span><br><span class=\"line\">                <span class=\"type\">Text</span>(<span class=\"string\">&quot;Welcome, User!&quot;</span>)</span><br><span class=\"line\">                    .font(.largeTitle)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"type\">LoginView</span>(userAuth: userAuth)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">LoginView</span>: <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@State</span> <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> username: <span class=\"type\">String</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"meta\">@State</span> <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> password: <span class=\"type\">String</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ObservedObject</span> <span class=\"keyword\">var</span> userAuth: <span class=\"type\">UserAuth</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">VStack</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">TextField</span>(<span class=\"string\">&quot;Username&quot;</span>, text: <span class=\"variable\">$username</span>)</span><br><span class=\"line\">                .textFieldStyle(<span class=\"type\">RoundedBorderTextFieldStyle</span>())</span><br><span class=\"line\">            <span class=\"type\">SecureField</span>(<span class=\"string\">&quot;Password&quot;</span>, text: <span class=\"variable\">$password</span>)</span><br><span class=\"line\">                .textFieldStyle(<span class=\"type\">RoundedBorderTextFieldStyle</span>())</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">Button</span>(<span class=\"string\">&quot;Login&quot;</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Simulate authenticated users </span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> username <span class=\"operator\">==</span> <span class=\"string\">&quot;admin&quot;</span> <span class=\"operator\">&amp;&amp;</span> password <span class=\"operator\">==</span> <span class=\"string\">&quot;password&quot;</span> &#123;</span><br><span class=\"line\">                    userAuth.isLoggedIn <span class=\"operator\">=</span> <span class=\"literal\">true</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>In the above example, UserAuth is an ObservableObject that holds the logged-in state isLoggedIn. In the ContentView, we create a persistent UserAuth object using the @StateObject property wrapper and display a welcome message or a login view depending on the user’s login status.</p>\n<p>Example of using @ObservableObject: </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> SwiftUI</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UserAuth</span>: <span class=\"title class_\">ObservableObject</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Published</span> <span class=\"keyword\">var</span> isLoggedIn: <span class=\"type\">Bool</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"comment\">// Other user-related properties and methods... </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span>: <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@ObservedObject</span> <span class=\"keyword\">var</span> userAuth <span class=\"operator\">=</span> <span class=\"type\">UserAuth</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">VStack</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> userAuth.isLoggedIn &#123;</span><br><span class=\"line\">                <span class=\"type\">Text</span>(<span class=\"string\">&quot;Welcome, User!&quot;</span>)</span><br><span class=\"line\">                    .font(.largeTitle)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"type\">LoginView</span>(userAuth: userAuth)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">LoginView</span>: <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@State</span> <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> username: <span class=\"type\">String</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"meta\">@State</span> <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> password: <span class=\"type\">String</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ObservedObject</span> <span class=\"keyword\">var</span> userAuth: <span class=\"type\">UserAuth</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">VStack</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">TextField</span>(<span class=\"string\">&quot;Username&quot;</span>, text: <span class=\"variable\">$username</span>)</span><br><span class=\"line\">                .textFieldStyle(<span class=\"type\">RoundedBorderTextFieldStyle</span>())</span><br><span class=\"line\">            <span class=\"type\">SecureField</span>(<span class=\"string\">&quot;Password&quot;</span>, text: <span class=\"variable\">$password</span>)</span><br><span class=\"line\">                .textFieldStyle(<span class=\"type\">RoundedBorderTextFieldStyle</span>())</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">Button</span>(<span class=\"string\">&quot;Login&quot;</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Simulate authenticated users </span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> username <span class=\"operator\">==</span> <span class=\"string\">&quot;admin&quot;</span> <span class=\"operator\">&amp;&amp;</span> password <span class=\"operator\">==</span> <span class=\"string\">&quot;password&quot;</span> &#123;</span><br><span class=\"line\">                    userAuth.isLoggedIn <span class=\"operator\">=</span> <span class=\"literal\">true</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>In this example, we also use UserAuth as an ObservableObject to manage the user’s login status. The difference is that in the ContentView, we used the @ObservedObject property wrapper to create the UserAuth object. This means that whenever the ContentView is recreated, a new instance of the UserAuth object is created.</p>\n<p>To sum up, @ObservedObject will be created multiple times with the creation of View regardless of storage, which is suitable for temporary and partial data models.</p>\n<p>While @StateObject guarantees that the object will only be created once, it is suitable for objects that need to share and maintain persistent state in the entire view hierarchy.</p>\n<p>Therefore, if it is an ObservableObject model object created by itself in View, using @StateObject will most likely be a more correct choice.</p>\n<h4 id=\"5-EnvironmentObject\"><a href=\"#5-EnvironmentObject\" class=\"headerlink\" title=\"5. @EnvironmentObject\"></a><font size=4 color=#4169E1>5. @EnvironmentObject</font></h4><p>In SwiftUI, the main function of @EnvironmentObject is to share observable objects throughout the application and make them update automatically in views. By setting an observable as an environment variable, it is available throughout the view hierarchy without having to manually pass it to each view.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> SwiftUI</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UserData</span>: <span class=\"title class_\">ObservableObject</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Published</span> <span class=\"keyword\">var</span> name: <span class=\"type\">String</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;John&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span>: <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@EnvironmentObject</span> <span class=\"keyword\">var</span> userData: <span class=\"type\">UserData</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">VStack</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Text</span>(<span class=\"string\">&quot;Name: <span class=\"subst\">\\(userData.name)</span>&quot;</span>)</span><br><span class=\"line\">                .font(.largeTitle)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">Button</span>(<span class=\"string\">&quot;Change Name&quot;</span>) &#123;</span><br><span class=\"line\">                userData.name <span class=\"operator\">=</span> <span class=\"string\">&quot;Jane&quot;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">DetailView</span>: <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@EnvironmentObject</span> <span class=\"keyword\">var</span> userData: <span class=\"type\">UserData</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Text</span>(<span class=\"string\">&quot;Welcome, <span class=\"subst\">\\(userData.name)</span>!&quot;</span>)</span><br><span class=\"line\">            .font(.title)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">AppView</span>: <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ContentView</span>()</span><br><span class=\"line\">            .environmentObject(<span class=\"type\">UserData</span>())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@main</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">MyApp</span>: <span class=\"title class_\">App</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">Scene</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">WindowGroup</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">AppView</span>()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>In this example, we created a custom class called UserData and marked it as ObservableObject. We then use @EnvironmentObject property wrappers in ContentView and DetailView to set the UserData object as the environment object.</p>\n<p>In ContentView, we can access the properties of the userData object and update them as needed. In the DetailView, we can also access the same userData object and use its properties to display the welcome message.</p>\n<p>In the AppView, we use the environmentObject(_:) function to set the UserData instance as the application’s environment object so that it is shared across the application.</p>\n<p>By using @EnvironmentObject property wrappers, we can share and access global observable objects throughout the application, making data transfer and synchronization easier and more convenient.</p>\n<h4 id=\"5-FocusState\"><a href=\"#5-FocusState\" class=\"headerlink\" title=\"5. @FocusState\"></a><font size=4 color=#4169E1>5. @FocusState</font></h4><p>In SwiftUI, @FocusState is used to manage the focus state in a view. It allows you to track and control focus in the UI for automation if needed.</p>\n<p>@FocusState provides a mechanism to track and control focus state in order to manage keyboard interactions and user input in the view hierarchy. It can be used to automatically switch focus between multiple text fields or views, and to perform focus-related actions such as submitting a form or handling user input.</p>\n<p>Here is a simple sample code:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> SwiftUI</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span>: <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@State</span> <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> name: <span class=\"type\">String</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"meta\">@FocusState</span> <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> isNameFocused: <span class=\"type\">Bool</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">VStack</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">TextField</span>(<span class=\"string\">&quot;Name&quot;</span>, text: <span class=\"variable\">$name</span>)</span><br><span class=\"line\">                .focused(<span class=\"variable\">$isNameFocused</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">Button</span>(<span class=\"string\">&quot;Submit&quot;</span>) &#123;</span><br><span class=\"line\">                isNameFocused <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">                <span class=\"comment\">// Execute the commit operation</span></span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Submitted: <span class=\"subst\">\\(name)</span>&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>In this example, we have used the @State property wrapper in the ContentView to store the value of the name. We also use the @FocusState property wrapper to manage the focus state of the name text field.</p>\n<p>By using the .focused($isNameFocused) modifier on the TextField, we associate the focus state with the name text field. This means that when the value of isNameFocused is true, the name text field will get focus.</p>\n<p>In the action closure of the submit button, we set the value of isNameFocused to false to defocus the name text field. You can then perform commit operations or other focus-related operations.</p>\n<h4 id=\"6-AppStorage\"><a href=\"#6-AppStorage\" class=\"headerlink\" title=\"6. @AppStorage\"></a><font size=4 color=#4169E1>6. @AppStorage</font></h4><p>In SwiftUI, @AppStorage is used to conveniently read and write values in the app’s persistent storage. It provides an easy way to handle application user settings, preferences, or other data that needs to be stored persistently.</p>\n<p>The main function of @AppStorage is to associate properties with the persistent storage of the application, so that the value of the property can be loaded when the application starts, and automatically persisted when it is changed. It uses UserDefaults to achieve data persistence.</p>\n<p>Here is a simple sample code:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> SwiftUI</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span>: <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@AppStorage</span>(<span class=\"string\">&quot;username&quot;</span>) <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> username: <span class=\"type\">String</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Guest&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">VStack</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Text</span>(<span class=\"string\">&quot;Welcome, <span class=\"subst\">\\(username)</span>!&quot;</span>)</span><br><span class=\"line\">                .font(.largeTitle)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">Button</span>(<span class=\"string\">&quot;Logout&quot;</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Clear the username and reset to default</span></span><br><span class=\"line\">                username <span class=\"operator\">=</span> <span class=\"string\">&quot;Guest&quot;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>In this example, we’ve used the @AppStorage property wrapper to associate the username property with the key “username” in the application’s persistent storage. If a value for the “username” key has been saved at application startup, then that value will be loaded into the username property.</p>\n<p>In the view, we can directly use the username property to display the welcome message. When the “Logout” button is clicked, we can update the username by setting the username property to the new value and persist it to the application’s persistent storage.</p>\n<p>By using the @AppStorage property wrapper, we can easily read and write to the application’s persistent storage for user settings, preferences, or other data that needs to be stored persistently. It provides a convenient way to handle persistent data for applications.</p>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=4 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://juejin.cn/post/6976448420722507784\">https://juejin.cn/post/6976448420722507784</a><br>[2] <a href=\"https://zhuanlan.zhihu.com/p/151286558\">https://zhuanlan.zhihu.com/p/151286558</a><br>[3] <a href=\"https://zhuanlan.zhihu.com/p/349079593\">https://zhuanlan.zhihu.com/p/349079593</a><br>[4] <a href=\"https://onevcat.com/2020/06/stateobject\">https://onevcat.com/2020/06/stateobject</a>     </p>\n"},{"title":"00. RxSwift (0) ———— A Brief Experience","date":"2023-09-21T20:00:00.000Z","_content":"\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nThis article will gives a brief experience of RxSwift. So, let’s begin to experience some basic uses of RxSwift Firstly.\n\n#### <font size=3 color=#4169E1>1. Monitoring button clicks</font> \n\n```Swift \nbutton1.closeBtn.rx.controlEvent(.touchUpInside).subscribe { () in\n    print(\"123\")\n} onDisposed: {\n    print(\"456\")\n} .disposed(by: disposeBag)     \n\nbutton1.rx.tap.subscribe { () in\n    print(\"123\")\n} onDisposed: {\n    print(\"789\")\n} .disposed(by: disposeBag)\n```\n\n#### <font size=3 color=#4169E1>2. Monitoring UIScrollView scrolling</font> \n\n```Swift\nscrollView.contentSize = CGSize(width: 1000, height: 0)\nscrollView.rx.contentOffset.subscribe(onNext: { (point : CGPoint) in                \n    print(point)            \n}).addDisposableTo(bag)\n```\n\n\n#### <font size=3 color=#4169E1>3. Changing the text in a label</font> \n\n```Swift\nlabel1.rx.observe(String.self, \"text\").subscribe(onNext: { (str: String?) in    \n    print(str!)\n}).addDisposableTo(bag)        \n\nlabel2.rx.observe(CGRect.self, \"frame\").subscribe(onNext: { (rect: CGRect?) in   \n    print(rect!.width)\n}).addDisposableTo(bag)\n```\n\n#### <font size=3 color=#4169E1>4. Monitoring the textFiled</font> \n\n```Swift\ntextFiled.rx.text.changed.subscribe { (text) in\n    print(\"hello world\")\n}.disposed(by: disposeBag)\n```\n\n\n#### <font size=3 color=#4169E1>5. monitoring the notification</font>\n\n```Swift\nNotificationCenter.default.rx.notification(UIResponder.keyboardWillShowNotification)\n.subscribe(onNext: { (notification) in\n    print(\"keypad ejection\")\n }).disposed(by: disposeBag)\n```\n\n#### <font size=3 color=#4169E1>6. Repeat operation</font> \n\n```Swift\nObservable.repeatElement(\"hello Swift\")\n.take(3)\n.subscribe(onNext: { print($0) })\n.disposed(by: disposeBag)\n\n/*Execution results\nhello Swift\nhello Swift\nhello Swift\n*/\n```\n\n#### <font size=3 color=#4169E1>7. Operations of array</font>\n\n```Swift\nlet obs = Observable.from([\"1\", \"2\", \"3\", \"4\"])\n.subscribe(onNext: { print($0) })\nobs.disposed(by: disposeBag)\n/*Execution results\n1\n2\n3\n4\n*/\n\n``` \n","source":"_posts/Reactive Programming/00. RxSwift/00. RxSwift (0).md","raw":"---\ntitle: 00. RxSwift (0) ———— A Brief Experience\ndate: 2023-09-21 22:00:00\ncategories: \n- [Reactive Programming, 00. RxSwift]\ntags:\n- RxSwift\n---\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nThis article will gives a brief experience of RxSwift. So, let’s begin to experience some basic uses of RxSwift Firstly.\n\n#### <font size=3 color=#4169E1>1. Monitoring button clicks</font> \n\n```Swift \nbutton1.closeBtn.rx.controlEvent(.touchUpInside).subscribe { () in\n    print(\"123\")\n} onDisposed: {\n    print(\"456\")\n} .disposed(by: disposeBag)     \n\nbutton1.rx.tap.subscribe { () in\n    print(\"123\")\n} onDisposed: {\n    print(\"789\")\n} .disposed(by: disposeBag)\n```\n\n#### <font size=3 color=#4169E1>2. Monitoring UIScrollView scrolling</font> \n\n```Swift\nscrollView.contentSize = CGSize(width: 1000, height: 0)\nscrollView.rx.contentOffset.subscribe(onNext: { (point : CGPoint) in                \n    print(point)            \n}).addDisposableTo(bag)\n```\n\n\n#### <font size=3 color=#4169E1>3. Changing the text in a label</font> \n\n```Swift\nlabel1.rx.observe(String.self, \"text\").subscribe(onNext: { (str: String?) in    \n    print(str!)\n}).addDisposableTo(bag)        \n\nlabel2.rx.observe(CGRect.self, \"frame\").subscribe(onNext: { (rect: CGRect?) in   \n    print(rect!.width)\n}).addDisposableTo(bag)\n```\n\n#### <font size=3 color=#4169E1>4. Monitoring the textFiled</font> \n\n```Swift\ntextFiled.rx.text.changed.subscribe { (text) in\n    print(\"hello world\")\n}.disposed(by: disposeBag)\n```\n\n\n#### <font size=3 color=#4169E1>5. monitoring the notification</font>\n\n```Swift\nNotificationCenter.default.rx.notification(UIResponder.keyboardWillShowNotification)\n.subscribe(onNext: { (notification) in\n    print(\"keypad ejection\")\n }).disposed(by: disposeBag)\n```\n\n#### <font size=3 color=#4169E1>6. Repeat operation</font> \n\n```Swift\nObservable.repeatElement(\"hello Swift\")\n.take(3)\n.subscribe(onNext: { print($0) })\n.disposed(by: disposeBag)\n\n/*Execution results\nhello Swift\nhello Swift\nhello Swift\n*/\n```\n\n#### <font size=3 color=#4169E1>7. Operations of array</font>\n\n```Swift\nlet obs = Observable.from([\"1\", \"2\", \"3\", \"4\"])\n.subscribe(onNext: { print($0) })\nobs.disposed(by: disposeBag)\n/*Execution results\n1\n2\n3\n4\n*/\n\n``` \n","slug":"Reactive Programming/00. RxSwift/00. RxSwift (0)","published":1,"updated":"2023-10-10T21:15:53.509Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr4j000evu0m3pgn47wm","content":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>This article will gives a brief experience of RxSwift. So, let’s begin to experience some basic uses of RxSwift Firstly.</p>\n<h4 id=\"1-Monitoring-button-clicks\"><a href=\"#1-Monitoring-button-clicks\" class=\"headerlink\" title=\"1. Monitoring button clicks\"></a><font size=3 color=#4169E1>1. Monitoring button clicks</font></h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">button1.closeBtn.rx.controlEvent(.touchUpInside).subscribe &#123; () <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;123&quot;</span>)</span><br><span class=\"line\">&#125; onDisposed: &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;456&quot;</span>)</span><br><span class=\"line\">&#125; .disposed(by: disposeBag)     </span><br><span class=\"line\"></span><br><span class=\"line\">button1.rx.tap.subscribe &#123; () <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;123&quot;</span>)</span><br><span class=\"line\">&#125; onDisposed: &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;789&quot;</span>)</span><br><span class=\"line\">&#125; .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-Monitoring-UIScrollView-scrolling\"><a href=\"#2-Monitoring-UIScrollView-scrolling\" class=\"headerlink\" title=\"2. Monitoring UIScrollView scrolling\"></a><font size=3 color=#4169E1>2. Monitoring UIScrollView scrolling</font></h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scrollView.contentSize <span class=\"operator\">=</span> <span class=\"type\">CGSize</span>(width: <span class=\"number\">1000</span>, height: <span class=\"number\">0</span>)</span><br><span class=\"line\">scrollView.rx.contentOffset.subscribe(onNext: &#123; (point : <span class=\"type\">CGPoint</span>) <span class=\"keyword\">in</span>                </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(point)            </span><br><span class=\"line\">&#125;).addDisposableTo(bag)</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"3-Changing-the-text-in-a-label\"><a href=\"#3-Changing-the-text-in-a-label\" class=\"headerlink\" title=\"3. Changing the text in a label\"></a><font size=3 color=#4169E1>3. Changing the text in a label</font></h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">label1.rx.observe(<span class=\"type\">String</span>.<span class=\"keyword\">self</span>, <span class=\"string\">&quot;text&quot;</span>).subscribe(onNext: &#123; (str: <span class=\"type\">String</span>?) <span class=\"keyword\">in</span>    </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(str<span class=\"operator\">!</span>)</span><br><span class=\"line\">&#125;).addDisposableTo(bag)        </span><br><span class=\"line\"></span><br><span class=\"line\">label2.rx.observe(<span class=\"type\">CGRect</span>.<span class=\"keyword\">self</span>, <span class=\"string\">&quot;frame&quot;</span>).subscribe(onNext: &#123; (rect: <span class=\"type\">CGRect</span>?) <span class=\"keyword\">in</span>   </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(rect<span class=\"operator\">!</span>.width)</span><br><span class=\"line\">&#125;).addDisposableTo(bag)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-Monitoring-the-textFiled\"><a href=\"#4-Monitoring-the-textFiled\" class=\"headerlink\" title=\"4. Monitoring the textFiled\"></a><font size=3 color=#4169E1>4. Monitoring the textFiled</font></h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">textFiled.rx.text.changed.subscribe &#123; (text) <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;hello world&quot;</span>)</span><br><span class=\"line\">&#125;.disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"5-monitoring-the-notification\"><a href=\"#5-monitoring-the-notification\" class=\"headerlink\" title=\"5. monitoring the notification\"></a><font size=3 color=#4169E1>5. monitoring the notification</font></h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">NotificationCenter</span>.default.rx.notification(<span class=\"type\">UIResponder</span>.keyboardWillShowNotification)</span><br><span class=\"line\">.subscribe(onNext: &#123; (notification) <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;keypad ejection&quot;</span>)</span><br><span class=\"line\"> &#125;).disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-Repeat-operation\"><a href=\"#6-Repeat-operation\" class=\"headerlink\" title=\"6. Repeat operation\"></a><font size=3 color=#4169E1>6. Repeat operation</font></h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Observable</span>.repeatElement(<span class=\"string\">&quot;hello Swift&quot;</span>)</span><br><span class=\"line\">.take(<span class=\"number\">3</span>)</span><br><span class=\"line\">.subscribe(onNext: &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;)</span><br><span class=\"line\">.disposed(by: disposeBag)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*Execution results</span></span><br><span class=\"line\"><span class=\"comment\">hello Swift</span></span><br><span class=\"line\"><span class=\"comment\">hello Swift</span></span><br><span class=\"line\"><span class=\"comment\">hello Swift</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"7-Operations-of-array\"><a href=\"#7-Operations-of-array\" class=\"headerlink\" title=\"7. Operations of array\"></a><font size=3 color=#4169E1>7. Operations of array</font></h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obs <span class=\"operator\">=</span> <span class=\"type\">Observable</span>.from([<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>, <span class=\"string\">&quot;4&quot;</span>])</span><br><span class=\"line\">.subscribe(onNext: &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;)</span><br><span class=\"line\">obs.disposed(by: disposeBag)</span><br><span class=\"line\"><span class=\"comment\">/*Execution results</span></span><br><span class=\"line\"><span class=\"comment\">1</span></span><br><span class=\"line\"><span class=\"comment\">2</span></span><br><span class=\"line\"><span class=\"comment\">3</span></span><br><span class=\"line\"><span class=\"comment\">4</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>This article will gives a brief experience of RxSwift. So, let’s begin to experience some basic uses of RxSwift Firstly.</p>\n<h4 id=\"1-Monitoring-button-clicks\"><a href=\"#1-Monitoring-button-clicks\" class=\"headerlink\" title=\"1. Monitoring button clicks\"></a><font size=3 color=#4169E1>1. Monitoring button clicks</font></h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">button1.closeBtn.rx.controlEvent(.touchUpInside).subscribe &#123; () <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;123&quot;</span>)</span><br><span class=\"line\">&#125; onDisposed: &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;456&quot;</span>)</span><br><span class=\"line\">&#125; .disposed(by: disposeBag)     </span><br><span class=\"line\"></span><br><span class=\"line\">button1.rx.tap.subscribe &#123; () <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;123&quot;</span>)</span><br><span class=\"line\">&#125; onDisposed: &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;789&quot;</span>)</span><br><span class=\"line\">&#125; .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-Monitoring-UIScrollView-scrolling\"><a href=\"#2-Monitoring-UIScrollView-scrolling\" class=\"headerlink\" title=\"2. Monitoring UIScrollView scrolling\"></a><font size=3 color=#4169E1>2. Monitoring UIScrollView scrolling</font></h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scrollView.contentSize <span class=\"operator\">=</span> <span class=\"type\">CGSize</span>(width: <span class=\"number\">1000</span>, height: <span class=\"number\">0</span>)</span><br><span class=\"line\">scrollView.rx.contentOffset.subscribe(onNext: &#123; (point : <span class=\"type\">CGPoint</span>) <span class=\"keyword\">in</span>                </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(point)            </span><br><span class=\"line\">&#125;).addDisposableTo(bag)</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"3-Changing-the-text-in-a-label\"><a href=\"#3-Changing-the-text-in-a-label\" class=\"headerlink\" title=\"3. Changing the text in a label\"></a><font size=3 color=#4169E1>3. Changing the text in a label</font></h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">label1.rx.observe(<span class=\"type\">String</span>.<span class=\"keyword\">self</span>, <span class=\"string\">&quot;text&quot;</span>).subscribe(onNext: &#123; (str: <span class=\"type\">String</span>?) <span class=\"keyword\">in</span>    </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(str<span class=\"operator\">!</span>)</span><br><span class=\"line\">&#125;).addDisposableTo(bag)        </span><br><span class=\"line\"></span><br><span class=\"line\">label2.rx.observe(<span class=\"type\">CGRect</span>.<span class=\"keyword\">self</span>, <span class=\"string\">&quot;frame&quot;</span>).subscribe(onNext: &#123; (rect: <span class=\"type\">CGRect</span>?) <span class=\"keyword\">in</span>   </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(rect<span class=\"operator\">!</span>.width)</span><br><span class=\"line\">&#125;).addDisposableTo(bag)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-Monitoring-the-textFiled\"><a href=\"#4-Monitoring-the-textFiled\" class=\"headerlink\" title=\"4. Monitoring the textFiled\"></a><font size=3 color=#4169E1>4. Monitoring the textFiled</font></h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">textFiled.rx.text.changed.subscribe &#123; (text) <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;hello world&quot;</span>)</span><br><span class=\"line\">&#125;.disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"5-monitoring-the-notification\"><a href=\"#5-monitoring-the-notification\" class=\"headerlink\" title=\"5. monitoring the notification\"></a><font size=3 color=#4169E1>5. monitoring the notification</font></h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">NotificationCenter</span>.default.rx.notification(<span class=\"type\">UIResponder</span>.keyboardWillShowNotification)</span><br><span class=\"line\">.subscribe(onNext: &#123; (notification) <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;keypad ejection&quot;</span>)</span><br><span class=\"line\"> &#125;).disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-Repeat-operation\"><a href=\"#6-Repeat-operation\" class=\"headerlink\" title=\"6. Repeat operation\"></a><font size=3 color=#4169E1>6. Repeat operation</font></h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Observable</span>.repeatElement(<span class=\"string\">&quot;hello Swift&quot;</span>)</span><br><span class=\"line\">.take(<span class=\"number\">3</span>)</span><br><span class=\"line\">.subscribe(onNext: &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;)</span><br><span class=\"line\">.disposed(by: disposeBag)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*Execution results</span></span><br><span class=\"line\"><span class=\"comment\">hello Swift</span></span><br><span class=\"line\"><span class=\"comment\">hello Swift</span></span><br><span class=\"line\"><span class=\"comment\">hello Swift</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"7-Operations-of-array\"><a href=\"#7-Operations-of-array\" class=\"headerlink\" title=\"7. Operations of array\"></a><font size=3 color=#4169E1>7. Operations of array</font></h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obs <span class=\"operator\">=</span> <span class=\"type\">Observable</span>.from([<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>, <span class=\"string\">&quot;4&quot;</span>])</span><br><span class=\"line\">.subscribe(onNext: &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;)</span><br><span class=\"line\">obs.disposed(by: disposeBag)</span><br><span class=\"line\"><span class=\"comment\">/*Execution results</span></span><br><span class=\"line\"><span class=\"comment\">1</span></span><br><span class=\"line\"><span class=\"comment\">2</span></span><br><span class=\"line\"><span class=\"comment\">3</span></span><br><span class=\"line\"><span class=\"comment\">4</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"01. RxSwift (1) ———— Basic Concepts","date":"2023-09-21T21:00:00.000Z","_content":"\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\n#### <font size=3 color=#4169E1>1. RxSwift and ReactiveCocoa</font>\n\nRxSwift is a functional responsive programming language developed by Rx for the Swift language,  like the ReactiveCocoa of Objective-C. It can replace the existing Target Action/proxy/closure/notification/KVO, but also provides networking, data binding, UI event handling, UI display and update, multi-threading, and so on.\n It has the following advantages:\n \n(1) Swift is a value type, which has an impact on value transfer and method callbacks. RxSwift makes up for the flexibility of Swift to a certain extent.\n\n(2) RxSwift makes code reusable and reduces the amount of code.\n\n(3) RxSwift increases code readability because declarations are immutable.\n\n(4) RxSwift makes it easier to understand business code, abstract asynchronous programming, and unify code style.\n\n(5) RxSwift makes it easier to write integrated unit tests and increases code stability.\n\n<font size=3 color=#4169E1>**1.1 RxSwift is not a simple Swift version of RAC**</font>  \n\nRAC and Rx can be said to be two completely different species. RAC believes that it is very necessary to distinguish the observed objects into hot/cold, and this is also a core feature of their framework. Rx is developed strictly in accordance with the regulations of the ReactiveX organization.\n\n<font size=3 color=#4169E1>**1.2 RAC’s hot and cold signals**</font>  \n\nRAC3.0 mainly has two entities, signal and SignalProducer. Signal can publish events regardless of whether subscribers are bound. SignalProducer will only be triggered when a signal or event occurs. These two distinctions are made to distinguish cold signals from hot signals.\n\nIn RxSwift, all objects are observables. signal and SignalProducer become Observable, these two entities are the same thing in Rx. Creating Observables in RxSwift does not need to consider whether it is a cold signal or a hot signal.\n\n#### <font size=3 color=#4169E1>2. Basic concepts</font> \n\n<font size=3 color=#4169E1>**2.1 Events and Sequence**</font>  \n\nRxSwift regards every operation in our program as an event, such as the text in a TextField changes, a button is clicked, or the end of a network request, etc. Each event source can be regarded as a pipeline or sequence, that is, sequence , such as TextField, when we change the text inside, this TextField will continue to emit events and continuously flow out from its sequence. We only need to monitor this sequence and handle each event accordingly. In the same way, Button is also a sequence, and an event flows out every time it is clicked. That is to say, we can understand RxSwift by thinking of each step as an event. As shown below:\n{% img /assets/ReactiveProgramming/RxSwift/00.jpg %}  \nObservable is observable, and it is also an event source. Observers can receive event notification messages from Observable by subscribing.\n\nCreating an observable is actually creating an Obserable sequence, which is creating a stream, which can then be subscribed, and we can perform corresponding processing in the corresponding subscriber code.\n\n<font size=3 color=#4169E1>**2.2 Observable observer pattern**</font>  \n\nObservable is observable, and it is also an event source. Observers can receive event notification messages from Observable by subscribing.\n\nCreating an observable is actually creating an Obserable sequence, which is creating a stream, which can then be subscribed, and we can perform corresponding processing in the corresponding subscriber code.\n\n<font size=3 color=#4169E1>**2.3. Source code address**</font>  \n\nhttps://github.com/ReactiveX/RxSwift\nIntroduced in Podfile or Podspec:\n\n```Swift\npod 'RxSwift', '6.6.0'\npod 'RxCocoa', '6.6.0'\n```\nAdd the following to the corresponding code file:\n\n```Swift\nimport RxSwift\nimport RxCocoa\n```\n\n","source":"_posts/Reactive Programming/00. RxSwift/01. RxSwift (1).md","raw":"---\ntitle: 01. RxSwift (1) ———— Basic Concepts\ndate: 2023-09-21 23:00:00\ncategories: \n- [Reactive Programming, 00. RxSwift]\ntags:\n- RxSwift\n- ReactiveCocoa\n---\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\n#### <font size=3 color=#4169E1>1. RxSwift and ReactiveCocoa</font>\n\nRxSwift is a functional responsive programming language developed by Rx for the Swift language,  like the ReactiveCocoa of Objective-C. It can replace the existing Target Action/proxy/closure/notification/KVO, but also provides networking, data binding, UI event handling, UI display and update, multi-threading, and so on.\n It has the following advantages:\n \n(1) Swift is a value type, which has an impact on value transfer and method callbacks. RxSwift makes up for the flexibility of Swift to a certain extent.\n\n(2) RxSwift makes code reusable and reduces the amount of code.\n\n(3) RxSwift increases code readability because declarations are immutable.\n\n(4) RxSwift makes it easier to understand business code, abstract asynchronous programming, and unify code style.\n\n(5) RxSwift makes it easier to write integrated unit tests and increases code stability.\n\n<font size=3 color=#4169E1>**1.1 RxSwift is not a simple Swift version of RAC**</font>  \n\nRAC and Rx can be said to be two completely different species. RAC believes that it is very necessary to distinguish the observed objects into hot/cold, and this is also a core feature of their framework. Rx is developed strictly in accordance with the regulations of the ReactiveX organization.\n\n<font size=3 color=#4169E1>**1.2 RAC’s hot and cold signals**</font>  \n\nRAC3.0 mainly has two entities, signal and SignalProducer. Signal can publish events regardless of whether subscribers are bound. SignalProducer will only be triggered when a signal or event occurs. These two distinctions are made to distinguish cold signals from hot signals.\n\nIn RxSwift, all objects are observables. signal and SignalProducer become Observable, these two entities are the same thing in Rx. Creating Observables in RxSwift does not need to consider whether it is a cold signal or a hot signal.\n\n#### <font size=3 color=#4169E1>2. Basic concepts</font> \n\n<font size=3 color=#4169E1>**2.1 Events and Sequence**</font>  \n\nRxSwift regards every operation in our program as an event, such as the text in a TextField changes, a button is clicked, or the end of a network request, etc. Each event source can be regarded as a pipeline or sequence, that is, sequence , such as TextField, when we change the text inside, this TextField will continue to emit events and continuously flow out from its sequence. We only need to monitor this sequence and handle each event accordingly. In the same way, Button is also a sequence, and an event flows out every time it is clicked. That is to say, we can understand RxSwift by thinking of each step as an event. As shown below:\n{% img /assets/ReactiveProgramming/RxSwift/00.jpg %}  \nObservable is observable, and it is also an event source. Observers can receive event notification messages from Observable by subscribing.\n\nCreating an observable is actually creating an Obserable sequence, which is creating a stream, which can then be subscribed, and we can perform corresponding processing in the corresponding subscriber code.\n\n<font size=3 color=#4169E1>**2.2 Observable observer pattern**</font>  \n\nObservable is observable, and it is also an event source. Observers can receive event notification messages from Observable by subscribing.\n\nCreating an observable is actually creating an Obserable sequence, which is creating a stream, which can then be subscribed, and we can perform corresponding processing in the corresponding subscriber code.\n\n<font size=3 color=#4169E1>**2.3. Source code address**</font>  \n\nhttps://github.com/ReactiveX/RxSwift\nIntroduced in Podfile or Podspec:\n\n```Swift\npod 'RxSwift', '6.6.0'\npod 'RxCocoa', '6.6.0'\n```\nAdd the following to the corresponding code file:\n\n```Swift\nimport RxSwift\nimport RxCocoa\n```\n\n","slug":"Reactive Programming/00. RxSwift/01. RxSwift (1)","published":1,"updated":"2023-10-10T21:15:49.957Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr4k000fvu0m48a3dftm","content":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<h4 id=\"1-RxSwift-and-ReactiveCocoa\"><a href=\"#1-RxSwift-and-ReactiveCocoa\" class=\"headerlink\" title=\"1. RxSwift and ReactiveCocoa\"></a><font size=3 color=#4169E1>1. RxSwift and ReactiveCocoa</font></h4><p>RxSwift is a functional responsive programming language developed by Rx for the Swift language,  like the ReactiveCocoa of Objective-C. It can replace the existing Target Action&#x2F;proxy&#x2F;closure&#x2F;notification&#x2F;KVO, but also provides networking, data binding, UI event handling, UI display and update, multi-threading, and so on.<br> It has the following advantages:</p>\n<p>(1) Swift is a value type, which has an impact on value transfer and method callbacks. RxSwift makes up for the flexibility of Swift to a certain extent.</p>\n<p>(2) RxSwift makes code reusable and reduces the amount of code.</p>\n<p>(3) RxSwift increases code readability because declarations are immutable.</p>\n<p>(4) RxSwift makes it easier to understand business code, abstract asynchronous programming, and unify code style.</p>\n<p>(5) RxSwift makes it easier to write integrated unit tests and increases code stability.</p>\n<p><font size=3 color=#4169E1><strong>1.1 RxSwift is not a simple Swift version of RAC</strong></font>  </p>\n<p>RAC and Rx can be said to be two completely different species. RAC believes that it is very necessary to distinguish the observed objects into hot&#x2F;cold, and this is also a core feature of their framework. Rx is developed strictly in accordance with the regulations of the ReactiveX organization.</p>\n<p><font size=3 color=#4169E1><strong>1.2 RAC’s hot and cold signals</strong></font>  </p>\n<p>RAC3.0 mainly has two entities, signal and SignalProducer. Signal can publish events regardless of whether subscribers are bound. SignalProducer will only be triggered when a signal or event occurs. These two distinctions are made to distinguish cold signals from hot signals.</p>\n<p>In RxSwift, all objects are observables. signal and SignalProducer become Observable, these two entities are the same thing in Rx. Creating Observables in RxSwift does not need to consider whether it is a cold signal or a hot signal.</p>\n<h4 id=\"2-Basic-concepts\"><a href=\"#2-Basic-concepts\" class=\"headerlink\" title=\"2. Basic concepts\"></a><font size=3 color=#4169E1>2. Basic concepts</font></h4><p><font size=3 color=#4169E1><strong>2.1 Events and Sequence</strong></font>  </p>\n<p>RxSwift regards every operation in our program as an event, such as the text in a TextField changes, a button is clicked, or the end of a network request, etc. Each event source can be regarded as a pipeline or sequence, that is, sequence , such as TextField, when we change the text inside, this TextField will continue to emit events and continuously flow out from its sequence. We only need to monitor this sequence and handle each event accordingly. In the same way, Button is also a sequence, and an event flows out every time it is clicked. That is to say, we can understand RxSwift by thinking of each step as an event. As shown below:</p>\n<img src=\"/assets/ReactiveProgramming/RxSwift/00.jpg\" class=\"\">  \n<p>Observable is observable, and it is also an event source. Observers can receive event notification messages from Observable by subscribing.</p>\n<p>Creating an observable is actually creating an Obserable sequence, which is creating a stream, which can then be subscribed, and we can perform corresponding processing in the corresponding subscriber code.</p>\n<p><font size=3 color=#4169E1><strong>2.2 Observable observer pattern</strong></font>  </p>\n<p>Observable is observable, and it is also an event source. Observers can receive event notification messages from Observable by subscribing.</p>\n<p>Creating an observable is actually creating an Obserable sequence, which is creating a stream, which can then be subscribed, and we can perform corresponding processing in the corresponding subscriber code.</p>\n<p><font size=3 color=#4169E1><strong>2.3. Source code address</strong></font>  </p>\n<p><a href=\"https://github.com/ReactiveX/RxSwift\">https://github.com/ReactiveX/RxSwift</a><br>Introduced in Podfile or Podspec:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod &#x27;<span class=\"type\">RxSwift</span>&#x27;, &#x27;<span class=\"number\">6.6</span>.<span class=\"number\">0</span>&#x27;</span><br><span class=\"line\">pod &#x27;<span class=\"type\">RxCocoa</span>&#x27;, &#x27;<span class=\"number\">6.6</span>.<span class=\"number\">0</span>&#x27;</span><br></pre></td></tr></table></figure>\n<p>Add the following to the corresponding code file:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> RxSwift</span><br><span class=\"line\"><span class=\"keyword\">import</span> RxCocoa</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<h4 id=\"1-RxSwift-and-ReactiveCocoa\"><a href=\"#1-RxSwift-and-ReactiveCocoa\" class=\"headerlink\" title=\"1. RxSwift and ReactiveCocoa\"></a><font size=3 color=#4169E1>1. RxSwift and ReactiveCocoa</font></h4><p>RxSwift is a functional responsive programming language developed by Rx for the Swift language,  like the ReactiveCocoa of Objective-C. It can replace the existing Target Action&#x2F;proxy&#x2F;closure&#x2F;notification&#x2F;KVO, but also provides networking, data binding, UI event handling, UI display and update, multi-threading, and so on.<br> It has the following advantages:</p>\n<p>(1) Swift is a value type, which has an impact on value transfer and method callbacks. RxSwift makes up for the flexibility of Swift to a certain extent.</p>\n<p>(2) RxSwift makes code reusable and reduces the amount of code.</p>\n<p>(3) RxSwift increases code readability because declarations are immutable.</p>\n<p>(4) RxSwift makes it easier to understand business code, abstract asynchronous programming, and unify code style.</p>\n<p>(5) RxSwift makes it easier to write integrated unit tests and increases code stability.</p>\n<p><font size=3 color=#4169E1><strong>1.1 RxSwift is not a simple Swift version of RAC</strong></font>  </p>\n<p>RAC and Rx can be said to be two completely different species. RAC believes that it is very necessary to distinguish the observed objects into hot&#x2F;cold, and this is also a core feature of their framework. Rx is developed strictly in accordance with the regulations of the ReactiveX organization.</p>\n<p><font size=3 color=#4169E1><strong>1.2 RAC’s hot and cold signals</strong></font>  </p>\n<p>RAC3.0 mainly has two entities, signal and SignalProducer. Signal can publish events regardless of whether subscribers are bound. SignalProducer will only be triggered when a signal or event occurs. These two distinctions are made to distinguish cold signals from hot signals.</p>\n<p>In RxSwift, all objects are observables. signal and SignalProducer become Observable, these two entities are the same thing in Rx. Creating Observables in RxSwift does not need to consider whether it is a cold signal or a hot signal.</p>\n<h4 id=\"2-Basic-concepts\"><a href=\"#2-Basic-concepts\" class=\"headerlink\" title=\"2. Basic concepts\"></a><font size=3 color=#4169E1>2. Basic concepts</font></h4><p><font size=3 color=#4169E1><strong>2.1 Events and Sequence</strong></font>  </p>\n<p>RxSwift regards every operation in our program as an event, such as the text in a TextField changes, a button is clicked, or the end of a network request, etc. Each event source can be regarded as a pipeline or sequence, that is, sequence , such as TextField, when we change the text inside, this TextField will continue to emit events and continuously flow out from its sequence. We only need to monitor this sequence and handle each event accordingly. In the same way, Button is also a sequence, and an event flows out every time it is clicked. That is to say, we can understand RxSwift by thinking of each step as an event. As shown below:</p>\n<img src=\"/assets/ReactiveProgramming/RxSwift/00.jpg\" class=\"\">  \n<p>Observable is observable, and it is also an event source. Observers can receive event notification messages from Observable by subscribing.</p>\n<p>Creating an observable is actually creating an Obserable sequence, which is creating a stream, which can then be subscribed, and we can perform corresponding processing in the corresponding subscriber code.</p>\n<p><font size=3 color=#4169E1><strong>2.2 Observable observer pattern</strong></font>  </p>\n<p>Observable is observable, and it is also an event source. Observers can receive event notification messages from Observable by subscribing.</p>\n<p>Creating an observable is actually creating an Obserable sequence, which is creating a stream, which can then be subscribed, and we can perform corresponding processing in the corresponding subscriber code.</p>\n<p><font size=3 color=#4169E1><strong>2.3. Source code address</strong></font>  </p>\n<p><a href=\"https://github.com/ReactiveX/RxSwift\">https://github.com/ReactiveX/RxSwift</a><br>Introduced in Podfile or Podspec:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod &#x27;<span class=\"type\">RxSwift</span>&#x27;, &#x27;<span class=\"number\">6.6</span>.<span class=\"number\">0</span>&#x27;</span><br><span class=\"line\">pod &#x27;<span class=\"type\">RxCocoa</span>&#x27;, &#x27;<span class=\"number\">6.6</span>.<span class=\"number\">0</span>&#x27;</span><br></pre></td></tr></table></figure>\n<p>Add the following to the corresponding code file:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> RxSwift</span><br><span class=\"line\"><span class=\"keyword\">import</span> RxCocoa</span><br></pre></td></tr></table></figure>\n\n"},{"title":"02. RxSwift (2) ———— Basic Operations","date":"2023-09-22T14:00:00.000Z","_content":"\n<font color=gray size=2>*It will take about 5 minutes to finish reading this article.*</font>\n\n#### <font size=3 color=#4169E1>1. DisposeBag</font>\n\nGarbage collection bag, DisposeBag is actually equivalent to ARC in iOS, it will destroy the observer at the appropriate time, a memory management mechanism of RxSwift.\n\n```Swift\nlet disposeBag = DisposeBag()\n```\n\n\n\n#### <font size=3 color=#4169E1>2. Common basic operations</font> \n\n<font size=3 color=#4169E1>**2.1 never**</font>  \n\nnever is a special entity used to create an Observable that never terminates. This Observable will not emit any elements, nor will it emit error or completion events. Typically used to indicate a situation that persists but does not emit any events. Because it never terminates, care needs to be taken when subscribing to take appropriate steps to handle unsubscription situations.\n\n{% img /assets/ReactiveProgramming/RxSwift/01.jpeg %}\n\n```Swift\nfunc example00() {\n    Observable<String>.never()\n    .subscribe { _ in\n         print(\"This will not be executed here...\")\n     }.disposed(by: disposeBag)\n}\n```\n\n<font size=3 color=#4169E1>**2.2 empty**</font>  \n\nUsed to create an empty Observable that does not emit any elements or events, i.e. it is an Observable that completes immediately. Usually used to indicate that the result of some operation is empty or does not produce any value. The sequence created by empty can only emit one completed event.\n\n```Swift\nfunc example01() {\n    Observable<Int>.empty()\n    .subscribe { event in\n        print(event)\n    }.disposed(by: disposeBag)\n}\n//Result：\ncompleted\n```\n\n<font size=3 color=#4169E1>**2.3 just**</font>\n\nIt is used to create an Observable sequence containing only a single element. just takes an argument and emits that argument as an element, creating an Observable containing a single element. Typically used to convert a single value or object to an Observable.\n\n{% img /assets/ReactiveProgramming/RxSwift/02.jpeg %}\n\n```Swift\nfunc example02() {\n    Observable.just(\"?\")\n    .subscribe { event in\n        print(event)\n    }.disposed(by: disposeBag)\n}\n//Result:\nnext(?)\ncompleted\n```\n\n<font size=3 color=#4169E1>**2.4 of**</font>\n\nUsed to pass multiple elements as parameters, and then emit these elements in sequence to create an Observable sequence containing these elements. This operator is ideal for creating an Observable containing static data.\n\n```Swift\nfunc example03() {\n    Observable.of(\"?\", \"?\", \"?\", \"?\")\n    .subscribe(onNext: { element in\n        print(element)\n    }).disposed(by: disposeBag)\n}\n//Result:\n?\n?\n?\n?\n```\n\nIf you remove onNext: above, the result will be like this, which corresponds to our subscribe. Subscribe only listens for events. The execution results are as follows:\n\n```Swift\nnext(?)\nnext(?)\nnext(?)\nnext(?)\ncompleted\n```\n\n<font size=3 color=#4169E1>**2.5 from**</font>\n\nUsed to convert an array, sequence, or enumerable object into an Observable, emitting its elements in sequence. It is suitable for converting an existing collection of data into an observable sequence.\n\n```Swift\nfunc example04() {\n    Observable.from([\"1\", \"2\", \"3\", \"4\"])\n    .subscribe(onNext: { print($0) })\n    .disposed(by: disposeBag)\n}\n//Result:\n1\n2\n3\n4\n```\n\n<font size=3 color=#4169E1>**2.6 create**</font>\n\nMethod for creating a custom Observable. The create method gives you complete control over the behavior of the Observable, including when to emit element, error, or completion events. This allows you to create highly customized Observables to meet specific needs.\n\n{% img /assets/ReactiveProgramming/RxSwift/03.jpeg %}\n\nThe create operator passes in an observer, and then calls the observer's onNext, onCompleted, and onError methods. Returns an observable sequence.\n```Swift\nfunc example05() {\n    let myJust = { (element: String) -> Observable<String> in\n        return Observable.create { observer in\n            observer.on(.next(element))\n            observer.on(.completed)\n            return Disposables.create()\n        }\n    }\n\n    myJust(\"?\")\n    .subscribe { print($0) }\n    .disposed(by: disposeBag)\n}\n//Result:\nnext(?)\ncompleted\n```\n\n<font size=3 color=#4169E1>**2.7 range**</font>\n\nFactory function for creating an Observable that emits a sequence of integers within a range. The range operator generates an Observable sequence that emits consecutive integers starting at a specified starting value until a specified number or ending value is reached.\n\n{% img /assets/ReactiveProgramming/RxSwift/04.jpeg %}\n\n```Swift\nfunc example06() {\n    Observable.range(start: 3, count: 5)\n    .subscribe { print($0) }\n    .disposed(by: disposeBag)\n}\n//Result:\nnext(3)\nnext(4)\nnext(5)\nnext(6)\nnext(7)\ncompleted\n```\n\n<font size=3 color=#4169E1>**2.8 repeatElement**</font>\n\nFactory function for creating an Observable that emits the specified element repeatedly indefinitely. It generates a sequence of Observables that emit the same elements until you explicitly stop it.\n\n{% img /assets/ReactiveProgramming/RxSwift/05.jpeg %}\n\n```Swift\nfunc example07() {\n    Observable.repeatElement(\"#\")\n    .take(3)\n    .subscribe(onNext: { print($0) })\n    .disposed(by: disposeBag)\n}\n//Result:\n#\n#\n#\n```\n\n<font size=3 color=#4169E1>**2.9 generate**</font>\n\nGenerates elements in an Observable sequence according to specified logic, and allows you to customize how the elements are generated. The generate operator allows you to define the starting state of generated elements, incrementing logic, and when to terminate generation. The observable sequence created by generate will emit the corresponding event when the initialization condition is true.\n\n```Swift\nfunc example08() {\n    Observable.generate(\n        initialState: 0,\n        condition: { $0 < 3 },\n        iterate: { $0 + 1 }\n    )\n    .subscribe(onNext: { print($0) })\n    .disposed(by: disposeBag)\n}\n//Result\n0\n1\n2\n```\n\n<font size=3 color=#4169E1>**2.10 deferred**</font>\n\nUsed to delay the creation of an Observable until an observer subscribes to it. This means that every time an observer subscribes, the specified closure is executed to create a new Observable. Note: Deferred will create a new observable sequence for each subscriber observer.\n\n{% img /assets/ReactiveProgramming/RxSwift/06.jpeg %}\n\n```Swift\nfunc example09() {\n    var count = 1\n    let deferredSequence = Observable<String>.deferred {\n        print(\"Creating \\(count)\")\n        count += 1\n\n        return Observable.create { observer in\n            print(\"Emitting...\")\n            observer.onNext(\"?\")\n            observer.onNext(\"?\")\n            observer.onNext(\"?\")\n            return Disposables.create()\n        }\n    }\n\n    deferredSequence\n    .subscribe(onNext: { print($0) })\n    .disposed(by: disposeBag)\n\n    deferredSequence\n    .subscribe(onNext: { print($0) })\n    .disposed(by: disposeBag)\n}\n//Result\nCreating 1\nEmitting...\n?\n?\n?\nCreating 2\nEmitting...\n?\n?\n?\n```\n\nIn the above example, a new deferredSequence will be created every time you subscribe, so Emitting will be printed twice.\n\n<font size=3 color=#4169E1>**2.11 error**</font>\n\nIndicates that an error occurred during the Observable's life cycle. When an Observable encounters an error condition that prevents it from continuing to emit elements normally, it emits an error event and passes the error information to the observer. It creates an observable sequence but does not emit any normal events, only the error event and ends.\n\n```Swift\nfunc example10() {\n    Observable<Int>.error(TestError.test) //Custom Error subclasses\n    .subscribe { print($0) }\n    .disposed(by: disposeBag)\n}\n//Result:\nerror(test)\n```\n\n<font size=3 color=#4169E1>**2.12 doOn**</font>\n\nUsed to add a side-effect behavior that performs a specified operation when certain events in the Observable's life cycle occur, but does not change the elements in the Observable.\n\nThe feeling of doOn is to execute a certain method first when directly processing onNext. The doOnNext(:) method is called before subscribe(onNext:), and doOnCompleted(:) is called before subscribe(onCompleted:).\n\n```Swift\nfunc example11() {\n    Observable.of(\"1\", \"2\", \"3\", \"4\")\n    .do(onNext: { print(\"Intercepted:\", $0) }, onError: { print(\"Intercepted error:\", $0) }, onCompleted: { print(\"Completed\")  })\n    .subscribe(onNext: { print($0) },onCompleted: { print(\"Finished\") })\n    .disposed(by: disposeBag)\n}\n//Result:\nIntercepted: 1\n1\nIntercepted: 2\n2\nIntercepted: 3\n3\nIntercepted: 4\n4\nCompleted\nFinished\n```\n","source":"_posts/Reactive Programming/00. RxSwift/02. RxSwift (2).md","raw":"---\ntitle: 02. RxSwift (2) ———— Basic Operations\ndate: 2023-09-22 16:00:00\ncategories: \n- [Reactive Programming, 00. RxSwift]\ntags:\n- RxSwift\n---\n\n<font color=gray size=2>*It will take about 5 minutes to finish reading this article.*</font>\n\n#### <font size=3 color=#4169E1>1. DisposeBag</font>\n\nGarbage collection bag, DisposeBag is actually equivalent to ARC in iOS, it will destroy the observer at the appropriate time, a memory management mechanism of RxSwift.\n\n```Swift\nlet disposeBag = DisposeBag()\n```\n\n\n\n#### <font size=3 color=#4169E1>2. Common basic operations</font> \n\n<font size=3 color=#4169E1>**2.1 never**</font>  \n\nnever is a special entity used to create an Observable that never terminates. This Observable will not emit any elements, nor will it emit error or completion events. Typically used to indicate a situation that persists but does not emit any events. Because it never terminates, care needs to be taken when subscribing to take appropriate steps to handle unsubscription situations.\n\n{% img /assets/ReactiveProgramming/RxSwift/01.jpeg %}\n\n```Swift\nfunc example00() {\n    Observable<String>.never()\n    .subscribe { _ in\n         print(\"This will not be executed here...\")\n     }.disposed(by: disposeBag)\n}\n```\n\n<font size=3 color=#4169E1>**2.2 empty**</font>  \n\nUsed to create an empty Observable that does not emit any elements or events, i.e. it is an Observable that completes immediately. Usually used to indicate that the result of some operation is empty or does not produce any value. The sequence created by empty can only emit one completed event.\n\n```Swift\nfunc example01() {\n    Observable<Int>.empty()\n    .subscribe { event in\n        print(event)\n    }.disposed(by: disposeBag)\n}\n//Result：\ncompleted\n```\n\n<font size=3 color=#4169E1>**2.3 just**</font>\n\nIt is used to create an Observable sequence containing only a single element. just takes an argument and emits that argument as an element, creating an Observable containing a single element. Typically used to convert a single value or object to an Observable.\n\n{% img /assets/ReactiveProgramming/RxSwift/02.jpeg %}\n\n```Swift\nfunc example02() {\n    Observable.just(\"?\")\n    .subscribe { event in\n        print(event)\n    }.disposed(by: disposeBag)\n}\n//Result:\nnext(?)\ncompleted\n```\n\n<font size=3 color=#4169E1>**2.4 of**</font>\n\nUsed to pass multiple elements as parameters, and then emit these elements in sequence to create an Observable sequence containing these elements. This operator is ideal for creating an Observable containing static data.\n\n```Swift\nfunc example03() {\n    Observable.of(\"?\", \"?\", \"?\", \"?\")\n    .subscribe(onNext: { element in\n        print(element)\n    }).disposed(by: disposeBag)\n}\n//Result:\n?\n?\n?\n?\n```\n\nIf you remove onNext: above, the result will be like this, which corresponds to our subscribe. Subscribe only listens for events. The execution results are as follows:\n\n```Swift\nnext(?)\nnext(?)\nnext(?)\nnext(?)\ncompleted\n```\n\n<font size=3 color=#4169E1>**2.5 from**</font>\n\nUsed to convert an array, sequence, or enumerable object into an Observable, emitting its elements in sequence. It is suitable for converting an existing collection of data into an observable sequence.\n\n```Swift\nfunc example04() {\n    Observable.from([\"1\", \"2\", \"3\", \"4\"])\n    .subscribe(onNext: { print($0) })\n    .disposed(by: disposeBag)\n}\n//Result:\n1\n2\n3\n4\n```\n\n<font size=3 color=#4169E1>**2.6 create**</font>\n\nMethod for creating a custom Observable. The create method gives you complete control over the behavior of the Observable, including when to emit element, error, or completion events. This allows you to create highly customized Observables to meet specific needs.\n\n{% img /assets/ReactiveProgramming/RxSwift/03.jpeg %}\n\nThe create operator passes in an observer, and then calls the observer's onNext, onCompleted, and onError methods. Returns an observable sequence.\n```Swift\nfunc example05() {\n    let myJust = { (element: String) -> Observable<String> in\n        return Observable.create { observer in\n            observer.on(.next(element))\n            observer.on(.completed)\n            return Disposables.create()\n        }\n    }\n\n    myJust(\"?\")\n    .subscribe { print($0) }\n    .disposed(by: disposeBag)\n}\n//Result:\nnext(?)\ncompleted\n```\n\n<font size=3 color=#4169E1>**2.7 range**</font>\n\nFactory function for creating an Observable that emits a sequence of integers within a range. The range operator generates an Observable sequence that emits consecutive integers starting at a specified starting value until a specified number or ending value is reached.\n\n{% img /assets/ReactiveProgramming/RxSwift/04.jpeg %}\n\n```Swift\nfunc example06() {\n    Observable.range(start: 3, count: 5)\n    .subscribe { print($0) }\n    .disposed(by: disposeBag)\n}\n//Result:\nnext(3)\nnext(4)\nnext(5)\nnext(6)\nnext(7)\ncompleted\n```\n\n<font size=3 color=#4169E1>**2.8 repeatElement**</font>\n\nFactory function for creating an Observable that emits the specified element repeatedly indefinitely. It generates a sequence of Observables that emit the same elements until you explicitly stop it.\n\n{% img /assets/ReactiveProgramming/RxSwift/05.jpeg %}\n\n```Swift\nfunc example07() {\n    Observable.repeatElement(\"#\")\n    .take(3)\n    .subscribe(onNext: { print($0) })\n    .disposed(by: disposeBag)\n}\n//Result:\n#\n#\n#\n```\n\n<font size=3 color=#4169E1>**2.9 generate**</font>\n\nGenerates elements in an Observable sequence according to specified logic, and allows you to customize how the elements are generated. The generate operator allows you to define the starting state of generated elements, incrementing logic, and when to terminate generation. The observable sequence created by generate will emit the corresponding event when the initialization condition is true.\n\n```Swift\nfunc example08() {\n    Observable.generate(\n        initialState: 0,\n        condition: { $0 < 3 },\n        iterate: { $0 + 1 }\n    )\n    .subscribe(onNext: { print($0) })\n    .disposed(by: disposeBag)\n}\n//Result\n0\n1\n2\n```\n\n<font size=3 color=#4169E1>**2.10 deferred**</font>\n\nUsed to delay the creation of an Observable until an observer subscribes to it. This means that every time an observer subscribes, the specified closure is executed to create a new Observable. Note: Deferred will create a new observable sequence for each subscriber observer.\n\n{% img /assets/ReactiveProgramming/RxSwift/06.jpeg %}\n\n```Swift\nfunc example09() {\n    var count = 1\n    let deferredSequence = Observable<String>.deferred {\n        print(\"Creating \\(count)\")\n        count += 1\n\n        return Observable.create { observer in\n            print(\"Emitting...\")\n            observer.onNext(\"?\")\n            observer.onNext(\"?\")\n            observer.onNext(\"?\")\n            return Disposables.create()\n        }\n    }\n\n    deferredSequence\n    .subscribe(onNext: { print($0) })\n    .disposed(by: disposeBag)\n\n    deferredSequence\n    .subscribe(onNext: { print($0) })\n    .disposed(by: disposeBag)\n}\n//Result\nCreating 1\nEmitting...\n?\n?\n?\nCreating 2\nEmitting...\n?\n?\n?\n```\n\nIn the above example, a new deferredSequence will be created every time you subscribe, so Emitting will be printed twice.\n\n<font size=3 color=#4169E1>**2.11 error**</font>\n\nIndicates that an error occurred during the Observable's life cycle. When an Observable encounters an error condition that prevents it from continuing to emit elements normally, it emits an error event and passes the error information to the observer. It creates an observable sequence but does not emit any normal events, only the error event and ends.\n\n```Swift\nfunc example10() {\n    Observable<Int>.error(TestError.test) //Custom Error subclasses\n    .subscribe { print($0) }\n    .disposed(by: disposeBag)\n}\n//Result:\nerror(test)\n```\n\n<font size=3 color=#4169E1>**2.12 doOn**</font>\n\nUsed to add a side-effect behavior that performs a specified operation when certain events in the Observable's life cycle occur, but does not change the elements in the Observable.\n\nThe feeling of doOn is to execute a certain method first when directly processing onNext. The doOnNext(:) method is called before subscribe(onNext:), and doOnCompleted(:) is called before subscribe(onCompleted:).\n\n```Swift\nfunc example11() {\n    Observable.of(\"1\", \"2\", \"3\", \"4\")\n    .do(onNext: { print(\"Intercepted:\", $0) }, onError: { print(\"Intercepted error:\", $0) }, onCompleted: { print(\"Completed\")  })\n    .subscribe(onNext: { print($0) },onCompleted: { print(\"Finished\") })\n    .disposed(by: disposeBag)\n}\n//Result:\nIntercepted: 1\n1\nIntercepted: 2\n2\nIntercepted: 3\n3\nIntercepted: 4\n4\nCompleted\nFinished\n```\n","slug":"Reactive Programming/00. RxSwift/02. RxSwift (2)","published":1,"updated":"2023-10-10T21:16:00.692Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr4m000ivu0mhx0b9ys4","content":"<p><font color=gray size=2><em>It will take about 5 minutes to finish reading this article.</em></font></p>\n<h4 id=\"1-DisposeBag\"><a href=\"#1-DisposeBag\" class=\"headerlink\" title=\"1. DisposeBag\"></a><font size=3 color=#4169E1>1. DisposeBag</font></h4><p>Garbage collection bag, DisposeBag is actually equivalent to ARC in iOS, it will destroy the observer at the appropriate time, a memory management mechanism of RxSwift.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"2-Common-basic-operations\"><a href=\"#2-Common-basic-operations\" class=\"headerlink\" title=\"2. Common basic operations\"></a><font size=3 color=#4169E1>2. Common basic operations</font></h4><p><font size=3 color=#4169E1><strong>2.1 never</strong></font>  </p>\n<p>never is a special entity used to create an Observable that never terminates. This Observable will not emit any elements, nor will it emit error or completion events. Typically used to indicate a situation that persists but does not emit any events. Because it never terminates, care needs to be taken when subscribing to take appropriate steps to handle unsubscription situations.</p>\n<img src=\"/assets/ReactiveProgramming/RxSwift/01.jpeg\" class=\"\">\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example00</span>() &#123;</span><br><span class=\"line\">    <span class=\"type\">Observable</span>&lt;<span class=\"type\">String</span>&gt;.never()</span><br><span class=\"line\">    .subscribe &#123; <span class=\"keyword\">_</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">         <span class=\"built_in\">print</span>(<span class=\"string\">&quot;This will not be executed here...&quot;</span>)</span><br><span class=\"line\">     &#125;.disposed(by: disposeBag)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><font size=3 color=#4169E1><strong>2.2 empty</strong></font>  </p>\n<p>Used to create an empty Observable that does not emit any elements or events, i.e. it is an Observable that completes immediately. Usually used to indicate that the result of some operation is empty or does not produce any value. The sequence created by empty can only emit one completed event.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example01</span>() &#123;</span><br><span class=\"line\">    <span class=\"type\">Observable</span>&lt;<span class=\"type\">Int</span>&gt;.empty()</span><br><span class=\"line\">    .subscribe &#123; event <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(event)</span><br><span class=\"line\">    &#125;.disposed(by: disposeBag)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Result：</span></span><br><span class=\"line\">completed</span><br></pre></td></tr></table></figure>\n\n<p><font size=3 color=#4169E1><strong>2.3 just</strong></font></p>\n<p>It is used to create an Observable sequence containing only a single element. just takes an argument and emits that argument as an element, creating an Observable containing a single element. Typically used to convert a single value or object to an Observable.</p>\n<img src=\"/assets/ReactiveProgramming/RxSwift/02.jpeg\" class=\"\">\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example02</span>() &#123;</span><br><span class=\"line\">    <span class=\"type\">Observable</span>.just(<span class=\"string\">&quot;?&quot;</span>)</span><br><span class=\"line\">    .subscribe &#123; event <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(event)</span><br><span class=\"line\">    &#125;.disposed(by: disposeBag)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Result:</span></span><br><span class=\"line\">next(<span class=\"operator\">?</span>)</span><br><span class=\"line\">completed</span><br></pre></td></tr></table></figure>\n\n<p><font size=3 color=#4169E1><strong>2.4 of</strong></font></p>\n<p>Used to pass multiple elements as parameters, and then emit these elements in sequence to create an Observable sequence containing these elements. This operator is ideal for creating an Observable containing static data.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example03</span>() &#123;</span><br><span class=\"line\">    <span class=\"type\">Observable</span>.of(<span class=\"string\">&quot;?&quot;</span>, <span class=\"string\">&quot;?&quot;</span>, <span class=\"string\">&quot;?&quot;</span>, <span class=\"string\">&quot;?&quot;</span>)</span><br><span class=\"line\">    .subscribe(onNext: &#123; element <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(element)</span><br><span class=\"line\">    &#125;).disposed(by: disposeBag)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Result:</span></span><br><span class=\"line\"><span class=\"operator\">?</span></span><br><span class=\"line\"><span class=\"operator\">?</span></span><br><span class=\"line\"><span class=\"operator\">?</span></span><br><span class=\"line\"><span class=\"operator\">?</span></span><br></pre></td></tr></table></figure>\n\n<p>If you remove onNext: above, the result will be like this, which corresponds to our subscribe. Subscribe only listens for events. The execution results are as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">next(<span class=\"operator\">?</span>)</span><br><span class=\"line\">next(<span class=\"operator\">?</span>)</span><br><span class=\"line\">next(<span class=\"operator\">?</span>)</span><br><span class=\"line\">next(<span class=\"operator\">?</span>)</span><br><span class=\"line\">completed</span><br></pre></td></tr></table></figure>\n\n<p><font size=3 color=#4169E1><strong>2.5 from</strong></font></p>\n<p>Used to convert an array, sequence, or enumerable object into an Observable, emitting its elements in sequence. It is suitable for converting an existing collection of data into an observable sequence.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example04</span>() &#123;</span><br><span class=\"line\">    <span class=\"type\">Observable</span>.from([<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>, <span class=\"string\">&quot;4&quot;</span>])</span><br><span class=\"line\">    .subscribe(onNext: &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;)</span><br><span class=\"line\">    .disposed(by: disposeBag)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Result:</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n\n<p><font size=3 color=#4169E1><strong>2.6 create</strong></font></p>\n<p>Method for creating a custom Observable. The create method gives you complete control over the behavior of the Observable, including when to emit element, error, or completion events. This allows you to create highly customized Observables to meet specific needs.</p>\n<img src=\"/assets/ReactiveProgramming/RxSwift/03.jpeg\" class=\"\">\n\n<p>The create operator passes in an observer, and then calls the observer’s onNext, onCompleted, and onError methods. Returns an observable sequence.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example05</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> myJust <span class=\"operator\">=</span> &#123; (element: <span class=\"type\">String</span>) -&gt; <span class=\"type\">Observable</span>&lt;<span class=\"type\">String</span>&gt; <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">Observable</span>.create &#123; observer <span class=\"keyword\">in</span></span><br><span class=\"line\">            observer.on(.next(element))</span><br><span class=\"line\">            observer.on(.completed)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"type\">Disposables</span>.create()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    myJust(<span class=\"string\">&quot;?&quot;</span>)</span><br><span class=\"line\">    .subscribe &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    .disposed(by: disposeBag)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Result:</span></span><br><span class=\"line\">next(<span class=\"operator\">?</span>)</span><br><span class=\"line\">completed</span><br></pre></td></tr></table></figure>\n\n<p><font size=3 color=#4169E1><strong>2.7 range</strong></font></p>\n<p>Factory function for creating an Observable that emits a sequence of integers within a range. The range operator generates an Observable sequence that emits consecutive integers starting at a specified starting value until a specified number or ending value is reached.</p>\n<img src=\"/assets/ReactiveProgramming/RxSwift/04.jpeg\" class=\"\">\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example06</span>() &#123;</span><br><span class=\"line\">    <span class=\"type\">Observable</span>.range(start: <span class=\"number\">3</span>, count: <span class=\"number\">5</span>)</span><br><span class=\"line\">    .subscribe &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    .disposed(by: disposeBag)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Result:</span></span><br><span class=\"line\">next(<span class=\"number\">3</span>)</span><br><span class=\"line\">next(<span class=\"number\">4</span>)</span><br><span class=\"line\">next(<span class=\"number\">5</span>)</span><br><span class=\"line\">next(<span class=\"number\">6</span>)</span><br><span class=\"line\">next(<span class=\"number\">7</span>)</span><br><span class=\"line\">completed</span><br></pre></td></tr></table></figure>\n\n<p><font size=3 color=#4169E1><strong>2.8 repeatElement</strong></font></p>\n<p>Factory function for creating an Observable that emits the specified element repeatedly indefinitely. It generates a sequence of Observables that emit the same elements until you explicitly stop it.</p>\n<img src=\"/assets/ReactiveProgramming/RxSwift/05.jpeg\" class=\"\">\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example07</span>() &#123;</span><br><span class=\"line\">    <span class=\"type\">Observable</span>.repeatElement(<span class=\"string\">&quot;#&quot;</span>)</span><br><span class=\"line\">    .take(<span class=\"number\">3</span>)</span><br><span class=\"line\">    .subscribe(onNext: &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;)</span><br><span class=\"line\">    .disposed(by: disposeBag)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Result:</span></span><br><span class=\"line\">#</span><br><span class=\"line\">#</span><br><span class=\"line\">#</span><br></pre></td></tr></table></figure>\n\n<p><font size=3 color=#4169E1><strong>2.9 generate</strong></font></p>\n<p>Generates elements in an Observable sequence according to specified logic, and allows you to customize how the elements are generated. The generate operator allows you to define the starting state of generated elements, incrementing logic, and when to terminate generation. The observable sequence created by generate will emit the corresponding event when the initialization condition is true.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example08</span>() &#123;</span><br><span class=\"line\">    <span class=\"type\">Observable</span>.generate(</span><br><span class=\"line\">        initialState: <span class=\"number\">0</span>,</span><br><span class=\"line\">        condition: &#123; <span class=\"variable\">$0</span> <span class=\"operator\">&lt;</span> <span class=\"number\">3</span> &#125;,</span><br><span class=\"line\">        iterate: &#123; <span class=\"variable\">$0</span> <span class=\"operator\">+</span> <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">    .subscribe(onNext: &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;)</span><br><span class=\"line\">    .disposed(by: disposeBag)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Result</span></span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<p><font size=3 color=#4169E1><strong>2.10 deferred</strong></font></p>\n<p>Used to delay the creation of an Observable until an observer subscribes to it. This means that every time an observer subscribes, the specified closure is executed to create a new Observable. Note: Deferred will create a new observable sequence for each subscriber observer.</p>\n<img src=\"/assets/ReactiveProgramming/RxSwift/06.jpeg\" class=\"\">\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example09</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> count <span class=\"operator\">=</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> deferredSequence <span class=\"operator\">=</span> <span class=\"type\">Observable</span>&lt;<span class=\"type\">String</span>&gt;.deferred &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Creating <span class=\"subst\">\\(count)</span>&quot;</span>)</span><br><span class=\"line\">        count <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">Observable</span>.create &#123; observer <span class=\"keyword\">in</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Emitting...&quot;</span>)</span><br><span class=\"line\">            observer.onNext(<span class=\"string\">&quot;?&quot;</span>)</span><br><span class=\"line\">            observer.onNext(<span class=\"string\">&quot;?&quot;</span>)</span><br><span class=\"line\">            observer.onNext(<span class=\"string\">&quot;?&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"type\">Disposables</span>.create()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    deferredSequence</span><br><span class=\"line\">    .subscribe(onNext: &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;)</span><br><span class=\"line\">    .disposed(by: disposeBag)</span><br><span class=\"line\"></span><br><span class=\"line\">    deferredSequence</span><br><span class=\"line\">    .subscribe(onNext: &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;)</span><br><span class=\"line\">    .disposed(by: disposeBag)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Result</span></span><br><span class=\"line\"><span class=\"type\">Creating</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"type\">Emitting</span>...</span><br><span class=\"line\"><span class=\"operator\">?</span></span><br><span class=\"line\"><span class=\"operator\">?</span></span><br><span class=\"line\"><span class=\"operator\">?</span></span><br><span class=\"line\"><span class=\"type\">Creating</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"type\">Emitting</span>...</span><br><span class=\"line\"><span class=\"operator\">?</span></span><br><span class=\"line\"><span class=\"operator\">?</span></span><br><span class=\"line\"><span class=\"operator\">?</span></span><br></pre></td></tr></table></figure>\n\n<p>In the above example, a new deferredSequence will be created every time you subscribe, so Emitting will be printed twice.</p>\n<p><font size=3 color=#4169E1><strong>2.11 error</strong></font></p>\n<p>Indicates that an error occurred during the Observable’s life cycle. When an Observable encounters an error condition that prevents it from continuing to emit elements normally, it emits an error event and passes the error information to the observer. It creates an observable sequence but does not emit any normal events, only the error event and ends.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example10</span>() &#123;</span><br><span class=\"line\">    <span class=\"type\">Observable</span>&lt;<span class=\"type\">Int</span>&gt;.error(<span class=\"type\">TestError</span>.test) <span class=\"comment\">//Custom Error subclasses</span></span><br><span class=\"line\">    .subscribe &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    .disposed(by: disposeBag)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Result:</span></span><br><span class=\"line\">error(test)</span><br></pre></td></tr></table></figure>\n\n<p><font size=3 color=#4169E1><strong>2.12 doOn</strong></font></p>\n<p>Used to add a side-effect behavior that performs a specified operation when certain events in the Observable’s life cycle occur, but does not change the elements in the Observable.</p>\n<p>The feeling of doOn is to execute a certain method first when directly processing onNext. The doOnNext(:) method is called before subscribe(onNext:), and doOnCompleted(:) is called before subscribe(onCompleted:).</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example11</span>() &#123;</span><br><span class=\"line\">    <span class=\"type\">Observable</span>.of(<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>, <span class=\"string\">&quot;4&quot;</span>)</span><br><span class=\"line\">    .do(onNext: &#123; <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Intercepted:&quot;</span>, <span class=\"variable\">$0</span>) &#125;, onError: &#123; <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Intercepted error:&quot;</span>, <span class=\"variable\">$0</span>) &#125;, onCompleted: &#123; <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Completed&quot;</span>)  &#125;)</span><br><span class=\"line\">    .subscribe(onNext: &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;,onCompleted: &#123; <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Finished&quot;</span>) &#125;)</span><br><span class=\"line\">    .disposed(by: disposeBag)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Result:</span></span><br><span class=\"line\"><span class=\"type\">Intercepted</span>: <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"type\">Intercepted</span>: <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"type\">Intercepted</span>: <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"type\">Intercepted</span>: <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"type\">Completed</span></span><br><span class=\"line\"><span class=\"type\">Finished</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 5 minutes to finish reading this article.</em></font></p>\n<h4 id=\"1-DisposeBag\"><a href=\"#1-DisposeBag\" class=\"headerlink\" title=\"1. DisposeBag\"></a><font size=3 color=#4169E1>1. DisposeBag</font></h4><p>Garbage collection bag, DisposeBag is actually equivalent to ARC in iOS, it will destroy the observer at the appropriate time, a memory management mechanism of RxSwift.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"2-Common-basic-operations\"><a href=\"#2-Common-basic-operations\" class=\"headerlink\" title=\"2. Common basic operations\"></a><font size=3 color=#4169E1>2. Common basic operations</font></h4><p><font size=3 color=#4169E1><strong>2.1 never</strong></font>  </p>\n<p>never is a special entity used to create an Observable that never terminates. This Observable will not emit any elements, nor will it emit error or completion events. Typically used to indicate a situation that persists but does not emit any events. Because it never terminates, care needs to be taken when subscribing to take appropriate steps to handle unsubscription situations.</p>\n<img src=\"/assets/ReactiveProgramming/RxSwift/01.jpeg\" class=\"\">\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example00</span>() &#123;</span><br><span class=\"line\">    <span class=\"type\">Observable</span>&lt;<span class=\"type\">String</span>&gt;.never()</span><br><span class=\"line\">    .subscribe &#123; <span class=\"keyword\">_</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">         <span class=\"built_in\">print</span>(<span class=\"string\">&quot;This will not be executed here...&quot;</span>)</span><br><span class=\"line\">     &#125;.disposed(by: disposeBag)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><font size=3 color=#4169E1><strong>2.2 empty</strong></font>  </p>\n<p>Used to create an empty Observable that does not emit any elements or events, i.e. it is an Observable that completes immediately. Usually used to indicate that the result of some operation is empty or does not produce any value. The sequence created by empty can only emit one completed event.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example01</span>() &#123;</span><br><span class=\"line\">    <span class=\"type\">Observable</span>&lt;<span class=\"type\">Int</span>&gt;.empty()</span><br><span class=\"line\">    .subscribe &#123; event <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(event)</span><br><span class=\"line\">    &#125;.disposed(by: disposeBag)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Result：</span></span><br><span class=\"line\">completed</span><br></pre></td></tr></table></figure>\n\n<p><font size=3 color=#4169E1><strong>2.3 just</strong></font></p>\n<p>It is used to create an Observable sequence containing only a single element. just takes an argument and emits that argument as an element, creating an Observable containing a single element. Typically used to convert a single value or object to an Observable.</p>\n<img src=\"/assets/ReactiveProgramming/RxSwift/02.jpeg\" class=\"\">\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example02</span>() &#123;</span><br><span class=\"line\">    <span class=\"type\">Observable</span>.just(<span class=\"string\">&quot;?&quot;</span>)</span><br><span class=\"line\">    .subscribe &#123; event <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(event)</span><br><span class=\"line\">    &#125;.disposed(by: disposeBag)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Result:</span></span><br><span class=\"line\">next(<span class=\"operator\">?</span>)</span><br><span class=\"line\">completed</span><br></pre></td></tr></table></figure>\n\n<p><font size=3 color=#4169E1><strong>2.4 of</strong></font></p>\n<p>Used to pass multiple elements as parameters, and then emit these elements in sequence to create an Observable sequence containing these elements. This operator is ideal for creating an Observable containing static data.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example03</span>() &#123;</span><br><span class=\"line\">    <span class=\"type\">Observable</span>.of(<span class=\"string\">&quot;?&quot;</span>, <span class=\"string\">&quot;?&quot;</span>, <span class=\"string\">&quot;?&quot;</span>, <span class=\"string\">&quot;?&quot;</span>)</span><br><span class=\"line\">    .subscribe(onNext: &#123; element <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(element)</span><br><span class=\"line\">    &#125;).disposed(by: disposeBag)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Result:</span></span><br><span class=\"line\"><span class=\"operator\">?</span></span><br><span class=\"line\"><span class=\"operator\">?</span></span><br><span class=\"line\"><span class=\"operator\">?</span></span><br><span class=\"line\"><span class=\"operator\">?</span></span><br></pre></td></tr></table></figure>\n\n<p>If you remove onNext: above, the result will be like this, which corresponds to our subscribe. Subscribe only listens for events. The execution results are as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">next(<span class=\"operator\">?</span>)</span><br><span class=\"line\">next(<span class=\"operator\">?</span>)</span><br><span class=\"line\">next(<span class=\"operator\">?</span>)</span><br><span class=\"line\">next(<span class=\"operator\">?</span>)</span><br><span class=\"line\">completed</span><br></pre></td></tr></table></figure>\n\n<p><font size=3 color=#4169E1><strong>2.5 from</strong></font></p>\n<p>Used to convert an array, sequence, or enumerable object into an Observable, emitting its elements in sequence. It is suitable for converting an existing collection of data into an observable sequence.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example04</span>() &#123;</span><br><span class=\"line\">    <span class=\"type\">Observable</span>.from([<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>, <span class=\"string\">&quot;4&quot;</span>])</span><br><span class=\"line\">    .subscribe(onNext: &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;)</span><br><span class=\"line\">    .disposed(by: disposeBag)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Result:</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n\n<p><font size=3 color=#4169E1><strong>2.6 create</strong></font></p>\n<p>Method for creating a custom Observable. The create method gives you complete control over the behavior of the Observable, including when to emit element, error, or completion events. This allows you to create highly customized Observables to meet specific needs.</p>\n<img src=\"/assets/ReactiveProgramming/RxSwift/03.jpeg\" class=\"\">\n\n<p>The create operator passes in an observer, and then calls the observer’s onNext, onCompleted, and onError methods. Returns an observable sequence.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example05</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> myJust <span class=\"operator\">=</span> &#123; (element: <span class=\"type\">String</span>) -&gt; <span class=\"type\">Observable</span>&lt;<span class=\"type\">String</span>&gt; <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">Observable</span>.create &#123; observer <span class=\"keyword\">in</span></span><br><span class=\"line\">            observer.on(.next(element))</span><br><span class=\"line\">            observer.on(.completed)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"type\">Disposables</span>.create()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    myJust(<span class=\"string\">&quot;?&quot;</span>)</span><br><span class=\"line\">    .subscribe &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    .disposed(by: disposeBag)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Result:</span></span><br><span class=\"line\">next(<span class=\"operator\">?</span>)</span><br><span class=\"line\">completed</span><br></pre></td></tr></table></figure>\n\n<p><font size=3 color=#4169E1><strong>2.7 range</strong></font></p>\n<p>Factory function for creating an Observable that emits a sequence of integers within a range. The range operator generates an Observable sequence that emits consecutive integers starting at a specified starting value until a specified number or ending value is reached.</p>\n<img src=\"/assets/ReactiveProgramming/RxSwift/04.jpeg\" class=\"\">\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example06</span>() &#123;</span><br><span class=\"line\">    <span class=\"type\">Observable</span>.range(start: <span class=\"number\">3</span>, count: <span class=\"number\">5</span>)</span><br><span class=\"line\">    .subscribe &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    .disposed(by: disposeBag)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Result:</span></span><br><span class=\"line\">next(<span class=\"number\">3</span>)</span><br><span class=\"line\">next(<span class=\"number\">4</span>)</span><br><span class=\"line\">next(<span class=\"number\">5</span>)</span><br><span class=\"line\">next(<span class=\"number\">6</span>)</span><br><span class=\"line\">next(<span class=\"number\">7</span>)</span><br><span class=\"line\">completed</span><br></pre></td></tr></table></figure>\n\n<p><font size=3 color=#4169E1><strong>2.8 repeatElement</strong></font></p>\n<p>Factory function for creating an Observable that emits the specified element repeatedly indefinitely. It generates a sequence of Observables that emit the same elements until you explicitly stop it.</p>\n<img src=\"/assets/ReactiveProgramming/RxSwift/05.jpeg\" class=\"\">\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example07</span>() &#123;</span><br><span class=\"line\">    <span class=\"type\">Observable</span>.repeatElement(<span class=\"string\">&quot;#&quot;</span>)</span><br><span class=\"line\">    .take(<span class=\"number\">3</span>)</span><br><span class=\"line\">    .subscribe(onNext: &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;)</span><br><span class=\"line\">    .disposed(by: disposeBag)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Result:</span></span><br><span class=\"line\">#</span><br><span class=\"line\">#</span><br><span class=\"line\">#</span><br></pre></td></tr></table></figure>\n\n<p><font size=3 color=#4169E1><strong>2.9 generate</strong></font></p>\n<p>Generates elements in an Observable sequence according to specified logic, and allows you to customize how the elements are generated. The generate operator allows you to define the starting state of generated elements, incrementing logic, and when to terminate generation. The observable sequence created by generate will emit the corresponding event when the initialization condition is true.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example08</span>() &#123;</span><br><span class=\"line\">    <span class=\"type\">Observable</span>.generate(</span><br><span class=\"line\">        initialState: <span class=\"number\">0</span>,</span><br><span class=\"line\">        condition: &#123; <span class=\"variable\">$0</span> <span class=\"operator\">&lt;</span> <span class=\"number\">3</span> &#125;,</span><br><span class=\"line\">        iterate: &#123; <span class=\"variable\">$0</span> <span class=\"operator\">+</span> <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">    .subscribe(onNext: &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;)</span><br><span class=\"line\">    .disposed(by: disposeBag)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Result</span></span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<p><font size=3 color=#4169E1><strong>2.10 deferred</strong></font></p>\n<p>Used to delay the creation of an Observable until an observer subscribes to it. This means that every time an observer subscribes, the specified closure is executed to create a new Observable. Note: Deferred will create a new observable sequence for each subscriber observer.</p>\n<img src=\"/assets/ReactiveProgramming/RxSwift/06.jpeg\" class=\"\">\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example09</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> count <span class=\"operator\">=</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> deferredSequence <span class=\"operator\">=</span> <span class=\"type\">Observable</span>&lt;<span class=\"type\">String</span>&gt;.deferred &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Creating <span class=\"subst\">\\(count)</span>&quot;</span>)</span><br><span class=\"line\">        count <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">Observable</span>.create &#123; observer <span class=\"keyword\">in</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Emitting...&quot;</span>)</span><br><span class=\"line\">            observer.onNext(<span class=\"string\">&quot;?&quot;</span>)</span><br><span class=\"line\">            observer.onNext(<span class=\"string\">&quot;?&quot;</span>)</span><br><span class=\"line\">            observer.onNext(<span class=\"string\">&quot;?&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"type\">Disposables</span>.create()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    deferredSequence</span><br><span class=\"line\">    .subscribe(onNext: &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;)</span><br><span class=\"line\">    .disposed(by: disposeBag)</span><br><span class=\"line\"></span><br><span class=\"line\">    deferredSequence</span><br><span class=\"line\">    .subscribe(onNext: &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;)</span><br><span class=\"line\">    .disposed(by: disposeBag)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Result</span></span><br><span class=\"line\"><span class=\"type\">Creating</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"type\">Emitting</span>...</span><br><span class=\"line\"><span class=\"operator\">?</span></span><br><span class=\"line\"><span class=\"operator\">?</span></span><br><span class=\"line\"><span class=\"operator\">?</span></span><br><span class=\"line\"><span class=\"type\">Creating</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"type\">Emitting</span>...</span><br><span class=\"line\"><span class=\"operator\">?</span></span><br><span class=\"line\"><span class=\"operator\">?</span></span><br><span class=\"line\"><span class=\"operator\">?</span></span><br></pre></td></tr></table></figure>\n\n<p>In the above example, a new deferredSequence will be created every time you subscribe, so Emitting will be printed twice.</p>\n<p><font size=3 color=#4169E1><strong>2.11 error</strong></font></p>\n<p>Indicates that an error occurred during the Observable’s life cycle. When an Observable encounters an error condition that prevents it from continuing to emit elements normally, it emits an error event and passes the error information to the observer. It creates an observable sequence but does not emit any normal events, only the error event and ends.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example10</span>() &#123;</span><br><span class=\"line\">    <span class=\"type\">Observable</span>&lt;<span class=\"type\">Int</span>&gt;.error(<span class=\"type\">TestError</span>.test) <span class=\"comment\">//Custom Error subclasses</span></span><br><span class=\"line\">    .subscribe &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    .disposed(by: disposeBag)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Result:</span></span><br><span class=\"line\">error(test)</span><br></pre></td></tr></table></figure>\n\n<p><font size=3 color=#4169E1><strong>2.12 doOn</strong></font></p>\n<p>Used to add a side-effect behavior that performs a specified operation when certain events in the Observable’s life cycle occur, but does not change the elements in the Observable.</p>\n<p>The feeling of doOn is to execute a certain method first when directly processing onNext. The doOnNext(:) method is called before subscribe(onNext:), and doOnCompleted(:) is called before subscribe(onCompleted:).</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example11</span>() &#123;</span><br><span class=\"line\">    <span class=\"type\">Observable</span>.of(<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>, <span class=\"string\">&quot;4&quot;</span>)</span><br><span class=\"line\">    .do(onNext: &#123; <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Intercepted:&quot;</span>, <span class=\"variable\">$0</span>) &#125;, onError: &#123; <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Intercepted error:&quot;</span>, <span class=\"variable\">$0</span>) &#125;, onCompleted: &#123; <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Completed&quot;</span>)  &#125;)</span><br><span class=\"line\">    .subscribe(onNext: &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;,onCompleted: &#123; <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Finished&quot;</span>) &#125;)</span><br><span class=\"line\">    .disposed(by: disposeBag)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Result:</span></span><br><span class=\"line\"><span class=\"type\">Intercepted</span>: <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"type\">Intercepted</span>: <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"type\">Intercepted</span>: <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"type\">Intercepted</span>: <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"type\">Completed</span></span><br><span class=\"line\"><span class=\"type\">Finished</span></span><br></pre></td></tr></table></figure>\n"},{"title":"03. RxSwift (3) ———— Concept of Subjects","date":"2023-09-22T15:00:00.000Z","_content":"\n<font color=gray size=2>*It will take about 5 minutes to finish reading this article.*</font>\n\nSubjet is the bridge between observable and Observer. A Subject is both an Observable and an Observer. It can both emit events and listen for events. This is similar to RAC.\n\n#### <font size=3 color=#4169E1>1. PublishSubject</font>\nWhen you subscribe to a PublishSubject, you can only receive events that occur after you subscribe to it. subject.onNext() emits onNext event, corresponding to onError() and onCompleted() events. PublishSubject is both an Observable and an Observer.\n\n{% img /assets/ReactiveProgramming/RxSwift/07.png %}\n\nAs shown in the image above,\nThe first line is a PublishSubject, the second and third lines are subscribers, the upward arrow indicates that the subscriber subscribes to the Subject, and the downward arrow indicates that the Subject sends events.\n\nThe first subscriber doesn't subscribe until after the 1 event has been sent, so it won't receive the 1 event, it will receive the 2.3 event. The second subscriber subscribes after the 2 event has been sent, so it will only receive the 3 event.\n\nThe next event of PublishSubject will only be sent to subscribers who are currently subscribed to this subject. New subscribers will not receive events sent before subscribing.\n\nAfter the Subject terminates, if you subscribe again, its termination event will be sent to subsequent subscribers. This is true for all subjects.\n \n```Swift\nfunc example12() {\n     let subject = PublishSubject<String>()\n      \n       subject.onNext(\"1\")\n      \n       let subscriptionOne = subject.subscribe(onNext: { (element) in\n           print(\"Subscriber one: \" + element)\n       }).disposed(by: disposeBag)\n      \n       subject.on(.next(\"2\"))\n      \n       let subscriptionTwo = subject.subscribe(onNext: { (element) in\n           print(\"Subscriber two: \" + element)\n       }).disposed(by: disposeBag)\n      \n       subject.onNext(\"3\")\n}\n//Results:\nSubscriber one: 2\nSubscriber one: 3\nSubscriber Two: 3\n```\n\n#### <font size=3 color=#4169E1>2. BehaviorSubject</font> \n\nWhen you subscribe to a BehaviorSubject, you will receive the last event before subscribing. BehaviorSubject is actually similar to PublishSubject, except that it will send the latest next event to new subscribers.\n\nAs shown in the figure below, the first line is a BehaviorSubject, the second and third lines are subscribers, the upward arrow indicates that the subscriber subscribes to the Subject, and the downward arrow indicates that the Subject sends events. The first subscriber subscribes to the subject after event 1, and it will immediately receive the most recent next event, that is, events after 1. will be received normally.\n\nThe second subscriber subscribes to the subject after event 2, and it will immediately receive the most recent next event, that is, events after 2. will be received normally.\n\n{% img /assets/ReactiveProgramming/RxSwift/08.png %}\n\n```Swift\nfunc example13 () {\n     let subject = BehaviorSubject(value: \"1\")\n    \n     subject.onNext(\"1\")\n    \n     subject.subscribe(onNext: { (element) in\n         print(\"Subscriber one: \" + element)\n     }).disposed(by: disposeBag)\n    \n     subject.on(.next(\"2\"))\n     subject.on(.next(\"3\"))\n    \n     subject.subscribe(onNext: { (element) in\n         print(\"Subscriber two: \" + element)\n     }).disposed(by: disposeBag)\n    \n     subject.onNext(\"4\")\n}\n//The execution results are as follows:\nSubscriber one: 1\nSubscriber one: 2\nSubscriber one: 3\nSubscriber Two: 3\nSubscriber one: 4\nSubscriber Two: 4\n```\n\n#### <font size=3 color=#4169E1>3. ReplaySubject</font> \n \nReplay subjects can specify a buffer size, which will cache the recently sent events. The size of the buffer size is the number of cached events. When there is a new subscriber, it will send the cached events to the new subscriber.\n\n{% img /assets/ReactiveProgramming/RxSwift/09.png %}\n\nAs shown in the above image,\n\nThe first line is a ReplaySubject with a buffer size of 2, which caches the two most recent events. The second and third lines are subscribers. The upward arrow indicates that the subscriber subscribes to the Subject, and the downward arrow indicates that the Subject sends events.\n\nThe first subscriber is subscribed at the beginning, so it can receive,1,2,3 events\n\nThe second subscriber subscribes after event 2. Because the buffer size of ReplaySubject is 2, the second subscriber will immediately receive the cached events 1 and 2. 3 events are received normally.\n\nPoints to note:\n\nThe cache of ReplaySubject is cached in the memory. Therefore, if the ReplaySubject sends pictures, the buffer size cannot be set too large, which can easily cause memory pressure. The same goes for sending an array. Therefore, you must pay attention to the content pressure and type here, and do not set the buffer size too large.\n\n```Swift\nfunc example14() {\n     let subject = ReplaySubject<String>.create(bufferSize: 2)\n    \n     subject.onNext(\"1\")\n     subject.onNext(\"2\")\n     subject.onNext(\"3\")\n    \n     subject.subscribe(onNext: { (element) in\n        print(\"Subscriber one: \" + element)\n     }).disposed(by: disposeBag)\n}\n//Results of the\nSubscriber One: 2\nSubscriber One: 3\n```\n","source":"_posts/Reactive Programming/00. RxSwift/03. RxSwift (3).md","raw":"---\ntitle: 03. RxSwift (3) ———— Concept of Subjects\ndate: 2023-09-22 17:00:00\ncategories: \n- [Reactive Programming, 00. RxSwift]\ntags:\n- RxSwift\n- Subjects\n---\n\n<font color=gray size=2>*It will take about 5 minutes to finish reading this article.*</font>\n\nSubjet is the bridge between observable and Observer. A Subject is both an Observable and an Observer. It can both emit events and listen for events. This is similar to RAC.\n\n#### <font size=3 color=#4169E1>1. PublishSubject</font>\nWhen you subscribe to a PublishSubject, you can only receive events that occur after you subscribe to it. subject.onNext() emits onNext event, corresponding to onError() and onCompleted() events. PublishSubject is both an Observable and an Observer.\n\n{% img /assets/ReactiveProgramming/RxSwift/07.png %}\n\nAs shown in the image above,\nThe first line is a PublishSubject, the second and third lines are subscribers, the upward arrow indicates that the subscriber subscribes to the Subject, and the downward arrow indicates that the Subject sends events.\n\nThe first subscriber doesn't subscribe until after the 1 event has been sent, so it won't receive the 1 event, it will receive the 2.3 event. The second subscriber subscribes after the 2 event has been sent, so it will only receive the 3 event.\n\nThe next event of PublishSubject will only be sent to subscribers who are currently subscribed to this subject. New subscribers will not receive events sent before subscribing.\n\nAfter the Subject terminates, if you subscribe again, its termination event will be sent to subsequent subscribers. This is true for all subjects.\n \n```Swift\nfunc example12() {\n     let subject = PublishSubject<String>()\n      \n       subject.onNext(\"1\")\n      \n       let subscriptionOne = subject.subscribe(onNext: { (element) in\n           print(\"Subscriber one: \" + element)\n       }).disposed(by: disposeBag)\n      \n       subject.on(.next(\"2\"))\n      \n       let subscriptionTwo = subject.subscribe(onNext: { (element) in\n           print(\"Subscriber two: \" + element)\n       }).disposed(by: disposeBag)\n      \n       subject.onNext(\"3\")\n}\n//Results:\nSubscriber one: 2\nSubscriber one: 3\nSubscriber Two: 3\n```\n\n#### <font size=3 color=#4169E1>2. BehaviorSubject</font> \n\nWhen you subscribe to a BehaviorSubject, you will receive the last event before subscribing. BehaviorSubject is actually similar to PublishSubject, except that it will send the latest next event to new subscribers.\n\nAs shown in the figure below, the first line is a BehaviorSubject, the second and third lines are subscribers, the upward arrow indicates that the subscriber subscribes to the Subject, and the downward arrow indicates that the Subject sends events. The first subscriber subscribes to the subject after event 1, and it will immediately receive the most recent next event, that is, events after 1. will be received normally.\n\nThe second subscriber subscribes to the subject after event 2, and it will immediately receive the most recent next event, that is, events after 2. will be received normally.\n\n{% img /assets/ReactiveProgramming/RxSwift/08.png %}\n\n```Swift\nfunc example13 () {\n     let subject = BehaviorSubject(value: \"1\")\n    \n     subject.onNext(\"1\")\n    \n     subject.subscribe(onNext: { (element) in\n         print(\"Subscriber one: \" + element)\n     }).disposed(by: disposeBag)\n    \n     subject.on(.next(\"2\"))\n     subject.on(.next(\"3\"))\n    \n     subject.subscribe(onNext: { (element) in\n         print(\"Subscriber two: \" + element)\n     }).disposed(by: disposeBag)\n    \n     subject.onNext(\"4\")\n}\n//The execution results are as follows:\nSubscriber one: 1\nSubscriber one: 2\nSubscriber one: 3\nSubscriber Two: 3\nSubscriber one: 4\nSubscriber Two: 4\n```\n\n#### <font size=3 color=#4169E1>3. ReplaySubject</font> \n \nReplay subjects can specify a buffer size, which will cache the recently sent events. The size of the buffer size is the number of cached events. When there is a new subscriber, it will send the cached events to the new subscriber.\n\n{% img /assets/ReactiveProgramming/RxSwift/09.png %}\n\nAs shown in the above image,\n\nThe first line is a ReplaySubject with a buffer size of 2, which caches the two most recent events. The second and third lines are subscribers. The upward arrow indicates that the subscriber subscribes to the Subject, and the downward arrow indicates that the Subject sends events.\n\nThe first subscriber is subscribed at the beginning, so it can receive,1,2,3 events\n\nThe second subscriber subscribes after event 2. Because the buffer size of ReplaySubject is 2, the second subscriber will immediately receive the cached events 1 and 2. 3 events are received normally.\n\nPoints to note:\n\nThe cache of ReplaySubject is cached in the memory. Therefore, if the ReplaySubject sends pictures, the buffer size cannot be set too large, which can easily cause memory pressure. The same goes for sending an array. Therefore, you must pay attention to the content pressure and type here, and do not set the buffer size too large.\n\n```Swift\nfunc example14() {\n     let subject = ReplaySubject<String>.create(bufferSize: 2)\n    \n     subject.onNext(\"1\")\n     subject.onNext(\"2\")\n     subject.onNext(\"3\")\n    \n     subject.subscribe(onNext: { (element) in\n        print(\"Subscriber one: \" + element)\n     }).disposed(by: disposeBag)\n}\n//Results of the\nSubscriber One: 2\nSubscriber One: 3\n```\n","slug":"Reactive Programming/00. RxSwift/03. RxSwift (3)","published":1,"updated":"2023-10-10T21:16:06.719Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr4n000kvu0m36w0am4s","content":"<p><font color=gray size=2><em>It will take about 5 minutes to finish reading this article.</em></font></p>\n<p>Subjet is the bridge between observable and Observer. A Subject is both an Observable and an Observer. It can both emit events and listen for events. This is similar to RAC.</p>\n<h4 id=\"1-PublishSubject\"><a href=\"#1-PublishSubject\" class=\"headerlink\" title=\"1. PublishSubject\"></a><font size=3 color=#4169E1>1. PublishSubject</font></h4><p>When you subscribe to a PublishSubject, you can only receive events that occur after you subscribe to it. subject.onNext() emits onNext event, corresponding to onError() and onCompleted() events. PublishSubject is both an Observable and an Observer.</p>\n<img src=\"/assets/ReactiveProgramming/RxSwift/07.png\" class=\"\">\n\n<p>As shown in the image above,<br>The first line is a PublishSubject, the second and third lines are subscribers, the upward arrow indicates that the subscriber subscribes to the Subject, and the downward arrow indicates that the Subject sends events.</p>\n<p>The first subscriber doesn’t subscribe until after the 1 event has been sent, so it won’t receive the 1 event, it will receive the 2.3 event. The second subscriber subscribes after the 2 event has been sent, so it will only receive the 3 event.</p>\n<p>The next event of PublishSubject will only be sent to subscribers who are currently subscribed to this subject. New subscribers will not receive events sent before subscribing.</p>\n<p>After the Subject terminates, if you subscribe again, its termination event will be sent to subsequent subscribers. This is true for all subjects.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example12</span>() &#123;</span><br><span class=\"line\">     <span class=\"keyword\">let</span> subject <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\">      </span><br><span class=\"line\">       subject.onNext(<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">      </span><br><span class=\"line\">       <span class=\"keyword\">let</span> subscriptionOne <span class=\"operator\">=</span> subject.subscribe(onNext: &#123; (element) <span class=\"keyword\">in</span></span><br><span class=\"line\">           <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Subscriber one: &quot;</span> <span class=\"operator\">+</span> element)</span><br><span class=\"line\">       &#125;).disposed(by: disposeBag)</span><br><span class=\"line\">      </span><br><span class=\"line\">       subject.on(.next(<span class=\"string\">&quot;2&quot;</span>))</span><br><span class=\"line\">      </span><br><span class=\"line\">       <span class=\"keyword\">let</span> subscriptionTwo <span class=\"operator\">=</span> subject.subscribe(onNext: &#123; (element) <span class=\"keyword\">in</span></span><br><span class=\"line\">           <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Subscriber two: &quot;</span> <span class=\"operator\">+</span> element)</span><br><span class=\"line\">       &#125;).disposed(by: disposeBag)</span><br><span class=\"line\">      </span><br><span class=\"line\">       subject.onNext(<span class=\"string\">&quot;3&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Results:</span></span><br><span class=\"line\"><span class=\"type\">Subscriber</span> one: <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"type\">Subscriber</span> one: <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"type\">Subscriber</span> <span class=\"type\">Two</span>: <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-BehaviorSubject\"><a href=\"#2-BehaviorSubject\" class=\"headerlink\" title=\"2. BehaviorSubject\"></a><font size=3 color=#4169E1>2. BehaviorSubject</font></h4><p>When you subscribe to a BehaviorSubject, you will receive the last event before subscribing. BehaviorSubject is actually similar to PublishSubject, except that it will send the latest next event to new subscribers.</p>\n<p>As shown in the figure below, the first line is a BehaviorSubject, the second and third lines are subscribers, the upward arrow indicates that the subscriber subscribes to the Subject, and the downward arrow indicates that the Subject sends events. The first subscriber subscribes to the subject after event 1, and it will immediately receive the most recent next event, that is, events after 1. will be received normally.</p>\n<p>The second subscriber subscribes to the subject after event 2, and it will immediately receive the most recent next event, that is, events after 2. will be received normally.</p>\n<img src=\"/assets/ReactiveProgramming/RxSwift/08.png\" class=\"\">\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example13</span> () &#123;</span><br><span class=\"line\">     <span class=\"keyword\">let</span> subject <span class=\"operator\">=</span> <span class=\"type\">BehaviorSubject</span>(value: <span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">     subject.onNext(<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">     subject.subscribe(onNext: &#123; (element) <span class=\"keyword\">in</span></span><br><span class=\"line\">         <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Subscriber one: &quot;</span> <span class=\"operator\">+</span> element)</span><br><span class=\"line\">     &#125;).disposed(by: disposeBag)</span><br><span class=\"line\">    </span><br><span class=\"line\">     subject.on(.next(<span class=\"string\">&quot;2&quot;</span>))</span><br><span class=\"line\">     subject.on(.next(<span class=\"string\">&quot;3&quot;</span>))</span><br><span class=\"line\">    </span><br><span class=\"line\">     subject.subscribe(onNext: &#123; (element) <span class=\"keyword\">in</span></span><br><span class=\"line\">         <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Subscriber two: &quot;</span> <span class=\"operator\">+</span> element)</span><br><span class=\"line\">     &#125;).disposed(by: disposeBag)</span><br><span class=\"line\">    </span><br><span class=\"line\">     subject.onNext(<span class=\"string\">&quot;4&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//The execution results are as follows:</span></span><br><span class=\"line\"><span class=\"type\">Subscriber</span> one: <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"type\">Subscriber</span> one: <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"type\">Subscriber</span> one: <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"type\">Subscriber</span> <span class=\"type\">Two</span>: <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"type\">Subscriber</span> one: <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"type\">Subscriber</span> <span class=\"type\">Two</span>: <span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-ReplaySubject\"><a href=\"#3-ReplaySubject\" class=\"headerlink\" title=\"3. ReplaySubject\"></a><font size=3 color=#4169E1>3. ReplaySubject</font></h4><p>Replay subjects can specify a buffer size, which will cache the recently sent events. The size of the buffer size is the number of cached events. When there is a new subscriber, it will send the cached events to the new subscriber.</p>\n<img src=\"/assets/ReactiveProgramming/RxSwift/09.png\" class=\"\">\n\n<p>As shown in the above image,</p>\n<p>The first line is a ReplaySubject with a buffer size of 2, which caches the two most recent events. The second and third lines are subscribers. The upward arrow indicates that the subscriber subscribes to the Subject, and the downward arrow indicates that the Subject sends events.</p>\n<p>The first subscriber is subscribed at the beginning, so it can receive,1,2,3 events</p>\n<p>The second subscriber subscribes after event 2. Because the buffer size of ReplaySubject is 2, the second subscriber will immediately receive the cached events 1 and 2. 3 events are received normally.</p>\n<p>Points to note:</p>\n<p>The cache of ReplaySubject is cached in the memory. Therefore, if the ReplaySubject sends pictures, the buffer size cannot be set too large, which can easily cause memory pressure. The same goes for sending an array. Therefore, you must pay attention to the content pressure and type here, and do not set the buffer size too large.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example14</span>() &#123;</span><br><span class=\"line\">     <span class=\"keyword\">let</span> subject <span class=\"operator\">=</span> <span class=\"type\">ReplaySubject</span>&lt;<span class=\"type\">String</span>&gt;.create(bufferSize: <span class=\"number\">2</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">     subject.onNext(<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">     subject.onNext(<span class=\"string\">&quot;2&quot;</span>)</span><br><span class=\"line\">     subject.onNext(<span class=\"string\">&quot;3&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">     subject.subscribe(onNext: &#123; (element) <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Subscriber one: &quot;</span> <span class=\"operator\">+</span> element)</span><br><span class=\"line\">     &#125;).disposed(by: disposeBag)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Results of the</span></span><br><span class=\"line\"><span class=\"type\">Subscriber</span> <span class=\"type\">One</span>: <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"type\">Subscriber</span> <span class=\"type\">One</span>: <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 5 minutes to finish reading this article.</em></font></p>\n<p>Subjet is the bridge between observable and Observer. A Subject is both an Observable and an Observer. It can both emit events and listen for events. This is similar to RAC.</p>\n<h4 id=\"1-PublishSubject\"><a href=\"#1-PublishSubject\" class=\"headerlink\" title=\"1. PublishSubject\"></a><font size=3 color=#4169E1>1. PublishSubject</font></h4><p>When you subscribe to a PublishSubject, you can only receive events that occur after you subscribe to it. subject.onNext() emits onNext event, corresponding to onError() and onCompleted() events. PublishSubject is both an Observable and an Observer.</p>\n<img src=\"/assets/ReactiveProgramming/RxSwift/07.png\" class=\"\">\n\n<p>As shown in the image above,<br>The first line is a PublishSubject, the second and third lines are subscribers, the upward arrow indicates that the subscriber subscribes to the Subject, and the downward arrow indicates that the Subject sends events.</p>\n<p>The first subscriber doesn’t subscribe until after the 1 event has been sent, so it won’t receive the 1 event, it will receive the 2.3 event. The second subscriber subscribes after the 2 event has been sent, so it will only receive the 3 event.</p>\n<p>The next event of PublishSubject will only be sent to subscribers who are currently subscribed to this subject. New subscribers will not receive events sent before subscribing.</p>\n<p>After the Subject terminates, if you subscribe again, its termination event will be sent to subsequent subscribers. This is true for all subjects.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example12</span>() &#123;</span><br><span class=\"line\">     <span class=\"keyword\">let</span> subject <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\">      </span><br><span class=\"line\">       subject.onNext(<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">      </span><br><span class=\"line\">       <span class=\"keyword\">let</span> subscriptionOne <span class=\"operator\">=</span> subject.subscribe(onNext: &#123; (element) <span class=\"keyword\">in</span></span><br><span class=\"line\">           <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Subscriber one: &quot;</span> <span class=\"operator\">+</span> element)</span><br><span class=\"line\">       &#125;).disposed(by: disposeBag)</span><br><span class=\"line\">      </span><br><span class=\"line\">       subject.on(.next(<span class=\"string\">&quot;2&quot;</span>))</span><br><span class=\"line\">      </span><br><span class=\"line\">       <span class=\"keyword\">let</span> subscriptionTwo <span class=\"operator\">=</span> subject.subscribe(onNext: &#123; (element) <span class=\"keyword\">in</span></span><br><span class=\"line\">           <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Subscriber two: &quot;</span> <span class=\"operator\">+</span> element)</span><br><span class=\"line\">       &#125;).disposed(by: disposeBag)</span><br><span class=\"line\">      </span><br><span class=\"line\">       subject.onNext(<span class=\"string\">&quot;3&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Results:</span></span><br><span class=\"line\"><span class=\"type\">Subscriber</span> one: <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"type\">Subscriber</span> one: <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"type\">Subscriber</span> <span class=\"type\">Two</span>: <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-BehaviorSubject\"><a href=\"#2-BehaviorSubject\" class=\"headerlink\" title=\"2. BehaviorSubject\"></a><font size=3 color=#4169E1>2. BehaviorSubject</font></h4><p>When you subscribe to a BehaviorSubject, you will receive the last event before subscribing. BehaviorSubject is actually similar to PublishSubject, except that it will send the latest next event to new subscribers.</p>\n<p>As shown in the figure below, the first line is a BehaviorSubject, the second and third lines are subscribers, the upward arrow indicates that the subscriber subscribes to the Subject, and the downward arrow indicates that the Subject sends events. The first subscriber subscribes to the subject after event 1, and it will immediately receive the most recent next event, that is, events after 1. will be received normally.</p>\n<p>The second subscriber subscribes to the subject after event 2, and it will immediately receive the most recent next event, that is, events after 2. will be received normally.</p>\n<img src=\"/assets/ReactiveProgramming/RxSwift/08.png\" class=\"\">\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example13</span> () &#123;</span><br><span class=\"line\">     <span class=\"keyword\">let</span> subject <span class=\"operator\">=</span> <span class=\"type\">BehaviorSubject</span>(value: <span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">     subject.onNext(<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">     subject.subscribe(onNext: &#123; (element) <span class=\"keyword\">in</span></span><br><span class=\"line\">         <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Subscriber one: &quot;</span> <span class=\"operator\">+</span> element)</span><br><span class=\"line\">     &#125;).disposed(by: disposeBag)</span><br><span class=\"line\">    </span><br><span class=\"line\">     subject.on(.next(<span class=\"string\">&quot;2&quot;</span>))</span><br><span class=\"line\">     subject.on(.next(<span class=\"string\">&quot;3&quot;</span>))</span><br><span class=\"line\">    </span><br><span class=\"line\">     subject.subscribe(onNext: &#123; (element) <span class=\"keyword\">in</span></span><br><span class=\"line\">         <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Subscriber two: &quot;</span> <span class=\"operator\">+</span> element)</span><br><span class=\"line\">     &#125;).disposed(by: disposeBag)</span><br><span class=\"line\">    </span><br><span class=\"line\">     subject.onNext(<span class=\"string\">&quot;4&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//The execution results are as follows:</span></span><br><span class=\"line\"><span class=\"type\">Subscriber</span> one: <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"type\">Subscriber</span> one: <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"type\">Subscriber</span> one: <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"type\">Subscriber</span> <span class=\"type\">Two</span>: <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"type\">Subscriber</span> one: <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"type\">Subscriber</span> <span class=\"type\">Two</span>: <span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-ReplaySubject\"><a href=\"#3-ReplaySubject\" class=\"headerlink\" title=\"3. ReplaySubject\"></a><font size=3 color=#4169E1>3. ReplaySubject</font></h4><p>Replay subjects can specify a buffer size, which will cache the recently sent events. The size of the buffer size is the number of cached events. When there is a new subscriber, it will send the cached events to the new subscriber.</p>\n<img src=\"/assets/ReactiveProgramming/RxSwift/09.png\" class=\"\">\n\n<p>As shown in the above image,</p>\n<p>The first line is a ReplaySubject with a buffer size of 2, which caches the two most recent events. The second and third lines are subscribers. The upward arrow indicates that the subscriber subscribes to the Subject, and the downward arrow indicates that the Subject sends events.</p>\n<p>The first subscriber is subscribed at the beginning, so it can receive,1,2,3 events</p>\n<p>The second subscriber subscribes after event 2. Because the buffer size of ReplaySubject is 2, the second subscriber will immediately receive the cached events 1 and 2. 3 events are received normally.</p>\n<p>Points to note:</p>\n<p>The cache of ReplaySubject is cached in the memory. Therefore, if the ReplaySubject sends pictures, the buffer size cannot be set too large, which can easily cause memory pressure. The same goes for sending an array. Therefore, you must pay attention to the content pressure and type here, and do not set the buffer size too large.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example14</span>() &#123;</span><br><span class=\"line\">     <span class=\"keyword\">let</span> subject <span class=\"operator\">=</span> <span class=\"type\">ReplaySubject</span>&lt;<span class=\"type\">String</span>&gt;.create(bufferSize: <span class=\"number\">2</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">     subject.onNext(<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">     subject.onNext(<span class=\"string\">&quot;2&quot;</span>)</span><br><span class=\"line\">     subject.onNext(<span class=\"string\">&quot;3&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">     subject.subscribe(onNext: &#123; (element) <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Subscriber one: &quot;</span> <span class=\"operator\">+</span> element)</span><br><span class=\"line\">     &#125;).disposed(by: disposeBag)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Results of the</span></span><br><span class=\"line\"><span class=\"type\">Subscriber</span> <span class=\"type\">One</span>: <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"type\">Subscriber</span> <span class=\"type\">One</span>: <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n"},{"title":"04. RxSwift (4) ———— Advanced Operations","date":"2023-09-22T16:00:00.000Z","_content":"\n<font color=gray size=2>*It will take about 5 minutes to finish reading this article.*</font>\n\n\n#### <font size=3 color=#4169E1>1. Combination Operations</font>\n\nA combination operation is the synthesis of multiple Observable streams into a single Observable stream.\n\n<font size=3 color=#4169E1>**1.1 startWith**</font>  \n\nIt is used to insert a specified initial element before the sequence of elements of the Observable sequence, and then emit the elements of the original Observable sequence in turn. In other words, a specific event message is emitted before the event message is emitted. For example, if you emit events 2 , 3 and then I startWith(1), then 1 will be emitted first, then 2 , 3.\n\n{% img /assets/ReactiveProgramming/RxSwift/10.jpeg %}\n\n```Swift\nfunc example15() {\n    Observable.of(\"2\", \"3\")\n    .startWith(\"1\")\n    .subscribe(onNext: { print($0) })\n    .disposed(by: disposeBag)\n}\n//Result：\n1\n2\n3\n```\n\n<font size=3 color=#4169E1>**1.2 merge**</font> \n\nUsed to merge multiple Observable sequences into a new Observable sequence while maintaining the order in which elements of all original Observable sequences are emitted (corresponding events are emitted according to the timeline).\n\n```Swift\nfunc example16() {\n    let subject1 = PublishSubject<String>()\n    let subject2 = PublishSubject<String>()\n\n    Observable.of(subject1, subject2)\n    .merge()\n    .subscribe(onNext: { print($0) })\n    .disposed(by: disposeBag)\n\n    subject1.onNext(\"?️\")\n    subject1.onNext(\"?️\")\n    subject2.onNext(\"①\")\n    subject2.onNext(\"②\")\n    subject1.onNext(\"?\")\n    subject2.onNext(\"③\")\n}\n//Result:\n?️\n?️\n①\n②\n?\n③\n```\n\n<font size=3 color=#4169E1>**1.3 zip**</font> \n\nUsed to merge the elements of multiple Observable sequences into a new element one by one in order, and emit these new elements in sequence. In other words, the zip operator waits for all participating Observable sequences to emit an element, then merges these elements one-to-one in order into a new element, and then emits the new element.\n\nzip binds up to 8 Observable streams and processes them together. Note that Zip is an event corresponding to an event in another stream.\n\n{% img /assets/ReactiveProgramming/RxSwift/11.jpeg %}\n\n```Swift\nfunc example17() {\n     let stringSubject = PublishSubject<String>()\n     let intSubject = PublishSubject<Int>()\n\n     Observable.zip(stringSubject, intSubject) { stringElement, intElement in\n         \"\\(stringElement) \\(intElement)\"\n         }\n     .subscribe(onNext: { print($0) })\n     .disposed(by: disposeBag)\n\n     stringSubject.onNext(\"?️\")\n     stringSubject.onNext(\"?️\")\n\n     intSubject.onNext(1)\n\n     intSubject.onNext(2)\n\n     stringSubject.onNext(\"?\")\n     intSubject.onNext(3)\n}\n//Compress stringSubject and intSubject together for joint processing\n//Results:\n? 1 \n? 2\n? 3\n\n```\n\n<font size=3 color=#4169E1>**1.4 combineLatest**</font> \n\nUsed to combine the latest elements of multiple Observable sequences into a new tuple, and emit this new tuple when any of the original Observable sequences emits a new element. Note: It binds no more than 8 Observable streams. The difference from Zip is that combineLatest is that the event of one stream corresponds to the latest event of another stream. Both events will be the latest events. You can compare the following figure with that of Zip.\n\n{% img /assets/ReactiveProgramming/RxSwift/12.jpeg %}\n\n```Swift\n\nfunc example18() {\n    let stringSubject = PublishSubject<String>()\n    let intSubject = PublishSubject<Int>()\n\n    Observable.combineLatest(stringSubject, intSubject) { stringElement, intElement in\n            \"\\(stringElement) \\(intElement)\"\n        }\n    .subscribe(onNext: { print($0) })\n    .disposed(by: disposeBag)\n\n    stringSubject.onNext(\"?️\")\n    stringSubject.onNext(\"?️\")\n    intSubject.onNext(1)\n    intSubject.onNext(2)\n    stringSubject.onNext(\"?\")\n}\n//Results:\n? 1\n? 2\n? 2\n```\n\n#### <font size=3 color=#4169E1>2. Transformation Operations</font> \n\n<font size=3 color=#4169E1>**2.1 map**</font> \n\nUsed to apply a transformation function to each element in an Observable sequence and emit the transformed elements as a new Observable sequence.\n\n{% img /assets/ReactiveProgramming/RxSwift/13.jpeg %}\n\n```Swift\nfunc example19() {\n     //Multiply each element by itself\n     Observable.of(1, 2, 3)\n     .map { $0 * $0 }\n     .subscribe(onNext: { print($0) })\n     .disposed(by: disposeBag)\n}\n//Results:\n1\n4\n9\n```\n\n<font size=3 color=#4169E1>**2.2 flatMap**</font> \n\nUsed to map each element in the original Observable sequence into a new Observable sequence, then merge these new Observable sequences into a single Observable sequence, and emit elements sequentially in the order in which they were emitted. flatMap has an unpacking action, please see the code analysis.\n\n{% img /assets/ReactiveProgramming/RxSwift/13.jpeg %}\n\n```Swift\nstruct Player {\n     var score: Variable<Int> //There is a Variable inside\n}\n\nfunc example20() {\n\n     let ?? = Player(score: Variable(80))\n     let ?? = Player(score: Variable(90))\n     let ? = Player(score: Variable(550))\n\n     let player = Variable(??) //Convert player to Variable\n\n     player.asObservable() //Unboxing and converting into a sequence that can be monitored\n         .flatMap { $0.score.asObservable() } // flatMap has an unpacking action. $0 should have been a BehaviorSubject type, but the score was directly accessed. So I guess flatMap performed onNext unpacking on behaviorSubject to get the data.\n         .subscribe(onNext: { print($0) })\n         .addDisposableTo(disposeBag)\n\n     ??.score.value = 85\n\n     player.value = ?? //Changing the value is equivalent to adding another sequence. Both sequences can be received.\n\n     ??.score.value = 95\n     ??.score.value = 222\n     player.value = ?\n\n     ??.score.value = 100\n}\n//Results:\n80\n85\n90\n95\n222\n550\n100\n```\n\n<font size=3 color=#4169E1>**2.3 flatMapLatest**</font>\n\nIt is used to map the elements in the original Observable sequence into a new Observable sequence, and only emits the elements of the latest mapped Observable, ignoring the old mapped Observable. Change the above example to flatMapLatest and the result is:\n\n```Swift\n80\n85\n90\n550\n```\n\n<font size=3 color=#4169E1>**2.4 scan**</font>\n\nUsed to process the elements of an observable sequence one by one according to the specified accumulation rules and generate a new observable sequence that emits the accumulated results of each step.\n\n```Swift\nfunc example21() {\n\n    Observable.of(10, 100, 1000)\n    .scan(1) { aggregateValue, newValue in\n        aggregateValue + newValue\n    }\n    .subscribe(onNext: { print($0) })\n    .disposed(by: disposeBag)\n}\n//Results:\n11\n111\n1111\n```\n\n#### <font size=3 color=#4169E1>3. Filtering And Constraint Operations</font>\n\n<font size=3 color=#4169E1>**3.1 filter**</font>\n\nUsed to select elements that meet specified conditions from an Observable sequence, and then emit these elements as a new Observable.\n\n```Swift\nfunc example22() {\n    Observable.of(\n    \"1\", \"2\", \"3\",\n    \"?\", \"?\", \"?\",\n    \"4\", \"5\", \"6\")\n    .filter {\n        $0 == \"?\"\n    }\n    .subscribe(onNext: { print($0) })\n    .disposed(by: disposeBag)\n}\n//Results:\n?\n?\n?\n```\n\n\n<font size=3 color=#4169E1>**3.2 distinctUntilChanged**</font>\n\nIt is used to filter out consecutive repeated elements and emit only those elements that are not identical to the previous element. This operation is similar to RAC.\n\n```Swift\nfunc example23() {\n    Observable.of(\"?\", \"?\", \"?\", \"?\", \"?\", \"?\", \"?\")\n    .distinctUntilChanged()\n    .subscribe(onNext: { print($0) })\n    .disposed(by: disposeBag)\n}\n//Results:\n?\n```\n\n<font size=3 color=#4169E1>**3.3 elementAt**</font>\n\nUsed to obtain the element at the specified index position from an Observable sequence and emit it as a new Observable. This operator takes an index value as a parameter and returns a new Observable that emits only the element at the specified index in the original sequence and then completes immediately.\n\n```Swift\nfunc example24() {\n    Observable.of(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\")\n    .element(at:3)\n    .subscribe(onNext: { print($0) })\n    .disposed(by: disposeBag)\n}\n//Results:\n4\n```\n\n<font size=3 color=#4169E1>**3.4 single**</font>\n\nUsed to get a single element from an Observable sequence and emit it as a new Observable. This operator is typically used to ensure that the Observable emits only one element, and it will generate an error event if the Observable emits multiple elements or no elements.\n\n```Swift\nfunc example25() {\n     Observable.of(\"?\", \"?\", \"?\", \"?\", \"?\", \"?\")\n     .single()\n     .subscribe(onNext: { print($0) })\n     .disposed(by: disposeBag)\n    \n}\n//Results:\n?\nUnhandled error happened: Sequence contains more than one element. //Single signal exceeds one\n```\n<font size=3 color=#4169E1>**3.5 take**</font>\n\nUsed to take a specified number of elements from an Observable sequence and emit them as a new Observable. This operator accepts an integer parameter, indicating the number of elements to be removed.\n\n```Swift\n\nfunc example26() {\n    Observable.of(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\")\n    .take(3)\n    .subscribe(onNext: { print($0) })\n    .disposed(by: disposeBag)\n}\n//Results:\n1\n2\n3\n```\n\n<font size=3 color=#4169E1>**3.6 takeLast**</font>\n\nThis operator accepts an integer parameter indicating the number of last elements to be obtained, i.e. it only handles the last few event signals.\n\n```Swift\nfunc example27() {\n    Observable.of(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\")\n    .takeLast(3)\n    .subscribe(onNext: { print($0) })\n    .disposed(by: disposeBag)\n}\n//Results:\n4\n5\n6\n```\n\n<font size=3 color=#4169E1>**3.7 takeWhile**</font>\n\nUsed to obtain elements from an Observable sequence based on a certain condition until the condition is no longer met, and emit these elements as a new Observable. This operator accepts a closure argument that returns a Boolean value indicating whether the condition is met.\n\n```Swift\nfunc example28() {\n    Observable.of(1, 2, 3, 4, 5, 6)\n    .take(while: {$0 < 4 })\n    .subscribe(onNext: { print($0) })\n    .disposed(by: disposeBag)\n}\n//Results:\n1\n2\n3\n```\n\n<font size=3 color=#4169E1>**3.8 takeUntil**</font>\n\nUsed to get elements from an Observable sequence if the specified conditions are met, and emit the elements as a new Observable until another specified Observable emits elements or completes.\n\n```Swift\nfunc example29() {\n     let sourceSequence = PublishSubject<String>()\n     let referenceSequence = PublishSubject<String>()\n\n     sourceSequence\n     .take(until:referenceSequence)\n     .subscribe { print($0) }\n     .disposed(by: disposeBag)\n     sourceSequence.onNext(\"?\")\n     sourceSequence.onNext(\"?\")\n     sourceSequence.onNext(\"?\")\n     referenceSequence.onNext(\"?\") //Stop receiving messages\n     sourceSequence.onNext(\"?\")\n     sourceSequence.onNext(\"?\")\n     sourceSequence.onNext(\"?\")\n}\n//Results:\nnext(?)\nnext(?)\nnext(?)\ncompleted\n```\n\n<font size=3 color=#4169E1>**3.9 skip**</font>\n\nUsed to skip a specified number of elements from an Observable sequence and emit the remaining elements as a new Observable.\n\n```Swift\nfunc example30() {\n    Observable.of(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\")\n    .skip(2)\n    .subscribe(onNext: { print($0) })\n    .disposed(by: disposeBag)\n}\n//Result:\n3\n4\n5\n6\n```\n\n<font size=3 color=#4169E1>**3.10 skipWhile**</font>\n\nUsed to skip elements in an Observable sequence if specified conditions are met, and then emit the remaining elements as a new Observable. This operator accepts a closure argument that returns a Boolean value indicating whether the current element should be skipped.\n\n```Swift\n\nfunc example31() {\n    Observable.of(1, 2, 3, 4, 5, 6)\n    .skip(while: { $0 < 4 } )\n    .subscribe(onNext: { print($0) })\n    .disposed(by: disposeBag)\n}\n//Result:\n4\n5\n6\n```\n\n<font size=3 color=#4169E1>**3.11 skipUntil**</font>\n\nUsed to skip elements in an original Observable before waiting for another Observable to emit elements. Specifically, skipUntil accepts an Observable as a parameter. When this parameter Observable emits elements, skipUntil will start emitting elements in the original Observable.\n\n```Swift\n\nfunc example32() {\n    let sourceSequence = PublishSubject<String>()\n    let referenceSequence = PublishSubject<String>()\n\n    sourceSequence\n    .skip(until: referenceSequence)\n    .subscribe(onNext: { print($0) })\n    .disposed(by: disposeBag)\n\n    sourceSequence.onNext(\"1\")\n    sourceSequence.onNext(\"2\")\n    sourceSequence.onNext(\"3\")\n\n    referenceSequence.onNext(\"4\")\n\n    sourceSequence.onNext(\"5\")\n    sourceSequence.onNext(\"6\")\n    sourceSequence.onNext(\"7\")\n}\n//Result:\n5\n6\n7\n```\n\n#### <font size=3 color=#4169E1>4. Math Operations</font>\n\n<font size=3 color=#4169E1>**4.1 toArray**</font>\n\nIt is used to collect all the elements in an Observable sequence into an array and emit the array as a single-element Observable. In other words, it converts a sequence of multiple elements into an array containing all the elements and emits that array.\n\n```Swift\nfunc example33() {\n    Observable.range(start: 1, count: 10)\n    .toArray()\n    .subscribe { print($0) }\n    .disposed(by: disposeBag)\n}\n//Result:\nsuccess([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n```\n\n<font size=3 color=#4169E1>**4.2 reduce**</font>\n\nIt is used to accumulate (reduce) elements in an Observable sequence according to specified rules, and emit the final result as a new Observable.\n\n```Swift\n\nfunc example34() {\n    Observable.of(10, 100, 1000)\n    .reduce(1, accumulator: +)\n    .subscribe(onNext: { print($0) })\n    .disposed(by: disposeBag)\n}\n//Result：\n1111\n```\n\n<font size=3 color=#4169E1>**4.3 Concat**</font>\n\nconcat will combine multiple sequences into one sequence, and the event of the next sequence will not start until the previous sequence emits the completed event.\n\nBefore the first sequence is completed, events emitted by the second sequence will be ignored, but the last event emitted by the second sequence before completion will be received.\n\n```Swift\nfunc example35() {\n     let subject1 = BehaviorSubject(value: \"?\")\n     let subject2 = BehaviorSubject(value: \"?\")\n\n     let variable = Variable(subject1)\n\n     variable.asObservable()\n     .concat()\n     .subscribe { print($0) }\n     .disposed(by: disposeBag)\n\n     subject1.onNext(\"?\")\n     subject1.onNext(\"?\")\n\n     variable.value = subject2\n\n     subject2.onNext(\"?\") //1 will be ignored before completion\n     subject2.onNext(\"teng\") //1 will be ignored before completion\n     subject2.onNext(\"fei\") //The last one before 1 is completed will be received\n     subject1.onCompleted()\n     subject2.onNext(\"?\")\n}\n//Results:\nnext(?)\nnext(?)\nnext(?)\nnext(fei)\nnext(?)\n```\n\n#### <font size=3 color=#4169E1>5. Connectable Operations</font>\n\nConnectable Operators are a special class of operators that are used to control situations where multiple observers share the same underlying data source. These operators can convert a normal Observable into a connectable Observable, and then use the connect() method to allow multiple observers to subscribe to this connectable Observable so that they share the same data. Here are some common connectivity operations:\n\n<font size=3 color=#4169E1>**5.1 publish**</font>\n\nConvert a normal sequence into a connectable sequence, and a normal Observable into a connectable Observable. It does not start emitting elements immediately, but waits for the connect() method to be called.\n\n```Swift\nlet disposeBag = DisposeBag()\n\nlet observable = Observable<Int>.interval(.seconds(1), scheduler: MainScheduler.instance)\n     .take(5)\n     .publish() // Use publish to make the Observable connectable\n\n// first observer\nobservable\n     .subscribe(onNext: { value in\n         print(\"Observer 1: \\(value)\")\n     })\n     .disposed(by: disposeBag)\n\n// Connect after some delay\nDispatchQueue.main.asyncAfter(deadline: .now() + 2) {\n     observable.connect() // Start emitting elements\n}\n\n// second observer\nDispatchQueue.main.asyncAfter(deadline: .now() + 4) {\n     observable\n         .subscribe(onNext: { value in\n             print(\"Observer 2: \\(value)\")\n         })\n         .disposed(by: disposeBag)\n}\n```\n\n<font size=3 color=#4169E1>**5.2 replay**</font>\n\nConverts a normal Observable to a connectable Observable and caches the elements it emits so that subsequent observers can obtain previously emitted elements.\n\n```Swift\nlet disposeBag = DisposeBag()\n\nlet observable = Observable<Int>.interval(.seconds(1), scheduler: MainScheduler.instance)\n     .take(5)\n     .replay(2) // Use replay to cache the latest 2 elements\n\n// first observer\nobservable\n     .subscribe(onNext: { value in\n         print(\"Observer 1: \\(value)\")\n     })\n     .disposed(by: disposeBag)\n\n// Connect after some delay\nDispatchQueue.main.asyncAfter(deadline: .now() + 2) {\n     observable.connect() // Start emitting elements\n}\n\n// second observer\nDispatchQueue.main.asyncAfter(deadline: .now() + 4) {\n     observable\n         .subscribe(onNext: { value in\n             print(\"Observer 2: \\(value)\")\n         })\n         .disposed(by: disposeBag)\n}\n```\n\n<font size=3 color=#4169E1>**5.3 multicast**</font>\n\nConvert a normal Observable to a joinable Observable. Send it through the characteristic subject, such as PublishSubject, or replaySubject, behaviorSubject, etc. Different Subjects will have different results. Use the connect() method to start emitting elements.\n\n```Swift\nlet disposeBag = DisposeBag()\n\nlet subject = PublishSubject<Int>()\n\nlet observable = Observable<Int>.interval(.seconds(1), scheduler: MainScheduler.instance)\n     .take(5)\n     .multicast(subject) // Use multicast and specify Subject\n\n// first observer\nobservable\n     .subscribe(onNext: { value in\n         print(\"Observer 1: \\(value)\")\n     })\n     .disposed(by: disposeBag)\n\n// Connect after some delay\nDispatchQueue.main.asyncAfter(deadline: .now() + 2) {\n     observable.connect() // Start emitting elements\n}\n\n// second observer\nDispatchQueue.main.asyncAfter(deadline: .now() + 4) {\n     observable\n         .subscribe(onNext: { value in\n             print(\"Observer 2: \\(value)\")\n         })\n         .disposed(by: disposeBag)\n}\n```\n\n#### <font size=3 color=#4169E1>6. Error Handling</font>\n\n<font size=3 color=#4169E1>**6.1 catchErrorJustReturn**</font>\n\nUsed to replace the error's Observable sequence with a predefined default value when an error is encountered, and then continue subscribing to the original Observable. It can be used to handle errors without interrupting the flow of the entire Observable and provide a default value to replace the erroneous element. To put it simply, when encountering an error event, return a default value and end.\n\n```Swift\nlet disposeBag = DisposeBag()\n\nlet numbers = Observable.of(1, 2, 3, 4, 5)\n\nnumbers\n     .map { value -> Int in\n         if value == 3 {\n             throw NSError(domain: \"CustomErrorDomain\", code: 0, userInfo: nil)\n         }\n         return value\n     }\n     .catchErrorJustReturn(-1) // Emit the default value -1 when an error is encountered\n     .subscribe(onNext: { element in\n         print(\"The processed element is: \\(element)\")\n     }, onError: { error in\n         print(\"An error occurred: \\(error)\")\n     })\n     .disposed(by: disposeBag)\n```\n\n<font size=3 color=#4169E1>**6.2 catchError**</font>\n\nOperator for handling errors, which allows you to perform custom error handling logic when an error is encountered, that is, capture the error for processing and return a new Observable to continue subscribing.\n\n```Swift\nlet disposeBag = DisposeBag()\n\nlet numbers = Observable.of(1, 2, 3, 4, 5)\n\nnumbers\n     .map { value -> Int in\n         if value == 3 {\n             throw NSError(domain: \"CustomErrorDomain\", code: 0, userInfo: nil)\n         }\n         return value\n     }\n     .catchError { error in\n         print(\"Error caught: \\(error)\")\n         return Observable.of(-1) // Return a new Observable to continue subscribing\n     }\n     .subscribe(onNext: { element in\n         print(\"The processed element is: \\(element)\")\n     })\n     .disposed(by: disposeBag)\n```\n\n<font size=3 color=#4169E1>**6.3 retry**</font>\n\nUsed to try to resubscribe to the original Observable when an error is encountered to continue receiving elements. If an error occurs, the retry operator resubscribes to the original Observable and continues to emit elements until the maximum number of attempts is reached or no more errors occur. Especially commonly used when network requests fail.\n\n```Swift\nlet disposeBag = DisposeBag()\n\nvar attempts = 0\n\nlet observable = Observable<Int>.create { observer in\n     attempts += 1\n     if attempts < 4 {\n         observer.onError(NSError(domain: \"CustomErrorDomain\", code: 0, userInfo: nil))\n     } else {\n         observer.onNext(10)\n         observer.onCompleted()\n     }\n     return Disposables.create()\n}\n\nobservable\n     .retry(3) // Retry up to 3 times\n     .subscribe(\n         onNext: { element in\n             print(\"The received element is: \\(element)\")\n         },\n         onError: { error in\n             print(\"An error occurred: \\(error)\")\n         },\n         onCompleted: {\n             print(\"Operation completed\")\n         }\n     )\n     .disposed(by: disposeBag)\n\n```\n\n#### <font size=3 color=#4169E1>7.Debug</font>\n\n<font size=3 color=#4169E1>**7.1 debug**</font>\n\nOperator for debugging, which allows you to insert debugging information into the Observable stream to track the Observable's life cycle, element emission and subscription events, etc. Typically used when developing and debugging RxSwift code to better understand the behavior of Observables.\n\n```Swift\nlet disposeBag = DisposeBag()\n\nlet observable = Observable<Int>.create { observer in\n     observer.on(.next(1))\n     observer.on(.next(2))\n     observer.on(.completed)\n     return Disposables.create()\n}\n\nobservable\n     .debug(\"Observable\")\n     .subscribe(\n         onNext: { element in\n             print(\"The received element is: \\(element)\")\n         },\n         onError: { error in\n             print(\"An error occurred: \\(error)\")\n         },\n         onCompleted: {\n             print(\"Operation completed\")\n         }\n     )\n     .disposed(by: disposeBag)\n```\n\n<font size=3 color=#4169E1>**7.2 RxSwift.Resources.total**</font>\n\nProperty used to get the current RxSwift resource count. It is used to monitor the number of resources created and released by RxSwift in the current application. These resources include Observable, Disposable, Operators, etc. Resource counts can help you detect potential resource leak issues or unreasonable resource usage.\n\n```Swift\nlet disposeBag = DisposeBag()\n\n// Create some Observables and Disposables\nlet observable = Observable<Int>.just(1)\nlet disposable = observable.subscribe()\n\n// Get the current RxSwift resource count\nlet resourceCount = RxSwift.Resources.total\n\nprint(\"Current RxSwift resource count: \\(resourceCount)\")\n\n// Remember to release resources to avoid resource leaks\ndisposable.dispose()\n\n// Get the RxSwift resource count again\nlet updatedResourceCount = RxSwift.Resources.total\n\nprint(\"Updated RxSwift resource count: \\(updatedResourceCount)\")\n```\n\n\n#### <font size=4 color=gray>*Reference*</font>\n[1] https://github.com/ReactiveX/RxSwift\n[2] https://www.jianshu.com/p/f4ad780cc7a2\n[3] https://www.jianshu.com/p/d35a99815806\n[4] https://zhuanlan.zhihu.com/p/25939562\n\n","source":"_posts/Reactive Programming/00. RxSwift/04. RxSwift (4).md","raw":"---\ntitle: 04. RxSwift (4) ———— Advanced Operations\ndate: 2023-09-22 18:00:00\ncategories: \n- [Reactive Programming, 00. RxSwift]\ntags:\n- RxSwift\n---\n\n<font color=gray size=2>*It will take about 5 minutes to finish reading this article.*</font>\n\n\n#### <font size=3 color=#4169E1>1. Combination Operations</font>\n\nA combination operation is the synthesis of multiple Observable streams into a single Observable stream.\n\n<font size=3 color=#4169E1>**1.1 startWith**</font>  \n\nIt is used to insert a specified initial element before the sequence of elements of the Observable sequence, and then emit the elements of the original Observable sequence in turn. In other words, a specific event message is emitted before the event message is emitted. For example, if you emit events 2 , 3 and then I startWith(1), then 1 will be emitted first, then 2 , 3.\n\n{% img /assets/ReactiveProgramming/RxSwift/10.jpeg %}\n\n```Swift\nfunc example15() {\n    Observable.of(\"2\", \"3\")\n    .startWith(\"1\")\n    .subscribe(onNext: { print($0) })\n    .disposed(by: disposeBag)\n}\n//Result：\n1\n2\n3\n```\n\n<font size=3 color=#4169E1>**1.2 merge**</font> \n\nUsed to merge multiple Observable sequences into a new Observable sequence while maintaining the order in which elements of all original Observable sequences are emitted (corresponding events are emitted according to the timeline).\n\n```Swift\nfunc example16() {\n    let subject1 = PublishSubject<String>()\n    let subject2 = PublishSubject<String>()\n\n    Observable.of(subject1, subject2)\n    .merge()\n    .subscribe(onNext: { print($0) })\n    .disposed(by: disposeBag)\n\n    subject1.onNext(\"?️\")\n    subject1.onNext(\"?️\")\n    subject2.onNext(\"①\")\n    subject2.onNext(\"②\")\n    subject1.onNext(\"?\")\n    subject2.onNext(\"③\")\n}\n//Result:\n?️\n?️\n①\n②\n?\n③\n```\n\n<font size=3 color=#4169E1>**1.3 zip**</font> \n\nUsed to merge the elements of multiple Observable sequences into a new element one by one in order, and emit these new elements in sequence. In other words, the zip operator waits for all participating Observable sequences to emit an element, then merges these elements one-to-one in order into a new element, and then emits the new element.\n\nzip binds up to 8 Observable streams and processes them together. Note that Zip is an event corresponding to an event in another stream.\n\n{% img /assets/ReactiveProgramming/RxSwift/11.jpeg %}\n\n```Swift\nfunc example17() {\n     let stringSubject = PublishSubject<String>()\n     let intSubject = PublishSubject<Int>()\n\n     Observable.zip(stringSubject, intSubject) { stringElement, intElement in\n         \"\\(stringElement) \\(intElement)\"\n         }\n     .subscribe(onNext: { print($0) })\n     .disposed(by: disposeBag)\n\n     stringSubject.onNext(\"?️\")\n     stringSubject.onNext(\"?️\")\n\n     intSubject.onNext(1)\n\n     intSubject.onNext(2)\n\n     stringSubject.onNext(\"?\")\n     intSubject.onNext(3)\n}\n//Compress stringSubject and intSubject together for joint processing\n//Results:\n? 1 \n? 2\n? 3\n\n```\n\n<font size=3 color=#4169E1>**1.4 combineLatest**</font> \n\nUsed to combine the latest elements of multiple Observable sequences into a new tuple, and emit this new tuple when any of the original Observable sequences emits a new element. Note: It binds no more than 8 Observable streams. The difference from Zip is that combineLatest is that the event of one stream corresponds to the latest event of another stream. Both events will be the latest events. You can compare the following figure with that of Zip.\n\n{% img /assets/ReactiveProgramming/RxSwift/12.jpeg %}\n\n```Swift\n\nfunc example18() {\n    let stringSubject = PublishSubject<String>()\n    let intSubject = PublishSubject<Int>()\n\n    Observable.combineLatest(stringSubject, intSubject) { stringElement, intElement in\n            \"\\(stringElement) \\(intElement)\"\n        }\n    .subscribe(onNext: { print($0) })\n    .disposed(by: disposeBag)\n\n    stringSubject.onNext(\"?️\")\n    stringSubject.onNext(\"?️\")\n    intSubject.onNext(1)\n    intSubject.onNext(2)\n    stringSubject.onNext(\"?\")\n}\n//Results:\n? 1\n? 2\n? 2\n```\n\n#### <font size=3 color=#4169E1>2. Transformation Operations</font> \n\n<font size=3 color=#4169E1>**2.1 map**</font> \n\nUsed to apply a transformation function to each element in an Observable sequence and emit the transformed elements as a new Observable sequence.\n\n{% img /assets/ReactiveProgramming/RxSwift/13.jpeg %}\n\n```Swift\nfunc example19() {\n     //Multiply each element by itself\n     Observable.of(1, 2, 3)\n     .map { $0 * $0 }\n     .subscribe(onNext: { print($0) })\n     .disposed(by: disposeBag)\n}\n//Results:\n1\n4\n9\n```\n\n<font size=3 color=#4169E1>**2.2 flatMap**</font> \n\nUsed to map each element in the original Observable sequence into a new Observable sequence, then merge these new Observable sequences into a single Observable sequence, and emit elements sequentially in the order in which they were emitted. flatMap has an unpacking action, please see the code analysis.\n\n{% img /assets/ReactiveProgramming/RxSwift/13.jpeg %}\n\n```Swift\nstruct Player {\n     var score: Variable<Int> //There is a Variable inside\n}\n\nfunc example20() {\n\n     let ?? = Player(score: Variable(80))\n     let ?? = Player(score: Variable(90))\n     let ? = Player(score: Variable(550))\n\n     let player = Variable(??) //Convert player to Variable\n\n     player.asObservable() //Unboxing and converting into a sequence that can be monitored\n         .flatMap { $0.score.asObservable() } // flatMap has an unpacking action. $0 should have been a BehaviorSubject type, but the score was directly accessed. So I guess flatMap performed onNext unpacking on behaviorSubject to get the data.\n         .subscribe(onNext: { print($0) })\n         .addDisposableTo(disposeBag)\n\n     ??.score.value = 85\n\n     player.value = ?? //Changing the value is equivalent to adding another sequence. Both sequences can be received.\n\n     ??.score.value = 95\n     ??.score.value = 222\n     player.value = ?\n\n     ??.score.value = 100\n}\n//Results:\n80\n85\n90\n95\n222\n550\n100\n```\n\n<font size=3 color=#4169E1>**2.3 flatMapLatest**</font>\n\nIt is used to map the elements in the original Observable sequence into a new Observable sequence, and only emits the elements of the latest mapped Observable, ignoring the old mapped Observable. Change the above example to flatMapLatest and the result is:\n\n```Swift\n80\n85\n90\n550\n```\n\n<font size=3 color=#4169E1>**2.4 scan**</font>\n\nUsed to process the elements of an observable sequence one by one according to the specified accumulation rules and generate a new observable sequence that emits the accumulated results of each step.\n\n```Swift\nfunc example21() {\n\n    Observable.of(10, 100, 1000)\n    .scan(1) { aggregateValue, newValue in\n        aggregateValue + newValue\n    }\n    .subscribe(onNext: { print($0) })\n    .disposed(by: disposeBag)\n}\n//Results:\n11\n111\n1111\n```\n\n#### <font size=3 color=#4169E1>3. Filtering And Constraint Operations</font>\n\n<font size=3 color=#4169E1>**3.1 filter**</font>\n\nUsed to select elements that meet specified conditions from an Observable sequence, and then emit these elements as a new Observable.\n\n```Swift\nfunc example22() {\n    Observable.of(\n    \"1\", \"2\", \"3\",\n    \"?\", \"?\", \"?\",\n    \"4\", \"5\", \"6\")\n    .filter {\n        $0 == \"?\"\n    }\n    .subscribe(onNext: { print($0) })\n    .disposed(by: disposeBag)\n}\n//Results:\n?\n?\n?\n```\n\n\n<font size=3 color=#4169E1>**3.2 distinctUntilChanged**</font>\n\nIt is used to filter out consecutive repeated elements and emit only those elements that are not identical to the previous element. This operation is similar to RAC.\n\n```Swift\nfunc example23() {\n    Observable.of(\"?\", \"?\", \"?\", \"?\", \"?\", \"?\", \"?\")\n    .distinctUntilChanged()\n    .subscribe(onNext: { print($0) })\n    .disposed(by: disposeBag)\n}\n//Results:\n?\n```\n\n<font size=3 color=#4169E1>**3.3 elementAt**</font>\n\nUsed to obtain the element at the specified index position from an Observable sequence and emit it as a new Observable. This operator takes an index value as a parameter and returns a new Observable that emits only the element at the specified index in the original sequence and then completes immediately.\n\n```Swift\nfunc example24() {\n    Observable.of(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\")\n    .element(at:3)\n    .subscribe(onNext: { print($0) })\n    .disposed(by: disposeBag)\n}\n//Results:\n4\n```\n\n<font size=3 color=#4169E1>**3.4 single**</font>\n\nUsed to get a single element from an Observable sequence and emit it as a new Observable. This operator is typically used to ensure that the Observable emits only one element, and it will generate an error event if the Observable emits multiple elements or no elements.\n\n```Swift\nfunc example25() {\n     Observable.of(\"?\", \"?\", \"?\", \"?\", \"?\", \"?\")\n     .single()\n     .subscribe(onNext: { print($0) })\n     .disposed(by: disposeBag)\n    \n}\n//Results:\n?\nUnhandled error happened: Sequence contains more than one element. //Single signal exceeds one\n```\n<font size=3 color=#4169E1>**3.5 take**</font>\n\nUsed to take a specified number of elements from an Observable sequence and emit them as a new Observable. This operator accepts an integer parameter, indicating the number of elements to be removed.\n\n```Swift\n\nfunc example26() {\n    Observable.of(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\")\n    .take(3)\n    .subscribe(onNext: { print($0) })\n    .disposed(by: disposeBag)\n}\n//Results:\n1\n2\n3\n```\n\n<font size=3 color=#4169E1>**3.6 takeLast**</font>\n\nThis operator accepts an integer parameter indicating the number of last elements to be obtained, i.e. it only handles the last few event signals.\n\n```Swift\nfunc example27() {\n    Observable.of(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\")\n    .takeLast(3)\n    .subscribe(onNext: { print($0) })\n    .disposed(by: disposeBag)\n}\n//Results:\n4\n5\n6\n```\n\n<font size=3 color=#4169E1>**3.7 takeWhile**</font>\n\nUsed to obtain elements from an Observable sequence based on a certain condition until the condition is no longer met, and emit these elements as a new Observable. This operator accepts a closure argument that returns a Boolean value indicating whether the condition is met.\n\n```Swift\nfunc example28() {\n    Observable.of(1, 2, 3, 4, 5, 6)\n    .take(while: {$0 < 4 })\n    .subscribe(onNext: { print($0) })\n    .disposed(by: disposeBag)\n}\n//Results:\n1\n2\n3\n```\n\n<font size=3 color=#4169E1>**3.8 takeUntil**</font>\n\nUsed to get elements from an Observable sequence if the specified conditions are met, and emit the elements as a new Observable until another specified Observable emits elements or completes.\n\n```Swift\nfunc example29() {\n     let sourceSequence = PublishSubject<String>()\n     let referenceSequence = PublishSubject<String>()\n\n     sourceSequence\n     .take(until:referenceSequence)\n     .subscribe { print($0) }\n     .disposed(by: disposeBag)\n     sourceSequence.onNext(\"?\")\n     sourceSequence.onNext(\"?\")\n     sourceSequence.onNext(\"?\")\n     referenceSequence.onNext(\"?\") //Stop receiving messages\n     sourceSequence.onNext(\"?\")\n     sourceSequence.onNext(\"?\")\n     sourceSequence.onNext(\"?\")\n}\n//Results:\nnext(?)\nnext(?)\nnext(?)\ncompleted\n```\n\n<font size=3 color=#4169E1>**3.9 skip**</font>\n\nUsed to skip a specified number of elements from an Observable sequence and emit the remaining elements as a new Observable.\n\n```Swift\nfunc example30() {\n    Observable.of(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\")\n    .skip(2)\n    .subscribe(onNext: { print($0) })\n    .disposed(by: disposeBag)\n}\n//Result:\n3\n4\n5\n6\n```\n\n<font size=3 color=#4169E1>**3.10 skipWhile**</font>\n\nUsed to skip elements in an Observable sequence if specified conditions are met, and then emit the remaining elements as a new Observable. This operator accepts a closure argument that returns a Boolean value indicating whether the current element should be skipped.\n\n```Swift\n\nfunc example31() {\n    Observable.of(1, 2, 3, 4, 5, 6)\n    .skip(while: { $0 < 4 } )\n    .subscribe(onNext: { print($0) })\n    .disposed(by: disposeBag)\n}\n//Result:\n4\n5\n6\n```\n\n<font size=3 color=#4169E1>**3.11 skipUntil**</font>\n\nUsed to skip elements in an original Observable before waiting for another Observable to emit elements. Specifically, skipUntil accepts an Observable as a parameter. When this parameter Observable emits elements, skipUntil will start emitting elements in the original Observable.\n\n```Swift\n\nfunc example32() {\n    let sourceSequence = PublishSubject<String>()\n    let referenceSequence = PublishSubject<String>()\n\n    sourceSequence\n    .skip(until: referenceSequence)\n    .subscribe(onNext: { print($0) })\n    .disposed(by: disposeBag)\n\n    sourceSequence.onNext(\"1\")\n    sourceSequence.onNext(\"2\")\n    sourceSequence.onNext(\"3\")\n\n    referenceSequence.onNext(\"4\")\n\n    sourceSequence.onNext(\"5\")\n    sourceSequence.onNext(\"6\")\n    sourceSequence.onNext(\"7\")\n}\n//Result:\n5\n6\n7\n```\n\n#### <font size=3 color=#4169E1>4. Math Operations</font>\n\n<font size=3 color=#4169E1>**4.1 toArray**</font>\n\nIt is used to collect all the elements in an Observable sequence into an array and emit the array as a single-element Observable. In other words, it converts a sequence of multiple elements into an array containing all the elements and emits that array.\n\n```Swift\nfunc example33() {\n    Observable.range(start: 1, count: 10)\n    .toArray()\n    .subscribe { print($0) }\n    .disposed(by: disposeBag)\n}\n//Result:\nsuccess([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n```\n\n<font size=3 color=#4169E1>**4.2 reduce**</font>\n\nIt is used to accumulate (reduce) elements in an Observable sequence according to specified rules, and emit the final result as a new Observable.\n\n```Swift\n\nfunc example34() {\n    Observable.of(10, 100, 1000)\n    .reduce(1, accumulator: +)\n    .subscribe(onNext: { print($0) })\n    .disposed(by: disposeBag)\n}\n//Result：\n1111\n```\n\n<font size=3 color=#4169E1>**4.3 Concat**</font>\n\nconcat will combine multiple sequences into one sequence, and the event of the next sequence will not start until the previous sequence emits the completed event.\n\nBefore the first sequence is completed, events emitted by the second sequence will be ignored, but the last event emitted by the second sequence before completion will be received.\n\n```Swift\nfunc example35() {\n     let subject1 = BehaviorSubject(value: \"?\")\n     let subject2 = BehaviorSubject(value: \"?\")\n\n     let variable = Variable(subject1)\n\n     variable.asObservable()\n     .concat()\n     .subscribe { print($0) }\n     .disposed(by: disposeBag)\n\n     subject1.onNext(\"?\")\n     subject1.onNext(\"?\")\n\n     variable.value = subject2\n\n     subject2.onNext(\"?\") //1 will be ignored before completion\n     subject2.onNext(\"teng\") //1 will be ignored before completion\n     subject2.onNext(\"fei\") //The last one before 1 is completed will be received\n     subject1.onCompleted()\n     subject2.onNext(\"?\")\n}\n//Results:\nnext(?)\nnext(?)\nnext(?)\nnext(fei)\nnext(?)\n```\n\n#### <font size=3 color=#4169E1>5. Connectable Operations</font>\n\nConnectable Operators are a special class of operators that are used to control situations where multiple observers share the same underlying data source. These operators can convert a normal Observable into a connectable Observable, and then use the connect() method to allow multiple observers to subscribe to this connectable Observable so that they share the same data. Here are some common connectivity operations:\n\n<font size=3 color=#4169E1>**5.1 publish**</font>\n\nConvert a normal sequence into a connectable sequence, and a normal Observable into a connectable Observable. It does not start emitting elements immediately, but waits for the connect() method to be called.\n\n```Swift\nlet disposeBag = DisposeBag()\n\nlet observable = Observable<Int>.interval(.seconds(1), scheduler: MainScheduler.instance)\n     .take(5)\n     .publish() // Use publish to make the Observable connectable\n\n// first observer\nobservable\n     .subscribe(onNext: { value in\n         print(\"Observer 1: \\(value)\")\n     })\n     .disposed(by: disposeBag)\n\n// Connect after some delay\nDispatchQueue.main.asyncAfter(deadline: .now() + 2) {\n     observable.connect() // Start emitting elements\n}\n\n// second observer\nDispatchQueue.main.asyncAfter(deadline: .now() + 4) {\n     observable\n         .subscribe(onNext: { value in\n             print(\"Observer 2: \\(value)\")\n         })\n         .disposed(by: disposeBag)\n}\n```\n\n<font size=3 color=#4169E1>**5.2 replay**</font>\n\nConverts a normal Observable to a connectable Observable and caches the elements it emits so that subsequent observers can obtain previously emitted elements.\n\n```Swift\nlet disposeBag = DisposeBag()\n\nlet observable = Observable<Int>.interval(.seconds(1), scheduler: MainScheduler.instance)\n     .take(5)\n     .replay(2) // Use replay to cache the latest 2 elements\n\n// first observer\nobservable\n     .subscribe(onNext: { value in\n         print(\"Observer 1: \\(value)\")\n     })\n     .disposed(by: disposeBag)\n\n// Connect after some delay\nDispatchQueue.main.asyncAfter(deadline: .now() + 2) {\n     observable.connect() // Start emitting elements\n}\n\n// second observer\nDispatchQueue.main.asyncAfter(deadline: .now() + 4) {\n     observable\n         .subscribe(onNext: { value in\n             print(\"Observer 2: \\(value)\")\n         })\n         .disposed(by: disposeBag)\n}\n```\n\n<font size=3 color=#4169E1>**5.3 multicast**</font>\n\nConvert a normal Observable to a joinable Observable. Send it through the characteristic subject, such as PublishSubject, or replaySubject, behaviorSubject, etc. Different Subjects will have different results. Use the connect() method to start emitting elements.\n\n```Swift\nlet disposeBag = DisposeBag()\n\nlet subject = PublishSubject<Int>()\n\nlet observable = Observable<Int>.interval(.seconds(1), scheduler: MainScheduler.instance)\n     .take(5)\n     .multicast(subject) // Use multicast and specify Subject\n\n// first observer\nobservable\n     .subscribe(onNext: { value in\n         print(\"Observer 1: \\(value)\")\n     })\n     .disposed(by: disposeBag)\n\n// Connect after some delay\nDispatchQueue.main.asyncAfter(deadline: .now() + 2) {\n     observable.connect() // Start emitting elements\n}\n\n// second observer\nDispatchQueue.main.asyncAfter(deadline: .now() + 4) {\n     observable\n         .subscribe(onNext: { value in\n             print(\"Observer 2: \\(value)\")\n         })\n         .disposed(by: disposeBag)\n}\n```\n\n#### <font size=3 color=#4169E1>6. Error Handling</font>\n\n<font size=3 color=#4169E1>**6.1 catchErrorJustReturn**</font>\n\nUsed to replace the error's Observable sequence with a predefined default value when an error is encountered, and then continue subscribing to the original Observable. It can be used to handle errors without interrupting the flow of the entire Observable and provide a default value to replace the erroneous element. To put it simply, when encountering an error event, return a default value and end.\n\n```Swift\nlet disposeBag = DisposeBag()\n\nlet numbers = Observable.of(1, 2, 3, 4, 5)\n\nnumbers\n     .map { value -> Int in\n         if value == 3 {\n             throw NSError(domain: \"CustomErrorDomain\", code: 0, userInfo: nil)\n         }\n         return value\n     }\n     .catchErrorJustReturn(-1) // Emit the default value -1 when an error is encountered\n     .subscribe(onNext: { element in\n         print(\"The processed element is: \\(element)\")\n     }, onError: { error in\n         print(\"An error occurred: \\(error)\")\n     })\n     .disposed(by: disposeBag)\n```\n\n<font size=3 color=#4169E1>**6.2 catchError**</font>\n\nOperator for handling errors, which allows you to perform custom error handling logic when an error is encountered, that is, capture the error for processing and return a new Observable to continue subscribing.\n\n```Swift\nlet disposeBag = DisposeBag()\n\nlet numbers = Observable.of(1, 2, 3, 4, 5)\n\nnumbers\n     .map { value -> Int in\n         if value == 3 {\n             throw NSError(domain: \"CustomErrorDomain\", code: 0, userInfo: nil)\n         }\n         return value\n     }\n     .catchError { error in\n         print(\"Error caught: \\(error)\")\n         return Observable.of(-1) // Return a new Observable to continue subscribing\n     }\n     .subscribe(onNext: { element in\n         print(\"The processed element is: \\(element)\")\n     })\n     .disposed(by: disposeBag)\n```\n\n<font size=3 color=#4169E1>**6.3 retry**</font>\n\nUsed to try to resubscribe to the original Observable when an error is encountered to continue receiving elements. If an error occurs, the retry operator resubscribes to the original Observable and continues to emit elements until the maximum number of attempts is reached or no more errors occur. Especially commonly used when network requests fail.\n\n```Swift\nlet disposeBag = DisposeBag()\n\nvar attempts = 0\n\nlet observable = Observable<Int>.create { observer in\n     attempts += 1\n     if attempts < 4 {\n         observer.onError(NSError(domain: \"CustomErrorDomain\", code: 0, userInfo: nil))\n     } else {\n         observer.onNext(10)\n         observer.onCompleted()\n     }\n     return Disposables.create()\n}\n\nobservable\n     .retry(3) // Retry up to 3 times\n     .subscribe(\n         onNext: { element in\n             print(\"The received element is: \\(element)\")\n         },\n         onError: { error in\n             print(\"An error occurred: \\(error)\")\n         },\n         onCompleted: {\n             print(\"Operation completed\")\n         }\n     )\n     .disposed(by: disposeBag)\n\n```\n\n#### <font size=3 color=#4169E1>7.Debug</font>\n\n<font size=3 color=#4169E1>**7.1 debug**</font>\n\nOperator for debugging, which allows you to insert debugging information into the Observable stream to track the Observable's life cycle, element emission and subscription events, etc. Typically used when developing and debugging RxSwift code to better understand the behavior of Observables.\n\n```Swift\nlet disposeBag = DisposeBag()\n\nlet observable = Observable<Int>.create { observer in\n     observer.on(.next(1))\n     observer.on(.next(2))\n     observer.on(.completed)\n     return Disposables.create()\n}\n\nobservable\n     .debug(\"Observable\")\n     .subscribe(\n         onNext: { element in\n             print(\"The received element is: \\(element)\")\n         },\n         onError: { error in\n             print(\"An error occurred: \\(error)\")\n         },\n         onCompleted: {\n             print(\"Operation completed\")\n         }\n     )\n     .disposed(by: disposeBag)\n```\n\n<font size=3 color=#4169E1>**7.2 RxSwift.Resources.total**</font>\n\nProperty used to get the current RxSwift resource count. It is used to monitor the number of resources created and released by RxSwift in the current application. These resources include Observable, Disposable, Operators, etc. Resource counts can help you detect potential resource leak issues or unreasonable resource usage.\n\n```Swift\nlet disposeBag = DisposeBag()\n\n// Create some Observables and Disposables\nlet observable = Observable<Int>.just(1)\nlet disposable = observable.subscribe()\n\n// Get the current RxSwift resource count\nlet resourceCount = RxSwift.Resources.total\n\nprint(\"Current RxSwift resource count: \\(resourceCount)\")\n\n// Remember to release resources to avoid resource leaks\ndisposable.dispose()\n\n// Get the RxSwift resource count again\nlet updatedResourceCount = RxSwift.Resources.total\n\nprint(\"Updated RxSwift resource count: \\(updatedResourceCount)\")\n```\n\n\n#### <font size=4 color=gray>*Reference*</font>\n[1] https://github.com/ReactiveX/RxSwift\n[2] https://www.jianshu.com/p/f4ad780cc7a2\n[3] https://www.jianshu.com/p/d35a99815806\n[4] https://zhuanlan.zhihu.com/p/25939562\n\n","slug":"Reactive Programming/00. RxSwift/04. RxSwift (4)","published":1,"updated":"2023-10-10T21:16:12.633Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr4o000nvu0m19d4hlq1","content":"<p><font color=gray size=2><em>It will take about 5 minutes to finish reading this article.</em></font></p>\n<h4 id=\"1-Combination-Operations\"><a href=\"#1-Combination-Operations\" class=\"headerlink\" title=\"1. Combination Operations\"></a><font size=3 color=#4169E1>1. Combination Operations</font></h4><p>A combination operation is the synthesis of multiple Observable streams into a single Observable stream.</p>\n<p><font size=3 color=#4169E1><strong>1.1 startWith</strong></font>  </p>\n<p>It is used to insert a specified initial element before the sequence of elements of the Observable sequence, and then emit the elements of the original Observable sequence in turn. In other words, a specific event message is emitted before the event message is emitted. For example, if you emit events 2 , 3 and then I startWith(1), then 1 will be emitted first, then 2 , 3.</p>\n<img src=\"/assets/ReactiveProgramming/RxSwift/10.jpeg\" class=\"\">\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example15</span>() &#123;</span><br><span class=\"line\">    <span class=\"type\">Observable</span>.of(<span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>)</span><br><span class=\"line\">    .startWith(<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">    .subscribe(onNext: &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;)</span><br><span class=\"line\">    .disposed(by: disposeBag)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Result：</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<p><font size=3 color=#4169E1><strong>1.2 merge</strong></font> </p>\n<p>Used to merge multiple Observable sequences into a new Observable sequence while maintaining the order in which elements of all original Observable sequences are emitted (corresponding events are emitted according to the timeline).</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example16</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> subject1 <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> subject2 <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Observable</span>.of(subject1, subject2)</span><br><span class=\"line\">    .merge()</span><br><span class=\"line\">    .subscribe(onNext: &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;)</span><br><span class=\"line\">    .disposed(by: disposeBag)</span><br><span class=\"line\"></span><br><span class=\"line\">    subject1.onNext(<span class=\"string\">&quot;?️&quot;</span>)</span><br><span class=\"line\">    subject1.onNext(<span class=\"string\">&quot;?️&quot;</span>)</span><br><span class=\"line\">    subject2.onNext(<span class=\"string\">&quot;①&quot;</span>)</span><br><span class=\"line\">    subject2.onNext(<span class=\"string\">&quot;②&quot;</span>)</span><br><span class=\"line\">    subject1.onNext(<span class=\"string\">&quot;?&quot;</span>)</span><br><span class=\"line\">    subject2.onNext(<span class=\"string\">&quot;③&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Result:</span></span><br><span class=\"line\"><span class=\"operator\">?️</span></span><br><span class=\"line\"><span class=\"operator\">?️</span></span><br><span class=\"line\">①</span><br><span class=\"line\">②</span><br><span class=\"line\"><span class=\"operator\">?</span></span><br><span class=\"line\">③</span><br></pre></td></tr></table></figure>\n\n<p><font size=3 color=#4169E1><strong>1.3 zip</strong></font> </p>\n<p>Used to merge the elements of multiple Observable sequences into a new element one by one in order, and emit these new elements in sequence. In other words, the zip operator waits for all participating Observable sequences to emit an element, then merges these elements one-to-one in order into a new element, and then emits the new element.</p>\n<p>zip binds up to 8 Observable streams and processes them together. Note that Zip is an event corresponding to an event in another stream.</p>\n<img src=\"/assets/ReactiveProgramming/RxSwift/11.jpeg\" class=\"\">\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example17</span>() &#123;</span><br><span class=\"line\">     <span class=\"keyword\">let</span> stringSubject <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\">     <span class=\"keyword\">let</span> intSubject <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">Int</span>&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"type\">Observable</span>.zip(stringSubject, intSubject) &#123; stringElement, intElement <span class=\"keyword\">in</span></span><br><span class=\"line\">         <span class=\"string\">&quot;<span class=\"subst\">\\(stringElement)</span> <span class=\"subst\">\\(intElement)</span>&quot;</span></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     .subscribe(onNext: &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;)</span><br><span class=\"line\">     .disposed(by: disposeBag)</span><br><span class=\"line\"></span><br><span class=\"line\">     stringSubject.onNext(<span class=\"string\">&quot;?️&quot;</span>)</span><br><span class=\"line\">     stringSubject.onNext(<span class=\"string\">&quot;?️&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">     intSubject.onNext(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">     intSubject.onNext(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">     stringSubject.onNext(<span class=\"string\">&quot;?&quot;</span>)</span><br><span class=\"line\">     intSubject.onNext(<span class=\"number\">3</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Compress stringSubject and intSubject together for joint processing</span></span><br><span class=\"line\"><span class=\"comment\">//Results:</span></span><br><span class=\"line\"><span class=\"operator\">?</span> <span class=\"number\">1</span> </span><br><span class=\"line\"><span class=\"operator\">?</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"operator\">?</span> <span class=\"number\">3</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><font size=3 color=#4169E1><strong>1.4 combineLatest</strong></font> </p>\n<p>Used to combine the latest elements of multiple Observable sequences into a new tuple, and emit this new tuple when any of the original Observable sequences emits a new element. Note: It binds no more than 8 Observable streams. The difference from Zip is that combineLatest is that the event of one stream corresponds to the latest event of another stream. Both events will be the latest events. You can compare the following figure with that of Zip.</p>\n<img src=\"/assets/ReactiveProgramming/RxSwift/12.jpeg\" class=\"\">\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example18</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> stringSubject <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> intSubject <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">Int</span>&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Observable</span>.combineLatest(stringSubject, intSubject) &#123; stringElement, intElement <span class=\"keyword\">in</span></span><br><span class=\"line\">            <span class=\"string\">&quot;<span class=\"subst\">\\(stringElement)</span> <span class=\"subst\">\\(intElement)</span>&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    .subscribe(onNext: &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;)</span><br><span class=\"line\">    .disposed(by: disposeBag)</span><br><span class=\"line\"></span><br><span class=\"line\">    stringSubject.onNext(<span class=\"string\">&quot;?️&quot;</span>)</span><br><span class=\"line\">    stringSubject.onNext(<span class=\"string\">&quot;?️&quot;</span>)</span><br><span class=\"line\">    intSubject.onNext(<span class=\"number\">1</span>)</span><br><span class=\"line\">    intSubject.onNext(<span class=\"number\">2</span>)</span><br><span class=\"line\">    stringSubject.onNext(<span class=\"string\">&quot;?&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Results:</span></span><br><span class=\"line\"><span class=\"operator\">?</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"operator\">?</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"operator\">?</span> <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-Transformation-Operations\"><a href=\"#2-Transformation-Operations\" class=\"headerlink\" title=\"2. Transformation Operations\"></a><font size=3 color=#4169E1>2. Transformation Operations</font></h4><p><font size=3 color=#4169E1><strong>2.1 map</strong></font> </p>\n<p>Used to apply a transformation function to each element in an Observable sequence and emit the transformed elements as a new Observable sequence.</p>\n<img src=\"/assets/ReactiveProgramming/RxSwift/13.jpeg\" class=\"\">\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example19</span>() &#123;</span><br><span class=\"line\">     <span class=\"comment\">//Multiply each element by itself</span></span><br><span class=\"line\">     <span class=\"type\">Observable</span>.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">     .map &#123; <span class=\"variable\">$0</span> <span class=\"operator\">*</span> <span class=\"variable\">$0</span> &#125;</span><br><span class=\"line\">     .subscribe(onNext: &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;)</span><br><span class=\"line\">     .disposed(by: disposeBag)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Results:</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">9</span></span><br></pre></td></tr></table></figure>\n\n<p><font size=3 color=#4169E1><strong>2.2 flatMap</strong></font> </p>\n<p>Used to map each element in the original Observable sequence into a new Observable sequence, then merge these new Observable sequences into a single Observable sequence, and emit elements sequentially in the order in which they were emitted. flatMap has an unpacking action, please see the code analysis.</p>\n<img src=\"/assets/ReactiveProgramming/RxSwift/13.jpeg\" class=\"\">\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Player</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">var</span> score: <span class=\"type\">Variable</span>&lt;<span class=\"type\">Int</span>&gt; <span class=\"comment\">//There is a Variable inside</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example20</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">let</span> <span class=\"operator\">??</span> <span class=\"operator\">=</span> <span class=\"type\">Player</span>(score: <span class=\"type\">Variable</span>(<span class=\"number\">80</span>))</span><br><span class=\"line\">     <span class=\"keyword\">let</span> <span class=\"operator\">??</span> <span class=\"operator\">=</span> <span class=\"type\">Player</span>(score: <span class=\"type\">Variable</span>(<span class=\"number\">90</span>))</span><br><span class=\"line\">     <span class=\"keyword\">let</span> <span class=\"operator\">?</span> <span class=\"operator\">=</span> <span class=\"type\">Player</span>(score: <span class=\"type\">Variable</span>(<span class=\"number\">550</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">let</span> player <span class=\"operator\">=</span> <span class=\"type\">Variable</span>(<span class=\"operator\">??</span>) <span class=\"comment\">//Convert player to Variable</span></span><br><span class=\"line\"></span><br><span class=\"line\">     player.asObservable() <span class=\"comment\">//Unboxing and converting into a sequence that can be monitored</span></span><br><span class=\"line\">         .flatMap &#123; <span class=\"variable\">$0</span>.score.asObservable() &#125; <span class=\"comment\">// flatMap has an unpacking action. $0 should have been a BehaviorSubject type, but the score was directly accessed. So I guess flatMap performed onNext unpacking on behaviorSubject to get the data.</span></span><br><span class=\"line\">         .subscribe(onNext: &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;)</span><br><span class=\"line\">         .addDisposableTo(disposeBag)</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"operator\">??</span>.score.value <span class=\"operator\">=</span> <span class=\"number\">85</span></span><br><span class=\"line\"></span><br><span class=\"line\">     player.value <span class=\"operator\">=</span> <span class=\"operator\">??</span> <span class=\"comment\">//Changing the value is equivalent to adding another sequence. Both sequences can be received.</span></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"operator\">??</span>.score.value <span class=\"operator\">=</span> <span class=\"number\">95</span></span><br><span class=\"line\">     <span class=\"operator\">??</span>.score.value <span class=\"operator\">=</span> <span class=\"number\">222</span></span><br><span class=\"line\">     player.value <span class=\"operator\">=</span> <span class=\"operator\">?</span></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"operator\">??</span>.score.value <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Results:</span></span><br><span class=\"line\"><span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"number\">85</span></span><br><span class=\"line\"><span class=\"number\">90</span></span><br><span class=\"line\"><span class=\"number\">95</span></span><br><span class=\"line\"><span class=\"number\">222</span></span><br><span class=\"line\"><span class=\"number\">550</span></span><br><span class=\"line\"><span class=\"number\">100</span></span><br></pre></td></tr></table></figure>\n\n<p><font size=3 color=#4169E1><strong>2.3 flatMapLatest</strong></font></p>\n<p>It is used to map the elements in the original Observable sequence into a new Observable sequence, and only emits the elements of the latest mapped Observable, ignoring the old mapped Observable. Change the above example to flatMapLatest and the result is:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"number\">85</span></span><br><span class=\"line\"><span class=\"number\">90</span></span><br><span class=\"line\"><span class=\"number\">550</span></span><br></pre></td></tr></table></figure>\n\n<p><font size=3 color=#4169E1><strong>2.4 scan</strong></font></p>\n<p>Used to process the elements of an observable sequence one by one according to the specified accumulation rules and generate a new observable sequence that emits the accumulated results of each step.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example21</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Observable</span>.of(<span class=\"number\">10</span>, <span class=\"number\">100</span>, <span class=\"number\">1000</span>)</span><br><span class=\"line\">    .scan(<span class=\"number\">1</span>) &#123; aggregateValue, newValue <span class=\"keyword\">in</span></span><br><span class=\"line\">        aggregateValue <span class=\"operator\">+</span> newValue</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .subscribe(onNext: &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;)</span><br><span class=\"line\">    .disposed(by: disposeBag)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Results:</span></span><br><span class=\"line\"><span class=\"number\">11</span></span><br><span class=\"line\"><span class=\"number\">111</span></span><br><span class=\"line\"><span class=\"number\">1111</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-Filtering-And-Constraint-Operations\"><a href=\"#3-Filtering-And-Constraint-Operations\" class=\"headerlink\" title=\"3. Filtering And Constraint Operations\"></a><font size=3 color=#4169E1>3. Filtering And Constraint Operations</font></h4><p><font size=3 color=#4169E1><strong>3.1 filter</strong></font></p>\n<p>Used to select elements that meet specified conditions from an Observable sequence, and then emit these elements as a new Observable.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example22</span>() &#123;</span><br><span class=\"line\">    <span class=\"type\">Observable</span>.of(</span><br><span class=\"line\">    <span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;?&quot;</span>, <span class=\"string\">&quot;?&quot;</span>, <span class=\"string\">&quot;?&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;4&quot;</span>, <span class=\"string\">&quot;5&quot;</span>, <span class=\"string\">&quot;6&quot;</span>)</span><br><span class=\"line\">    .filter &#123;</span><br><span class=\"line\">        <span class=\"variable\">$0</span> <span class=\"operator\">==</span> <span class=\"string\">&quot;?&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .subscribe(onNext: &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;)</span><br><span class=\"line\">    .disposed(by: disposeBag)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Results:</span></span><br><span class=\"line\"><span class=\"operator\">?</span></span><br><span class=\"line\"><span class=\"operator\">?</span></span><br><span class=\"line\"><span class=\"operator\">?</span></span><br></pre></td></tr></table></figure>\n\n\n<p><font size=3 color=#4169E1><strong>3.2 distinctUntilChanged</strong></font></p>\n<p>It is used to filter out consecutive repeated elements and emit only those elements that are not identical to the previous element. This operation is similar to RAC.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example23</span>() &#123;</span><br><span class=\"line\">    <span class=\"type\">Observable</span>.of(<span class=\"string\">&quot;?&quot;</span>, <span class=\"string\">&quot;?&quot;</span>, <span class=\"string\">&quot;?&quot;</span>, <span class=\"string\">&quot;?&quot;</span>, <span class=\"string\">&quot;?&quot;</span>, <span class=\"string\">&quot;?&quot;</span>, <span class=\"string\">&quot;?&quot;</span>)</span><br><span class=\"line\">    .distinctUntilChanged()</span><br><span class=\"line\">    .subscribe(onNext: &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;)</span><br><span class=\"line\">    .disposed(by: disposeBag)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Results:</span></span><br><span class=\"line\"><span class=\"operator\">?</span></span><br></pre></td></tr></table></figure>\n\n<p><font size=3 color=#4169E1><strong>3.3 elementAt</strong></font></p>\n<p>Used to obtain the element at the specified index position from an Observable sequence and emit it as a new Observable. This operator takes an index value as a parameter and returns a new Observable that emits only the element at the specified index in the original sequence and then completes immediately.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example24</span>() &#123;</span><br><span class=\"line\">    <span class=\"type\">Observable</span>.of(<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>, <span class=\"string\">&quot;4&quot;</span>, <span class=\"string\">&quot;5&quot;</span>, <span class=\"string\">&quot;6&quot;</span>)</span><br><span class=\"line\">    .element(at:<span class=\"number\">3</span>)</span><br><span class=\"line\">    .subscribe(onNext: &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;)</span><br><span class=\"line\">    .disposed(by: disposeBag)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Results:</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n\n<p><font size=3 color=#4169E1><strong>3.4 single</strong></font></p>\n<p>Used to get a single element from an Observable sequence and emit it as a new Observable. This operator is typically used to ensure that the Observable emits only one element, and it will generate an error event if the Observable emits multiple elements or no elements.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example25</span>() &#123;</span><br><span class=\"line\">     <span class=\"type\">Observable</span>.of(<span class=\"string\">&quot;?&quot;</span>, <span class=\"string\">&quot;?&quot;</span>, <span class=\"string\">&quot;?&quot;</span>, <span class=\"string\">&quot;?&quot;</span>, <span class=\"string\">&quot;?&quot;</span>, <span class=\"string\">&quot;?&quot;</span>)</span><br><span class=\"line\">     .single()</span><br><span class=\"line\">     .subscribe(onNext: &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;)</span><br><span class=\"line\">     .disposed(by: disposeBag)</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Results:</span></span><br><span class=\"line\"><span class=\"operator\">?</span></span><br><span class=\"line\"><span class=\"type\">Unhandled</span> error happened: <span class=\"type\">Sequence</span> contains more than one element. <span class=\"comment\">//Single signal exceeds one</span></span><br></pre></td></tr></table></figure>\n<p><font size=3 color=#4169E1><strong>3.5 take</strong></font></p>\n<p>Used to take a specified number of elements from an Observable sequence and emit them as a new Observable. This operator accepts an integer parameter, indicating the number of elements to be removed.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example26</span>() &#123;</span><br><span class=\"line\">    <span class=\"type\">Observable</span>.of(<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>, <span class=\"string\">&quot;4&quot;</span>, <span class=\"string\">&quot;5&quot;</span>, <span class=\"string\">&quot;6&quot;</span>)</span><br><span class=\"line\">    .take(<span class=\"number\">3</span>)</span><br><span class=\"line\">    .subscribe(onNext: &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;)</span><br><span class=\"line\">    .disposed(by: disposeBag)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Results:</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<p><font size=3 color=#4169E1><strong>3.6 takeLast</strong></font></p>\n<p>This operator accepts an integer parameter indicating the number of last elements to be obtained, i.e. it only handles the last few event signals.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example27</span>() &#123;</span><br><span class=\"line\">    <span class=\"type\">Observable</span>.of(<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>, <span class=\"string\">&quot;4&quot;</span>, <span class=\"string\">&quot;5&quot;</span>, <span class=\"string\">&quot;6&quot;</span>)</span><br><span class=\"line\">    .takeLast(<span class=\"number\">3</span>)</span><br><span class=\"line\">    .subscribe(onNext: &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;)</span><br><span class=\"line\">    .disposed(by: disposeBag)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Results:</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">6</span></span><br></pre></td></tr></table></figure>\n\n<p><font size=3 color=#4169E1><strong>3.7 takeWhile</strong></font></p>\n<p>Used to obtain elements from an Observable sequence based on a certain condition until the condition is no longer met, and emit these elements as a new Observable. This operator accepts a closure argument that returns a Boolean value indicating whether the condition is met.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example28</span>() &#123;</span><br><span class=\"line\">    <span class=\"type\">Observable</span>.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\">    .take(while: &#123;<span class=\"variable\">$0</span> <span class=\"operator\">&lt;</span> <span class=\"number\">4</span> &#125;)</span><br><span class=\"line\">    .subscribe(onNext: &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;)</span><br><span class=\"line\">    .disposed(by: disposeBag)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Results:</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<p><font size=3 color=#4169E1><strong>3.8 takeUntil</strong></font></p>\n<p>Used to get elements from an Observable sequence if the specified conditions are met, and emit the elements as a new Observable until another specified Observable emits elements or completes.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example29</span>() &#123;</span><br><span class=\"line\">     <span class=\"keyword\">let</span> sourceSequence <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\">     <span class=\"keyword\">let</span> referenceSequence <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\">     sourceSequence</span><br><span class=\"line\">     .take(until:referenceSequence)</span><br><span class=\"line\">     .subscribe &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">     .disposed(by: disposeBag)</span><br><span class=\"line\">     sourceSequence.onNext(<span class=\"string\">&quot;?&quot;</span>)</span><br><span class=\"line\">     sourceSequence.onNext(<span class=\"string\">&quot;?&quot;</span>)</span><br><span class=\"line\">     sourceSequence.onNext(<span class=\"string\">&quot;?&quot;</span>)</span><br><span class=\"line\">     referenceSequence.onNext(<span class=\"string\">&quot;?&quot;</span>) <span class=\"comment\">//Stop receiving messages</span></span><br><span class=\"line\">     sourceSequence.onNext(<span class=\"string\">&quot;?&quot;</span>)</span><br><span class=\"line\">     sourceSequence.onNext(<span class=\"string\">&quot;?&quot;</span>)</span><br><span class=\"line\">     sourceSequence.onNext(<span class=\"string\">&quot;?&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Results:</span></span><br><span class=\"line\">next(<span class=\"operator\">?</span>)</span><br><span class=\"line\">next(<span class=\"operator\">?</span>)</span><br><span class=\"line\">next(<span class=\"operator\">?</span>)</span><br><span class=\"line\">completed</span><br></pre></td></tr></table></figure>\n\n<p><font size=3 color=#4169E1><strong>3.9 skip</strong></font></p>\n<p>Used to skip a specified number of elements from an Observable sequence and emit the remaining elements as a new Observable.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example30</span>() &#123;</span><br><span class=\"line\">    <span class=\"type\">Observable</span>.of(<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>, <span class=\"string\">&quot;4&quot;</span>, <span class=\"string\">&quot;5&quot;</span>, <span class=\"string\">&quot;6&quot;</span>)</span><br><span class=\"line\">    .skip(<span class=\"number\">2</span>)</span><br><span class=\"line\">    .subscribe(onNext: &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;)</span><br><span class=\"line\">    .disposed(by: disposeBag)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Result:</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">6</span></span><br></pre></td></tr></table></figure>\n\n<p><font size=3 color=#4169E1><strong>3.10 skipWhile</strong></font></p>\n<p>Used to skip elements in an Observable sequence if specified conditions are met, and then emit the remaining elements as a new Observable. This operator accepts a closure argument that returns a Boolean value indicating whether the current element should be skipped.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example31</span>() &#123;</span><br><span class=\"line\">    <span class=\"type\">Observable</span>.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\">    .skip(while: &#123; <span class=\"variable\">$0</span> <span class=\"operator\">&lt;</span> <span class=\"number\">4</span> &#125; )</span><br><span class=\"line\">    .subscribe(onNext: &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;)</span><br><span class=\"line\">    .disposed(by: disposeBag)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Result:</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">6</span></span><br></pre></td></tr></table></figure>\n\n<p><font size=3 color=#4169E1><strong>3.11 skipUntil</strong></font></p>\n<p>Used to skip elements in an original Observable before waiting for another Observable to emit elements. Specifically, skipUntil accepts an Observable as a parameter. When this parameter Observable emits elements, skipUntil will start emitting elements in the original Observable.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example32</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sourceSequence <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> referenceSequence <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\">    sourceSequence</span><br><span class=\"line\">    .skip(until: referenceSequence)</span><br><span class=\"line\">    .subscribe(onNext: &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;)</span><br><span class=\"line\">    .disposed(by: disposeBag)</span><br><span class=\"line\"></span><br><span class=\"line\">    sourceSequence.onNext(<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">    sourceSequence.onNext(<span class=\"string\">&quot;2&quot;</span>)</span><br><span class=\"line\">    sourceSequence.onNext(<span class=\"string\">&quot;3&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    referenceSequence.onNext(<span class=\"string\">&quot;4&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    sourceSequence.onNext(<span class=\"string\">&quot;5&quot;</span>)</span><br><span class=\"line\">    sourceSequence.onNext(<span class=\"string\">&quot;6&quot;</span>)</span><br><span class=\"line\">    sourceSequence.onNext(<span class=\"string\">&quot;7&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Result:</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"number\">7</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-Math-Operations\"><a href=\"#4-Math-Operations\" class=\"headerlink\" title=\"4. Math Operations\"></a><font size=3 color=#4169E1>4. Math Operations</font></h4><p><font size=3 color=#4169E1><strong>4.1 toArray</strong></font></p>\n<p>It is used to collect all the elements in an Observable sequence into an array and emit the array as a single-element Observable. In other words, it converts a sequence of multiple elements into an array containing all the elements and emits that array.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example33</span>() &#123;</span><br><span class=\"line\">    <span class=\"type\">Observable</span>.range(start: <span class=\"number\">1</span>, count: <span class=\"number\">10</span>)</span><br><span class=\"line\">    .toArray()</span><br><span class=\"line\">    .subscribe &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    .disposed(by: disposeBag)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Result:</span></span><br><span class=\"line\">success([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>])</span><br></pre></td></tr></table></figure>\n\n<p><font size=3 color=#4169E1><strong>4.2 reduce</strong></font></p>\n<p>It is used to accumulate (reduce) elements in an Observable sequence according to specified rules, and emit the final result as a new Observable.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example34</span>() &#123;</span><br><span class=\"line\">    <span class=\"type\">Observable</span>.of(<span class=\"number\">10</span>, <span class=\"number\">100</span>, <span class=\"number\">1000</span>)</span><br><span class=\"line\">    .reduce(<span class=\"number\">1</span>, accumulator: <span class=\"operator\">+</span>)</span><br><span class=\"line\">    .subscribe(onNext: &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;)</span><br><span class=\"line\">    .disposed(by: disposeBag)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Result：</span></span><br><span class=\"line\"><span class=\"number\">1111</span></span><br></pre></td></tr></table></figure>\n\n<p><font size=3 color=#4169E1><strong>4.3 Concat</strong></font></p>\n<p>concat will combine multiple sequences into one sequence, and the event of the next sequence will not start until the previous sequence emits the completed event.</p>\n<p>Before the first sequence is completed, events emitted by the second sequence will be ignored, but the last event emitted by the second sequence before completion will be received.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example35</span>() &#123;</span><br><span class=\"line\">     <span class=\"keyword\">let</span> subject1 <span class=\"operator\">=</span> <span class=\"type\">BehaviorSubject</span>(value: <span class=\"string\">&quot;?&quot;</span>)</span><br><span class=\"line\">     <span class=\"keyword\">let</span> subject2 <span class=\"operator\">=</span> <span class=\"type\">BehaviorSubject</span>(value: <span class=\"string\">&quot;?&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">let</span> variable <span class=\"operator\">=</span> <span class=\"type\">Variable</span>(subject1)</span><br><span class=\"line\"></span><br><span class=\"line\">     variable.asObservable()</span><br><span class=\"line\">     .concat()</span><br><span class=\"line\">     .subscribe &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">     .disposed(by: disposeBag)</span><br><span class=\"line\"></span><br><span class=\"line\">     subject1.onNext(<span class=\"string\">&quot;?&quot;</span>)</span><br><span class=\"line\">     subject1.onNext(<span class=\"string\">&quot;?&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">     variable.value <span class=\"operator\">=</span> subject2</span><br><span class=\"line\"></span><br><span class=\"line\">     subject2.onNext(<span class=\"string\">&quot;?&quot;</span>) <span class=\"comment\">//1 will be ignored before completion</span></span><br><span class=\"line\">     subject2.onNext(<span class=\"string\">&quot;teng&quot;</span>) <span class=\"comment\">//1 will be ignored before completion</span></span><br><span class=\"line\">     subject2.onNext(<span class=\"string\">&quot;fei&quot;</span>) <span class=\"comment\">//The last one before 1 is completed will be received</span></span><br><span class=\"line\">     subject1.onCompleted()</span><br><span class=\"line\">     subject2.onNext(<span class=\"string\">&quot;?&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Results:</span></span><br><span class=\"line\">next(<span class=\"operator\">?</span>)</span><br><span class=\"line\">next(<span class=\"operator\">?</span>)</span><br><span class=\"line\">next(<span class=\"operator\">?</span>)</span><br><span class=\"line\">next(fei)</span><br><span class=\"line\">next(<span class=\"operator\">?</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-Connectable-Operations\"><a href=\"#5-Connectable-Operations\" class=\"headerlink\" title=\"5. Connectable Operations\"></a><font size=3 color=#4169E1>5. Connectable Operations</font></h4><p>Connectable Operators are a special class of operators that are used to control situations where multiple observers share the same underlying data source. These operators can convert a normal Observable into a connectable Observable, and then use the connect() method to allow multiple observers to subscribe to this connectable Observable so that they share the same data. Here are some common connectivity operations:</p>\n<p><font size=3 color=#4169E1><strong>5.1 publish</strong></font></p>\n<p>Convert a normal sequence into a connectable sequence, and a normal Observable into a connectable Observable. It does not start emitting elements immediately, but waits for the connect() method to be called.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> observable <span class=\"operator\">=</span> <span class=\"type\">Observable</span>&lt;<span class=\"type\">Int</span>&gt;.interval(.seconds(<span class=\"number\">1</span>), scheduler: <span class=\"type\">MainScheduler</span>.instance)</span><br><span class=\"line\">     .take(<span class=\"number\">5</span>)</span><br><span class=\"line\">     .publish() <span class=\"comment\">// Use publish to make the Observable connectable</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// first observer</span></span><br><span class=\"line\">observable</span><br><span class=\"line\">     .subscribe(onNext: &#123; value <span class=\"keyword\">in</span></span><br><span class=\"line\">         <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Observer 1: <span class=\"subst\">\\(value)</span>&quot;</span>)</span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\">     .disposed(by: disposeBag)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Connect after some delay</span></span><br><span class=\"line\"><span class=\"type\">DispatchQueue</span>.main.asyncAfter(deadline: .now() <span class=\"operator\">+</span> <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">     observable.connect() <span class=\"comment\">// Start emitting elements</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// second observer</span></span><br><span class=\"line\"><span class=\"type\">DispatchQueue</span>.main.asyncAfter(deadline: .now() <span class=\"operator\">+</span> <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">     observable</span><br><span class=\"line\">         .subscribe(onNext: &#123; value <span class=\"keyword\">in</span></span><br><span class=\"line\">             <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Observer 2: <span class=\"subst\">\\(value)</span>&quot;</span>)</span><br><span class=\"line\">         &#125;)</span><br><span class=\"line\">         .disposed(by: disposeBag)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><font size=3 color=#4169E1><strong>5.2 replay</strong></font></p>\n<p>Converts a normal Observable to a connectable Observable and caches the elements it emits so that subsequent observers can obtain previously emitted elements.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> observable <span class=\"operator\">=</span> <span class=\"type\">Observable</span>&lt;<span class=\"type\">Int</span>&gt;.interval(.seconds(<span class=\"number\">1</span>), scheduler: <span class=\"type\">MainScheduler</span>.instance)</span><br><span class=\"line\">     .take(<span class=\"number\">5</span>)</span><br><span class=\"line\">     .replay(<span class=\"number\">2</span>) <span class=\"comment\">// Use replay to cache the latest 2 elements</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// first observer</span></span><br><span class=\"line\">observable</span><br><span class=\"line\">     .subscribe(onNext: &#123; value <span class=\"keyword\">in</span></span><br><span class=\"line\">         <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Observer 1: <span class=\"subst\">\\(value)</span>&quot;</span>)</span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\">     .disposed(by: disposeBag)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Connect after some delay</span></span><br><span class=\"line\"><span class=\"type\">DispatchQueue</span>.main.asyncAfter(deadline: .now() <span class=\"operator\">+</span> <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">     observable.connect() <span class=\"comment\">// Start emitting elements</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// second observer</span></span><br><span class=\"line\"><span class=\"type\">DispatchQueue</span>.main.asyncAfter(deadline: .now() <span class=\"operator\">+</span> <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">     observable</span><br><span class=\"line\">         .subscribe(onNext: &#123; value <span class=\"keyword\">in</span></span><br><span class=\"line\">             <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Observer 2: <span class=\"subst\">\\(value)</span>&quot;</span>)</span><br><span class=\"line\">         &#125;)</span><br><span class=\"line\">         .disposed(by: disposeBag)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><font size=3 color=#4169E1><strong>5.3 multicast</strong></font></p>\n<p>Convert a normal Observable to a joinable Observable. Send it through the characteristic subject, such as PublishSubject, or replaySubject, behaviorSubject, etc. Different Subjects will have different results. Use the connect() method to start emitting elements.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> subject <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">Int</span>&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> observable <span class=\"operator\">=</span> <span class=\"type\">Observable</span>&lt;<span class=\"type\">Int</span>&gt;.interval(.seconds(<span class=\"number\">1</span>), scheduler: <span class=\"type\">MainScheduler</span>.instance)</span><br><span class=\"line\">     .take(<span class=\"number\">5</span>)</span><br><span class=\"line\">     .multicast(subject) <span class=\"comment\">// Use multicast and specify Subject</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// first observer</span></span><br><span class=\"line\">observable</span><br><span class=\"line\">     .subscribe(onNext: &#123; value <span class=\"keyword\">in</span></span><br><span class=\"line\">         <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Observer 1: <span class=\"subst\">\\(value)</span>&quot;</span>)</span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\">     .disposed(by: disposeBag)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Connect after some delay</span></span><br><span class=\"line\"><span class=\"type\">DispatchQueue</span>.main.asyncAfter(deadline: .now() <span class=\"operator\">+</span> <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">     observable.connect() <span class=\"comment\">// Start emitting elements</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// second observer</span></span><br><span class=\"line\"><span class=\"type\">DispatchQueue</span>.main.asyncAfter(deadline: .now() <span class=\"operator\">+</span> <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">     observable</span><br><span class=\"line\">         .subscribe(onNext: &#123; value <span class=\"keyword\">in</span></span><br><span class=\"line\">             <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Observer 2: <span class=\"subst\">\\(value)</span>&quot;</span>)</span><br><span class=\"line\">         &#125;)</span><br><span class=\"line\">         .disposed(by: disposeBag)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-Error-Handling\"><a href=\"#6-Error-Handling\" class=\"headerlink\" title=\"6. Error Handling\"></a><font size=3 color=#4169E1>6. Error Handling</font></h4><p><font size=3 color=#4169E1><strong>6.1 catchErrorJustReturn</strong></font></p>\n<p>Used to replace the error’s Observable sequence with a predefined default value when an error is encountered, and then continue subscribing to the original Observable. It can be used to handle errors without interrupting the flow of the entire Observable and provide a default value to replace the erroneous element. To put it simply, when encountering an error event, return a default value and end.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> numbers <span class=\"operator\">=</span> <span class=\"type\">Observable</span>.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">numbers</span><br><span class=\"line\">     .map &#123; value -&gt; <span class=\"type\">Int</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">         <span class=\"keyword\">if</span> value <span class=\"operator\">==</span> <span class=\"number\">3</span> &#123;</span><br><span class=\"line\">             <span class=\"keyword\">throw</span> <span class=\"type\">NSError</span>(domain: <span class=\"string\">&quot;CustomErrorDomain&quot;</span>, code: <span class=\"number\">0</span>, userInfo: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> value</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     .catchErrorJustReturn(<span class=\"operator\">-</span><span class=\"number\">1</span>) <span class=\"comment\">// Emit the default value -1 when an error is encountered</span></span><br><span class=\"line\">     .subscribe(onNext: &#123; element <span class=\"keyword\">in</span></span><br><span class=\"line\">         <span class=\"built_in\">print</span>(<span class=\"string\">&quot;The processed element is: <span class=\"subst\">\\(element)</span>&quot;</span>)</span><br><span class=\"line\">     &#125;, onError: &#123; error <span class=\"keyword\">in</span></span><br><span class=\"line\">         <span class=\"built_in\">print</span>(<span class=\"string\">&quot;An error occurred: <span class=\"subst\">\\(error)</span>&quot;</span>)</span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\">     .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>\n\n<p><font size=3 color=#4169E1><strong>6.2 catchError</strong></font></p>\n<p>Operator for handling errors, which allows you to perform custom error handling logic when an error is encountered, that is, capture the error for processing and return a new Observable to continue subscribing.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> numbers <span class=\"operator\">=</span> <span class=\"type\">Observable</span>.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">numbers</span><br><span class=\"line\">     .map &#123; value -&gt; <span class=\"type\">Int</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">         <span class=\"keyword\">if</span> value <span class=\"operator\">==</span> <span class=\"number\">3</span> &#123;</span><br><span class=\"line\">             <span class=\"keyword\">throw</span> <span class=\"type\">NSError</span>(domain: <span class=\"string\">&quot;CustomErrorDomain&quot;</span>, code: <span class=\"number\">0</span>, userInfo: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> value</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     .catchError &#123; error <span class=\"keyword\">in</span></span><br><span class=\"line\">         <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Error caught: <span class=\"subst\">\\(error)</span>&quot;</span>)</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"type\">Observable</span>.of(<span class=\"operator\">-</span><span class=\"number\">1</span>) <span class=\"comment\">// Return a new Observable to continue subscribing</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     .subscribe(onNext: &#123; element <span class=\"keyword\">in</span></span><br><span class=\"line\">         <span class=\"built_in\">print</span>(<span class=\"string\">&quot;The processed element is: <span class=\"subst\">\\(element)</span>&quot;</span>)</span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\">     .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>\n\n<p><font size=3 color=#4169E1><strong>6.3 retry</strong></font></p>\n<p>Used to try to resubscribe to the original Observable when an error is encountered to continue receiving elements. If an error occurs, the retry operator resubscribes to the original Observable and continues to emit elements until the maximum number of attempts is reached or no more errors occur. Especially commonly used when network requests fail.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> attempts <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> observable <span class=\"operator\">=</span> <span class=\"type\">Observable</span>&lt;<span class=\"type\">Int</span>&gt;.create &#123; observer <span class=\"keyword\">in</span></span><br><span class=\"line\">     attempts <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span> attempts <span class=\"operator\">&lt;</span> <span class=\"number\">4</span> &#123;</span><br><span class=\"line\">         observer.onError(<span class=\"type\">NSError</span>(domain: <span class=\"string\">&quot;CustomErrorDomain&quot;</span>, code: <span class=\"number\">0</span>, userInfo: <span class=\"literal\">nil</span>))</span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">         observer.onNext(<span class=\"number\">10</span>)</span><br><span class=\"line\">         observer.onCompleted()</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"type\">Disposables</span>.create()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">observable</span><br><span class=\"line\">     .retry(<span class=\"number\">3</span>) <span class=\"comment\">// Retry up to 3 times</span></span><br><span class=\"line\">     .subscribe(</span><br><span class=\"line\">         onNext: &#123; element <span class=\"keyword\">in</span></span><br><span class=\"line\">             <span class=\"built_in\">print</span>(<span class=\"string\">&quot;The received element is: <span class=\"subst\">\\(element)</span>&quot;</span>)</span><br><span class=\"line\">         &#125;,</span><br><span class=\"line\">         onError: &#123; error <span class=\"keyword\">in</span></span><br><span class=\"line\">             <span class=\"built_in\">print</span>(<span class=\"string\">&quot;An error occurred: <span class=\"subst\">\\(error)</span>&quot;</span>)</span><br><span class=\"line\">         &#125;,</span><br><span class=\"line\">         onCompleted: &#123;</span><br><span class=\"line\">             <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Operation completed&quot;</span>)</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     )</span><br><span class=\"line\">     .disposed(by: disposeBag)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"7-Debug\"><a href=\"#7-Debug\" class=\"headerlink\" title=\"7.Debug\"></a><font size=3 color=#4169E1>7.Debug</font></h4><p><font size=3 color=#4169E1><strong>7.1 debug</strong></font></p>\n<p>Operator for debugging, which allows you to insert debugging information into the Observable stream to track the Observable’s life cycle, element emission and subscription events, etc. Typically used when developing and debugging RxSwift code to better understand the behavior of Observables.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> observable <span class=\"operator\">=</span> <span class=\"type\">Observable</span>&lt;<span class=\"type\">Int</span>&gt;.create &#123; observer <span class=\"keyword\">in</span></span><br><span class=\"line\">     observer.on(.next(<span class=\"number\">1</span>))</span><br><span class=\"line\">     observer.on(.next(<span class=\"number\">2</span>))</span><br><span class=\"line\">     observer.on(.completed)</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"type\">Disposables</span>.create()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">observable</span><br><span class=\"line\">     .debug(<span class=\"string\">&quot;Observable&quot;</span>)</span><br><span class=\"line\">     .subscribe(</span><br><span class=\"line\">         onNext: &#123; element <span class=\"keyword\">in</span></span><br><span class=\"line\">             <span class=\"built_in\">print</span>(<span class=\"string\">&quot;The received element is: <span class=\"subst\">\\(element)</span>&quot;</span>)</span><br><span class=\"line\">         &#125;,</span><br><span class=\"line\">         onError: &#123; error <span class=\"keyword\">in</span></span><br><span class=\"line\">             <span class=\"built_in\">print</span>(<span class=\"string\">&quot;An error occurred: <span class=\"subst\">\\(error)</span>&quot;</span>)</span><br><span class=\"line\">         &#125;,</span><br><span class=\"line\">         onCompleted: &#123;</span><br><span class=\"line\">             <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Operation completed&quot;</span>)</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     )</span><br><span class=\"line\">     .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>\n\n<p><font size=3 color=#4169E1><strong>7.2 RxSwift.Resources.total</strong></font></p>\n<p>Property used to get the current RxSwift resource count. It is used to monitor the number of resources created and released by RxSwift in the current application. These resources include Observable, Disposable, Operators, etc. Resource counts can help you detect potential resource leak issues or unreasonable resource usage.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Create some Observables and Disposables</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> observable <span class=\"operator\">=</span> <span class=\"type\">Observable</span>&lt;<span class=\"type\">Int</span>&gt;.just(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> disposable <span class=\"operator\">=</span> observable.subscribe()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Get the current RxSwift resource count</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> resourceCount <span class=\"operator\">=</span> <span class=\"type\">RxSwift</span>.<span class=\"type\">Resources</span>.total</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Current RxSwift resource count: <span class=\"subst\">\\(resourceCount)</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Remember to release resources to avoid resource leaks</span></span><br><span class=\"line\">disposable.dispose()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Get the RxSwift resource count again</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> updatedResourceCount <span class=\"operator\">=</span> <span class=\"type\">RxSwift</span>.<span class=\"type\">Resources</span>.total</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Updated RxSwift resource count: <span class=\"subst\">\\(updatedResourceCount)</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=4 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://github.com/ReactiveX/RxSwift\">https://github.com/ReactiveX/RxSwift</a><br>[2] <a href=\"https://www.jianshu.com/p/f4ad780cc7a2\">https://www.jianshu.com/p/f4ad780cc7a2</a><br>[3] <a href=\"https://www.jianshu.com/p/d35a99815806\">https://www.jianshu.com/p/d35a99815806</a><br>[4] <a href=\"https://zhuanlan.zhihu.com/p/25939562\">https://zhuanlan.zhihu.com/p/25939562</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 5 minutes to finish reading this article.</em></font></p>\n<h4 id=\"1-Combination-Operations\"><a href=\"#1-Combination-Operations\" class=\"headerlink\" title=\"1. Combination Operations\"></a><font size=3 color=#4169E1>1. Combination Operations</font></h4><p>A combination operation is the synthesis of multiple Observable streams into a single Observable stream.</p>\n<p><font size=3 color=#4169E1><strong>1.1 startWith</strong></font>  </p>\n<p>It is used to insert a specified initial element before the sequence of elements of the Observable sequence, and then emit the elements of the original Observable sequence in turn. In other words, a specific event message is emitted before the event message is emitted. For example, if you emit events 2 , 3 and then I startWith(1), then 1 will be emitted first, then 2 , 3.</p>\n<img src=\"/assets/ReactiveProgramming/RxSwift/10.jpeg\" class=\"\">\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example15</span>() &#123;</span><br><span class=\"line\">    <span class=\"type\">Observable</span>.of(<span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>)</span><br><span class=\"line\">    .startWith(<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">    .subscribe(onNext: &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;)</span><br><span class=\"line\">    .disposed(by: disposeBag)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Result：</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<p><font size=3 color=#4169E1><strong>1.2 merge</strong></font> </p>\n<p>Used to merge multiple Observable sequences into a new Observable sequence while maintaining the order in which elements of all original Observable sequences are emitted (corresponding events are emitted according to the timeline).</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example16</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> subject1 <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> subject2 <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Observable</span>.of(subject1, subject2)</span><br><span class=\"line\">    .merge()</span><br><span class=\"line\">    .subscribe(onNext: &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;)</span><br><span class=\"line\">    .disposed(by: disposeBag)</span><br><span class=\"line\"></span><br><span class=\"line\">    subject1.onNext(<span class=\"string\">&quot;?️&quot;</span>)</span><br><span class=\"line\">    subject1.onNext(<span class=\"string\">&quot;?️&quot;</span>)</span><br><span class=\"line\">    subject2.onNext(<span class=\"string\">&quot;①&quot;</span>)</span><br><span class=\"line\">    subject2.onNext(<span class=\"string\">&quot;②&quot;</span>)</span><br><span class=\"line\">    subject1.onNext(<span class=\"string\">&quot;?&quot;</span>)</span><br><span class=\"line\">    subject2.onNext(<span class=\"string\">&quot;③&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Result:</span></span><br><span class=\"line\"><span class=\"operator\">?️</span></span><br><span class=\"line\"><span class=\"operator\">?️</span></span><br><span class=\"line\">①</span><br><span class=\"line\">②</span><br><span class=\"line\"><span class=\"operator\">?</span></span><br><span class=\"line\">③</span><br></pre></td></tr></table></figure>\n\n<p><font size=3 color=#4169E1><strong>1.3 zip</strong></font> </p>\n<p>Used to merge the elements of multiple Observable sequences into a new element one by one in order, and emit these new elements in sequence. In other words, the zip operator waits for all participating Observable sequences to emit an element, then merges these elements one-to-one in order into a new element, and then emits the new element.</p>\n<p>zip binds up to 8 Observable streams and processes them together. Note that Zip is an event corresponding to an event in another stream.</p>\n<img src=\"/assets/ReactiveProgramming/RxSwift/11.jpeg\" class=\"\">\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example17</span>() &#123;</span><br><span class=\"line\">     <span class=\"keyword\">let</span> stringSubject <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\">     <span class=\"keyword\">let</span> intSubject <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">Int</span>&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"type\">Observable</span>.zip(stringSubject, intSubject) &#123; stringElement, intElement <span class=\"keyword\">in</span></span><br><span class=\"line\">         <span class=\"string\">&quot;<span class=\"subst\">\\(stringElement)</span> <span class=\"subst\">\\(intElement)</span>&quot;</span></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     .subscribe(onNext: &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;)</span><br><span class=\"line\">     .disposed(by: disposeBag)</span><br><span class=\"line\"></span><br><span class=\"line\">     stringSubject.onNext(<span class=\"string\">&quot;?️&quot;</span>)</span><br><span class=\"line\">     stringSubject.onNext(<span class=\"string\">&quot;?️&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">     intSubject.onNext(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">     intSubject.onNext(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">     stringSubject.onNext(<span class=\"string\">&quot;?&quot;</span>)</span><br><span class=\"line\">     intSubject.onNext(<span class=\"number\">3</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Compress stringSubject and intSubject together for joint processing</span></span><br><span class=\"line\"><span class=\"comment\">//Results:</span></span><br><span class=\"line\"><span class=\"operator\">?</span> <span class=\"number\">1</span> </span><br><span class=\"line\"><span class=\"operator\">?</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"operator\">?</span> <span class=\"number\">3</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><font size=3 color=#4169E1><strong>1.4 combineLatest</strong></font> </p>\n<p>Used to combine the latest elements of multiple Observable sequences into a new tuple, and emit this new tuple when any of the original Observable sequences emits a new element. Note: It binds no more than 8 Observable streams. The difference from Zip is that combineLatest is that the event of one stream corresponds to the latest event of another stream. Both events will be the latest events. You can compare the following figure with that of Zip.</p>\n<img src=\"/assets/ReactiveProgramming/RxSwift/12.jpeg\" class=\"\">\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example18</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> stringSubject <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> intSubject <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">Int</span>&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Observable</span>.combineLatest(stringSubject, intSubject) &#123; stringElement, intElement <span class=\"keyword\">in</span></span><br><span class=\"line\">            <span class=\"string\">&quot;<span class=\"subst\">\\(stringElement)</span> <span class=\"subst\">\\(intElement)</span>&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    .subscribe(onNext: &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;)</span><br><span class=\"line\">    .disposed(by: disposeBag)</span><br><span class=\"line\"></span><br><span class=\"line\">    stringSubject.onNext(<span class=\"string\">&quot;?️&quot;</span>)</span><br><span class=\"line\">    stringSubject.onNext(<span class=\"string\">&quot;?️&quot;</span>)</span><br><span class=\"line\">    intSubject.onNext(<span class=\"number\">1</span>)</span><br><span class=\"line\">    intSubject.onNext(<span class=\"number\">2</span>)</span><br><span class=\"line\">    stringSubject.onNext(<span class=\"string\">&quot;?&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Results:</span></span><br><span class=\"line\"><span class=\"operator\">?</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"operator\">?</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"operator\">?</span> <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-Transformation-Operations\"><a href=\"#2-Transformation-Operations\" class=\"headerlink\" title=\"2. Transformation Operations\"></a><font size=3 color=#4169E1>2. Transformation Operations</font></h4><p><font size=3 color=#4169E1><strong>2.1 map</strong></font> </p>\n<p>Used to apply a transformation function to each element in an Observable sequence and emit the transformed elements as a new Observable sequence.</p>\n<img src=\"/assets/ReactiveProgramming/RxSwift/13.jpeg\" class=\"\">\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example19</span>() &#123;</span><br><span class=\"line\">     <span class=\"comment\">//Multiply each element by itself</span></span><br><span class=\"line\">     <span class=\"type\">Observable</span>.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">     .map &#123; <span class=\"variable\">$0</span> <span class=\"operator\">*</span> <span class=\"variable\">$0</span> &#125;</span><br><span class=\"line\">     .subscribe(onNext: &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;)</span><br><span class=\"line\">     .disposed(by: disposeBag)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Results:</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">9</span></span><br></pre></td></tr></table></figure>\n\n<p><font size=3 color=#4169E1><strong>2.2 flatMap</strong></font> </p>\n<p>Used to map each element in the original Observable sequence into a new Observable sequence, then merge these new Observable sequences into a single Observable sequence, and emit elements sequentially in the order in which they were emitted. flatMap has an unpacking action, please see the code analysis.</p>\n<img src=\"/assets/ReactiveProgramming/RxSwift/13.jpeg\" class=\"\">\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Player</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">var</span> score: <span class=\"type\">Variable</span>&lt;<span class=\"type\">Int</span>&gt; <span class=\"comment\">//There is a Variable inside</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example20</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">let</span> <span class=\"operator\">??</span> <span class=\"operator\">=</span> <span class=\"type\">Player</span>(score: <span class=\"type\">Variable</span>(<span class=\"number\">80</span>))</span><br><span class=\"line\">     <span class=\"keyword\">let</span> <span class=\"operator\">??</span> <span class=\"operator\">=</span> <span class=\"type\">Player</span>(score: <span class=\"type\">Variable</span>(<span class=\"number\">90</span>))</span><br><span class=\"line\">     <span class=\"keyword\">let</span> <span class=\"operator\">?</span> <span class=\"operator\">=</span> <span class=\"type\">Player</span>(score: <span class=\"type\">Variable</span>(<span class=\"number\">550</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">let</span> player <span class=\"operator\">=</span> <span class=\"type\">Variable</span>(<span class=\"operator\">??</span>) <span class=\"comment\">//Convert player to Variable</span></span><br><span class=\"line\"></span><br><span class=\"line\">     player.asObservable() <span class=\"comment\">//Unboxing and converting into a sequence that can be monitored</span></span><br><span class=\"line\">         .flatMap &#123; <span class=\"variable\">$0</span>.score.asObservable() &#125; <span class=\"comment\">// flatMap has an unpacking action. $0 should have been a BehaviorSubject type, but the score was directly accessed. So I guess flatMap performed onNext unpacking on behaviorSubject to get the data.</span></span><br><span class=\"line\">         .subscribe(onNext: &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;)</span><br><span class=\"line\">         .addDisposableTo(disposeBag)</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"operator\">??</span>.score.value <span class=\"operator\">=</span> <span class=\"number\">85</span></span><br><span class=\"line\"></span><br><span class=\"line\">     player.value <span class=\"operator\">=</span> <span class=\"operator\">??</span> <span class=\"comment\">//Changing the value is equivalent to adding another sequence. Both sequences can be received.</span></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"operator\">??</span>.score.value <span class=\"operator\">=</span> <span class=\"number\">95</span></span><br><span class=\"line\">     <span class=\"operator\">??</span>.score.value <span class=\"operator\">=</span> <span class=\"number\">222</span></span><br><span class=\"line\">     player.value <span class=\"operator\">=</span> <span class=\"operator\">?</span></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"operator\">??</span>.score.value <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Results:</span></span><br><span class=\"line\"><span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"number\">85</span></span><br><span class=\"line\"><span class=\"number\">90</span></span><br><span class=\"line\"><span class=\"number\">95</span></span><br><span class=\"line\"><span class=\"number\">222</span></span><br><span class=\"line\"><span class=\"number\">550</span></span><br><span class=\"line\"><span class=\"number\">100</span></span><br></pre></td></tr></table></figure>\n\n<p><font size=3 color=#4169E1><strong>2.3 flatMapLatest</strong></font></p>\n<p>It is used to map the elements in the original Observable sequence into a new Observable sequence, and only emits the elements of the latest mapped Observable, ignoring the old mapped Observable. Change the above example to flatMapLatest and the result is:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"number\">85</span></span><br><span class=\"line\"><span class=\"number\">90</span></span><br><span class=\"line\"><span class=\"number\">550</span></span><br></pre></td></tr></table></figure>\n\n<p><font size=3 color=#4169E1><strong>2.4 scan</strong></font></p>\n<p>Used to process the elements of an observable sequence one by one according to the specified accumulation rules and generate a new observable sequence that emits the accumulated results of each step.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example21</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Observable</span>.of(<span class=\"number\">10</span>, <span class=\"number\">100</span>, <span class=\"number\">1000</span>)</span><br><span class=\"line\">    .scan(<span class=\"number\">1</span>) &#123; aggregateValue, newValue <span class=\"keyword\">in</span></span><br><span class=\"line\">        aggregateValue <span class=\"operator\">+</span> newValue</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .subscribe(onNext: &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;)</span><br><span class=\"line\">    .disposed(by: disposeBag)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Results:</span></span><br><span class=\"line\"><span class=\"number\">11</span></span><br><span class=\"line\"><span class=\"number\">111</span></span><br><span class=\"line\"><span class=\"number\">1111</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-Filtering-And-Constraint-Operations\"><a href=\"#3-Filtering-And-Constraint-Operations\" class=\"headerlink\" title=\"3. Filtering And Constraint Operations\"></a><font size=3 color=#4169E1>3. Filtering And Constraint Operations</font></h4><p><font size=3 color=#4169E1><strong>3.1 filter</strong></font></p>\n<p>Used to select elements that meet specified conditions from an Observable sequence, and then emit these elements as a new Observable.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example22</span>() &#123;</span><br><span class=\"line\">    <span class=\"type\">Observable</span>.of(</span><br><span class=\"line\">    <span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;?&quot;</span>, <span class=\"string\">&quot;?&quot;</span>, <span class=\"string\">&quot;?&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;4&quot;</span>, <span class=\"string\">&quot;5&quot;</span>, <span class=\"string\">&quot;6&quot;</span>)</span><br><span class=\"line\">    .filter &#123;</span><br><span class=\"line\">        <span class=\"variable\">$0</span> <span class=\"operator\">==</span> <span class=\"string\">&quot;?&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .subscribe(onNext: &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;)</span><br><span class=\"line\">    .disposed(by: disposeBag)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Results:</span></span><br><span class=\"line\"><span class=\"operator\">?</span></span><br><span class=\"line\"><span class=\"operator\">?</span></span><br><span class=\"line\"><span class=\"operator\">?</span></span><br></pre></td></tr></table></figure>\n\n\n<p><font size=3 color=#4169E1><strong>3.2 distinctUntilChanged</strong></font></p>\n<p>It is used to filter out consecutive repeated elements and emit only those elements that are not identical to the previous element. This operation is similar to RAC.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example23</span>() &#123;</span><br><span class=\"line\">    <span class=\"type\">Observable</span>.of(<span class=\"string\">&quot;?&quot;</span>, <span class=\"string\">&quot;?&quot;</span>, <span class=\"string\">&quot;?&quot;</span>, <span class=\"string\">&quot;?&quot;</span>, <span class=\"string\">&quot;?&quot;</span>, <span class=\"string\">&quot;?&quot;</span>, <span class=\"string\">&quot;?&quot;</span>)</span><br><span class=\"line\">    .distinctUntilChanged()</span><br><span class=\"line\">    .subscribe(onNext: &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;)</span><br><span class=\"line\">    .disposed(by: disposeBag)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Results:</span></span><br><span class=\"line\"><span class=\"operator\">?</span></span><br></pre></td></tr></table></figure>\n\n<p><font size=3 color=#4169E1><strong>3.3 elementAt</strong></font></p>\n<p>Used to obtain the element at the specified index position from an Observable sequence and emit it as a new Observable. This operator takes an index value as a parameter and returns a new Observable that emits only the element at the specified index in the original sequence and then completes immediately.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example24</span>() &#123;</span><br><span class=\"line\">    <span class=\"type\">Observable</span>.of(<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>, <span class=\"string\">&quot;4&quot;</span>, <span class=\"string\">&quot;5&quot;</span>, <span class=\"string\">&quot;6&quot;</span>)</span><br><span class=\"line\">    .element(at:<span class=\"number\">3</span>)</span><br><span class=\"line\">    .subscribe(onNext: &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;)</span><br><span class=\"line\">    .disposed(by: disposeBag)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Results:</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n\n<p><font size=3 color=#4169E1><strong>3.4 single</strong></font></p>\n<p>Used to get a single element from an Observable sequence and emit it as a new Observable. This operator is typically used to ensure that the Observable emits only one element, and it will generate an error event if the Observable emits multiple elements or no elements.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example25</span>() &#123;</span><br><span class=\"line\">     <span class=\"type\">Observable</span>.of(<span class=\"string\">&quot;?&quot;</span>, <span class=\"string\">&quot;?&quot;</span>, <span class=\"string\">&quot;?&quot;</span>, <span class=\"string\">&quot;?&quot;</span>, <span class=\"string\">&quot;?&quot;</span>, <span class=\"string\">&quot;?&quot;</span>)</span><br><span class=\"line\">     .single()</span><br><span class=\"line\">     .subscribe(onNext: &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;)</span><br><span class=\"line\">     .disposed(by: disposeBag)</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Results:</span></span><br><span class=\"line\"><span class=\"operator\">?</span></span><br><span class=\"line\"><span class=\"type\">Unhandled</span> error happened: <span class=\"type\">Sequence</span> contains more than one element. <span class=\"comment\">//Single signal exceeds one</span></span><br></pre></td></tr></table></figure>\n<p><font size=3 color=#4169E1><strong>3.5 take</strong></font></p>\n<p>Used to take a specified number of elements from an Observable sequence and emit them as a new Observable. This operator accepts an integer parameter, indicating the number of elements to be removed.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example26</span>() &#123;</span><br><span class=\"line\">    <span class=\"type\">Observable</span>.of(<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>, <span class=\"string\">&quot;4&quot;</span>, <span class=\"string\">&quot;5&quot;</span>, <span class=\"string\">&quot;6&quot;</span>)</span><br><span class=\"line\">    .take(<span class=\"number\">3</span>)</span><br><span class=\"line\">    .subscribe(onNext: &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;)</span><br><span class=\"line\">    .disposed(by: disposeBag)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Results:</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<p><font size=3 color=#4169E1><strong>3.6 takeLast</strong></font></p>\n<p>This operator accepts an integer parameter indicating the number of last elements to be obtained, i.e. it only handles the last few event signals.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example27</span>() &#123;</span><br><span class=\"line\">    <span class=\"type\">Observable</span>.of(<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>, <span class=\"string\">&quot;4&quot;</span>, <span class=\"string\">&quot;5&quot;</span>, <span class=\"string\">&quot;6&quot;</span>)</span><br><span class=\"line\">    .takeLast(<span class=\"number\">3</span>)</span><br><span class=\"line\">    .subscribe(onNext: &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;)</span><br><span class=\"line\">    .disposed(by: disposeBag)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Results:</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">6</span></span><br></pre></td></tr></table></figure>\n\n<p><font size=3 color=#4169E1><strong>3.7 takeWhile</strong></font></p>\n<p>Used to obtain elements from an Observable sequence based on a certain condition until the condition is no longer met, and emit these elements as a new Observable. This operator accepts a closure argument that returns a Boolean value indicating whether the condition is met.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example28</span>() &#123;</span><br><span class=\"line\">    <span class=\"type\">Observable</span>.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\">    .take(while: &#123;<span class=\"variable\">$0</span> <span class=\"operator\">&lt;</span> <span class=\"number\">4</span> &#125;)</span><br><span class=\"line\">    .subscribe(onNext: &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;)</span><br><span class=\"line\">    .disposed(by: disposeBag)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Results:</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<p><font size=3 color=#4169E1><strong>3.8 takeUntil</strong></font></p>\n<p>Used to get elements from an Observable sequence if the specified conditions are met, and emit the elements as a new Observable until another specified Observable emits elements or completes.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example29</span>() &#123;</span><br><span class=\"line\">     <span class=\"keyword\">let</span> sourceSequence <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\">     <span class=\"keyword\">let</span> referenceSequence <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\">     sourceSequence</span><br><span class=\"line\">     .take(until:referenceSequence)</span><br><span class=\"line\">     .subscribe &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">     .disposed(by: disposeBag)</span><br><span class=\"line\">     sourceSequence.onNext(<span class=\"string\">&quot;?&quot;</span>)</span><br><span class=\"line\">     sourceSequence.onNext(<span class=\"string\">&quot;?&quot;</span>)</span><br><span class=\"line\">     sourceSequence.onNext(<span class=\"string\">&quot;?&quot;</span>)</span><br><span class=\"line\">     referenceSequence.onNext(<span class=\"string\">&quot;?&quot;</span>) <span class=\"comment\">//Stop receiving messages</span></span><br><span class=\"line\">     sourceSequence.onNext(<span class=\"string\">&quot;?&quot;</span>)</span><br><span class=\"line\">     sourceSequence.onNext(<span class=\"string\">&quot;?&quot;</span>)</span><br><span class=\"line\">     sourceSequence.onNext(<span class=\"string\">&quot;?&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Results:</span></span><br><span class=\"line\">next(<span class=\"operator\">?</span>)</span><br><span class=\"line\">next(<span class=\"operator\">?</span>)</span><br><span class=\"line\">next(<span class=\"operator\">?</span>)</span><br><span class=\"line\">completed</span><br></pre></td></tr></table></figure>\n\n<p><font size=3 color=#4169E1><strong>3.9 skip</strong></font></p>\n<p>Used to skip a specified number of elements from an Observable sequence and emit the remaining elements as a new Observable.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example30</span>() &#123;</span><br><span class=\"line\">    <span class=\"type\">Observable</span>.of(<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>, <span class=\"string\">&quot;4&quot;</span>, <span class=\"string\">&quot;5&quot;</span>, <span class=\"string\">&quot;6&quot;</span>)</span><br><span class=\"line\">    .skip(<span class=\"number\">2</span>)</span><br><span class=\"line\">    .subscribe(onNext: &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;)</span><br><span class=\"line\">    .disposed(by: disposeBag)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Result:</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">6</span></span><br></pre></td></tr></table></figure>\n\n<p><font size=3 color=#4169E1><strong>3.10 skipWhile</strong></font></p>\n<p>Used to skip elements in an Observable sequence if specified conditions are met, and then emit the remaining elements as a new Observable. This operator accepts a closure argument that returns a Boolean value indicating whether the current element should be skipped.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example31</span>() &#123;</span><br><span class=\"line\">    <span class=\"type\">Observable</span>.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\">    .skip(while: &#123; <span class=\"variable\">$0</span> <span class=\"operator\">&lt;</span> <span class=\"number\">4</span> &#125; )</span><br><span class=\"line\">    .subscribe(onNext: &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;)</span><br><span class=\"line\">    .disposed(by: disposeBag)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Result:</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">6</span></span><br></pre></td></tr></table></figure>\n\n<p><font size=3 color=#4169E1><strong>3.11 skipUntil</strong></font></p>\n<p>Used to skip elements in an original Observable before waiting for another Observable to emit elements. Specifically, skipUntil accepts an Observable as a parameter. When this parameter Observable emits elements, skipUntil will start emitting elements in the original Observable.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example32</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sourceSequence <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> referenceSequence <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\">    sourceSequence</span><br><span class=\"line\">    .skip(until: referenceSequence)</span><br><span class=\"line\">    .subscribe(onNext: &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;)</span><br><span class=\"line\">    .disposed(by: disposeBag)</span><br><span class=\"line\"></span><br><span class=\"line\">    sourceSequence.onNext(<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">    sourceSequence.onNext(<span class=\"string\">&quot;2&quot;</span>)</span><br><span class=\"line\">    sourceSequence.onNext(<span class=\"string\">&quot;3&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    referenceSequence.onNext(<span class=\"string\">&quot;4&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    sourceSequence.onNext(<span class=\"string\">&quot;5&quot;</span>)</span><br><span class=\"line\">    sourceSequence.onNext(<span class=\"string\">&quot;6&quot;</span>)</span><br><span class=\"line\">    sourceSequence.onNext(<span class=\"string\">&quot;7&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Result:</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"number\">7</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-Math-Operations\"><a href=\"#4-Math-Operations\" class=\"headerlink\" title=\"4. Math Operations\"></a><font size=3 color=#4169E1>4. Math Operations</font></h4><p><font size=3 color=#4169E1><strong>4.1 toArray</strong></font></p>\n<p>It is used to collect all the elements in an Observable sequence into an array and emit the array as a single-element Observable. In other words, it converts a sequence of multiple elements into an array containing all the elements and emits that array.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example33</span>() &#123;</span><br><span class=\"line\">    <span class=\"type\">Observable</span>.range(start: <span class=\"number\">1</span>, count: <span class=\"number\">10</span>)</span><br><span class=\"line\">    .toArray()</span><br><span class=\"line\">    .subscribe &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    .disposed(by: disposeBag)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Result:</span></span><br><span class=\"line\">success([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>])</span><br></pre></td></tr></table></figure>\n\n<p><font size=3 color=#4169E1><strong>4.2 reduce</strong></font></p>\n<p>It is used to accumulate (reduce) elements in an Observable sequence according to specified rules, and emit the final result as a new Observable.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example34</span>() &#123;</span><br><span class=\"line\">    <span class=\"type\">Observable</span>.of(<span class=\"number\">10</span>, <span class=\"number\">100</span>, <span class=\"number\">1000</span>)</span><br><span class=\"line\">    .reduce(<span class=\"number\">1</span>, accumulator: <span class=\"operator\">+</span>)</span><br><span class=\"line\">    .subscribe(onNext: &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;)</span><br><span class=\"line\">    .disposed(by: disposeBag)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Result：</span></span><br><span class=\"line\"><span class=\"number\">1111</span></span><br></pre></td></tr></table></figure>\n\n<p><font size=3 color=#4169E1><strong>4.3 Concat</strong></font></p>\n<p>concat will combine multiple sequences into one sequence, and the event of the next sequence will not start until the previous sequence emits the completed event.</p>\n<p>Before the first sequence is completed, events emitted by the second sequence will be ignored, but the last event emitted by the second sequence before completion will be received.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">example35</span>() &#123;</span><br><span class=\"line\">     <span class=\"keyword\">let</span> subject1 <span class=\"operator\">=</span> <span class=\"type\">BehaviorSubject</span>(value: <span class=\"string\">&quot;?&quot;</span>)</span><br><span class=\"line\">     <span class=\"keyword\">let</span> subject2 <span class=\"operator\">=</span> <span class=\"type\">BehaviorSubject</span>(value: <span class=\"string\">&quot;?&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">let</span> variable <span class=\"operator\">=</span> <span class=\"type\">Variable</span>(subject1)</span><br><span class=\"line\"></span><br><span class=\"line\">     variable.asObservable()</span><br><span class=\"line\">     .concat()</span><br><span class=\"line\">     .subscribe &#123; <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">     .disposed(by: disposeBag)</span><br><span class=\"line\"></span><br><span class=\"line\">     subject1.onNext(<span class=\"string\">&quot;?&quot;</span>)</span><br><span class=\"line\">     subject1.onNext(<span class=\"string\">&quot;?&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">     variable.value <span class=\"operator\">=</span> subject2</span><br><span class=\"line\"></span><br><span class=\"line\">     subject2.onNext(<span class=\"string\">&quot;?&quot;</span>) <span class=\"comment\">//1 will be ignored before completion</span></span><br><span class=\"line\">     subject2.onNext(<span class=\"string\">&quot;teng&quot;</span>) <span class=\"comment\">//1 will be ignored before completion</span></span><br><span class=\"line\">     subject2.onNext(<span class=\"string\">&quot;fei&quot;</span>) <span class=\"comment\">//The last one before 1 is completed will be received</span></span><br><span class=\"line\">     subject1.onCompleted()</span><br><span class=\"line\">     subject2.onNext(<span class=\"string\">&quot;?&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Results:</span></span><br><span class=\"line\">next(<span class=\"operator\">?</span>)</span><br><span class=\"line\">next(<span class=\"operator\">?</span>)</span><br><span class=\"line\">next(<span class=\"operator\">?</span>)</span><br><span class=\"line\">next(fei)</span><br><span class=\"line\">next(<span class=\"operator\">?</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-Connectable-Operations\"><a href=\"#5-Connectable-Operations\" class=\"headerlink\" title=\"5. Connectable Operations\"></a><font size=3 color=#4169E1>5. Connectable Operations</font></h4><p>Connectable Operators are a special class of operators that are used to control situations where multiple observers share the same underlying data source. These operators can convert a normal Observable into a connectable Observable, and then use the connect() method to allow multiple observers to subscribe to this connectable Observable so that they share the same data. Here are some common connectivity operations:</p>\n<p><font size=3 color=#4169E1><strong>5.1 publish</strong></font></p>\n<p>Convert a normal sequence into a connectable sequence, and a normal Observable into a connectable Observable. It does not start emitting elements immediately, but waits for the connect() method to be called.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> observable <span class=\"operator\">=</span> <span class=\"type\">Observable</span>&lt;<span class=\"type\">Int</span>&gt;.interval(.seconds(<span class=\"number\">1</span>), scheduler: <span class=\"type\">MainScheduler</span>.instance)</span><br><span class=\"line\">     .take(<span class=\"number\">5</span>)</span><br><span class=\"line\">     .publish() <span class=\"comment\">// Use publish to make the Observable connectable</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// first observer</span></span><br><span class=\"line\">observable</span><br><span class=\"line\">     .subscribe(onNext: &#123; value <span class=\"keyword\">in</span></span><br><span class=\"line\">         <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Observer 1: <span class=\"subst\">\\(value)</span>&quot;</span>)</span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\">     .disposed(by: disposeBag)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Connect after some delay</span></span><br><span class=\"line\"><span class=\"type\">DispatchQueue</span>.main.asyncAfter(deadline: .now() <span class=\"operator\">+</span> <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">     observable.connect() <span class=\"comment\">// Start emitting elements</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// second observer</span></span><br><span class=\"line\"><span class=\"type\">DispatchQueue</span>.main.asyncAfter(deadline: .now() <span class=\"operator\">+</span> <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">     observable</span><br><span class=\"line\">         .subscribe(onNext: &#123; value <span class=\"keyword\">in</span></span><br><span class=\"line\">             <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Observer 2: <span class=\"subst\">\\(value)</span>&quot;</span>)</span><br><span class=\"line\">         &#125;)</span><br><span class=\"line\">         .disposed(by: disposeBag)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><font size=3 color=#4169E1><strong>5.2 replay</strong></font></p>\n<p>Converts a normal Observable to a connectable Observable and caches the elements it emits so that subsequent observers can obtain previously emitted elements.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> observable <span class=\"operator\">=</span> <span class=\"type\">Observable</span>&lt;<span class=\"type\">Int</span>&gt;.interval(.seconds(<span class=\"number\">1</span>), scheduler: <span class=\"type\">MainScheduler</span>.instance)</span><br><span class=\"line\">     .take(<span class=\"number\">5</span>)</span><br><span class=\"line\">     .replay(<span class=\"number\">2</span>) <span class=\"comment\">// Use replay to cache the latest 2 elements</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// first observer</span></span><br><span class=\"line\">observable</span><br><span class=\"line\">     .subscribe(onNext: &#123; value <span class=\"keyword\">in</span></span><br><span class=\"line\">         <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Observer 1: <span class=\"subst\">\\(value)</span>&quot;</span>)</span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\">     .disposed(by: disposeBag)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Connect after some delay</span></span><br><span class=\"line\"><span class=\"type\">DispatchQueue</span>.main.asyncAfter(deadline: .now() <span class=\"operator\">+</span> <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">     observable.connect() <span class=\"comment\">// Start emitting elements</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// second observer</span></span><br><span class=\"line\"><span class=\"type\">DispatchQueue</span>.main.asyncAfter(deadline: .now() <span class=\"operator\">+</span> <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">     observable</span><br><span class=\"line\">         .subscribe(onNext: &#123; value <span class=\"keyword\">in</span></span><br><span class=\"line\">             <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Observer 2: <span class=\"subst\">\\(value)</span>&quot;</span>)</span><br><span class=\"line\">         &#125;)</span><br><span class=\"line\">         .disposed(by: disposeBag)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><font size=3 color=#4169E1><strong>5.3 multicast</strong></font></p>\n<p>Convert a normal Observable to a joinable Observable. Send it through the characteristic subject, such as PublishSubject, or replaySubject, behaviorSubject, etc. Different Subjects will have different results. Use the connect() method to start emitting elements.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> subject <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">Int</span>&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> observable <span class=\"operator\">=</span> <span class=\"type\">Observable</span>&lt;<span class=\"type\">Int</span>&gt;.interval(.seconds(<span class=\"number\">1</span>), scheduler: <span class=\"type\">MainScheduler</span>.instance)</span><br><span class=\"line\">     .take(<span class=\"number\">5</span>)</span><br><span class=\"line\">     .multicast(subject) <span class=\"comment\">// Use multicast and specify Subject</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// first observer</span></span><br><span class=\"line\">observable</span><br><span class=\"line\">     .subscribe(onNext: &#123; value <span class=\"keyword\">in</span></span><br><span class=\"line\">         <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Observer 1: <span class=\"subst\">\\(value)</span>&quot;</span>)</span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\">     .disposed(by: disposeBag)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Connect after some delay</span></span><br><span class=\"line\"><span class=\"type\">DispatchQueue</span>.main.asyncAfter(deadline: .now() <span class=\"operator\">+</span> <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">     observable.connect() <span class=\"comment\">// Start emitting elements</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// second observer</span></span><br><span class=\"line\"><span class=\"type\">DispatchQueue</span>.main.asyncAfter(deadline: .now() <span class=\"operator\">+</span> <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">     observable</span><br><span class=\"line\">         .subscribe(onNext: &#123; value <span class=\"keyword\">in</span></span><br><span class=\"line\">             <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Observer 2: <span class=\"subst\">\\(value)</span>&quot;</span>)</span><br><span class=\"line\">         &#125;)</span><br><span class=\"line\">         .disposed(by: disposeBag)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-Error-Handling\"><a href=\"#6-Error-Handling\" class=\"headerlink\" title=\"6. Error Handling\"></a><font size=3 color=#4169E1>6. Error Handling</font></h4><p><font size=3 color=#4169E1><strong>6.1 catchErrorJustReturn</strong></font></p>\n<p>Used to replace the error’s Observable sequence with a predefined default value when an error is encountered, and then continue subscribing to the original Observable. It can be used to handle errors without interrupting the flow of the entire Observable and provide a default value to replace the erroneous element. To put it simply, when encountering an error event, return a default value and end.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> numbers <span class=\"operator\">=</span> <span class=\"type\">Observable</span>.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">numbers</span><br><span class=\"line\">     .map &#123; value -&gt; <span class=\"type\">Int</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">         <span class=\"keyword\">if</span> value <span class=\"operator\">==</span> <span class=\"number\">3</span> &#123;</span><br><span class=\"line\">             <span class=\"keyword\">throw</span> <span class=\"type\">NSError</span>(domain: <span class=\"string\">&quot;CustomErrorDomain&quot;</span>, code: <span class=\"number\">0</span>, userInfo: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> value</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     .catchErrorJustReturn(<span class=\"operator\">-</span><span class=\"number\">1</span>) <span class=\"comment\">// Emit the default value -1 when an error is encountered</span></span><br><span class=\"line\">     .subscribe(onNext: &#123; element <span class=\"keyword\">in</span></span><br><span class=\"line\">         <span class=\"built_in\">print</span>(<span class=\"string\">&quot;The processed element is: <span class=\"subst\">\\(element)</span>&quot;</span>)</span><br><span class=\"line\">     &#125;, onError: &#123; error <span class=\"keyword\">in</span></span><br><span class=\"line\">         <span class=\"built_in\">print</span>(<span class=\"string\">&quot;An error occurred: <span class=\"subst\">\\(error)</span>&quot;</span>)</span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\">     .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>\n\n<p><font size=3 color=#4169E1><strong>6.2 catchError</strong></font></p>\n<p>Operator for handling errors, which allows you to perform custom error handling logic when an error is encountered, that is, capture the error for processing and return a new Observable to continue subscribing.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> numbers <span class=\"operator\">=</span> <span class=\"type\">Observable</span>.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">numbers</span><br><span class=\"line\">     .map &#123; value -&gt; <span class=\"type\">Int</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">         <span class=\"keyword\">if</span> value <span class=\"operator\">==</span> <span class=\"number\">3</span> &#123;</span><br><span class=\"line\">             <span class=\"keyword\">throw</span> <span class=\"type\">NSError</span>(domain: <span class=\"string\">&quot;CustomErrorDomain&quot;</span>, code: <span class=\"number\">0</span>, userInfo: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> value</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     .catchError &#123; error <span class=\"keyword\">in</span></span><br><span class=\"line\">         <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Error caught: <span class=\"subst\">\\(error)</span>&quot;</span>)</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"type\">Observable</span>.of(<span class=\"operator\">-</span><span class=\"number\">1</span>) <span class=\"comment\">// Return a new Observable to continue subscribing</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     .subscribe(onNext: &#123; element <span class=\"keyword\">in</span></span><br><span class=\"line\">         <span class=\"built_in\">print</span>(<span class=\"string\">&quot;The processed element is: <span class=\"subst\">\\(element)</span>&quot;</span>)</span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\">     .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>\n\n<p><font size=3 color=#4169E1><strong>6.3 retry</strong></font></p>\n<p>Used to try to resubscribe to the original Observable when an error is encountered to continue receiving elements. If an error occurs, the retry operator resubscribes to the original Observable and continues to emit elements until the maximum number of attempts is reached or no more errors occur. Especially commonly used when network requests fail.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> attempts <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> observable <span class=\"operator\">=</span> <span class=\"type\">Observable</span>&lt;<span class=\"type\">Int</span>&gt;.create &#123; observer <span class=\"keyword\">in</span></span><br><span class=\"line\">     attempts <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span> attempts <span class=\"operator\">&lt;</span> <span class=\"number\">4</span> &#123;</span><br><span class=\"line\">         observer.onError(<span class=\"type\">NSError</span>(domain: <span class=\"string\">&quot;CustomErrorDomain&quot;</span>, code: <span class=\"number\">0</span>, userInfo: <span class=\"literal\">nil</span>))</span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">         observer.onNext(<span class=\"number\">10</span>)</span><br><span class=\"line\">         observer.onCompleted()</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"type\">Disposables</span>.create()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">observable</span><br><span class=\"line\">     .retry(<span class=\"number\">3</span>) <span class=\"comment\">// Retry up to 3 times</span></span><br><span class=\"line\">     .subscribe(</span><br><span class=\"line\">         onNext: &#123; element <span class=\"keyword\">in</span></span><br><span class=\"line\">             <span class=\"built_in\">print</span>(<span class=\"string\">&quot;The received element is: <span class=\"subst\">\\(element)</span>&quot;</span>)</span><br><span class=\"line\">         &#125;,</span><br><span class=\"line\">         onError: &#123; error <span class=\"keyword\">in</span></span><br><span class=\"line\">             <span class=\"built_in\">print</span>(<span class=\"string\">&quot;An error occurred: <span class=\"subst\">\\(error)</span>&quot;</span>)</span><br><span class=\"line\">         &#125;,</span><br><span class=\"line\">         onCompleted: &#123;</span><br><span class=\"line\">             <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Operation completed&quot;</span>)</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     )</span><br><span class=\"line\">     .disposed(by: disposeBag)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"7-Debug\"><a href=\"#7-Debug\" class=\"headerlink\" title=\"7.Debug\"></a><font size=3 color=#4169E1>7.Debug</font></h4><p><font size=3 color=#4169E1><strong>7.1 debug</strong></font></p>\n<p>Operator for debugging, which allows you to insert debugging information into the Observable stream to track the Observable’s life cycle, element emission and subscription events, etc. Typically used when developing and debugging RxSwift code to better understand the behavior of Observables.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> observable <span class=\"operator\">=</span> <span class=\"type\">Observable</span>&lt;<span class=\"type\">Int</span>&gt;.create &#123; observer <span class=\"keyword\">in</span></span><br><span class=\"line\">     observer.on(.next(<span class=\"number\">1</span>))</span><br><span class=\"line\">     observer.on(.next(<span class=\"number\">2</span>))</span><br><span class=\"line\">     observer.on(.completed)</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"type\">Disposables</span>.create()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">observable</span><br><span class=\"line\">     .debug(<span class=\"string\">&quot;Observable&quot;</span>)</span><br><span class=\"line\">     .subscribe(</span><br><span class=\"line\">         onNext: &#123; element <span class=\"keyword\">in</span></span><br><span class=\"line\">             <span class=\"built_in\">print</span>(<span class=\"string\">&quot;The received element is: <span class=\"subst\">\\(element)</span>&quot;</span>)</span><br><span class=\"line\">         &#125;,</span><br><span class=\"line\">         onError: &#123; error <span class=\"keyword\">in</span></span><br><span class=\"line\">             <span class=\"built_in\">print</span>(<span class=\"string\">&quot;An error occurred: <span class=\"subst\">\\(error)</span>&quot;</span>)</span><br><span class=\"line\">         &#125;,</span><br><span class=\"line\">         onCompleted: &#123;</span><br><span class=\"line\">             <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Operation completed&quot;</span>)</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     )</span><br><span class=\"line\">     .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>\n\n<p><font size=3 color=#4169E1><strong>7.2 RxSwift.Resources.total</strong></font></p>\n<p>Property used to get the current RxSwift resource count. It is used to monitor the number of resources created and released by RxSwift in the current application. These resources include Observable, Disposable, Operators, etc. Resource counts can help you detect potential resource leak issues or unreasonable resource usage.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Create some Observables and Disposables</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> observable <span class=\"operator\">=</span> <span class=\"type\">Observable</span>&lt;<span class=\"type\">Int</span>&gt;.just(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> disposable <span class=\"operator\">=</span> observable.subscribe()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Get the current RxSwift resource count</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> resourceCount <span class=\"operator\">=</span> <span class=\"type\">RxSwift</span>.<span class=\"type\">Resources</span>.total</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Current RxSwift resource count: <span class=\"subst\">\\(resourceCount)</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Remember to release resources to avoid resource leaks</span></span><br><span class=\"line\">disposable.dispose()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Get the RxSwift resource count again</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> updatedResourceCount <span class=\"operator\">=</span> <span class=\"type\">RxSwift</span>.<span class=\"type\">Resources</span>.total</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Updated RxSwift resource count: <span class=\"subst\">\\(updatedResourceCount)</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=4 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://github.com/ReactiveX/RxSwift\">https://github.com/ReactiveX/RxSwift</a><br>[2] <a href=\"https://www.jianshu.com/p/f4ad780cc7a2\">https://www.jianshu.com/p/f4ad780cc7a2</a><br>[3] <a href=\"https://www.jianshu.com/p/d35a99815806\">https://www.jianshu.com/p/d35a99815806</a><br>[4] <a href=\"https://zhuanlan.zhihu.com/p/25939562\">https://zhuanlan.zhihu.com/p/25939562</a></p>\n"},{"title":"00. Combine (0) ———— A Simple Example","date":"2023-10-04T19:05:00.000Z","_content":"\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nNext, I will record the learning process of Combine through a series of articles.\n\n#### <font size=3 color=#4169E1>1. ReactiveCocoa、RxSwift and Combine</font> \n\n<font size=3 color=#4169E1>**1.1 Comparison**</font>\n\nReactiveCocoa (RAC), RxSwift, and Combine are all frameworks for handling reactive programming (Reactive Programming). They are designed to help developers handle asynchronous event streams, data binding, and event processing more easily.\n\nReactiveCocoa first introduced the concepts of Signal and Subscriber, and it also provides a set of functions for processing event streams and data binding. RxSwift is the Swift version of ReactiveX (Rx) and also uses the Publisher and Subscriber models.\n\nCombine was introduced by Apple in iOS 13 and macOS 10.15 as part of Swift specifically for the Swift programming language. Combine also uses the Publisher and Subscriber model, which is based on Swift language features and has been integrated into Apple's native frameworks, such as Foundation and UIKit, making it more collaborative with other parts of the Apple ecosystem.\n\n<font size=3 color=#4169E1>**1.2 Common points**</font>\n\nCombine, RxSwift, and ReactiveCocoa all adopt the Publisher and Subscriber model, where a stream of events (such as user input, network responses, etc.) is represented as an observable sequence, and these events can then be processed by subscribers.\n\nThey all support data binding, which can automatically bind the data model and UI elements together. When the data changes, the UI will automatically update.\n\nThey both provide a set of operators for processing and transforming event streams, making it easier to write complex asynchronous operations.\n\nThey all emphasize composability, allowing multiple operations and event streams to be combined into more complex operations and data processing processes.\n\nThey are all designed to simplify asynchronous programming and handle asynchronous tasks such as network requests, timers, and multi-threaded operations.\n\n#### <font size=3 color=#4169E1>2. A Simple Example</font> \n\nHere is an example of SwiftUI and Combine:\n\n```Swift\nimport SwiftUI\nimport Combine\n\nstruct Item {\n     let title: String\n}\n\nextension Notification.Name {\n     static let titleData = Notification.Name(\"Title_Data\")\n}\n\n\nclass ItemViewModel: ObservableObject {\n     @Published var titleText: String = \"Hello Swift!\"\n\n     private var cancelables: Set<AnyCancellable> = []\n     private var cancel: AnyCancellable?\n\n     init() {\n         // register\n         let publisher = NotificationCenter.Publisher(center: .default, name: .titleData)\n             .compactMap { notification -> String? in\n                 return (notification.object as? Item)?.title\n             }\n        \n         // Binding\n         publisher\n             .assign(to: \\.titleText, on: self)\n             .store(in: &cancellables)\n     }\n\n     func requestData() {\n         let data = Item(title: \"Hello Combine!\")\n         NotificationCenter.default.post(name: .titleData, object: data)\n     }\n}\n\nstruct ContentView: View {\n     @ObservedObject var viewModel = ItemViewModel()\n\n     var body: some View {\n         VStack {\n             Button(\"Please Click\") {\n                 viewModel.requestData()\n             }\n            \n             Text(viewModel.titleText)\n                 .padding()\n             .padding()\n         }\n     }\n}\n```\nExecution result:\n\n```Swift\nHello Swift!\n```\n\nClick button, becomes:\n\n```Swift\nHello Combine!\n```\n\nThis involves using the Combine framework to handle the publication and subscription process of notifications. Here's an explanation of these two lines of code:\n\n(1) `NotificationCenter.Publisher(center: .default, name: .titleData)`:\n\n   This line of code creates a Combine publisher that subscribes to notifications associated with a specific notification name. Here, `.default` means using the default notification center, and `.titleData` is a custom notification name (Notification.Name) used to identify the notification type you are interested in. This notification name is usually defined elsewhere to ensure that both publishers and subscribers use the same notification name.\n\n(2) `.compactMap { notification -> String? in ... }`:\n\n  This part is the transformation of the publisher just created. `.compactMap` is a Combine operator, which is used to transform or filter the data extracted from the notification.\n\n  In this closure, `notification` is the notification object, and we try to extract data from the `object` property of the notification, where `object` is expected to be an `Item` object. If the advised `object` is of type `Item` and has a `title` attribute, then the closure returns an optional string (`String?`), which is the title of the `Item`.\n\n  Note that type conversion is done using the `as?` keyword to ensure that the notification's `object` property is of type `Item`. If the conversion is successful, returns the title; otherwise, returns `nil`.\n\n(3) `publisher.assign(to: \\.titleText, on: self)`:\n\n  This line of code binds the publisher created above to the property that receives the data. The `.assign` operator assigns the publisher's output value (a string in this case) to a specific property.\n\n  `\\titleText` is a keyPath that specifies the attribute that receives the data. In this example, assume that `self` has a property called `titleText` which will be used to store the title string extracted from the notification.\n\n(4) `.store(in: &cancellables)`:\n\n  This line of code stores the subscription relationship in the `cancellables` collection to ensure that the subscription can be properly canceled when it is no longer needed. `cancellables` is usually a `Set` type variable used to hold the Cancellation identifier of the Combine in order to unsubscribe when the object is released to avoid memory leaks.\n\n\nThis code creates a Combine publisher that receives a notification of a specific name from the NotificationCenter and extracts the data from the notification as a string and assigns the extracted string to the object's `titleText` property. The subscription relationship is then stored in `cancellables` to ensure that the subscription can be canceled when needed. This way, the value of the `titleText` property will be automatically updated when a specific notification is received.\n","source":"_posts/Reactive Programming/01. Combine/00. Combine (0).md","raw":"---\ntitle: 00. Combine (0) ———— A Simple Example\ndate: 2023-10-04 21:05:00\ncategories: \n- [Reactive Programming, 01. Combine]\ntags:\n- Combine\n---\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nNext, I will record the learning process of Combine through a series of articles.\n\n#### <font size=3 color=#4169E1>1. ReactiveCocoa、RxSwift and Combine</font> \n\n<font size=3 color=#4169E1>**1.1 Comparison**</font>\n\nReactiveCocoa (RAC), RxSwift, and Combine are all frameworks for handling reactive programming (Reactive Programming). They are designed to help developers handle asynchronous event streams, data binding, and event processing more easily.\n\nReactiveCocoa first introduced the concepts of Signal and Subscriber, and it also provides a set of functions for processing event streams and data binding. RxSwift is the Swift version of ReactiveX (Rx) and also uses the Publisher and Subscriber models.\n\nCombine was introduced by Apple in iOS 13 and macOS 10.15 as part of Swift specifically for the Swift programming language. Combine also uses the Publisher and Subscriber model, which is based on Swift language features and has been integrated into Apple's native frameworks, such as Foundation and UIKit, making it more collaborative with other parts of the Apple ecosystem.\n\n<font size=3 color=#4169E1>**1.2 Common points**</font>\n\nCombine, RxSwift, and ReactiveCocoa all adopt the Publisher and Subscriber model, where a stream of events (such as user input, network responses, etc.) is represented as an observable sequence, and these events can then be processed by subscribers.\n\nThey all support data binding, which can automatically bind the data model and UI elements together. When the data changes, the UI will automatically update.\n\nThey both provide a set of operators for processing and transforming event streams, making it easier to write complex asynchronous operations.\n\nThey all emphasize composability, allowing multiple operations and event streams to be combined into more complex operations and data processing processes.\n\nThey are all designed to simplify asynchronous programming and handle asynchronous tasks such as network requests, timers, and multi-threaded operations.\n\n#### <font size=3 color=#4169E1>2. A Simple Example</font> \n\nHere is an example of SwiftUI and Combine:\n\n```Swift\nimport SwiftUI\nimport Combine\n\nstruct Item {\n     let title: String\n}\n\nextension Notification.Name {\n     static let titleData = Notification.Name(\"Title_Data\")\n}\n\n\nclass ItemViewModel: ObservableObject {\n     @Published var titleText: String = \"Hello Swift!\"\n\n     private var cancelables: Set<AnyCancellable> = []\n     private var cancel: AnyCancellable?\n\n     init() {\n         // register\n         let publisher = NotificationCenter.Publisher(center: .default, name: .titleData)\n             .compactMap { notification -> String? in\n                 return (notification.object as? Item)?.title\n             }\n        \n         // Binding\n         publisher\n             .assign(to: \\.titleText, on: self)\n             .store(in: &cancellables)\n     }\n\n     func requestData() {\n         let data = Item(title: \"Hello Combine!\")\n         NotificationCenter.default.post(name: .titleData, object: data)\n     }\n}\n\nstruct ContentView: View {\n     @ObservedObject var viewModel = ItemViewModel()\n\n     var body: some View {\n         VStack {\n             Button(\"Please Click\") {\n                 viewModel.requestData()\n             }\n            \n             Text(viewModel.titleText)\n                 .padding()\n             .padding()\n         }\n     }\n}\n```\nExecution result:\n\n```Swift\nHello Swift!\n```\n\nClick button, becomes:\n\n```Swift\nHello Combine!\n```\n\nThis involves using the Combine framework to handle the publication and subscription process of notifications. Here's an explanation of these two lines of code:\n\n(1) `NotificationCenter.Publisher(center: .default, name: .titleData)`:\n\n   This line of code creates a Combine publisher that subscribes to notifications associated with a specific notification name. Here, `.default` means using the default notification center, and `.titleData` is a custom notification name (Notification.Name) used to identify the notification type you are interested in. This notification name is usually defined elsewhere to ensure that both publishers and subscribers use the same notification name.\n\n(2) `.compactMap { notification -> String? in ... }`:\n\n  This part is the transformation of the publisher just created. `.compactMap` is a Combine operator, which is used to transform or filter the data extracted from the notification.\n\n  In this closure, `notification` is the notification object, and we try to extract data from the `object` property of the notification, where `object` is expected to be an `Item` object. If the advised `object` is of type `Item` and has a `title` attribute, then the closure returns an optional string (`String?`), which is the title of the `Item`.\n\n  Note that type conversion is done using the `as?` keyword to ensure that the notification's `object` property is of type `Item`. If the conversion is successful, returns the title; otherwise, returns `nil`.\n\n(3) `publisher.assign(to: \\.titleText, on: self)`:\n\n  This line of code binds the publisher created above to the property that receives the data. The `.assign` operator assigns the publisher's output value (a string in this case) to a specific property.\n\n  `\\titleText` is a keyPath that specifies the attribute that receives the data. In this example, assume that `self` has a property called `titleText` which will be used to store the title string extracted from the notification.\n\n(4) `.store(in: &cancellables)`:\n\n  This line of code stores the subscription relationship in the `cancellables` collection to ensure that the subscription can be properly canceled when it is no longer needed. `cancellables` is usually a `Set` type variable used to hold the Cancellation identifier of the Combine in order to unsubscribe when the object is released to avoid memory leaks.\n\n\nThis code creates a Combine publisher that receives a notification of a specific name from the NotificationCenter and extracts the data from the notification as a string and assigns the extracted string to the object's `titleText` property. The subscription relationship is then stored in `cancellables` to ensure that the subscription can be canceled when needed. This way, the value of the `titleText` property will be automatically updated when a specific notification is received.\n","slug":"Reactive Programming/01. Combine/00. Combine (0)","published":1,"updated":"2023-10-10T21:16:45.616Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr4p000qvu0m2c6u7jso","content":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>Next, I will record the learning process of Combine through a series of articles.</p>\n<h4 id=\"1-ReactiveCocoa、RxSwift-and-Combine\"><a href=\"#1-ReactiveCocoa、RxSwift-and-Combine\" class=\"headerlink\" title=\"1. ReactiveCocoa、RxSwift and Combine\"></a><font size=3 color=#4169E1>1. ReactiveCocoa、RxSwift and Combine</font></h4><p><font size=3 color=#4169E1><strong>1.1 Comparison</strong></font></p>\n<p>ReactiveCocoa (RAC), RxSwift, and Combine are all frameworks for handling reactive programming (Reactive Programming). They are designed to help developers handle asynchronous event streams, data binding, and event processing more easily.</p>\n<p>ReactiveCocoa first introduced the concepts of Signal and Subscriber, and it also provides a set of functions for processing event streams and data binding. RxSwift is the Swift version of ReactiveX (Rx) and also uses the Publisher and Subscriber models.</p>\n<p>Combine was introduced by Apple in iOS 13 and macOS 10.15 as part of Swift specifically for the Swift programming language. Combine also uses the Publisher and Subscriber model, which is based on Swift language features and has been integrated into Apple’s native frameworks, such as Foundation and UIKit, making it more collaborative with other parts of the Apple ecosystem.</p>\n<p><font size=3 color=#4169E1><strong>1.2 Common points</strong></font></p>\n<p>Combine, RxSwift, and ReactiveCocoa all adopt the Publisher and Subscriber model, where a stream of events (such as user input, network responses, etc.) is represented as an observable sequence, and these events can then be processed by subscribers.</p>\n<p>They all support data binding, which can automatically bind the data model and UI elements together. When the data changes, the UI will automatically update.</p>\n<p>They both provide a set of operators for processing and transforming event streams, making it easier to write complex asynchronous operations.</p>\n<p>They all emphasize composability, allowing multiple operations and event streams to be combined into more complex operations and data processing processes.</p>\n<p>They are all designed to simplify asynchronous programming and handle asynchronous tasks such as network requests, timers, and multi-threaded operations.</p>\n<h4 id=\"2-A-Simple-Example\"><a href=\"#2-A-Simple-Example\" class=\"headerlink\" title=\"2. A Simple Example\"></a><font size=3 color=#4169E1>2. A Simple Example</font></h4><p>Here is an example of SwiftUI and Combine:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> SwiftUI</span><br><span class=\"line\"><span class=\"keyword\">import</span> Combine</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Item</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">let</span> title: <span class=\"type\">String</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">Notification</span>.<span class=\"title class_\">Name</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> titleData <span class=\"operator\">=</span> <span class=\"type\">Notification</span>.<span class=\"type\">Name</span>(<span class=\"string\">&quot;Title_Data&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ItemViewModel</span>: <span class=\"title class_\">ObservableObject</span> &#123;</span><br><span class=\"line\">     <span class=\"meta\">@Published</span> <span class=\"keyword\">var</span> titleText: <span class=\"type\">String</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Hello Swift!&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> cancelables: <span class=\"type\">Set</span>&lt;<span class=\"type\">AnyCancellable</span>&gt; <span class=\"operator\">=</span> []</span><br><span class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> cancel: <span class=\"type\">AnyCancellable</span>?</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">init</span>() &#123;</span><br><span class=\"line\">         <span class=\"comment\">// register</span></span><br><span class=\"line\">         <span class=\"keyword\">let</span> publisher <span class=\"operator\">=</span> <span class=\"type\">NotificationCenter</span>.<span class=\"type\">Publisher</span>(center: .default, name: .titleData)</span><br><span class=\"line\">             .compactMap &#123; notification -&gt; <span class=\"type\">String</span>? <span class=\"keyword\">in</span></span><br><span class=\"line\">                 <span class=\"keyword\">return</span> (notification.object <span class=\"keyword\">as?</span> <span class=\"type\">Item</span>)<span class=\"operator\">?</span>.title</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">         <span class=\"comment\">// Binding</span></span><br><span class=\"line\">         publisher</span><br><span class=\"line\">             .assign(to: \\.titleText, on: <span class=\"keyword\">self</span>)</span><br><span class=\"line\">             .store(in: <span class=\"operator\">&amp;</span>cancellables)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">func</span> <span class=\"title function_\">requestData</span>() &#123;</span><br><span class=\"line\">         <span class=\"keyword\">let</span> data <span class=\"operator\">=</span> <span class=\"type\">Item</span>(title: <span class=\"string\">&quot;Hello Combine!&quot;</span>)</span><br><span class=\"line\">         <span class=\"type\">NotificationCenter</span>.default.post(name: .titleData, object: data)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span>: <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">     <span class=\"meta\">@ObservedObject</span> <span class=\"keyword\">var</span> viewModel <span class=\"operator\">=</span> <span class=\"type\">ItemViewModel</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">         <span class=\"type\">VStack</span> &#123;</span><br><span class=\"line\">             <span class=\"type\">Button</span>(<span class=\"string\">&quot;Please Click&quot;</span>) &#123;</span><br><span class=\"line\">                 viewModel.requestData()</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">             <span class=\"type\">Text</span>(viewModel.titleText)</span><br><span class=\"line\">                 .padding()</span><br><span class=\"line\">             .padding()</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Execution result:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Hello</span> <span class=\"type\">Swift</span>!</span><br></pre></td></tr></table></figure>\n\n<p>Click button, becomes:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Hello</span> <span class=\"type\">Combine</span>!</span><br></pre></td></tr></table></figure>\n\n<p>This involves using the Combine framework to handle the publication and subscription process of notifications. Here’s an explanation of these two lines of code:</p>\n<p>(1) <code>NotificationCenter.Publisher(center: .default, name: .titleData)</code>:</p>\n<p>   This line of code creates a Combine publisher that subscribes to notifications associated with a specific notification name. Here, <code>.default</code> means using the default notification center, and <code>.titleData</code> is a custom notification name (Notification.Name) used to identify the notification type you are interested in. This notification name is usually defined elsewhere to ensure that both publishers and subscribers use the same notification name.</p>\n<p>(2) <code>.compactMap &#123; notification -&gt; String? in ... &#125;</code>:</p>\n<p>  This part is the transformation of the publisher just created. <code>.compactMap</code> is a Combine operator, which is used to transform or filter the data extracted from the notification.</p>\n<p>  In this closure, <code>notification</code> is the notification object, and we try to extract data from the <code>object</code> property of the notification, where <code>object</code> is expected to be an <code>Item</code> object. If the advised <code>object</code> is of type <code>Item</code> and has a <code>title</code> attribute, then the closure returns an optional string (<code>String?</code>), which is the title of the <code>Item</code>.</p>\n<p>  Note that type conversion is done using the <code>as?</code> keyword to ensure that the notification’s <code>object</code> property is of type <code>Item</code>. If the conversion is successful, returns the title; otherwise, returns <code>nil</code>.</p>\n<p>(3) <code>publisher.assign(to: \\.titleText, on: self)</code>:</p>\n<p>  This line of code binds the publisher created above to the property that receives the data. The <code>.assign</code> operator assigns the publisher’s output value (a string in this case) to a specific property.</p>\n<p>  <code>\\titleText</code> is a keyPath that specifies the attribute that receives the data. In this example, assume that <code>self</code> has a property called <code>titleText</code> which will be used to store the title string extracted from the notification.</p>\n<p>(4) <code>.store(in: &amp;cancellables)</code>:</p>\n<p>  This line of code stores the subscription relationship in the <code>cancellables</code> collection to ensure that the subscription can be properly canceled when it is no longer needed. <code>cancellables</code> is usually a <code>Set</code> type variable used to hold the Cancellation identifier of the Combine in order to unsubscribe when the object is released to avoid memory leaks.</p>\n<p>This code creates a Combine publisher that receives a notification of a specific name from the NotificationCenter and extracts the data from the notification as a string and assigns the extracted string to the object’s <code>titleText</code> property. The subscription relationship is then stored in <code>cancellables</code> to ensure that the subscription can be canceled when needed. This way, the value of the <code>titleText</code> property will be automatically updated when a specific notification is received.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>Next, I will record the learning process of Combine through a series of articles.</p>\n<h4 id=\"1-ReactiveCocoa、RxSwift-and-Combine\"><a href=\"#1-ReactiveCocoa、RxSwift-and-Combine\" class=\"headerlink\" title=\"1. ReactiveCocoa、RxSwift and Combine\"></a><font size=3 color=#4169E1>1. ReactiveCocoa、RxSwift and Combine</font></h4><p><font size=3 color=#4169E1><strong>1.1 Comparison</strong></font></p>\n<p>ReactiveCocoa (RAC), RxSwift, and Combine are all frameworks for handling reactive programming (Reactive Programming). They are designed to help developers handle asynchronous event streams, data binding, and event processing more easily.</p>\n<p>ReactiveCocoa first introduced the concepts of Signal and Subscriber, and it also provides a set of functions for processing event streams and data binding. RxSwift is the Swift version of ReactiveX (Rx) and also uses the Publisher and Subscriber models.</p>\n<p>Combine was introduced by Apple in iOS 13 and macOS 10.15 as part of Swift specifically for the Swift programming language. Combine also uses the Publisher and Subscriber model, which is based on Swift language features and has been integrated into Apple’s native frameworks, such as Foundation and UIKit, making it more collaborative with other parts of the Apple ecosystem.</p>\n<p><font size=3 color=#4169E1><strong>1.2 Common points</strong></font></p>\n<p>Combine, RxSwift, and ReactiveCocoa all adopt the Publisher and Subscriber model, where a stream of events (such as user input, network responses, etc.) is represented as an observable sequence, and these events can then be processed by subscribers.</p>\n<p>They all support data binding, which can automatically bind the data model and UI elements together. When the data changes, the UI will automatically update.</p>\n<p>They both provide a set of operators for processing and transforming event streams, making it easier to write complex asynchronous operations.</p>\n<p>They all emphasize composability, allowing multiple operations and event streams to be combined into more complex operations and data processing processes.</p>\n<p>They are all designed to simplify asynchronous programming and handle asynchronous tasks such as network requests, timers, and multi-threaded operations.</p>\n<h4 id=\"2-A-Simple-Example\"><a href=\"#2-A-Simple-Example\" class=\"headerlink\" title=\"2. A Simple Example\"></a><font size=3 color=#4169E1>2. A Simple Example</font></h4><p>Here is an example of SwiftUI and Combine:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> SwiftUI</span><br><span class=\"line\"><span class=\"keyword\">import</span> Combine</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Item</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">let</span> title: <span class=\"type\">String</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">Notification</span>.<span class=\"title class_\">Name</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> titleData <span class=\"operator\">=</span> <span class=\"type\">Notification</span>.<span class=\"type\">Name</span>(<span class=\"string\">&quot;Title_Data&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ItemViewModel</span>: <span class=\"title class_\">ObservableObject</span> &#123;</span><br><span class=\"line\">     <span class=\"meta\">@Published</span> <span class=\"keyword\">var</span> titleText: <span class=\"type\">String</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Hello Swift!&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> cancelables: <span class=\"type\">Set</span>&lt;<span class=\"type\">AnyCancellable</span>&gt; <span class=\"operator\">=</span> []</span><br><span class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> cancel: <span class=\"type\">AnyCancellable</span>?</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">init</span>() &#123;</span><br><span class=\"line\">         <span class=\"comment\">// register</span></span><br><span class=\"line\">         <span class=\"keyword\">let</span> publisher <span class=\"operator\">=</span> <span class=\"type\">NotificationCenter</span>.<span class=\"type\">Publisher</span>(center: .default, name: .titleData)</span><br><span class=\"line\">             .compactMap &#123; notification -&gt; <span class=\"type\">String</span>? <span class=\"keyword\">in</span></span><br><span class=\"line\">                 <span class=\"keyword\">return</span> (notification.object <span class=\"keyword\">as?</span> <span class=\"type\">Item</span>)<span class=\"operator\">?</span>.title</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">         <span class=\"comment\">// Binding</span></span><br><span class=\"line\">         publisher</span><br><span class=\"line\">             .assign(to: \\.titleText, on: <span class=\"keyword\">self</span>)</span><br><span class=\"line\">             .store(in: <span class=\"operator\">&amp;</span>cancellables)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">func</span> <span class=\"title function_\">requestData</span>() &#123;</span><br><span class=\"line\">         <span class=\"keyword\">let</span> data <span class=\"operator\">=</span> <span class=\"type\">Item</span>(title: <span class=\"string\">&quot;Hello Combine!&quot;</span>)</span><br><span class=\"line\">         <span class=\"type\">NotificationCenter</span>.default.post(name: .titleData, object: data)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span>: <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">     <span class=\"meta\">@ObservedObject</span> <span class=\"keyword\">var</span> viewModel <span class=\"operator\">=</span> <span class=\"type\">ItemViewModel</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">         <span class=\"type\">VStack</span> &#123;</span><br><span class=\"line\">             <span class=\"type\">Button</span>(<span class=\"string\">&quot;Please Click&quot;</span>) &#123;</span><br><span class=\"line\">                 viewModel.requestData()</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">             <span class=\"type\">Text</span>(viewModel.titleText)</span><br><span class=\"line\">                 .padding()</span><br><span class=\"line\">             .padding()</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Execution result:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Hello</span> <span class=\"type\">Swift</span>!</span><br></pre></td></tr></table></figure>\n\n<p>Click button, becomes:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Hello</span> <span class=\"type\">Combine</span>!</span><br></pre></td></tr></table></figure>\n\n<p>This involves using the Combine framework to handle the publication and subscription process of notifications. Here’s an explanation of these two lines of code:</p>\n<p>(1) <code>NotificationCenter.Publisher(center: .default, name: .titleData)</code>:</p>\n<p>   This line of code creates a Combine publisher that subscribes to notifications associated with a specific notification name. Here, <code>.default</code> means using the default notification center, and <code>.titleData</code> is a custom notification name (Notification.Name) used to identify the notification type you are interested in. This notification name is usually defined elsewhere to ensure that both publishers and subscribers use the same notification name.</p>\n<p>(2) <code>.compactMap &#123; notification -&gt; String? in ... &#125;</code>:</p>\n<p>  This part is the transformation of the publisher just created. <code>.compactMap</code> is a Combine operator, which is used to transform or filter the data extracted from the notification.</p>\n<p>  In this closure, <code>notification</code> is the notification object, and we try to extract data from the <code>object</code> property of the notification, where <code>object</code> is expected to be an <code>Item</code> object. If the advised <code>object</code> is of type <code>Item</code> and has a <code>title</code> attribute, then the closure returns an optional string (<code>String?</code>), which is the title of the <code>Item</code>.</p>\n<p>  Note that type conversion is done using the <code>as?</code> keyword to ensure that the notification’s <code>object</code> property is of type <code>Item</code>. If the conversion is successful, returns the title; otherwise, returns <code>nil</code>.</p>\n<p>(3) <code>publisher.assign(to: \\.titleText, on: self)</code>:</p>\n<p>  This line of code binds the publisher created above to the property that receives the data. The <code>.assign</code> operator assigns the publisher’s output value (a string in this case) to a specific property.</p>\n<p>  <code>\\titleText</code> is a keyPath that specifies the attribute that receives the data. In this example, assume that <code>self</code> has a property called <code>titleText</code> which will be used to store the title string extracted from the notification.</p>\n<p>(4) <code>.store(in: &amp;cancellables)</code>:</p>\n<p>  This line of code stores the subscription relationship in the <code>cancellables</code> collection to ensure that the subscription can be properly canceled when it is no longer needed. <code>cancellables</code> is usually a <code>Set</code> type variable used to hold the Cancellation identifier of the Combine in order to unsubscribe when the object is released to avoid memory leaks.</p>\n<p>This code creates a Combine publisher that receives a notification of a specific name from the NotificationCenter and extracts the data from the notification as a string and assigns the extracted string to the object’s <code>titleText</code> property. The subscription relationship is then stored in <code>cancellables</code> to ensure that the subscription can be canceled when needed. This way, the value of the <code>titleText</code> property will be automatically updated when a specific notification is received.</p>\n"},{"title":"02. Combine (2) ———— Common types (1)","date":"2023-10-18T21:00:00.000Z","_content":"\n<font color=gray size=2>*It will take about 10 minutes to finish reading this article.*</font>\n\n#### <font size=5 color=#4169E1>Overview</font> \n\nIn the previous section, we introduced the Publisher and Subscriber types along with some of the types under the Publishers and Subscribers namespaces in the Combine framework. These two types are the core concepts of the Combine framework. This article will continue to introduce some other common types in the Combine framework.\n\n#### <font size=5 color=#4169E1>1. AnyPublisher</font> \n\nAnyPublisher is the type-erased version of the Publisher type. It hides the specific underlying publisher type and exposes a generic interface for handling publishers.\n\n**Example Code One:**\n\n```Swift\nlet specificPublisher = Just(\"Hello, Combine!\")\nlet anyPublisher = specificPublisher.eraseToAnyPublisher()\n\nanyPublisher\n    .sink(receiveCompletion: { completion in\n        // Handle completion state (finished or failure)\n    }, receiveValue: { value in\n        // Handle the emitted value\n    })\n    .store(in: &cancellables)\n\n```\n\nYou can create an AnyPublisher from any publisher using the eraseToAnyPublisher() method. You can subscribe to it, apply operators, and handle the values and errors it emits just like any other Publisher. It's especially useful when you want to combine or merge multiple publishers of different types into a single type-erased publisher for further processing.\n\n**Example Code Two:**\n\nAnyPublisher is particularly useful when you want to combine or merge multiple publishers of different types into a single type-erased publisher for further processing:\n\n```Swift\nlet publisher1 = ...\nlet publisher2 = ...\nlet combinedPublisher = Publishers.Merge(publisher1, publisher2).eraseToAnyPublisher()\n```\n\n#### <font size=5 color=#4169E1>2. Publishered</font> \n\n`Published` is a property wrapper in SwiftUI based on Combine, used to create observable object properties. It converts property changes into Combine publishers, enabling the interface to update automatically to reflect the changes. This is useful for creating responsive user interfaces.\n\n**Example Code:**\n\n```swift\nclass Weather {\n    @Published var temperature: Double\n\n    init(temperature: Double) {\n        self.temperature = temperature\n    }\n}\n\nlet weather = Weather(temperature: 20)\ncancellable = weather.$temperature\n    .sink() {\n        print(\"Temperature now: \\($0)\")\n    }\nweather.temperature = 25\n\n// Prints:\n// Temperature now: 20.0\n// Temperature now: 25.0\n```\n\n#### <font size=5 color=#4169E1>3. Cancellable and AnyCancellable</font> \n\n<font size=4>**3.1 Cancellable**</font>  \n\n`Cancellable` is a protocol that represents an object that can be canceled for a subscription. It allows you to manually cancel subscriptions when they are no longer needed to avoid unnecessary resource consumption or the continued propagation of data streams.\n\n```Swift\nprotocol Cancellable\n```\n\nCalling cancel() not only frees allocated resources, it may also have side effects such as stopping timers, network access, or disk I/O.\n\n```Swift\n\nimport Combine\n\nclass MyViewModel: ObservableObject {\n    private var cancellable: Cancellable?\n\n    func fetchData() {\n        cancellable = somePublisher.sink { data in\n            // Handle data\n        }\n    }\n\n    func cancelFetch() {\n        cancellable?.cancel()\n    }\n}\n```\n\n<font size=4>**3.2 AnyCancellable**</font>\n\n`AnyCancellable` is a type-erased object for `Cancellable` that manages and holds one or more `Cancellable` objects. An instance of `AnyCancellable` automatically calls cancel() upon deallocation, ensuring that they are properly canceled when they are no longer needed.\n\n```Swift\nimport Combine\n\nclass MyViewModel: ObservableObject {\n    private var cancellables = Set<AnyCancellable>()\n\n    func fetchData() {\n        somePublisher1\n            .sink { data in\n                // Handle data\n            }\n            .store(in: &cancellables)\n\n        somePublisher2\n            .sink { data in\n                // Handle data\n            }\n            .store(in: &cancellables)\n    }\n}\n```\n#### <font size=5 color=#4169E1>4. Future</font> \n\n`Future` is a type of Publisher that represents an asynchronous operation that may produce a result in the future. It can be used to create a Publisher that will produce a value or an error at some point in the future.\n\n```Swift\n\nfinal class Future<Output, Failure> where Failure : Error\n\n```\n\n**Example Code:**\n\n```Swift\nlet futureExample = Future<Int, Error> { promise in\n    // Perform asynchronous operation\n    DispatchQueue.global().async {\n        // Simulate completion of the asynchronous operation\n        let result = 42\n        // Use promise to complete the Future\n        promise(.success(result))\n    }\n}\n\nfutureExample\n    .sink(receiveCompletion: { completion in\n        // Handle completion state (finished or failure)\n    }, receiveValue: { value in\n        print(\"Got value \\(value).\")\n    })\n    .store(in: &cancellables)\n```\nFutures are often used in Combine to handle one-time asynchronous operations, such as network requests or computationally intensive tasks. It allows these operations to be wrapped into Publishers so that they can be combined, transformed and processed with other data streams.\n\n#### <font size=5 color=#4169E1>5. Just</font> \n\n`Just` is a type of Publisher that is used to create a Publisher that emits a single specified value. Unlike `Future`, `Just` immediately emits its value as soon as it is created, rather than executing an asynchronous operation at some future point.\n\n**Example Code:**\n\n```Swift\nlet justExample = Just(\"Hello, Combine!\")\n\njustExample\n    .sink(receiveValue: { value in\n        // Handle the emitted value\n    })\n    .store(in: &cancellables)\n```\n\nJust Publisher is useful for creating data flows for testing or serving static data, as it can easily convert a specific value into a Publisher. Note, however, that it is not suitable for representing dynamic or asynchronous data flows. For the latter, you might consider using a Future or other appropriate Publisher type.\n\n#### <font size=5 color=#4169E1>6. Deferred</font> \n\n`Deferred` is a type of Publisher used to delay the creation and subscription of another Publisher. Unlike other Publishers, `Deferred` executes its closure when it's subscribed to, which is used to create and return the actual Publisher you want to subscribe to.\n\n**Example Code:**\n\n```Swift\nlet deferredExample = Deferred {\n    return Just(\"Deferred Example\")\n}\n```\n\nInitialize with a closure that will be executed every time you subscribe, and the return value of the closure is the actual publisher you want to subscribe to.\n\n```Swift\ndeferredExample\n    .sink(receiveValue: { value in\n        // Handle the emitted value\n    })\n    .store(in: &cancellables)\n```\n\nYou can subscribe to a Deferred publisher just like other Combine publishers and process the values it emits.\n\nNote: The closure of Deferred will only be executed when subscribing, and it will be executed once for each subscription. This means that the actual publisher is created lazily and can be dynamically generated as needed.\n\nDeferreds are a type of conditional Publisher: you can use Deferreds to create Publishers that are generated based on certain conditions, which allows you to generate different data streams when needed to adapt to different situations. Deferred is a very useful publisher type that allows you to generate publishers on demand and perform related logic when subscribing. This is useful for implementing dynamic, conditional, or context-based data flow in Combine flows.\n\n#### <font size=5 color=#4169E1>7. Empty</font>\n\nEmpty is also a publisher type, which represents a publisher that does not emit any value and will only be completed immediately. It is usually used to represent an empty data stream or a data stream that contains no data.\n\n```Swift\nstruct Empty<Output, Failure> where Failure : Error\n```\n\n**Example Code:**\n```Swift\nlet emptyExample = Empty<Int, Never>()\n```\n\nYou can subscribe to the Empty publisher just like other Combine publishers, but since it completes immediately and emits no value, you usually only need to handle the completion status.\n\n```Swift\nemptyExample\n     .sink(receiveCompletion: { completion in\n         switch completion {\n         case .finished:\n             // Handle completion status (completed)\n         case .failure(let error):\n             // This branch will not be entered because the error type is usually `Never`\n             break\n         }\n     }, receiveValue: { value in\n         // This branch will not be entered because `Empty` does not emit a value\n     })\n     .store(in: &cancellables)\n\n```\n\n`Empty` Publisher is commonly used to represent situations where no data is available under certain conditions in the Combine data stream. It can be used to create an empty data stream for combining and processing with other Publishers.\n\n#### <font size=5 color=#4169E1>8. Fail</font>\n\n`Fail` is a type of Publisher that represents a Publisher that will immediately complete with a specified error. Unlike `Empty`, `Fail` emits an error without emitting any values. The error type is a subtype of `Error`.\n\n**Example Code:**\n\n```Swift\nlet failExample = Fail<Int, MyError>(error: MyError.someError)\n\nfailExample\n    .sink(receiveCompletion: { completion in\n        switch completion {\n        case .finished:\n            // Won't enter this branch because `Fail` completes immediately\n            break\n        case .failure(let error):\n            // Handle the error\n        }\n    }, receiveValue: { value in\n        // Won't enter this branch because `Fail` doesn't emit values\n    })\n    .store(in: &cancellables)\n```\n\nSince it completes immediately and issues an error, you usually only need to handle the error.\n\nFail is usually used to simulate certain failure or error situations in order to test error handling logic in the Combine data flow. It can also be used to indicate that under certain conditions the data stream is unable to provide valid data and an error occurs.\n\n#### <font size=5 color=#4169E1>9. Record</font>\n\n`Record` is also a type of Publisher that allows recording a series of input and completion events for later playback to each subscriber. You can create a `Record` Publisher using different initialization methods.\n\n**1. Create a Record publisher with the provided output and completion events:**\n\n```Swift\nlet values: [Int] = [1, 2, 3]\nlet completion: Subscribers.Completion<MyError> = .finished\n\nlet recordPublisher = Record(output: values, completion: completion)\n```\n\n**2. Use closures to interactively log output and completion events:**\n\n```Swift\nlet recordPublisher = Record<Int, MyError> { recorder in\n    recorder.receive(1)\n    recorder.receive(2)\n    recorder.receive(3)\n    recorder.receive(completion: .finished)\n}\n```\n\n**3. Create a Record publisher using existing records (Recording):**\n\n```Swift\nlet existingRecording: Record<Int, MyError>.Recording = ...\nlet recordPublisher = Record(recording: existingRecording)\n\n```\n\nYou can subscribe to `Record` Publisher like any other Combine Publisher. It will replay the previously recorded values and completion events to the subscriber.\n\n```Swift\nrecordPublisher\n     .sink(receiveCompletion: { completion in\n         switch completion {\n         case .finished:\n             // Handle completion event\n         case .failure(let error):\n             // Handle error events\n         }\n     }, receiveValue: { value in\n         // Process the recorded value\n     })\n     .store(in: &cancellables)\n```\n\nRecord is a powerful tool that can be used to record and playback data streams for testing, simulation, and other situations where data needs to be replayed at different points in time. This can help simplify and improve testing and debugging of code.\n\n#### <font size=5 color=#4169E1>10. ConnectablePublisher</font>\n\n`ConnectablePublisher` is a special type of Publisher that requires manually calling the `connect()` method to start publishing values. Unlike regular Publishers, a `ConnectablePublisher` doesn't immediately start propagating data when subscribed to. Instead, it waits until the `connect()` method is called.\n\n**Example Code:**\n\n```Swift\nlet publisher = [1, 2, 3].publisher.makeConnectable()\n// Subscribers can subscribe at any time, but data won't be published immediately\n\n// Manually connect at a specific point to start publishing data\nlet cancellable = publisher\n    .sink { value in\n        // Handle the data\n    }\n\npublisher.connect() // Manually connect\n```\n\nOnce connected, the `ConnectablePublisher` will continue to publish data until you disconnect. You can stop receiving data by canceling the subscription or automatically connect until there are no subscribers by using the `autoconnect()` method.\n\n```Swift\ncancelable.cancel() // Stop receiving data\n// or\nlet autoconnectedPublisher = publisher.autoconnect() // Automatically connect\n```\n\n`ConnectablePublisher` is useful for scenarios where multiple subscribers need to operate on the same data stream. By manually connecting, you can ensure that subscribers start receiving data only when they are ready to receive, meeting specific requirements. This approach can improve the performance and efficiency of your code.\n","source":"_posts/Reactive Programming/01. Combine/02. Combine (2).md","raw":"---\ntitle: 02. Combine (2) ———— Common types (1)\ndate: 2023-10-18 23:00:00\ncategories: \n- [Reactive Programming, 01. Combine]\ntags:\n- Combine\n---\n\n<font color=gray size=2>*It will take about 10 minutes to finish reading this article.*</font>\n\n#### <font size=5 color=#4169E1>Overview</font> \n\nIn the previous section, we introduced the Publisher and Subscriber types along with some of the types under the Publishers and Subscribers namespaces in the Combine framework. These two types are the core concepts of the Combine framework. This article will continue to introduce some other common types in the Combine framework.\n\n#### <font size=5 color=#4169E1>1. AnyPublisher</font> \n\nAnyPublisher is the type-erased version of the Publisher type. It hides the specific underlying publisher type and exposes a generic interface for handling publishers.\n\n**Example Code One:**\n\n```Swift\nlet specificPublisher = Just(\"Hello, Combine!\")\nlet anyPublisher = specificPublisher.eraseToAnyPublisher()\n\nanyPublisher\n    .sink(receiveCompletion: { completion in\n        // Handle completion state (finished or failure)\n    }, receiveValue: { value in\n        // Handle the emitted value\n    })\n    .store(in: &cancellables)\n\n```\n\nYou can create an AnyPublisher from any publisher using the eraseToAnyPublisher() method. You can subscribe to it, apply operators, and handle the values and errors it emits just like any other Publisher. It's especially useful when you want to combine or merge multiple publishers of different types into a single type-erased publisher for further processing.\n\n**Example Code Two:**\n\nAnyPublisher is particularly useful when you want to combine or merge multiple publishers of different types into a single type-erased publisher for further processing:\n\n```Swift\nlet publisher1 = ...\nlet publisher2 = ...\nlet combinedPublisher = Publishers.Merge(publisher1, publisher2).eraseToAnyPublisher()\n```\n\n#### <font size=5 color=#4169E1>2. Publishered</font> \n\n`Published` is a property wrapper in SwiftUI based on Combine, used to create observable object properties. It converts property changes into Combine publishers, enabling the interface to update automatically to reflect the changes. This is useful for creating responsive user interfaces.\n\n**Example Code:**\n\n```swift\nclass Weather {\n    @Published var temperature: Double\n\n    init(temperature: Double) {\n        self.temperature = temperature\n    }\n}\n\nlet weather = Weather(temperature: 20)\ncancellable = weather.$temperature\n    .sink() {\n        print(\"Temperature now: \\($0)\")\n    }\nweather.temperature = 25\n\n// Prints:\n// Temperature now: 20.0\n// Temperature now: 25.0\n```\n\n#### <font size=5 color=#4169E1>3. Cancellable and AnyCancellable</font> \n\n<font size=4>**3.1 Cancellable**</font>  \n\n`Cancellable` is a protocol that represents an object that can be canceled for a subscription. It allows you to manually cancel subscriptions when they are no longer needed to avoid unnecessary resource consumption or the continued propagation of data streams.\n\n```Swift\nprotocol Cancellable\n```\n\nCalling cancel() not only frees allocated resources, it may also have side effects such as stopping timers, network access, or disk I/O.\n\n```Swift\n\nimport Combine\n\nclass MyViewModel: ObservableObject {\n    private var cancellable: Cancellable?\n\n    func fetchData() {\n        cancellable = somePublisher.sink { data in\n            // Handle data\n        }\n    }\n\n    func cancelFetch() {\n        cancellable?.cancel()\n    }\n}\n```\n\n<font size=4>**3.2 AnyCancellable**</font>\n\n`AnyCancellable` is a type-erased object for `Cancellable` that manages and holds one or more `Cancellable` objects. An instance of `AnyCancellable` automatically calls cancel() upon deallocation, ensuring that they are properly canceled when they are no longer needed.\n\n```Swift\nimport Combine\n\nclass MyViewModel: ObservableObject {\n    private var cancellables = Set<AnyCancellable>()\n\n    func fetchData() {\n        somePublisher1\n            .sink { data in\n                // Handle data\n            }\n            .store(in: &cancellables)\n\n        somePublisher2\n            .sink { data in\n                // Handle data\n            }\n            .store(in: &cancellables)\n    }\n}\n```\n#### <font size=5 color=#4169E1>4. Future</font> \n\n`Future` is a type of Publisher that represents an asynchronous operation that may produce a result in the future. It can be used to create a Publisher that will produce a value or an error at some point in the future.\n\n```Swift\n\nfinal class Future<Output, Failure> where Failure : Error\n\n```\n\n**Example Code:**\n\n```Swift\nlet futureExample = Future<Int, Error> { promise in\n    // Perform asynchronous operation\n    DispatchQueue.global().async {\n        // Simulate completion of the asynchronous operation\n        let result = 42\n        // Use promise to complete the Future\n        promise(.success(result))\n    }\n}\n\nfutureExample\n    .sink(receiveCompletion: { completion in\n        // Handle completion state (finished or failure)\n    }, receiveValue: { value in\n        print(\"Got value \\(value).\")\n    })\n    .store(in: &cancellables)\n```\nFutures are often used in Combine to handle one-time asynchronous operations, such as network requests or computationally intensive tasks. It allows these operations to be wrapped into Publishers so that they can be combined, transformed and processed with other data streams.\n\n#### <font size=5 color=#4169E1>5. Just</font> \n\n`Just` is a type of Publisher that is used to create a Publisher that emits a single specified value. Unlike `Future`, `Just` immediately emits its value as soon as it is created, rather than executing an asynchronous operation at some future point.\n\n**Example Code:**\n\n```Swift\nlet justExample = Just(\"Hello, Combine!\")\n\njustExample\n    .sink(receiveValue: { value in\n        // Handle the emitted value\n    })\n    .store(in: &cancellables)\n```\n\nJust Publisher is useful for creating data flows for testing or serving static data, as it can easily convert a specific value into a Publisher. Note, however, that it is not suitable for representing dynamic or asynchronous data flows. For the latter, you might consider using a Future or other appropriate Publisher type.\n\n#### <font size=5 color=#4169E1>6. Deferred</font> \n\n`Deferred` is a type of Publisher used to delay the creation and subscription of another Publisher. Unlike other Publishers, `Deferred` executes its closure when it's subscribed to, which is used to create and return the actual Publisher you want to subscribe to.\n\n**Example Code:**\n\n```Swift\nlet deferredExample = Deferred {\n    return Just(\"Deferred Example\")\n}\n```\n\nInitialize with a closure that will be executed every time you subscribe, and the return value of the closure is the actual publisher you want to subscribe to.\n\n```Swift\ndeferredExample\n    .sink(receiveValue: { value in\n        // Handle the emitted value\n    })\n    .store(in: &cancellables)\n```\n\nYou can subscribe to a Deferred publisher just like other Combine publishers and process the values it emits.\n\nNote: The closure of Deferred will only be executed when subscribing, and it will be executed once for each subscription. This means that the actual publisher is created lazily and can be dynamically generated as needed.\n\nDeferreds are a type of conditional Publisher: you can use Deferreds to create Publishers that are generated based on certain conditions, which allows you to generate different data streams when needed to adapt to different situations. Deferred is a very useful publisher type that allows you to generate publishers on demand and perform related logic when subscribing. This is useful for implementing dynamic, conditional, or context-based data flow in Combine flows.\n\n#### <font size=5 color=#4169E1>7. Empty</font>\n\nEmpty is also a publisher type, which represents a publisher that does not emit any value and will only be completed immediately. It is usually used to represent an empty data stream or a data stream that contains no data.\n\n```Swift\nstruct Empty<Output, Failure> where Failure : Error\n```\n\n**Example Code:**\n```Swift\nlet emptyExample = Empty<Int, Never>()\n```\n\nYou can subscribe to the Empty publisher just like other Combine publishers, but since it completes immediately and emits no value, you usually only need to handle the completion status.\n\n```Swift\nemptyExample\n     .sink(receiveCompletion: { completion in\n         switch completion {\n         case .finished:\n             // Handle completion status (completed)\n         case .failure(let error):\n             // This branch will not be entered because the error type is usually `Never`\n             break\n         }\n     }, receiveValue: { value in\n         // This branch will not be entered because `Empty` does not emit a value\n     })\n     .store(in: &cancellables)\n\n```\n\n`Empty` Publisher is commonly used to represent situations where no data is available under certain conditions in the Combine data stream. It can be used to create an empty data stream for combining and processing with other Publishers.\n\n#### <font size=5 color=#4169E1>8. Fail</font>\n\n`Fail` is a type of Publisher that represents a Publisher that will immediately complete with a specified error. Unlike `Empty`, `Fail` emits an error without emitting any values. The error type is a subtype of `Error`.\n\n**Example Code:**\n\n```Swift\nlet failExample = Fail<Int, MyError>(error: MyError.someError)\n\nfailExample\n    .sink(receiveCompletion: { completion in\n        switch completion {\n        case .finished:\n            // Won't enter this branch because `Fail` completes immediately\n            break\n        case .failure(let error):\n            // Handle the error\n        }\n    }, receiveValue: { value in\n        // Won't enter this branch because `Fail` doesn't emit values\n    })\n    .store(in: &cancellables)\n```\n\nSince it completes immediately and issues an error, you usually only need to handle the error.\n\nFail is usually used to simulate certain failure or error situations in order to test error handling logic in the Combine data flow. It can also be used to indicate that under certain conditions the data stream is unable to provide valid data and an error occurs.\n\n#### <font size=5 color=#4169E1>9. Record</font>\n\n`Record` is also a type of Publisher that allows recording a series of input and completion events for later playback to each subscriber. You can create a `Record` Publisher using different initialization methods.\n\n**1. Create a Record publisher with the provided output and completion events:**\n\n```Swift\nlet values: [Int] = [1, 2, 3]\nlet completion: Subscribers.Completion<MyError> = .finished\n\nlet recordPublisher = Record(output: values, completion: completion)\n```\n\n**2. Use closures to interactively log output and completion events:**\n\n```Swift\nlet recordPublisher = Record<Int, MyError> { recorder in\n    recorder.receive(1)\n    recorder.receive(2)\n    recorder.receive(3)\n    recorder.receive(completion: .finished)\n}\n```\n\n**3. Create a Record publisher using existing records (Recording):**\n\n```Swift\nlet existingRecording: Record<Int, MyError>.Recording = ...\nlet recordPublisher = Record(recording: existingRecording)\n\n```\n\nYou can subscribe to `Record` Publisher like any other Combine Publisher. It will replay the previously recorded values and completion events to the subscriber.\n\n```Swift\nrecordPublisher\n     .sink(receiveCompletion: { completion in\n         switch completion {\n         case .finished:\n             // Handle completion event\n         case .failure(let error):\n             // Handle error events\n         }\n     }, receiveValue: { value in\n         // Process the recorded value\n     })\n     .store(in: &cancellables)\n```\n\nRecord is a powerful tool that can be used to record and playback data streams for testing, simulation, and other situations where data needs to be replayed at different points in time. This can help simplify and improve testing and debugging of code.\n\n#### <font size=5 color=#4169E1>10. ConnectablePublisher</font>\n\n`ConnectablePublisher` is a special type of Publisher that requires manually calling the `connect()` method to start publishing values. Unlike regular Publishers, a `ConnectablePublisher` doesn't immediately start propagating data when subscribed to. Instead, it waits until the `connect()` method is called.\n\n**Example Code:**\n\n```Swift\nlet publisher = [1, 2, 3].publisher.makeConnectable()\n// Subscribers can subscribe at any time, but data won't be published immediately\n\n// Manually connect at a specific point to start publishing data\nlet cancellable = publisher\n    .sink { value in\n        // Handle the data\n    }\n\npublisher.connect() // Manually connect\n```\n\nOnce connected, the `ConnectablePublisher` will continue to publish data until you disconnect. You can stop receiving data by canceling the subscription or automatically connect until there are no subscribers by using the `autoconnect()` method.\n\n```Swift\ncancelable.cancel() // Stop receiving data\n// or\nlet autoconnectedPublisher = publisher.autoconnect() // Automatically connect\n```\n\n`ConnectablePublisher` is useful for scenarios where multiple subscribers need to operate on the same data stream. By manually connecting, you can ensure that subscribers start receiving data only when they are ready to receive, meeting specific requirements. This approach can improve the performance and efficiency of your code.\n","slug":"Reactive Programming/01. Combine/02. Combine (2)","published":1,"updated":"2023-10-19T19:43:34.638Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr4q000uvu0mcii0aqif","content":"<p><font color=gray size=2><em>It will take about 10 minutes to finish reading this article.</em></font></p>\n<h4 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a><font size=5 color=#4169E1>Overview</font></h4><p>In the previous section, we introduced the Publisher and Subscriber types along with some of the types under the Publishers and Subscribers namespaces in the Combine framework. These two types are the core concepts of the Combine framework. This article will continue to introduce some other common types in the Combine framework.</p>\n<h4 id=\"1-AnyPublisher\"><a href=\"#1-AnyPublisher\" class=\"headerlink\" title=\"1. AnyPublisher\"></a><font size=5 color=#4169E1>1. AnyPublisher</font></h4><p>AnyPublisher is the type-erased version of the Publisher type. It hides the specific underlying publisher type and exposes a generic interface for handling publishers.</p>\n<p><strong>Example Code One:</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> specificPublisher <span class=\"operator\">=</span> <span class=\"type\">Just</span>(<span class=\"string\">&quot;Hello, Combine!&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> anyPublisher <span class=\"operator\">=</span> specificPublisher.eraseToAnyPublisher()</span><br><span class=\"line\"></span><br><span class=\"line\">anyPublisher</span><br><span class=\"line\">    .sink(receiveCompletion: &#123; completion <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"comment\">// Handle completion state (finished or failure)</span></span><br><span class=\"line\">    &#125;, receiveValue: &#123; value <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"comment\">// Handle the emitted value</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .store(in: <span class=\"operator\">&amp;</span>cancellables)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>You can create an AnyPublisher from any publisher using the eraseToAnyPublisher() method. You can subscribe to it, apply operators, and handle the values and errors it emits just like any other Publisher. It’s especially useful when you want to combine or merge multiple publishers of different types into a single type-erased publisher for further processing.</p>\n<p><strong>Example Code Two:</strong></p>\n<p>AnyPublisher is particularly useful when you want to combine or merge multiple publishers of different types into a single type-erased publisher for further processing:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> publisher1 <span class=\"operator\">=</span> <span class=\"operator\">...</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> publisher2 <span class=\"operator\">=</span> <span class=\"operator\">...</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> combinedPublisher <span class=\"operator\">=</span> <span class=\"type\">Publishers</span>.<span class=\"type\">Merge</span>(publisher1, publisher2).eraseToAnyPublisher()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-Publishered\"><a href=\"#2-Publishered\" class=\"headerlink\" title=\"2. Publishered\"></a><font size=5 color=#4169E1>2. Publishered</font></h4><p><code>Published</code> is a property wrapper in SwiftUI based on Combine, used to create observable object properties. It converts property changes into Combine publishers, enabling the interface to update automatically to reflect the changes. This is useful for creating responsive user interfaces.</p>\n<p><strong>Example Code:</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Weather</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Published</span> <span class=\"keyword\">var</span> temperature: <span class=\"type\">Double</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"params\">temperature</span>: <span class=\"type\">Double</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.temperature <span class=\"operator\">=</span> temperature</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> weather <span class=\"operator\">=</span> <span class=\"type\">Weather</span>(temperature: <span class=\"number\">20</span>)</span><br><span class=\"line\">cancellable <span class=\"operator\">=</span> weather.<span class=\"variable\">$temperature</span></span><br><span class=\"line\">    .sink() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Temperature now: <span class=\"subst\">\\(<span class=\"variable\">$0</span>)</span>&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">weather.temperature <span class=\"operator\">=</span> <span class=\"number\">25</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Prints:</span></span><br><span class=\"line\"><span class=\"comment\">// Temperature now: 20.0</span></span><br><span class=\"line\"><span class=\"comment\">// Temperature now: 25.0</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-Cancellable-and-AnyCancellable\"><a href=\"#3-Cancellable-and-AnyCancellable\" class=\"headerlink\" title=\"3. Cancellable and AnyCancellable\"></a><font size=5 color=#4169E1>3. Cancellable and AnyCancellable</font></h4><p><font size=4><strong>3.1 Cancellable</strong></font>  </p>\n<p><code>Cancellable</code> is a protocol that represents an object that can be canceled for a subscription. It allows you to manually cancel subscriptions when they are no longer needed to avoid unnecessary resource consumption or the continued propagation of data streams.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protocol</span> <span class=\"title class_\">Cancellable</span></span><br></pre></td></tr></table></figure>\n\n<p>Calling cancel() not only frees allocated resources, it may also have side effects such as stopping timers, network access, or disk I&#x2F;O.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> Combine</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyViewModel</span>: <span class=\"title class_\">ObservableObject</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> cancellable: <span class=\"type\">Cancellable</span>?</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">fetchData</span>() &#123;</span><br><span class=\"line\">        cancellable <span class=\"operator\">=</span> somePublisher.sink &#123; data <span class=\"keyword\">in</span></span><br><span class=\"line\">            <span class=\"comment\">// Handle data</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">cancelFetch</span>() &#123;</span><br><span class=\"line\">        cancellable<span class=\"operator\">?</span>.cancel()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><font size=4><strong>3.2 AnyCancellable</strong></font></p>\n<p><code>AnyCancellable</code> is a type-erased object for <code>Cancellable</code> that manages and holds one or more <code>Cancellable</code> objects. An instance of <code>AnyCancellable</code> automatically calls cancel() upon deallocation, ensuring that they are properly canceled when they are no longer needed.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Combine</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyViewModel</span>: <span class=\"title class_\">ObservableObject</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> cancellables <span class=\"operator\">=</span> <span class=\"type\">Set</span>&lt;<span class=\"type\">AnyCancellable</span>&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">fetchData</span>() &#123;</span><br><span class=\"line\">        somePublisher1</span><br><span class=\"line\">            .sink &#123; data <span class=\"keyword\">in</span></span><br><span class=\"line\">                <span class=\"comment\">// Handle data</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            .store(in: <span class=\"operator\">&amp;</span>cancellables)</span><br><span class=\"line\"></span><br><span class=\"line\">        somePublisher2</span><br><span class=\"line\">            .sink &#123; data <span class=\"keyword\">in</span></span><br><span class=\"line\">                <span class=\"comment\">// Handle data</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            .store(in: <span class=\"operator\">&amp;</span>cancellables)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-Future\"><a href=\"#4-Future\" class=\"headerlink\" title=\"4. Future\"></a><font size=5 color=#4169E1>4. Future</font></h4><p><code>Future</code> is a type of Publisher that represents an asynchronous operation that may produce a result in the future. It can be used to create a Publisher that will produce a value or an error at some point in the future.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Future</span>&lt;<span class=\"title class_\">Output</span>, <span class=\"title class_\">Failure</span>&gt; <span class=\"title class_\">where</span> <span class=\"title class_\">Failure</span> : <span class=\"title class_\">Error</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>Example Code:</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> futureExample <span class=\"operator\">=</span> <span class=\"type\">Future</span>&lt;<span class=\"type\">Int</span>, <span class=\"type\">Error</span>&gt; &#123; promise <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"comment\">// Perform asynchronous operation</span></span><br><span class=\"line\">    <span class=\"type\">DispatchQueue</span>.global().async &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Simulate completion of the asynchronous operation</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> result <span class=\"operator\">=</span> <span class=\"number\">42</span></span><br><span class=\"line\">        <span class=\"comment\">// Use promise to complete the Future</span></span><br><span class=\"line\">        promise(.success(result))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">futureExample</span><br><span class=\"line\">    .sink(receiveCompletion: &#123; completion <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"comment\">// Handle completion state (finished or failure)</span></span><br><span class=\"line\">    &#125;, receiveValue: &#123; value <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Got value <span class=\"subst\">\\(value)</span>.&quot;</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .store(in: <span class=\"operator\">&amp;</span>cancellables)</span><br></pre></td></tr></table></figure>\n<p>Futures are often used in Combine to handle one-time asynchronous operations, such as network requests or computationally intensive tasks. It allows these operations to be wrapped into Publishers so that they can be combined, transformed and processed with other data streams.</p>\n<h4 id=\"5-Just\"><a href=\"#5-Just\" class=\"headerlink\" title=\"5. Just\"></a><font size=5 color=#4169E1>5. Just</font></h4><p><code>Just</code> is a type of Publisher that is used to create a Publisher that emits a single specified value. Unlike <code>Future</code>, <code>Just</code> immediately emits its value as soon as it is created, rather than executing an asynchronous operation at some future point.</p>\n<p><strong>Example Code:</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> justExample <span class=\"operator\">=</span> <span class=\"type\">Just</span>(<span class=\"string\">&quot;Hello, Combine!&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">justExample</span><br><span class=\"line\">    .sink(receiveValue: &#123; value <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"comment\">// Handle the emitted value</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .store(in: <span class=\"operator\">&amp;</span>cancellables)</span><br></pre></td></tr></table></figure>\n\n<p>Just Publisher is useful for creating data flows for testing or serving static data, as it can easily convert a specific value into a Publisher. Note, however, that it is not suitable for representing dynamic or asynchronous data flows. For the latter, you might consider using a Future or other appropriate Publisher type.</p>\n<h4 id=\"6-Deferred\"><a href=\"#6-Deferred\" class=\"headerlink\" title=\"6. Deferred\"></a><font size=5 color=#4169E1>6. Deferred</font></h4><p><code>Deferred</code> is a type of Publisher used to delay the creation and subscription of another Publisher. Unlike other Publishers, <code>Deferred</code> executes its closure when it’s subscribed to, which is used to create and return the actual Publisher you want to subscribe to.</p>\n<p><strong>Example Code:</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> deferredExample <span class=\"operator\">=</span> <span class=\"type\">Deferred</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Just</span>(<span class=\"string\">&quot;Deferred Example&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Initialize with a closure that will be executed every time you subscribe, and the return value of the closure is the actual publisher you want to subscribe to.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deferredExample</span><br><span class=\"line\">    .sink(receiveValue: &#123; value <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"comment\">// Handle the emitted value</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .store(in: <span class=\"operator\">&amp;</span>cancellables)</span><br></pre></td></tr></table></figure>\n\n<p>You can subscribe to a Deferred publisher just like other Combine publishers and process the values it emits.</p>\n<p>Note: The closure of Deferred will only be executed when subscribing, and it will be executed once for each subscription. This means that the actual publisher is created lazily and can be dynamically generated as needed.</p>\n<p>Deferreds are a type of conditional Publisher: you can use Deferreds to create Publishers that are generated based on certain conditions, which allows you to generate different data streams when needed to adapt to different situations. Deferred is a very useful publisher type that allows you to generate publishers on demand and perform related logic when subscribing. This is useful for implementing dynamic, conditional, or context-based data flow in Combine flows.</p>\n<h4 id=\"7-Empty\"><a href=\"#7-Empty\" class=\"headerlink\" title=\"7. Empty\"></a><font size=5 color=#4169E1>7. Empty</font></h4><p>Empty is also a publisher type, which represents a publisher that does not emit any value and will only be completed immediately. It is usually used to represent an empty data stream or a data stream that contains no data.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Empty</span>&lt;<span class=\"title class_\">Output</span>, <span class=\"title class_\">Failure</span>&gt; <span class=\"title class_\">where</span> <span class=\"title class_\">Failure</span> : <span class=\"title class_\">Error</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>Example Code:</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> emptyExample <span class=\"operator\">=</span> <span class=\"type\">Empty</span>&lt;<span class=\"type\">Int</span>, <span class=\"type\">Never</span>&gt;()</span><br></pre></td></tr></table></figure>\n\n<p>You can subscribe to the Empty publisher just like other Combine publishers, but since it completes immediately and emits no value, you usually only need to handle the completion status.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">emptyExample</span><br><span class=\"line\">     .sink(receiveCompletion: &#123; completion <span class=\"keyword\">in</span></span><br><span class=\"line\">         <span class=\"keyword\">switch</span> completion &#123;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> .finished:</span><br><span class=\"line\">             <span class=\"comment\">// Handle completion status (completed)</span></span><br><span class=\"line\">         <span class=\"keyword\">case</span> .failure(<span class=\"keyword\">let</span> error):</span><br><span class=\"line\">             <span class=\"comment\">// This branch will not be entered because the error type is usually `Never`</span></span><br><span class=\"line\">             <span class=\"keyword\">break</span></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;, receiveValue: &#123; value <span class=\"keyword\">in</span></span><br><span class=\"line\">         <span class=\"comment\">// This branch will not be entered because `Empty` does not emit a value</span></span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\">     .store(in: <span class=\"operator\">&amp;</span>cancellables)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><code>Empty</code> Publisher is commonly used to represent situations where no data is available under certain conditions in the Combine data stream. It can be used to create an empty data stream for combining and processing with other Publishers.</p>\n<h4 id=\"8-Fail\"><a href=\"#8-Fail\" class=\"headerlink\" title=\"8. Fail\"></a><font size=5 color=#4169E1>8. Fail</font></h4><p><code>Fail</code> is a type of Publisher that represents a Publisher that will immediately complete with a specified error. Unlike <code>Empty</code>, <code>Fail</code> emits an error without emitting any values. The error type is a subtype of <code>Error</code>.</p>\n<p><strong>Example Code:</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> failExample <span class=\"operator\">=</span> <span class=\"type\">Fail</span>&lt;<span class=\"type\">Int</span>, <span class=\"type\">MyError</span>&gt;(error: <span class=\"type\">MyError</span>.someError)</span><br><span class=\"line\"></span><br><span class=\"line\">failExample</span><br><span class=\"line\">    .sink(receiveCompletion: &#123; completion <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">switch</span> completion &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> .finished:</span><br><span class=\"line\">            <span class=\"comment\">// Won&#x27;t enter this branch because `Fail` completes immediately</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> .failure(<span class=\"keyword\">let</span> error):</span><br><span class=\"line\">            <span class=\"comment\">// Handle the error</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;, receiveValue: &#123; value <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"comment\">// Won&#x27;t enter this branch because `Fail` doesn&#x27;t emit values</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .store(in: <span class=\"operator\">&amp;</span>cancellables)</span><br></pre></td></tr></table></figure>\n\n<p>Since it completes immediately and issues an error, you usually only need to handle the error.</p>\n<p>Fail is usually used to simulate certain failure or error situations in order to test error handling logic in the Combine data flow. It can also be used to indicate that under certain conditions the data stream is unable to provide valid data and an error occurs.</p>\n<h4 id=\"9-Record\"><a href=\"#9-Record\" class=\"headerlink\" title=\"9. Record\"></a><font size=5 color=#4169E1>9. Record</font></h4><p><code>Record</code> is also a type of Publisher that allows recording a series of input and completion events for later playback to each subscriber. You can create a <code>Record</code> Publisher using different initialization methods.</p>\n<p><strong>1. Create a Record publisher with the provided output and completion events:</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> values: [<span class=\"type\">Int</span>] <span class=\"operator\">=</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> completion: <span class=\"type\">Subscribers</span>.<span class=\"type\">Completion</span>&lt;<span class=\"type\">MyError</span>&gt; <span class=\"operator\">=</span> .finished</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> recordPublisher <span class=\"operator\">=</span> <span class=\"type\">Record</span>(output: values, completion: completion)</span><br></pre></td></tr></table></figure>\n\n<p><strong>2. Use closures to interactively log output and completion events:</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> recordPublisher <span class=\"operator\">=</span> <span class=\"type\">Record</span>&lt;<span class=\"type\">Int</span>, <span class=\"type\">MyError</span>&gt; &#123; recorder <span class=\"keyword\">in</span></span><br><span class=\"line\">    recorder.receive(<span class=\"number\">1</span>)</span><br><span class=\"line\">    recorder.receive(<span class=\"number\">2</span>)</span><br><span class=\"line\">    recorder.receive(<span class=\"number\">3</span>)</span><br><span class=\"line\">    recorder.receive(completion: .finished)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>3. Create a Record publisher using existing records (Recording):</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> existingRecording: <span class=\"type\">Record</span>&lt;<span class=\"type\">Int</span>, <span class=\"type\">MyError</span>&gt;.<span class=\"type\">Recording</span> <span class=\"operator\">=</span> <span class=\"operator\">...</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> recordPublisher <span class=\"operator\">=</span> <span class=\"type\">Record</span>(recording: existingRecording)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>You can subscribe to <code>Record</code> Publisher like any other Combine Publisher. It will replay the previously recorded values and completion events to the subscriber.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">recordPublisher</span><br><span class=\"line\">     .sink(receiveCompletion: &#123; completion <span class=\"keyword\">in</span></span><br><span class=\"line\">         <span class=\"keyword\">switch</span> completion &#123;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> .finished:</span><br><span class=\"line\">             <span class=\"comment\">// Handle completion event</span></span><br><span class=\"line\">         <span class=\"keyword\">case</span> .failure(<span class=\"keyword\">let</span> error):</span><br><span class=\"line\">             <span class=\"comment\">// Handle error events</span></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;, receiveValue: &#123; value <span class=\"keyword\">in</span></span><br><span class=\"line\">         <span class=\"comment\">// Process the recorded value</span></span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\">     .store(in: <span class=\"operator\">&amp;</span>cancellables)</span><br></pre></td></tr></table></figure>\n\n<p>Record is a powerful tool that can be used to record and playback data streams for testing, simulation, and other situations where data needs to be replayed at different points in time. This can help simplify and improve testing and debugging of code.</p>\n<h4 id=\"10-ConnectablePublisher\"><a href=\"#10-ConnectablePublisher\" class=\"headerlink\" title=\"10. ConnectablePublisher\"></a><font size=5 color=#4169E1>10. ConnectablePublisher</font></h4><p><code>ConnectablePublisher</code> is a special type of Publisher that requires manually calling the <code>connect()</code> method to start publishing values. Unlike regular Publishers, a <code>ConnectablePublisher</code> doesn’t immediately start propagating data when subscribed to. Instead, it waits until the <code>connect()</code> method is called.</p>\n<p><strong>Example Code:</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> publisher <span class=\"operator\">=</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].publisher.makeConnectable()</span><br><span class=\"line\"><span class=\"comment\">// Subscribers can subscribe at any time, but data won&#x27;t be published immediately</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Manually connect at a specific point to start publishing data</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> cancellable <span class=\"operator\">=</span> publisher</span><br><span class=\"line\">    .sink &#123; value <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"comment\">// Handle the data</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">publisher.connect() <span class=\"comment\">// Manually connect</span></span><br></pre></td></tr></table></figure>\n\n<p>Once connected, the <code>ConnectablePublisher</code> will continue to publish data until you disconnect. You can stop receiving data by canceling the subscription or automatically connect until there are no subscribers by using the <code>autoconnect()</code> method.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cancelable.cancel() <span class=\"comment\">// Stop receiving data</span></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> autoconnectedPublisher <span class=\"operator\">=</span> publisher.autoconnect() <span class=\"comment\">// Automatically connect</span></span><br></pre></td></tr></table></figure>\n\n<p><code>ConnectablePublisher</code> is useful for scenarios where multiple subscribers need to operate on the same data stream. By manually connecting, you can ensure that subscribers start receiving data only when they are ready to receive, meeting specific requirements. This approach can improve the performance and efficiency of your code.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 10 minutes to finish reading this article.</em></font></p>\n<h4 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a><font size=5 color=#4169E1>Overview</font></h4><p>In the previous section, we introduced the Publisher and Subscriber types along with some of the types under the Publishers and Subscribers namespaces in the Combine framework. These two types are the core concepts of the Combine framework. This article will continue to introduce some other common types in the Combine framework.</p>\n<h4 id=\"1-AnyPublisher\"><a href=\"#1-AnyPublisher\" class=\"headerlink\" title=\"1. AnyPublisher\"></a><font size=5 color=#4169E1>1. AnyPublisher</font></h4><p>AnyPublisher is the type-erased version of the Publisher type. It hides the specific underlying publisher type and exposes a generic interface for handling publishers.</p>\n<p><strong>Example Code One:</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> specificPublisher <span class=\"operator\">=</span> <span class=\"type\">Just</span>(<span class=\"string\">&quot;Hello, Combine!&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> anyPublisher <span class=\"operator\">=</span> specificPublisher.eraseToAnyPublisher()</span><br><span class=\"line\"></span><br><span class=\"line\">anyPublisher</span><br><span class=\"line\">    .sink(receiveCompletion: &#123; completion <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"comment\">// Handle completion state (finished or failure)</span></span><br><span class=\"line\">    &#125;, receiveValue: &#123; value <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"comment\">// Handle the emitted value</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .store(in: <span class=\"operator\">&amp;</span>cancellables)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>You can create an AnyPublisher from any publisher using the eraseToAnyPublisher() method. You can subscribe to it, apply operators, and handle the values and errors it emits just like any other Publisher. It’s especially useful when you want to combine or merge multiple publishers of different types into a single type-erased publisher for further processing.</p>\n<p><strong>Example Code Two:</strong></p>\n<p>AnyPublisher is particularly useful when you want to combine or merge multiple publishers of different types into a single type-erased publisher for further processing:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> publisher1 <span class=\"operator\">=</span> <span class=\"operator\">...</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> publisher2 <span class=\"operator\">=</span> <span class=\"operator\">...</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> combinedPublisher <span class=\"operator\">=</span> <span class=\"type\">Publishers</span>.<span class=\"type\">Merge</span>(publisher1, publisher2).eraseToAnyPublisher()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-Publishered\"><a href=\"#2-Publishered\" class=\"headerlink\" title=\"2. Publishered\"></a><font size=5 color=#4169E1>2. Publishered</font></h4><p><code>Published</code> is a property wrapper in SwiftUI based on Combine, used to create observable object properties. It converts property changes into Combine publishers, enabling the interface to update automatically to reflect the changes. This is useful for creating responsive user interfaces.</p>\n<p><strong>Example Code:</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Weather</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Published</span> <span class=\"keyword\">var</span> temperature: <span class=\"type\">Double</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"params\">temperature</span>: <span class=\"type\">Double</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.temperature <span class=\"operator\">=</span> temperature</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> weather <span class=\"operator\">=</span> <span class=\"type\">Weather</span>(temperature: <span class=\"number\">20</span>)</span><br><span class=\"line\">cancellable <span class=\"operator\">=</span> weather.<span class=\"variable\">$temperature</span></span><br><span class=\"line\">    .sink() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Temperature now: <span class=\"subst\">\\(<span class=\"variable\">$0</span>)</span>&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">weather.temperature <span class=\"operator\">=</span> <span class=\"number\">25</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Prints:</span></span><br><span class=\"line\"><span class=\"comment\">// Temperature now: 20.0</span></span><br><span class=\"line\"><span class=\"comment\">// Temperature now: 25.0</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-Cancellable-and-AnyCancellable\"><a href=\"#3-Cancellable-and-AnyCancellable\" class=\"headerlink\" title=\"3. Cancellable and AnyCancellable\"></a><font size=5 color=#4169E1>3. Cancellable and AnyCancellable</font></h4><p><font size=4><strong>3.1 Cancellable</strong></font>  </p>\n<p><code>Cancellable</code> is a protocol that represents an object that can be canceled for a subscription. It allows you to manually cancel subscriptions when they are no longer needed to avoid unnecessary resource consumption or the continued propagation of data streams.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protocol</span> <span class=\"title class_\">Cancellable</span></span><br></pre></td></tr></table></figure>\n\n<p>Calling cancel() not only frees allocated resources, it may also have side effects such as stopping timers, network access, or disk I&#x2F;O.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> Combine</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyViewModel</span>: <span class=\"title class_\">ObservableObject</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> cancellable: <span class=\"type\">Cancellable</span>?</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">fetchData</span>() &#123;</span><br><span class=\"line\">        cancellable <span class=\"operator\">=</span> somePublisher.sink &#123; data <span class=\"keyword\">in</span></span><br><span class=\"line\">            <span class=\"comment\">// Handle data</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">cancelFetch</span>() &#123;</span><br><span class=\"line\">        cancellable<span class=\"operator\">?</span>.cancel()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><font size=4><strong>3.2 AnyCancellable</strong></font></p>\n<p><code>AnyCancellable</code> is a type-erased object for <code>Cancellable</code> that manages and holds one or more <code>Cancellable</code> objects. An instance of <code>AnyCancellable</code> automatically calls cancel() upon deallocation, ensuring that they are properly canceled when they are no longer needed.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Combine</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyViewModel</span>: <span class=\"title class_\">ObservableObject</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> cancellables <span class=\"operator\">=</span> <span class=\"type\">Set</span>&lt;<span class=\"type\">AnyCancellable</span>&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">fetchData</span>() &#123;</span><br><span class=\"line\">        somePublisher1</span><br><span class=\"line\">            .sink &#123; data <span class=\"keyword\">in</span></span><br><span class=\"line\">                <span class=\"comment\">// Handle data</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            .store(in: <span class=\"operator\">&amp;</span>cancellables)</span><br><span class=\"line\"></span><br><span class=\"line\">        somePublisher2</span><br><span class=\"line\">            .sink &#123; data <span class=\"keyword\">in</span></span><br><span class=\"line\">                <span class=\"comment\">// Handle data</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            .store(in: <span class=\"operator\">&amp;</span>cancellables)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-Future\"><a href=\"#4-Future\" class=\"headerlink\" title=\"4. Future\"></a><font size=5 color=#4169E1>4. Future</font></h4><p><code>Future</code> is a type of Publisher that represents an asynchronous operation that may produce a result in the future. It can be used to create a Publisher that will produce a value or an error at some point in the future.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Future</span>&lt;<span class=\"title class_\">Output</span>, <span class=\"title class_\">Failure</span>&gt; <span class=\"title class_\">where</span> <span class=\"title class_\">Failure</span> : <span class=\"title class_\">Error</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>Example Code:</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> futureExample <span class=\"operator\">=</span> <span class=\"type\">Future</span>&lt;<span class=\"type\">Int</span>, <span class=\"type\">Error</span>&gt; &#123; promise <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"comment\">// Perform asynchronous operation</span></span><br><span class=\"line\">    <span class=\"type\">DispatchQueue</span>.global().async &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Simulate completion of the asynchronous operation</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> result <span class=\"operator\">=</span> <span class=\"number\">42</span></span><br><span class=\"line\">        <span class=\"comment\">// Use promise to complete the Future</span></span><br><span class=\"line\">        promise(.success(result))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">futureExample</span><br><span class=\"line\">    .sink(receiveCompletion: &#123; completion <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"comment\">// Handle completion state (finished or failure)</span></span><br><span class=\"line\">    &#125;, receiveValue: &#123; value <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Got value <span class=\"subst\">\\(value)</span>.&quot;</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .store(in: <span class=\"operator\">&amp;</span>cancellables)</span><br></pre></td></tr></table></figure>\n<p>Futures are often used in Combine to handle one-time asynchronous operations, such as network requests or computationally intensive tasks. It allows these operations to be wrapped into Publishers so that they can be combined, transformed and processed with other data streams.</p>\n<h4 id=\"5-Just\"><a href=\"#5-Just\" class=\"headerlink\" title=\"5. Just\"></a><font size=5 color=#4169E1>5. Just</font></h4><p><code>Just</code> is a type of Publisher that is used to create a Publisher that emits a single specified value. Unlike <code>Future</code>, <code>Just</code> immediately emits its value as soon as it is created, rather than executing an asynchronous operation at some future point.</p>\n<p><strong>Example Code:</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> justExample <span class=\"operator\">=</span> <span class=\"type\">Just</span>(<span class=\"string\">&quot;Hello, Combine!&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">justExample</span><br><span class=\"line\">    .sink(receiveValue: &#123; value <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"comment\">// Handle the emitted value</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .store(in: <span class=\"operator\">&amp;</span>cancellables)</span><br></pre></td></tr></table></figure>\n\n<p>Just Publisher is useful for creating data flows for testing or serving static data, as it can easily convert a specific value into a Publisher. Note, however, that it is not suitable for representing dynamic or asynchronous data flows. For the latter, you might consider using a Future or other appropriate Publisher type.</p>\n<h4 id=\"6-Deferred\"><a href=\"#6-Deferred\" class=\"headerlink\" title=\"6. Deferred\"></a><font size=5 color=#4169E1>6. Deferred</font></h4><p><code>Deferred</code> is a type of Publisher used to delay the creation and subscription of another Publisher. Unlike other Publishers, <code>Deferred</code> executes its closure when it’s subscribed to, which is used to create and return the actual Publisher you want to subscribe to.</p>\n<p><strong>Example Code:</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> deferredExample <span class=\"operator\">=</span> <span class=\"type\">Deferred</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Just</span>(<span class=\"string\">&quot;Deferred Example&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Initialize with a closure that will be executed every time you subscribe, and the return value of the closure is the actual publisher you want to subscribe to.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deferredExample</span><br><span class=\"line\">    .sink(receiveValue: &#123; value <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"comment\">// Handle the emitted value</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .store(in: <span class=\"operator\">&amp;</span>cancellables)</span><br></pre></td></tr></table></figure>\n\n<p>You can subscribe to a Deferred publisher just like other Combine publishers and process the values it emits.</p>\n<p>Note: The closure of Deferred will only be executed when subscribing, and it will be executed once for each subscription. This means that the actual publisher is created lazily and can be dynamically generated as needed.</p>\n<p>Deferreds are a type of conditional Publisher: you can use Deferreds to create Publishers that are generated based on certain conditions, which allows you to generate different data streams when needed to adapt to different situations. Deferred is a very useful publisher type that allows you to generate publishers on demand and perform related logic when subscribing. This is useful for implementing dynamic, conditional, or context-based data flow in Combine flows.</p>\n<h4 id=\"7-Empty\"><a href=\"#7-Empty\" class=\"headerlink\" title=\"7. Empty\"></a><font size=5 color=#4169E1>7. Empty</font></h4><p>Empty is also a publisher type, which represents a publisher that does not emit any value and will only be completed immediately. It is usually used to represent an empty data stream or a data stream that contains no data.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Empty</span>&lt;<span class=\"title class_\">Output</span>, <span class=\"title class_\">Failure</span>&gt; <span class=\"title class_\">where</span> <span class=\"title class_\">Failure</span> : <span class=\"title class_\">Error</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>Example Code:</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> emptyExample <span class=\"operator\">=</span> <span class=\"type\">Empty</span>&lt;<span class=\"type\">Int</span>, <span class=\"type\">Never</span>&gt;()</span><br></pre></td></tr></table></figure>\n\n<p>You can subscribe to the Empty publisher just like other Combine publishers, but since it completes immediately and emits no value, you usually only need to handle the completion status.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">emptyExample</span><br><span class=\"line\">     .sink(receiveCompletion: &#123; completion <span class=\"keyword\">in</span></span><br><span class=\"line\">         <span class=\"keyword\">switch</span> completion &#123;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> .finished:</span><br><span class=\"line\">             <span class=\"comment\">// Handle completion status (completed)</span></span><br><span class=\"line\">         <span class=\"keyword\">case</span> .failure(<span class=\"keyword\">let</span> error):</span><br><span class=\"line\">             <span class=\"comment\">// This branch will not be entered because the error type is usually `Never`</span></span><br><span class=\"line\">             <span class=\"keyword\">break</span></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;, receiveValue: &#123; value <span class=\"keyword\">in</span></span><br><span class=\"line\">         <span class=\"comment\">// This branch will not be entered because `Empty` does not emit a value</span></span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\">     .store(in: <span class=\"operator\">&amp;</span>cancellables)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><code>Empty</code> Publisher is commonly used to represent situations where no data is available under certain conditions in the Combine data stream. It can be used to create an empty data stream for combining and processing with other Publishers.</p>\n<h4 id=\"8-Fail\"><a href=\"#8-Fail\" class=\"headerlink\" title=\"8. Fail\"></a><font size=5 color=#4169E1>8. Fail</font></h4><p><code>Fail</code> is a type of Publisher that represents a Publisher that will immediately complete with a specified error. Unlike <code>Empty</code>, <code>Fail</code> emits an error without emitting any values. The error type is a subtype of <code>Error</code>.</p>\n<p><strong>Example Code:</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> failExample <span class=\"operator\">=</span> <span class=\"type\">Fail</span>&lt;<span class=\"type\">Int</span>, <span class=\"type\">MyError</span>&gt;(error: <span class=\"type\">MyError</span>.someError)</span><br><span class=\"line\"></span><br><span class=\"line\">failExample</span><br><span class=\"line\">    .sink(receiveCompletion: &#123; completion <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">switch</span> completion &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> .finished:</span><br><span class=\"line\">            <span class=\"comment\">// Won&#x27;t enter this branch because `Fail` completes immediately</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> .failure(<span class=\"keyword\">let</span> error):</span><br><span class=\"line\">            <span class=\"comment\">// Handle the error</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;, receiveValue: &#123; value <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"comment\">// Won&#x27;t enter this branch because `Fail` doesn&#x27;t emit values</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .store(in: <span class=\"operator\">&amp;</span>cancellables)</span><br></pre></td></tr></table></figure>\n\n<p>Since it completes immediately and issues an error, you usually only need to handle the error.</p>\n<p>Fail is usually used to simulate certain failure or error situations in order to test error handling logic in the Combine data flow. It can also be used to indicate that under certain conditions the data stream is unable to provide valid data and an error occurs.</p>\n<h4 id=\"9-Record\"><a href=\"#9-Record\" class=\"headerlink\" title=\"9. Record\"></a><font size=5 color=#4169E1>9. Record</font></h4><p><code>Record</code> is also a type of Publisher that allows recording a series of input and completion events for later playback to each subscriber. You can create a <code>Record</code> Publisher using different initialization methods.</p>\n<p><strong>1. Create a Record publisher with the provided output and completion events:</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> values: [<span class=\"type\">Int</span>] <span class=\"operator\">=</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> completion: <span class=\"type\">Subscribers</span>.<span class=\"type\">Completion</span>&lt;<span class=\"type\">MyError</span>&gt; <span class=\"operator\">=</span> .finished</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> recordPublisher <span class=\"operator\">=</span> <span class=\"type\">Record</span>(output: values, completion: completion)</span><br></pre></td></tr></table></figure>\n\n<p><strong>2. Use closures to interactively log output and completion events:</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> recordPublisher <span class=\"operator\">=</span> <span class=\"type\">Record</span>&lt;<span class=\"type\">Int</span>, <span class=\"type\">MyError</span>&gt; &#123; recorder <span class=\"keyword\">in</span></span><br><span class=\"line\">    recorder.receive(<span class=\"number\">1</span>)</span><br><span class=\"line\">    recorder.receive(<span class=\"number\">2</span>)</span><br><span class=\"line\">    recorder.receive(<span class=\"number\">3</span>)</span><br><span class=\"line\">    recorder.receive(completion: .finished)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>3. Create a Record publisher using existing records (Recording):</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> existingRecording: <span class=\"type\">Record</span>&lt;<span class=\"type\">Int</span>, <span class=\"type\">MyError</span>&gt;.<span class=\"type\">Recording</span> <span class=\"operator\">=</span> <span class=\"operator\">...</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> recordPublisher <span class=\"operator\">=</span> <span class=\"type\">Record</span>(recording: existingRecording)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>You can subscribe to <code>Record</code> Publisher like any other Combine Publisher. It will replay the previously recorded values and completion events to the subscriber.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">recordPublisher</span><br><span class=\"line\">     .sink(receiveCompletion: &#123; completion <span class=\"keyword\">in</span></span><br><span class=\"line\">         <span class=\"keyword\">switch</span> completion &#123;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> .finished:</span><br><span class=\"line\">             <span class=\"comment\">// Handle completion event</span></span><br><span class=\"line\">         <span class=\"keyword\">case</span> .failure(<span class=\"keyword\">let</span> error):</span><br><span class=\"line\">             <span class=\"comment\">// Handle error events</span></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;, receiveValue: &#123; value <span class=\"keyword\">in</span></span><br><span class=\"line\">         <span class=\"comment\">// Process the recorded value</span></span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\">     .store(in: <span class=\"operator\">&amp;</span>cancellables)</span><br></pre></td></tr></table></figure>\n\n<p>Record is a powerful tool that can be used to record and playback data streams for testing, simulation, and other situations where data needs to be replayed at different points in time. This can help simplify and improve testing and debugging of code.</p>\n<h4 id=\"10-ConnectablePublisher\"><a href=\"#10-ConnectablePublisher\" class=\"headerlink\" title=\"10. ConnectablePublisher\"></a><font size=5 color=#4169E1>10. ConnectablePublisher</font></h4><p><code>ConnectablePublisher</code> is a special type of Publisher that requires manually calling the <code>connect()</code> method to start publishing values. Unlike regular Publishers, a <code>ConnectablePublisher</code> doesn’t immediately start propagating data when subscribed to. Instead, it waits until the <code>connect()</code> method is called.</p>\n<p><strong>Example Code:</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> publisher <span class=\"operator\">=</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].publisher.makeConnectable()</span><br><span class=\"line\"><span class=\"comment\">// Subscribers can subscribe at any time, but data won&#x27;t be published immediately</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Manually connect at a specific point to start publishing data</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> cancellable <span class=\"operator\">=</span> publisher</span><br><span class=\"line\">    .sink &#123; value <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"comment\">// Handle the data</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">publisher.connect() <span class=\"comment\">// Manually connect</span></span><br></pre></td></tr></table></figure>\n\n<p>Once connected, the <code>ConnectablePublisher</code> will continue to publish data until you disconnect. You can stop receiving data by canceling the subscription or automatically connect until there are no subscribers by using the <code>autoconnect()</code> method.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cancelable.cancel() <span class=\"comment\">// Stop receiving data</span></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> autoconnectedPublisher <span class=\"operator\">=</span> publisher.autoconnect() <span class=\"comment\">// Automatically connect</span></span><br></pre></td></tr></table></figure>\n\n<p><code>ConnectablePublisher</code> is useful for scenarios where multiple subscribers need to operate on the same data stream. By manually connecting, you can ensure that subscribers start receiving data only when they are ready to receive, meeting specific requirements. This approach can improve the performance and efficiency of your code.</p>\n"},{"title":"01. Combine (1) ———— Publisher And Subscriber","date":"2023-10-08T21:00:00.000Z","_content":"\n<font color=gray size=2>*It will take about 5 minutes to finish reading this article.*</font>\n\nNext, I will record the learning process of Combine through a series of articles.\n\n#### <font size=5 color=#4169E1>1. Publisher</font> \n\n<font size=4>**1.1 Concept of Publisher**</font>\nPublisher is used to declare a protocol type that can transmit a series of values over time. Its source code is as follows:\n\n```Swift\npublic protocol Publisher<Output, Failure> {\n    associatedtype Output\n    associatedtype Failure : Error\n    func receive<S>(subscriber: S) where S : Subscriber, Self.Failure == S.Failure, Self.Output == S.Input\n}\n```\nIt has two generic parameters: Output represents the output data, and Failure represents failure.\n\nIt also has a receive function that accepts an object of Subscriber protocol type, and the Subscriber's Input and Failure associated types must match the Input and Failure types declared by the Publisher.\n\nPublisher accepts a subscriber by implementing the receive(subscriber:) method. A Publisher can pass elements to one or more Subscriber instances.\n\n<font size=4>**1.2 Sample Code**</font>\n\n```Swift\nlet publisher = NotificationCenter.Publisher(center: .default, name: .titleData)\n    .compactMap { notification -> String? in\n        return (notification.object as? Item)?.title\n    }\n\nlet subscriber1 = Subscribers.Assign(object: self, keyPath: \\.titleText1)\nlet subscriber2 = Subscribers.Assign(object: self, keyPath: \\.titleText2)\n\npublisher.receive(subscriber: subscriber1)\npublisher.receive(subscriber: subscriber2)\n```\n\n<font size=4>**1.3 Publishers**</font>\n\nApple uses enum to define a Publishers namespace, as follows:\n\n```Swift\n\nenum Publishers {\n    struct Sequence {\n        \n    }\n    \n    struct Catch {\n        \n    }\n    \n    struct ReceiveOn {\n        \n    }\n    ......\n}\n\n```\nNote: This enumeration is not an enumeration type, but a namespace. \n\nUsed to contain various publisher-related types and operators, used to organize and manage publisher-related functions. For example:\n\n* Publishers.Sequence: used to convert arrays to Publishers.\n\n* Publishers.Catch: used to handle errors and return an alternate Publisher.\n\n* Publishers.CombineLatest: used to merge the latest values of multiple Publishers.\n\n* Publishers.ReceiveOn: used to specify the dispatch queue for receiving events.\n\nThe following is a sample code for using Publishers.Sequence\n\n```Swift\nlet numbers = [1, 2, 3, 4, 5]\nlet publisher = Publishers.Sequence<[Int], Error>(sequence: numbers)\nlet subscription = publisher\n     .sink(receiveCompletion: { completion in\n         switch completion {\n         case .finished:\n             print(\"Data flow completed.\")\n         case .failure(let error):\n             print(\"Data flow error: \\(error)\")\n         }\n     }, receiveValue: { value in\n         print(\"Received value: \\(value)\")\n     })\nsubscription.cancel()\n```\n\nThe Combine framework provides a large number of this type, \nSee here: https://developer.apple.com/documentation/combine/publishers.\n\n<font size=4>**1.4 Other Publisher**</font>\n\nOf course, we can customize our own CustomPublisher by extending the system Publisher protocol. At the same time, the Combine framework also provides us with many extended Publishers. We can use them first. Here are a few:\n\n<font size=3>**1.4.1 Subject**</font>\n\n```Swift\nprotocol Subject<Output, Failure> : AnyObject, Publisher\n```\nSubject is a Publisher with publish and subscribe capabilities. Common Subject types include:\n\n* PassthroughSubject: New values can be published to all subscribers.\n\n* CurrentValueSubject: Can hold and publish the current value, as well as send new values to subscribers.\n\n<font size=3>**1.4.2 ConnectablePublisher**</font>\n\n```Swift\nprotocol ConnectablePublisher<Output, Failure> : Publisher\n```\nIt represents a connectable publisher, which requires a connect method that allows manual connection and disconnection of publishers.\n\n#### <font size=6 color=#4169E1>2. Subscriber</font> \n\n<font size=4>**2.1 Concept of Subscriber**</font>\n\nSubscriber is a protocol that declares types that can receive input from Publisher.\n\n```Swift\npublic protocol Subscriber<Input, Failure> : CustomCombineIdentifierConvertible {\n    associatedtype Input\n    associatedtype Failure : Error\n\n    func receive(subscription: Subscription)\n    func receive(_ input: Self.Input) -> Subscribers.Demand\n    func receive(completion: Subscribers.Completion<Self.Failure>)\n}\n```\n\nSubscriber instances receive a stream of elements from the publisher, as well as lifecycle events that describe changes to their relationships. It also has two generic parameters: Input and Failure, whose types must match the Output and Failure of their corresponding publishers. It also has three functions for interaction between Subscriber and Publisher.\n\nYou connect a subscriber to a publisher by calling the publisher's subscribe(_:) method. After the call, the publisher will call the subscriber's receive(subscription:) method. The subscriber thus obtains a Subscription instance, which is used to request elements from the publisher and can also choose to cancel the subscription. After the subscriber makes the initial request, the publisher calls receive(_:) (possibly asynchronously) to send the newly published elements. If the publisher stops publishing, it calls receive(completion:) with a parameter of type Subscribers.Completion to indicate whether the publishing completed normally or with an error.\n\nCombine provides the following subscribers as operators of the Publisher type:\n\n* sink(receiveCompletion:receiveValue:) executes an arbitrary closure when a completion signal is received and each time a new element is received.\n\n* assign(to:on:) writes each newly received value to the property identified by the key path on the specified instance.\n\n<font size=4>**2.2 Sample Code**</font>\n\n```Swift\n//Define a publisher, here use Just to create a publisher that publishes a single value\nlet publisher = Just(\"Hello, Combine!\")\n\n// Use the sink operator to create a Subscriber and handle the received values and completion events\nlet subscriber = Subscribers.Sink<String, Never>(\n     receiveCompletion: { completion in\n         switch completion {\n         case .finished:\n             print(\"Subscription completed.\")\n         case .failure(let error):\n             print(\"Subscription error: \\(error)\")\n         }\n     },\n     receiveValue: { value in\n         print(\"Received value: \\(value)\")\n     }\n)\n\n// Connect Subscriber to publisher\nlet subscription = publisher.subscribe(subscriber)\n// unsubscribe\nsubscription.cancel()\n```\n\nIn the above example, we first create a publisher, which publishes a string value. We then use Subscribers.Sink to create a Subscriber and specify a closure to receive the completion event and value. Finally, we connect the subscriber to the publisher via the subscribe method and unsubscribe after subscribing.\n\n<font size=4>**2.3 Subscribers**</font>\n\nSubscriber also has a Subscribers namespace, which contains various publisher-related types and operators and is used to organize and manage publisher-related functions. as follows:\n\n* Subscribers.Sink: Used to execute closures to handle values and completion events sent by publishers. It is usually used to perform custom operations, such as writing values to properties or performing some logic.\n\n* Subscribers.Assign: used to assign the value sent by the publisher to the specified attribute. It is typically used for binding with interface elements to associate Combine data flows with user interface updates.\n\n* Subscribers.Completion: is an enumeration type that represents the completion status of subscriptions. It has two possible values: .finished indicates that the subscription is completed, and .failure(error) indicates that an error occurred in the subscription.\n\n* Subscribers.Demand: Indicates the number of elements required by subscribers.\n\n\n\n \n","source":"_posts/Reactive Programming/01. Combine/01. Combine (1).md","raw":"---\ntitle: 01. Combine (1) ———— Publisher And Subscriber\ndate: 2023-10-08 23:00:00\ncategories: \n- [Reactive Programming, 01. Combine]\ntags:\n- Combine\n---\n\n<font color=gray size=2>*It will take about 5 minutes to finish reading this article.*</font>\n\nNext, I will record the learning process of Combine through a series of articles.\n\n#### <font size=5 color=#4169E1>1. Publisher</font> \n\n<font size=4>**1.1 Concept of Publisher**</font>\nPublisher is used to declare a protocol type that can transmit a series of values over time. Its source code is as follows:\n\n```Swift\npublic protocol Publisher<Output, Failure> {\n    associatedtype Output\n    associatedtype Failure : Error\n    func receive<S>(subscriber: S) where S : Subscriber, Self.Failure == S.Failure, Self.Output == S.Input\n}\n```\nIt has two generic parameters: Output represents the output data, and Failure represents failure.\n\nIt also has a receive function that accepts an object of Subscriber protocol type, and the Subscriber's Input and Failure associated types must match the Input and Failure types declared by the Publisher.\n\nPublisher accepts a subscriber by implementing the receive(subscriber:) method. A Publisher can pass elements to one or more Subscriber instances.\n\n<font size=4>**1.2 Sample Code**</font>\n\n```Swift\nlet publisher = NotificationCenter.Publisher(center: .default, name: .titleData)\n    .compactMap { notification -> String? in\n        return (notification.object as? Item)?.title\n    }\n\nlet subscriber1 = Subscribers.Assign(object: self, keyPath: \\.titleText1)\nlet subscriber2 = Subscribers.Assign(object: self, keyPath: \\.titleText2)\n\npublisher.receive(subscriber: subscriber1)\npublisher.receive(subscriber: subscriber2)\n```\n\n<font size=4>**1.3 Publishers**</font>\n\nApple uses enum to define a Publishers namespace, as follows:\n\n```Swift\n\nenum Publishers {\n    struct Sequence {\n        \n    }\n    \n    struct Catch {\n        \n    }\n    \n    struct ReceiveOn {\n        \n    }\n    ......\n}\n\n```\nNote: This enumeration is not an enumeration type, but a namespace. \n\nUsed to contain various publisher-related types and operators, used to organize and manage publisher-related functions. For example:\n\n* Publishers.Sequence: used to convert arrays to Publishers.\n\n* Publishers.Catch: used to handle errors and return an alternate Publisher.\n\n* Publishers.CombineLatest: used to merge the latest values of multiple Publishers.\n\n* Publishers.ReceiveOn: used to specify the dispatch queue for receiving events.\n\nThe following is a sample code for using Publishers.Sequence\n\n```Swift\nlet numbers = [1, 2, 3, 4, 5]\nlet publisher = Publishers.Sequence<[Int], Error>(sequence: numbers)\nlet subscription = publisher\n     .sink(receiveCompletion: { completion in\n         switch completion {\n         case .finished:\n             print(\"Data flow completed.\")\n         case .failure(let error):\n             print(\"Data flow error: \\(error)\")\n         }\n     }, receiveValue: { value in\n         print(\"Received value: \\(value)\")\n     })\nsubscription.cancel()\n```\n\nThe Combine framework provides a large number of this type, \nSee here: https://developer.apple.com/documentation/combine/publishers.\n\n<font size=4>**1.4 Other Publisher**</font>\n\nOf course, we can customize our own CustomPublisher by extending the system Publisher protocol. At the same time, the Combine framework also provides us with many extended Publishers. We can use them first. Here are a few:\n\n<font size=3>**1.4.1 Subject**</font>\n\n```Swift\nprotocol Subject<Output, Failure> : AnyObject, Publisher\n```\nSubject is a Publisher with publish and subscribe capabilities. Common Subject types include:\n\n* PassthroughSubject: New values can be published to all subscribers.\n\n* CurrentValueSubject: Can hold and publish the current value, as well as send new values to subscribers.\n\n<font size=3>**1.4.2 ConnectablePublisher**</font>\n\n```Swift\nprotocol ConnectablePublisher<Output, Failure> : Publisher\n```\nIt represents a connectable publisher, which requires a connect method that allows manual connection and disconnection of publishers.\n\n#### <font size=6 color=#4169E1>2. Subscriber</font> \n\n<font size=4>**2.1 Concept of Subscriber**</font>\n\nSubscriber is a protocol that declares types that can receive input from Publisher.\n\n```Swift\npublic protocol Subscriber<Input, Failure> : CustomCombineIdentifierConvertible {\n    associatedtype Input\n    associatedtype Failure : Error\n\n    func receive(subscription: Subscription)\n    func receive(_ input: Self.Input) -> Subscribers.Demand\n    func receive(completion: Subscribers.Completion<Self.Failure>)\n}\n```\n\nSubscriber instances receive a stream of elements from the publisher, as well as lifecycle events that describe changes to their relationships. It also has two generic parameters: Input and Failure, whose types must match the Output and Failure of their corresponding publishers. It also has three functions for interaction between Subscriber and Publisher.\n\nYou connect a subscriber to a publisher by calling the publisher's subscribe(_:) method. After the call, the publisher will call the subscriber's receive(subscription:) method. The subscriber thus obtains a Subscription instance, which is used to request elements from the publisher and can also choose to cancel the subscription. After the subscriber makes the initial request, the publisher calls receive(_:) (possibly asynchronously) to send the newly published elements. If the publisher stops publishing, it calls receive(completion:) with a parameter of type Subscribers.Completion to indicate whether the publishing completed normally or with an error.\n\nCombine provides the following subscribers as operators of the Publisher type:\n\n* sink(receiveCompletion:receiveValue:) executes an arbitrary closure when a completion signal is received and each time a new element is received.\n\n* assign(to:on:) writes each newly received value to the property identified by the key path on the specified instance.\n\n<font size=4>**2.2 Sample Code**</font>\n\n```Swift\n//Define a publisher, here use Just to create a publisher that publishes a single value\nlet publisher = Just(\"Hello, Combine!\")\n\n// Use the sink operator to create a Subscriber and handle the received values and completion events\nlet subscriber = Subscribers.Sink<String, Never>(\n     receiveCompletion: { completion in\n         switch completion {\n         case .finished:\n             print(\"Subscription completed.\")\n         case .failure(let error):\n             print(\"Subscription error: \\(error)\")\n         }\n     },\n     receiveValue: { value in\n         print(\"Received value: \\(value)\")\n     }\n)\n\n// Connect Subscriber to publisher\nlet subscription = publisher.subscribe(subscriber)\n// unsubscribe\nsubscription.cancel()\n```\n\nIn the above example, we first create a publisher, which publishes a string value. We then use Subscribers.Sink to create a Subscriber and specify a closure to receive the completion event and value. Finally, we connect the subscriber to the publisher via the subscribe method and unsubscribe after subscribing.\n\n<font size=4>**2.3 Subscribers**</font>\n\nSubscriber also has a Subscribers namespace, which contains various publisher-related types and operators and is used to organize and manage publisher-related functions. as follows:\n\n* Subscribers.Sink: Used to execute closures to handle values and completion events sent by publishers. It is usually used to perform custom operations, such as writing values to properties or performing some logic.\n\n* Subscribers.Assign: used to assign the value sent by the publisher to the specified attribute. It is typically used for binding with interface elements to associate Combine data flows with user interface updates.\n\n* Subscribers.Completion: is an enumeration type that represents the completion status of subscriptions. It has two possible values: .finished indicates that the subscription is completed, and .failure(error) indicates that an error occurred in the subscription.\n\n* Subscribers.Demand: Indicates the number of elements required by subscribers.\n\n\n\n \n","slug":"Reactive Programming/01. Combine/01. Combine (1)","published":1,"updated":"2023-10-10T21:17:01.374Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr4r000xvu0m85jw55ue","content":"<p><font color=gray size=2><em>It will take about 5 minutes to finish reading this article.</em></font></p>\n<p>Next, I will record the learning process of Combine through a series of articles.</p>\n<h4 id=\"1-Publisher\"><a href=\"#1-Publisher\" class=\"headerlink\" title=\"1. Publisher\"></a><font size=5 color=#4169E1>1. Publisher</font></h4><p><font size=4><strong>1.1 Concept of Publisher</strong></font><br>Publisher is used to declare a protocol type that can transmit a series of values over time. Its source code is as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">protocol</span> <span class=\"title class_\">Publisher</span>&lt;<span class=\"title class_\">Output</span>, <span class=\"title class_\">Failure</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">associatedtype</span> <span class=\"type\">Output</span></span><br><span class=\"line\">    <span class=\"keyword\">associatedtype</span> <span class=\"type\">Failure</span> : <span class=\"type\">Error</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">receive</span>&lt;<span class=\"type\">S</span>&gt;(<span class=\"params\">subscriber</span>: <span class=\"type\">S</span>) <span class=\"keyword\">where</span> <span class=\"type\">S</span> : <span class=\"type\">Subscriber</span>, <span class=\"keyword\">Self</span>.<span class=\"type\">Failure</span> <span class=\"operator\">==</span> <span class=\"type\">S</span>.<span class=\"type\">Failure</span>, <span class=\"keyword\">Self</span>.<span class=\"type\">Output</span> <span class=\"operator\">==</span> <span class=\"type\">S</span>.<span class=\"type\">Input</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>It has two generic parameters: Output represents the output data, and Failure represents failure.</p>\n<p>It also has a receive function that accepts an object of Subscriber protocol type, and the Subscriber’s Input and Failure associated types must match the Input and Failure types declared by the Publisher.</p>\n<p>Publisher accepts a subscriber by implementing the receive(subscriber:) method. A Publisher can pass elements to one or more Subscriber instances.</p>\n<p><font size=4><strong>1.2 Sample Code</strong></font></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> publisher <span class=\"operator\">=</span> <span class=\"type\">NotificationCenter</span>.<span class=\"type\">Publisher</span>(center: .default, name: .titleData)</span><br><span class=\"line\">    .compactMap &#123; notification -&gt; <span class=\"type\">String</span>? <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (notification.object <span class=\"keyword\">as?</span> <span class=\"type\">Item</span>)<span class=\"operator\">?</span>.title</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> subscriber1 <span class=\"operator\">=</span> <span class=\"type\">Subscribers</span>.<span class=\"type\">Assign</span>(object: <span class=\"keyword\">self</span>, keyPath: \\.titleText1)</span><br><span class=\"line\"><span class=\"keyword\">let</span> subscriber2 <span class=\"operator\">=</span> <span class=\"type\">Subscribers</span>.<span class=\"type\">Assign</span>(object: <span class=\"keyword\">self</span>, keyPath: \\.titleText2)</span><br><span class=\"line\"></span><br><span class=\"line\">publisher.receive(subscriber: subscriber1)</span><br><span class=\"line\">publisher.receive(subscriber: subscriber2)</span><br></pre></td></tr></table></figure>\n\n<p><font size=4><strong>1.3 Publishers</strong></font></p>\n<p>Apple uses enum to define a Publishers namespace, as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Publishers</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">Sequence</span> &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">Catch</span> &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">ReceiveOn</span> &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"operator\">......</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>Note: This enumeration is not an enumeration type, but a namespace. </p>\n<p>Used to contain various publisher-related types and operators, used to organize and manage publisher-related functions. For example:</p>\n<ul>\n<li><p>Publishers.Sequence: used to convert arrays to Publishers.</p>\n</li>\n<li><p>Publishers.Catch: used to handle errors and return an alternate Publisher.</p>\n</li>\n<li><p>Publishers.CombineLatest: used to merge the latest values of multiple Publishers.</p>\n</li>\n<li><p>Publishers.ReceiveOn: used to specify the dispatch queue for receiving events.</p>\n</li>\n</ul>\n<p>The following is a sample code for using Publishers.Sequence</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> numbers <span class=\"operator\">=</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> publisher <span class=\"operator\">=</span> <span class=\"type\">Publishers</span>.<span class=\"type\">Sequence</span>&lt;[<span class=\"type\">Int</span>], <span class=\"type\">Error</span>&gt;(sequence: numbers)</span><br><span class=\"line\"><span class=\"keyword\">let</span> subscription <span class=\"operator\">=</span> publisher</span><br><span class=\"line\">     .sink(receiveCompletion: &#123; completion <span class=\"keyword\">in</span></span><br><span class=\"line\">         <span class=\"keyword\">switch</span> completion &#123;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> .finished:</span><br><span class=\"line\">             <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Data flow completed.&quot;</span>)</span><br><span class=\"line\">         <span class=\"keyword\">case</span> .failure(<span class=\"keyword\">let</span> error):</span><br><span class=\"line\">             <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Data flow error: <span class=\"subst\">\\(error)</span>&quot;</span>)</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;, receiveValue: &#123; value <span class=\"keyword\">in</span></span><br><span class=\"line\">         <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Received value: <span class=\"subst\">\\(value)</span>&quot;</span>)</span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\">subscription.cancel()</span><br></pre></td></tr></table></figure>\n\n<p>The Combine framework provides a large number of this type,<br>See here: <a href=\"https://developer.apple.com/documentation/combine/publishers\">https://developer.apple.com/documentation/combine/publishers</a>.</p>\n<p><font size=4><strong>1.4 Other Publisher</strong></font></p>\n<p>Of course, we can customize our own CustomPublisher by extending the system Publisher protocol. At the same time, the Combine framework also provides us with many extended Publishers. We can use them first. Here are a few:</p>\n<p><font size=3><strong>1.4.1 Subject</strong></font></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protocol</span> <span class=\"title class_\">Subject</span>&lt;<span class=\"title class_\">Output</span>, <span class=\"title class_\">Failure</span>&gt; : <span class=\"title class_\">AnyObject</span>, <span class=\"title class_\">Publisher</span></span><br></pre></td></tr></table></figure>\n<p>Subject is a Publisher with publish and subscribe capabilities. Common Subject types include:</p>\n<ul>\n<li><p>PassthroughSubject: New values can be published to all subscribers.</p>\n</li>\n<li><p>CurrentValueSubject: Can hold and publish the current value, as well as send new values to subscribers.</p>\n</li>\n</ul>\n<p><font size=3><strong>1.4.2 ConnectablePublisher</strong></font></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protocol</span> <span class=\"title class_\">ConnectablePublisher</span>&lt;<span class=\"title class_\">Output</span>, <span class=\"title class_\">Failure</span>&gt; : <span class=\"title class_\">Publisher</span></span><br></pre></td></tr></table></figure>\n<p>It represents a connectable publisher, which requires a connect method that allows manual connection and disconnection of publishers.</p>\n<h4 id=\"2-Subscriber\"><a href=\"#2-Subscriber\" class=\"headerlink\" title=\"2. Subscriber\"></a><font size=6 color=#4169E1>2. Subscriber</font></h4><p><font size=4><strong>2.1 Concept of Subscriber</strong></font></p>\n<p>Subscriber is a protocol that declares types that can receive input from Publisher.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">protocol</span> <span class=\"title class_\">Subscriber</span>&lt;<span class=\"title class_\">Input</span>, <span class=\"title class_\">Failure</span>&gt; : <span class=\"title class_\">CustomCombineIdentifierConvertible</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">associatedtype</span> <span class=\"type\">Input</span></span><br><span class=\"line\">    <span class=\"keyword\">associatedtype</span> <span class=\"type\">Failure</span> : <span class=\"type\">Error</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">receive</span>(<span class=\"params\">subscription</span>: <span class=\"type\">Subscription</span>)</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">receive</span>(<span class=\"keyword\">_</span> <span class=\"params\">input</span>: <span class=\"keyword\">Self</span>.<span class=\"type\">Input</span>) -&gt; <span class=\"type\">Subscribers</span>.<span class=\"type\">Demand</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">receive</span>(<span class=\"params\">completion</span>: <span class=\"type\">Subscribers</span>.<span class=\"type\">Completion</span>&lt;<span class=\"keyword\">Self</span>.<span class=\"type\">Failure</span>&gt;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Subscriber instances receive a stream of elements from the publisher, as well as lifecycle events that describe changes to their relationships. It also has two generic parameters: Input and Failure, whose types must match the Output and Failure of their corresponding publishers. It also has three functions for interaction between Subscriber and Publisher.</p>\n<p>You connect a subscriber to a publisher by calling the publisher’s subscribe(<em>:) method. After the call, the publisher will call the subscriber’s receive(subscription:) method. The subscriber thus obtains a Subscription instance, which is used to request elements from the publisher and can also choose to cancel the subscription. After the subscriber makes the initial request, the publisher calls receive(</em>:) (possibly asynchronously) to send the newly published elements. If the publisher stops publishing, it calls receive(completion:) with a parameter of type Subscribers.Completion to indicate whether the publishing completed normally or with an error.</p>\n<p>Combine provides the following subscribers as operators of the Publisher type:</p>\n<ul>\n<li><p>sink(receiveCompletion:receiveValue:) executes an arbitrary closure when a completion signal is received and each time a new element is received.</p>\n</li>\n<li><p>assign(to:on:) writes each newly received value to the property identified by the key path on the specified instance.</p>\n</li>\n</ul>\n<p><font size=4><strong>2.2 Sample Code</strong></font></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Define a publisher, here use Just to create a publisher that publishes a single value</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> publisher <span class=\"operator\">=</span> <span class=\"type\">Just</span>(<span class=\"string\">&quot;Hello, Combine!&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Use the sink operator to create a Subscriber and handle the received values and completion events</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> subscriber <span class=\"operator\">=</span> <span class=\"type\">Subscribers</span>.<span class=\"type\">Sink</span>&lt;<span class=\"type\">String</span>, <span class=\"type\">Never</span>&gt;(</span><br><span class=\"line\">     receiveCompletion: &#123; completion <span class=\"keyword\">in</span></span><br><span class=\"line\">         <span class=\"keyword\">switch</span> completion &#123;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> .finished:</span><br><span class=\"line\">             <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Subscription completed.&quot;</span>)</span><br><span class=\"line\">         <span class=\"keyword\">case</span> .failure(<span class=\"keyword\">let</span> error):</span><br><span class=\"line\">             <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Subscription error: <span class=\"subst\">\\(error)</span>&quot;</span>)</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     receiveValue: &#123; value <span class=\"keyword\">in</span></span><br><span class=\"line\">         <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Received value: <span class=\"subst\">\\(value)</span>&quot;</span>)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Connect Subscriber to publisher</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> subscription <span class=\"operator\">=</span> publisher.subscribe(subscriber)</span><br><span class=\"line\"><span class=\"comment\">// unsubscribe</span></span><br><span class=\"line\">subscription.cancel()</span><br></pre></td></tr></table></figure>\n\n<p>In the above example, we first create a publisher, which publishes a string value. We then use Subscribers.Sink to create a Subscriber and specify a closure to receive the completion event and value. Finally, we connect the subscriber to the publisher via the subscribe method and unsubscribe after subscribing.</p>\n<p><font size=4><strong>2.3 Subscribers</strong></font></p>\n<p>Subscriber also has a Subscribers namespace, which contains various publisher-related types and operators and is used to organize and manage publisher-related functions. as follows:</p>\n<ul>\n<li><p>Subscribers.Sink: Used to execute closures to handle values and completion events sent by publishers. It is usually used to perform custom operations, such as writing values to properties or performing some logic.</p>\n</li>\n<li><p>Subscribers.Assign: used to assign the value sent by the publisher to the specified attribute. It is typically used for binding with interface elements to associate Combine data flows with user interface updates.</p>\n</li>\n<li><p>Subscribers.Completion: is an enumeration type that represents the completion status of subscriptions. It has two possible values: .finished indicates that the subscription is completed, and .failure(error) indicates that an error occurred in the subscription.</p>\n</li>\n<li><p>Subscribers.Demand: Indicates the number of elements required by subscribers.</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 5 minutes to finish reading this article.</em></font></p>\n<p>Next, I will record the learning process of Combine through a series of articles.</p>\n<h4 id=\"1-Publisher\"><a href=\"#1-Publisher\" class=\"headerlink\" title=\"1. Publisher\"></a><font size=5 color=#4169E1>1. Publisher</font></h4><p><font size=4><strong>1.1 Concept of Publisher</strong></font><br>Publisher is used to declare a protocol type that can transmit a series of values over time. Its source code is as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">protocol</span> <span class=\"title class_\">Publisher</span>&lt;<span class=\"title class_\">Output</span>, <span class=\"title class_\">Failure</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">associatedtype</span> <span class=\"type\">Output</span></span><br><span class=\"line\">    <span class=\"keyword\">associatedtype</span> <span class=\"type\">Failure</span> : <span class=\"type\">Error</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">receive</span>&lt;<span class=\"type\">S</span>&gt;(<span class=\"params\">subscriber</span>: <span class=\"type\">S</span>) <span class=\"keyword\">where</span> <span class=\"type\">S</span> : <span class=\"type\">Subscriber</span>, <span class=\"keyword\">Self</span>.<span class=\"type\">Failure</span> <span class=\"operator\">==</span> <span class=\"type\">S</span>.<span class=\"type\">Failure</span>, <span class=\"keyword\">Self</span>.<span class=\"type\">Output</span> <span class=\"operator\">==</span> <span class=\"type\">S</span>.<span class=\"type\">Input</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>It has two generic parameters: Output represents the output data, and Failure represents failure.</p>\n<p>It also has a receive function that accepts an object of Subscriber protocol type, and the Subscriber’s Input and Failure associated types must match the Input and Failure types declared by the Publisher.</p>\n<p>Publisher accepts a subscriber by implementing the receive(subscriber:) method. A Publisher can pass elements to one or more Subscriber instances.</p>\n<p><font size=4><strong>1.2 Sample Code</strong></font></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> publisher <span class=\"operator\">=</span> <span class=\"type\">NotificationCenter</span>.<span class=\"type\">Publisher</span>(center: .default, name: .titleData)</span><br><span class=\"line\">    .compactMap &#123; notification -&gt; <span class=\"type\">String</span>? <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (notification.object <span class=\"keyword\">as?</span> <span class=\"type\">Item</span>)<span class=\"operator\">?</span>.title</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> subscriber1 <span class=\"operator\">=</span> <span class=\"type\">Subscribers</span>.<span class=\"type\">Assign</span>(object: <span class=\"keyword\">self</span>, keyPath: \\.titleText1)</span><br><span class=\"line\"><span class=\"keyword\">let</span> subscriber2 <span class=\"operator\">=</span> <span class=\"type\">Subscribers</span>.<span class=\"type\">Assign</span>(object: <span class=\"keyword\">self</span>, keyPath: \\.titleText2)</span><br><span class=\"line\"></span><br><span class=\"line\">publisher.receive(subscriber: subscriber1)</span><br><span class=\"line\">publisher.receive(subscriber: subscriber2)</span><br></pre></td></tr></table></figure>\n\n<p><font size=4><strong>1.3 Publishers</strong></font></p>\n<p>Apple uses enum to define a Publishers namespace, as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Publishers</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">Sequence</span> &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">Catch</span> &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">ReceiveOn</span> &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"operator\">......</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>Note: This enumeration is not an enumeration type, but a namespace. </p>\n<p>Used to contain various publisher-related types and operators, used to organize and manage publisher-related functions. For example:</p>\n<ul>\n<li><p>Publishers.Sequence: used to convert arrays to Publishers.</p>\n</li>\n<li><p>Publishers.Catch: used to handle errors and return an alternate Publisher.</p>\n</li>\n<li><p>Publishers.CombineLatest: used to merge the latest values of multiple Publishers.</p>\n</li>\n<li><p>Publishers.ReceiveOn: used to specify the dispatch queue for receiving events.</p>\n</li>\n</ul>\n<p>The following is a sample code for using Publishers.Sequence</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> numbers <span class=\"operator\">=</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> publisher <span class=\"operator\">=</span> <span class=\"type\">Publishers</span>.<span class=\"type\">Sequence</span>&lt;[<span class=\"type\">Int</span>], <span class=\"type\">Error</span>&gt;(sequence: numbers)</span><br><span class=\"line\"><span class=\"keyword\">let</span> subscription <span class=\"operator\">=</span> publisher</span><br><span class=\"line\">     .sink(receiveCompletion: &#123; completion <span class=\"keyword\">in</span></span><br><span class=\"line\">         <span class=\"keyword\">switch</span> completion &#123;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> .finished:</span><br><span class=\"line\">             <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Data flow completed.&quot;</span>)</span><br><span class=\"line\">         <span class=\"keyword\">case</span> .failure(<span class=\"keyword\">let</span> error):</span><br><span class=\"line\">             <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Data flow error: <span class=\"subst\">\\(error)</span>&quot;</span>)</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;, receiveValue: &#123; value <span class=\"keyword\">in</span></span><br><span class=\"line\">         <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Received value: <span class=\"subst\">\\(value)</span>&quot;</span>)</span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\">subscription.cancel()</span><br></pre></td></tr></table></figure>\n\n<p>The Combine framework provides a large number of this type,<br>See here: <a href=\"https://developer.apple.com/documentation/combine/publishers\">https://developer.apple.com/documentation/combine/publishers</a>.</p>\n<p><font size=4><strong>1.4 Other Publisher</strong></font></p>\n<p>Of course, we can customize our own CustomPublisher by extending the system Publisher protocol. At the same time, the Combine framework also provides us with many extended Publishers. We can use them first. Here are a few:</p>\n<p><font size=3><strong>1.4.1 Subject</strong></font></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protocol</span> <span class=\"title class_\">Subject</span>&lt;<span class=\"title class_\">Output</span>, <span class=\"title class_\">Failure</span>&gt; : <span class=\"title class_\">AnyObject</span>, <span class=\"title class_\">Publisher</span></span><br></pre></td></tr></table></figure>\n<p>Subject is a Publisher with publish and subscribe capabilities. Common Subject types include:</p>\n<ul>\n<li><p>PassthroughSubject: New values can be published to all subscribers.</p>\n</li>\n<li><p>CurrentValueSubject: Can hold and publish the current value, as well as send new values to subscribers.</p>\n</li>\n</ul>\n<p><font size=3><strong>1.4.2 ConnectablePublisher</strong></font></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protocol</span> <span class=\"title class_\">ConnectablePublisher</span>&lt;<span class=\"title class_\">Output</span>, <span class=\"title class_\">Failure</span>&gt; : <span class=\"title class_\">Publisher</span></span><br></pre></td></tr></table></figure>\n<p>It represents a connectable publisher, which requires a connect method that allows manual connection and disconnection of publishers.</p>\n<h4 id=\"2-Subscriber\"><a href=\"#2-Subscriber\" class=\"headerlink\" title=\"2. Subscriber\"></a><font size=6 color=#4169E1>2. Subscriber</font></h4><p><font size=4><strong>2.1 Concept of Subscriber</strong></font></p>\n<p>Subscriber is a protocol that declares types that can receive input from Publisher.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">protocol</span> <span class=\"title class_\">Subscriber</span>&lt;<span class=\"title class_\">Input</span>, <span class=\"title class_\">Failure</span>&gt; : <span class=\"title class_\">CustomCombineIdentifierConvertible</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">associatedtype</span> <span class=\"type\">Input</span></span><br><span class=\"line\">    <span class=\"keyword\">associatedtype</span> <span class=\"type\">Failure</span> : <span class=\"type\">Error</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">receive</span>(<span class=\"params\">subscription</span>: <span class=\"type\">Subscription</span>)</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">receive</span>(<span class=\"keyword\">_</span> <span class=\"params\">input</span>: <span class=\"keyword\">Self</span>.<span class=\"type\">Input</span>) -&gt; <span class=\"type\">Subscribers</span>.<span class=\"type\">Demand</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">receive</span>(<span class=\"params\">completion</span>: <span class=\"type\">Subscribers</span>.<span class=\"type\">Completion</span>&lt;<span class=\"keyword\">Self</span>.<span class=\"type\">Failure</span>&gt;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Subscriber instances receive a stream of elements from the publisher, as well as lifecycle events that describe changes to their relationships. It also has two generic parameters: Input and Failure, whose types must match the Output and Failure of their corresponding publishers. It also has three functions for interaction between Subscriber and Publisher.</p>\n<p>You connect a subscriber to a publisher by calling the publisher’s subscribe(<em>:) method. After the call, the publisher will call the subscriber’s receive(subscription:) method. The subscriber thus obtains a Subscription instance, which is used to request elements from the publisher and can also choose to cancel the subscription. After the subscriber makes the initial request, the publisher calls receive(</em>:) (possibly asynchronously) to send the newly published elements. If the publisher stops publishing, it calls receive(completion:) with a parameter of type Subscribers.Completion to indicate whether the publishing completed normally or with an error.</p>\n<p>Combine provides the following subscribers as operators of the Publisher type:</p>\n<ul>\n<li><p>sink(receiveCompletion:receiveValue:) executes an arbitrary closure when a completion signal is received and each time a new element is received.</p>\n</li>\n<li><p>assign(to:on:) writes each newly received value to the property identified by the key path on the specified instance.</p>\n</li>\n</ul>\n<p><font size=4><strong>2.2 Sample Code</strong></font></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Define a publisher, here use Just to create a publisher that publishes a single value</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> publisher <span class=\"operator\">=</span> <span class=\"type\">Just</span>(<span class=\"string\">&quot;Hello, Combine!&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Use the sink operator to create a Subscriber and handle the received values and completion events</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> subscriber <span class=\"operator\">=</span> <span class=\"type\">Subscribers</span>.<span class=\"type\">Sink</span>&lt;<span class=\"type\">String</span>, <span class=\"type\">Never</span>&gt;(</span><br><span class=\"line\">     receiveCompletion: &#123; completion <span class=\"keyword\">in</span></span><br><span class=\"line\">         <span class=\"keyword\">switch</span> completion &#123;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> .finished:</span><br><span class=\"line\">             <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Subscription completed.&quot;</span>)</span><br><span class=\"line\">         <span class=\"keyword\">case</span> .failure(<span class=\"keyword\">let</span> error):</span><br><span class=\"line\">             <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Subscription error: <span class=\"subst\">\\(error)</span>&quot;</span>)</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     receiveValue: &#123; value <span class=\"keyword\">in</span></span><br><span class=\"line\">         <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Received value: <span class=\"subst\">\\(value)</span>&quot;</span>)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Connect Subscriber to publisher</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> subscription <span class=\"operator\">=</span> publisher.subscribe(subscriber)</span><br><span class=\"line\"><span class=\"comment\">// unsubscribe</span></span><br><span class=\"line\">subscription.cancel()</span><br></pre></td></tr></table></figure>\n\n<p>In the above example, we first create a publisher, which publishes a string value. We then use Subscribers.Sink to create a Subscriber and specify a closure to receive the completion event and value. Finally, we connect the subscriber to the publisher via the subscribe method and unsubscribe after subscribing.</p>\n<p><font size=4><strong>2.3 Subscribers</strong></font></p>\n<p>Subscriber also has a Subscribers namespace, which contains various publisher-related types and operators and is used to organize and manage publisher-related functions. as follows:</p>\n<ul>\n<li><p>Subscribers.Sink: Used to execute closures to handle values and completion events sent by publishers. It is usually used to perform custom operations, such as writing values to properties or performing some logic.</p>\n</li>\n<li><p>Subscribers.Assign: used to assign the value sent by the publisher to the specified attribute. It is typically used for binding with interface elements to associate Combine data flows with user interface updates.</p>\n</li>\n<li><p>Subscribers.Completion: is an enumeration type that represents the completion status of subscriptions. It has two possible values: .finished indicates that the subscription is completed, and .failure(error) indicates that an error occurred in the subscription.</p>\n</li>\n<li><p>Subscribers.Demand: Indicates the number of elements required by subscribers.</p>\n</li>\n</ul>\n"},{"title":"03. Combine (3) ———— Common types (2)","date":"2023-10-20T21:00:00.000Z","_content":"\n<font color=gray size=2>*It will take about 10 minutes to finish reading this article.*</font>\n\n#### <font size=5 color=#4169E1>Overview</font> \n\nContinuing from the previous article, we will continue to introduce some common types in the Combine framework.\n\n#### <font size=5 color=#4169E1>11. AnySubscriber</font> \n\nSubscriber type erasure (Type Erasure) version. Used to encapsulate subscribers and allow you to erase the specific type of Subscriber, thereby increasing the flexibility of the code. Normally, you don't need to create an AnySubscriber object directly as it is usually used inside the Combine operator and the framework.\n\nAn AnySubscriber object can be created by passing a specific subscriber to AnySubscriber's initialization method. This will encapsulate the original subscriber and do type erasure.\n\n```Swift\n\nlet specificSubscriber = MySpecificSubscriber<Int, Error>()\nlet anySubscriber = AnySubscriber(specificSubscriber)\n\n```\n\nAnySubscriber can be used to subscribe to Publisher like a normal subscriber, thereby receiving values and completion status in the data stream. You can pass AnySubscriber to operators such as sink and assign.\n\n\n#### <font size=5 color=#4169E1>12. Subject</font> \n\nSubject is a special kind of Publisher and Subscriber. It can be used to create and manage data flows, allowing you to post values manually or send external values into the data flow. Subject acts as a relay for data in Combine, allowing you to add, update, and distribute values in the data flow. It has 2 main types of Subject, each type has a different purpose.\n\n**1. PassthroughSubject:**\n\nPassthroughSubject is the most common Subject type, which passes the received value directly to its subscribers. It does not cache or replay values, it only delivers the current value to the subscriber.\n\n```Swift\n//Create PassthroughSubject, specify input and error type\nlet subject = PassthroughSubject<Int, Never>()\n\n// Subscribe to the Subject and process the received value\nlet cancelable = subject\n     .sink(receiveValue: { value in\n         print(\"Received value: \\(value)\")\n     })\n\n//Publish value to Subject\nsubject.send(1)\nsubject.send(2)\nsubject.send(3)\n\n// unsubscribe\ncancelable.cancel()\n```\n\n**2. CurrentValueSubject:**\n\nCurrentValueSubject is similar to PassthroughSubject, but it has an initial value and sends the current value to new subscribers when subscribing. It can be used to represent an observable object with current state.\n\n```Swift\nimport Combine\n\n// Create a CurrentValueSubject with an initial value\nlet subject = CurrentValueSubject<Int, Never>(0)\n\n// Subscribe to the Subject and process the received value\nlet cancelable = subject\n     .sink(receiveValue: { value in\n         print(\"Received value: \\(value)\")\n     })\n\n//Publish value to Subject\nsubject.send(1)\nsubject.send(2)\nsubject.send(3)\n\n// New subscribers will receive the initial value immediately\nlet newSubscriber = subject\n     .sink(receiveValue: { value in\n         print(\"New subscriber received value: \\(value)\")\n     })\n\n// unsubscribe\ncancelable.cancel()\nnewSubscriber.cancel()\n```\n\nThe result is:\n\n```Swift\nReceived value: 0\nReceived value: 1\nReceived value: 2\nReceived value: 3\nNew subscriber received value: 3\n```\n\n*** Note: ***\nThe @Published property wrapper is actually a property wrapper based on CurrentValueSubject, which enables changes to properties to be automatically published to subscribers.\n\n#### <font size=5 color=#4169E1>13. Scheduler</font> \n\nScheduler is a protocol that defines when and how to execute a closure. It is a very important concept that is used to manage and control the execution of events in time. Scheduler is an abstract type used for scheduling tasks (usually asynchronous tasks), which defines when the task should be executed and on which thread or queue it should be executed. In Combine, Scheduler is usually used for operations such as operators, delays, timers, and subscriptions to ensure the order and timing of events.\n\n```Swift\nprotocol Scheduler<SchedulerTimeType>\n```\nSample code:\n\n```Swift\nimport Combine\nimportFoundation\n\n// Create a scheduler for the background queue\nlet scheduler = DispatchQueue.global(qos: .background)\n\n//Use the scheduler to execute asynchronous tasks\nlet cancelable = scheduler.schedule {\n     print(\"Task executed on background queue.\")\n}\n\n// Cancel task\ncancelable.cancel()\n\n```\n\nCombine provides multiple types related to the Scheduler type, each type has different behaviors and uses. Here are some commonly used types:\n\n**1. ImmediateScheduler**\n\nA Scheduler type. Not introducing any latency or asynchronicity, it executes the task immediately on the current thread. This is useful for performing synchronous tasks or simulating immediate execution when testing.\n\n```Swift\nimport Combine\n\n// Create an ImmediateScheduler scheduler\nlet scheduler = ImmediateScheduler.shared\n\n//Use the scheduler to execute tasks\nlet cancelable = scheduler.schedule {\n     print(\"Task executed immediately.\")\n}\n\n//The task will be executed immediately without delay\n\n// Cancel task\ncancelable.cancel()\n```\n\n**2. SchedulerTimeIntervalConvertible**\n\nSchedulerTimeIntervalConvertible is a protocol. It defines a type that converts time intervals (time units) into specific time units for use in the Combine scheduler.\nIn Combine, time units are usually expressed as seconds (TimeInterval), but different schedulers may use different time units, such as milliseconds or microseconds. Therefore, SchedulerTimeIntervalConvertible provides a general method for converting time units to those appropriate for a specific scheduler.\nThe protocol defines the following methods:\n\n```Swift\nprotocol SchedulerTimeIntervalConvertible {\n    static func seconds(_ s: Int) -> Self\n    static func seconds(_ s: Double) -> Self\n    static func milliseconds(_ ms: Int) -> Self\n    static func microseconds(_ us: Int) -> Self\n    static func nanoseconds(_ ns: Int) -> Self\n}\n```\n\nThese methods allow you to convert time units (seconds, milliseconds, microseconds, nanoseconds) to time units suitable for the scheduler and create a type that implements the SchedulerTimeIntervalConvertible protocol. This is typically used in the context of a custom scheduler to ensure time unit consistency.\n\nHere is an example that demonstrates how to use the SchedulerTimeIntervalConvertible protocol to create a custom time unit type:\n\n```Swift\nimport Combine\n\n// Customize time unit type and implement SchedulerTimeIntervalConvertible protocol\nstruct MyTimeUnit: SchedulerTimeIntervalConvertible {\n     let value: Int\n    \n     static func seconds(_ s: Int) -> MyTimeUnit {\n         return MyTimeUnit(value: s)\n     }\n    \n     static func seconds(_ s: Double) -> MyTimeUnit {\n         return MyTimeUnit(value: Int(s))\n     }\n    \n     static func milliseconds(_ ms: Int) -> MyTimeUnit {\n         return MyTimeUnit(value: ms)\n     }\n    \n     static func microseconds(_ us: Int) -> MyTimeUnit {\n         return MyTimeUnit(value: us)\n     }\n    \n     static func nanoseconds(_ ns: Int) -> MyTimeUnit {\n         return MyTimeUnit(value: ns)\n     }\n}\n\n// Use custom time unit type\nlet myTimeUnit = MyTimeUnit.seconds(2)\nprint(myTimeUnit.value) // Output: 2\n```\n\n\n#### <font size=5 color=#4169E1>14. ObservableObject</font> \n\nObservableObject is a protocol in the SwiftUI framework built on Combine. It is used to create observable objects and is usually used to build responsive interfaces. It is one of the core concepts of data-driven interfaces in SwiftUI.\n\n```Swift\nimport SwiftUI\nimport Combine\n\n//Create a class that conforms to the ObservableObject protocol\nclass MyViewModel: ObservableObject {\n     // Mark observable properties using the @Published property wrapper\n     @Published var name: String = \"John\"\n     @Published var age: Int = 30\n}\n\nstruct ContentView: View {\n     // Bind the ViewModel to the view using the @ObservedObject property wrapper\n     @ObservedObject var viewModel = MyViewModel()\n    \n     var body: some View {\n         VStack {\n             Text(\"Name: \\(viewModel.name)\")\n             Text(\"Age: \\(viewModel.age)\")\n             Button(\"Change Name\") {\n                 // Modify the properties in ViewModel and the interface will automatically update\n                 viewModel.name = \"Alice\"\n             }\n         }\n     }\n}\n```\n\nIn the above example, we have created a MyViewModel class that follows the ObservableObject protocol and marked two observable properties using the @Published property wrapper. Then, in the view ContentView, we use the @ObservedObject property wrapper to bind the viewModel to the view, making it an observable object. When properties in the viewModel are modified on button click, the view automatically updates to reflect the changes.\n\n#### <font size=5 color=#4169E1>15. AsyncPublisher/AsyncThrowingPublisher</font> \n\nAsyncPublisher/AsyncThrowingPublisher It is a Publisher that exposes its elements in the form of (throwing) asynchronous sequences. It is defined as follows:\n\n```Swift\nstruct AsyncPublisher<P> where P : Publisher, P.Failure == Never\n```\n\nThe sample code is as follows:\n\n```Swift\nimport Combine\n\n// Create a simple publisher that will never fail (Failure == Never)\nlet simplePublisher = Just(1)\n\n// Use AsyncPublisher to wrap the publisher to make it an asynchronous sequence\nlet asyncSequence = simplePublisher.values\n\n// Use for-await-in syntax to traverse the elements of an asynchronous sequence\nasync {\n     do {\n         for try await element in asyncSequence {\n             print(\"Received element: \\(element)\")\n         }\n     } catch {\n         print(\"Error: \\(error)\")\n     }\n}\n```\n\n#### <font size=5 color=#4169E1>16. CustomCombineIdentifierConvertible</font>\n\nIt is a protocol in the Combine framework that is used to help uniquely identify publisher chains. This protocol is typically used when creating custom Subscriber or Subscription types so that development tools can uniquely identify these publisher chains within your application.\n\nIf you create a custom subscription or subscriber type, you need to implement this protocol so that development tools can uniquely identify the publisher chain in your application. If your type is a class, Combine provides you with an implementation of combineIdentifier. If your type is a struct, set the identifier as follows:\n\n```Swift\nlet combineIdentifier = CombineIdentifier()\n```\nWhere CombineIdentifier is the unique identifier used to identify the publisher's information flow. Let's look at a sample code:\n\n```Swift\nimport Combine\n\n// Custom subscriber type, implement CustomCombineIdentifierConvertible protocol\nclass MySubscriber<Input, Failure: Error>: Subscriber, CustomCombineIdentifierConvertible {\n     typealias ReceiveValueClosure = (Input) -> Void\n     typealias CompletionClosure = (Subscribers.Completion<Failure>) -> Void\n    \n     private let receiveValue: ReceiveValueClosure\n     private let receiveCompletion: CompletionClosure\n    \n     var combineIdentifier: CombineIdentifier // Used to uniquely identify subscriptions\n    \n     init(receiveValue: @escaping ReceiveValueClosure, receiveCompletion: @escaping CompletionClosure) {\n         self.receiveValue = receiveValue\n         self.receiveCompletion = receiveCompletion\n         self.combineIdentifier = CombineIdentifier()\n     }\n    \n     func receive(subscription: Subscription) {\n         subscription.request(.unlimited) // Request an unlimited number of elements\n     }\n    \n     func receive(_ input: Input) -> Subscribers.Demand {\n         receiveValue(input)\n         return .unlimited\n     }\n    \n     func receive(completion: Subscribers.Completion<Failure>) {\n         receiveCompletion(completion)\n     }\n}\n\n//Create a publisher\nlet publisher = Just(42)\n\n//Create a custom subscriber instance\nlet subscriber = MySubscriber<Int, Never>(\n     receiveValue: { value in\n         print(\"Received value: \\(value)\")\n     },\n     receiveCompletion: { completion in\n         switch completion {\n         case .finished:\n             print(\"Subscription completed successfully.\")\n         case .failure(let error):\n             print(\"Subscription failed with error: \\(error)\")\n         }\n     }\n)\n\n// Subscribe to the publisher\npublisher.subscribe(subscriber)\n```\n#### <font size=5 color=#4169E1>17. The Protocol of Subscription</font>\n\nSubscription is a protocol that represents the subscription relationship between Subscriber and Publisher. Specifically, Subscription describes how to manage subscriptions, including operations such as canceling subscriptions and requesting elements.\n\n```Swift\npublic protocol Subscription: Cancellable, CustomCombineIdentifierConvertible {\n    func request(_ demand: Subscribers.Demand)\n}\n```\n\nrequest(_:) method: By calling the request(_:) method, a subscriber can request to receive elements from the publisher. The request(_:) method accepts a parameter demand, which is a Subscribers.Demand enumeration value, indicating how many elements the subscriber wants to receive from the publisher. Publishers should send elements based on subscriber demand.\n\nThe Subscription protocol is a very important part of Combine. It is responsible for managing the life cycle of subscriptions and the delivery of elements. Subscribers can use the request(_:) method to control the rate at which elements are received, while the cancel() method is used to cancel a subscription when it is no longer needed.\n\nIn Combine, there is usually no need to manually implement the Subscription protocol because Combine provides many built-in operators and types to handle subscriptions. However, if you need to create a custom subscription, you may need to implement the Subscription protocol to define the behavior of the subscription.\n\nBelow is a simple sample code that demonstrates how to create a custom subscription that conforms to the Subscription protocol and use it to manage the subscription's lifecycle and request elements.\n\n```Swift\nimport Combine\n\n// Custom subscription type, consistent with Subscription protocol\nclass MySubscription<Input, Failure: Error>: Subscription {\n     private var subscriber: AnySubscriber<Input, Failure>?\n    \n     init<S>(_ subscriber: S) where S : Subscriber, S.Input == Input, S.Failure == Failure {\n         self.subscriber = AnySubscriber(subscriber)\n     }\n    \n     func request(_ demand: Subscribers.Demand) {\n         // Simulate sending elements to subscribers\n         for i in 1...demand.max {\n             _ = subscriber?.receive(i as! Input)\n         }\n     }\n    \n     func cancel() {\n         // unsubscribe\n         subscriber = nil\n     }\n}\n\n//Create a custom publisher\nstruct MyPublisher: Publisher {\n     typealias Output = Int\n     typealias Failure = Never\n    \n     func receive<S>(subscriber: S) where S : Subscriber, Failure == S.Failure, Output == S.Input {\n         // Create a custom subscription and pass it to the subscriber\n         let subscription = MySubscription(subscriber)\n         subscriber.receive(subscription: subscription)\n     }\n}\n\n//Create a custom subscriber\nclass MySubscriber: Subscriber {\n     typealias Input = Int\n     typealias Failure = Never\n    \n     func receive(subscription: Subscription) {\n         //Operation at the beginning of subscription\n         print(\"Subscription started.\")\n         subscription.request(.max(5)) // Request up to 5 elements\n     }\n    \n     func receive(_ input: Input) -> Subscribers.Demand {\n         // Process the received elements\n         print(\"Received element: \\(input)\")\n         return .none\n     }\n    \n     func receive(completion: Subscribers.Completion<Failure>) {\n         //Operation when subscription is completed\n         print(\"Subscription completed.\")\n     }\n}\n\n//Create a custom publisher instance\nlet publisher = MyPublisher()\n\n//Create a custom subscriber instance\nlet subscriber = MySubscriber()\n\n// Subscribe to the publisher\npublisher.subscribe(subscriber)\n```\n\n#### <font size=6 color=gray>*Reference*</font>\n[1] https://developer.apple.com/documentation/combine\n","source":"_posts/Reactive Programming/01. Combine/03. Combine (3).md","raw":"---\ntitle: 03. Combine (3) ———— Common types (2)\ndate: 2023-10-20 23:00:00\ncategories: \n- [Reactive Programming, 01. Combine]\ntags:\n- Combine\n---\n\n<font color=gray size=2>*It will take about 10 minutes to finish reading this article.*</font>\n\n#### <font size=5 color=#4169E1>Overview</font> \n\nContinuing from the previous article, we will continue to introduce some common types in the Combine framework.\n\n#### <font size=5 color=#4169E1>11. AnySubscriber</font> \n\nSubscriber type erasure (Type Erasure) version. Used to encapsulate subscribers and allow you to erase the specific type of Subscriber, thereby increasing the flexibility of the code. Normally, you don't need to create an AnySubscriber object directly as it is usually used inside the Combine operator and the framework.\n\nAn AnySubscriber object can be created by passing a specific subscriber to AnySubscriber's initialization method. This will encapsulate the original subscriber and do type erasure.\n\n```Swift\n\nlet specificSubscriber = MySpecificSubscriber<Int, Error>()\nlet anySubscriber = AnySubscriber(specificSubscriber)\n\n```\n\nAnySubscriber can be used to subscribe to Publisher like a normal subscriber, thereby receiving values and completion status in the data stream. You can pass AnySubscriber to operators such as sink and assign.\n\n\n#### <font size=5 color=#4169E1>12. Subject</font> \n\nSubject is a special kind of Publisher and Subscriber. It can be used to create and manage data flows, allowing you to post values manually or send external values into the data flow. Subject acts as a relay for data in Combine, allowing you to add, update, and distribute values in the data flow. It has 2 main types of Subject, each type has a different purpose.\n\n**1. PassthroughSubject:**\n\nPassthroughSubject is the most common Subject type, which passes the received value directly to its subscribers. It does not cache or replay values, it only delivers the current value to the subscriber.\n\n```Swift\n//Create PassthroughSubject, specify input and error type\nlet subject = PassthroughSubject<Int, Never>()\n\n// Subscribe to the Subject and process the received value\nlet cancelable = subject\n     .sink(receiveValue: { value in\n         print(\"Received value: \\(value)\")\n     })\n\n//Publish value to Subject\nsubject.send(1)\nsubject.send(2)\nsubject.send(3)\n\n// unsubscribe\ncancelable.cancel()\n```\n\n**2. CurrentValueSubject:**\n\nCurrentValueSubject is similar to PassthroughSubject, but it has an initial value and sends the current value to new subscribers when subscribing. It can be used to represent an observable object with current state.\n\n```Swift\nimport Combine\n\n// Create a CurrentValueSubject with an initial value\nlet subject = CurrentValueSubject<Int, Never>(0)\n\n// Subscribe to the Subject and process the received value\nlet cancelable = subject\n     .sink(receiveValue: { value in\n         print(\"Received value: \\(value)\")\n     })\n\n//Publish value to Subject\nsubject.send(1)\nsubject.send(2)\nsubject.send(3)\n\n// New subscribers will receive the initial value immediately\nlet newSubscriber = subject\n     .sink(receiveValue: { value in\n         print(\"New subscriber received value: \\(value)\")\n     })\n\n// unsubscribe\ncancelable.cancel()\nnewSubscriber.cancel()\n```\n\nThe result is:\n\n```Swift\nReceived value: 0\nReceived value: 1\nReceived value: 2\nReceived value: 3\nNew subscriber received value: 3\n```\n\n*** Note: ***\nThe @Published property wrapper is actually a property wrapper based on CurrentValueSubject, which enables changes to properties to be automatically published to subscribers.\n\n#### <font size=5 color=#4169E1>13. Scheduler</font> \n\nScheduler is a protocol that defines when and how to execute a closure. It is a very important concept that is used to manage and control the execution of events in time. Scheduler is an abstract type used for scheduling tasks (usually asynchronous tasks), which defines when the task should be executed and on which thread or queue it should be executed. In Combine, Scheduler is usually used for operations such as operators, delays, timers, and subscriptions to ensure the order and timing of events.\n\n```Swift\nprotocol Scheduler<SchedulerTimeType>\n```\nSample code:\n\n```Swift\nimport Combine\nimportFoundation\n\n// Create a scheduler for the background queue\nlet scheduler = DispatchQueue.global(qos: .background)\n\n//Use the scheduler to execute asynchronous tasks\nlet cancelable = scheduler.schedule {\n     print(\"Task executed on background queue.\")\n}\n\n// Cancel task\ncancelable.cancel()\n\n```\n\nCombine provides multiple types related to the Scheduler type, each type has different behaviors and uses. Here are some commonly used types:\n\n**1. ImmediateScheduler**\n\nA Scheduler type. Not introducing any latency or asynchronicity, it executes the task immediately on the current thread. This is useful for performing synchronous tasks or simulating immediate execution when testing.\n\n```Swift\nimport Combine\n\n// Create an ImmediateScheduler scheduler\nlet scheduler = ImmediateScheduler.shared\n\n//Use the scheduler to execute tasks\nlet cancelable = scheduler.schedule {\n     print(\"Task executed immediately.\")\n}\n\n//The task will be executed immediately without delay\n\n// Cancel task\ncancelable.cancel()\n```\n\n**2. SchedulerTimeIntervalConvertible**\n\nSchedulerTimeIntervalConvertible is a protocol. It defines a type that converts time intervals (time units) into specific time units for use in the Combine scheduler.\nIn Combine, time units are usually expressed as seconds (TimeInterval), but different schedulers may use different time units, such as milliseconds or microseconds. Therefore, SchedulerTimeIntervalConvertible provides a general method for converting time units to those appropriate for a specific scheduler.\nThe protocol defines the following methods:\n\n```Swift\nprotocol SchedulerTimeIntervalConvertible {\n    static func seconds(_ s: Int) -> Self\n    static func seconds(_ s: Double) -> Self\n    static func milliseconds(_ ms: Int) -> Self\n    static func microseconds(_ us: Int) -> Self\n    static func nanoseconds(_ ns: Int) -> Self\n}\n```\n\nThese methods allow you to convert time units (seconds, milliseconds, microseconds, nanoseconds) to time units suitable for the scheduler and create a type that implements the SchedulerTimeIntervalConvertible protocol. This is typically used in the context of a custom scheduler to ensure time unit consistency.\n\nHere is an example that demonstrates how to use the SchedulerTimeIntervalConvertible protocol to create a custom time unit type:\n\n```Swift\nimport Combine\n\n// Customize time unit type and implement SchedulerTimeIntervalConvertible protocol\nstruct MyTimeUnit: SchedulerTimeIntervalConvertible {\n     let value: Int\n    \n     static func seconds(_ s: Int) -> MyTimeUnit {\n         return MyTimeUnit(value: s)\n     }\n    \n     static func seconds(_ s: Double) -> MyTimeUnit {\n         return MyTimeUnit(value: Int(s))\n     }\n    \n     static func milliseconds(_ ms: Int) -> MyTimeUnit {\n         return MyTimeUnit(value: ms)\n     }\n    \n     static func microseconds(_ us: Int) -> MyTimeUnit {\n         return MyTimeUnit(value: us)\n     }\n    \n     static func nanoseconds(_ ns: Int) -> MyTimeUnit {\n         return MyTimeUnit(value: ns)\n     }\n}\n\n// Use custom time unit type\nlet myTimeUnit = MyTimeUnit.seconds(2)\nprint(myTimeUnit.value) // Output: 2\n```\n\n\n#### <font size=5 color=#4169E1>14. ObservableObject</font> \n\nObservableObject is a protocol in the SwiftUI framework built on Combine. It is used to create observable objects and is usually used to build responsive interfaces. It is one of the core concepts of data-driven interfaces in SwiftUI.\n\n```Swift\nimport SwiftUI\nimport Combine\n\n//Create a class that conforms to the ObservableObject protocol\nclass MyViewModel: ObservableObject {\n     // Mark observable properties using the @Published property wrapper\n     @Published var name: String = \"John\"\n     @Published var age: Int = 30\n}\n\nstruct ContentView: View {\n     // Bind the ViewModel to the view using the @ObservedObject property wrapper\n     @ObservedObject var viewModel = MyViewModel()\n    \n     var body: some View {\n         VStack {\n             Text(\"Name: \\(viewModel.name)\")\n             Text(\"Age: \\(viewModel.age)\")\n             Button(\"Change Name\") {\n                 // Modify the properties in ViewModel and the interface will automatically update\n                 viewModel.name = \"Alice\"\n             }\n         }\n     }\n}\n```\n\nIn the above example, we have created a MyViewModel class that follows the ObservableObject protocol and marked two observable properties using the @Published property wrapper. Then, in the view ContentView, we use the @ObservedObject property wrapper to bind the viewModel to the view, making it an observable object. When properties in the viewModel are modified on button click, the view automatically updates to reflect the changes.\n\n#### <font size=5 color=#4169E1>15. AsyncPublisher/AsyncThrowingPublisher</font> \n\nAsyncPublisher/AsyncThrowingPublisher It is a Publisher that exposes its elements in the form of (throwing) asynchronous sequences. It is defined as follows:\n\n```Swift\nstruct AsyncPublisher<P> where P : Publisher, P.Failure == Never\n```\n\nThe sample code is as follows:\n\n```Swift\nimport Combine\n\n// Create a simple publisher that will never fail (Failure == Never)\nlet simplePublisher = Just(1)\n\n// Use AsyncPublisher to wrap the publisher to make it an asynchronous sequence\nlet asyncSequence = simplePublisher.values\n\n// Use for-await-in syntax to traverse the elements of an asynchronous sequence\nasync {\n     do {\n         for try await element in asyncSequence {\n             print(\"Received element: \\(element)\")\n         }\n     } catch {\n         print(\"Error: \\(error)\")\n     }\n}\n```\n\n#### <font size=5 color=#4169E1>16. CustomCombineIdentifierConvertible</font>\n\nIt is a protocol in the Combine framework that is used to help uniquely identify publisher chains. This protocol is typically used when creating custom Subscriber or Subscription types so that development tools can uniquely identify these publisher chains within your application.\n\nIf you create a custom subscription or subscriber type, you need to implement this protocol so that development tools can uniquely identify the publisher chain in your application. If your type is a class, Combine provides you with an implementation of combineIdentifier. If your type is a struct, set the identifier as follows:\n\n```Swift\nlet combineIdentifier = CombineIdentifier()\n```\nWhere CombineIdentifier is the unique identifier used to identify the publisher's information flow. Let's look at a sample code:\n\n```Swift\nimport Combine\n\n// Custom subscriber type, implement CustomCombineIdentifierConvertible protocol\nclass MySubscriber<Input, Failure: Error>: Subscriber, CustomCombineIdentifierConvertible {\n     typealias ReceiveValueClosure = (Input) -> Void\n     typealias CompletionClosure = (Subscribers.Completion<Failure>) -> Void\n    \n     private let receiveValue: ReceiveValueClosure\n     private let receiveCompletion: CompletionClosure\n    \n     var combineIdentifier: CombineIdentifier // Used to uniquely identify subscriptions\n    \n     init(receiveValue: @escaping ReceiveValueClosure, receiveCompletion: @escaping CompletionClosure) {\n         self.receiveValue = receiveValue\n         self.receiveCompletion = receiveCompletion\n         self.combineIdentifier = CombineIdentifier()\n     }\n    \n     func receive(subscription: Subscription) {\n         subscription.request(.unlimited) // Request an unlimited number of elements\n     }\n    \n     func receive(_ input: Input) -> Subscribers.Demand {\n         receiveValue(input)\n         return .unlimited\n     }\n    \n     func receive(completion: Subscribers.Completion<Failure>) {\n         receiveCompletion(completion)\n     }\n}\n\n//Create a publisher\nlet publisher = Just(42)\n\n//Create a custom subscriber instance\nlet subscriber = MySubscriber<Int, Never>(\n     receiveValue: { value in\n         print(\"Received value: \\(value)\")\n     },\n     receiveCompletion: { completion in\n         switch completion {\n         case .finished:\n             print(\"Subscription completed successfully.\")\n         case .failure(let error):\n             print(\"Subscription failed with error: \\(error)\")\n         }\n     }\n)\n\n// Subscribe to the publisher\npublisher.subscribe(subscriber)\n```\n#### <font size=5 color=#4169E1>17. The Protocol of Subscription</font>\n\nSubscription is a protocol that represents the subscription relationship between Subscriber and Publisher. Specifically, Subscription describes how to manage subscriptions, including operations such as canceling subscriptions and requesting elements.\n\n```Swift\npublic protocol Subscription: Cancellable, CustomCombineIdentifierConvertible {\n    func request(_ demand: Subscribers.Demand)\n}\n```\n\nrequest(_:) method: By calling the request(_:) method, a subscriber can request to receive elements from the publisher. The request(_:) method accepts a parameter demand, which is a Subscribers.Demand enumeration value, indicating how many elements the subscriber wants to receive from the publisher. Publishers should send elements based on subscriber demand.\n\nThe Subscription protocol is a very important part of Combine. It is responsible for managing the life cycle of subscriptions and the delivery of elements. Subscribers can use the request(_:) method to control the rate at which elements are received, while the cancel() method is used to cancel a subscription when it is no longer needed.\n\nIn Combine, there is usually no need to manually implement the Subscription protocol because Combine provides many built-in operators and types to handle subscriptions. However, if you need to create a custom subscription, you may need to implement the Subscription protocol to define the behavior of the subscription.\n\nBelow is a simple sample code that demonstrates how to create a custom subscription that conforms to the Subscription protocol and use it to manage the subscription's lifecycle and request elements.\n\n```Swift\nimport Combine\n\n// Custom subscription type, consistent with Subscription protocol\nclass MySubscription<Input, Failure: Error>: Subscription {\n     private var subscriber: AnySubscriber<Input, Failure>?\n    \n     init<S>(_ subscriber: S) where S : Subscriber, S.Input == Input, S.Failure == Failure {\n         self.subscriber = AnySubscriber(subscriber)\n     }\n    \n     func request(_ demand: Subscribers.Demand) {\n         // Simulate sending elements to subscribers\n         for i in 1...demand.max {\n             _ = subscriber?.receive(i as! Input)\n         }\n     }\n    \n     func cancel() {\n         // unsubscribe\n         subscriber = nil\n     }\n}\n\n//Create a custom publisher\nstruct MyPublisher: Publisher {\n     typealias Output = Int\n     typealias Failure = Never\n    \n     func receive<S>(subscriber: S) where S : Subscriber, Failure == S.Failure, Output == S.Input {\n         // Create a custom subscription and pass it to the subscriber\n         let subscription = MySubscription(subscriber)\n         subscriber.receive(subscription: subscription)\n     }\n}\n\n//Create a custom subscriber\nclass MySubscriber: Subscriber {\n     typealias Input = Int\n     typealias Failure = Never\n    \n     func receive(subscription: Subscription) {\n         //Operation at the beginning of subscription\n         print(\"Subscription started.\")\n         subscription.request(.max(5)) // Request up to 5 elements\n     }\n    \n     func receive(_ input: Input) -> Subscribers.Demand {\n         // Process the received elements\n         print(\"Received element: \\(input)\")\n         return .none\n     }\n    \n     func receive(completion: Subscribers.Completion<Failure>) {\n         //Operation when subscription is completed\n         print(\"Subscription completed.\")\n     }\n}\n\n//Create a custom publisher instance\nlet publisher = MyPublisher()\n\n//Create a custom subscriber instance\nlet subscriber = MySubscriber()\n\n// Subscribe to the publisher\npublisher.subscribe(subscriber)\n```\n\n#### <font size=6 color=gray>*Reference*</font>\n[1] https://developer.apple.com/documentation/combine\n","slug":"Reactive Programming/01. Combine/03. Combine (3)","published":1,"updated":"2023-10-20T15:35:04.750Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr4s000zvu0m76dh0oor","content":"<p><font color=gray size=2><em>It will take about 10 minutes to finish reading this article.</em></font></p>\n<h4 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a><font size=5 color=#4169E1>Overview</font></h4><p>Continuing from the previous article, we will continue to introduce some common types in the Combine framework.</p>\n<h4 id=\"11-AnySubscriber\"><a href=\"#11-AnySubscriber\" class=\"headerlink\" title=\"11. AnySubscriber\"></a><font size=5 color=#4169E1>11. AnySubscriber</font></h4><p>Subscriber type erasure (Type Erasure) version. Used to encapsulate subscribers and allow you to erase the specific type of Subscriber, thereby increasing the flexibility of the code. Normally, you don’t need to create an AnySubscriber object directly as it is usually used inside the Combine operator and the framework.</p>\n<p>An AnySubscriber object can be created by passing a specific subscriber to AnySubscriber’s initialization method. This will encapsulate the original subscriber and do type erasure.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> specificSubscriber <span class=\"operator\">=</span> <span class=\"type\">MySpecificSubscriber</span>&lt;<span class=\"type\">Int</span>, <span class=\"type\">Error</span>&gt;()</span><br><span class=\"line\"><span class=\"keyword\">let</span> anySubscriber <span class=\"operator\">=</span> <span class=\"type\">AnySubscriber</span>(specificSubscriber)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>AnySubscriber can be used to subscribe to Publisher like a normal subscriber, thereby receiving values and completion status in the data stream. You can pass AnySubscriber to operators such as sink and assign.</p>\n<h4 id=\"12-Subject\"><a href=\"#12-Subject\" class=\"headerlink\" title=\"12. Subject\"></a><font size=5 color=#4169E1>12. Subject</font></h4><p>Subject is a special kind of Publisher and Subscriber. It can be used to create and manage data flows, allowing you to post values manually or send external values into the data flow. Subject acts as a relay for data in Combine, allowing you to add, update, and distribute values in the data flow. It has 2 main types of Subject, each type has a different purpose.</p>\n<p><strong>1. PassthroughSubject:</strong></p>\n<p>PassthroughSubject is the most common Subject type, which passes the received value directly to its subscribers. It does not cache or replay values, it only delivers the current value to the subscriber.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Create PassthroughSubject, specify input and error type</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> subject <span class=\"operator\">=</span> <span class=\"type\">PassthroughSubject</span>&lt;<span class=\"type\">Int</span>, <span class=\"type\">Never</span>&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Subscribe to the Subject and process the received value</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> cancelable <span class=\"operator\">=</span> subject</span><br><span class=\"line\">     .sink(receiveValue: &#123; value <span class=\"keyword\">in</span></span><br><span class=\"line\">         <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Received value: <span class=\"subst\">\\(value)</span>&quot;</span>)</span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Publish value to Subject</span></span><br><span class=\"line\">subject.send(<span class=\"number\">1</span>)</span><br><span class=\"line\">subject.send(<span class=\"number\">2</span>)</span><br><span class=\"line\">subject.send(<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// unsubscribe</span></span><br><span class=\"line\">cancelable.cancel()</span><br></pre></td></tr></table></figure>\n\n<p><strong>2. CurrentValueSubject:</strong></p>\n<p>CurrentValueSubject is similar to PassthroughSubject, but it has an initial value and sends the current value to new subscribers when subscribing. It can be used to represent an observable object with current state.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Combine</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Create a CurrentValueSubject with an initial value</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> subject <span class=\"operator\">=</span> <span class=\"type\">CurrentValueSubject</span>&lt;<span class=\"type\">Int</span>, <span class=\"type\">Never</span>&gt;(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Subscribe to the Subject and process the received value</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> cancelable <span class=\"operator\">=</span> subject</span><br><span class=\"line\">     .sink(receiveValue: &#123; value <span class=\"keyword\">in</span></span><br><span class=\"line\">         <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Received value: <span class=\"subst\">\\(value)</span>&quot;</span>)</span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Publish value to Subject</span></span><br><span class=\"line\">subject.send(<span class=\"number\">1</span>)</span><br><span class=\"line\">subject.send(<span class=\"number\">2</span>)</span><br><span class=\"line\">subject.send(<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// New subscribers will receive the initial value immediately</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> newSubscriber <span class=\"operator\">=</span> subject</span><br><span class=\"line\">     .sink(receiveValue: &#123; value <span class=\"keyword\">in</span></span><br><span class=\"line\">         <span class=\"built_in\">print</span>(<span class=\"string\">&quot;New subscriber received value: <span class=\"subst\">\\(value)</span>&quot;</span>)</span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// unsubscribe</span></span><br><span class=\"line\">cancelable.cancel()</span><br><span class=\"line\">newSubscriber.cancel()</span><br></pre></td></tr></table></figure>\n\n<p>The result is:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Received</span> value: <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"type\">Received</span> value: <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"type\">Received</span> value: <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"type\">Received</span> value: <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"type\">New</span> subscriber received value: <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<p>*** Note: ***<br>The @Published property wrapper is actually a property wrapper based on CurrentValueSubject, which enables changes to properties to be automatically published to subscribers.</p>\n<h4 id=\"13-Scheduler\"><a href=\"#13-Scheduler\" class=\"headerlink\" title=\"13. Scheduler\"></a><font size=5 color=#4169E1>13. Scheduler</font></h4><p>Scheduler is a protocol that defines when and how to execute a closure. It is a very important concept that is used to manage and control the execution of events in time. Scheduler is an abstract type used for scheduling tasks (usually asynchronous tasks), which defines when the task should be executed and on which thread or queue it should be executed. In Combine, Scheduler is usually used for operations such as operators, delays, timers, and subscriptions to ensure the order and timing of events.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protocol</span> <span class=\"title class_\">Scheduler</span>&lt;<span class=\"title class_\">SchedulerTimeType</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>Sample code:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Combine</span><br><span class=\"line\">importFoundation</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Create a scheduler for the background queue</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> scheduler <span class=\"operator\">=</span> <span class=\"type\">DispatchQueue</span>.global(qos: .background)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Use the scheduler to execute asynchronous tasks</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> cancelable <span class=\"operator\">=</span> scheduler.schedule &#123;</span><br><span class=\"line\">     <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Task executed on background queue.&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Cancel task</span></span><br><span class=\"line\">cancelable.cancel()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Combine provides multiple types related to the Scheduler type, each type has different behaviors and uses. Here are some commonly used types:</p>\n<p><strong>1. ImmediateScheduler</strong></p>\n<p>A Scheduler type. Not introducing any latency or asynchronicity, it executes the task immediately on the current thread. This is useful for performing synchronous tasks or simulating immediate execution when testing.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Combine</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Create an ImmediateScheduler scheduler</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> scheduler <span class=\"operator\">=</span> <span class=\"type\">ImmediateScheduler</span>.shared</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Use the scheduler to execute tasks</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> cancelable <span class=\"operator\">=</span> scheduler.schedule &#123;</span><br><span class=\"line\">     <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Task executed immediately.&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//The task will be executed immediately without delay</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Cancel task</span></span><br><span class=\"line\">cancelable.cancel()</span><br></pre></td></tr></table></figure>\n\n<p><strong>2. SchedulerTimeIntervalConvertible</strong></p>\n<p>SchedulerTimeIntervalConvertible is a protocol. It defines a type that converts time intervals (time units) into specific time units for use in the Combine scheduler.<br>In Combine, time units are usually expressed as seconds (TimeInterval), but different schedulers may use different time units, such as milliseconds or microseconds. Therefore, SchedulerTimeIntervalConvertible provides a general method for converting time units to those appropriate for a specific scheduler.<br>The protocol defines the following methods:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protocol</span> <span class=\"title class_\">SchedulerTimeIntervalConvertible</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">func</span> <span class=\"title function_\">seconds</span>(<span class=\"keyword\">_</span> <span class=\"params\">s</span>: <span class=\"type\">Int</span>) -&gt; <span class=\"keyword\">Self</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">func</span> <span class=\"title function_\">seconds</span>(<span class=\"keyword\">_</span> <span class=\"params\">s</span>: <span class=\"type\">Double</span>) -&gt; <span class=\"keyword\">Self</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">func</span> <span class=\"title function_\">milliseconds</span>(<span class=\"keyword\">_</span> <span class=\"params\">ms</span>: <span class=\"type\">Int</span>) -&gt; <span class=\"keyword\">Self</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">func</span> <span class=\"title function_\">microseconds</span>(<span class=\"keyword\">_</span> <span class=\"params\">us</span>: <span class=\"type\">Int</span>) -&gt; <span class=\"keyword\">Self</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">func</span> <span class=\"title function_\">nanoseconds</span>(<span class=\"keyword\">_</span> <span class=\"params\">ns</span>: <span class=\"type\">Int</span>) -&gt; <span class=\"keyword\">Self</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>These methods allow you to convert time units (seconds, milliseconds, microseconds, nanoseconds) to time units suitable for the scheduler and create a type that implements the SchedulerTimeIntervalConvertible protocol. This is typically used in the context of a custom scheduler to ensure time unit consistency.</p>\n<p>Here is an example that demonstrates how to use the SchedulerTimeIntervalConvertible protocol to create a custom time unit type:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Combine</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Customize time unit type and implement SchedulerTimeIntervalConvertible protocol</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">MyTimeUnit</span>: <span class=\"title class_\">SchedulerTimeIntervalConvertible</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">let</span> value: <span class=\"type\">Int</span></span><br><span class=\"line\">    </span><br><span class=\"line\">     <span class=\"keyword\">static</span> <span class=\"keyword\">func</span> <span class=\"title function_\">seconds</span>(<span class=\"keyword\">_</span> <span class=\"params\">s</span>: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">MyTimeUnit</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"type\">MyTimeUnit</span>(value: s)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">     <span class=\"keyword\">static</span> <span class=\"keyword\">func</span> <span class=\"title function_\">seconds</span>(<span class=\"keyword\">_</span> <span class=\"params\">s</span>: <span class=\"type\">Double</span>) -&gt; <span class=\"type\">MyTimeUnit</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"type\">MyTimeUnit</span>(value: <span class=\"type\">Int</span>(s))</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">     <span class=\"keyword\">static</span> <span class=\"keyword\">func</span> <span class=\"title function_\">milliseconds</span>(<span class=\"keyword\">_</span> <span class=\"params\">ms</span>: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">MyTimeUnit</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"type\">MyTimeUnit</span>(value: ms)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">     <span class=\"keyword\">static</span> <span class=\"keyword\">func</span> <span class=\"title function_\">microseconds</span>(<span class=\"keyword\">_</span> <span class=\"params\">us</span>: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">MyTimeUnit</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"type\">MyTimeUnit</span>(value: us)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">     <span class=\"keyword\">static</span> <span class=\"keyword\">func</span> <span class=\"title function_\">nanoseconds</span>(<span class=\"keyword\">_</span> <span class=\"params\">ns</span>: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">MyTimeUnit</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"type\">MyTimeUnit</span>(value: ns)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Use custom time unit type</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> myTimeUnit <span class=\"operator\">=</span> <span class=\"type\">MyTimeUnit</span>.seconds(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(myTimeUnit.value) <span class=\"comment\">// Output: 2</span></span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"14-ObservableObject\"><a href=\"#14-ObservableObject\" class=\"headerlink\" title=\"14. ObservableObject\"></a><font size=5 color=#4169E1>14. ObservableObject</font></h4><p>ObservableObject is a protocol in the SwiftUI framework built on Combine. It is used to create observable objects and is usually used to build responsive interfaces. It is one of the core concepts of data-driven interfaces in SwiftUI.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> SwiftUI</span><br><span class=\"line\"><span class=\"keyword\">import</span> Combine</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Create a class that conforms to the ObservableObject protocol</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyViewModel</span>: <span class=\"title class_\">ObservableObject</span> &#123;</span><br><span class=\"line\">     <span class=\"comment\">// Mark observable properties using the @Published property wrapper</span></span><br><span class=\"line\">     <span class=\"meta\">@Published</span> <span class=\"keyword\">var</span> name: <span class=\"type\">String</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;John&quot;</span></span><br><span class=\"line\">     <span class=\"meta\">@Published</span> <span class=\"keyword\">var</span> age: <span class=\"type\">Int</span> <span class=\"operator\">=</span> <span class=\"number\">30</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span>: <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">     <span class=\"comment\">// Bind the ViewModel to the view using the @ObservedObject property wrapper</span></span><br><span class=\"line\">     <span class=\"meta\">@ObservedObject</span> <span class=\"keyword\">var</span> viewModel <span class=\"operator\">=</span> <span class=\"type\">MyViewModel</span>()</span><br><span class=\"line\">    </span><br><span class=\"line\">     <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">         <span class=\"type\">VStack</span> &#123;</span><br><span class=\"line\">             <span class=\"type\">Text</span>(<span class=\"string\">&quot;Name: <span class=\"subst\">\\(viewModel.name)</span>&quot;</span>)</span><br><span class=\"line\">             <span class=\"type\">Text</span>(<span class=\"string\">&quot;Age: <span class=\"subst\">\\(viewModel.age)</span>&quot;</span>)</span><br><span class=\"line\">             <span class=\"type\">Button</span>(<span class=\"string\">&quot;Change Name&quot;</span>) &#123;</span><br><span class=\"line\">                 <span class=\"comment\">// Modify the properties in ViewModel and the interface will automatically update</span></span><br><span class=\"line\">                 viewModel.name <span class=\"operator\">=</span> <span class=\"string\">&quot;Alice&quot;</span></span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>In the above example, we have created a MyViewModel class that follows the ObservableObject protocol and marked two observable properties using the @Published property wrapper. Then, in the view ContentView, we use the @ObservedObject property wrapper to bind the viewModel to the view, making it an observable object. When properties in the viewModel are modified on button click, the view automatically updates to reflect the changes.</p>\n<h4 id=\"15-AsyncPublisher-AsyncThrowingPublisher\"><a href=\"#15-AsyncPublisher-AsyncThrowingPublisher\" class=\"headerlink\" title=\"15. AsyncPublisher&#x2F;AsyncThrowingPublisher\"></a><font size=5 color=#4169E1>15. AsyncPublisher&#x2F;AsyncThrowingPublisher</font></h4><p>AsyncPublisher&#x2F;AsyncThrowingPublisher It is a Publisher that exposes its elements in the form of (throwing) asynchronous sequences. It is defined as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">AsyncPublisher</span>&lt;<span class=\"title class_\">P</span>&gt; <span class=\"title class_\">where</span> <span class=\"title class_\">P</span> : <span class=\"title class_\">Publisher</span>, <span class=\"title class_\">P</span>.<span class=\"title class_\">Failure</span> == <span class=\"title class_\">Never</span></span><br></pre></td></tr></table></figure>\n\n<p>The sample code is as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Combine</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Create a simple publisher that will never fail (Failure == Never)</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> simplePublisher <span class=\"operator\">=</span> <span class=\"type\">Just</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Use AsyncPublisher to wrap the publisher to make it an asynchronous sequence</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> asyncSequence <span class=\"operator\">=</span> simplePublisher.values</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Use for-await-in syntax to traverse the elements of an asynchronous sequence</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">for</span> <span class=\"keyword\">try</span> <span class=\"keyword\">await</span> element <span class=\"keyword\">in</span> asyncSequence &#123;</span><br><span class=\"line\">             <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Received element: <span class=\"subst\">\\(element)</span>&quot;</span>)</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">         <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Error: <span class=\"subst\">\\(error)</span>&quot;</span>)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"16-CustomCombineIdentifierConvertible\"><a href=\"#16-CustomCombineIdentifierConvertible\" class=\"headerlink\" title=\"16. CustomCombineIdentifierConvertible\"></a><font size=5 color=#4169E1>16. CustomCombineIdentifierConvertible</font></h4><p>It is a protocol in the Combine framework that is used to help uniquely identify publisher chains. This protocol is typically used when creating custom Subscriber or Subscription types so that development tools can uniquely identify these publisher chains within your application.</p>\n<p>If you create a custom subscription or subscriber type, you need to implement this protocol so that development tools can uniquely identify the publisher chain in your application. If your type is a class, Combine provides you with an implementation of combineIdentifier. If your type is a struct, set the identifier as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> combineIdentifier <span class=\"operator\">=</span> <span class=\"type\">CombineIdentifier</span>()</span><br></pre></td></tr></table></figure>\n<p>Where CombineIdentifier is the unique identifier used to identify the publisher’s information flow. Let’s look at a sample code:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Combine</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Custom subscriber type, implement CustomCombineIdentifierConvertible protocol</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MySubscriber</span>&lt;<span class=\"title class_\">Input</span>, <span class=\"title class_\">Failure</span>: <span class=\"title class_\">Error</span>&gt;: <span class=\"title class_\">Subscriber</span>, <span class=\"title class_\">CustomCombineIdentifierConvertible</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">typealias</span> <span class=\"type\">ReceiveValueClosure</span> <span class=\"operator\">=</span> (<span class=\"type\">Input</span>) -&gt; <span class=\"type\">Void</span></span><br><span class=\"line\">     <span class=\"keyword\">typealias</span> <span class=\"type\">CompletionClosure</span> <span class=\"operator\">=</span> (<span class=\"type\">Subscribers</span>.<span class=\"type\">Completion</span>&lt;<span class=\"type\">Failure</span>&gt;) -&gt; <span class=\"type\">Void</span></span><br><span class=\"line\">    </span><br><span class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">let</span> receiveValue: <span class=\"type\">ReceiveValueClosure</span></span><br><span class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">let</span> receiveCompletion: <span class=\"type\">CompletionClosure</span></span><br><span class=\"line\">    </span><br><span class=\"line\">     <span class=\"keyword\">var</span> combineIdentifier: <span class=\"type\">CombineIdentifier</span> <span class=\"comment\">// Used to uniquely identify subscriptions</span></span><br><span class=\"line\">    </span><br><span class=\"line\">     <span class=\"keyword\">init</span>(<span class=\"params\">receiveValue</span>: <span class=\"keyword\">@escaping</span> <span class=\"type\">ReceiveValueClosure</span>, <span class=\"params\">receiveCompletion</span>: <span class=\"keyword\">@escaping</span> <span class=\"type\">CompletionClosure</span>) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">self</span>.receiveValue <span class=\"operator\">=</span> receiveValue</span><br><span class=\"line\">         <span class=\"keyword\">self</span>.receiveCompletion <span class=\"operator\">=</span> receiveCompletion</span><br><span class=\"line\">         <span class=\"keyword\">self</span>.combineIdentifier <span class=\"operator\">=</span> <span class=\"type\">CombineIdentifier</span>()</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">     <span class=\"keyword\">func</span> <span class=\"title function_\">receive</span>(<span class=\"params\">subscription</span>: <span class=\"type\">Subscription</span>) &#123;</span><br><span class=\"line\">         subscription.request(.unlimited) <span class=\"comment\">// Request an unlimited number of elements</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">     <span class=\"keyword\">func</span> <span class=\"title function_\">receive</span>(<span class=\"keyword\">_</span> <span class=\"params\">input</span>: <span class=\"type\">Input</span>) -&gt; <span class=\"type\">Subscribers</span>.<span class=\"type\">Demand</span> &#123;</span><br><span class=\"line\">         receiveValue(input)</span><br><span class=\"line\">         <span class=\"keyword\">return</span> .unlimited</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">     <span class=\"keyword\">func</span> <span class=\"title function_\">receive</span>(<span class=\"params\">completion</span>: <span class=\"type\">Subscribers</span>.<span class=\"type\">Completion</span>&lt;<span class=\"type\">Failure</span>&gt;) &#123;</span><br><span class=\"line\">         receiveCompletion(completion)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Create a publisher</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> publisher <span class=\"operator\">=</span> <span class=\"type\">Just</span>(<span class=\"number\">42</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Create a custom subscriber instance</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> subscriber <span class=\"operator\">=</span> <span class=\"type\">MySubscriber</span>&lt;<span class=\"type\">Int</span>, <span class=\"type\">Never</span>&gt;(</span><br><span class=\"line\">     receiveValue: &#123; value <span class=\"keyword\">in</span></span><br><span class=\"line\">         <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Received value: <span class=\"subst\">\\(value)</span>&quot;</span>)</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     receiveCompletion: &#123; completion <span class=\"keyword\">in</span></span><br><span class=\"line\">         <span class=\"keyword\">switch</span> completion &#123;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> .finished:</span><br><span class=\"line\">             <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Subscription completed successfully.&quot;</span>)</span><br><span class=\"line\">         <span class=\"keyword\">case</span> .failure(<span class=\"keyword\">let</span> error):</span><br><span class=\"line\">             <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Subscription failed with error: <span class=\"subst\">\\(error)</span>&quot;</span>)</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Subscribe to the publisher</span></span><br><span class=\"line\">publisher.subscribe(subscriber)</span><br></pre></td></tr></table></figure>\n<h4 id=\"17-The-Protocol-of-Subscription\"><a href=\"#17-The-Protocol-of-Subscription\" class=\"headerlink\" title=\"17. The Protocol of Subscription\"></a><font size=5 color=#4169E1>17. The Protocol of Subscription</font></h4><p>Subscription is a protocol that represents the subscription relationship between Subscriber and Publisher. Specifically, Subscription describes how to manage subscriptions, including operations such as canceling subscriptions and requesting elements.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">protocol</span> <span class=\"title class_\">Subscription</span>: <span class=\"title class_\">Cancellable</span>, <span class=\"title class_\">CustomCombineIdentifierConvertible</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">request</span>(<span class=\"keyword\">_</span> <span class=\"params\">demand</span>: <span class=\"type\">Subscribers</span>.<span class=\"type\">Demand</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>request(<em>:) method: By calling the request(</em>:) method, a subscriber can request to receive elements from the publisher. The request(_:) method accepts a parameter demand, which is a Subscribers.Demand enumeration value, indicating how many elements the subscriber wants to receive from the publisher. Publishers should send elements based on subscriber demand.</p>\n<p>The Subscription protocol is a very important part of Combine. It is responsible for managing the life cycle of subscriptions and the delivery of elements. Subscribers can use the request(_:) method to control the rate at which elements are received, while the cancel() method is used to cancel a subscription when it is no longer needed.</p>\n<p>In Combine, there is usually no need to manually implement the Subscription protocol because Combine provides many built-in operators and types to handle subscriptions. However, if you need to create a custom subscription, you may need to implement the Subscription protocol to define the behavior of the subscription.</p>\n<p>Below is a simple sample code that demonstrates how to create a custom subscription that conforms to the Subscription protocol and use it to manage the subscription’s lifecycle and request elements.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Combine</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Custom subscription type, consistent with Subscription protocol</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MySubscription</span>&lt;<span class=\"title class_\">Input</span>, <span class=\"title class_\">Failure</span>: <span class=\"title class_\">Error</span>&gt;: <span class=\"title class_\">Subscription</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> subscriber: <span class=\"type\">AnySubscriber</span>&lt;<span class=\"type\">Input</span>, <span class=\"type\">Failure</span>&gt;?</span><br><span class=\"line\">    </span><br><span class=\"line\">     <span class=\"keyword\">init</span>&lt;<span class=\"type\">S</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">subscriber</span>: <span class=\"type\">S</span>) <span class=\"keyword\">where</span> <span class=\"type\">S</span> : <span class=\"type\">Subscriber</span>, <span class=\"type\">S</span>.<span class=\"type\">Input</span> <span class=\"operator\">==</span> <span class=\"type\">Input</span>, <span class=\"type\">S</span>.<span class=\"type\">Failure</span> <span class=\"operator\">==</span> <span class=\"type\">Failure</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">self</span>.subscriber <span class=\"operator\">=</span> <span class=\"type\">AnySubscriber</span>(subscriber)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">     <span class=\"keyword\">func</span> <span class=\"title function_\">request</span>(<span class=\"keyword\">_</span> <span class=\"params\">demand</span>: <span class=\"type\">Subscribers</span>.<span class=\"type\">Demand</span>) &#123;</span><br><span class=\"line\">         <span class=\"comment\">// Simulate sending elements to subscribers</span></span><br><span class=\"line\">         <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">1</span><span class=\"operator\">...</span>demand.max &#123;</span><br><span class=\"line\">             <span class=\"keyword\">_</span> <span class=\"operator\">=</span> subscriber<span class=\"operator\">?</span>.receive(i <span class=\"keyword\">as!</span> <span class=\"type\">Input</span>)</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">     <span class=\"keyword\">func</span> <span class=\"title function_\">cancel</span>() &#123;</span><br><span class=\"line\">         <span class=\"comment\">// unsubscribe</span></span><br><span class=\"line\">         subscriber <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Create a custom publisher</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">MyPublisher</span>: <span class=\"title class_\">Publisher</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">typealias</span> <span class=\"type\">Output</span> <span class=\"operator\">=</span> <span class=\"type\">Int</span></span><br><span class=\"line\">     <span class=\"keyword\">typealias</span> <span class=\"type\">Failure</span> <span class=\"operator\">=</span> <span class=\"type\">Never</span></span><br><span class=\"line\">    </span><br><span class=\"line\">     <span class=\"keyword\">func</span> <span class=\"title function_\">receive</span>&lt;<span class=\"type\">S</span>&gt;(<span class=\"params\">subscriber</span>: <span class=\"type\">S</span>) <span class=\"keyword\">where</span> <span class=\"type\">S</span> : <span class=\"type\">Subscriber</span>, <span class=\"type\">Failure</span> <span class=\"operator\">==</span> <span class=\"type\">S</span>.<span class=\"type\">Failure</span>, <span class=\"type\">Output</span> <span class=\"operator\">==</span> <span class=\"type\">S</span>.<span class=\"type\">Input</span> &#123;</span><br><span class=\"line\">         <span class=\"comment\">// Create a custom subscription and pass it to the subscriber</span></span><br><span class=\"line\">         <span class=\"keyword\">let</span> subscription <span class=\"operator\">=</span> <span class=\"type\">MySubscription</span>(subscriber)</span><br><span class=\"line\">         subscriber.receive(subscription: subscription)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Create a custom subscriber</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MySubscriber</span>: <span class=\"title class_\">Subscriber</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">typealias</span> <span class=\"type\">Input</span> <span class=\"operator\">=</span> <span class=\"type\">Int</span></span><br><span class=\"line\">     <span class=\"keyword\">typealias</span> <span class=\"type\">Failure</span> <span class=\"operator\">=</span> <span class=\"type\">Never</span></span><br><span class=\"line\">    </span><br><span class=\"line\">     <span class=\"keyword\">func</span> <span class=\"title function_\">receive</span>(<span class=\"params\">subscription</span>: <span class=\"type\">Subscription</span>) &#123;</span><br><span class=\"line\">         <span class=\"comment\">//Operation at the beginning of subscription</span></span><br><span class=\"line\">         <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Subscription started.&quot;</span>)</span><br><span class=\"line\">         subscription.request(.max(<span class=\"number\">5</span>)) <span class=\"comment\">// Request up to 5 elements</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">     <span class=\"keyword\">func</span> <span class=\"title function_\">receive</span>(<span class=\"keyword\">_</span> <span class=\"params\">input</span>: <span class=\"type\">Input</span>) -&gt; <span class=\"type\">Subscribers</span>.<span class=\"type\">Demand</span> &#123;</span><br><span class=\"line\">         <span class=\"comment\">// Process the received elements</span></span><br><span class=\"line\">         <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Received element: <span class=\"subst\">\\(input)</span>&quot;</span>)</span><br><span class=\"line\">         <span class=\"keyword\">return</span> .none</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">     <span class=\"keyword\">func</span> <span class=\"title function_\">receive</span>(<span class=\"params\">completion</span>: <span class=\"type\">Subscribers</span>.<span class=\"type\">Completion</span>&lt;<span class=\"type\">Failure</span>&gt;) &#123;</span><br><span class=\"line\">         <span class=\"comment\">//Operation when subscription is completed</span></span><br><span class=\"line\">         <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Subscription completed.&quot;</span>)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Create a custom publisher instance</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> publisher <span class=\"operator\">=</span> <span class=\"type\">MyPublisher</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Create a custom subscriber instance</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> subscriber <span class=\"operator\">=</span> <span class=\"type\">MySubscriber</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Subscribe to the publisher</span></span><br><span class=\"line\">publisher.subscribe(subscriber)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=6 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://developer.apple.com/documentation/combine\">https://developer.apple.com/documentation/combine</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 10 minutes to finish reading this article.</em></font></p>\n<h4 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a><font size=5 color=#4169E1>Overview</font></h4><p>Continuing from the previous article, we will continue to introduce some common types in the Combine framework.</p>\n<h4 id=\"11-AnySubscriber\"><a href=\"#11-AnySubscriber\" class=\"headerlink\" title=\"11. AnySubscriber\"></a><font size=5 color=#4169E1>11. AnySubscriber</font></h4><p>Subscriber type erasure (Type Erasure) version. Used to encapsulate subscribers and allow you to erase the specific type of Subscriber, thereby increasing the flexibility of the code. Normally, you don’t need to create an AnySubscriber object directly as it is usually used inside the Combine operator and the framework.</p>\n<p>An AnySubscriber object can be created by passing a specific subscriber to AnySubscriber’s initialization method. This will encapsulate the original subscriber and do type erasure.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> specificSubscriber <span class=\"operator\">=</span> <span class=\"type\">MySpecificSubscriber</span>&lt;<span class=\"type\">Int</span>, <span class=\"type\">Error</span>&gt;()</span><br><span class=\"line\"><span class=\"keyword\">let</span> anySubscriber <span class=\"operator\">=</span> <span class=\"type\">AnySubscriber</span>(specificSubscriber)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>AnySubscriber can be used to subscribe to Publisher like a normal subscriber, thereby receiving values and completion status in the data stream. You can pass AnySubscriber to operators such as sink and assign.</p>\n<h4 id=\"12-Subject\"><a href=\"#12-Subject\" class=\"headerlink\" title=\"12. Subject\"></a><font size=5 color=#4169E1>12. Subject</font></h4><p>Subject is a special kind of Publisher and Subscriber. It can be used to create and manage data flows, allowing you to post values manually or send external values into the data flow. Subject acts as a relay for data in Combine, allowing you to add, update, and distribute values in the data flow. It has 2 main types of Subject, each type has a different purpose.</p>\n<p><strong>1. PassthroughSubject:</strong></p>\n<p>PassthroughSubject is the most common Subject type, which passes the received value directly to its subscribers. It does not cache or replay values, it only delivers the current value to the subscriber.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Create PassthroughSubject, specify input and error type</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> subject <span class=\"operator\">=</span> <span class=\"type\">PassthroughSubject</span>&lt;<span class=\"type\">Int</span>, <span class=\"type\">Never</span>&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Subscribe to the Subject and process the received value</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> cancelable <span class=\"operator\">=</span> subject</span><br><span class=\"line\">     .sink(receiveValue: &#123; value <span class=\"keyword\">in</span></span><br><span class=\"line\">         <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Received value: <span class=\"subst\">\\(value)</span>&quot;</span>)</span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Publish value to Subject</span></span><br><span class=\"line\">subject.send(<span class=\"number\">1</span>)</span><br><span class=\"line\">subject.send(<span class=\"number\">2</span>)</span><br><span class=\"line\">subject.send(<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// unsubscribe</span></span><br><span class=\"line\">cancelable.cancel()</span><br></pre></td></tr></table></figure>\n\n<p><strong>2. CurrentValueSubject:</strong></p>\n<p>CurrentValueSubject is similar to PassthroughSubject, but it has an initial value and sends the current value to new subscribers when subscribing. It can be used to represent an observable object with current state.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Combine</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Create a CurrentValueSubject with an initial value</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> subject <span class=\"operator\">=</span> <span class=\"type\">CurrentValueSubject</span>&lt;<span class=\"type\">Int</span>, <span class=\"type\">Never</span>&gt;(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Subscribe to the Subject and process the received value</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> cancelable <span class=\"operator\">=</span> subject</span><br><span class=\"line\">     .sink(receiveValue: &#123; value <span class=\"keyword\">in</span></span><br><span class=\"line\">         <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Received value: <span class=\"subst\">\\(value)</span>&quot;</span>)</span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Publish value to Subject</span></span><br><span class=\"line\">subject.send(<span class=\"number\">1</span>)</span><br><span class=\"line\">subject.send(<span class=\"number\">2</span>)</span><br><span class=\"line\">subject.send(<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// New subscribers will receive the initial value immediately</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> newSubscriber <span class=\"operator\">=</span> subject</span><br><span class=\"line\">     .sink(receiveValue: &#123; value <span class=\"keyword\">in</span></span><br><span class=\"line\">         <span class=\"built_in\">print</span>(<span class=\"string\">&quot;New subscriber received value: <span class=\"subst\">\\(value)</span>&quot;</span>)</span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// unsubscribe</span></span><br><span class=\"line\">cancelable.cancel()</span><br><span class=\"line\">newSubscriber.cancel()</span><br></pre></td></tr></table></figure>\n\n<p>The result is:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Received</span> value: <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"type\">Received</span> value: <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"type\">Received</span> value: <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"type\">Received</span> value: <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"type\">New</span> subscriber received value: <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<p>*** Note: ***<br>The @Published property wrapper is actually a property wrapper based on CurrentValueSubject, which enables changes to properties to be automatically published to subscribers.</p>\n<h4 id=\"13-Scheduler\"><a href=\"#13-Scheduler\" class=\"headerlink\" title=\"13. Scheduler\"></a><font size=5 color=#4169E1>13. Scheduler</font></h4><p>Scheduler is a protocol that defines when and how to execute a closure. It is a very important concept that is used to manage and control the execution of events in time. Scheduler is an abstract type used for scheduling tasks (usually asynchronous tasks), which defines when the task should be executed and on which thread or queue it should be executed. In Combine, Scheduler is usually used for operations such as operators, delays, timers, and subscriptions to ensure the order and timing of events.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protocol</span> <span class=\"title class_\">Scheduler</span>&lt;<span class=\"title class_\">SchedulerTimeType</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>Sample code:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Combine</span><br><span class=\"line\">importFoundation</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Create a scheduler for the background queue</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> scheduler <span class=\"operator\">=</span> <span class=\"type\">DispatchQueue</span>.global(qos: .background)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Use the scheduler to execute asynchronous tasks</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> cancelable <span class=\"operator\">=</span> scheduler.schedule &#123;</span><br><span class=\"line\">     <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Task executed on background queue.&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Cancel task</span></span><br><span class=\"line\">cancelable.cancel()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Combine provides multiple types related to the Scheduler type, each type has different behaviors and uses. Here are some commonly used types:</p>\n<p><strong>1. ImmediateScheduler</strong></p>\n<p>A Scheduler type. Not introducing any latency or asynchronicity, it executes the task immediately on the current thread. This is useful for performing synchronous tasks or simulating immediate execution when testing.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Combine</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Create an ImmediateScheduler scheduler</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> scheduler <span class=\"operator\">=</span> <span class=\"type\">ImmediateScheduler</span>.shared</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Use the scheduler to execute tasks</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> cancelable <span class=\"operator\">=</span> scheduler.schedule &#123;</span><br><span class=\"line\">     <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Task executed immediately.&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//The task will be executed immediately without delay</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Cancel task</span></span><br><span class=\"line\">cancelable.cancel()</span><br></pre></td></tr></table></figure>\n\n<p><strong>2. SchedulerTimeIntervalConvertible</strong></p>\n<p>SchedulerTimeIntervalConvertible is a protocol. It defines a type that converts time intervals (time units) into specific time units for use in the Combine scheduler.<br>In Combine, time units are usually expressed as seconds (TimeInterval), but different schedulers may use different time units, such as milliseconds or microseconds. Therefore, SchedulerTimeIntervalConvertible provides a general method for converting time units to those appropriate for a specific scheduler.<br>The protocol defines the following methods:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protocol</span> <span class=\"title class_\">SchedulerTimeIntervalConvertible</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">func</span> <span class=\"title function_\">seconds</span>(<span class=\"keyword\">_</span> <span class=\"params\">s</span>: <span class=\"type\">Int</span>) -&gt; <span class=\"keyword\">Self</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">func</span> <span class=\"title function_\">seconds</span>(<span class=\"keyword\">_</span> <span class=\"params\">s</span>: <span class=\"type\">Double</span>) -&gt; <span class=\"keyword\">Self</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">func</span> <span class=\"title function_\">milliseconds</span>(<span class=\"keyword\">_</span> <span class=\"params\">ms</span>: <span class=\"type\">Int</span>) -&gt; <span class=\"keyword\">Self</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">func</span> <span class=\"title function_\">microseconds</span>(<span class=\"keyword\">_</span> <span class=\"params\">us</span>: <span class=\"type\">Int</span>) -&gt; <span class=\"keyword\">Self</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">func</span> <span class=\"title function_\">nanoseconds</span>(<span class=\"keyword\">_</span> <span class=\"params\">ns</span>: <span class=\"type\">Int</span>) -&gt; <span class=\"keyword\">Self</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>These methods allow you to convert time units (seconds, milliseconds, microseconds, nanoseconds) to time units suitable for the scheduler and create a type that implements the SchedulerTimeIntervalConvertible protocol. This is typically used in the context of a custom scheduler to ensure time unit consistency.</p>\n<p>Here is an example that demonstrates how to use the SchedulerTimeIntervalConvertible protocol to create a custom time unit type:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Combine</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Customize time unit type and implement SchedulerTimeIntervalConvertible protocol</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">MyTimeUnit</span>: <span class=\"title class_\">SchedulerTimeIntervalConvertible</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">let</span> value: <span class=\"type\">Int</span></span><br><span class=\"line\">    </span><br><span class=\"line\">     <span class=\"keyword\">static</span> <span class=\"keyword\">func</span> <span class=\"title function_\">seconds</span>(<span class=\"keyword\">_</span> <span class=\"params\">s</span>: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">MyTimeUnit</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"type\">MyTimeUnit</span>(value: s)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">     <span class=\"keyword\">static</span> <span class=\"keyword\">func</span> <span class=\"title function_\">seconds</span>(<span class=\"keyword\">_</span> <span class=\"params\">s</span>: <span class=\"type\">Double</span>) -&gt; <span class=\"type\">MyTimeUnit</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"type\">MyTimeUnit</span>(value: <span class=\"type\">Int</span>(s))</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">     <span class=\"keyword\">static</span> <span class=\"keyword\">func</span> <span class=\"title function_\">milliseconds</span>(<span class=\"keyword\">_</span> <span class=\"params\">ms</span>: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">MyTimeUnit</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"type\">MyTimeUnit</span>(value: ms)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">     <span class=\"keyword\">static</span> <span class=\"keyword\">func</span> <span class=\"title function_\">microseconds</span>(<span class=\"keyword\">_</span> <span class=\"params\">us</span>: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">MyTimeUnit</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"type\">MyTimeUnit</span>(value: us)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">     <span class=\"keyword\">static</span> <span class=\"keyword\">func</span> <span class=\"title function_\">nanoseconds</span>(<span class=\"keyword\">_</span> <span class=\"params\">ns</span>: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">MyTimeUnit</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"type\">MyTimeUnit</span>(value: ns)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Use custom time unit type</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> myTimeUnit <span class=\"operator\">=</span> <span class=\"type\">MyTimeUnit</span>.seconds(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(myTimeUnit.value) <span class=\"comment\">// Output: 2</span></span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"14-ObservableObject\"><a href=\"#14-ObservableObject\" class=\"headerlink\" title=\"14. ObservableObject\"></a><font size=5 color=#4169E1>14. ObservableObject</font></h4><p>ObservableObject is a protocol in the SwiftUI framework built on Combine. It is used to create observable objects and is usually used to build responsive interfaces. It is one of the core concepts of data-driven interfaces in SwiftUI.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> SwiftUI</span><br><span class=\"line\"><span class=\"keyword\">import</span> Combine</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Create a class that conforms to the ObservableObject protocol</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyViewModel</span>: <span class=\"title class_\">ObservableObject</span> &#123;</span><br><span class=\"line\">     <span class=\"comment\">// Mark observable properties using the @Published property wrapper</span></span><br><span class=\"line\">     <span class=\"meta\">@Published</span> <span class=\"keyword\">var</span> name: <span class=\"type\">String</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;John&quot;</span></span><br><span class=\"line\">     <span class=\"meta\">@Published</span> <span class=\"keyword\">var</span> age: <span class=\"type\">Int</span> <span class=\"operator\">=</span> <span class=\"number\">30</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span>: <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">     <span class=\"comment\">// Bind the ViewModel to the view using the @ObservedObject property wrapper</span></span><br><span class=\"line\">     <span class=\"meta\">@ObservedObject</span> <span class=\"keyword\">var</span> viewModel <span class=\"operator\">=</span> <span class=\"type\">MyViewModel</span>()</span><br><span class=\"line\">    </span><br><span class=\"line\">     <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">         <span class=\"type\">VStack</span> &#123;</span><br><span class=\"line\">             <span class=\"type\">Text</span>(<span class=\"string\">&quot;Name: <span class=\"subst\">\\(viewModel.name)</span>&quot;</span>)</span><br><span class=\"line\">             <span class=\"type\">Text</span>(<span class=\"string\">&quot;Age: <span class=\"subst\">\\(viewModel.age)</span>&quot;</span>)</span><br><span class=\"line\">             <span class=\"type\">Button</span>(<span class=\"string\">&quot;Change Name&quot;</span>) &#123;</span><br><span class=\"line\">                 <span class=\"comment\">// Modify the properties in ViewModel and the interface will automatically update</span></span><br><span class=\"line\">                 viewModel.name <span class=\"operator\">=</span> <span class=\"string\">&quot;Alice&quot;</span></span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>In the above example, we have created a MyViewModel class that follows the ObservableObject protocol and marked two observable properties using the @Published property wrapper. Then, in the view ContentView, we use the @ObservedObject property wrapper to bind the viewModel to the view, making it an observable object. When properties in the viewModel are modified on button click, the view automatically updates to reflect the changes.</p>\n<h4 id=\"15-AsyncPublisher-AsyncThrowingPublisher\"><a href=\"#15-AsyncPublisher-AsyncThrowingPublisher\" class=\"headerlink\" title=\"15. AsyncPublisher&#x2F;AsyncThrowingPublisher\"></a><font size=5 color=#4169E1>15. AsyncPublisher&#x2F;AsyncThrowingPublisher</font></h4><p>AsyncPublisher&#x2F;AsyncThrowingPublisher It is a Publisher that exposes its elements in the form of (throwing) asynchronous sequences. It is defined as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">AsyncPublisher</span>&lt;<span class=\"title class_\">P</span>&gt; <span class=\"title class_\">where</span> <span class=\"title class_\">P</span> : <span class=\"title class_\">Publisher</span>, <span class=\"title class_\">P</span>.<span class=\"title class_\">Failure</span> == <span class=\"title class_\">Never</span></span><br></pre></td></tr></table></figure>\n\n<p>The sample code is as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Combine</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Create a simple publisher that will never fail (Failure == Never)</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> simplePublisher <span class=\"operator\">=</span> <span class=\"type\">Just</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Use AsyncPublisher to wrap the publisher to make it an asynchronous sequence</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> asyncSequence <span class=\"operator\">=</span> simplePublisher.values</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Use for-await-in syntax to traverse the elements of an asynchronous sequence</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">for</span> <span class=\"keyword\">try</span> <span class=\"keyword\">await</span> element <span class=\"keyword\">in</span> asyncSequence &#123;</span><br><span class=\"line\">             <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Received element: <span class=\"subst\">\\(element)</span>&quot;</span>)</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">         <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Error: <span class=\"subst\">\\(error)</span>&quot;</span>)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"16-CustomCombineIdentifierConvertible\"><a href=\"#16-CustomCombineIdentifierConvertible\" class=\"headerlink\" title=\"16. CustomCombineIdentifierConvertible\"></a><font size=5 color=#4169E1>16. CustomCombineIdentifierConvertible</font></h4><p>It is a protocol in the Combine framework that is used to help uniquely identify publisher chains. This protocol is typically used when creating custom Subscriber or Subscription types so that development tools can uniquely identify these publisher chains within your application.</p>\n<p>If you create a custom subscription or subscriber type, you need to implement this protocol so that development tools can uniquely identify the publisher chain in your application. If your type is a class, Combine provides you with an implementation of combineIdentifier. If your type is a struct, set the identifier as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> combineIdentifier <span class=\"operator\">=</span> <span class=\"type\">CombineIdentifier</span>()</span><br></pre></td></tr></table></figure>\n<p>Where CombineIdentifier is the unique identifier used to identify the publisher’s information flow. Let’s look at a sample code:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Combine</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Custom subscriber type, implement CustomCombineIdentifierConvertible protocol</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MySubscriber</span>&lt;<span class=\"title class_\">Input</span>, <span class=\"title class_\">Failure</span>: <span class=\"title class_\">Error</span>&gt;: <span class=\"title class_\">Subscriber</span>, <span class=\"title class_\">CustomCombineIdentifierConvertible</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">typealias</span> <span class=\"type\">ReceiveValueClosure</span> <span class=\"operator\">=</span> (<span class=\"type\">Input</span>) -&gt; <span class=\"type\">Void</span></span><br><span class=\"line\">     <span class=\"keyword\">typealias</span> <span class=\"type\">CompletionClosure</span> <span class=\"operator\">=</span> (<span class=\"type\">Subscribers</span>.<span class=\"type\">Completion</span>&lt;<span class=\"type\">Failure</span>&gt;) -&gt; <span class=\"type\">Void</span></span><br><span class=\"line\">    </span><br><span class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">let</span> receiveValue: <span class=\"type\">ReceiveValueClosure</span></span><br><span class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">let</span> receiveCompletion: <span class=\"type\">CompletionClosure</span></span><br><span class=\"line\">    </span><br><span class=\"line\">     <span class=\"keyword\">var</span> combineIdentifier: <span class=\"type\">CombineIdentifier</span> <span class=\"comment\">// Used to uniquely identify subscriptions</span></span><br><span class=\"line\">    </span><br><span class=\"line\">     <span class=\"keyword\">init</span>(<span class=\"params\">receiveValue</span>: <span class=\"keyword\">@escaping</span> <span class=\"type\">ReceiveValueClosure</span>, <span class=\"params\">receiveCompletion</span>: <span class=\"keyword\">@escaping</span> <span class=\"type\">CompletionClosure</span>) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">self</span>.receiveValue <span class=\"operator\">=</span> receiveValue</span><br><span class=\"line\">         <span class=\"keyword\">self</span>.receiveCompletion <span class=\"operator\">=</span> receiveCompletion</span><br><span class=\"line\">         <span class=\"keyword\">self</span>.combineIdentifier <span class=\"operator\">=</span> <span class=\"type\">CombineIdentifier</span>()</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">     <span class=\"keyword\">func</span> <span class=\"title function_\">receive</span>(<span class=\"params\">subscription</span>: <span class=\"type\">Subscription</span>) &#123;</span><br><span class=\"line\">         subscription.request(.unlimited) <span class=\"comment\">// Request an unlimited number of elements</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">     <span class=\"keyword\">func</span> <span class=\"title function_\">receive</span>(<span class=\"keyword\">_</span> <span class=\"params\">input</span>: <span class=\"type\">Input</span>) -&gt; <span class=\"type\">Subscribers</span>.<span class=\"type\">Demand</span> &#123;</span><br><span class=\"line\">         receiveValue(input)</span><br><span class=\"line\">         <span class=\"keyword\">return</span> .unlimited</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">     <span class=\"keyword\">func</span> <span class=\"title function_\">receive</span>(<span class=\"params\">completion</span>: <span class=\"type\">Subscribers</span>.<span class=\"type\">Completion</span>&lt;<span class=\"type\">Failure</span>&gt;) &#123;</span><br><span class=\"line\">         receiveCompletion(completion)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Create a publisher</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> publisher <span class=\"operator\">=</span> <span class=\"type\">Just</span>(<span class=\"number\">42</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Create a custom subscriber instance</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> subscriber <span class=\"operator\">=</span> <span class=\"type\">MySubscriber</span>&lt;<span class=\"type\">Int</span>, <span class=\"type\">Never</span>&gt;(</span><br><span class=\"line\">     receiveValue: &#123; value <span class=\"keyword\">in</span></span><br><span class=\"line\">         <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Received value: <span class=\"subst\">\\(value)</span>&quot;</span>)</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     receiveCompletion: &#123; completion <span class=\"keyword\">in</span></span><br><span class=\"line\">         <span class=\"keyword\">switch</span> completion &#123;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> .finished:</span><br><span class=\"line\">             <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Subscription completed successfully.&quot;</span>)</span><br><span class=\"line\">         <span class=\"keyword\">case</span> .failure(<span class=\"keyword\">let</span> error):</span><br><span class=\"line\">             <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Subscription failed with error: <span class=\"subst\">\\(error)</span>&quot;</span>)</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Subscribe to the publisher</span></span><br><span class=\"line\">publisher.subscribe(subscriber)</span><br></pre></td></tr></table></figure>\n<h4 id=\"17-The-Protocol-of-Subscription\"><a href=\"#17-The-Protocol-of-Subscription\" class=\"headerlink\" title=\"17. The Protocol of Subscription\"></a><font size=5 color=#4169E1>17. The Protocol of Subscription</font></h4><p>Subscription is a protocol that represents the subscription relationship between Subscriber and Publisher. Specifically, Subscription describes how to manage subscriptions, including operations such as canceling subscriptions and requesting elements.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">protocol</span> <span class=\"title class_\">Subscription</span>: <span class=\"title class_\">Cancellable</span>, <span class=\"title class_\">CustomCombineIdentifierConvertible</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">request</span>(<span class=\"keyword\">_</span> <span class=\"params\">demand</span>: <span class=\"type\">Subscribers</span>.<span class=\"type\">Demand</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>request(<em>:) method: By calling the request(</em>:) method, a subscriber can request to receive elements from the publisher. The request(_:) method accepts a parameter demand, which is a Subscribers.Demand enumeration value, indicating how many elements the subscriber wants to receive from the publisher. Publishers should send elements based on subscriber demand.</p>\n<p>The Subscription protocol is a very important part of Combine. It is responsible for managing the life cycle of subscriptions and the delivery of elements. Subscribers can use the request(_:) method to control the rate at which elements are received, while the cancel() method is used to cancel a subscription when it is no longer needed.</p>\n<p>In Combine, there is usually no need to manually implement the Subscription protocol because Combine provides many built-in operators and types to handle subscriptions. However, if you need to create a custom subscription, you may need to implement the Subscription protocol to define the behavior of the subscription.</p>\n<p>Below is a simple sample code that demonstrates how to create a custom subscription that conforms to the Subscription protocol and use it to manage the subscription’s lifecycle and request elements.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Combine</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Custom subscription type, consistent with Subscription protocol</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MySubscription</span>&lt;<span class=\"title class_\">Input</span>, <span class=\"title class_\">Failure</span>: <span class=\"title class_\">Error</span>&gt;: <span class=\"title class_\">Subscription</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> subscriber: <span class=\"type\">AnySubscriber</span>&lt;<span class=\"type\">Input</span>, <span class=\"type\">Failure</span>&gt;?</span><br><span class=\"line\">    </span><br><span class=\"line\">     <span class=\"keyword\">init</span>&lt;<span class=\"type\">S</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">subscriber</span>: <span class=\"type\">S</span>) <span class=\"keyword\">where</span> <span class=\"type\">S</span> : <span class=\"type\">Subscriber</span>, <span class=\"type\">S</span>.<span class=\"type\">Input</span> <span class=\"operator\">==</span> <span class=\"type\">Input</span>, <span class=\"type\">S</span>.<span class=\"type\">Failure</span> <span class=\"operator\">==</span> <span class=\"type\">Failure</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">self</span>.subscriber <span class=\"operator\">=</span> <span class=\"type\">AnySubscriber</span>(subscriber)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">     <span class=\"keyword\">func</span> <span class=\"title function_\">request</span>(<span class=\"keyword\">_</span> <span class=\"params\">demand</span>: <span class=\"type\">Subscribers</span>.<span class=\"type\">Demand</span>) &#123;</span><br><span class=\"line\">         <span class=\"comment\">// Simulate sending elements to subscribers</span></span><br><span class=\"line\">         <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">1</span><span class=\"operator\">...</span>demand.max &#123;</span><br><span class=\"line\">             <span class=\"keyword\">_</span> <span class=\"operator\">=</span> subscriber<span class=\"operator\">?</span>.receive(i <span class=\"keyword\">as!</span> <span class=\"type\">Input</span>)</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">     <span class=\"keyword\">func</span> <span class=\"title function_\">cancel</span>() &#123;</span><br><span class=\"line\">         <span class=\"comment\">// unsubscribe</span></span><br><span class=\"line\">         subscriber <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Create a custom publisher</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">MyPublisher</span>: <span class=\"title class_\">Publisher</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">typealias</span> <span class=\"type\">Output</span> <span class=\"operator\">=</span> <span class=\"type\">Int</span></span><br><span class=\"line\">     <span class=\"keyword\">typealias</span> <span class=\"type\">Failure</span> <span class=\"operator\">=</span> <span class=\"type\">Never</span></span><br><span class=\"line\">    </span><br><span class=\"line\">     <span class=\"keyword\">func</span> <span class=\"title function_\">receive</span>&lt;<span class=\"type\">S</span>&gt;(<span class=\"params\">subscriber</span>: <span class=\"type\">S</span>) <span class=\"keyword\">where</span> <span class=\"type\">S</span> : <span class=\"type\">Subscriber</span>, <span class=\"type\">Failure</span> <span class=\"operator\">==</span> <span class=\"type\">S</span>.<span class=\"type\">Failure</span>, <span class=\"type\">Output</span> <span class=\"operator\">==</span> <span class=\"type\">S</span>.<span class=\"type\">Input</span> &#123;</span><br><span class=\"line\">         <span class=\"comment\">// Create a custom subscription and pass it to the subscriber</span></span><br><span class=\"line\">         <span class=\"keyword\">let</span> subscription <span class=\"operator\">=</span> <span class=\"type\">MySubscription</span>(subscriber)</span><br><span class=\"line\">         subscriber.receive(subscription: subscription)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Create a custom subscriber</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MySubscriber</span>: <span class=\"title class_\">Subscriber</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">typealias</span> <span class=\"type\">Input</span> <span class=\"operator\">=</span> <span class=\"type\">Int</span></span><br><span class=\"line\">     <span class=\"keyword\">typealias</span> <span class=\"type\">Failure</span> <span class=\"operator\">=</span> <span class=\"type\">Never</span></span><br><span class=\"line\">    </span><br><span class=\"line\">     <span class=\"keyword\">func</span> <span class=\"title function_\">receive</span>(<span class=\"params\">subscription</span>: <span class=\"type\">Subscription</span>) &#123;</span><br><span class=\"line\">         <span class=\"comment\">//Operation at the beginning of subscription</span></span><br><span class=\"line\">         <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Subscription started.&quot;</span>)</span><br><span class=\"line\">         subscription.request(.max(<span class=\"number\">5</span>)) <span class=\"comment\">// Request up to 5 elements</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">     <span class=\"keyword\">func</span> <span class=\"title function_\">receive</span>(<span class=\"keyword\">_</span> <span class=\"params\">input</span>: <span class=\"type\">Input</span>) -&gt; <span class=\"type\">Subscribers</span>.<span class=\"type\">Demand</span> &#123;</span><br><span class=\"line\">         <span class=\"comment\">// Process the received elements</span></span><br><span class=\"line\">         <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Received element: <span class=\"subst\">\\(input)</span>&quot;</span>)</span><br><span class=\"line\">         <span class=\"keyword\">return</span> .none</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">     <span class=\"keyword\">func</span> <span class=\"title function_\">receive</span>(<span class=\"params\">completion</span>: <span class=\"type\">Subscribers</span>.<span class=\"type\">Completion</span>&lt;<span class=\"type\">Failure</span>&gt;) &#123;</span><br><span class=\"line\">         <span class=\"comment\">//Operation when subscription is completed</span></span><br><span class=\"line\">         <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Subscription completed.&quot;</span>)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Create a custom publisher instance</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> publisher <span class=\"operator\">=</span> <span class=\"type\">MyPublisher</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Create a custom subscriber instance</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> subscriber <span class=\"operator\">=</span> <span class=\"type\">MySubscriber</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Subscribe to the publisher</span></span><br><span class=\"line\">publisher.subscribe(subscriber)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=6 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://developer.apple.com/documentation/combine\">https://developer.apple.com/documentation/combine</a></p>\n"},{"title":"00. The concept of Copy-on-Write","date":"2023-11-07T13:30:00.000Z","_content":"\n<font color=gray size=2>*It will take about 1 minutes to finish reading this article.*</font>\n\nSwift's Copy-on-Write (COW) is an optimization strategy used to reduce memory overhead when dealing with complex data types such as arrays and dictionaries. It avoids unnecessary data copying by deferring the copy until an object needs to be modified. This strategy reduces unnecessary memory consumption and improves performance, especially when handling large data structures.\n\nIn Swift, when a copy operation is performed on an array, dictionary, or similar complex data structure, the entire data is not immediately copied. Instead, the reference count of the original data is incremented. The actual copy operation is only performed when the data is modified (write operation), ensuring that the original and new data remain independent of each other after the modification. This approach saves memory and ensures that multiple references sharing the same data structure do not inadvertently modify each other's data.\n\n\nUsing the Copy-on-Write mechanism helps to avoid unnecessary data copying, improve performance, and reduce memory overhead, especially when dealing with large data structures. This allows Swift's arrays, dictionaries, and other complex data types to share the same data structure in multiple places, while ensuring that the data does not interfere with each other in different contexts.","source":"_posts/Swift/00. Fundamental Concepts/00. The concept of Copy-on-Write.md","raw":"---\ntitle: 00. The concept of Copy-on-Write\ndate: 2023-11-07 14:30:00\ncategories: \n- [Swift, 00. Fundamental Concepts]\ntags:\n- Copy-on-Write\n---\n\n<font color=gray size=2>*It will take about 1 minutes to finish reading this article.*</font>\n\nSwift's Copy-on-Write (COW) is an optimization strategy used to reduce memory overhead when dealing with complex data types such as arrays and dictionaries. It avoids unnecessary data copying by deferring the copy until an object needs to be modified. This strategy reduces unnecessary memory consumption and improves performance, especially when handling large data structures.\n\nIn Swift, when a copy operation is performed on an array, dictionary, or similar complex data structure, the entire data is not immediately copied. Instead, the reference count of the original data is incremented. The actual copy operation is only performed when the data is modified (write operation), ensuring that the original and new data remain independent of each other after the modification. This approach saves memory and ensures that multiple references sharing the same data structure do not inadvertently modify each other's data.\n\n\nUsing the Copy-on-Write mechanism helps to avoid unnecessary data copying, improve performance, and reduce memory overhead, especially when dealing with large data structures. This allows Swift's arrays, dictionaries, and other complex data types to share the same data structure in multiple places, while ensuring that the data does not interfere with each other in different contexts.","slug":"Swift/00. Fundamental Concepts/00. The concept of Copy-on-Write","published":1,"updated":"2023-11-07T13:54:41.105Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr4t0013vu0m4pokclhg","content":"<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p>\n<p>Swift’s Copy-on-Write (COW) is an optimization strategy used to reduce memory overhead when dealing with complex data types such as arrays and dictionaries. It avoids unnecessary data copying by deferring the copy until an object needs to be modified. This strategy reduces unnecessary memory consumption and improves performance, especially when handling large data structures.</p>\n<p>In Swift, when a copy operation is performed on an array, dictionary, or similar complex data structure, the entire data is not immediately copied. Instead, the reference count of the original data is incremented. The actual copy operation is only performed when the data is modified (write operation), ensuring that the original and new data remain independent of each other after the modification. This approach saves memory and ensures that multiple references sharing the same data structure do not inadvertently modify each other’s data.</p>\n<p>Using the Copy-on-Write mechanism helps to avoid unnecessary data copying, improve performance, and reduce memory overhead, especially when dealing with large data structures. This allows Swift’s arrays, dictionaries, and other complex data types to share the same data structure in multiple places, while ensuring that the data does not interfere with each other in different contexts.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p>\n<p>Swift’s Copy-on-Write (COW) is an optimization strategy used to reduce memory overhead when dealing with complex data types such as arrays and dictionaries. It avoids unnecessary data copying by deferring the copy until an object needs to be modified. This strategy reduces unnecessary memory consumption and improves performance, especially when handling large data structures.</p>\n<p>In Swift, when a copy operation is performed on an array, dictionary, or similar complex data structure, the entire data is not immediately copied. Instead, the reference count of the original data is incremented. The actual copy operation is only performed when the data is modified (write operation), ensuring that the original and new data remain independent of each other after the modification. This approach saves memory and ensures that multiple references sharing the same data structure do not inadvertently modify each other’s data.</p>\n<p>Using the Copy-on-Write mechanism helps to avoid unnecessary data copying, improve performance, and reduce memory overhead, especially when dealing with large data structures. This allows Swift’s arrays, dictionaries, and other complex data types to share the same data structure in multiple places, while ensuring that the data does not interfere with each other in different contexts.</p>\n"},{"title":"01. The difference between try? and try!","date":"2023-11-07T14:00:00.000Z","_content":"\n<font color=gray size=2>*It will take about 1 minutes to finish reading this article.*</font>\n\nIn Swift, `try?` and `try!` are two different ways of handling errors.\n\n1. `try?`: It is used to convert errors to optional values when calling a function or method that can throw an error. If an error is thrown, the result of the expression will be `nil`. If no error is thrown, the result will be an optional value containing the return value of the function or method. Using `try?` makes the code more concise without the need to explicitly handle the error.\n\n   For example:\n   ```swift\n   if let result = try? someThrowingFunction() {\n       // Execute logic when there is no error\n   } else {\n       // Execute logic when there is an error\n   }\n   ```\n\n2. `try!`: It is used to call a function or method that can throw an error but explicitly states that the call will not result in an error, and if an error does occur, it will cause a crash. Therefore, using `try!` must be done with a high degree of certainty that the call will not result in an error.\n\n   For example:\n   ```swift\n   let result = try! someNonThrowingFunction()\n   // Error handling is not required here; if an error occurs, it will cause a crash\n   ```\n\nThe choice between `try?` and `try!` depends on your confidence in the error handling of the function or method. If you are certain that the call will not throw an error, you can use `try!`, but if you are uncertain, using `try?` can handle errors more safely.","source":"_posts/Swift/00. Fundamental Concepts/01. The difference between try? and try!.md","raw":"---\ntitle: 01. The difference between try? and try!\ndate: 2023-11-07 15:00:00\ncategories: \n- [Swift, 00. Fundamental Concepts]\ntags:\n- try? and try!\n---\n\n<font color=gray size=2>*It will take about 1 minutes to finish reading this article.*</font>\n\nIn Swift, `try?` and `try!` are two different ways of handling errors.\n\n1. `try?`: It is used to convert errors to optional values when calling a function or method that can throw an error. If an error is thrown, the result of the expression will be `nil`. If no error is thrown, the result will be an optional value containing the return value of the function or method. Using `try?` makes the code more concise without the need to explicitly handle the error.\n\n   For example:\n   ```swift\n   if let result = try? someThrowingFunction() {\n       // Execute logic when there is no error\n   } else {\n       // Execute logic when there is an error\n   }\n   ```\n\n2. `try!`: It is used to call a function or method that can throw an error but explicitly states that the call will not result in an error, and if an error does occur, it will cause a crash. Therefore, using `try!` must be done with a high degree of certainty that the call will not result in an error.\n\n   For example:\n   ```swift\n   let result = try! someNonThrowingFunction()\n   // Error handling is not required here; if an error occurs, it will cause a crash\n   ```\n\nThe choice between `try?` and `try!` depends on your confidence in the error handling of the function or method. If you are certain that the call will not throw an error, you can use `try!`, but if you are uncertain, using `try?` can handle errors more safely.","slug":"Swift/00. Fundamental Concepts/01. The difference between try? and try!","published":1,"updated":"2023-11-07T14:13:56.140Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr4t0016vu0mgzug16rb","content":"<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p>\n<p>In Swift, <code>try?</code> and <code>try!</code> are two different ways of handling errors.</p>\n<ol>\n<li><p><code>try?</code>: It is used to convert errors to optional values when calling a function or method that can throw an error. If an error is thrown, the result of the expression will be <code>nil</code>. If no error is thrown, the result will be an optional value containing the return value of the function or method. Using <code>try?</code> makes the code more concise without the need to explicitly handle the error.</p>\n<p>For example:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> result <span class=\"operator\">=</span> <span class=\"keyword\">try?</span> someThrowingFunction() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Execute logic when there is no error</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Execute logic when there is an error</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>try!</code>: It is used to call a function or method that can throw an error but explicitly states that the call will not result in an error, and if an error does occur, it will cause a crash. Therefore, using <code>try!</code> must be done with a high degree of certainty that the call will not result in an error.</p>\n<p>For example:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> result <span class=\"operator\">=</span> <span class=\"keyword\">try!</span> someNonThrowingFunction()</span><br><span class=\"line\"><span class=\"comment\">// Error handling is not required here; if an error occurs, it will cause a crash</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>The choice between <code>try?</code> and <code>try!</code> depends on your confidence in the error handling of the function or method. If you are certain that the call will not throw an error, you can use <code>try!</code>, but if you are uncertain, using <code>try?</code> can handle errors more safely.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p>\n<p>In Swift, <code>try?</code> and <code>try!</code> are two different ways of handling errors.</p>\n<ol>\n<li><p><code>try?</code>: It is used to convert errors to optional values when calling a function or method that can throw an error. If an error is thrown, the result of the expression will be <code>nil</code>. If no error is thrown, the result will be an optional value containing the return value of the function or method. Using <code>try?</code> makes the code more concise without the need to explicitly handle the error.</p>\n<p>For example:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> result <span class=\"operator\">=</span> <span class=\"keyword\">try?</span> someThrowingFunction() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Execute logic when there is no error</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Execute logic when there is an error</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>try!</code>: It is used to call a function or method that can throw an error but explicitly states that the call will not result in an error, and if an error does occur, it will cause a crash. Therefore, using <code>try!</code> must be done with a high degree of certainty that the call will not result in an error.</p>\n<p>For example:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> result <span class=\"operator\">=</span> <span class=\"keyword\">try!</span> someNonThrowingFunction()</span><br><span class=\"line\"><span class=\"comment\">// Error handling is not required here; if an error occurs, it will cause a crash</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>The choice between <code>try?</code> and <code>try!</code> depends on your confidence in the error handling of the function or method. If you are certain that the call will not throw an error, you can use <code>try!</code>, but if you are uncertain, using <code>try?</code> can handle errors more safely.</p>\n"},{"title":"02. The Access Control Keywords","date":"2023-11-07T14:50:00.000Z","_content":"\n<font color=gray size=2>*It will take about 1 minutes to finish reading this article.*</font>\n\nIn Swift, The access control permissions are ranked in strictness from high to low as follows:\n\n1. `open`: It is used to declare classes that can be inherited by other modules, and the methods within the class can be overridden by subclasses. In addition to having all the features of the `public` access level, `open` allows other modules to inherit the class and override its methods.\n\n   ```swift\n   open class MyOpenClass {\n       open func myOpenMethod() {\n           // Method implementation\n       }\n   }\n   ```\n\nTherefore, the main difference is that `open` allows other modules to inherit and override methods in the class, while `public` only allows access but not inheritance or overriding. Generally, it is advisable to use stricter access levels to enhance code security and stability.\n\n2. `public`: It is used to declare entities (classes, methods, properties, etc.) that can be accessed from any module but cannot be inherited or overridden by other modules. In other words, a `public` entity can be accessed from outside the module in which it is defined but cannot be inherited or overridden by other modules.\n\n   ```swift\n   public class MyClass {\n       public var myProperty: Int = 5\n       public func myMethod() {\n           // Method implementation\n       }\n   }\n   ```\n\nApart from `public` and `open`, Swift provides several other access control keywords to manage the access levels of different entities. These keywords include:\n\n3. `internal`: It is used to declare entities that are visible throughout the entire module but not outside of it. This is the default access level, and if the access level is not explicitly stated, the entity will default to `internal`.\n\n   ```swift\n   internal class MyInternalClass {\n       internal var myInternalProperty: Int = 5\n       internal func myInternalMethod() {\n           // Method implementation\n       }\n   }\n   ```\n\n4. `fileprivate`: It is used to declare entities that can only be accessed within the source file where they are defined, making them visible to other types or functions within the same source file.\n\n   ```swift\n   fileprivate class MyFilePrivateClass {\n       fileprivate var myFilePrivateProperty: Int = 5\n       fileprivate func myFilePrivateMethod() {\n           // Method implementation\n       }\n   }\n   ```\n\n5. `private`: It is used to declare entities that can only be accessed within the enclosing declaration where they are defined, making them visible only to the enclosing block, type, or extension that contains the declaration.\n\n   ```swift\n   private class MyPrivateClass {\n       private var myPrivateProperty: Int = 5\n       private func myPrivateMethod() {\n           // Method implementation\n       }\n   }\n   ```\n\nThese access control keywords provide a flexible mechanism for controlling permissions, ensuring code security and module encapsulation. By selecting the appropriate access level based on the requirements and design of the code, developers can effectively manage the codebase and protect its privacy.\n","source":"_posts/Swift/00. Fundamental Concepts/02. The Access Control Keywords.md","raw":"---\ntitle: 02. The Access Control Keywords\ndate: 2023-11-07 15:50:00\ncategories: \n- [Swift, 00. Fundamental Concepts]\ntags:\n- open\n- public\n- internal\n- fileprivate\n- private\n---\n\n<font color=gray size=2>*It will take about 1 minutes to finish reading this article.*</font>\n\nIn Swift, The access control permissions are ranked in strictness from high to low as follows:\n\n1. `open`: It is used to declare classes that can be inherited by other modules, and the methods within the class can be overridden by subclasses. In addition to having all the features of the `public` access level, `open` allows other modules to inherit the class and override its methods.\n\n   ```swift\n   open class MyOpenClass {\n       open func myOpenMethod() {\n           // Method implementation\n       }\n   }\n   ```\n\nTherefore, the main difference is that `open` allows other modules to inherit and override methods in the class, while `public` only allows access but not inheritance or overriding. Generally, it is advisable to use stricter access levels to enhance code security and stability.\n\n2. `public`: It is used to declare entities (classes, methods, properties, etc.) that can be accessed from any module but cannot be inherited or overridden by other modules. In other words, a `public` entity can be accessed from outside the module in which it is defined but cannot be inherited or overridden by other modules.\n\n   ```swift\n   public class MyClass {\n       public var myProperty: Int = 5\n       public func myMethod() {\n           // Method implementation\n       }\n   }\n   ```\n\nApart from `public` and `open`, Swift provides several other access control keywords to manage the access levels of different entities. These keywords include:\n\n3. `internal`: It is used to declare entities that are visible throughout the entire module but not outside of it. This is the default access level, and if the access level is not explicitly stated, the entity will default to `internal`.\n\n   ```swift\n   internal class MyInternalClass {\n       internal var myInternalProperty: Int = 5\n       internal func myInternalMethod() {\n           // Method implementation\n       }\n   }\n   ```\n\n4. `fileprivate`: It is used to declare entities that can only be accessed within the source file where they are defined, making them visible to other types or functions within the same source file.\n\n   ```swift\n   fileprivate class MyFilePrivateClass {\n       fileprivate var myFilePrivateProperty: Int = 5\n       fileprivate func myFilePrivateMethod() {\n           // Method implementation\n       }\n   }\n   ```\n\n5. `private`: It is used to declare entities that can only be accessed within the enclosing declaration where they are defined, making them visible only to the enclosing block, type, or extension that contains the declaration.\n\n   ```swift\n   private class MyPrivateClass {\n       private var myPrivateProperty: Int = 5\n       private func myPrivateMethod() {\n           // Method implementation\n       }\n   }\n   ```\n\nThese access control keywords provide a flexible mechanism for controlling permissions, ensuring code security and module encapsulation. By selecting the appropriate access level based on the requirements and design of the code, developers can effectively manage the codebase and protect its privacy.\n","slug":"Swift/00. Fundamental Concepts/02. The Access Control Keywords","published":1,"updated":"2023-11-07T14:57:45.325Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr4w0019vu0mbl3k7ofx","content":"<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p>\n<p>In Swift, The access control permissions are ranked in strictness from high to low as follows:</p>\n<ol>\n<li><p><code>open</code>: It is used to declare classes that can be inherited by other modules, and the methods within the class can be overridden by subclasses. In addition to having all the features of the <code>public</code> access level, <code>open</code> allows other modules to inherit the class and override its methods.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">open</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyOpenClass</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">open</span> <span class=\"keyword\">func</span> <span class=\"title function_\">myOpenMethod</span>() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Method implementation</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>Therefore, the main difference is that <code>open</code> allows other modules to inherit and override methods in the class, while <code>public</code> only allows access but not inheritance or overriding. Generally, it is advisable to use stricter access levels to enhance code security and stability.</p>\n<ol start=\"2\">\n<li><p><code>public</code>: It is used to declare entities (classes, methods, properties, etc.) that can be accessed from any module but cannot be inherited or overridden by other modules. In other words, a <code>public</code> entity can be accessed from outside the module in which it is defined but cannot be inherited or overridden by other modules.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> myProperty: <span class=\"type\">Int</span> <span class=\"operator\">=</span> <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">func</span> <span class=\"title function_\">myMethod</span>() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Method implementation</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>Apart from <code>public</code> and <code>open</code>, Swift provides several other access control keywords to manage the access levels of different entities. These keywords include:</p>\n<ol start=\"3\">\n<li><p><code>internal</code>: It is used to declare entities that are visible throughout the entire module but not outside of it. This is the default access level, and if the access level is not explicitly stated, the entity will default to <code>internal</code>.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">internal</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyInternalClass</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">internal</span> <span class=\"keyword\">var</span> myInternalProperty: <span class=\"type\">Int</span> <span class=\"operator\">=</span> <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"keyword\">internal</span> <span class=\"keyword\">func</span> <span class=\"title function_\">myInternalMethod</span>() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Method implementation</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>fileprivate</code>: It is used to declare entities that can only be accessed within the source file where they are defined, making them visible to other types or functions within the same source file.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fileprivate</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyFilePrivateClass</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">fileprivate</span> <span class=\"keyword\">var</span> myFilePrivateProperty: <span class=\"type\">Int</span> <span class=\"operator\">=</span> <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"keyword\">fileprivate</span> <span class=\"keyword\">func</span> <span class=\"title function_\">myFilePrivateMethod</span>() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Method implementation</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>private</code>: It is used to declare entities that can only be accessed within the enclosing declaration where they are defined, making them visible only to the enclosing block, type, or extension that contains the declaration.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyPrivateClass</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> myPrivateProperty: <span class=\"type\">Int</span> <span class=\"operator\">=</span> <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">func</span> <span class=\"title function_\">myPrivateMethod</span>() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Method implementation</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>These access control keywords provide a flexible mechanism for controlling permissions, ensuring code security and module encapsulation. By selecting the appropriate access level based on the requirements and design of the code, developers can effectively manage the codebase and protect its privacy.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p>\n<p>In Swift, The access control permissions are ranked in strictness from high to low as follows:</p>\n<ol>\n<li><p><code>open</code>: It is used to declare classes that can be inherited by other modules, and the methods within the class can be overridden by subclasses. In addition to having all the features of the <code>public</code> access level, <code>open</code> allows other modules to inherit the class and override its methods.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">open</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyOpenClass</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">open</span> <span class=\"keyword\">func</span> <span class=\"title function_\">myOpenMethod</span>() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Method implementation</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>Therefore, the main difference is that <code>open</code> allows other modules to inherit and override methods in the class, while <code>public</code> only allows access but not inheritance or overriding. Generally, it is advisable to use stricter access levels to enhance code security and stability.</p>\n<ol start=\"2\">\n<li><p><code>public</code>: It is used to declare entities (classes, methods, properties, etc.) that can be accessed from any module but cannot be inherited or overridden by other modules. In other words, a <code>public</code> entity can be accessed from outside the module in which it is defined but cannot be inherited or overridden by other modules.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> myProperty: <span class=\"type\">Int</span> <span class=\"operator\">=</span> <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">func</span> <span class=\"title function_\">myMethod</span>() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Method implementation</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>Apart from <code>public</code> and <code>open</code>, Swift provides several other access control keywords to manage the access levels of different entities. These keywords include:</p>\n<ol start=\"3\">\n<li><p><code>internal</code>: It is used to declare entities that are visible throughout the entire module but not outside of it. This is the default access level, and if the access level is not explicitly stated, the entity will default to <code>internal</code>.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">internal</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyInternalClass</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">internal</span> <span class=\"keyword\">var</span> myInternalProperty: <span class=\"type\">Int</span> <span class=\"operator\">=</span> <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"keyword\">internal</span> <span class=\"keyword\">func</span> <span class=\"title function_\">myInternalMethod</span>() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Method implementation</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>fileprivate</code>: It is used to declare entities that can only be accessed within the source file where they are defined, making them visible to other types or functions within the same source file.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fileprivate</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyFilePrivateClass</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">fileprivate</span> <span class=\"keyword\">var</span> myFilePrivateProperty: <span class=\"type\">Int</span> <span class=\"operator\">=</span> <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"keyword\">fileprivate</span> <span class=\"keyword\">func</span> <span class=\"title function_\">myFilePrivateMethod</span>() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Method implementation</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>private</code>: It is used to declare entities that can only be accessed within the enclosing declaration where they are defined, making them visible only to the enclosing block, type, or extension that contains the declaration.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyPrivateClass</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> myPrivateProperty: <span class=\"type\">Int</span> <span class=\"operator\">=</span> <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">func</span> <span class=\"title function_\">myPrivateMethod</span>() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Method implementation</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>These access control keywords provide a flexible mechanism for controlling permissions, ensuring code security and module encapsulation. By selecting the appropriate access level based on the requirements and design of the code, developers can effectively manage the codebase and protect its privacy.</p>\n"},{"title":"03. The Self and self in Swift","date":"2023-11-07T15:50:00.000Z","_content":"\n<font color=gray size=2>*It will take about 1 minutes to finish reading this article.*</font>\n\nI believe everyone knows the specific function of the keyword self. It is basically the same as self in OC. But for Self...(WTF, what is this)\nWhen you use the wrong Self, the compiler will prompt like this:\n\n```Swift\n'Self' is only available in a protocol or as the result of a method in a class\n```\n\nIf separated, it means two things.\n\n1. Self can be used to limit related types in the protocol\n\n2. Self can be used in a class to serve as the return value type of a method\n\nFor the first case, you can refer to the examples as follows:\n\n```Swift\nprotocol Copyable {\n    func copy() -> Self\n    func clamp(intervalToClamp: Self) -> Self\n}\n\n```\n\nBoth methods in this protocol use Self to limit the type.\n\nIn the second case, you can refer to the following example:\n\n```Swift\nclass A: Copyable {\n    var num = 1\n    \n    required init() {\n        \n    }\n    \n    func copy() -> Self {\n        let type = type(of: self)\n        print(type)\n        let result = type.init()\n        result.num = num\n        return result\n    }\n    \n    func clamp(intervalToClamp: A) -> Self {\n        let result = type(of: self).init()\n        result.num = num\n        return result\n    }\n    \n    class func calssFunc() -> Self {\n        let type = self\n        print(type)\n        let result = type.init()\n        return result\n    }\n    \n}\n\nclass B: A {\n    func clamp(intervalToClamp: B) -> Self {\n        let result = type(of: self).init()\n        result.num = num\n        return result\n    }\n}\n\nlet type = A.self\ntype.calssFunc()\n\nlet typeB = B.self\ntypeB.calssFunc()\n\nlet objectA = A()\nobjectA.num = 100\n\nlet newObjectA = objectA.copy()\nobjectA.num = 1\n\nlet objectB = B()\nobjectB.num = 100\nlet newB = objectB.copy()\n\n```\n\nIn this example, there are two classes A and B. A implements two methods in the protocol and contains a class method. B is a subclass of A and also implements the protocol method.\nIt can be seen that for A\nIn the instance method of A, self represents the current instance, and type(of: self) is used to obtain the type of the current object.\nIn the class method of A, self represents the type of the current class, and Self can only be used to represent the type of the return value.\nComparing the methods of the protocols implemented by A and B, we can see that the parameter types received by the methods in the protocol must be replaced by the types of the respective classes, otherwise the error at the beginning of the article will be reported.\n\nIn summary, it can be seen that for Self, it only represents a specific type, and can only be used in protocols or as the return value type of a method of a certain class. Self refers to the current instance in instance methods, and in class methods Refers to the current class.","source":"_posts/Swift/00. Fundamental Concepts/03. The Self and self in Swift.md","raw":"---\ntitle: 03. The Self and self in Swift\ndate: 2023-11-07 16:50:00\ncategories: \n- [Swift, 00. Fundamental Concepts]\ntags:\n- Self\n- self\n---\n\n<font color=gray size=2>*It will take about 1 minutes to finish reading this article.*</font>\n\nI believe everyone knows the specific function of the keyword self. It is basically the same as self in OC. But for Self...(WTF, what is this)\nWhen you use the wrong Self, the compiler will prompt like this:\n\n```Swift\n'Self' is only available in a protocol or as the result of a method in a class\n```\n\nIf separated, it means two things.\n\n1. Self can be used to limit related types in the protocol\n\n2. Self can be used in a class to serve as the return value type of a method\n\nFor the first case, you can refer to the examples as follows:\n\n```Swift\nprotocol Copyable {\n    func copy() -> Self\n    func clamp(intervalToClamp: Self) -> Self\n}\n\n```\n\nBoth methods in this protocol use Self to limit the type.\n\nIn the second case, you can refer to the following example:\n\n```Swift\nclass A: Copyable {\n    var num = 1\n    \n    required init() {\n        \n    }\n    \n    func copy() -> Self {\n        let type = type(of: self)\n        print(type)\n        let result = type.init()\n        result.num = num\n        return result\n    }\n    \n    func clamp(intervalToClamp: A) -> Self {\n        let result = type(of: self).init()\n        result.num = num\n        return result\n    }\n    \n    class func calssFunc() -> Self {\n        let type = self\n        print(type)\n        let result = type.init()\n        return result\n    }\n    \n}\n\nclass B: A {\n    func clamp(intervalToClamp: B) -> Self {\n        let result = type(of: self).init()\n        result.num = num\n        return result\n    }\n}\n\nlet type = A.self\ntype.calssFunc()\n\nlet typeB = B.self\ntypeB.calssFunc()\n\nlet objectA = A()\nobjectA.num = 100\n\nlet newObjectA = objectA.copy()\nobjectA.num = 1\n\nlet objectB = B()\nobjectB.num = 100\nlet newB = objectB.copy()\n\n```\n\nIn this example, there are two classes A and B. A implements two methods in the protocol and contains a class method. B is a subclass of A and also implements the protocol method.\nIt can be seen that for A\nIn the instance method of A, self represents the current instance, and type(of: self) is used to obtain the type of the current object.\nIn the class method of A, self represents the type of the current class, and Self can only be used to represent the type of the return value.\nComparing the methods of the protocols implemented by A and B, we can see that the parameter types received by the methods in the protocol must be replaced by the types of the respective classes, otherwise the error at the beginning of the article will be reported.\n\nIn summary, it can be seen that for Self, it only represents a specific type, and can only be used in protocols or as the return value type of a method of a certain class. Self refers to the current instance in instance methods, and in class methods Refers to the current class.","slug":"Swift/00. Fundamental Concepts/03. The Self and self in Swift","published":1,"updated":"2023-11-07T15:12:55.562Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr4x001bvu0m2gyc24dw","content":"<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p>\n<p>I believe everyone knows the specific function of the keyword self. It is basically the same as self in OC. But for Self…(WTF, what is this)<br>When you use the wrong Self, the compiler will prompt like this:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;<span class=\"keyword\">Self</span>&#x27; <span class=\"keyword\">is</span> only available <span class=\"keyword\">in</span> a <span class=\"keyword\">protocol</span> <span class=\"title class_\">or</span> <span class=\"title class_\">as</span> <span class=\"title class_\">the</span> <span class=\"title class_\">result</span> <span class=\"title class_\">of</span> <span class=\"title class_\">a</span> <span class=\"title class_\">method</span> <span class=\"title class_\">in</span> <span class=\"title class_\">a</span> <span class=\"title class_\">class</span></span><br></pre></td></tr></table></figure>\n\n<p>If separated, it means two things.</p>\n<ol>\n<li><p>Self can be used to limit related types in the protocol</p>\n</li>\n<li><p>Self can be used in a class to serve as the return value type of a method</p>\n</li>\n</ol>\n<p>For the first case, you can refer to the examples as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protocol</span> <span class=\"title class_\">Copyable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">copy</span>() -&gt; <span class=\"keyword\">Self</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">clamp</span>(<span class=\"params\">intervalToClamp</span>: <span class=\"keyword\">Self</span>) -&gt; <span class=\"keyword\">Self</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Both methods in this protocol use Self to limit the type.</p>\n<p>In the second case, you can refer to the following example:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span>: <span class=\"title class_\">Copyable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> num <span class=\"operator\">=</span> <span class=\"number\">1</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">required</span> <span class=\"keyword\">init</span>() &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">copy</span>() -&gt; <span class=\"keyword\">Self</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> type <span class=\"operator\">=</span> <span class=\"built_in\">type</span>(of: <span class=\"keyword\">self</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(type)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> result <span class=\"operator\">=</span> type.<span class=\"keyword\">init</span>()</span><br><span class=\"line\">        result.num <span class=\"operator\">=</span> num</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">clamp</span>(<span class=\"params\">intervalToClamp</span>: <span class=\"type\">A</span>) -&gt; <span class=\"keyword\">Self</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> result <span class=\"operator\">=</span> <span class=\"built_in\">type</span>(of: <span class=\"keyword\">self</span>).<span class=\"keyword\">init</span>()</span><br><span class=\"line\">        result.num <span class=\"operator\">=</span> num</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">func</span> <span class=\"title class_\">calssFunc</span>() -&gt; <span class=\"title class_\">Self</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> type <span class=\"operator\">=</span> <span class=\"keyword\">self</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(type)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> result <span class=\"operator\">=</span> type.<span class=\"keyword\">init</span>()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span>: <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">clamp</span>(<span class=\"params\">intervalToClamp</span>: <span class=\"type\">B</span>) -&gt; <span class=\"keyword\">Self</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> result <span class=\"operator\">=</span> <span class=\"built_in\">type</span>(of: <span class=\"keyword\">self</span>).<span class=\"keyword\">init</span>()</span><br><span class=\"line\">        result.num <span class=\"operator\">=</span> num</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> type <span class=\"operator\">=</span> <span class=\"type\">A</span>.<span class=\"keyword\">self</span></span><br><span class=\"line\">type.calssFunc()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> typeB <span class=\"operator\">=</span> <span class=\"type\">B</span>.<span class=\"keyword\">self</span></span><br><span class=\"line\">typeB.calssFunc()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> objectA <span class=\"operator\">=</span> <span class=\"type\">A</span>()</span><br><span class=\"line\">objectA.num <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> newObjectA <span class=\"operator\">=</span> objectA.copy()</span><br><span class=\"line\">objectA.num <span class=\"operator\">=</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> objectB <span class=\"operator\">=</span> <span class=\"type\">B</span>()</span><br><span class=\"line\">objectB.num <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> newB <span class=\"operator\">=</span> objectB.copy()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>In this example, there are two classes A and B. A implements two methods in the protocol and contains a class method. B is a subclass of A and also implements the protocol method.<br>It can be seen that for A<br>In the instance method of A, self represents the current instance, and type(of: self) is used to obtain the type of the current object.<br>In the class method of A, self represents the type of the current class, and Self can only be used to represent the type of the return value.<br>Comparing the methods of the protocols implemented by A and B, we can see that the parameter types received by the methods in the protocol must be replaced by the types of the respective classes, otherwise the error at the beginning of the article will be reported.</p>\n<p>In summary, it can be seen that for Self, it only represents a specific type, and can only be used in protocols or as the return value type of a method of a certain class. Self refers to the current instance in instance methods, and in class methods Refers to the current class.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p>\n<p>I believe everyone knows the specific function of the keyword self. It is basically the same as self in OC. But for Self…(WTF, what is this)<br>When you use the wrong Self, the compiler will prompt like this:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;<span class=\"keyword\">Self</span>&#x27; <span class=\"keyword\">is</span> only available <span class=\"keyword\">in</span> a <span class=\"keyword\">protocol</span> <span class=\"title class_\">or</span> <span class=\"title class_\">as</span> <span class=\"title class_\">the</span> <span class=\"title class_\">result</span> <span class=\"title class_\">of</span> <span class=\"title class_\">a</span> <span class=\"title class_\">method</span> <span class=\"title class_\">in</span> <span class=\"title class_\">a</span> <span class=\"title class_\">class</span></span><br></pre></td></tr></table></figure>\n\n<p>If separated, it means two things.</p>\n<ol>\n<li><p>Self can be used to limit related types in the protocol</p>\n</li>\n<li><p>Self can be used in a class to serve as the return value type of a method</p>\n</li>\n</ol>\n<p>For the first case, you can refer to the examples as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protocol</span> <span class=\"title class_\">Copyable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">copy</span>() -&gt; <span class=\"keyword\">Self</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">clamp</span>(<span class=\"params\">intervalToClamp</span>: <span class=\"keyword\">Self</span>) -&gt; <span class=\"keyword\">Self</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Both methods in this protocol use Self to limit the type.</p>\n<p>In the second case, you can refer to the following example:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span>: <span class=\"title class_\">Copyable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> num <span class=\"operator\">=</span> <span class=\"number\">1</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">required</span> <span class=\"keyword\">init</span>() &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">copy</span>() -&gt; <span class=\"keyword\">Self</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> type <span class=\"operator\">=</span> <span class=\"built_in\">type</span>(of: <span class=\"keyword\">self</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(type)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> result <span class=\"operator\">=</span> type.<span class=\"keyword\">init</span>()</span><br><span class=\"line\">        result.num <span class=\"operator\">=</span> num</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">clamp</span>(<span class=\"params\">intervalToClamp</span>: <span class=\"type\">A</span>) -&gt; <span class=\"keyword\">Self</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> result <span class=\"operator\">=</span> <span class=\"built_in\">type</span>(of: <span class=\"keyword\">self</span>).<span class=\"keyword\">init</span>()</span><br><span class=\"line\">        result.num <span class=\"operator\">=</span> num</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">func</span> <span class=\"title class_\">calssFunc</span>() -&gt; <span class=\"title class_\">Self</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> type <span class=\"operator\">=</span> <span class=\"keyword\">self</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(type)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> result <span class=\"operator\">=</span> type.<span class=\"keyword\">init</span>()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span>: <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">clamp</span>(<span class=\"params\">intervalToClamp</span>: <span class=\"type\">B</span>) -&gt; <span class=\"keyword\">Self</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> result <span class=\"operator\">=</span> <span class=\"built_in\">type</span>(of: <span class=\"keyword\">self</span>).<span class=\"keyword\">init</span>()</span><br><span class=\"line\">        result.num <span class=\"operator\">=</span> num</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> type <span class=\"operator\">=</span> <span class=\"type\">A</span>.<span class=\"keyword\">self</span></span><br><span class=\"line\">type.calssFunc()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> typeB <span class=\"operator\">=</span> <span class=\"type\">B</span>.<span class=\"keyword\">self</span></span><br><span class=\"line\">typeB.calssFunc()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> objectA <span class=\"operator\">=</span> <span class=\"type\">A</span>()</span><br><span class=\"line\">objectA.num <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> newObjectA <span class=\"operator\">=</span> objectA.copy()</span><br><span class=\"line\">objectA.num <span class=\"operator\">=</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> objectB <span class=\"operator\">=</span> <span class=\"type\">B</span>()</span><br><span class=\"line\">objectB.num <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> newB <span class=\"operator\">=</span> objectB.copy()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>In this example, there are two classes A and B. A implements two methods in the protocol and contains a class method. B is a subclass of A and also implements the protocol method.<br>It can be seen that for A<br>In the instance method of A, self represents the current instance, and type(of: self) is used to obtain the type of the current object.<br>In the class method of A, self represents the type of the current class, and Self can only be used to represent the type of the return value.<br>Comparing the methods of the protocols implemented by A and B, we can see that the parameter types received by the methods in the protocol must be replaced by the types of the respective classes, otherwise the error at the beginning of the article will be reported.</p>\n<p>In summary, it can be seen that for Self, it only represents a specific type, and can only be used in protocols or as the return value type of a method of a certain class. Self refers to the current instance in instance methods, and in class methods Refers to the current class.</p>\n"},{"title":"04. Optional type in Swift.","date":"2023-11-07T16:10:00.000Z","_content":"\n<font color=gray size=2>*It will take about 2 minutes to finish reading this article.*</font>\n\n\n#### <font size=5 color=#4169E1>1. The concept of Optional type</font> \n\nWhy is the concept of Optional introduced in Swift? It is introduced in the official documentation:\n\n```Swift\nSwift also introduces optional types, which handle the absence of a value. Optionals say either “there is a value, and it equals x” or “there isn’t a value at all”. Using optionals is similar to using nil with pointers in Objective-C, but they work for any type, not just classes. Not only are optionals safer and more expressive than nil pointers in Objective-C, they’re at the heart of many of Swift’s most powerful features.\n\n```\n\nTo sum it up: the optional type is used to express \"there is a value, it is equal to x or there is no value at all\". When we encounter the Optional type, we will obviously know that the value here may be nil, and we must handle it with caution. This approach is safer and more expressive than Objective-C. To put it bluntly, the introduction of optional types is both safe and convenient to write.\n\n#### <font size=5 color=#4169E1>2. Implementation of Optional type</font> \n\n```Swift\nvar optionalInteger: Int?\n```\nor\n\n```Swift\nvar optionalInteger: Int！\n```\n\n? and!, they are all syntactic sugar for optional types.\n\n#### <font size=5 color=#4169E1>3. The essence of Optional type</font> \n\nOptional is actually an enumeration (strictly speaking: it should be a high-order abstract type based on enum and generics), which are None and Some(T) respectively. If the optional type is nil, the Case of None will be hit.\n\n```Swift\nenum Optional<T> : NilLiteralConvertible, Reflectable {  \n        case None  \n        case Some(T)  \n \n        //...\n}\n```\n\nIf you hit the Case of Some(T), you will get a \"wrapped\" value (a wrapped value). If you want to get the real value, you need to \"unpack\" it, otherwise you will get the Optional(value ).\n\n\n\n#### <font size=5 color=#4169E1>4. Application of Optional type (unpacking)</font> \n\n<font size=4>**4.1 Optional binding**</font>  \n\nIn this case, if included, assign the value to a temporary constant or variable. Optional binding can be used in if and while statements to evaluate optional values and assign the value to a constant or variable.\n\nBasic writing:\n\n```Swift\nif let constantName = someOptional {\n    statements\n}\n\n```\n\nExample:\n\n```Swift\nvar myString:String?\nmyString = \"Hello, Swift!\"\nif let yourString = myString {\n    print(\"Your string value is - \\(yourString)\")\n}else{\n    print(\"Your string has no value\")\n}\n\n```\n\n<font size=4>**4.2 Force parsing**</font>  \n\nExample:\n\n```Swift\nvar myString:String?\nmyString = \"Hello, world!\"\nif myString != nil {\n    // force parsing\n    print( myString! )\n}else{\n    print(\"myString value is nil\")\n}\n\n```\n\nIf myString is nil at this time, a runtime error will occur in the above code.\n\n \n#### <font size=5 color=#4169E1>5. Notes on Optional type</font> \n\n<font size=4>**5.1 Use! When performing forced unpacking, ensure that the variable value is non-nil**</font> \n\n```Swift\nvar str1:String? // The str1 value may be the value passed or the value obtained from the server\nlet msg = \"Hi\"\nlet txt = msg + str1! // runtime error\n```\nTherefore, it needs to be used with caution.\n\n<font size=4>**5.2 ?? operator (null and operator)**</font>  \n\nThis is a common and very useful operator. When we unpack variables, we are often prompted to provide a default value.\n\n```Swift\n// Writing method one: Optional Binding (Optional Binding)\nvar username = \"\"\nif let name = inputName {\n     username = name\n} else {\n     username = \"Guest\"\n}\n//Writing method 2: ternary operator\nlet username = inputName != nil ? inputName! : \"Guest\"\n```\n\nThe above code is equivalent to:\n\n```Swift\nlet username = inputName ?? \"Guest\" \n```\n\na??b means: Optional type a is first judged as empty. If a contains a value, it is unblocked, otherwise the default value b is returned. Note: Expression a must be of Optional type, and the type of default value b needs to be consistent with the type of value stored in a.\n\nNote: ?? sometimes may also represent multiple Optional, for example:\n\n```Swift\nvar string: String? = \"string\"\nvar anotherString: String?? = string\n\n```\n\nWe can clearly know that anotherString is Optinal<Optional<String>>\n\n\n<font size=4>**5.3 Optional Chaining optional chain**</font>  \n\nSwift official website has the following introduction:\n\n> Optional chaining is a process for querying and calling properties, methods, and subscripts on an optional that might currently be nil. If the optional contains a value, the property, method, or subscript call succeeds; if the optional is nil, the property, method, or subscript call returns nil. Multiple queries can be chained together, and the entire chain fails gracefully if any link in the chain is nil.\n\nRough meaning:\n\nOption chaining is the process of querying and calling properties, methods, and subscripts on an optional chain that may currently be zero. If the optional contains a value, the property, method, or subscript call succeeds; if the optional value is nil, the property, method, or subscript call returns nil. Multiple queries can be chained together, and if any link in the chain is zero, the entire chain fails gracefully.\n\nExamples are as follows:\n\n```Swift\nclass Person {\nvar residence: Residence?\n}\nclass Residence {\n     var numberOfRooms = 1\n}\nlet john = Person()\n//If written as forced unpacking, this code will cause an error when running.\nlet roomCount = john.residence!.numberOfRooms\n//Correct writing\n//john.residence = Residence()\nif let roomCount = john.residence?.numberOfRooms {\n     print(\"John's residence has \\(roomCount) room(s).\")\n} else {\n     print(\"Unable to retrieve the number of rooms.\")\n}\n\n```\n\n#### <font size=5 color=gray>*Reference*</font>\n[1] https://leon0206.blog.csdn.net/article/details/120438470","source":"_posts/Swift/00. Fundamental Concepts/04. Optional type in Swift.md","raw":"---\ntitle: 04. Optional type in Swift.\ndate: 2023-11-07 17:10:00\ncategories: \n- [Swift, 00. Fundamental Concepts]\ntags:\n- Optional\n---\n\n<font color=gray size=2>*It will take about 2 minutes to finish reading this article.*</font>\n\n\n#### <font size=5 color=#4169E1>1. The concept of Optional type</font> \n\nWhy is the concept of Optional introduced in Swift? It is introduced in the official documentation:\n\n```Swift\nSwift also introduces optional types, which handle the absence of a value. Optionals say either “there is a value, and it equals x” or “there isn’t a value at all”. Using optionals is similar to using nil with pointers in Objective-C, but they work for any type, not just classes. Not only are optionals safer and more expressive than nil pointers in Objective-C, they’re at the heart of many of Swift’s most powerful features.\n\n```\n\nTo sum it up: the optional type is used to express \"there is a value, it is equal to x or there is no value at all\". When we encounter the Optional type, we will obviously know that the value here may be nil, and we must handle it with caution. This approach is safer and more expressive than Objective-C. To put it bluntly, the introduction of optional types is both safe and convenient to write.\n\n#### <font size=5 color=#4169E1>2. Implementation of Optional type</font> \n\n```Swift\nvar optionalInteger: Int?\n```\nor\n\n```Swift\nvar optionalInteger: Int！\n```\n\n? and!, they are all syntactic sugar for optional types.\n\n#### <font size=5 color=#4169E1>3. The essence of Optional type</font> \n\nOptional is actually an enumeration (strictly speaking: it should be a high-order abstract type based on enum and generics), which are None and Some(T) respectively. If the optional type is nil, the Case of None will be hit.\n\n```Swift\nenum Optional<T> : NilLiteralConvertible, Reflectable {  \n        case None  \n        case Some(T)  \n \n        //...\n}\n```\n\nIf you hit the Case of Some(T), you will get a \"wrapped\" value (a wrapped value). If you want to get the real value, you need to \"unpack\" it, otherwise you will get the Optional(value ).\n\n\n\n#### <font size=5 color=#4169E1>4. Application of Optional type (unpacking)</font> \n\n<font size=4>**4.1 Optional binding**</font>  \n\nIn this case, if included, assign the value to a temporary constant or variable. Optional binding can be used in if and while statements to evaluate optional values and assign the value to a constant or variable.\n\nBasic writing:\n\n```Swift\nif let constantName = someOptional {\n    statements\n}\n\n```\n\nExample:\n\n```Swift\nvar myString:String?\nmyString = \"Hello, Swift!\"\nif let yourString = myString {\n    print(\"Your string value is - \\(yourString)\")\n}else{\n    print(\"Your string has no value\")\n}\n\n```\n\n<font size=4>**4.2 Force parsing**</font>  \n\nExample:\n\n```Swift\nvar myString:String?\nmyString = \"Hello, world!\"\nif myString != nil {\n    // force parsing\n    print( myString! )\n}else{\n    print(\"myString value is nil\")\n}\n\n```\n\nIf myString is nil at this time, a runtime error will occur in the above code.\n\n \n#### <font size=5 color=#4169E1>5. Notes on Optional type</font> \n\n<font size=4>**5.1 Use! When performing forced unpacking, ensure that the variable value is non-nil**</font> \n\n```Swift\nvar str1:String? // The str1 value may be the value passed or the value obtained from the server\nlet msg = \"Hi\"\nlet txt = msg + str1! // runtime error\n```\nTherefore, it needs to be used with caution.\n\n<font size=4>**5.2 ?? operator (null and operator)**</font>  \n\nThis is a common and very useful operator. When we unpack variables, we are often prompted to provide a default value.\n\n```Swift\n// Writing method one: Optional Binding (Optional Binding)\nvar username = \"\"\nif let name = inputName {\n     username = name\n} else {\n     username = \"Guest\"\n}\n//Writing method 2: ternary operator\nlet username = inputName != nil ? inputName! : \"Guest\"\n```\n\nThe above code is equivalent to:\n\n```Swift\nlet username = inputName ?? \"Guest\" \n```\n\na??b means: Optional type a is first judged as empty. If a contains a value, it is unblocked, otherwise the default value b is returned. Note: Expression a must be of Optional type, and the type of default value b needs to be consistent with the type of value stored in a.\n\nNote: ?? sometimes may also represent multiple Optional, for example:\n\n```Swift\nvar string: String? = \"string\"\nvar anotherString: String?? = string\n\n```\n\nWe can clearly know that anotherString is Optinal<Optional<String>>\n\n\n<font size=4>**5.3 Optional Chaining optional chain**</font>  \n\nSwift official website has the following introduction:\n\n> Optional chaining is a process for querying and calling properties, methods, and subscripts on an optional that might currently be nil. If the optional contains a value, the property, method, or subscript call succeeds; if the optional is nil, the property, method, or subscript call returns nil. Multiple queries can be chained together, and the entire chain fails gracefully if any link in the chain is nil.\n\nRough meaning:\n\nOption chaining is the process of querying and calling properties, methods, and subscripts on an optional chain that may currently be zero. If the optional contains a value, the property, method, or subscript call succeeds; if the optional value is nil, the property, method, or subscript call returns nil. Multiple queries can be chained together, and if any link in the chain is zero, the entire chain fails gracefully.\n\nExamples are as follows:\n\n```Swift\nclass Person {\nvar residence: Residence?\n}\nclass Residence {\n     var numberOfRooms = 1\n}\nlet john = Person()\n//If written as forced unpacking, this code will cause an error when running.\nlet roomCount = john.residence!.numberOfRooms\n//Correct writing\n//john.residence = Residence()\nif let roomCount = john.residence?.numberOfRooms {\n     print(\"John's residence has \\(roomCount) room(s).\")\n} else {\n     print(\"Unable to retrieve the number of rooms.\")\n}\n\n```\n\n#### <font size=5 color=gray>*Reference*</font>\n[1] https://leon0206.blog.csdn.net/article/details/120438470","slug":"Swift/00. Fundamental Concepts/04. Optional type in Swift","published":1,"updated":"2023-11-07T15:40:24.368Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr4y001dvu0mf5795tvg","content":"<p><font color=gray size=2><em>It will take about 2 minutes to finish reading this article.</em></font></p>\n<h4 id=\"1-The-concept-of-Optional-type\"><a href=\"#1-The-concept-of-Optional-type\" class=\"headerlink\" title=\"1. The concept of Optional type\"></a><font size=5 color=#4169E1>1. The concept of Optional type</font></h4><p>Why is the concept of Optional introduced in Swift? It is introduced in the official documentation:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Swift</span> also introduces <span class=\"keyword\">optional</span> types, which handle the absence of a value. <span class=\"type\">Optionals</span> say either “there <span class=\"keyword\">is</span> a value, and it equals x” or “there isn’t a value at all”. <span class=\"type\">Using</span> optionals <span class=\"keyword\">is</span> similar to using <span class=\"literal\">nil</span> with pointers <span class=\"keyword\">in</span> <span class=\"type\">Objective</span><span class=\"operator\">-</span><span class=\"type\">C</span>, but they work <span class=\"keyword\">for</span> <span class=\"keyword\">any</span> type, not just classes. <span class=\"type\">Not</span> only are optionals safer and more expressive than <span class=\"literal\">nil</span> pointers <span class=\"keyword\">in</span> <span class=\"type\">Objective</span><span class=\"operator\">-</span><span class=\"type\">C</span>, they’re at the heart of many of <span class=\"type\">Swift</span>’s most powerful features.</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>To sum it up: the optional type is used to express “there is a value, it is equal to x or there is no value at all”. When we encounter the Optional type, we will obviously know that the value here may be nil, and we must handle it with caution. This approach is safer and more expressive than Objective-C. To put it bluntly, the introduction of optional types is both safe and convenient to write.</p>\n<h4 id=\"2-Implementation-of-Optional-type\"><a href=\"#2-Implementation-of-Optional-type\" class=\"headerlink\" title=\"2. Implementation of Optional type\"></a><font size=5 color=#4169E1>2. Implementation of Optional type</font></h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> optionalInteger: <span class=\"type\">Int</span>?</span><br></pre></td></tr></table></figure>\n<p>or</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> optionalInteger: <span class=\"type\">Int！</span></span><br></pre></td></tr></table></figure>\n\n<p>? and!, they are all syntactic sugar for optional types.</p>\n<h4 id=\"3-The-essence-of-Optional-type\"><a href=\"#3-The-essence-of-Optional-type\" class=\"headerlink\" title=\"3. The essence of Optional type\"></a><font size=5 color=#4169E1>3. The essence of Optional type</font></h4><p>Optional is actually an enumeration (strictly speaking: it should be a high-order abstract type based on enum and generics), which are None and Some(T) respectively. If the optional type is nil, the Case of None will be hit.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Optional</span>&lt;<span class=\"title class_\">T</span>&gt; : <span class=\"title class_\">NilLiteralConvertible</span>, <span class=\"title class_\">Reflectable</span> &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"type\">None</span>  </span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"type\">Some</span>(<span class=\"type\">T</span>)  </span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>If you hit the Case of Some(T), you will get a “wrapped” value (a wrapped value). If you want to get the real value, you need to “unpack” it, otherwise you will get the Optional(value ).</p>\n<h4 id=\"4-Application-of-Optional-type-unpacking\"><a href=\"#4-Application-of-Optional-type-unpacking\" class=\"headerlink\" title=\"4. Application of Optional type (unpacking)\"></a><font size=5 color=#4169E1>4. Application of Optional type (unpacking)</font></h4><p><font size=4><strong>4.1 Optional binding</strong></font>  </p>\n<p>In this case, if included, assign the value to a temporary constant or variable. Optional binding can be used in if and while statements to evaluate optional values and assign the value to a constant or variable.</p>\n<p>Basic writing:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> constantName <span class=\"operator\">=</span> someOptional &#123;</span><br><span class=\"line\">    statements</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Example:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myString:<span class=\"type\">String</span>?</span><br><span class=\"line\">myString <span class=\"operator\">=</span> <span class=\"string\">&quot;Hello, Swift!&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> yourString <span class=\"operator\">=</span> myString &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Your string value is - <span class=\"subst\">\\(yourString)</span>&quot;</span>)</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Your string has no value&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><font size=4><strong>4.2 Force parsing</strong></font>  </p>\n<p>Example:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myString:<span class=\"type\">String</span>?</span><br><span class=\"line\">myString <span class=\"operator\">=</span> <span class=\"string\">&quot;Hello, world!&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> myString <span class=\"operator\">!=</span> <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// force parsing</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>( myString<span class=\"operator\">!</span> )</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;myString value is nil&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>If myString is nil at this time, a runtime error will occur in the above code.</p>\n<h4 id=\"5-Notes-on-Optional-type\"><a href=\"#5-Notes-on-Optional-type\" class=\"headerlink\" title=\"5. Notes on Optional type\"></a><font size=5 color=#4169E1>5. Notes on Optional type</font></h4><p><font size=4><strong>5.1 Use! When performing forced unpacking, ensure that the variable value is non-nil</strong></font> </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str1:<span class=\"type\">String</span>? <span class=\"comment\">// The str1 value may be the value passed or the value obtained from the server</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> msg <span class=\"operator\">=</span> <span class=\"string\">&quot;Hi&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> txt <span class=\"operator\">=</span> msg <span class=\"operator\">+</span> str1<span class=\"operator\">!</span> <span class=\"comment\">// runtime error</span></span><br></pre></td></tr></table></figure>\n<p>Therefore, it needs to be used with caution.</p>\n<p><font size=4><strong>5.2 ?? operator (null and operator)</strong></font>  </p>\n<p>This is a common and very useful operator. When we unpack variables, we are often prompted to provide a default value.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Writing method one: Optional Binding (Optional Binding)</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> username <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> name <span class=\"operator\">=</span> inputName &#123;</span><br><span class=\"line\">     username <span class=\"operator\">=</span> name</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">     username <span class=\"operator\">=</span> <span class=\"string\">&quot;Guest&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Writing method 2: ternary operator</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> username <span class=\"operator\">=</span> inputName <span class=\"operator\">!=</span> <span class=\"literal\">nil</span> <span class=\"operator\">?</span> inputName<span class=\"operator\">!</span> : <span class=\"string\">&quot;Guest&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>The above code is equivalent to:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> username <span class=\"operator\">=</span> inputName <span class=\"operator\">??</span> <span class=\"string\">&quot;Guest&quot;</span> </span><br></pre></td></tr></table></figure>\n\n<p>a??b means: Optional type a is first judged as empty. If a contains a value, it is unblocked, otherwise the default value b is returned. Note: Expression a must be of Optional type, and the type of default value b needs to be consistent with the type of value stored in a.</p>\n<p>Note: ?? sometimes may also represent multiple Optional, for example:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> string: <span class=\"type\">String</span>? <span class=\"operator\">=</span> <span class=\"string\">&quot;string&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> anotherString: <span class=\"type\">String</span>?? <span class=\"operator\">=</span> string</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>We can clearly know that anotherString is Optinal&lt;Optional<String>&gt;</p>\n<p><font size=4><strong>5.3 Optional Chaining optional chain</strong></font>  </p>\n<p>Swift official website has the following introduction:</p>\n<blockquote>\n<p>Optional chaining is a process for querying and calling properties, methods, and subscripts on an optional that might currently be nil. If the optional contains a value, the property, method, or subscript call succeeds; if the optional is nil, the property, method, or subscript call returns nil. Multiple queries can be chained together, and the entire chain fails gracefully if any link in the chain is nil.</p>\n</blockquote>\n<p>Rough meaning:</p>\n<p>Option chaining is the process of querying and calling properties, methods, and subscripts on an optional chain that may currently be zero. If the optional contains a value, the property, method, or subscript call succeeds; if the optional value is nil, the property, method, or subscript call returns nil. Multiple queries can be chained together, and if any link in the chain is zero, the entire chain fails gracefully.</p>\n<p>Examples are as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">var</span> residence: <span class=\"type\">Residence</span>?</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Residence</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">var</span> numberOfRooms <span class=\"operator\">=</span> <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> john <span class=\"operator\">=</span> <span class=\"type\">Person</span>()</span><br><span class=\"line\"><span class=\"comment\">//If written as forced unpacking, this code will cause an error when running.</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> roomCount <span class=\"operator\">=</span> john.residence<span class=\"operator\">!</span>.numberOfRooms</span><br><span class=\"line\"><span class=\"comment\">//Correct writing</span></span><br><span class=\"line\"><span class=\"comment\">//john.residence = Residence()</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> roomCount <span class=\"operator\">=</span> john.residence<span class=\"operator\">?</span>.numberOfRooms &#123;</span><br><span class=\"line\">     <span class=\"built_in\">print</span>(<span class=\"string\">&quot;John&#x27;s residence has <span class=\"subst\">\\(roomCount)</span> room(s).&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">     <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Unable to retrieve the number of rooms.&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=5 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://leon0206.blog.csdn.net/article/details/120438470\">https://leon0206.blog.csdn.net/article/details/120438470</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 2 minutes to finish reading this article.</em></font></p>\n<h4 id=\"1-The-concept-of-Optional-type\"><a href=\"#1-The-concept-of-Optional-type\" class=\"headerlink\" title=\"1. The concept of Optional type\"></a><font size=5 color=#4169E1>1. The concept of Optional type</font></h4><p>Why is the concept of Optional introduced in Swift? It is introduced in the official documentation:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Swift</span> also introduces <span class=\"keyword\">optional</span> types, which handle the absence of a value. <span class=\"type\">Optionals</span> say either “there <span class=\"keyword\">is</span> a value, and it equals x” or “there isn’t a value at all”. <span class=\"type\">Using</span> optionals <span class=\"keyword\">is</span> similar to using <span class=\"literal\">nil</span> with pointers <span class=\"keyword\">in</span> <span class=\"type\">Objective</span><span class=\"operator\">-</span><span class=\"type\">C</span>, but they work <span class=\"keyword\">for</span> <span class=\"keyword\">any</span> type, not just classes. <span class=\"type\">Not</span> only are optionals safer and more expressive than <span class=\"literal\">nil</span> pointers <span class=\"keyword\">in</span> <span class=\"type\">Objective</span><span class=\"operator\">-</span><span class=\"type\">C</span>, they’re at the heart of many of <span class=\"type\">Swift</span>’s most powerful features.</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>To sum it up: the optional type is used to express “there is a value, it is equal to x or there is no value at all”. When we encounter the Optional type, we will obviously know that the value here may be nil, and we must handle it with caution. This approach is safer and more expressive than Objective-C. To put it bluntly, the introduction of optional types is both safe and convenient to write.</p>\n<h4 id=\"2-Implementation-of-Optional-type\"><a href=\"#2-Implementation-of-Optional-type\" class=\"headerlink\" title=\"2. Implementation of Optional type\"></a><font size=5 color=#4169E1>2. Implementation of Optional type</font></h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> optionalInteger: <span class=\"type\">Int</span>?</span><br></pre></td></tr></table></figure>\n<p>or</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> optionalInteger: <span class=\"type\">Int！</span></span><br></pre></td></tr></table></figure>\n\n<p>? and!, they are all syntactic sugar for optional types.</p>\n<h4 id=\"3-The-essence-of-Optional-type\"><a href=\"#3-The-essence-of-Optional-type\" class=\"headerlink\" title=\"3. The essence of Optional type\"></a><font size=5 color=#4169E1>3. The essence of Optional type</font></h4><p>Optional is actually an enumeration (strictly speaking: it should be a high-order abstract type based on enum and generics), which are None and Some(T) respectively. If the optional type is nil, the Case of None will be hit.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Optional</span>&lt;<span class=\"title class_\">T</span>&gt; : <span class=\"title class_\">NilLiteralConvertible</span>, <span class=\"title class_\">Reflectable</span> &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"type\">None</span>  </span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"type\">Some</span>(<span class=\"type\">T</span>)  </span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>If you hit the Case of Some(T), you will get a “wrapped” value (a wrapped value). If you want to get the real value, you need to “unpack” it, otherwise you will get the Optional(value ).</p>\n<h4 id=\"4-Application-of-Optional-type-unpacking\"><a href=\"#4-Application-of-Optional-type-unpacking\" class=\"headerlink\" title=\"4. Application of Optional type (unpacking)\"></a><font size=5 color=#4169E1>4. Application of Optional type (unpacking)</font></h4><p><font size=4><strong>4.1 Optional binding</strong></font>  </p>\n<p>In this case, if included, assign the value to a temporary constant or variable. Optional binding can be used in if and while statements to evaluate optional values and assign the value to a constant or variable.</p>\n<p>Basic writing:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> constantName <span class=\"operator\">=</span> someOptional &#123;</span><br><span class=\"line\">    statements</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Example:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myString:<span class=\"type\">String</span>?</span><br><span class=\"line\">myString <span class=\"operator\">=</span> <span class=\"string\">&quot;Hello, Swift!&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> yourString <span class=\"operator\">=</span> myString &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Your string value is - <span class=\"subst\">\\(yourString)</span>&quot;</span>)</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Your string has no value&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><font size=4><strong>4.2 Force parsing</strong></font>  </p>\n<p>Example:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myString:<span class=\"type\">String</span>?</span><br><span class=\"line\">myString <span class=\"operator\">=</span> <span class=\"string\">&quot;Hello, world!&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> myString <span class=\"operator\">!=</span> <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// force parsing</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>( myString<span class=\"operator\">!</span> )</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;myString value is nil&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>If myString is nil at this time, a runtime error will occur in the above code.</p>\n<h4 id=\"5-Notes-on-Optional-type\"><a href=\"#5-Notes-on-Optional-type\" class=\"headerlink\" title=\"5. Notes on Optional type\"></a><font size=5 color=#4169E1>5. Notes on Optional type</font></h4><p><font size=4><strong>5.1 Use! When performing forced unpacking, ensure that the variable value is non-nil</strong></font> </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str1:<span class=\"type\">String</span>? <span class=\"comment\">// The str1 value may be the value passed or the value obtained from the server</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> msg <span class=\"operator\">=</span> <span class=\"string\">&quot;Hi&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> txt <span class=\"operator\">=</span> msg <span class=\"operator\">+</span> str1<span class=\"operator\">!</span> <span class=\"comment\">// runtime error</span></span><br></pre></td></tr></table></figure>\n<p>Therefore, it needs to be used with caution.</p>\n<p><font size=4><strong>5.2 ?? operator (null and operator)</strong></font>  </p>\n<p>This is a common and very useful operator. When we unpack variables, we are often prompted to provide a default value.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Writing method one: Optional Binding (Optional Binding)</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> username <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> name <span class=\"operator\">=</span> inputName &#123;</span><br><span class=\"line\">     username <span class=\"operator\">=</span> name</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">     username <span class=\"operator\">=</span> <span class=\"string\">&quot;Guest&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Writing method 2: ternary operator</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> username <span class=\"operator\">=</span> inputName <span class=\"operator\">!=</span> <span class=\"literal\">nil</span> <span class=\"operator\">?</span> inputName<span class=\"operator\">!</span> : <span class=\"string\">&quot;Guest&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>The above code is equivalent to:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> username <span class=\"operator\">=</span> inputName <span class=\"operator\">??</span> <span class=\"string\">&quot;Guest&quot;</span> </span><br></pre></td></tr></table></figure>\n\n<p>a??b means: Optional type a is first judged as empty. If a contains a value, it is unblocked, otherwise the default value b is returned. Note: Expression a must be of Optional type, and the type of default value b needs to be consistent with the type of value stored in a.</p>\n<p>Note: ?? sometimes may also represent multiple Optional, for example:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> string: <span class=\"type\">String</span>? <span class=\"operator\">=</span> <span class=\"string\">&quot;string&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> anotherString: <span class=\"type\">String</span>?? <span class=\"operator\">=</span> string</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>We can clearly know that anotherString is Optinal&lt;Optional<String>&gt;</p>\n<p><font size=4><strong>5.3 Optional Chaining optional chain</strong></font>  </p>\n<p>Swift official website has the following introduction:</p>\n<blockquote>\n<p>Optional chaining is a process for querying and calling properties, methods, and subscripts on an optional that might currently be nil. If the optional contains a value, the property, method, or subscript call succeeds; if the optional is nil, the property, method, or subscript call returns nil. Multiple queries can be chained together, and the entire chain fails gracefully if any link in the chain is nil.</p>\n</blockquote>\n<p>Rough meaning:</p>\n<p>Option chaining is the process of querying and calling properties, methods, and subscripts on an optional chain that may currently be zero. If the optional contains a value, the property, method, or subscript call succeeds; if the optional value is nil, the property, method, or subscript call returns nil. Multiple queries can be chained together, and if any link in the chain is zero, the entire chain fails gracefully.</p>\n<p>Examples are as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">var</span> residence: <span class=\"type\">Residence</span>?</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Residence</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">var</span> numberOfRooms <span class=\"operator\">=</span> <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> john <span class=\"operator\">=</span> <span class=\"type\">Person</span>()</span><br><span class=\"line\"><span class=\"comment\">//If written as forced unpacking, this code will cause an error when running.</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> roomCount <span class=\"operator\">=</span> john.residence<span class=\"operator\">!</span>.numberOfRooms</span><br><span class=\"line\"><span class=\"comment\">//Correct writing</span></span><br><span class=\"line\"><span class=\"comment\">//john.residence = Residence()</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> roomCount <span class=\"operator\">=</span> john.residence<span class=\"operator\">?</span>.numberOfRooms &#123;</span><br><span class=\"line\">     <span class=\"built_in\">print</span>(<span class=\"string\">&quot;John&#x27;s residence has <span class=\"subst\">\\(roomCount)</span> room(s).&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">     <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Unable to retrieve the number of rooms.&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=5 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://leon0206.blog.csdn.net/article/details/120438470\">https://leon0206.blog.csdn.net/article/details/120438470</a></p>\n"},{"title":"00. Generation of random numbers","date":"2023-02-28T12:47:59.000Z","_content":"  \n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nIn Swift, we can still use the ** arc4random ** method to obtain random numbers. However, it should be noted that:\n> Arc4random() uses the key stream generator encrypted by Arc4 password to generate a random number in the interval [0, 2 ^ 32). The return type of this function is always UInt32.\n\n```Swift \nlet faceCount = 6\nlet randomResult = Int(arc4random()) % faceCount + 1\nprint(randomResult)\n```\nThe above code is not a problem on 64 bit machines, but there is a risk of crash if you may encounter iPhone 5 and its previous devices. In this case, it is relatively safe to use an improved version:\n\n```Swift\nfunc arc4random_uniform(_: UInt32) -> UInt32\n```\nIt accepts a UInt32 type number as input, and reduces the result to 0 to n-1.\n```Swift\nlet faceCount: UInt32 = 6\nlet randomResult = Int(arc4random_uniform(faceCount)) + 1\nprint(randomResult)\n```\nThe following is a best practice based on Range:\n```Swift\nfunc random(in range: Range<Int>) -> Int {\n    let count = UInt32(range.endIndex - range.startIndex)\n    return  Int(arc4random_uniform(count)) + range.startIndex\n}\nfor _ in 0...100 {\n    let range = Range<Int>(1...6)\n    print(random(in: range))\n}\n```\n \n\n\n\n\n\n\n","source":"_posts/Swift/01. Tips/00. Generation of random numbers.md","raw":"---\ntitle: 00. Generation of random numbers\ndate: 2023-02-28 13:47:59\ncategories: \n- [Swift, 01. Tips]\ntags:\n- random\n---\n  \n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nIn Swift, we can still use the ** arc4random ** method to obtain random numbers. However, it should be noted that:\n> Arc4random() uses the key stream generator encrypted by Arc4 password to generate a random number in the interval [0, 2 ^ 32). The return type of this function is always UInt32.\n\n```Swift \nlet faceCount = 6\nlet randomResult = Int(arc4random()) % faceCount + 1\nprint(randomResult)\n```\nThe above code is not a problem on 64 bit machines, but there is a risk of crash if you may encounter iPhone 5 and its previous devices. In this case, it is relatively safe to use an improved version:\n\n```Swift\nfunc arc4random_uniform(_: UInt32) -> UInt32\n```\nIt accepts a UInt32 type number as input, and reduces the result to 0 to n-1.\n```Swift\nlet faceCount: UInt32 = 6\nlet randomResult = Int(arc4random_uniform(faceCount)) + 1\nprint(randomResult)\n```\nThe following is a best practice based on Range:\n```Swift\nfunc random(in range: Range<Int>) -> Int {\n    let count = UInt32(range.endIndex - range.startIndex)\n    return  Int(arc4random_uniform(count)) + range.startIndex\n}\nfor _ in 0...100 {\n    let range = Range<Int>(1...6)\n    print(random(in: range))\n}\n```\n \n\n\n\n\n\n\n","slug":"Swift/01. Tips/00. Generation of random numbers","published":1,"updated":"2023-11-07T13:54:55.399Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr4y001gvu0m2udgbsi6","content":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>In Swift, we can still use the ** arc4random ** method to obtain random numbers. However, it should be noted that:</p>\n<blockquote>\n<p>Arc4random() uses the key stream generator encrypted by Arc4 password to generate a random number in the interval [0, 2 ^ 32). The return type of this function is always UInt32.</p>\n</blockquote>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> faceCount <span class=\"operator\">=</span> <span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> randomResult <span class=\"operator\">=</span> <span class=\"type\">Int</span>(arc4random()) <span class=\"operator\">%</span> faceCount <span class=\"operator\">+</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(randomResult)</span><br></pre></td></tr></table></figure>\n<p>The above code is not a problem on 64 bit machines, but there is a risk of crash if you may encounter iPhone 5 and its previous devices. In this case, it is relatively safe to use an improved version:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">arc4random_uniform</span>(<span class=\"keyword\">_</span>: <span class=\"type\">UInt32</span>) -&gt; <span class=\"type\">UInt32</span></span><br></pre></td></tr></table></figure>\n<p>It accepts a UInt32 type number as input, and reduces the result to 0 to n-1.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> faceCount: <span class=\"type\">UInt32</span> <span class=\"operator\">=</span> <span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> randomResult <span class=\"operator\">=</span> <span class=\"type\">Int</span>(arc4random_uniform(faceCount)) <span class=\"operator\">+</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(randomResult)</span><br></pre></td></tr></table></figure>\n<p>The following is a best practice based on Range:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">random</span>(<span class=\"params\">in</span> <span class=\"params\">range</span>: <span class=\"type\">Range</span>&lt;<span class=\"type\">Int</span>&gt;) -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> count <span class=\"operator\">=</span> <span class=\"type\">UInt32</span>(range.endIndex <span class=\"operator\">-</span> range.startIndex)</span><br><span class=\"line\">    <span class=\"keyword\">return</span>  <span class=\"type\">Int</span>(arc4random_uniform(count)) <span class=\"operator\">+</span> range.startIndex</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"keyword\">_</span> <span class=\"keyword\">in</span> <span class=\"number\">0</span><span class=\"operator\">...</span><span class=\"number\">100</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> range <span class=\"operator\">=</span> <span class=\"type\">Range</span>&lt;<span class=\"type\">Int</span>&gt;(<span class=\"number\">1</span><span class=\"operator\">...</span><span class=\"number\">6</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(random(in: range))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>In Swift, we can still use the ** arc4random ** method to obtain random numbers. However, it should be noted that:</p>\n<blockquote>\n<p>Arc4random() uses the key stream generator encrypted by Arc4 password to generate a random number in the interval [0, 2 ^ 32). The return type of this function is always UInt32.</p>\n</blockquote>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> faceCount <span class=\"operator\">=</span> <span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> randomResult <span class=\"operator\">=</span> <span class=\"type\">Int</span>(arc4random()) <span class=\"operator\">%</span> faceCount <span class=\"operator\">+</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(randomResult)</span><br></pre></td></tr></table></figure>\n<p>The above code is not a problem on 64 bit machines, but there is a risk of crash if you may encounter iPhone 5 and its previous devices. In this case, it is relatively safe to use an improved version:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">arc4random_uniform</span>(<span class=\"keyword\">_</span>: <span class=\"type\">UInt32</span>) -&gt; <span class=\"type\">UInt32</span></span><br></pre></td></tr></table></figure>\n<p>It accepts a UInt32 type number as input, and reduces the result to 0 to n-1.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> faceCount: <span class=\"type\">UInt32</span> <span class=\"operator\">=</span> <span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> randomResult <span class=\"operator\">=</span> <span class=\"type\">Int</span>(arc4random_uniform(faceCount)) <span class=\"operator\">+</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(randomResult)</span><br></pre></td></tr></table></figure>\n<p>The following is a best practice based on Range:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">random</span>(<span class=\"params\">in</span> <span class=\"params\">range</span>: <span class=\"type\">Range</span>&lt;<span class=\"type\">Int</span>&gt;) -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> count <span class=\"operator\">=</span> <span class=\"type\">UInt32</span>(range.endIndex <span class=\"operator\">-</span> range.startIndex)</span><br><span class=\"line\">    <span class=\"keyword\">return</span>  <span class=\"type\">Int</span>(arc4random_uniform(count)) <span class=\"operator\">+</span> range.startIndex</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"keyword\">_</span> <span class=\"keyword\">in</span> <span class=\"number\">0</span><span class=\"operator\">...</span><span class=\"number\">100</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> range <span class=\"operator\">=</span> <span class=\"type\">Range</span>&lt;<span class=\"type\">Int</span>&gt;(<span class=\"number\">1</span><span class=\"operator\">...</span><span class=\"number\">6</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(random(in: range))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"01. Handling of errors and exceptions","date":"2023-02-28T12:48:59.000Z","_content":"\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\n#### <font size=3 color=#4169E1> 1. Handlings of Objective-C </font>\n \n \nIn Objective-C, we often write code like this:\n```Swift \nNSError *error;\nBOOL success = [data writeToFile: path options: options error: &error];\nif(error) {\n// something happens\n}\n```\nThat is a very good method to handle possible errors. However we often simply this code like this:\n```Swift \n[data writeToFile: path options: options error: nil];\n```\nWe set varaible error to nil, Maybe we don't care about this error when we are developing. However this method can report errors. For example, if the space of the device's disk is full, you will write unsuccessfully, and this error can't not be found easily becase of our laziness.\n\n#### <font size=3 color=#4169E1> 2. Handlings of Swift </font>\nIn Swift, we don't need to write an pointer variable error that waiting to be written by called method. we can use 'try catch' to take place of it. \n```Swift\ndo {\n    try d.write(toFile: \"Hello\", options: [])\n} catch let error as NSError {\n    print (\"Error: \\(error.domain)\")\n}\n```\n\nIt is a very common to use 'try catch' to hand errors and exceptions in Swift. The sample code is as follows.\n```Swift \nenum LoginError: Error {\n    case UserNotFound, UserPasswordNotMatch\n}\n\nfunc login(user: String, password: String) throws {\n    if !users.keys.contains(user) {\n        throw LoginError.UserNotFound\n    }\n    if users[user] != password {\n        throw LoginError.UserPasswordNotMatch\n    }\n    print(\"Login successfully.\")\n}\n// call\nlet users:[String:String] = [\"liudehua\":\"One\", \"wanggang\":\"Two\", \"liming\":\"Three\"]\ndo {\n    try login(user: \"ll\", password: \"234\")\n} catch LoginError.UserNotFound {\n    print(\"UserNotFound\")\n} catch LoginError.UserPasswordNotMatch {\n    print(\"UserPasswordNotMatch\")\n} catch {\n    //default handling, don't delete it, or it would report an error.\n}\n```\n\n\n","source":"_posts/Swift/01. Tips/01. Handling of errors and exceptions.md","raw":"---\ntitle: 01. Handling of errors and exceptions\ndate: 2023-02-28 13:48:59\ncategories: \n- [Swift, 01. Tips]\ntags:\n- errors\n- exceptions\n---\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\n#### <font size=3 color=#4169E1> 1. Handlings of Objective-C </font>\n \n \nIn Objective-C, we often write code like this:\n```Swift \nNSError *error;\nBOOL success = [data writeToFile: path options: options error: &error];\nif(error) {\n// something happens\n}\n```\nThat is a very good method to handle possible errors. However we often simply this code like this:\n```Swift \n[data writeToFile: path options: options error: nil];\n```\nWe set varaible error to nil, Maybe we don't care about this error when we are developing. However this method can report errors. For example, if the space of the device's disk is full, you will write unsuccessfully, and this error can't not be found easily becase of our laziness.\n\n#### <font size=3 color=#4169E1> 2. Handlings of Swift </font>\nIn Swift, we don't need to write an pointer variable error that waiting to be written by called method. we can use 'try catch' to take place of it. \n```Swift\ndo {\n    try d.write(toFile: \"Hello\", options: [])\n} catch let error as NSError {\n    print (\"Error: \\(error.domain)\")\n}\n```\n\nIt is a very common to use 'try catch' to hand errors and exceptions in Swift. The sample code is as follows.\n```Swift \nenum LoginError: Error {\n    case UserNotFound, UserPasswordNotMatch\n}\n\nfunc login(user: String, password: String) throws {\n    if !users.keys.contains(user) {\n        throw LoginError.UserNotFound\n    }\n    if users[user] != password {\n        throw LoginError.UserPasswordNotMatch\n    }\n    print(\"Login successfully.\")\n}\n// call\nlet users:[String:String] = [\"liudehua\":\"One\", \"wanggang\":\"Two\", \"liming\":\"Three\"]\ndo {\n    try login(user: \"ll\", password: \"234\")\n} catch LoginError.UserNotFound {\n    print(\"UserNotFound\")\n} catch LoginError.UserPasswordNotMatch {\n    print(\"UserPasswordNotMatch\")\n} catch {\n    //default handling, don't delete it, or it would report an error.\n}\n```\n\n\n","slug":"Swift/01. Tips/01. Handling of errors and exceptions","published":1,"updated":"2023-11-07T13:54:58.160Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr4z001jvu0m6eeba7lf","content":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<h4 id=\"1-Handlings-of-Objective-C\"><a href=\"#1-Handlings-of-Objective-C\" class=\"headerlink\" title=\" 1. Handlings of Objective-C \"></a><font size=3 color=#4169E1> 1. Handlings of Objective-C </font></h4><p>In Objective-C, we often write code like this:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">NSError</span> <span class=\"operator\">*</span>error;</span><br><span class=\"line\"><span class=\"type\">BOOL</span> success <span class=\"operator\">=</span> [data writeToFile: path options: options error: <span class=\"operator\">&amp;</span>error];</span><br><span class=\"line\"><span class=\"keyword\">if</span>(error) &#123;</span><br><span class=\"line\"><span class=\"comment\">// something happens</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>That is a very good method to handle possible errors. However we often simply this code like this:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[data writeToFile: path options: options error: <span class=\"literal\">nil</span>];</span><br></pre></td></tr></table></figure>\n<p>We set varaible error to nil, Maybe we don’t care about this error when we are developing. However this method can report errors. For example, if the space of the device’s disk is full, you will write unsuccessfully, and this error can’t not be found easily becase of our laziness.</p>\n<h4 id=\"2-Handlings-of-Swift\"><a href=\"#2-Handlings-of-Swift\" class=\"headerlink\" title=\" 2. Handlings of Swift \"></a><font size=3 color=#4169E1> 2. Handlings of Swift </font></h4><p>In Swift, we don’t need to write an pointer variable error that waiting to be written by called method. we can use ‘try catch’ to take place of it. </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> d.write(toFile: <span class=\"string\">&quot;Hello&quot;</span>, options: [])</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> <span class=\"keyword\">let</span> error <span class=\"keyword\">as</span> <span class=\"type\">NSError</span> &#123;</span><br><span class=\"line\">    print (<span class=\"string\">&quot;Error: <span class=\"subst\">\\(error.domain)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>It is a very common to use ‘try catch’ to hand errors and exceptions in Swift. The sample code is as follows.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">LoginError</span>: <span class=\"title class_\">Error</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">UserNotFound</span>, <span class=\"type\">UserPasswordNotMatch</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">login</span>(<span class=\"params\">user</span>: <span class=\"type\">String</span>, <span class=\"params\">password</span>: <span class=\"type\">String</span>) <span class=\"keyword\">throws</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"operator\">!</span>users.keys.contains(user) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"type\">LoginError</span>.<span class=\"type\">UserNotFound</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> users[user] <span class=\"operator\">!=</span> password &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"type\">LoginError</span>.<span class=\"type\">UserPasswordNotMatch</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Login successfully.&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// call</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> users:[<span class=\"type\">String</span>:<span class=\"type\">String</span>] <span class=\"operator\">=</span> [<span class=\"string\">&quot;liudehua&quot;</span>:<span class=\"string\">&quot;One&quot;</span>, <span class=\"string\">&quot;wanggang&quot;</span>:<span class=\"string\">&quot;Two&quot;</span>, <span class=\"string\">&quot;liming&quot;</span>:<span class=\"string\">&quot;Three&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> login(user: <span class=\"string\">&quot;ll&quot;</span>, password: <span class=\"string\">&quot;234&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> <span class=\"type\">LoginError</span>.<span class=\"type\">UserNotFound</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;UserNotFound&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> <span class=\"type\">LoginError</span>.<span class=\"type\">UserPasswordNotMatch</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;UserPasswordNotMatch&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//default handling, don&#x27;t delete it, or it would report an error.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<h4 id=\"1-Handlings-of-Objective-C\"><a href=\"#1-Handlings-of-Objective-C\" class=\"headerlink\" title=\" 1. Handlings of Objective-C \"></a><font size=3 color=#4169E1> 1. Handlings of Objective-C </font></h4><p>In Objective-C, we often write code like this:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">NSError</span> <span class=\"operator\">*</span>error;</span><br><span class=\"line\"><span class=\"type\">BOOL</span> success <span class=\"operator\">=</span> [data writeToFile: path options: options error: <span class=\"operator\">&amp;</span>error];</span><br><span class=\"line\"><span class=\"keyword\">if</span>(error) &#123;</span><br><span class=\"line\"><span class=\"comment\">// something happens</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>That is a very good method to handle possible errors. However we often simply this code like this:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[data writeToFile: path options: options error: <span class=\"literal\">nil</span>];</span><br></pre></td></tr></table></figure>\n<p>We set varaible error to nil, Maybe we don’t care about this error when we are developing. However this method can report errors. For example, if the space of the device’s disk is full, you will write unsuccessfully, and this error can’t not be found easily becase of our laziness.</p>\n<h4 id=\"2-Handlings-of-Swift\"><a href=\"#2-Handlings-of-Swift\" class=\"headerlink\" title=\" 2. Handlings of Swift \"></a><font size=3 color=#4169E1> 2. Handlings of Swift </font></h4><p>In Swift, we don’t need to write an pointer variable error that waiting to be written by called method. we can use ‘try catch’ to take place of it. </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> d.write(toFile: <span class=\"string\">&quot;Hello&quot;</span>, options: [])</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> <span class=\"keyword\">let</span> error <span class=\"keyword\">as</span> <span class=\"type\">NSError</span> &#123;</span><br><span class=\"line\">    print (<span class=\"string\">&quot;Error: <span class=\"subst\">\\(error.domain)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>It is a very common to use ‘try catch’ to hand errors and exceptions in Swift. The sample code is as follows.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">LoginError</span>: <span class=\"title class_\">Error</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">UserNotFound</span>, <span class=\"type\">UserPasswordNotMatch</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">login</span>(<span class=\"params\">user</span>: <span class=\"type\">String</span>, <span class=\"params\">password</span>: <span class=\"type\">String</span>) <span class=\"keyword\">throws</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"operator\">!</span>users.keys.contains(user) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"type\">LoginError</span>.<span class=\"type\">UserNotFound</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> users[user] <span class=\"operator\">!=</span> password &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"type\">LoginError</span>.<span class=\"type\">UserPasswordNotMatch</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Login successfully.&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// call</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> users:[<span class=\"type\">String</span>:<span class=\"type\">String</span>] <span class=\"operator\">=</span> [<span class=\"string\">&quot;liudehua&quot;</span>:<span class=\"string\">&quot;One&quot;</span>, <span class=\"string\">&quot;wanggang&quot;</span>:<span class=\"string\">&quot;Two&quot;</span>, <span class=\"string\">&quot;liming&quot;</span>:<span class=\"string\">&quot;Three&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> login(user: <span class=\"string\">&quot;ll&quot;</span>, password: <span class=\"string\">&quot;234&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> <span class=\"type\">LoginError</span>.<span class=\"type\">UserNotFound</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;UserNotFound&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> <span class=\"type\">LoginError</span>.<span class=\"type\">UserPasswordNotMatch</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;UserPasswordNotMatch&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//default handling, don&#x27;t delete it, or it would report an error.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n"},{"title":"02. Lazy loading and Anonymous function","date":"2023-02-28T12:50:59.000Z","_content":"  \n<font color=gray size=2>*It will take about 1 minutes to finish reading this article.*</font>\n\n\nIn Swift, we use the lazy keyword before the property to simply implement delayed loading, for example:\n\n```Swift \nlazy var str: String = {\n    let str = \"Hello\" \n    print(\"Only access the output for the first time\")\n    return str\n}()\n```\nThis style of writing is similar to closure, but it is actually an kind of anonymous function. We can use anonymous functions to initilize data. As shown below, it is an anoymous function creation call operation:\n```Swift\n{\n\t//anonymous function code\n}()\n```\nWe can try to print the type of this type.\n```Swift\nfunc test() {\n\n}\nfunc TestCase() {\n    let a: () = {}()\n    let b = test\n    print(type(of: a))\n    print(type(of: b))\n}\n```\nThe result is:\n```\n()\n() -> ()\n```\n\n\n\n","source":"_posts/Swift/01. Tips/02. Lazy loading and Anonymous function.md","raw":"---\ntitle: 02. Lazy loading and Anonymous function\ndate: 2023-02-28 13:50:59\ncategories: \n- [Swift, 01. Tips]\ntags:\n- lazy\n- anonymous\n---\n  \n<font color=gray size=2>*It will take about 1 minutes to finish reading this article.*</font>\n\n\nIn Swift, we use the lazy keyword before the property to simply implement delayed loading, for example:\n\n```Swift \nlazy var str: String = {\n    let str = \"Hello\" \n    print(\"Only access the output for the first time\")\n    return str\n}()\n```\nThis style of writing is similar to closure, but it is actually an kind of anonymous function. We can use anonymous functions to initilize data. As shown below, it is an anoymous function creation call operation:\n```Swift\n{\n\t//anonymous function code\n}()\n```\nWe can try to print the type of this type.\n```Swift\nfunc test() {\n\n}\nfunc TestCase() {\n    let a: () = {}()\n    let b = test\n    print(type(of: a))\n    print(type(of: b))\n}\n```\nThe result is:\n```\n()\n() -> ()\n```\n\n\n\n","slug":"Swift/01. Tips/02. Lazy loading and Anonymous function","published":1,"updated":"2023-11-07T13:55:01.951Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr50001lvu0m8k2y3111","content":"<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p>\n<p>In Swift, we use the lazy keyword before the property to simply implement delayed loading, for example:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">lazy</span> <span class=\"keyword\">var</span> str: <span class=\"type\">String</span> <span class=\"operator\">=</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> str <span class=\"operator\">=</span> <span class=\"string\">&quot;Hello&quot;</span> </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Only access the output for the first time&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str</span><br><span class=\"line\">&#125;()</span><br></pre></td></tr></table></figure>\n<p>This style of writing is similar to closure, but it is actually an kind of anonymous function. We can use anonymous functions to initilize data. As shown below, it is an anoymous function creation call operation:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//anonymous function code</span></span><br><span class=\"line\">&#125;()</span><br></pre></td></tr></table></figure>\n<p>We can try to print the type of this type.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">test</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">TestCase</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a: () <span class=\"operator\">=</span> &#123;&#125;()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> b <span class=\"operator\">=</span> test</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(of: a))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(of: b))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The result is:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">()</span><br><span class=\"line\">() -&gt; ()</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p>\n<p>In Swift, we use the lazy keyword before the property to simply implement delayed loading, for example:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">lazy</span> <span class=\"keyword\">var</span> str: <span class=\"type\">String</span> <span class=\"operator\">=</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> str <span class=\"operator\">=</span> <span class=\"string\">&quot;Hello&quot;</span> </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Only access the output for the first time&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str</span><br><span class=\"line\">&#125;()</span><br></pre></td></tr></table></figure>\n<p>This style of writing is similar to closure, but it is actually an kind of anonymous function. We can use anonymous functions to initilize data. As shown below, it is an anoymous function creation call operation:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//anonymous function code</span></span><br><span class=\"line\">&#125;()</span><br></pre></td></tr></table></figure>\n<p>We can try to print the type of this type.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">test</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">TestCase</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a: () <span class=\"operator\">=</span> &#123;&#125;()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> b <span class=\"operator\">=</span> test</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(of: a))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(of: b))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The result is:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">()</span><br><span class=\"line\">() -&gt; ()</span><br></pre></td></tr></table></figure>\n\n\n\n"},{"title":"03. NSString and String","date":"2023-02-28T12:51:59.000Z","_content":"\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\n\n#### <font size=3 color=#4169E1> 1. Mutual Transformation </font>\nNSString and String can transform to each other.   \n<strong> Example Code </strong>\n```Swift \nfunc StringToNSString()  {\n    let a = String(\"1234567890\")\n    let b = a as NSString\n    print(b.integerValue)\n    print(b.length)\n}\n\nfunc NSStringToString()  {\n    let a : NSString = \"1234567890\"\n    let b = a as String\n    print(b)\n}\n```\n\n#### <font size=3 color=#4169E1> 2. Differences between NSString and String </font> \n\nNSString is a subclass of NSObject and that is to say, it is a class that is a reference type.\n```Swift \nopen class NSString : NSObject, NSCopying, NSMutableCopying, NSSecureCoding {\n\n    open var length: Int { get }\n    ...\n}\n```\n\nHowever, String is a value type which is a kind of struct.\n```Swift \n@frozen public struct String {  \n    @inlinable public init()\n    ...\n}\n```\nThey have some identical APIs, but they also have their own independent APIs.  \n```Swift\n    var str = String()\n    str = \"123456\"\n    var nsStr = NSString();\n    nsStr = \"123456\";\n```\n\n<strong>1.1 Similar or Identical APIs</strong>\n<details>\n<summary>Sample Code</summary>\n\n```Swift\n//1. Get the number of characters in the string\nprint(str.count);   //6\nprint(nsStr.length);   //6\n//2. Prefix/Suffix Operations\nvar str = \"123456\";\nstr.hasPrefix(\"12\") //true\nstr.hasSuffix(\"56\") //true\n\nvar nsStr = NSString(stringLiteral: \"123456\");\nnsStr.hasPrefix(\"12\")   //true\nnsStr.hasSuffix(\"56\")   //true\n//3. Prefix/Suffix Operations\nvar str = \"123456-11\";\nstr.components(separatedBy: \"-\");   //[\"123456\", \"11\"]\nvar nsStr = NSString(stringLiteral: \"123456-22\");\nnsStr.components(separatedBy: \"-\"); //[\"123456\", \"22\"]\n//4. Letter case conversion ops for uppercased/lowercased/capitalized\nvar str = \"abc\";\nprint(str.uppercased());    //ABC\nprint(str.lowercased());    //abc\n\nvar nsStr = NSString(stringLiteral: \"cba\");\nprint(nsStr.uppercased);    //CBA\nprint(nsStr.lowercased);    //cba\n\nvar str = \"abc\";\nprint(str.capitalized);    //Abc\n\nvar nsStr = NSString(stringLiteral: \"cba\");\nprint(nsStr.capitalized);    //Cba\n//5. Strip specific strings ops for trimmingCharacters\nlet str = \"\\r abc \";\nlet strTrimed = str.trimmingCharacters(in: .whitespacesAndNewlines)\nprint(strTrimed);   //abc\n\nlet nsStr = NSString(stringLiteral: \"\\r cba \");\nlet nsStrTrimed = nsStr.trimmingCharacters(in: .whitespacesAndNewlines);\nprint(nsStrTrimed); //cba\n//6. Character substitution ops for replacingOccurrences:of:with\nlet str = \"hello String\";\nlet str1 = str.replacingOccurrences(of: \"String\", with: \"world\")\nprint(str1) //\"hello world\"\n\nlet nsStr = NSString(stringLiteral:\"hello NSString\");\nlet nsStr1 = nsStr.replacingOccurrences(of: \"NSString\", with: \"world\")\nprint(nsStr1)   //\"hello world\"\n\n//7. Convert decimal hexadecimal octal data to string\nlet hexStr = String().appendingFormat(\"%x\",16)//10->16，result:\"10\"\nlet oStr = String().appendingFormat(\"%o\",16)//10->8，result:\"20\"\nlet dStr = String().appendingFormat(\"%d\",0x10)//16->10，result:\"16\"\nlet dStr1 = String(format: \"%d\", 0o10)//8->10，result: \"8\"\n\nlet hexNSStr = NSString().appendingFormat(\"%x\", 16)//10->16，result:\"10\"\nlet oNSStr = NSString().appendingFormat(\"%o\",16)//10->8，result:\"20\"\nlet dNSStr = NSString().appendingFormat(\"%d\",0x10)//16->10，result:\"16\"\nlet dNSStr1 = NSString(format: \"%d\", 0o10)//8->10，result: \"8\"\n \n```\n</details>\n\n<strong>1.2 Independent APIs</strong>  \n1.2.1 Independent APIs of String    \n<details>\n<summary>Sample Code</summary>\n\n```Swift\n//1. isEmpty\nvar str = String();\nstr = \"123456\";\nprint(str.isEmpty);\n//2. sorted()\nvar str = \"215423\";\nprint(str.sorted()); //[\"1\", \"2\", \"2\", \"3\", \"4\", \"5\"]\n\n//3. filter()\nlet str = \"12 34 56\";\nlet filter = str.filter { (char) -> Bool in\n    char != \" \"\n};\nprint(filter);//123456\n\n//4. enumerated()\nlet str = \"123456\";\nfor data in str.enumerated() {\n    print(data);\n}\n```\n</details>\n\n1.2.2 Independent APIs of NSString\n<details>\n<summary>Sample Code</summary>\n\n```Swift\n// 1. initialize methods\nvar nsStr = NSString(stringLiteral: \"123456\");\nvar nsStr = NSString.init(string: \"123456\");\n\n// 2. boolValue\nvar nsStr = NSString(stringLiteral: \"123456\");\nprint(nsStr.boolValue);//true\n\n// 3. isEqual()\nvar nsStr = NSString(stringLiteral: \"123456\");\nprint(nsStr.isEqual(to: \"123456\"));//true\n\n// 4. Numeric Ops\nvar nsStr = NSString(stringLiteral: \"123456\")\nprint(nsStr.intValue);\nprint(nsStr.floatValue);\nprint(nsStr.doubleValue);\n```\n</details>\n","source":"_posts/Swift/01. Tips/03. NSString and String.md","raw":"---\ntitle: 03. NSString and String\ndate: 2023-02-28 13:51:59\ncategories: \n- [Swift, 01. Tips]\ntags:\n- nsstring\n- string\n---\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\n\n#### <font size=3 color=#4169E1> 1. Mutual Transformation </font>\nNSString and String can transform to each other.   \n<strong> Example Code </strong>\n```Swift \nfunc StringToNSString()  {\n    let a = String(\"1234567890\")\n    let b = a as NSString\n    print(b.integerValue)\n    print(b.length)\n}\n\nfunc NSStringToString()  {\n    let a : NSString = \"1234567890\"\n    let b = a as String\n    print(b)\n}\n```\n\n#### <font size=3 color=#4169E1> 2. Differences between NSString and String </font> \n\nNSString is a subclass of NSObject and that is to say, it is a class that is a reference type.\n```Swift \nopen class NSString : NSObject, NSCopying, NSMutableCopying, NSSecureCoding {\n\n    open var length: Int { get }\n    ...\n}\n```\n\nHowever, String is a value type which is a kind of struct.\n```Swift \n@frozen public struct String {  \n    @inlinable public init()\n    ...\n}\n```\nThey have some identical APIs, but they also have their own independent APIs.  \n```Swift\n    var str = String()\n    str = \"123456\"\n    var nsStr = NSString();\n    nsStr = \"123456\";\n```\n\n<strong>1.1 Similar or Identical APIs</strong>\n<details>\n<summary>Sample Code</summary>\n\n```Swift\n//1. Get the number of characters in the string\nprint(str.count);   //6\nprint(nsStr.length);   //6\n//2. Prefix/Suffix Operations\nvar str = \"123456\";\nstr.hasPrefix(\"12\") //true\nstr.hasSuffix(\"56\") //true\n\nvar nsStr = NSString(stringLiteral: \"123456\");\nnsStr.hasPrefix(\"12\")   //true\nnsStr.hasSuffix(\"56\")   //true\n//3. Prefix/Suffix Operations\nvar str = \"123456-11\";\nstr.components(separatedBy: \"-\");   //[\"123456\", \"11\"]\nvar nsStr = NSString(stringLiteral: \"123456-22\");\nnsStr.components(separatedBy: \"-\"); //[\"123456\", \"22\"]\n//4. Letter case conversion ops for uppercased/lowercased/capitalized\nvar str = \"abc\";\nprint(str.uppercased());    //ABC\nprint(str.lowercased());    //abc\n\nvar nsStr = NSString(stringLiteral: \"cba\");\nprint(nsStr.uppercased);    //CBA\nprint(nsStr.lowercased);    //cba\n\nvar str = \"abc\";\nprint(str.capitalized);    //Abc\n\nvar nsStr = NSString(stringLiteral: \"cba\");\nprint(nsStr.capitalized);    //Cba\n//5. Strip specific strings ops for trimmingCharacters\nlet str = \"\\r abc \";\nlet strTrimed = str.trimmingCharacters(in: .whitespacesAndNewlines)\nprint(strTrimed);   //abc\n\nlet nsStr = NSString(stringLiteral: \"\\r cba \");\nlet nsStrTrimed = nsStr.trimmingCharacters(in: .whitespacesAndNewlines);\nprint(nsStrTrimed); //cba\n//6. Character substitution ops for replacingOccurrences:of:with\nlet str = \"hello String\";\nlet str1 = str.replacingOccurrences(of: \"String\", with: \"world\")\nprint(str1) //\"hello world\"\n\nlet nsStr = NSString(stringLiteral:\"hello NSString\");\nlet nsStr1 = nsStr.replacingOccurrences(of: \"NSString\", with: \"world\")\nprint(nsStr1)   //\"hello world\"\n\n//7. Convert decimal hexadecimal octal data to string\nlet hexStr = String().appendingFormat(\"%x\",16)//10->16，result:\"10\"\nlet oStr = String().appendingFormat(\"%o\",16)//10->8，result:\"20\"\nlet dStr = String().appendingFormat(\"%d\",0x10)//16->10，result:\"16\"\nlet dStr1 = String(format: \"%d\", 0o10)//8->10，result: \"8\"\n\nlet hexNSStr = NSString().appendingFormat(\"%x\", 16)//10->16，result:\"10\"\nlet oNSStr = NSString().appendingFormat(\"%o\",16)//10->8，result:\"20\"\nlet dNSStr = NSString().appendingFormat(\"%d\",0x10)//16->10，result:\"16\"\nlet dNSStr1 = NSString(format: \"%d\", 0o10)//8->10，result: \"8\"\n \n```\n</details>\n\n<strong>1.2 Independent APIs</strong>  \n1.2.1 Independent APIs of String    \n<details>\n<summary>Sample Code</summary>\n\n```Swift\n//1. isEmpty\nvar str = String();\nstr = \"123456\";\nprint(str.isEmpty);\n//2. sorted()\nvar str = \"215423\";\nprint(str.sorted()); //[\"1\", \"2\", \"2\", \"3\", \"4\", \"5\"]\n\n//3. filter()\nlet str = \"12 34 56\";\nlet filter = str.filter { (char) -> Bool in\n    char != \" \"\n};\nprint(filter);//123456\n\n//4. enumerated()\nlet str = \"123456\";\nfor data in str.enumerated() {\n    print(data);\n}\n```\n</details>\n\n1.2.2 Independent APIs of NSString\n<details>\n<summary>Sample Code</summary>\n\n```Swift\n// 1. initialize methods\nvar nsStr = NSString(stringLiteral: \"123456\");\nvar nsStr = NSString.init(string: \"123456\");\n\n// 2. boolValue\nvar nsStr = NSString(stringLiteral: \"123456\");\nprint(nsStr.boolValue);//true\n\n// 3. isEqual()\nvar nsStr = NSString(stringLiteral: \"123456\");\nprint(nsStr.isEqual(to: \"123456\"));//true\n\n// 4. Numeric Ops\nvar nsStr = NSString(stringLiteral: \"123456\")\nprint(nsStr.intValue);\nprint(nsStr.floatValue);\nprint(nsStr.doubleValue);\n```\n</details>\n","slug":"Swift/01. Tips/03. NSString and String","published":1,"updated":"2023-11-07T13:55:04.967Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr51001mvu0mb4peg0go","content":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<h4 id=\"1-Mutual-Transformation\"><a href=\"#1-Mutual-Transformation\" class=\"headerlink\" title=\" 1. Mutual Transformation \"></a><font size=3 color=#4169E1> 1. Mutual Transformation </font></h4><p>NSString and String can transform to each other.<br><strong> Example Code </strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">StringToNSString</span>()  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a <span class=\"operator\">=</span> <span class=\"type\">String</span>(<span class=\"string\">&quot;1234567890&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> b <span class=\"operator\">=</span> a <span class=\"keyword\">as</span> <span class=\"type\">NSString</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(b.integerValue)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(b.length)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">NSStringToString</span>()  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a : <span class=\"type\">NSString</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;1234567890&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> b <span class=\"operator\">=</span> a <span class=\"keyword\">as</span> <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(b)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-Differences-between-NSString-and-String\"><a href=\"#2-Differences-between-NSString-and-String\" class=\"headerlink\" title=\" 2. Differences between NSString and String \"></a><font size=3 color=#4169E1> 2. Differences between NSString and String </font></h4><p>NSString is a subclass of NSObject and that is to say, it is a class that is a reference type.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">open</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NSString</span> : <span class=\"title class_\">NSObject</span>, <span class=\"title class_\">NSCopying</span>, <span class=\"title class_\">NSMutableCopying</span>, <span class=\"title class_\">NSSecureCoding</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">open</span> <span class=\"keyword\">var</span> length: <span class=\"type\">Int</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\">    <span class=\"operator\">...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>However, String is a value type which is a kind of struct.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@frozen</span> <span class=\"keyword\">public</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">String</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">@inlinable</span> <span class=\"keyword\">public</span> <span class=\"keyword\">init</span>()</span><br><span class=\"line\">    <span class=\"operator\">...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>They have some identical APIs, but they also have their own independent APIs.  </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str <span class=\"operator\">=</span> <span class=\"type\">String</span>()</span><br><span class=\"line\">str <span class=\"operator\">=</span> <span class=\"string\">&quot;123456&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>();</span><br><span class=\"line\">nsStr <span class=\"operator\">=</span> <span class=\"string\">&quot;123456&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>1.1 Similar or Identical APIs</strong></p>\n<details>\n<summary>Sample Code</summary>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1. Get the number of characters in the string</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str.count);   <span class=\"comment\">//6</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(nsStr.length);   <span class=\"comment\">//6</span></span><br><span class=\"line\"><span class=\"comment\">//2. Prefix/Suffix Operations</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str <span class=\"operator\">=</span> <span class=\"string\">&quot;123456&quot;</span>;</span><br><span class=\"line\">str.hasPrefix(<span class=\"string\">&quot;12&quot;</span>) <span class=\"comment\">//true</span></span><br><span class=\"line\">str.hasSuffix(<span class=\"string\">&quot;56&quot;</span>) <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>(stringLiteral: <span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\">nsStr.hasPrefix(<span class=\"string\">&quot;12&quot;</span>)   <span class=\"comment\">//true</span></span><br><span class=\"line\">nsStr.hasSuffix(<span class=\"string\">&quot;56&quot;</span>)   <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"comment\">//3. Prefix/Suffix Operations</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str <span class=\"operator\">=</span> <span class=\"string\">&quot;123456-11&quot;</span>;</span><br><span class=\"line\">str.components(separatedBy: <span class=\"string\">&quot;-&quot;</span>);   <span class=\"comment\">//[&quot;123456&quot;, &quot;11&quot;]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>(stringLiteral: <span class=\"string\">&quot;123456-22&quot;</span>);</span><br><span class=\"line\">nsStr.components(separatedBy: <span class=\"string\">&quot;-&quot;</span>); <span class=\"comment\">//[&quot;123456&quot;, &quot;22&quot;]</span></span><br><span class=\"line\"><span class=\"comment\">//4. Letter case conversion ops for uppercased/lowercased/capitalized</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str <span class=\"operator\">=</span> <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str.uppercased());    <span class=\"comment\">//ABC</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str.lowercased());    <span class=\"comment\">//abc</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>(stringLiteral: <span class=\"string\">&quot;cba&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nsStr.uppercased);    <span class=\"comment\">//CBA</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(nsStr.lowercased);    <span class=\"comment\">//cba</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> str <span class=\"operator\">=</span> <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str.capitalized);    <span class=\"comment\">//Abc</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>(stringLiteral: <span class=\"string\">&quot;cba&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nsStr.capitalized);    <span class=\"comment\">//Cba</span></span><br><span class=\"line\"><span class=\"comment\">//5. Strip specific strings ops for trimmingCharacters</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> str <span class=\"operator\">=</span> <span class=\"string\">&quot;<span class=\"subst\">\\r</span> abc &quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> strTrimed <span class=\"operator\">=</span> str.trimmingCharacters(in: .whitespacesAndNewlines)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(strTrimed);   <span class=\"comment\">//abc</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>(stringLiteral: <span class=\"string\">&quot;<span class=\"subst\">\\r</span> cba &quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> nsStrTrimed <span class=\"operator\">=</span> nsStr.trimmingCharacters(in: .whitespacesAndNewlines);</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nsStrTrimed); <span class=\"comment\">//cba</span></span><br><span class=\"line\"><span class=\"comment\">//6. Character substitution ops for replacingOccurrences:of:with</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> str <span class=\"operator\">=</span> <span class=\"string\">&quot;hello String&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> str1 <span class=\"operator\">=</span> str.replacingOccurrences(of: <span class=\"string\">&quot;String&quot;</span>, with: <span class=\"string\">&quot;world&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str1) <span class=\"comment\">//&quot;hello world&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>(stringLiteral:<span class=\"string\">&quot;hello NSString&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> nsStr1 <span class=\"operator\">=</span> nsStr.replacingOccurrences(of: <span class=\"string\">&quot;NSString&quot;</span>, with: <span class=\"string\">&quot;world&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nsStr1)   <span class=\"comment\">//&quot;hello world&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//7. Convert decimal hexadecimal octal data to string</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> hexStr <span class=\"operator\">=</span> <span class=\"type\">String</span>().appendingFormat(<span class=\"string\">&quot;%x&quot;</span>,<span class=\"number\">16</span>)<span class=\"comment\">//10-&gt;16，result:&quot;10&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> oStr <span class=\"operator\">=</span> <span class=\"type\">String</span>().appendingFormat(<span class=\"string\">&quot;%o&quot;</span>,<span class=\"number\">16</span>)<span class=\"comment\">//10-&gt;8，result:&quot;20&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> dStr <span class=\"operator\">=</span> <span class=\"type\">String</span>().appendingFormat(<span class=\"string\">&quot;%d&quot;</span>,<span class=\"number\">0x10</span>)<span class=\"comment\">//16-&gt;10，result:&quot;16&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> dStr1 <span class=\"operator\">=</span> <span class=\"type\">String</span>(format: <span class=\"string\">&quot;%d&quot;</span>, <span class=\"number\">0o10</span>)<span class=\"comment\">//8-&gt;10，result: &quot;8&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> hexNSStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>().appendingFormat(<span class=\"string\">&quot;%x&quot;</span>, <span class=\"number\">16</span>)<span class=\"comment\">//10-&gt;16，result:&quot;10&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> oNSStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>().appendingFormat(<span class=\"string\">&quot;%o&quot;</span>,<span class=\"number\">16</span>)<span class=\"comment\">//10-&gt;8，result:&quot;20&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> dNSStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>().appendingFormat(<span class=\"string\">&quot;%d&quot;</span>,<span class=\"number\">0x10</span>)<span class=\"comment\">//16-&gt;10，result:&quot;16&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> dNSStr1 <span class=\"operator\">=</span> <span class=\"type\">NSString</span>(format: <span class=\"string\">&quot;%d&quot;</span>, <span class=\"number\">0o10</span>)<span class=\"comment\">//8-&gt;10，result: &quot;8&quot;</span></span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n</details>\n\n<p><strong>1.2 Independent APIs</strong><br>1.2.1 Independent APIs of String    </p>\n<details>\n<summary>Sample Code</summary>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1. isEmpty</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str <span class=\"operator\">=</span> <span class=\"type\">String</span>();</span><br><span class=\"line\">str <span class=\"operator\">=</span> <span class=\"string\">&quot;123456&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str.isEmpty);</span><br><span class=\"line\"><span class=\"comment\">//2. sorted()</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str <span class=\"operator\">=</span> <span class=\"string\">&quot;215423&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str.sorted()); <span class=\"comment\">//[&quot;1&quot;, &quot;2&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//3. filter()</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> str <span class=\"operator\">=</span> <span class=\"string\">&quot;12 34 56&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> filter <span class=\"operator\">=</span> str.filter &#123; (char) -&gt; <span class=\"type\">Bool</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    char <span class=\"operator\">!=</span> <span class=\"string\">&quot; &quot;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(filter);<span class=\"comment\">//123456</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//4. enumerated()</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> str <span class=\"operator\">=</span> <span class=\"string\">&quot;123456&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> str.enumerated() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(data);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</details>\n\n<p>1.2.2 Independent APIs of NSString</p>\n<details>\n<summary>Sample Code</summary>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. initialize methods</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>(stringLiteral: <span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>.<span class=\"keyword\">init</span>(string: <span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. boolValue</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>(stringLiteral: <span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nsStr.boolValue);<span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3. isEqual()</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>(stringLiteral: <span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nsStr.isEqual(to: <span class=\"string\">&quot;123456&quot;</span>));<span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 4. Numeric Ops</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>(stringLiteral: <span class=\"string\">&quot;123456&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nsStr.intValue);</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nsStr.floatValue);</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nsStr.doubleValue);</span><br></pre></td></tr></table></figure>\n</details>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<h4 id=\"1-Mutual-Transformation\"><a href=\"#1-Mutual-Transformation\" class=\"headerlink\" title=\" 1. Mutual Transformation \"></a><font size=3 color=#4169E1> 1. Mutual Transformation </font></h4><p>NSString and String can transform to each other.<br><strong> Example Code </strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">StringToNSString</span>()  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a <span class=\"operator\">=</span> <span class=\"type\">String</span>(<span class=\"string\">&quot;1234567890&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> b <span class=\"operator\">=</span> a <span class=\"keyword\">as</span> <span class=\"type\">NSString</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(b.integerValue)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(b.length)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">NSStringToString</span>()  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a : <span class=\"type\">NSString</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;1234567890&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> b <span class=\"operator\">=</span> a <span class=\"keyword\">as</span> <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(b)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-Differences-between-NSString-and-String\"><a href=\"#2-Differences-between-NSString-and-String\" class=\"headerlink\" title=\" 2. Differences between NSString and String \"></a><font size=3 color=#4169E1> 2. Differences between NSString and String </font></h4><p>NSString is a subclass of NSObject and that is to say, it is a class that is a reference type.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">open</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NSString</span> : <span class=\"title class_\">NSObject</span>, <span class=\"title class_\">NSCopying</span>, <span class=\"title class_\">NSMutableCopying</span>, <span class=\"title class_\">NSSecureCoding</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">open</span> <span class=\"keyword\">var</span> length: <span class=\"type\">Int</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\">    <span class=\"operator\">...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>However, String is a value type which is a kind of struct.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@frozen</span> <span class=\"keyword\">public</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">String</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">@inlinable</span> <span class=\"keyword\">public</span> <span class=\"keyword\">init</span>()</span><br><span class=\"line\">    <span class=\"operator\">...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>They have some identical APIs, but they also have their own independent APIs.  </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str <span class=\"operator\">=</span> <span class=\"type\">String</span>()</span><br><span class=\"line\">str <span class=\"operator\">=</span> <span class=\"string\">&quot;123456&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>();</span><br><span class=\"line\">nsStr <span class=\"operator\">=</span> <span class=\"string\">&quot;123456&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>1.1 Similar or Identical APIs</strong></p>\n<details>\n<summary>Sample Code</summary>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1. Get the number of characters in the string</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str.count);   <span class=\"comment\">//6</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(nsStr.length);   <span class=\"comment\">//6</span></span><br><span class=\"line\"><span class=\"comment\">//2. Prefix/Suffix Operations</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str <span class=\"operator\">=</span> <span class=\"string\">&quot;123456&quot;</span>;</span><br><span class=\"line\">str.hasPrefix(<span class=\"string\">&quot;12&quot;</span>) <span class=\"comment\">//true</span></span><br><span class=\"line\">str.hasSuffix(<span class=\"string\">&quot;56&quot;</span>) <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>(stringLiteral: <span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\">nsStr.hasPrefix(<span class=\"string\">&quot;12&quot;</span>)   <span class=\"comment\">//true</span></span><br><span class=\"line\">nsStr.hasSuffix(<span class=\"string\">&quot;56&quot;</span>)   <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"comment\">//3. Prefix/Suffix Operations</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str <span class=\"operator\">=</span> <span class=\"string\">&quot;123456-11&quot;</span>;</span><br><span class=\"line\">str.components(separatedBy: <span class=\"string\">&quot;-&quot;</span>);   <span class=\"comment\">//[&quot;123456&quot;, &quot;11&quot;]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>(stringLiteral: <span class=\"string\">&quot;123456-22&quot;</span>);</span><br><span class=\"line\">nsStr.components(separatedBy: <span class=\"string\">&quot;-&quot;</span>); <span class=\"comment\">//[&quot;123456&quot;, &quot;22&quot;]</span></span><br><span class=\"line\"><span class=\"comment\">//4. Letter case conversion ops for uppercased/lowercased/capitalized</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str <span class=\"operator\">=</span> <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str.uppercased());    <span class=\"comment\">//ABC</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str.lowercased());    <span class=\"comment\">//abc</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>(stringLiteral: <span class=\"string\">&quot;cba&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nsStr.uppercased);    <span class=\"comment\">//CBA</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(nsStr.lowercased);    <span class=\"comment\">//cba</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> str <span class=\"operator\">=</span> <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str.capitalized);    <span class=\"comment\">//Abc</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>(stringLiteral: <span class=\"string\">&quot;cba&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nsStr.capitalized);    <span class=\"comment\">//Cba</span></span><br><span class=\"line\"><span class=\"comment\">//5. Strip specific strings ops for trimmingCharacters</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> str <span class=\"operator\">=</span> <span class=\"string\">&quot;<span class=\"subst\">\\r</span> abc &quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> strTrimed <span class=\"operator\">=</span> str.trimmingCharacters(in: .whitespacesAndNewlines)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(strTrimed);   <span class=\"comment\">//abc</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>(stringLiteral: <span class=\"string\">&quot;<span class=\"subst\">\\r</span> cba &quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> nsStrTrimed <span class=\"operator\">=</span> nsStr.trimmingCharacters(in: .whitespacesAndNewlines);</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nsStrTrimed); <span class=\"comment\">//cba</span></span><br><span class=\"line\"><span class=\"comment\">//6. Character substitution ops for replacingOccurrences:of:with</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> str <span class=\"operator\">=</span> <span class=\"string\">&quot;hello String&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> str1 <span class=\"operator\">=</span> str.replacingOccurrences(of: <span class=\"string\">&quot;String&quot;</span>, with: <span class=\"string\">&quot;world&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str1) <span class=\"comment\">//&quot;hello world&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>(stringLiteral:<span class=\"string\">&quot;hello NSString&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> nsStr1 <span class=\"operator\">=</span> nsStr.replacingOccurrences(of: <span class=\"string\">&quot;NSString&quot;</span>, with: <span class=\"string\">&quot;world&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nsStr1)   <span class=\"comment\">//&quot;hello world&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//7. Convert decimal hexadecimal octal data to string</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> hexStr <span class=\"operator\">=</span> <span class=\"type\">String</span>().appendingFormat(<span class=\"string\">&quot;%x&quot;</span>,<span class=\"number\">16</span>)<span class=\"comment\">//10-&gt;16，result:&quot;10&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> oStr <span class=\"operator\">=</span> <span class=\"type\">String</span>().appendingFormat(<span class=\"string\">&quot;%o&quot;</span>,<span class=\"number\">16</span>)<span class=\"comment\">//10-&gt;8，result:&quot;20&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> dStr <span class=\"operator\">=</span> <span class=\"type\">String</span>().appendingFormat(<span class=\"string\">&quot;%d&quot;</span>,<span class=\"number\">0x10</span>)<span class=\"comment\">//16-&gt;10，result:&quot;16&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> dStr1 <span class=\"operator\">=</span> <span class=\"type\">String</span>(format: <span class=\"string\">&quot;%d&quot;</span>, <span class=\"number\">0o10</span>)<span class=\"comment\">//8-&gt;10，result: &quot;8&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> hexNSStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>().appendingFormat(<span class=\"string\">&quot;%x&quot;</span>, <span class=\"number\">16</span>)<span class=\"comment\">//10-&gt;16，result:&quot;10&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> oNSStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>().appendingFormat(<span class=\"string\">&quot;%o&quot;</span>,<span class=\"number\">16</span>)<span class=\"comment\">//10-&gt;8，result:&quot;20&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> dNSStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>().appendingFormat(<span class=\"string\">&quot;%d&quot;</span>,<span class=\"number\">0x10</span>)<span class=\"comment\">//16-&gt;10，result:&quot;16&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> dNSStr1 <span class=\"operator\">=</span> <span class=\"type\">NSString</span>(format: <span class=\"string\">&quot;%d&quot;</span>, <span class=\"number\">0o10</span>)<span class=\"comment\">//8-&gt;10，result: &quot;8&quot;</span></span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n</details>\n\n<p><strong>1.2 Independent APIs</strong><br>1.2.1 Independent APIs of String    </p>\n<details>\n<summary>Sample Code</summary>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1. isEmpty</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str <span class=\"operator\">=</span> <span class=\"type\">String</span>();</span><br><span class=\"line\">str <span class=\"operator\">=</span> <span class=\"string\">&quot;123456&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str.isEmpty);</span><br><span class=\"line\"><span class=\"comment\">//2. sorted()</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str <span class=\"operator\">=</span> <span class=\"string\">&quot;215423&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str.sorted()); <span class=\"comment\">//[&quot;1&quot;, &quot;2&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//3. filter()</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> str <span class=\"operator\">=</span> <span class=\"string\">&quot;12 34 56&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> filter <span class=\"operator\">=</span> str.filter &#123; (char) -&gt; <span class=\"type\">Bool</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    char <span class=\"operator\">!=</span> <span class=\"string\">&quot; &quot;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(filter);<span class=\"comment\">//123456</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//4. enumerated()</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> str <span class=\"operator\">=</span> <span class=\"string\">&quot;123456&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> str.enumerated() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(data);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</details>\n\n<p>1.2.2 Independent APIs of NSString</p>\n<details>\n<summary>Sample Code</summary>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. initialize methods</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>(stringLiteral: <span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>.<span class=\"keyword\">init</span>(string: <span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. boolValue</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>(stringLiteral: <span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nsStr.boolValue);<span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3. isEqual()</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>(stringLiteral: <span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nsStr.isEqual(to: <span class=\"string\">&quot;123456&quot;</span>));<span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 4. Numeric Ops</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> nsStr <span class=\"operator\">=</span> <span class=\"type\">NSString</span>(stringLiteral: <span class=\"string\">&quot;123456&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nsStr.intValue);</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nsStr.floatValue);</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nsStr.doubleValue);</span><br></pre></td></tr></table></figure>\n</details>\n"},{"title":"04. Set Read-only permission of the property","date":"2023-02-28T12:52:59.000Z","_content":"  \n<font color=gray size=2>*It will take about 1 minutes to finish reading this article.*</font>\n\n  \nIn Swift, there is no keyword \"readonly\" like Objective-C to set read-only access permissions. How can Swift implement read-only access permissions? We can do this as follows:\n\n```Swift \nclass MyClass {\n    private(set) var name: String?\n} \n```\nExternal access is normal:\n```\nlet a = ClassA()\nprint(a.title)\n```\nBut the following is wrong:\n```\na.title = \"1234\"\n```\nThe following errors will be reported:\n```\nCannot assign to property: 'title' setter is inaccessible\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/Swift/01. Tips/04. Set Read-only permission of the property.md","raw":"---\ntitle: 04. Set Read-only permission of the property\ndate: 2023-02-28 13:52:59\ncategories: \n- [Swift, 01. Tips]\ntags:\n- read-only\n---\n  \n<font color=gray size=2>*It will take about 1 minutes to finish reading this article.*</font>\n\n  \nIn Swift, there is no keyword \"readonly\" like Objective-C to set read-only access permissions. How can Swift implement read-only access permissions? We can do this as follows:\n\n```Swift \nclass MyClass {\n    private(set) var name: String?\n} \n```\nExternal access is normal:\n```\nlet a = ClassA()\nprint(a.title)\n```\nBut the following is wrong:\n```\na.title = \"1234\"\n```\nThe following errors will be reported:\n```\nCannot assign to property: 'title' setter is inaccessible\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"Swift/01. Tips/04. Set Read-only permission of the property","published":1,"updated":"2023-11-07T13:55:07.290Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr51001qvu0mc40mam8x","content":"<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p>\n<p>In Swift, there is no keyword “readonly” like Objective-C to set read-only access permissions. How can Swift implement read-only access permissions? We can do this as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private(set)</span> <span class=\"keyword\">var</span> name: <span class=\"type\">String</span>?</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>External access is normal:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a = ClassA()</span><br><span class=\"line\">print(a.title)</span><br></pre></td></tr></table></figure>\n<p>But the following is wrong:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a.title = &quot;1234&quot;</span><br></pre></td></tr></table></figure>\n<p>The following errors will be reported:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cannot assign to property: &#x27;title&#x27; setter is inaccessible</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p>\n<p>In Swift, there is no keyword “readonly” like Objective-C to set read-only access permissions. How can Swift implement read-only access permissions? We can do this as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private(set)</span> <span class=\"keyword\">var</span> name: <span class=\"type\">String</span>?</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>External access is normal:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a = ClassA()</span><br><span class=\"line\">print(a.title)</span><br></pre></td></tr></table></figure>\n<p>But the following is wrong:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a.title = &quot;1234&quot;</span><br></pre></td></tr></table></figure>\n<p>The following errors will be reported:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cannot assign to property: &#x27;title&#x27; setter is inaccessible</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"title":"05. Computed properties and Stored properties","date":"2023-02-28T12:53:59.000Z","_content":"\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\n<strong> Example Code </strong>\n```Swift \n//arr1\nvar arr1:[Int] =  {\n    return [1,2,3];\n}()\n//arr2\nvar arr2:[Int] {\n    return [1,2,3];\n}\n//arr3\nvar arr3:[Int] {\n    get {\n        return [1,2,3];\n    }\n}\n//arr4\nvar arr4:[Int] {\n    get {\n        return [1];\n    }\n    set {\n        print(newValue);\n    }\n}\n```\n> arr1 declares a Stored-Property assigned value through a closure operation.    \n> arr2 declares a read-only Computed-Property.    \n> arr3 declares a read-only Computed-Property too.    \n> arr4 declares a read-write Computed-Property too.\n\nIt can be seen that the Stored-Property can be directly read and written. The Computed-Property cannot be operated directly. It is only used for calculation and has no specific value.\n\n> Note:\n> 1. Computed-Properties can be used for classes, structures, and enumerations, while Stored-Properties can only be used for classes and structures.    \n> 2. The Stored-Properties can be defined with the keyword 'var' or the keyword let'. The Computed-Property can only be defined with the keyword 'var'.   \n> 3. Computed-Properties do not directly store values, but provide a getter and an optional setter to indirectly obtain and set the values of other properties or variables.\n\n \n#### <font size=3 color=gray>*Reference*</font>\n<https://cloud.tencent.com/developer/article/1610855>  \n","source":"_posts/Swift/01. Tips/05. Computed properties and Stored properties.md","raw":"---\ntitle: 05. Computed properties and Stored properties\ndate: 2023-02-28 13:53:59\ncategories: \n- [Swift, 01. Tips]\ntags:\n- computed\n- stored\n---\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\n<strong> Example Code </strong>\n```Swift \n//arr1\nvar arr1:[Int] =  {\n    return [1,2,3];\n}()\n//arr2\nvar arr2:[Int] {\n    return [1,2,3];\n}\n//arr3\nvar arr3:[Int] {\n    get {\n        return [1,2,3];\n    }\n}\n//arr4\nvar arr4:[Int] {\n    get {\n        return [1];\n    }\n    set {\n        print(newValue);\n    }\n}\n```\n> arr1 declares a Stored-Property assigned value through a closure operation.    \n> arr2 declares a read-only Computed-Property.    \n> arr3 declares a read-only Computed-Property too.    \n> arr4 declares a read-write Computed-Property too.\n\nIt can be seen that the Stored-Property can be directly read and written. The Computed-Property cannot be operated directly. It is only used for calculation and has no specific value.\n\n> Note:\n> 1. Computed-Properties can be used for classes, structures, and enumerations, while Stored-Properties can only be used for classes and structures.    \n> 2. The Stored-Properties can be defined with the keyword 'var' or the keyword let'. The Computed-Property can only be defined with the keyword 'var'.   \n> 3. Computed-Properties do not directly store values, but provide a getter and an optional setter to indirectly obtain and set the values of other properties or variables.\n\n \n#### <font size=3 color=gray>*Reference*</font>\n<https://cloud.tencent.com/developer/article/1610855>  \n","slug":"Swift/01. Tips/05. Computed properties and Stored properties","published":1,"updated":"2023-11-07T13:55:10.594Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr52001svu0m4y2ba39n","content":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p><strong> Example Code </strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//arr1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1:[<span class=\"type\">Int</span>] <span class=\"operator\">=</span>  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;()</span><br><span class=\"line\"><span class=\"comment\">//arr2</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2:[<span class=\"type\">Int</span>] &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//arr3</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr3:[<span class=\"type\">Int</span>] &#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//arr4</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr4:[<span class=\"type\">Int</span>] &#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [<span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">set</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(newValue);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>arr1 declares a Stored-Property assigned value through a closure operation.<br>arr2 declares a read-only Computed-Property.<br>arr3 declares a read-only Computed-Property too.<br>arr4 declares a read-write Computed-Property too.</p>\n</blockquote>\n<p>It can be seen that the Stored-Property can be directly read and written. The Computed-Property cannot be operated directly. It is only used for calculation and has no specific value.</p>\n<blockquote>\n<p>Note:</p>\n<ol>\n<li>Computed-Properties can be used for classes, structures, and enumerations, while Stored-Properties can only be used for classes and structures.    </li>\n<li>The Stored-Properties can be defined with the keyword ‘var’ or the keyword let’. The Computed-Property can only be defined with the keyword ‘var’.   </li>\n<li>Computed-Properties do not directly store values, but provide a getter and an optional setter to indirectly obtain and set the values of other properties or variables.</li>\n</ol>\n</blockquote>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p><a href=\"https://cloud.tencent.com/developer/article/1610855\">https://cloud.tencent.com/developer/article/1610855</a>  </p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p><strong> Example Code </strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//arr1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1:[<span class=\"type\">Int</span>] <span class=\"operator\">=</span>  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;()</span><br><span class=\"line\"><span class=\"comment\">//arr2</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2:[<span class=\"type\">Int</span>] &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//arr3</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr3:[<span class=\"type\">Int</span>] &#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//arr4</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr4:[<span class=\"type\">Int</span>] &#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [<span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">set</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(newValue);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>arr1 declares a Stored-Property assigned value through a closure operation.<br>arr2 declares a read-only Computed-Property.<br>arr3 declares a read-only Computed-Property too.<br>arr4 declares a read-write Computed-Property too.</p>\n</blockquote>\n<p>It can be seen that the Stored-Property can be directly read and written. The Computed-Property cannot be operated directly. It is only used for calculation and has no specific value.</p>\n<blockquote>\n<p>Note:</p>\n<ol>\n<li>Computed-Properties can be used for classes, structures, and enumerations, while Stored-Properties can only be used for classes and structures.    </li>\n<li>The Stored-Properties can be defined with the keyword ‘var’ or the keyword let’. The Computed-Property can only be defined with the keyword ‘var’.   </li>\n<li>Computed-Properties do not directly store values, but provide a getter and an optional setter to indirectly obtain and set the values of other properties or variables.</li>\n</ol>\n</blockquote>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p><a href=\"https://cloud.tencent.com/developer/article/1610855\">https://cloud.tencent.com/developer/article/1610855</a>  </p>\n"},{"title":"06. How to Define a singleton?","date":"2023-02-28T12:54:59.000Z","_content":"\n<font color=gray size=2>*It will take about 1 minutes to finish reading this article.*</font>\n\n\nWe can define a singleton in OC like this:\n```Swift\n+ (instancetype) sharedManager {\n    static Object *obj = nil;\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        obj = [[Object alloc] init];\n    });\n    return obj;\n}\n```\nUse dispatch_once_t in GCD can ensure that the code in it is called only once, so as to ensure the safety of the singleton on the thread. However, since the original Dispatch once method is abandoned in Swift, dispatch_once_t cannot be used to create a singleton. 'Let' is a simpler way to ensure thread safety. So the final code is as follows：\n\n<strong> Example Code</strong>\n```Swift \nfinal class SingleOne {\n    static let shared = SingleOne()\n    private init() {}\n\n    var first: Bool = false\n    var second: String = \"\"\n}\n```\n\n**<font color=gray size=3 >*Reference*</font>** <https://blog.csdn.net/LiqunZhang/article/details/115127156>\n","source":"_posts/Swift/01. Tips/06. How to Define a singleton.md","raw":"---\ntitle: 06. How to Define a singleton?\ndate: 2023-02-28 13:54:59\ncategories: \n- [Swift, 01. Tips]\ntags:\n- singleton\n---\n\n<font color=gray size=2>*It will take about 1 minutes to finish reading this article.*</font>\n\n\nWe can define a singleton in OC like this:\n```Swift\n+ (instancetype) sharedManager {\n    static Object *obj = nil;\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        obj = [[Object alloc] init];\n    });\n    return obj;\n}\n```\nUse dispatch_once_t in GCD can ensure that the code in it is called only once, so as to ensure the safety of the singleton on the thread. However, since the original Dispatch once method is abandoned in Swift, dispatch_once_t cannot be used to create a singleton. 'Let' is a simpler way to ensure thread safety. So the final code is as follows：\n\n<strong> Example Code</strong>\n```Swift \nfinal class SingleOne {\n    static let shared = SingleOne()\n    private init() {}\n\n    var first: Bool = false\n    var second: String = \"\"\n}\n```\n\n**<font color=gray size=3 >*Reference*</font>** <https://blog.csdn.net/LiqunZhang/article/details/115127156>\n","slug":"Swift/01. Tips/06. How to Define a singleton","published":1,"updated":"2023-11-07T13:55:13.098Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr53001vvu0m424hdcjr","content":"<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p>\n<p>We can define a singleton in OC like this:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">+</span> (instancetype) sharedManager &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">Object</span> <span class=\"operator\">*</span>obj <span class=\"operator\">=</span> <span class=\"literal\">nil</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> dispatch_once_t onceToken;</span><br><span class=\"line\">    dispatch_once(<span class=\"operator\">&amp;</span>onceToken, <span class=\"operator\">^</span>&#123;</span><br><span class=\"line\">        obj <span class=\"operator\">=</span> [[<span class=\"type\">Object</span> alloc] <span class=\"keyword\">init</span>];</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Use dispatch_once_t in GCD can ensure that the code in it is called only once, so as to ensure the safety of the singleton on the thread. However, since the original Dispatch once method is abandoned in Swift, dispatch_once_t cannot be used to create a singleton. ‘Let’ is a simpler way to ensure thread safety. So the final code is as follows：</p>\n<p><strong> Example Code</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SingleOne</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> shared <span class=\"operator\">=</span> <span class=\"type\">SingleOne</span>()</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">init</span>() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> first: <span class=\"type\">Bool</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> second: <span class=\"type\">String</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong><font color=gray size=3 ><em>Reference</em></font></strong> <a href=\"https://blog.csdn.net/LiqunZhang/article/details/115127156\">https://blog.csdn.net/LiqunZhang/article/details/115127156</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p>\n<p>We can define a singleton in OC like this:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">+</span> (instancetype) sharedManager &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">Object</span> <span class=\"operator\">*</span>obj <span class=\"operator\">=</span> <span class=\"literal\">nil</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> dispatch_once_t onceToken;</span><br><span class=\"line\">    dispatch_once(<span class=\"operator\">&amp;</span>onceToken, <span class=\"operator\">^</span>&#123;</span><br><span class=\"line\">        obj <span class=\"operator\">=</span> [[<span class=\"type\">Object</span> alloc] <span class=\"keyword\">init</span>];</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Use dispatch_once_t in GCD can ensure that the code in it is called only once, so as to ensure the safety of the singleton on the thread. However, since the original Dispatch once method is abandoned in Swift, dispatch_once_t cannot be used to create a singleton. ‘Let’ is a simpler way to ensure thread safety. So the final code is as follows：</p>\n<p><strong> Example Code</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SingleOne</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> shared <span class=\"operator\">=</span> <span class=\"type\">SingleOne</span>()</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">init</span>() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> first: <span class=\"type\">Bool</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> second: <span class=\"type\">String</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong><font color=gray size=3 ><em>Reference</em></font></strong> <a href=\"https://blog.csdn.net/LiqunZhang/article/details/115127156\">https://blog.csdn.net/LiqunZhang/article/details/115127156</a></p>\n"},{"title":"07. How to print the memory address of a variable?","date":"2023-02-28T12:55:59.000Z","_content":"\n<font color=gray size=2>*It will take about 1 minutes to finish reading this article.*</font>\n\nWe can print the memory address of a variable like this:\n```Swift\nvar a = 100\nwithUnsafePointer(to: &a) {ptr in print(ptr)}\n//result: 0x00007ff7bfeff210\n```\nOr using the following method is OK:\n```Swift\nfunc printPointer<T>(ptr: UnsafePointer<T>) {\n    print(ptr)\n}\nvar a = 100\nprintPointer(ptr: &a)\n//result: 0x00007ff7bfeff220\n```\n","source":"_posts/Swift/01. Tips/07. How to print the memory address of a variable.md","raw":"---\ntitle: 07. How to print the memory address of a variable?\ndate: 2023-02-28 13:55:59\ncategories: \n- [Swift, 01. Tips]\ntags:\n- memory address\n---\n\n<font color=gray size=2>*It will take about 1 minutes to finish reading this article.*</font>\n\nWe can print the memory address of a variable like this:\n```Swift\nvar a = 100\nwithUnsafePointer(to: &a) {ptr in print(ptr)}\n//result: 0x00007ff7bfeff210\n```\nOr using the following method is OK:\n```Swift\nfunc printPointer<T>(ptr: UnsafePointer<T>) {\n    print(ptr)\n}\nvar a = 100\nprintPointer(ptr: &a)\n//result: 0x00007ff7bfeff220\n```\n","slug":"Swift/01. Tips/07. How to print the memory address of a variable","published":1,"updated":"2023-11-07T13:55:15.834Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr54001wvu0m108k1nd5","content":"<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p>\n<p>We can print the memory address of a variable like this:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"built_in\">withUnsafePointer</span>(to: <span class=\"operator\">&amp;</span>a) &#123;ptr <span class=\"keyword\">in</span> <span class=\"built_in\">print</span>(ptr)&#125;</span><br><span class=\"line\"><span class=\"comment\">//result: 0x00007ff7bfeff210</span></span><br></pre></td></tr></table></figure>\n<p>Or using the following method is OK:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">printPointer</span>&lt;<span class=\"type\">T</span>&gt;(<span class=\"params\">ptr</span>: <span class=\"type\">UnsafePointer</span>&lt;<span class=\"type\">T</span>&gt;) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(ptr)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\">printPointer(ptr: <span class=\"operator\">&amp;</span>a)</span><br><span class=\"line\"><span class=\"comment\">//result: 0x00007ff7bfeff220</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p>\n<p>We can print the memory address of a variable like this:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"built_in\">withUnsafePointer</span>(to: <span class=\"operator\">&amp;</span>a) &#123;ptr <span class=\"keyword\">in</span> <span class=\"built_in\">print</span>(ptr)&#125;</span><br><span class=\"line\"><span class=\"comment\">//result: 0x00007ff7bfeff210</span></span><br></pre></td></tr></table></figure>\n<p>Or using the following method is OK:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">printPointer</span>&lt;<span class=\"type\">T</span>&gt;(<span class=\"params\">ptr</span>: <span class=\"type\">UnsafePointer</span>&lt;<span class=\"type\">T</span>&gt;) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(ptr)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\">printPointer(ptr: <span class=\"operator\">&amp;</span>a)</span><br><span class=\"line\"><span class=\"comment\">//result: 0x00007ff7bfeff220</span></span><br></pre></td></tr></table></figure>\n"},{"title":"08. Force unwrapping and Implicitly Unwrapped Optionals","date":"2023-02-28T12:56:59.000Z","_content":"\n<font color=gray size=2>*It will take about 1 minutes to finish reading this article.*</font>\n\n#### <font size=3 color=#4169E1> 1. Force unwrapping </font> \nForced unwrapping of optional types means that when we are sure that an optional type must have a value, we can use the exclamation mark ! to force parsing of it and thus get the value in it. If we use forced parsing on an optional type that has no value, a runtime error will be triggered. Therefore, when using forced parsing, we must make sure that the optional type does have a value.\n```Swift\nlet possibleString: String? = \"An optional string.\"\nlet forcedString: String = possibleString! // Need exclamation mark to get value\n```\n\n#### <font size=3 color=#4169E1> 2. Implicitly Unwrapped Optionals </font> \nAn implicitly Unwrapped Optionals type is a special kind of optional type that is declared with the exclamation mark ! flag to indicate that this optional type can be implicitly treated as a non-optional type for subsequent use, without the need to force resolution each time. At declaration time, we can declare an optional type as an implicitly resolved optional type, which will throw an error at runtime if the variable or constant is not initialized to a non-nil value at the time of use.\n\n```Swift\nlet assumedString2: String! = \"123\"\nlet possibleString2: String? = assumedString2\nlet implicitString2: String = assumedString2  //No exclamation point needed\n```\n\n```Swift\nlet assumedString1: String! = nil\nlet possibleString1: String? = assumedString1\nlet implicitString1: String = assumedString1  // Report Error\n```\nSo, implicitly unwrapped optionals type is special optionals type that can be used to get the value in it directly using the variable name, without having to force unwrapping every time.\nWe can do these as follows:\n```Swift\nif assumedString != nil {\n    print(assumedString!)\n}\n// Prints \"An implicitly unwrapped optional string.\"\n```\nYou can also use an implicitly unwrapped optional with optional binding, to check and unwrap its value in a single statement:\n```Swift\nif let definiteString = assumedString {\n    print(definiteString)\n}\n// Prints \"An implicitly unwrapped optional string.\"\n```\n","source":"_posts/Swift/01. Tips/08. Implicitly Unwrapped Optionals and Force unwrapping.md","raw":"---\ntitle: 08. Force unwrapping and Implicitly Unwrapped Optionals\ndate: 2023-02-28 13:56:59\ncategories: \n- [Swift, 01. Tips]\ntags:\n- force unwrapping\n- Implicitly Unwrapped\n---\n\n<font color=gray size=2>*It will take about 1 minutes to finish reading this article.*</font>\n\n#### <font size=3 color=#4169E1> 1. Force unwrapping </font> \nForced unwrapping of optional types means that when we are sure that an optional type must have a value, we can use the exclamation mark ! to force parsing of it and thus get the value in it. If we use forced parsing on an optional type that has no value, a runtime error will be triggered. Therefore, when using forced parsing, we must make sure that the optional type does have a value.\n```Swift\nlet possibleString: String? = \"An optional string.\"\nlet forcedString: String = possibleString! // Need exclamation mark to get value\n```\n\n#### <font size=3 color=#4169E1> 2. Implicitly Unwrapped Optionals </font> \nAn implicitly Unwrapped Optionals type is a special kind of optional type that is declared with the exclamation mark ! flag to indicate that this optional type can be implicitly treated as a non-optional type for subsequent use, without the need to force resolution each time. At declaration time, we can declare an optional type as an implicitly resolved optional type, which will throw an error at runtime if the variable or constant is not initialized to a non-nil value at the time of use.\n\n```Swift\nlet assumedString2: String! = \"123\"\nlet possibleString2: String? = assumedString2\nlet implicitString2: String = assumedString2  //No exclamation point needed\n```\n\n```Swift\nlet assumedString1: String! = nil\nlet possibleString1: String? = assumedString1\nlet implicitString1: String = assumedString1  // Report Error\n```\nSo, implicitly unwrapped optionals type is special optionals type that can be used to get the value in it directly using the variable name, without having to force unwrapping every time.\nWe can do these as follows:\n```Swift\nif assumedString != nil {\n    print(assumedString!)\n}\n// Prints \"An implicitly unwrapped optional string.\"\n```\nYou can also use an implicitly unwrapped optional with optional binding, to check and unwrap its value in a single statement:\n```Swift\nif let definiteString = assumedString {\n    print(definiteString)\n}\n// Prints \"An implicitly unwrapped optional string.\"\n```\n","slug":"Swift/01. Tips/08. Implicitly Unwrapped Optionals and Force unwrapping","published":1,"updated":"2023-11-07T13:55:18.216Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr54001zvu0mg0efa5ry","content":"<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p>\n<h4 id=\"1-Force-unwrapping\"><a href=\"#1-Force-unwrapping\" class=\"headerlink\" title=\" 1. Force unwrapping \"></a><font size=3 color=#4169E1> 1. Force unwrapping </font></h4><p>Forced unwrapping of optional types means that when we are sure that an optional type must have a value, we can use the exclamation mark ! to force parsing of it and thus get the value in it. If we use forced parsing on an optional type that has no value, a runtime error will be triggered. Therefore, when using forced parsing, we must make sure that the optional type does have a value.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> possibleString: <span class=\"type\">String</span>? <span class=\"operator\">=</span> <span class=\"string\">&quot;An optional string.&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> forcedString: <span class=\"type\">String</span> <span class=\"operator\">=</span> possibleString<span class=\"operator\">!</span> <span class=\"comment\">// Need exclamation mark to get value</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-Implicitly-Unwrapped-Optionals\"><a href=\"#2-Implicitly-Unwrapped-Optionals\" class=\"headerlink\" title=\" 2. Implicitly Unwrapped Optionals \"></a><font size=3 color=#4169E1> 2. Implicitly Unwrapped Optionals </font></h4><p>An implicitly Unwrapped Optionals type is a special kind of optional type that is declared with the exclamation mark ! flag to indicate that this optional type can be implicitly treated as a non-optional type for subsequent use, without the need to force resolution each time. At declaration time, we can declare an optional type as an implicitly resolved optional type, which will throw an error at runtime if the variable or constant is not initialized to a non-nil value at the time of use.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> assumedString2: <span class=\"type\">String</span>! <span class=\"operator\">=</span> <span class=\"string\">&quot;123&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> possibleString2: <span class=\"type\">String</span>? <span class=\"operator\">=</span> assumedString2</span><br><span class=\"line\"><span class=\"keyword\">let</span> implicitString2: <span class=\"type\">String</span> <span class=\"operator\">=</span> assumedString2  <span class=\"comment\">//No exclamation point needed</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> assumedString1: <span class=\"type\">String</span>! <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> possibleString1: <span class=\"type\">String</span>? <span class=\"operator\">=</span> assumedString1</span><br><span class=\"line\"><span class=\"keyword\">let</span> implicitString1: <span class=\"type\">String</span> <span class=\"operator\">=</span> assumedString1  <span class=\"comment\">// Report Error</span></span><br></pre></td></tr></table></figure>\n<p>So, implicitly unwrapped optionals type is special optionals type that can be used to get the value in it directly using the variable name, without having to force unwrapping every time.<br>We can do these as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> assumedString <span class=\"operator\">!=</span> <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(assumedString<span class=\"operator\">!</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Prints &quot;An implicitly unwrapped optional string.&quot;</span></span><br></pre></td></tr></table></figure>\n<p>You can also use an implicitly unwrapped optional with optional binding, to check and unwrap its value in a single statement:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> definiteString <span class=\"operator\">=</span> assumedString &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(definiteString)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Prints &quot;An implicitly unwrapped optional string.&quot;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p>\n<h4 id=\"1-Force-unwrapping\"><a href=\"#1-Force-unwrapping\" class=\"headerlink\" title=\" 1. Force unwrapping \"></a><font size=3 color=#4169E1> 1. Force unwrapping </font></h4><p>Forced unwrapping of optional types means that when we are sure that an optional type must have a value, we can use the exclamation mark ! to force parsing of it and thus get the value in it. If we use forced parsing on an optional type that has no value, a runtime error will be triggered. Therefore, when using forced parsing, we must make sure that the optional type does have a value.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> possibleString: <span class=\"type\">String</span>? <span class=\"operator\">=</span> <span class=\"string\">&quot;An optional string.&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> forcedString: <span class=\"type\">String</span> <span class=\"operator\">=</span> possibleString<span class=\"operator\">!</span> <span class=\"comment\">// Need exclamation mark to get value</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-Implicitly-Unwrapped-Optionals\"><a href=\"#2-Implicitly-Unwrapped-Optionals\" class=\"headerlink\" title=\" 2. Implicitly Unwrapped Optionals \"></a><font size=3 color=#4169E1> 2. Implicitly Unwrapped Optionals </font></h4><p>An implicitly Unwrapped Optionals type is a special kind of optional type that is declared with the exclamation mark ! flag to indicate that this optional type can be implicitly treated as a non-optional type for subsequent use, without the need to force resolution each time. At declaration time, we can declare an optional type as an implicitly resolved optional type, which will throw an error at runtime if the variable or constant is not initialized to a non-nil value at the time of use.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> assumedString2: <span class=\"type\">String</span>! <span class=\"operator\">=</span> <span class=\"string\">&quot;123&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> possibleString2: <span class=\"type\">String</span>? <span class=\"operator\">=</span> assumedString2</span><br><span class=\"line\"><span class=\"keyword\">let</span> implicitString2: <span class=\"type\">String</span> <span class=\"operator\">=</span> assumedString2  <span class=\"comment\">//No exclamation point needed</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> assumedString1: <span class=\"type\">String</span>! <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> possibleString1: <span class=\"type\">String</span>? <span class=\"operator\">=</span> assumedString1</span><br><span class=\"line\"><span class=\"keyword\">let</span> implicitString1: <span class=\"type\">String</span> <span class=\"operator\">=</span> assumedString1  <span class=\"comment\">// Report Error</span></span><br></pre></td></tr></table></figure>\n<p>So, implicitly unwrapped optionals type is special optionals type that can be used to get the value in it directly using the variable name, without having to force unwrapping every time.<br>We can do these as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> assumedString <span class=\"operator\">!=</span> <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(assumedString<span class=\"operator\">!</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Prints &quot;An implicitly unwrapped optional string.&quot;</span></span><br></pre></td></tr></table></figure>\n<p>You can also use an implicitly unwrapped optional with optional binding, to check and unwrap its value in a single statement:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> definiteString <span class=\"operator\">=</span> assumedString &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(definiteString)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Prints &quot;An implicitly unwrapped optional string.&quot;</span></span><br></pre></td></tr></table></figure>\n"},{"title":"09. How to use rethrows in Swift?","date":"2023-08-19T18:00:00.000Z","_content":"\n<font color=gray size=2>*It will take about 5 minutes to finish reading this article.*</font>\n\nIn Swift, both the rethrows keyword and the throws keyword are used to modify functions and exception handling. \n\nThe difference, however, is that rethrows indicates that this function does not actively throw errors under normal circumstances, but that it accepts one or more closures that throw errors as arguments, and may then continue to pass those errors on to the caller.\n\nIt can be simply understood that throws allow possible exceptions to be handled by the function or method (e.g., with do-catch), whereas rethrows just passes the throws; the function itself doesn't need to handle the exception.\n\nThe use of the rethrows keyword is often used for functions that take closure arguments that may throw errors. The following is a simple example of code that uses the rethrows keyword:\n\n```Swift\nenum MathError: Error {\n    case divisionByZero\n}\n​\nfunc safeDivide(_ numerator: Int, by denominator: Int) throws -> Int {\n    guard denominator != 0 else {\n        throw MathError.divisionByZero\n    }\n    return numerator / denominator\n}\n​\nfunc processNumbers(_ a: Int, _ b: Int, using closure: (Int, Int) throws -> Int) rethrows -> Int {\n    let result = try closure(a, b)\n    return result\n}\n​\nfunc printResult(_ result: Int) {\n    print(\"Result:\", result)\n}\n\n```\nThe calling code is as follows:\n\n```Swift\nlet a = 10\nlet b = 5\n​\ndo {\n    let divisionResult = try processNumbers(a, b, using: safeDivide)\n    printResult(divisionResult)\n} catch {\n    print(\"Error:\", error)\n}\n```\nIn this example, we define a safeDivide(_:_:) function to perform division of an integer, which will check if the denominator is zero. Then we define a processNumbers(_:using:) function that takes a closure argument to process two integers. This function is labeled rethrows because it does not actively throw errors, but may pass them on to the caller.","source":"_posts/Swift/01. Tips/09. How to use rethrows in Swift.md","raw":"---\ntitle: 09. How to use rethrows in Swift?\ndate: 2023-08-19 20:00:00\ncategories: \n- [Swift, 01. Tips]\ntags:\n- rethrows\n---\n\n<font color=gray size=2>*It will take about 5 minutes to finish reading this article.*</font>\n\nIn Swift, both the rethrows keyword and the throws keyword are used to modify functions and exception handling. \n\nThe difference, however, is that rethrows indicates that this function does not actively throw errors under normal circumstances, but that it accepts one or more closures that throw errors as arguments, and may then continue to pass those errors on to the caller.\n\nIt can be simply understood that throws allow possible exceptions to be handled by the function or method (e.g., with do-catch), whereas rethrows just passes the throws; the function itself doesn't need to handle the exception.\n\nThe use of the rethrows keyword is often used for functions that take closure arguments that may throw errors. The following is a simple example of code that uses the rethrows keyword:\n\n```Swift\nenum MathError: Error {\n    case divisionByZero\n}\n​\nfunc safeDivide(_ numerator: Int, by denominator: Int) throws -> Int {\n    guard denominator != 0 else {\n        throw MathError.divisionByZero\n    }\n    return numerator / denominator\n}\n​\nfunc processNumbers(_ a: Int, _ b: Int, using closure: (Int, Int) throws -> Int) rethrows -> Int {\n    let result = try closure(a, b)\n    return result\n}\n​\nfunc printResult(_ result: Int) {\n    print(\"Result:\", result)\n}\n\n```\nThe calling code is as follows:\n\n```Swift\nlet a = 10\nlet b = 5\n​\ndo {\n    let divisionResult = try processNumbers(a, b, using: safeDivide)\n    printResult(divisionResult)\n} catch {\n    print(\"Error:\", error)\n}\n```\nIn this example, we define a safeDivide(_:_:) function to perform division of an integer, which will check if the denominator is zero. Then we define a processNumbers(_:using:) function that takes a closure argument to process two integers. This function is labeled rethrows because it does not actively throw errors, but may pass them on to the caller.","slug":"Swift/01. Tips/09. How to use rethrows in Swift","published":1,"updated":"2023-11-07T13:55:21.980Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr550020vu0mbxpteyut","content":"<p><font color=gray size=2><em>It will take about 5 minutes to finish reading this article.</em></font></p>\n<p>In Swift, both the rethrows keyword and the throws keyword are used to modify functions and exception handling. </p>\n<p>The difference, however, is that rethrows indicates that this function does not actively throw errors under normal circumstances, but that it accepts one or more closures that throw errors as arguments, and may then continue to pass those errors on to the caller.</p>\n<p>It can be simply understood that throws allow possible exceptions to be handled by the function or method (e.g., with do-catch), whereas rethrows just passes the throws; the function itself doesn’t need to handle the exception.</p>\n<p>The use of the rethrows keyword is often used for functions that take closure arguments that may throw errors. The following is a simple example of code that uses the rethrows keyword:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">MathError</span>: <span class=\"title class_\">Error</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> divisionByZero</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">safeDivide</span>(<span class=\"keyword\">_</span> <span class=\"params\">numerator</span>: <span class=\"type\">Int</span>, <span class=\"params\">by</span> <span class=\"params\">denominator</span>: <span class=\"type\">Int</span>) <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">guard</span> denominator <span class=\"operator\">!=</span> <span class=\"number\">0</span> <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"type\">MathError</span>.divisionByZero</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> numerator <span class=\"operator\">/</span> denominator</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">processNumbers</span>(<span class=\"keyword\">_</span> <span class=\"params\">a</span>: <span class=\"type\">Int</span>, <span class=\"keyword\">_</span> <span class=\"params\">b</span>: <span class=\"type\">Int</span>, <span class=\"params\">using</span> <span class=\"params\">closure</span>: (<span class=\"type\">Int</span>, <span class=\"type\">Int</span>) <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">Int</span>) <span class=\"keyword\">rethrows</span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result <span class=\"operator\">=</span> <span class=\"keyword\">try</span> closure(a, b)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">printResult</span>(<span class=\"keyword\">_</span> <span class=\"params\">result</span>: <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Result:&quot;</span>, result)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>The calling code is as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a <span class=\"operator\">=</span> <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b <span class=\"operator\">=</span> <span class=\"number\">5</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> divisionResult <span class=\"operator\">=</span> <span class=\"keyword\">try</span> processNumbers(a, b, using: safeDivide)</span><br><span class=\"line\">    printResult(divisionResult)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Error:&quot;</span>, error)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>In this example, we define a safeDivide(<em>:</em>:) function to perform division of an integer, which will check if the denominator is zero. Then we define a processNumbers(_:using:) function that takes a closure argument to process two integers. This function is labeled rethrows because it does not actively throw errors, but may pass them on to the caller.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 5 minutes to finish reading this article.</em></font></p>\n<p>In Swift, both the rethrows keyword and the throws keyword are used to modify functions and exception handling. </p>\n<p>The difference, however, is that rethrows indicates that this function does not actively throw errors under normal circumstances, but that it accepts one or more closures that throw errors as arguments, and may then continue to pass those errors on to the caller.</p>\n<p>It can be simply understood that throws allow possible exceptions to be handled by the function or method (e.g., with do-catch), whereas rethrows just passes the throws; the function itself doesn’t need to handle the exception.</p>\n<p>The use of the rethrows keyword is often used for functions that take closure arguments that may throw errors. The following is a simple example of code that uses the rethrows keyword:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">MathError</span>: <span class=\"title class_\">Error</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> divisionByZero</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">safeDivide</span>(<span class=\"keyword\">_</span> <span class=\"params\">numerator</span>: <span class=\"type\">Int</span>, <span class=\"params\">by</span> <span class=\"params\">denominator</span>: <span class=\"type\">Int</span>) <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">guard</span> denominator <span class=\"operator\">!=</span> <span class=\"number\">0</span> <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"type\">MathError</span>.divisionByZero</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> numerator <span class=\"operator\">/</span> denominator</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">processNumbers</span>(<span class=\"keyword\">_</span> <span class=\"params\">a</span>: <span class=\"type\">Int</span>, <span class=\"keyword\">_</span> <span class=\"params\">b</span>: <span class=\"type\">Int</span>, <span class=\"params\">using</span> <span class=\"params\">closure</span>: (<span class=\"type\">Int</span>, <span class=\"type\">Int</span>) <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">Int</span>) <span class=\"keyword\">rethrows</span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result <span class=\"operator\">=</span> <span class=\"keyword\">try</span> closure(a, b)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">printResult</span>(<span class=\"keyword\">_</span> <span class=\"params\">result</span>: <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Result:&quot;</span>, result)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>The calling code is as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a <span class=\"operator\">=</span> <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b <span class=\"operator\">=</span> <span class=\"number\">5</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> divisionResult <span class=\"operator\">=</span> <span class=\"keyword\">try</span> processNumbers(a, b, using: safeDivide)</span><br><span class=\"line\">    printResult(divisionResult)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Error:&quot;</span>, error)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>In this example, we define a safeDivide(<em>:</em>:) function to perform division of an integer, which will check if the denominator is zero. Then we define a processNumbers(_:using:) function that takes a closure argument to process two integers. This function is labeled rethrows because it does not actively throw errors, but may pass them on to the caller.</p>\n"},{"title":"10. How to use defer in Swift?","date":"2023-11-07T13:45:00.000Z","_content":"\n<font color=gray size=2>*It will take about 1 minutes to finish reading this article.*</font>\n\nThe defer keyword in Swift is used to delay the execution of a block of code, typically to perform cleanup or necessary finalization tasks before the current scope ends. The code within a defer statement is executed regardless of whether the block is exited due to normal circumstances or due to an exception being thrown.\n\nHere's an example of a defer statement:\n\n```Swift\nfunc processFile() {\n    print(\"Opening file\")\n    defer {\n        print(\"Closing file\")\n    }\n    // File processing logic goes here\n    print(\"Processing file\")\n}\n\n```\nIn the example above, the defer statement ensures that the file is properly closed regardless of whether the file processing logic is executed successfully. Even if an exception occurs during the file processing or the function is exited prematurely, the code within the defer statement will still be executed, guaranteeing the proper release of resources or the execution of necessary cleanup operations.\n\nThe use cases for the defer statement include, but are not limited to:\n\n1. Ensuring the proper closure or release of resources after opening them within a function.\n\n2. Performing necessary finalization tasks after a series of operations, such as releasing memory, closing files, or cleaning up temporary data.\n\n3. Guaranteeing the safe release of resources, even in the event of an exception during processing.","source":"_posts/Swift/01. Tips/10. How to use defer in Swift.md","raw":"---\ntitle: 10. How to use defer in Swift?\ndate: 2023-11-07 14:45:00\ncategories: \n- [Swift, 01. Tips]\ntags:\n- defer\n---\n\n<font color=gray size=2>*It will take about 1 minutes to finish reading this article.*</font>\n\nThe defer keyword in Swift is used to delay the execution of a block of code, typically to perform cleanup or necessary finalization tasks before the current scope ends. The code within a defer statement is executed regardless of whether the block is exited due to normal circumstances or due to an exception being thrown.\n\nHere's an example of a defer statement:\n\n```Swift\nfunc processFile() {\n    print(\"Opening file\")\n    defer {\n        print(\"Closing file\")\n    }\n    // File processing logic goes here\n    print(\"Processing file\")\n}\n\n```\nIn the example above, the defer statement ensures that the file is properly closed regardless of whether the file processing logic is executed successfully. Even if an exception occurs during the file processing or the function is exited prematurely, the code within the defer statement will still be executed, guaranteeing the proper release of resources or the execution of necessary cleanup operations.\n\nThe use cases for the defer statement include, but are not limited to:\n\n1. Ensuring the proper closure or release of resources after opening them within a function.\n\n2. Performing necessary finalization tasks after a series of operations, such as releasing memory, closing files, or cleaning up temporary data.\n\n3. Guaranteeing the safe release of resources, even in the event of an exception during processing.","slug":"Swift/01. Tips/10. How to use defer in Swift","published":1,"updated":"2023-11-07T14:45:04.320Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr560023vu0m4ho2c7xr","content":"<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p>\n<p>The defer keyword in Swift is used to delay the execution of a block of code, typically to perform cleanup or necessary finalization tasks before the current scope ends. The code within a defer statement is executed regardless of whether the block is exited due to normal circumstances or due to an exception being thrown.</p>\n<p>Here’s an example of a defer statement:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">processFile</span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Opening file&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Closing file&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// File processing logic goes here</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Processing file&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>In the example above, the defer statement ensures that the file is properly closed regardless of whether the file processing logic is executed successfully. Even if an exception occurs during the file processing or the function is exited prematurely, the code within the defer statement will still be executed, guaranteeing the proper release of resources or the execution of necessary cleanup operations.</p>\n<p>The use cases for the defer statement include, but are not limited to:</p>\n<ol>\n<li><p>Ensuring the proper closure or release of resources after opening them within a function.</p>\n</li>\n<li><p>Performing necessary finalization tasks after a series of operations, such as releasing memory, closing files, or cleaning up temporary data.</p>\n</li>\n<li><p>Guaranteeing the safe release of resources, even in the event of an exception during processing.</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p>\n<p>The defer keyword in Swift is used to delay the execution of a block of code, typically to perform cleanup or necessary finalization tasks before the current scope ends. The code within a defer statement is executed regardless of whether the block is exited due to normal circumstances or due to an exception being thrown.</p>\n<p>Here’s an example of a defer statement:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">processFile</span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Opening file&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Closing file&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// File processing logic goes here</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Processing file&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>In the example above, the defer statement ensures that the file is properly closed regardless of whether the file processing logic is executed successfully. Even if an exception occurs during the file processing or the function is exited prematurely, the code within the defer statement will still be executed, guaranteeing the proper release of resources or the execution of necessary cleanup operations.</p>\n<p>The use cases for the defer statement include, but are not limited to:</p>\n<ol>\n<li><p>Ensuring the proper closure or release of resources after opening them within a function.</p>\n</li>\n<li><p>Performing necessary finalization tasks after a series of operations, such as releasing memory, closing files, or cleaning up temporary data.</p>\n</li>\n<li><p>Guaranteeing the safe release of resources, even in the event of an exception during processing.</p>\n</li>\n</ol>\n"},{"title":"11. How to use final?","date":"2023-11-07T14:46:00.000Z","_content":"\n<font color=gray size=2>*It will take about 1 minutes to finish reading this article.*</font>\n\nIn Swift, the keyword `final` is used to mark classes, properties, or methods, preventing them from being inherited or overridden. Using `final` ensures that specific classes, properties, or methods cannot be inherited or overridden by other classes, thus enhancing the safety and stability of the code. Here are some common use cases:\n\n1. Class: Declaring a class as `final` prevents other classes from inheriting it. This is useful when you intentionally design a class that should not be inherited or when you want to ensure that specific behaviors of a class will not be altered.\n\n   ```swift\n   final class MyClass {\n       // Class definition\n   }\n   ```\n\n2. Method: Declaring a method within a class as `final` prevents subclasses from overriding it. This is useful when you want to ensure that the behavior of a method remains unchanged or unaltered.\n\n   ```swift\n   class BaseClass {\n       final func myMethod() {\n           // Method implementation\n       }\n   }\n   ```\n\n3. Property: Declaring a property within a class as `final` prevents subclasses from overriding it. This is useful when you want to maintain the immutability of a property's value.\n\n   ```swift\n   class BaseClass {\n       final var myProperty: Int = 5\n   }\n   ```\n\nUsing the `final` keyword ensures that your code is more secure and predictable, preventing unexpected inheritance or overriding behavior.","source":"_posts/Swift/01. Tips/11. How to use final.md","raw":"---\ntitle: 11. How to use final?\ndate: 2023-11-07 15:46:00\ncategories: \n- [Swift, 01. Tips]\ntags:\n- final\n---\n\n<font color=gray size=2>*It will take about 1 minutes to finish reading this article.*</font>\n\nIn Swift, the keyword `final` is used to mark classes, properties, or methods, preventing them from being inherited or overridden. Using `final` ensures that specific classes, properties, or methods cannot be inherited or overridden by other classes, thus enhancing the safety and stability of the code. Here are some common use cases:\n\n1. Class: Declaring a class as `final` prevents other classes from inheriting it. This is useful when you intentionally design a class that should not be inherited or when you want to ensure that specific behaviors of a class will not be altered.\n\n   ```swift\n   final class MyClass {\n       // Class definition\n   }\n   ```\n\n2. Method: Declaring a method within a class as `final` prevents subclasses from overriding it. This is useful when you want to ensure that the behavior of a method remains unchanged or unaltered.\n\n   ```swift\n   class BaseClass {\n       final func myMethod() {\n           // Method implementation\n       }\n   }\n   ```\n\n3. Property: Declaring a property within a class as `final` prevents subclasses from overriding it. This is useful when you want to maintain the immutability of a property's value.\n\n   ```swift\n   class BaseClass {\n       final var myProperty: Int = 5\n   }\n   ```\n\nUsing the `final` keyword ensures that your code is more secure and predictable, preventing unexpected inheritance or overriding behavior.","slug":"Swift/01. Tips/11. How to use final","published":1,"updated":"2023-11-07T14:45:39.952Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr570024vu0mdnmg5nnl","content":"<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p>\n<p>In Swift, the keyword <code>final</code> is used to mark classes, properties, or methods, preventing them from being inherited or overridden. Using <code>final</code> ensures that specific classes, properties, or methods cannot be inherited or overridden by other classes, thus enhancing the safety and stability of the code. Here are some common use cases:</p>\n<ol>\n<li><p>Class: Declaring a class as <code>final</code> prevents other classes from inheriting it. This is useful when you intentionally design a class that should not be inherited or when you want to ensure that specific behaviors of a class will not be altered.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Class definition</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Method: Declaring a method within a class as <code>final</code> prevents subclasses from overriding it. This is useful when you want to ensure that the behavior of a method remains unchanged or unaltered.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BaseClass</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">func</span> <span class=\"title function_\">myMethod</span>() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Method implementation</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Property: Declaring a property within a class as <code>final</code> prevents subclasses from overriding it. This is useful when you want to maintain the immutability of a property’s value.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BaseClass</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">var</span> myProperty: <span class=\"type\">Int</span> <span class=\"operator\">=</span> <span class=\"number\">5</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>Using the <code>final</code> keyword ensures that your code is more secure and predictable, preventing unexpected inheritance or overriding behavior.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p>\n<p>In Swift, the keyword <code>final</code> is used to mark classes, properties, or methods, preventing them from being inherited or overridden. Using <code>final</code> ensures that specific classes, properties, or methods cannot be inherited or overridden by other classes, thus enhancing the safety and stability of the code. Here are some common use cases:</p>\n<ol>\n<li><p>Class: Declaring a class as <code>final</code> prevents other classes from inheriting it. This is useful when you intentionally design a class that should not be inherited or when you want to ensure that specific behaviors of a class will not be altered.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Class definition</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Method: Declaring a method within a class as <code>final</code> prevents subclasses from overriding it. This is useful when you want to ensure that the behavior of a method remains unchanged or unaltered.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BaseClass</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">func</span> <span class=\"title function_\">myMethod</span>() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Method implementation</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Property: Declaring a property within a class as <code>final</code> prevents subclasses from overriding it. This is useful when you want to maintain the immutability of a property’s value.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BaseClass</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">var</span> myProperty: <span class=\"type\">Int</span> <span class=\"operator\">=</span> <span class=\"number\">5</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>Using the <code>final</code> keyword ensures that your code is more secure and predictable, preventing unexpected inheritance or overriding behavior.</p>\n"},{"title":"12. How to customize subscripting in Swift?","date":"2023-11-07T16:00:00.000Z","_content":"\n<font color=gray size=2>*It will take about 1 minutes to finish reading this article.*</font>\n\nIn Swift, you can customize subscripting, which allows you to access elements in a collection, list, or other types using subscript syntax. Here is an example of how to customize subscripting:\n\nExample 00:\n\n```Swift\nstruct MyList {\n    private var list: [Int] = [1, 2, 3, 4, 5]\n\n    subscript(index: Int) -> Int? {\n        guard index >= 0 && index < list.count else {\n            return nil\n        }\n        return list[index]\n    }\n}\n\nvar myList = MyList()\nif let value = myList[2] {\n    print(\"Value at index 2: \\(value)\")\n} else {\n    print(\"Index out of range\")\n}\n```\n\nIn this example, we define a structure called `MyList` and implement a subscripting method within it. The subscripting method takes an `Int` parameter as the index and returns the value corresponding to the index. If the index is out of the range of the list, it returns `nil`.\n\n\nExample 01:\n```Swift\nstruct Matrix {\n   let rows: Int, columns: Int\n   var grid: [Double]\n   init(rows: Int, columns: Int) {\n       self.rows = rows\n       self.columns = columns\n       grid = Array(repeating: 0.0, count: rows * columns)\n   }\n   subscript(row: Int, column: Int) -> Double {\n       get {\n           return grid[(row * columns) + column]\n       }\n       set {\n           grid[(row * columns) + column] = newValue\n       }\n   }\n}\n```\nIn this example, a structure called Matrix is defined, which has a subscript that accepts two parameters of type Int. This subscript returns a value of type Double and is readable and writable.\n\nExample 02:\n\n```Swift\nstruct Vector3D {\n   var x = 0.0, y = 0.0, z = 0.0\n   subscript(index: Int) -> Double {\n       get {\n           switch index {\n           case 0:\n               return x\n           case 1:\n               return y\n           case 2:\n               return z\n           default:\n               fatalError(\"Invalid index\")\n           }\n       }\n       set {\n           switch index {\n           case 0:\n               x = newValue\n           case 1:\n               y = newValue\n           case 2:\n               z = newValue\n           default:\n               fatalError(\"Invalid index\")\n           }\n       }\n   }\n}\n​\nvar v = Vector3D()\nv[0] = 1.0\nv[1] = 2.0\nv[2] = 3.0\nprint(v[0]) // Output \"1.0\"\nprint(v[1]) // Output \"2.0\"\nprint(v[2]) // Output \"3.0\"\n\n```\n\nIn this example, a structure named Vector3D is defined and a subscript is defined that accepts a parameter of type Int. This subscript returns a value of type Double and is readable and writable. Then, an instance v of Vector3D is created, and subscripts are used to get and set the properties of v.\n\nCustomizing subscripting allows your type to support subscript syntax similar to arrays or dictionaries, making it more convenient to access and manipulate elements in custom types.","source":"_posts/Swift/01. Tips/12. How to customize subscripting in Swift.md","raw":"---\ntitle: 12. How to customize subscripting in Swift?\ndate: 2023-11-07 17:00:00\ncategories: \n- [Swift, 01. Tips]\ntags:\n- subscript\n---\n\n<font color=gray size=2>*It will take about 1 minutes to finish reading this article.*</font>\n\nIn Swift, you can customize subscripting, which allows you to access elements in a collection, list, or other types using subscript syntax. Here is an example of how to customize subscripting:\n\nExample 00:\n\n```Swift\nstruct MyList {\n    private var list: [Int] = [1, 2, 3, 4, 5]\n\n    subscript(index: Int) -> Int? {\n        guard index >= 0 && index < list.count else {\n            return nil\n        }\n        return list[index]\n    }\n}\n\nvar myList = MyList()\nif let value = myList[2] {\n    print(\"Value at index 2: \\(value)\")\n} else {\n    print(\"Index out of range\")\n}\n```\n\nIn this example, we define a structure called `MyList` and implement a subscripting method within it. The subscripting method takes an `Int` parameter as the index and returns the value corresponding to the index. If the index is out of the range of the list, it returns `nil`.\n\n\nExample 01:\n```Swift\nstruct Matrix {\n   let rows: Int, columns: Int\n   var grid: [Double]\n   init(rows: Int, columns: Int) {\n       self.rows = rows\n       self.columns = columns\n       grid = Array(repeating: 0.0, count: rows * columns)\n   }\n   subscript(row: Int, column: Int) -> Double {\n       get {\n           return grid[(row * columns) + column]\n       }\n       set {\n           grid[(row * columns) + column] = newValue\n       }\n   }\n}\n```\nIn this example, a structure called Matrix is defined, which has a subscript that accepts two parameters of type Int. This subscript returns a value of type Double and is readable and writable.\n\nExample 02:\n\n```Swift\nstruct Vector3D {\n   var x = 0.0, y = 0.0, z = 0.0\n   subscript(index: Int) -> Double {\n       get {\n           switch index {\n           case 0:\n               return x\n           case 1:\n               return y\n           case 2:\n               return z\n           default:\n               fatalError(\"Invalid index\")\n           }\n       }\n       set {\n           switch index {\n           case 0:\n               x = newValue\n           case 1:\n               y = newValue\n           case 2:\n               z = newValue\n           default:\n               fatalError(\"Invalid index\")\n           }\n       }\n   }\n}\n​\nvar v = Vector3D()\nv[0] = 1.0\nv[1] = 2.0\nv[2] = 3.0\nprint(v[0]) // Output \"1.0\"\nprint(v[1]) // Output \"2.0\"\nprint(v[2]) // Output \"3.0\"\n\n```\n\nIn this example, a structure named Vector3D is defined and a subscript is defined that accepts a parameter of type Int. This subscript returns a value of type Double and is readable and writable. Then, an instance v of Vector3D is created, and subscripts are used to get and set the properties of v.\n\nCustomizing subscripting allows your type to support subscript syntax similar to arrays or dictionaries, making it more convenient to access and manipulate elements in custom types.","slug":"Swift/01. Tips/12. How to customize subscripting in Swift","published":1,"updated":"2023-11-07T15:53:04.053Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr570025vu0m9vdb6g7o","content":"<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p>\n<p>In Swift, you can customize subscripting, which allows you to access elements in a collection, list, or other types using subscript syntax. Here is an example of how to customize subscripting:</p>\n<p>Example 00:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">MyList</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> list: [<span class=\"type\">Int</span>] <span class=\"operator\">=</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">subscript</span>(<span class=\"params\">index</span>: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span>? &#123;</span><br><span class=\"line\">        <span class=\"keyword\">guard</span> index <span class=\"operator\">&gt;=</span> <span class=\"number\">0</span> <span class=\"operator\">&amp;&amp;</span> index <span class=\"operator\">&lt;</span> list.count <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list[index]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> myList <span class=\"operator\">=</span> <span class=\"type\">MyList</span>()</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> value <span class=\"operator\">=</span> myList[<span class=\"number\">2</span>] &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Value at index 2: <span class=\"subst\">\\(value)</span>&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Index out of range&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>In this example, we define a structure called <code>MyList</code> and implement a subscripting method within it. The subscripting method takes an <code>Int</code> parameter as the index and returns the value corresponding to the index. If the index is out of the range of the list, it returns <code>nil</code>.</p>\n<p>Example 01:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Matrix</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">let</span> rows: <span class=\"type\">Int</span>, columns: <span class=\"type\">Int</span></span><br><span class=\"line\">   <span class=\"keyword\">var</span> grid: [<span class=\"type\">Double</span>]</span><br><span class=\"line\">   <span class=\"keyword\">init</span>(<span class=\"params\">rows</span>: <span class=\"type\">Int</span>, <span class=\"params\">columns</span>: <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">self</span>.rows <span class=\"operator\">=</span> rows</span><br><span class=\"line\">       <span class=\"keyword\">self</span>.columns <span class=\"operator\">=</span> columns</span><br><span class=\"line\">       grid <span class=\"operator\">=</span> <span class=\"type\">Array</span>(repeating: <span class=\"number\">0.0</span>, count: rows <span class=\"operator\">*</span> columns)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">subscript</span>(<span class=\"params\">row</span>: <span class=\"type\">Int</span>, <span class=\"params\">column</span>: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Double</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">get</span> &#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> grid[(row <span class=\"operator\">*</span> columns) <span class=\"operator\">+</span> column]</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">set</span> &#123;</span><br><span class=\"line\">           grid[(row <span class=\"operator\">*</span> columns) <span class=\"operator\">+</span> column] <span class=\"operator\">=</span> newValue</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>In this example, a structure called Matrix is defined, which has a subscript that accepts two parameters of type Int. This subscript returns a value of type Double and is readable and writable.</p>\n<p>Example 02:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Vector3D</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> x <span class=\"operator\">=</span> <span class=\"number\">0.0</span>, y <span class=\"operator\">=</span> <span class=\"number\">0.0</span>, z <span class=\"operator\">=</span> <span class=\"number\">0.0</span></span><br><span class=\"line\">   <span class=\"keyword\">subscript</span>(<span class=\"params\">index</span>: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Double</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">get</span> &#123;</span><br><span class=\"line\">           <span class=\"keyword\">switch</span> index &#123;</span><br><span class=\"line\">           <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">               <span class=\"keyword\">return</span> x</span><br><span class=\"line\">           <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">               <span class=\"keyword\">return</span> y</span><br><span class=\"line\">           <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">               <span class=\"keyword\">return</span> z</span><br><span class=\"line\">           <span class=\"keyword\">default</span>:</span><br><span class=\"line\">               <span class=\"built_in\">fatalError</span>(<span class=\"string\">&quot;Invalid index&quot;</span>)</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">set</span> &#123;</span><br><span class=\"line\">           <span class=\"keyword\">switch</span> index &#123;</span><br><span class=\"line\">           <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">               x <span class=\"operator\">=</span> newValue</span><br><span class=\"line\">           <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">               y <span class=\"operator\">=</span> newValue</span><br><span class=\"line\">           <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">               z <span class=\"operator\">=</span> newValue</span><br><span class=\"line\">           <span class=\"keyword\">default</span>:</span><br><span class=\"line\">               <span class=\"built_in\">fatalError</span>(<span class=\"string\">&quot;Invalid index&quot;</span>)</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"keyword\">var</span> v <span class=\"operator\">=</span> <span class=\"type\">Vector3D</span>()</span><br><span class=\"line\">v[<span class=\"number\">0</span>] <span class=\"operator\">=</span> <span class=\"number\">1.0</span></span><br><span class=\"line\">v[<span class=\"number\">1</span>] <span class=\"operator\">=</span> <span class=\"number\">2.0</span></span><br><span class=\"line\">v[<span class=\"number\">2</span>] <span class=\"operator\">=</span> <span class=\"number\">3.0</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(v[<span class=\"number\">0</span>]) <span class=\"comment\">// Output &quot;1.0&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(v[<span class=\"number\">1</span>]) <span class=\"comment\">// Output &quot;2.0&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(v[<span class=\"number\">2</span>]) <span class=\"comment\">// Output &quot;3.0&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>In this example, a structure named Vector3D is defined and a subscript is defined that accepts a parameter of type Int. This subscript returns a value of type Double and is readable and writable. Then, an instance v of Vector3D is created, and subscripts are used to get and set the properties of v.</p>\n<p>Customizing subscripting allows your type to support subscript syntax similar to arrays or dictionaries, making it more convenient to access and manipulate elements in custom types.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p>\n<p>In Swift, you can customize subscripting, which allows you to access elements in a collection, list, or other types using subscript syntax. Here is an example of how to customize subscripting:</p>\n<p>Example 00:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">MyList</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> list: [<span class=\"type\">Int</span>] <span class=\"operator\">=</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">subscript</span>(<span class=\"params\">index</span>: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span>? &#123;</span><br><span class=\"line\">        <span class=\"keyword\">guard</span> index <span class=\"operator\">&gt;=</span> <span class=\"number\">0</span> <span class=\"operator\">&amp;&amp;</span> index <span class=\"operator\">&lt;</span> list.count <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list[index]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> myList <span class=\"operator\">=</span> <span class=\"type\">MyList</span>()</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> value <span class=\"operator\">=</span> myList[<span class=\"number\">2</span>] &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Value at index 2: <span class=\"subst\">\\(value)</span>&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Index out of range&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>In this example, we define a structure called <code>MyList</code> and implement a subscripting method within it. The subscripting method takes an <code>Int</code> parameter as the index and returns the value corresponding to the index. If the index is out of the range of the list, it returns <code>nil</code>.</p>\n<p>Example 01:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Matrix</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">let</span> rows: <span class=\"type\">Int</span>, columns: <span class=\"type\">Int</span></span><br><span class=\"line\">   <span class=\"keyword\">var</span> grid: [<span class=\"type\">Double</span>]</span><br><span class=\"line\">   <span class=\"keyword\">init</span>(<span class=\"params\">rows</span>: <span class=\"type\">Int</span>, <span class=\"params\">columns</span>: <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">self</span>.rows <span class=\"operator\">=</span> rows</span><br><span class=\"line\">       <span class=\"keyword\">self</span>.columns <span class=\"operator\">=</span> columns</span><br><span class=\"line\">       grid <span class=\"operator\">=</span> <span class=\"type\">Array</span>(repeating: <span class=\"number\">0.0</span>, count: rows <span class=\"operator\">*</span> columns)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">subscript</span>(<span class=\"params\">row</span>: <span class=\"type\">Int</span>, <span class=\"params\">column</span>: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Double</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">get</span> &#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> grid[(row <span class=\"operator\">*</span> columns) <span class=\"operator\">+</span> column]</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">set</span> &#123;</span><br><span class=\"line\">           grid[(row <span class=\"operator\">*</span> columns) <span class=\"operator\">+</span> column] <span class=\"operator\">=</span> newValue</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>In this example, a structure called Matrix is defined, which has a subscript that accepts two parameters of type Int. This subscript returns a value of type Double and is readable and writable.</p>\n<p>Example 02:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Vector3D</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> x <span class=\"operator\">=</span> <span class=\"number\">0.0</span>, y <span class=\"operator\">=</span> <span class=\"number\">0.0</span>, z <span class=\"operator\">=</span> <span class=\"number\">0.0</span></span><br><span class=\"line\">   <span class=\"keyword\">subscript</span>(<span class=\"params\">index</span>: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Double</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">get</span> &#123;</span><br><span class=\"line\">           <span class=\"keyword\">switch</span> index &#123;</span><br><span class=\"line\">           <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">               <span class=\"keyword\">return</span> x</span><br><span class=\"line\">           <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">               <span class=\"keyword\">return</span> y</span><br><span class=\"line\">           <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">               <span class=\"keyword\">return</span> z</span><br><span class=\"line\">           <span class=\"keyword\">default</span>:</span><br><span class=\"line\">               <span class=\"built_in\">fatalError</span>(<span class=\"string\">&quot;Invalid index&quot;</span>)</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">set</span> &#123;</span><br><span class=\"line\">           <span class=\"keyword\">switch</span> index &#123;</span><br><span class=\"line\">           <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">               x <span class=\"operator\">=</span> newValue</span><br><span class=\"line\">           <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">               y <span class=\"operator\">=</span> newValue</span><br><span class=\"line\">           <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">               z <span class=\"operator\">=</span> newValue</span><br><span class=\"line\">           <span class=\"keyword\">default</span>:</span><br><span class=\"line\">               <span class=\"built_in\">fatalError</span>(<span class=\"string\">&quot;Invalid index&quot;</span>)</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"keyword\">var</span> v <span class=\"operator\">=</span> <span class=\"type\">Vector3D</span>()</span><br><span class=\"line\">v[<span class=\"number\">0</span>] <span class=\"operator\">=</span> <span class=\"number\">1.0</span></span><br><span class=\"line\">v[<span class=\"number\">1</span>] <span class=\"operator\">=</span> <span class=\"number\">2.0</span></span><br><span class=\"line\">v[<span class=\"number\">2</span>] <span class=\"operator\">=</span> <span class=\"number\">3.0</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(v[<span class=\"number\">0</span>]) <span class=\"comment\">// Output &quot;1.0&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(v[<span class=\"number\">1</span>]) <span class=\"comment\">// Output &quot;2.0&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(v[<span class=\"number\">2</span>]) <span class=\"comment\">// Output &quot;3.0&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>In this example, a structure named Vector3D is defined and a subscript is defined that accepts a parameter of type Int. This subscript returns a value of type Double and is readable and writable. Then, an instance v of Vector3D is created, and subscripts are used to get and set the properties of v.</p>\n<p>Customizing subscripting allows your type to support subscript syntax similar to arrays or dictionaries, making it more convenient to access and manipulate elements in custom types.</p>\n"},{"title":"13. How to use OptionSet Protocol?","date":"2023-11-08T19:00:00.000Z","_content":"\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\n\n#### <font size=5 color=#4169E1>1. NS_OPTIONS and NS_ENUM in OC</font> \n\nThe following enumeration definitions are common in Objective-C:\n\n```Swift\n\ntypedef NS_ENUM(NSInteger, CustomEnum) {\n    CustomEnumOption1,\n    CustomEnumOption2,\n    CustomEnumOption3\n};\n\n```\n\n```Swift\n\ntypedef NS_OPTIONS(NSUInteger, CustomOptions) {\n    CustomOptionNone      = 0,\n    CustomOptionOption1   = 1 << 0,\n    CustomOptionOption2   = 1 << 1,\n    CustomOptionOption3   = 1 << 2\n};\n\n```\n\nTheir differences:\n\nNS_ENUM: used to define a set of related discrete values that cannot be combined by bit operations.\n\nNS_OPTIONS: Used to define a set of discrete values that can be combined by bit operations, usually used to represent a set of options or flags.\n\nHere is an example of using NS_OPTIONS:\n\n```Swift\n\ntypedef NS_OPTIONS(NSUInteger, CustomOptions) {\n     CustomOptionNone = 0,\n     CustomOptionOption1 = 1 << 0,\n     CustomOptionOption2 = 1 << 1,\n     CustomOptionOption3 = 1 << 2\n};\n\n@interface CustomOptionHandler : NSObject\n\n// Add method to execute code associated with option\n+ (void)performActionForOption:(CustomOptions)option;\n\n@end\n\n@implementation CustomOptionHandler\n\n+ (void)performActionForOption:(CustomOptions)option {\n     if (option & CustomOptionOption1) {\n         //Execute the code related to CustomOptionOption1\n         NSLog(@\"Option 1 is selected.\");\n     }\n    \n     if (option & CustomOptionOption2) {\n         //Execute code related to CustomOptionOption2\n         NSLog(@\"Option 2 is selected.\");\n     }\n    \n     if (option & CustomOptionOption3) {\n         //Execute code related to CustomOptionOption3\n         NSLog(@\"Option 3 is selected.\");\n     }\n}\n\n@end\n\n```\n\nThe calling code is as follows:\n\n```Swift\n\nCustomOptions selectedOptions = CustomOptionOption1 | CustomOptionOption3;\n[CustomOptionHandler performActionForOption:selectedOptions];\n\n```\n\nResults of the:\n\n```Swift\nOption 1 is selected.\nOption 3 is selected.\n\n```\n\n#### <font size=5 color=#4169E1>2. OptionSet protocol</font> \n\nOptionSet is the Swift version of NS_OPTIONS, but it is not a simple replacement, it is more complex.\n\nIn Swift, an OptionSet is a protocol used to represent a set of options or a collection of flags. It is a type-safe way to manage bit masks with discrete values. The OptionSet protocol allows you to define a set of options with a bit mask and operate in a set-like manner. Some types in the Swift standard library, such as NSOptions, UIControlEvents, etc., implement the OptionSet protocol.\n\n```Swift\npublic protocol OptionSet: RawRepresentable, SetAlgebra {\n     associatedtype Element = Self\n     init(rawValue: Self.RawValue)\n}\n\n```\n\n(1) The OptionSet protocol declares a public access level, indicating that it is publicly visible.\n\n(2) The OptionSet protocol inherits two protocols: RawRepresentable and SetAlgebra. This means that any type that conforms to the OptionSet protocol must satisfy the requirements of both protocols.\n\n(3) associatedtype Element = Self: This section specifies the associated type Element in the OptionSet protocol and sets it to Self by default, which means that the type of Element will be the type itself that follows the OptionSet protocol.\n\n(4) init(rawValue: Self.RawValue): This is a declaration of an initialization method that allows the creation of an OptionSet instance from a raw value. This method must be implemented.\n\nNext is an extension to the OptionSet protocol, which provides some default implementations:\n\n```Swift\nextension OptionSet {\n     @inlinable public func union(_ other: Self) -> Self\n     @inlinable public func intersection(_ other: Self) -> Self\n     @inlinable public func symmetricDifference(_ other: Self) -> Self\n}\n\n```\n\nThese extensions provide default set operation methods for types that follow the OptionSet protocol, including union, intersection, and symmetric difference. These methods are useful when combining options using bit masks, and they allow you to easily perform various operations such as adding, removing, or checking options.\n\n\n#### <font size=5 color=#4169E1>3. Sample code</font> \n\nLet's take a simple example to understand OptionSet in depth.\n\n(1) First, we define a theme option set that follows the OptionSet protocol.\n\n```Swift\nstruct ThemeOptions: OptionSet {\n     let rawValue: Int\n\n     static let dark = ThemeOptions(rawValue: 1 << 0)\n     static let light = ThemeOptions(rawValue: 1 << 1)\n     static let blue = ThemeOptions(rawValue: 1 << 2)\n     static let green = ThemeOptions(rawValue: 1 << 3)\n}\n\n```\n\nWe create a structure called ThemeOptions, which conforms to the OptionSet protocol. We define four theme options: dark, light, blue, and green, and assign a bitmask value to each option.\n\n(2) Users choose different themes:\n\n```Swift\nvar selectedOptions: ThemeOptions = [.dark, .blue]\n```\n\n(3) Use the union method to add more options:\n\n```Swift\nselectedOptions = selectedOptions.union(.green)\n```\n\n(4) To check whether an option has been selected, you can use the contains method:\n\n```Swift\nif selectedOptions.contains(.light) {\n     print(\"Light theme is selected.\")\n} else {\n     print(\"Light theme is not selected.\")\n}\n\n```","source":"_posts/Swift/01. Tips/13. How to use OptionSet Protocol.md","raw":"---\ntitle: 13. How to use OptionSet Protocol?\ndate: 2023-11-08 20:00:00\ncategories: \n- [Swift, 01. Tips]\ntags:\n- OptionSet\n- NS_OPTIONS\n---\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\n\n#### <font size=5 color=#4169E1>1. NS_OPTIONS and NS_ENUM in OC</font> \n\nThe following enumeration definitions are common in Objective-C:\n\n```Swift\n\ntypedef NS_ENUM(NSInteger, CustomEnum) {\n    CustomEnumOption1,\n    CustomEnumOption2,\n    CustomEnumOption3\n};\n\n```\n\n```Swift\n\ntypedef NS_OPTIONS(NSUInteger, CustomOptions) {\n    CustomOptionNone      = 0,\n    CustomOptionOption1   = 1 << 0,\n    CustomOptionOption2   = 1 << 1,\n    CustomOptionOption3   = 1 << 2\n};\n\n```\n\nTheir differences:\n\nNS_ENUM: used to define a set of related discrete values that cannot be combined by bit operations.\n\nNS_OPTIONS: Used to define a set of discrete values that can be combined by bit operations, usually used to represent a set of options or flags.\n\nHere is an example of using NS_OPTIONS:\n\n```Swift\n\ntypedef NS_OPTIONS(NSUInteger, CustomOptions) {\n     CustomOptionNone = 0,\n     CustomOptionOption1 = 1 << 0,\n     CustomOptionOption2 = 1 << 1,\n     CustomOptionOption3 = 1 << 2\n};\n\n@interface CustomOptionHandler : NSObject\n\n// Add method to execute code associated with option\n+ (void)performActionForOption:(CustomOptions)option;\n\n@end\n\n@implementation CustomOptionHandler\n\n+ (void)performActionForOption:(CustomOptions)option {\n     if (option & CustomOptionOption1) {\n         //Execute the code related to CustomOptionOption1\n         NSLog(@\"Option 1 is selected.\");\n     }\n    \n     if (option & CustomOptionOption2) {\n         //Execute code related to CustomOptionOption2\n         NSLog(@\"Option 2 is selected.\");\n     }\n    \n     if (option & CustomOptionOption3) {\n         //Execute code related to CustomOptionOption3\n         NSLog(@\"Option 3 is selected.\");\n     }\n}\n\n@end\n\n```\n\nThe calling code is as follows:\n\n```Swift\n\nCustomOptions selectedOptions = CustomOptionOption1 | CustomOptionOption3;\n[CustomOptionHandler performActionForOption:selectedOptions];\n\n```\n\nResults of the:\n\n```Swift\nOption 1 is selected.\nOption 3 is selected.\n\n```\n\n#### <font size=5 color=#4169E1>2. OptionSet protocol</font> \n\nOptionSet is the Swift version of NS_OPTIONS, but it is not a simple replacement, it is more complex.\n\nIn Swift, an OptionSet is a protocol used to represent a set of options or a collection of flags. It is a type-safe way to manage bit masks with discrete values. The OptionSet protocol allows you to define a set of options with a bit mask and operate in a set-like manner. Some types in the Swift standard library, such as NSOptions, UIControlEvents, etc., implement the OptionSet protocol.\n\n```Swift\npublic protocol OptionSet: RawRepresentable, SetAlgebra {\n     associatedtype Element = Self\n     init(rawValue: Self.RawValue)\n}\n\n```\n\n(1) The OptionSet protocol declares a public access level, indicating that it is publicly visible.\n\n(2) The OptionSet protocol inherits two protocols: RawRepresentable and SetAlgebra. This means that any type that conforms to the OptionSet protocol must satisfy the requirements of both protocols.\n\n(3) associatedtype Element = Self: This section specifies the associated type Element in the OptionSet protocol and sets it to Self by default, which means that the type of Element will be the type itself that follows the OptionSet protocol.\n\n(4) init(rawValue: Self.RawValue): This is a declaration of an initialization method that allows the creation of an OptionSet instance from a raw value. This method must be implemented.\n\nNext is an extension to the OptionSet protocol, which provides some default implementations:\n\n```Swift\nextension OptionSet {\n     @inlinable public func union(_ other: Self) -> Self\n     @inlinable public func intersection(_ other: Self) -> Self\n     @inlinable public func symmetricDifference(_ other: Self) -> Self\n}\n\n```\n\nThese extensions provide default set operation methods for types that follow the OptionSet protocol, including union, intersection, and symmetric difference. These methods are useful when combining options using bit masks, and they allow you to easily perform various operations such as adding, removing, or checking options.\n\n\n#### <font size=5 color=#4169E1>3. Sample code</font> \n\nLet's take a simple example to understand OptionSet in depth.\n\n(1) First, we define a theme option set that follows the OptionSet protocol.\n\n```Swift\nstruct ThemeOptions: OptionSet {\n     let rawValue: Int\n\n     static let dark = ThemeOptions(rawValue: 1 << 0)\n     static let light = ThemeOptions(rawValue: 1 << 1)\n     static let blue = ThemeOptions(rawValue: 1 << 2)\n     static let green = ThemeOptions(rawValue: 1 << 3)\n}\n\n```\n\nWe create a structure called ThemeOptions, which conforms to the OptionSet protocol. We define four theme options: dark, light, blue, and green, and assign a bitmask value to each option.\n\n(2) Users choose different themes:\n\n```Swift\nvar selectedOptions: ThemeOptions = [.dark, .blue]\n```\n\n(3) Use the union method to add more options:\n\n```Swift\nselectedOptions = selectedOptions.union(.green)\n```\n\n(4) To check whether an option has been selected, you can use the contains method:\n\n```Swift\nif selectedOptions.contains(.light) {\n     print(\"Light theme is selected.\")\n} else {\n     print(\"Light theme is not selected.\")\n}\n\n```","slug":"Swift/01. Tips/13. How to use OptionSet Protocol","published":1,"updated":"2023-11-15T13:50:55.688Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr580028vu0m3qy2dn7a","content":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<h4 id=\"1-NS-OPTIONS-and-NS-ENUM-in-OC\"><a href=\"#1-NS-OPTIONS-and-NS-ENUM-in-OC\" class=\"headerlink\" title=\"1. NS_OPTIONS and NS_ENUM in OC\"></a><font size=5 color=#4169E1>1. NS_OPTIONS and NS_ENUM in OC</font></h4><p>The following enumeration definitions are common in Objective-C:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">typedef <span class=\"type\">NS_ENUM</span>(<span class=\"type\">NSInteger</span>, <span class=\"type\">CustomEnum</span>) &#123;</span><br><span class=\"line\">    <span class=\"type\">CustomEnumOption1</span>,</span><br><span class=\"line\">    <span class=\"type\">CustomEnumOption2</span>,</span><br><span class=\"line\">    <span class=\"type\">CustomEnumOption3</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">typedef <span class=\"type\">NS_OPTIONS</span>(<span class=\"type\">NSUInteger</span>, <span class=\"type\">CustomOptions</span>) &#123;</span><br><span class=\"line\">    <span class=\"type\">CustomOptionNone</span>      <span class=\"operator\">=</span> <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"type\">CustomOptionOption1</span>   <span class=\"operator\">=</span> <span class=\"number\">1</span> <span class=\"operator\">&lt;&lt;</span> <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"type\">CustomOptionOption2</span>   <span class=\"operator\">=</span> <span class=\"number\">1</span> <span class=\"operator\">&lt;&lt;</span> <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"type\">CustomOptionOption3</span>   <span class=\"operator\">=</span> <span class=\"number\">1</span> <span class=\"operator\">&lt;&lt;</span> <span class=\"number\">2</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Their differences:</p>\n<p>NS_ENUM: used to define a set of related discrete values that cannot be combined by bit operations.</p>\n<p>NS_OPTIONS: Used to define a set of discrete values that can be combined by bit operations, usually used to represent a set of options or flags.</p>\n<p>Here is an example of using NS_OPTIONS:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">typedef <span class=\"type\">NS_OPTIONS</span>(<span class=\"type\">NSUInteger</span>, <span class=\"type\">CustomOptions</span>) &#123;</span><br><span class=\"line\">     <span class=\"type\">CustomOptionNone</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>,</span><br><span class=\"line\">     <span class=\"type\">CustomOptionOption1</span> <span class=\"operator\">=</span> <span class=\"number\">1</span> <span class=\"operator\">&lt;&lt;</span> <span class=\"number\">0</span>,</span><br><span class=\"line\">     <span class=\"type\">CustomOptionOption2</span> <span class=\"operator\">=</span> <span class=\"number\">1</span> <span class=\"operator\">&lt;&lt;</span> <span class=\"number\">1</span>,</span><br><span class=\"line\">     <span class=\"type\">CustomOptionOption3</span> <span class=\"operator\">=</span> <span class=\"number\">1</span> <span class=\"operator\">&lt;&lt;</span> <span class=\"number\">2</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@interface</span> <span class=\"type\">CustomOptionHandler</span> : <span class=\"type\">NSObject</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Add method to execute code associated with option</span></span><br><span class=\"line\"><span class=\"operator\">+</span> (void)performActionForOption:(<span class=\"type\">CustomOptions</span>)option;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@implementation</span> <span class=\"type\">CustomOptionHandler</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"operator\">+</span> (void)performActionForOption:(<span class=\"type\">CustomOptions</span>)option &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (option <span class=\"operator\">&amp;</span> <span class=\"type\">CustomOptionOption1</span>) &#123;</span><br><span class=\"line\">         <span class=\"comment\">//Execute the code related to CustomOptionOption1</span></span><br><span class=\"line\">         <span class=\"type\">NSLog</span>(@<span class=\"string\">&quot;Option 1 is selected.&quot;</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">     <span class=\"keyword\">if</span> (option <span class=\"operator\">&amp;</span> <span class=\"type\">CustomOptionOption2</span>) &#123;</span><br><span class=\"line\">         <span class=\"comment\">//Execute code related to CustomOptionOption2</span></span><br><span class=\"line\">         <span class=\"type\">NSLog</span>(@<span class=\"string\">&quot;Option 2 is selected.&quot;</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">     <span class=\"keyword\">if</span> (option <span class=\"operator\">&amp;</span> <span class=\"type\">CustomOptionOption3</span>) &#123;</span><br><span class=\"line\">         <span class=\"comment\">//Execute code related to CustomOptionOption3</span></span><br><span class=\"line\">         <span class=\"type\">NSLog</span>(@<span class=\"string\">&quot;Option 3 is selected.&quot;</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@end</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>The calling code is as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">CustomOptions</span> selectedOptions <span class=\"operator\">=</span> <span class=\"type\">CustomOptionOption1</span> <span class=\"operator\">|</span> <span class=\"type\">CustomOptionOption3</span>;</span><br><span class=\"line\">[<span class=\"type\">CustomOptionHandler</span> performActionForOption:selectedOptions];</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Results of the:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Option</span> <span class=\"number\">1</span> <span class=\"keyword\">is</span> selected.</span><br><span class=\"line\"><span class=\"type\">Option</span> <span class=\"number\">3</span> <span class=\"keyword\">is</span> selected.</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-OptionSet-protocol\"><a href=\"#2-OptionSet-protocol\" class=\"headerlink\" title=\"2. OptionSet protocol\"></a><font size=5 color=#4169E1>2. OptionSet protocol</font></h4><p>OptionSet is the Swift version of NS_OPTIONS, but it is not a simple replacement, it is more complex.</p>\n<p>In Swift, an OptionSet is a protocol used to represent a set of options or a collection of flags. It is a type-safe way to manage bit masks with discrete values. The OptionSet protocol allows you to define a set of options with a bit mask and operate in a set-like manner. Some types in the Swift standard library, such as NSOptions, UIControlEvents, etc., implement the OptionSet protocol.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">protocol</span> <span class=\"title class_\">OptionSet</span>: <span class=\"title class_\">RawRepresentable</span>, <span class=\"title class_\">SetAlgebra</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">associatedtype</span> <span class=\"type\">Element</span> <span class=\"operator\">=</span> <span class=\"keyword\">Self</span></span><br><span class=\"line\">     <span class=\"keyword\">init</span>(<span class=\"params\">rawValue</span>: <span class=\"keyword\">Self</span>.<span class=\"type\">RawValue</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>(1) The OptionSet protocol declares a public access level, indicating that it is publicly visible.</p>\n<p>(2) The OptionSet protocol inherits two protocols: RawRepresentable and SetAlgebra. This means that any type that conforms to the OptionSet protocol must satisfy the requirements of both protocols.</p>\n<p>(3) associatedtype Element &#x3D; Self: This section specifies the associated type Element in the OptionSet protocol and sets it to Self by default, which means that the type of Element will be the type itself that follows the OptionSet protocol.</p>\n<p>(4) init(rawValue: Self.RawValue): This is a declaration of an initialization method that allows the creation of an OptionSet instance from a raw value. This method must be implemented.</p>\n<p>Next is an extension to the OptionSet protocol, which provides some default implementations:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">OptionSet</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">@inlinable</span> <span class=\"keyword\">public</span> <span class=\"keyword\">func</span> <span class=\"title function_\">union</span>(<span class=\"keyword\">_</span> <span class=\"params\">other</span>: <span class=\"keyword\">Self</span>) -&gt; <span class=\"keyword\">Self</span></span><br><span class=\"line\">     <span class=\"keyword\">@inlinable</span> <span class=\"keyword\">public</span> <span class=\"keyword\">func</span> <span class=\"title function_\">intersection</span>(<span class=\"keyword\">_</span> <span class=\"params\">other</span>: <span class=\"keyword\">Self</span>) -&gt; <span class=\"keyword\">Self</span></span><br><span class=\"line\">     <span class=\"keyword\">@inlinable</span> <span class=\"keyword\">public</span> <span class=\"keyword\">func</span> <span class=\"title function_\">symmetricDifference</span>(<span class=\"keyword\">_</span> <span class=\"params\">other</span>: <span class=\"keyword\">Self</span>) -&gt; <span class=\"keyword\">Self</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>These extensions provide default set operation methods for types that follow the OptionSet protocol, including union, intersection, and symmetric difference. These methods are useful when combining options using bit masks, and they allow you to easily perform various operations such as adding, removing, or checking options.</p>\n<h4 id=\"3-Sample-code\"><a href=\"#3-Sample-code\" class=\"headerlink\" title=\"3. Sample code\"></a><font size=5 color=#4169E1>3. Sample code</font></h4><p>Let’s take a simple example to understand OptionSet in depth.</p>\n<p>(1) First, we define a theme option set that follows the OptionSet protocol.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ThemeOptions</span>: <span class=\"title class_\">OptionSet</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">let</span> rawValue: <span class=\"type\">Int</span></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> dark <span class=\"operator\">=</span> <span class=\"type\">ThemeOptions</span>(rawValue: <span class=\"number\">1</span> <span class=\"operator\">&lt;&lt;</span> <span class=\"number\">0</span>)</span><br><span class=\"line\">     <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> light <span class=\"operator\">=</span> <span class=\"type\">ThemeOptions</span>(rawValue: <span class=\"number\">1</span> <span class=\"operator\">&lt;&lt;</span> <span class=\"number\">1</span>)</span><br><span class=\"line\">     <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> blue <span class=\"operator\">=</span> <span class=\"type\">ThemeOptions</span>(rawValue: <span class=\"number\">1</span> <span class=\"operator\">&lt;&lt;</span> <span class=\"number\">2</span>)</span><br><span class=\"line\">     <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> green <span class=\"operator\">=</span> <span class=\"type\">ThemeOptions</span>(rawValue: <span class=\"number\">1</span> <span class=\"operator\">&lt;&lt;</span> <span class=\"number\">3</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>We create a structure called ThemeOptions, which conforms to the OptionSet protocol. We define four theme options: dark, light, blue, and green, and assign a bitmask value to each option.</p>\n<p>(2) Users choose different themes:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> selectedOptions: <span class=\"type\">ThemeOptions</span> <span class=\"operator\">=</span> [.dark, .blue]</span><br></pre></td></tr></table></figure>\n\n<p>(3) Use the union method to add more options:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">selectedOptions <span class=\"operator\">=</span> selectedOptions.union(.green)</span><br></pre></td></tr></table></figure>\n\n<p>(4) To check whether an option has been selected, you can use the contains method:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> selectedOptions.contains(.light) &#123;</span><br><span class=\"line\">     <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Light theme is selected.&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">     <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Light theme is not selected.&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<h4 id=\"1-NS-OPTIONS-and-NS-ENUM-in-OC\"><a href=\"#1-NS-OPTIONS-and-NS-ENUM-in-OC\" class=\"headerlink\" title=\"1. NS_OPTIONS and NS_ENUM in OC\"></a><font size=5 color=#4169E1>1. NS_OPTIONS and NS_ENUM in OC</font></h4><p>The following enumeration definitions are common in Objective-C:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">typedef <span class=\"type\">NS_ENUM</span>(<span class=\"type\">NSInteger</span>, <span class=\"type\">CustomEnum</span>) &#123;</span><br><span class=\"line\">    <span class=\"type\">CustomEnumOption1</span>,</span><br><span class=\"line\">    <span class=\"type\">CustomEnumOption2</span>,</span><br><span class=\"line\">    <span class=\"type\">CustomEnumOption3</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">typedef <span class=\"type\">NS_OPTIONS</span>(<span class=\"type\">NSUInteger</span>, <span class=\"type\">CustomOptions</span>) &#123;</span><br><span class=\"line\">    <span class=\"type\">CustomOptionNone</span>      <span class=\"operator\">=</span> <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"type\">CustomOptionOption1</span>   <span class=\"operator\">=</span> <span class=\"number\">1</span> <span class=\"operator\">&lt;&lt;</span> <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"type\">CustomOptionOption2</span>   <span class=\"operator\">=</span> <span class=\"number\">1</span> <span class=\"operator\">&lt;&lt;</span> <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"type\">CustomOptionOption3</span>   <span class=\"operator\">=</span> <span class=\"number\">1</span> <span class=\"operator\">&lt;&lt;</span> <span class=\"number\">2</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Their differences:</p>\n<p>NS_ENUM: used to define a set of related discrete values that cannot be combined by bit operations.</p>\n<p>NS_OPTIONS: Used to define a set of discrete values that can be combined by bit operations, usually used to represent a set of options or flags.</p>\n<p>Here is an example of using NS_OPTIONS:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">typedef <span class=\"type\">NS_OPTIONS</span>(<span class=\"type\">NSUInteger</span>, <span class=\"type\">CustomOptions</span>) &#123;</span><br><span class=\"line\">     <span class=\"type\">CustomOptionNone</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>,</span><br><span class=\"line\">     <span class=\"type\">CustomOptionOption1</span> <span class=\"operator\">=</span> <span class=\"number\">1</span> <span class=\"operator\">&lt;&lt;</span> <span class=\"number\">0</span>,</span><br><span class=\"line\">     <span class=\"type\">CustomOptionOption2</span> <span class=\"operator\">=</span> <span class=\"number\">1</span> <span class=\"operator\">&lt;&lt;</span> <span class=\"number\">1</span>,</span><br><span class=\"line\">     <span class=\"type\">CustomOptionOption3</span> <span class=\"operator\">=</span> <span class=\"number\">1</span> <span class=\"operator\">&lt;&lt;</span> <span class=\"number\">2</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@interface</span> <span class=\"type\">CustomOptionHandler</span> : <span class=\"type\">NSObject</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Add method to execute code associated with option</span></span><br><span class=\"line\"><span class=\"operator\">+</span> (void)performActionForOption:(<span class=\"type\">CustomOptions</span>)option;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@implementation</span> <span class=\"type\">CustomOptionHandler</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"operator\">+</span> (void)performActionForOption:(<span class=\"type\">CustomOptions</span>)option &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (option <span class=\"operator\">&amp;</span> <span class=\"type\">CustomOptionOption1</span>) &#123;</span><br><span class=\"line\">         <span class=\"comment\">//Execute the code related to CustomOptionOption1</span></span><br><span class=\"line\">         <span class=\"type\">NSLog</span>(@<span class=\"string\">&quot;Option 1 is selected.&quot;</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">     <span class=\"keyword\">if</span> (option <span class=\"operator\">&amp;</span> <span class=\"type\">CustomOptionOption2</span>) &#123;</span><br><span class=\"line\">         <span class=\"comment\">//Execute code related to CustomOptionOption2</span></span><br><span class=\"line\">         <span class=\"type\">NSLog</span>(@<span class=\"string\">&quot;Option 2 is selected.&quot;</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">     <span class=\"keyword\">if</span> (option <span class=\"operator\">&amp;</span> <span class=\"type\">CustomOptionOption3</span>) &#123;</span><br><span class=\"line\">         <span class=\"comment\">//Execute code related to CustomOptionOption3</span></span><br><span class=\"line\">         <span class=\"type\">NSLog</span>(@<span class=\"string\">&quot;Option 3 is selected.&quot;</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@end</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>The calling code is as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">CustomOptions</span> selectedOptions <span class=\"operator\">=</span> <span class=\"type\">CustomOptionOption1</span> <span class=\"operator\">|</span> <span class=\"type\">CustomOptionOption3</span>;</span><br><span class=\"line\">[<span class=\"type\">CustomOptionHandler</span> performActionForOption:selectedOptions];</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Results of the:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Option</span> <span class=\"number\">1</span> <span class=\"keyword\">is</span> selected.</span><br><span class=\"line\"><span class=\"type\">Option</span> <span class=\"number\">3</span> <span class=\"keyword\">is</span> selected.</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-OptionSet-protocol\"><a href=\"#2-OptionSet-protocol\" class=\"headerlink\" title=\"2. OptionSet protocol\"></a><font size=5 color=#4169E1>2. OptionSet protocol</font></h4><p>OptionSet is the Swift version of NS_OPTIONS, but it is not a simple replacement, it is more complex.</p>\n<p>In Swift, an OptionSet is a protocol used to represent a set of options or a collection of flags. It is a type-safe way to manage bit masks with discrete values. The OptionSet protocol allows you to define a set of options with a bit mask and operate in a set-like manner. Some types in the Swift standard library, such as NSOptions, UIControlEvents, etc., implement the OptionSet protocol.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">protocol</span> <span class=\"title class_\">OptionSet</span>: <span class=\"title class_\">RawRepresentable</span>, <span class=\"title class_\">SetAlgebra</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">associatedtype</span> <span class=\"type\">Element</span> <span class=\"operator\">=</span> <span class=\"keyword\">Self</span></span><br><span class=\"line\">     <span class=\"keyword\">init</span>(<span class=\"params\">rawValue</span>: <span class=\"keyword\">Self</span>.<span class=\"type\">RawValue</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>(1) The OptionSet protocol declares a public access level, indicating that it is publicly visible.</p>\n<p>(2) The OptionSet protocol inherits two protocols: RawRepresentable and SetAlgebra. This means that any type that conforms to the OptionSet protocol must satisfy the requirements of both protocols.</p>\n<p>(3) associatedtype Element &#x3D; Self: This section specifies the associated type Element in the OptionSet protocol and sets it to Self by default, which means that the type of Element will be the type itself that follows the OptionSet protocol.</p>\n<p>(4) init(rawValue: Self.RawValue): This is a declaration of an initialization method that allows the creation of an OptionSet instance from a raw value. This method must be implemented.</p>\n<p>Next is an extension to the OptionSet protocol, which provides some default implementations:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">OptionSet</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">@inlinable</span> <span class=\"keyword\">public</span> <span class=\"keyword\">func</span> <span class=\"title function_\">union</span>(<span class=\"keyword\">_</span> <span class=\"params\">other</span>: <span class=\"keyword\">Self</span>) -&gt; <span class=\"keyword\">Self</span></span><br><span class=\"line\">     <span class=\"keyword\">@inlinable</span> <span class=\"keyword\">public</span> <span class=\"keyword\">func</span> <span class=\"title function_\">intersection</span>(<span class=\"keyword\">_</span> <span class=\"params\">other</span>: <span class=\"keyword\">Self</span>) -&gt; <span class=\"keyword\">Self</span></span><br><span class=\"line\">     <span class=\"keyword\">@inlinable</span> <span class=\"keyword\">public</span> <span class=\"keyword\">func</span> <span class=\"title function_\">symmetricDifference</span>(<span class=\"keyword\">_</span> <span class=\"params\">other</span>: <span class=\"keyword\">Self</span>) -&gt; <span class=\"keyword\">Self</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>These extensions provide default set operation methods for types that follow the OptionSet protocol, including union, intersection, and symmetric difference. These methods are useful when combining options using bit masks, and they allow you to easily perform various operations such as adding, removing, or checking options.</p>\n<h4 id=\"3-Sample-code\"><a href=\"#3-Sample-code\" class=\"headerlink\" title=\"3. Sample code\"></a><font size=5 color=#4169E1>3. Sample code</font></h4><p>Let’s take a simple example to understand OptionSet in depth.</p>\n<p>(1) First, we define a theme option set that follows the OptionSet protocol.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ThemeOptions</span>: <span class=\"title class_\">OptionSet</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">let</span> rawValue: <span class=\"type\">Int</span></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> dark <span class=\"operator\">=</span> <span class=\"type\">ThemeOptions</span>(rawValue: <span class=\"number\">1</span> <span class=\"operator\">&lt;&lt;</span> <span class=\"number\">0</span>)</span><br><span class=\"line\">     <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> light <span class=\"operator\">=</span> <span class=\"type\">ThemeOptions</span>(rawValue: <span class=\"number\">1</span> <span class=\"operator\">&lt;&lt;</span> <span class=\"number\">1</span>)</span><br><span class=\"line\">     <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> blue <span class=\"operator\">=</span> <span class=\"type\">ThemeOptions</span>(rawValue: <span class=\"number\">1</span> <span class=\"operator\">&lt;&lt;</span> <span class=\"number\">2</span>)</span><br><span class=\"line\">     <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> green <span class=\"operator\">=</span> <span class=\"type\">ThemeOptions</span>(rawValue: <span class=\"number\">1</span> <span class=\"operator\">&lt;&lt;</span> <span class=\"number\">3</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>We create a structure called ThemeOptions, which conforms to the OptionSet protocol. We define four theme options: dark, light, blue, and green, and assign a bitmask value to each option.</p>\n<p>(2) Users choose different themes:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> selectedOptions: <span class=\"type\">ThemeOptions</span> <span class=\"operator\">=</span> [.dark, .blue]</span><br></pre></td></tr></table></figure>\n\n<p>(3) Use the union method to add more options:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">selectedOptions <span class=\"operator\">=</span> selectedOptions.union(.green)</span><br></pre></td></tr></table></figure>\n\n<p>(4) To check whether an option has been selected, you can use the contains method:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> selectedOptions.contains(.light) &#123;</span><br><span class=\"line\">     <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Light theme is selected.&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">     <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Light theme is not selected.&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"14. How to use inout in Swift?","date":"2023-11-09T19:00:00.000Z","_content":"\n<font color=gray size=2>*It will take about 1 minutes to finish reading this article.*</font>\n\nIn Swift, the `inout` keyword is used for function parameters, allowing a function to modify the value of the passed-in parameter, with these modifications affecting the original passed-in argument. Using the `inout` keyword enables a function to pass a reference to a parameter rather than a copy, allowing the function to change the value of the passed-in parameter. Here's what `inout` does:\n\n1. Modifying the value of the passed-in parameter: By using the `inout` keyword, a function can modify the value of the passed-in parameter, rather than just a local copy within the function.\n\n   ```swift\n   func updateValue(_ value: inout Int) {\n       value += 1\n   }\n\n   var myValue = 5\n   updateValue(&myValue)\n   print(myValue) // Prints 6\n   ```\n\n2. Passing a reference instead of a value: By passing a reference to the parameter, the function can directly modify the original passed-in parameter without the need to create a copy. This is particularly useful when you need to modify a parameter and want those modifications to affect the original value.\n\n3. Improving performance: By passing a reference instead of a value, unnecessary copies can be avoided, thus improving the performance and memory efficiency of the function.\n\nTherefore, using the `inout` keyword allows a function to handle passed-in parameters more flexibly, enabling the function to modify the value of the original passed-in parameter rather than just manipulating a copy of the parameter.","source":"_posts/Swift/01. Tips/14. How to use inout in Swift.md","raw":"---\ntitle: 14. How to use inout in Swift?\ndate: 2023-11-09 20:00:00\ncategories: \n- [Swift, 01. Tips]\ntags:\n- inout\n---\n\n<font color=gray size=2>*It will take about 1 minutes to finish reading this article.*</font>\n\nIn Swift, the `inout` keyword is used for function parameters, allowing a function to modify the value of the passed-in parameter, with these modifications affecting the original passed-in argument. Using the `inout` keyword enables a function to pass a reference to a parameter rather than a copy, allowing the function to change the value of the passed-in parameter. Here's what `inout` does:\n\n1. Modifying the value of the passed-in parameter: By using the `inout` keyword, a function can modify the value of the passed-in parameter, rather than just a local copy within the function.\n\n   ```swift\n   func updateValue(_ value: inout Int) {\n       value += 1\n   }\n\n   var myValue = 5\n   updateValue(&myValue)\n   print(myValue) // Prints 6\n   ```\n\n2. Passing a reference instead of a value: By passing a reference to the parameter, the function can directly modify the original passed-in parameter without the need to create a copy. This is particularly useful when you need to modify a parameter and want those modifications to affect the original value.\n\n3. Improving performance: By passing a reference instead of a value, unnecessary copies can be avoided, thus improving the performance and memory efficiency of the function.\n\nTherefore, using the `inout` keyword allows a function to handle passed-in parameters more flexibly, enabling the function to modify the value of the original passed-in parameter rather than just manipulating a copy of the parameter.","slug":"Swift/01. Tips/14. How to use inout in Swift","published":1,"updated":"2023-11-07T16:41:28.254Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr590029vu0mezbe3ds7","content":"<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p>\n<p>In Swift, the <code>inout</code> keyword is used for function parameters, allowing a function to modify the value of the passed-in parameter, with these modifications affecting the original passed-in argument. Using the <code>inout</code> keyword enables a function to pass a reference to a parameter rather than a copy, allowing the function to change the value of the passed-in parameter. Here’s what <code>inout</code> does:</p>\n<ol>\n<li><p>Modifying the value of the passed-in parameter: By using the <code>inout</code> keyword, a function can modify the value of the passed-in parameter, rather than just a local copy within the function.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">updateValue</span>(<span class=\"keyword\">_</span> <span class=\"params\">value</span>: <span class=\"keyword\">inout</span> <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">    value <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> myValue <span class=\"operator\">=</span> <span class=\"number\">5</span></span><br><span class=\"line\">updateValue(<span class=\"operator\">&amp;</span>myValue)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(myValue) <span class=\"comment\">// Prints 6</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Passing a reference instead of a value: By passing a reference to the parameter, the function can directly modify the original passed-in parameter without the need to create a copy. This is particularly useful when you need to modify a parameter and want those modifications to affect the original value.</p>\n</li>\n<li><p>Improving performance: By passing a reference instead of a value, unnecessary copies can be avoided, thus improving the performance and memory efficiency of the function.</p>\n</li>\n</ol>\n<p>Therefore, using the <code>inout</code> keyword allows a function to handle passed-in parameters more flexibly, enabling the function to modify the value of the original passed-in parameter rather than just manipulating a copy of the parameter.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p>\n<p>In Swift, the <code>inout</code> keyword is used for function parameters, allowing a function to modify the value of the passed-in parameter, with these modifications affecting the original passed-in argument. Using the <code>inout</code> keyword enables a function to pass a reference to a parameter rather than a copy, allowing the function to change the value of the passed-in parameter. Here’s what <code>inout</code> does:</p>\n<ol>\n<li><p>Modifying the value of the passed-in parameter: By using the <code>inout</code> keyword, a function can modify the value of the passed-in parameter, rather than just a local copy within the function.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">updateValue</span>(<span class=\"keyword\">_</span> <span class=\"params\">value</span>: <span class=\"keyword\">inout</span> <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">    value <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> myValue <span class=\"operator\">=</span> <span class=\"number\">5</span></span><br><span class=\"line\">updateValue(<span class=\"operator\">&amp;</span>myValue)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(myValue) <span class=\"comment\">// Prints 6</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Passing a reference instead of a value: By passing a reference to the parameter, the function can directly modify the original passed-in parameter without the need to create a copy. This is particularly useful when you need to modify a parameter and want those modifications to affect the original value.</p>\n</li>\n<li><p>Improving performance: By passing a reference instead of a value, unnecessary copies can be avoided, thus improving the performance and memory efficiency of the function.</p>\n</li>\n</ol>\n<p>Therefore, using the <code>inout</code> keyword allows a function to handle passed-in parameters more flexibly, enabling the function to modify the value of the original passed-in parameter rather than just manipulating a copy of the parameter.</p>\n"},{"title":"15. How to make the Error type compatible with NSError in Swift?","date":"2023-11-10T19:00:00.000Z","_content":"\n<font color=gray size=2>*It will take about 2 minutes to finish reading this article.*</font>\n\nTo make the `Error` type compatible with `NSError` in Swift, you can conform your custom error type to the `Error` protocol and use the bridging of `NSError`. To ensure compatibility between `Error` and `NSError`, follow these steps:\n\n1. Have your custom error type conform to the `Error` protocol.\n\n   ```Swift\n   enum CustomError: Error {\n       case someError\n   }\n   ```\n\n2. Use the bridging mechanism of `NSError` to bridge your `Error` type to `NSError`.\n\n   ```Swift\n   let customError = CustomError.someError\n   let nsError = customError as NSError\n   ```\n\n3. Application\n\n   ```Swift\n   do {\n       try doSomething()\n   } catch {\n       if let error = error as? CustomError {\n           let userInfo = [NSLocalizedDescriptionKey: \"Custom Error Occurred\"]\n           let nsError = NSError(domain: \"com.example\", code: 100, userInfo: userInfo)\n           print(nsError)\n       } else {\n           // Handle other types of errors\n       }\n   }\n   ```\n \nBy bridging your custom `Error` type to `NSError`, you can seamlessly handle errors between Swift and Objective-C, and utilize Swift's error handling mechanism when interacting with Objective-C code. This compatibility ensures proper error handling in mixed programming scenarios.","source":"_posts/Swift/01. Tips/15. How to make the Error type compatible with NSError in Swift.md","raw":"---\ntitle: 15. How to make the Error type compatible with NSError in Swift?\ndate: 2023-11-10 20:00:00\ncategories: \n- [Swift, 01. Tips]\ntags:\n- Error\n- NSError\n---\n\n<font color=gray size=2>*It will take about 2 minutes to finish reading this article.*</font>\n\nTo make the `Error` type compatible with `NSError` in Swift, you can conform your custom error type to the `Error` protocol and use the bridging of `NSError`. To ensure compatibility between `Error` and `NSError`, follow these steps:\n\n1. Have your custom error type conform to the `Error` protocol.\n\n   ```Swift\n   enum CustomError: Error {\n       case someError\n   }\n   ```\n\n2. Use the bridging mechanism of `NSError` to bridge your `Error` type to `NSError`.\n\n   ```Swift\n   let customError = CustomError.someError\n   let nsError = customError as NSError\n   ```\n\n3. Application\n\n   ```Swift\n   do {\n       try doSomething()\n   } catch {\n       if let error = error as? CustomError {\n           let userInfo = [NSLocalizedDescriptionKey: \"Custom Error Occurred\"]\n           let nsError = NSError(domain: \"com.example\", code: 100, userInfo: userInfo)\n           print(nsError)\n       } else {\n           // Handle other types of errors\n       }\n   }\n   ```\n \nBy bridging your custom `Error` type to `NSError`, you can seamlessly handle errors between Swift and Objective-C, and utilize Swift's error handling mechanism when interacting with Objective-C code. This compatibility ensures proper error handling in mixed programming scenarios.","slug":"Swift/01. Tips/15. How to make the Error type compatible with NSError in Swift","published":1,"updated":"2023-11-15T13:51:32.665Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr59002dvu0m2rtf0lkk","content":"<p><font color=gray size=2><em>It will take about 2 minutes to finish reading this article.</em></font></p>\n<p>To make the <code>Error</code> type compatible with <code>NSError</code> in Swift, you can conform your custom error type to the <code>Error</code> protocol and use the bridging of <code>NSError</code>. To ensure compatibility between <code>Error</code> and <code>NSError</code>, follow these steps:</p>\n<ol>\n<li><p>Have your custom error type conform to the <code>Error</code> protocol.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">CustomError</span>: <span class=\"title class_\">Error</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> someError</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Use the bridging mechanism of <code>NSError</code> to bridge your <code>Error</code> type to <code>NSError</code>.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> customError <span class=\"operator\">=</span> <span class=\"type\">CustomError</span>.someError</span><br><span class=\"line\"><span class=\"keyword\">let</span> nsError <span class=\"operator\">=</span> customError <span class=\"keyword\">as</span> <span class=\"type\">NSError</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Application</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> doSomething()</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> error <span class=\"operator\">=</span> error <span class=\"keyword\">as?</span> <span class=\"type\">CustomError</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> userInfo <span class=\"operator\">=</span> [<span class=\"type\">NSLocalizedDescriptionKey</span>: <span class=\"string\">&quot;Custom Error Occurred&quot;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">let</span> nsError <span class=\"operator\">=</span> <span class=\"type\">NSError</span>(domain: <span class=\"string\">&quot;com.example&quot;</span>, code: <span class=\"number\">100</span>, userInfo: userInfo)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(nsError)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Handle other types of errors</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>By bridging your custom <code>Error</code> type to <code>NSError</code>, you can seamlessly handle errors between Swift and Objective-C, and utilize Swift’s error handling mechanism when interacting with Objective-C code. This compatibility ensures proper error handling in mixed programming scenarios.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 2 minutes to finish reading this article.</em></font></p>\n<p>To make the <code>Error</code> type compatible with <code>NSError</code> in Swift, you can conform your custom error type to the <code>Error</code> protocol and use the bridging of <code>NSError</code>. To ensure compatibility between <code>Error</code> and <code>NSError</code>, follow these steps:</p>\n<ol>\n<li><p>Have your custom error type conform to the <code>Error</code> protocol.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">CustomError</span>: <span class=\"title class_\">Error</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> someError</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Use the bridging mechanism of <code>NSError</code> to bridge your <code>Error</code> type to <code>NSError</code>.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> customError <span class=\"operator\">=</span> <span class=\"type\">CustomError</span>.someError</span><br><span class=\"line\"><span class=\"keyword\">let</span> nsError <span class=\"operator\">=</span> customError <span class=\"keyword\">as</span> <span class=\"type\">NSError</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Application</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> doSomething()</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> error <span class=\"operator\">=</span> error <span class=\"keyword\">as?</span> <span class=\"type\">CustomError</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> userInfo <span class=\"operator\">=</span> [<span class=\"type\">NSLocalizedDescriptionKey</span>: <span class=\"string\">&quot;Custom Error Occurred&quot;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">let</span> nsError <span class=\"operator\">=</span> <span class=\"type\">NSError</span>(domain: <span class=\"string\">&quot;com.example&quot;</span>, code: <span class=\"number\">100</span>, userInfo: userInfo)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(nsError)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Handle other types of errors</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>By bridging your custom <code>Error</code> type to <code>NSError</code>, you can seamlessly handle errors between Swift and Objective-C, and utilize Swift’s error handling mechanism when interacting with Objective-C code. This compatibility ensures proper error handling in mixed programming scenarios.</p>\n"},{"title":"16. How to use Numeric or BinaryInteger protocol?","date":"2023-11-11T19:00:00.000Z","_content":"\n<font color=gray size=2>*It will take about 2 minutes to finish reading this article.*</font>\n\n\n#### <font size=5 color=#4169E1>1. Numeric</font> \n\nIf you want to represent a function whose parameter type can be any kind of number, including both integers and floating-point numbers, you can use the protocol Numeric for the generic type. Here's how you can represent it:\n\n```Swift\nfunc processInteger<T: BinaryInteger>(_ number: T) {\n     // handle integers here\n     print(\"The integer is: \\(number)\")\n}\n\nprocessInteger(5) // integer parameter\n\n```\n\n#### <font size=5 color=#4169E1>2. BinaryInteger</font> \n\n`BinaryInteger` is a protocol in Swift that is used to represent integer types. It defines the basic behaviors and functionalities of integers. To make a function capable of accepting parameters that conform to the `BinaryInteger` protocol, you can do so as follows:\n\n```Swift\nfunc processInteger<T: BinaryInteger>(_ number: T) {\n    // Process the integer here\n    print(\"The integer is: \\(number)\")\n}\n\nprocessInteger(5) // Integer argument\n```\n\nBy using `T: BinaryInteger` within the function, you ensure that the function accepts any integer type that adheres to the `BinaryInteger` protocol, including `Int`, `Int8`, `Int16`, `Int32`, `Int64`, `UInt`, `UInt8`, `UInt16`, `UInt32`, and `UInt64`, among others.\n\n","source":"_posts/Swift/01. Tips/16. How to use Numeric or BinaryInteger protocol.md","raw":"---\ntitle: 16. How to use Numeric or BinaryInteger protocol?\ndate: 2023-11-11 20:00:00\ncategories: \n- [Swift, 01. Tips]\ntags:\n- Error\n- NSError\n---\n\n<font color=gray size=2>*It will take about 2 minutes to finish reading this article.*</font>\n\n\n#### <font size=5 color=#4169E1>1. Numeric</font> \n\nIf you want to represent a function whose parameter type can be any kind of number, including both integers and floating-point numbers, you can use the protocol Numeric for the generic type. Here's how you can represent it:\n\n```Swift\nfunc processInteger<T: BinaryInteger>(_ number: T) {\n     // handle integers here\n     print(\"The integer is: \\(number)\")\n}\n\nprocessInteger(5) // integer parameter\n\n```\n\n#### <font size=5 color=#4169E1>2. BinaryInteger</font> \n\n`BinaryInteger` is a protocol in Swift that is used to represent integer types. It defines the basic behaviors and functionalities of integers. To make a function capable of accepting parameters that conform to the `BinaryInteger` protocol, you can do so as follows:\n\n```Swift\nfunc processInteger<T: BinaryInteger>(_ number: T) {\n    // Process the integer here\n    print(\"The integer is: \\(number)\")\n}\n\nprocessInteger(5) // Integer argument\n```\n\nBy using `T: BinaryInteger` within the function, you ensure that the function accepts any integer type that adheres to the `BinaryInteger` protocol, including `Int`, `Int8`, `Int16`, `Int32`, `Int64`, `UInt`, `UInt8`, `UInt16`, `UInt32`, and `UInt64`, among others.\n\n","slug":"Swift/01. Tips/16. How to use Numeric or BinaryInteger protocol","published":1,"updated":"2023-11-07T17:48:00.856Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr5a002fvu0mg7z02t30","content":"<p><font color=gray size=2><em>It will take about 2 minutes to finish reading this article.</em></font></p>\n<h4 id=\"1-Numeric\"><a href=\"#1-Numeric\" class=\"headerlink\" title=\"1. Numeric\"></a><font size=5 color=#4169E1>1. Numeric</font></h4><p>If you want to represent a function whose parameter type can be any kind of number, including both integers and floating-point numbers, you can use the protocol Numeric for the generic type. Here’s how you can represent it:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">processInteger</span>&lt;<span class=\"type\">T</span>: <span class=\"type\">BinaryInteger</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">number</span>: <span class=\"type\">T</span>) &#123;</span><br><span class=\"line\">     <span class=\"comment\">// handle integers here</span></span><br><span class=\"line\">     <span class=\"built_in\">print</span>(<span class=\"string\">&quot;The integer is: <span class=\"subst\">\\(number)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">processInteger(<span class=\"number\">5</span>) <span class=\"comment\">// integer parameter</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-BinaryInteger\"><a href=\"#2-BinaryInteger\" class=\"headerlink\" title=\"2. BinaryInteger\"></a><font size=5 color=#4169E1>2. BinaryInteger</font></h4><p><code>BinaryInteger</code> is a protocol in Swift that is used to represent integer types. It defines the basic behaviors and functionalities of integers. To make a function capable of accepting parameters that conform to the <code>BinaryInteger</code> protocol, you can do so as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">processInteger</span>&lt;<span class=\"type\">T</span>: <span class=\"type\">BinaryInteger</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">number</span>: <span class=\"type\">T</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Process the integer here</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;The integer is: <span class=\"subst\">\\(number)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">processInteger(<span class=\"number\">5</span>) <span class=\"comment\">// Integer argument</span></span><br></pre></td></tr></table></figure>\n\n<p>By using <code>T: BinaryInteger</code> within the function, you ensure that the function accepts any integer type that adheres to the <code>BinaryInteger</code> protocol, including <code>Int</code>, <code>Int8</code>, <code>Int16</code>, <code>Int32</code>, <code>Int64</code>, <code>UInt</code>, <code>UInt8</code>, <code>UInt16</code>, <code>UInt32</code>, and <code>UInt64</code>, among others.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 2 minutes to finish reading this article.</em></font></p>\n<h4 id=\"1-Numeric\"><a href=\"#1-Numeric\" class=\"headerlink\" title=\"1. Numeric\"></a><font size=5 color=#4169E1>1. Numeric</font></h4><p>If you want to represent a function whose parameter type can be any kind of number, including both integers and floating-point numbers, you can use the protocol Numeric for the generic type. Here’s how you can represent it:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">processInteger</span>&lt;<span class=\"type\">T</span>: <span class=\"type\">BinaryInteger</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">number</span>: <span class=\"type\">T</span>) &#123;</span><br><span class=\"line\">     <span class=\"comment\">// handle integers here</span></span><br><span class=\"line\">     <span class=\"built_in\">print</span>(<span class=\"string\">&quot;The integer is: <span class=\"subst\">\\(number)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">processInteger(<span class=\"number\">5</span>) <span class=\"comment\">// integer parameter</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-BinaryInteger\"><a href=\"#2-BinaryInteger\" class=\"headerlink\" title=\"2. BinaryInteger\"></a><font size=5 color=#4169E1>2. BinaryInteger</font></h4><p><code>BinaryInteger</code> is a protocol in Swift that is used to represent integer types. It defines the basic behaviors and functionalities of integers. To make a function capable of accepting parameters that conform to the <code>BinaryInteger</code> protocol, you can do so as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">processInteger</span>&lt;<span class=\"type\">T</span>: <span class=\"type\">BinaryInteger</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">number</span>: <span class=\"type\">T</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Process the integer here</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;The integer is: <span class=\"subst\">\\(number)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">processInteger(<span class=\"number\">5</span>) <span class=\"comment\">// Integer argument</span></span><br></pre></td></tr></table></figure>\n\n<p>By using <code>T: BinaryInteger</code> within the function, you ensure that the function accepts any integer type that adheres to the <code>BinaryInteger</code> protocol, including <code>Int</code>, <code>Int8</code>, <code>Int16</code>, <code>Int32</code>, <code>Int64</code>, <code>UInt</code>, <code>UInt8</code>, <code>UInt16</code>, <code>UInt32</code>, and <code>UInt64</code>, among others.</p>\n"},{"title":"00. Structures and Classes","date":"2023-03-02T19:40:59.000Z","_content":"\n<font color=gray size=2>*It will take about 5 minutes to finish reading this article.*</font>\n\n\nUnlike other programming languages, <strong>*In Swift, you can define a structure or class in just a single file*</strong>, and the external interface to that class or structure is automatically made available for other code to use.\n\n#### <font size=3 color=#4169E1> 1. Comparing Structures and Classes. </font> \n\n<font size=2 color=#4169E1>1.1 Differences and similarities.</font>   \nStructures and Classes in Swift have many things in common. Both can:\n>1. Property, method and initializers can both be defined.  \n>2. Both support protocol and extension.\n\nThey have diferent capabilities that:\n\n>1. Class is the reference type; Struct is a value type.\n>2. Class supports inheritance; Struct does not support inheritance.\n>3. The mutating keyword is not required to modify the attribute of the method declared by class; struct needs.\n>4. The class does not provide a default memberwise initializer; Struct provides the default memberwise initializer.\n>5. Class supports reference counting; Struct is not supported.\n>6. Class supports Type casting; Struct is not supported.\n>7. Class supports Deinitializers; Struct is not supported.\n\n<font size=2 color=#4169E1>1.2 Identity Operators.</font>  \nIt can sometimes be useful to find out whether two constants or variables refer to exactly the same instance of a class. To enable this, Swift provides two identity operators:\n\n> Identical to (===)  \n> Not identical to (!==)  \n\nUse these operators to check whether two constants or variables refer to the same single instance.\n\nBy default, custom classes and structures don’t have an implementation of the equivalence operators, known as the equal to operator (==) and not equal to operator (!=). You usually implement the == operator, and use the standard library’s default implementation of the != operator that negates the result of the == operator. For example:\n```Swift \nextension Vector2D: Equatable {\n    static func == (left: Vector2D, right: Vector2D) -> Bool {\n        return (left.x == right.x) && (left.y == right.y)\n    }\n  }\n```\n\n#### <font size=3 color=#4169E1> 2. Choosing Between Structures and Classes. </font> \nHow to select Struct and Class in the project during development？\n> 1. Choose Structures by Default.\n> 2. Use Classes When You Need Objective-C Interoperability.\n> 3. Use Classes When You Need to Control Identity.\n> 4. Use Structures When You Don’t Control Identity.\n> 5. Use Structures and Protocols to Model Inheritance and Share Behavior.\n\nWe can make a summary that, do not use class if you can use struct.\n\n> 1. When using struct, you do not need to consider memory leaks and multi-threaded' reads and writes, because it will copy values when passing them.\n> 2. Struct is stored in the stack and class is stored in the heap. Struct is more faster.\n\n\n#### <font size=3 color=gray>*Reference*</font>\n[1] [Structures and Classes](https://docs.swift.org/swift-book/LanguageGuide/ClassesAndStructures.html)   \n[2] [Choosing Between Structures and Classes](https://developer.apple.com/documentation/swift/choosing-between-structures-and-classes)  \n[3] [Why Choose Struct Over Class?](https://stackoverflow.com/questions/24232799/why-choose-struct-over-class?rq=1)\n\n","source":"_posts/Swift/03. Structs/00. Structures and Classes.md","raw":"---\ntitle: 00. Structures and Classes\ndate: 2023-03-2 20:40:59\ncategories: \n- [Swift, 03. Structs]\ntags:\n- struct\n- class\n---\n\n<font color=gray size=2>*It will take about 5 minutes to finish reading this article.*</font>\n\n\nUnlike other programming languages, <strong>*In Swift, you can define a structure or class in just a single file*</strong>, and the external interface to that class or structure is automatically made available for other code to use.\n\n#### <font size=3 color=#4169E1> 1. Comparing Structures and Classes. </font> \n\n<font size=2 color=#4169E1>1.1 Differences and similarities.</font>   \nStructures and Classes in Swift have many things in common. Both can:\n>1. Property, method and initializers can both be defined.  \n>2. Both support protocol and extension.\n\nThey have diferent capabilities that:\n\n>1. Class is the reference type; Struct is a value type.\n>2. Class supports inheritance; Struct does not support inheritance.\n>3. The mutating keyword is not required to modify the attribute of the method declared by class; struct needs.\n>4. The class does not provide a default memberwise initializer; Struct provides the default memberwise initializer.\n>5. Class supports reference counting; Struct is not supported.\n>6. Class supports Type casting; Struct is not supported.\n>7. Class supports Deinitializers; Struct is not supported.\n\n<font size=2 color=#4169E1>1.2 Identity Operators.</font>  \nIt can sometimes be useful to find out whether two constants or variables refer to exactly the same instance of a class. To enable this, Swift provides two identity operators:\n\n> Identical to (===)  \n> Not identical to (!==)  \n\nUse these operators to check whether two constants or variables refer to the same single instance.\n\nBy default, custom classes and structures don’t have an implementation of the equivalence operators, known as the equal to operator (==) and not equal to operator (!=). You usually implement the == operator, and use the standard library’s default implementation of the != operator that negates the result of the == operator. For example:\n```Swift \nextension Vector2D: Equatable {\n    static func == (left: Vector2D, right: Vector2D) -> Bool {\n        return (left.x == right.x) && (left.y == right.y)\n    }\n  }\n```\n\n#### <font size=3 color=#4169E1> 2. Choosing Between Structures and Classes. </font> \nHow to select Struct and Class in the project during development？\n> 1. Choose Structures by Default.\n> 2. Use Classes When You Need Objective-C Interoperability.\n> 3. Use Classes When You Need to Control Identity.\n> 4. Use Structures When You Don’t Control Identity.\n> 5. Use Structures and Protocols to Model Inheritance and Share Behavior.\n\nWe can make a summary that, do not use class if you can use struct.\n\n> 1. When using struct, you do not need to consider memory leaks and multi-threaded' reads and writes, because it will copy values when passing them.\n> 2. Struct is stored in the stack and class is stored in the heap. Struct is more faster.\n\n\n#### <font size=3 color=gray>*Reference*</font>\n[1] [Structures and Classes](https://docs.swift.org/swift-book/LanguageGuide/ClassesAndStructures.html)   \n[2] [Choosing Between Structures and Classes](https://developer.apple.com/documentation/swift/choosing-between-structures-and-classes)  \n[3] [Why Choose Struct Over Class?](https://stackoverflow.com/questions/24232799/why-choose-struct-over-class?rq=1)\n\n","slug":"Swift/03. Structs/00. Structures and Classes","published":1,"updated":"2023-11-07T13:55:45.391Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr5b002ivu0m68376b5q","content":"<p><font color=gray size=2><em>It will take about 5 minutes to finish reading this article.</em></font></p>\n<p>Unlike other programming languages, <strong><em>In Swift, you can define a structure or class in just a single file</em></strong>, and the external interface to that class or structure is automatically made available for other code to use.</p>\n<h4 id=\"1-Comparing-Structures-and-Classes\"><a href=\"#1-Comparing-Structures-and-Classes\" class=\"headerlink\" title=\" 1. Comparing Structures and Classes. \"></a><font size=3 color=#4169E1> 1. Comparing Structures and Classes. </font></h4><p><font size=2 color=#4169E1>1.1 Differences and similarities.</font><br>Structures and Classes in Swift have many things in common. Both can:</p>\n<blockquote>\n<ol>\n<li>Property, method and initializers can both be defined.  </li>\n<li>Both support protocol and extension.</li>\n</ol>\n</blockquote>\n<p>They have diferent capabilities that:</p>\n<blockquote>\n<ol>\n<li>Class is the reference type; Struct is a value type.</li>\n<li>Class supports inheritance; Struct does not support inheritance.</li>\n<li>The mutating keyword is not required to modify the attribute of the method declared by class; struct needs.</li>\n<li>The class does not provide a default memberwise initializer; Struct provides the default memberwise initializer.</li>\n<li>Class supports reference counting; Struct is not supported.</li>\n<li>Class supports Type casting; Struct is not supported.</li>\n<li>Class supports Deinitializers; Struct is not supported.</li>\n</ol>\n</blockquote>\n<p><font size=2 color=#4169E1>1.2 Identity Operators.</font><br>It can sometimes be useful to find out whether two constants or variables refer to exactly the same instance of a class. To enable this, Swift provides two identity operators:</p>\n<blockquote>\n<p>Identical to (&#x3D;&#x3D;&#x3D;)<br>Not identical to (!&#x3D;&#x3D;)  </p>\n</blockquote>\n<p>Use these operators to check whether two constants or variables refer to the same single instance.</p>\n<p>By default, custom classes and structures don’t have an implementation of the equivalence operators, known as the equal to operator (&#x3D;&#x3D;) and not equal to operator (!&#x3D;). You usually implement the &#x3D;&#x3D; operator, and use the standard library’s default implementation of the !&#x3D; operator that negates the result of the &#x3D;&#x3D; operator. For example:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">Vector2D</span>: <span class=\"title class_\">Equatable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">func</span> <span class=\"title function_\">==</span> (<span class=\"params\">left</span>: <span class=\"type\">Vector2D</span>, <span class=\"params\">right</span>: <span class=\"type\">Vector2D</span>) -&gt; <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (left.x <span class=\"operator\">==</span> right.x) <span class=\"operator\">&amp;&amp;</span> (left.y <span class=\"operator\">==</span> right.y)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-Choosing-Between-Structures-and-Classes\"><a href=\"#2-Choosing-Between-Structures-and-Classes\" class=\"headerlink\" title=\" 2. Choosing Between Structures and Classes. \"></a><font size=3 color=#4169E1> 2. Choosing Between Structures and Classes. </font></h4><p>How to select Struct and Class in the project during development？</p>\n<blockquote>\n<ol>\n<li>Choose Structures by Default.</li>\n<li>Use Classes When You Need Objective-C Interoperability.</li>\n<li>Use Classes When You Need to Control Identity.</li>\n<li>Use Structures When You Don’t Control Identity.</li>\n<li>Use Structures and Protocols to Model Inheritance and Share Behavior.</li>\n</ol>\n</blockquote>\n<p>We can make a summary that, do not use class if you can use struct.</p>\n<blockquote>\n<ol>\n<li>When using struct, you do not need to consider memory leaks and multi-threaded’ reads and writes, because it will copy values when passing them.</li>\n<li>Struct is stored in the stack and class is stored in the heap. Struct is more faster.</li>\n</ol>\n</blockquote>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://docs.swift.org/swift-book/LanguageGuide/ClassesAndStructures.html\">Structures and Classes</a><br>[2] <a href=\"https://developer.apple.com/documentation/swift/choosing-between-structures-and-classes\">Choosing Between Structures and Classes</a><br>[3] <a href=\"https://stackoverflow.com/questions/24232799/why-choose-struct-over-class?rq=1\">Why Choose Struct Over Class?</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 5 minutes to finish reading this article.</em></font></p>\n<p>Unlike other programming languages, <strong><em>In Swift, you can define a structure or class in just a single file</em></strong>, and the external interface to that class or structure is automatically made available for other code to use.</p>\n<h4 id=\"1-Comparing-Structures-and-Classes\"><a href=\"#1-Comparing-Structures-and-Classes\" class=\"headerlink\" title=\" 1. Comparing Structures and Classes. \"></a><font size=3 color=#4169E1> 1. Comparing Structures and Classes. </font></h4><p><font size=2 color=#4169E1>1.1 Differences and similarities.</font><br>Structures and Classes in Swift have many things in common. Both can:</p>\n<blockquote>\n<ol>\n<li>Property, method and initializers can both be defined.  </li>\n<li>Both support protocol and extension.</li>\n</ol>\n</blockquote>\n<p>They have diferent capabilities that:</p>\n<blockquote>\n<ol>\n<li>Class is the reference type; Struct is a value type.</li>\n<li>Class supports inheritance; Struct does not support inheritance.</li>\n<li>The mutating keyword is not required to modify the attribute of the method declared by class; struct needs.</li>\n<li>The class does not provide a default memberwise initializer; Struct provides the default memberwise initializer.</li>\n<li>Class supports reference counting; Struct is not supported.</li>\n<li>Class supports Type casting; Struct is not supported.</li>\n<li>Class supports Deinitializers; Struct is not supported.</li>\n</ol>\n</blockquote>\n<p><font size=2 color=#4169E1>1.2 Identity Operators.</font><br>It can sometimes be useful to find out whether two constants or variables refer to exactly the same instance of a class. To enable this, Swift provides two identity operators:</p>\n<blockquote>\n<p>Identical to (&#x3D;&#x3D;&#x3D;)<br>Not identical to (!&#x3D;&#x3D;)  </p>\n</blockquote>\n<p>Use these operators to check whether two constants or variables refer to the same single instance.</p>\n<p>By default, custom classes and structures don’t have an implementation of the equivalence operators, known as the equal to operator (&#x3D;&#x3D;) and not equal to operator (!&#x3D;). You usually implement the &#x3D;&#x3D; operator, and use the standard library’s default implementation of the !&#x3D; operator that negates the result of the &#x3D;&#x3D; operator. For example:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">Vector2D</span>: <span class=\"title class_\">Equatable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">func</span> <span class=\"title function_\">==</span> (<span class=\"params\">left</span>: <span class=\"type\">Vector2D</span>, <span class=\"params\">right</span>: <span class=\"type\">Vector2D</span>) -&gt; <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (left.x <span class=\"operator\">==</span> right.x) <span class=\"operator\">&amp;&amp;</span> (left.y <span class=\"operator\">==</span> right.y)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-Choosing-Between-Structures-and-Classes\"><a href=\"#2-Choosing-Between-Structures-and-Classes\" class=\"headerlink\" title=\" 2. Choosing Between Structures and Classes. \"></a><font size=3 color=#4169E1> 2. Choosing Between Structures and Classes. </font></h4><p>How to select Struct and Class in the project during development？</p>\n<blockquote>\n<ol>\n<li>Choose Structures by Default.</li>\n<li>Use Classes When You Need Objective-C Interoperability.</li>\n<li>Use Classes When You Need to Control Identity.</li>\n<li>Use Structures When You Don’t Control Identity.</li>\n<li>Use Structures and Protocols to Model Inheritance and Share Behavior.</li>\n</ol>\n</blockquote>\n<p>We can make a summary that, do not use class if you can use struct.</p>\n<blockquote>\n<ol>\n<li>When using struct, you do not need to consider memory leaks and multi-threaded’ reads and writes, because it will copy values when passing them.</li>\n<li>Struct is stored in the stack and class is stored in the heap. Struct is more faster.</li>\n</ol>\n</blockquote>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://docs.swift.org/swift-book/LanguageGuide/ClassesAndStructures.html\">Structures and Classes</a><br>[2] <a href=\"https://developer.apple.com/documentation/swift/choosing-between-structures-and-classes\">Choosing Between Structures and Classes</a><br>[3] <a href=\"https://stackoverflow.com/questions/24232799/why-choose-struct-over-class?rq=1\">Why Choose Struct Over Class?</a></p>\n"},{"title":"01. Cases of Structures","date":"2023-03-02T19:41:59.000Z","_content":"\n<font color=gray size=2>*It will take about 2 minutes to finish reading this article.*</font>\n\n\n#### <font size=3 color=#4169E1> 1. Use structures when you’re modeling data. </font> \nUse structures when you’re modeling data that contains information about an entity with an identity that you don’t control. For example:\n```Swift\nstruct PenPalRecord {\n    let myID: Int\n    var myNickname: String\n    var recommendedPenPalID: Int\n}\nvar myRecord = try JSONDecoder().decode(PenPalRecord.self, from: jsonResponse)\n```\n\n#### <font size=3 color=#4169E1> 2. Use Structures and Protocols to Model Inheritance and Share Behavior. </font> \nStructures and classes both support a form of inheritance. Structures and protocols can only adopt protocols; they can’t inherit from classes. However, the kinds of inheritance hierarchies you can build with class inheritance can be also modeled using protocol inheritance and structures.\n```Swift\nprotocol AnimalCommonProtocol {\n    var name: String? { get set }\n    var weight: Double { get set }\n    func run()\n}\n\nstruct Cat : AnimalCommonProtocol {\n    func run() {\n        print(\"cat run\")\n    }\n    var name: String?\n    var weight: Double\n    var gender: String?\n}\n\nstruct Dog : AnimalCommonProtocol {\n    func run() {\n        print(\"dog run\")\n    }\n    var name: String?\n    var weight: Double\n    var type: String?\n}\n```\n\n\n","source":"_posts/Swift/03. Structs/01. Cases of Structures.md","raw":"---\ntitle: 01. Cases of Structures\ndate: 2023-03-2 20:41:59\ncategories: \n- [Swift, 03. Structs]\ntags:\n- struct\n---\n\n<font color=gray size=2>*It will take about 2 minutes to finish reading this article.*</font>\n\n\n#### <font size=3 color=#4169E1> 1. Use structures when you’re modeling data. </font> \nUse structures when you’re modeling data that contains information about an entity with an identity that you don’t control. For example:\n```Swift\nstruct PenPalRecord {\n    let myID: Int\n    var myNickname: String\n    var recommendedPenPalID: Int\n}\nvar myRecord = try JSONDecoder().decode(PenPalRecord.self, from: jsonResponse)\n```\n\n#### <font size=3 color=#4169E1> 2. Use Structures and Protocols to Model Inheritance and Share Behavior. </font> \nStructures and classes both support a form of inheritance. Structures and protocols can only adopt protocols; they can’t inherit from classes. However, the kinds of inheritance hierarchies you can build with class inheritance can be also modeled using protocol inheritance and structures.\n```Swift\nprotocol AnimalCommonProtocol {\n    var name: String? { get set }\n    var weight: Double { get set }\n    func run()\n}\n\nstruct Cat : AnimalCommonProtocol {\n    func run() {\n        print(\"cat run\")\n    }\n    var name: String?\n    var weight: Double\n    var gender: String?\n}\n\nstruct Dog : AnimalCommonProtocol {\n    func run() {\n        print(\"dog run\")\n    }\n    var name: String?\n    var weight: Double\n    var type: String?\n}\n```\n\n\n","slug":"Swift/03. Structs/01. Cases of Structures","published":1,"updated":"2023-11-07T13:55:48.698Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr5c002kvu0m6mqz2rjh","content":"<p><font color=gray size=2><em>It will take about 2 minutes to finish reading this article.</em></font></p>\n<h4 id=\"1-Use-structures-when-you’re-modeling-data\"><a href=\"#1-Use-structures-when-you’re-modeling-data\" class=\"headerlink\" title=\" 1. Use structures when you’re modeling data. \"></a><font size=3 color=#4169E1> 1. Use structures when you’re modeling data. </font></h4><p>Use structures when you’re modeling data that contains information about an entity with an identity that you don’t control. For example:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">PenPalRecord</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> myID: <span class=\"type\">Int</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> myNickname: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> recommendedPenPalID: <span class=\"type\">Int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> myRecord <span class=\"operator\">=</span> <span class=\"keyword\">try</span> <span class=\"type\">JSONDecoder</span>().decode(<span class=\"type\">PenPalRecord</span>.<span class=\"keyword\">self</span>, from: jsonResponse)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-Use-Structures-and-Protocols-to-Model-Inheritance-and-Share-Behavior\"><a href=\"#2-Use-Structures-and-Protocols-to-Model-Inheritance-and-Share-Behavior\" class=\"headerlink\" title=\" 2. Use Structures and Protocols to Model Inheritance and Share Behavior. \"></a><font size=3 color=#4169E1> 2. Use Structures and Protocols to Model Inheritance and Share Behavior. </font></h4><p>Structures and classes both support a form of inheritance. Structures and protocols can only adopt protocols; they can’t inherit from classes. However, the kinds of inheritance hierarchies you can build with class inheritance can be also modeled using protocol inheritance and structures.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protocol</span> <span class=\"title class_\">AnimalCommonProtocol</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span>? &#123; <span class=\"keyword\">get</span> <span class=\"keyword\">set</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> weight: <span class=\"type\">Double</span> &#123; <span class=\"keyword\">get</span> <span class=\"keyword\">set</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">run</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Cat</span> : <span class=\"title class_\">AnimalCommonProtocol</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">run</span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;cat run&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span>?</span><br><span class=\"line\">    <span class=\"keyword\">var</span> weight: <span class=\"type\">Double</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> gender: <span class=\"type\">String</span>?</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Dog</span> : <span class=\"title class_\">AnimalCommonProtocol</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">run</span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;dog run&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span>?</span><br><span class=\"line\">    <span class=\"keyword\">var</span> weight: <span class=\"type\">Double</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> type: <span class=\"type\">String</span>?</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 2 minutes to finish reading this article.</em></font></p>\n<h4 id=\"1-Use-structures-when-you’re-modeling-data\"><a href=\"#1-Use-structures-when-you’re-modeling-data\" class=\"headerlink\" title=\" 1. Use structures when you’re modeling data. \"></a><font size=3 color=#4169E1> 1. Use structures when you’re modeling data. </font></h4><p>Use structures when you’re modeling data that contains information about an entity with an identity that you don’t control. For example:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">PenPalRecord</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> myID: <span class=\"type\">Int</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> myNickname: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> recommendedPenPalID: <span class=\"type\">Int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> myRecord <span class=\"operator\">=</span> <span class=\"keyword\">try</span> <span class=\"type\">JSONDecoder</span>().decode(<span class=\"type\">PenPalRecord</span>.<span class=\"keyword\">self</span>, from: jsonResponse)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-Use-Structures-and-Protocols-to-Model-Inheritance-and-Share-Behavior\"><a href=\"#2-Use-Structures-and-Protocols-to-Model-Inheritance-and-Share-Behavior\" class=\"headerlink\" title=\" 2. Use Structures and Protocols to Model Inheritance and Share Behavior. \"></a><font size=3 color=#4169E1> 2. Use Structures and Protocols to Model Inheritance and Share Behavior. </font></h4><p>Structures and classes both support a form of inheritance. Structures and protocols can only adopt protocols; they can’t inherit from classes. However, the kinds of inheritance hierarchies you can build with class inheritance can be also modeled using protocol inheritance and structures.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protocol</span> <span class=\"title class_\">AnimalCommonProtocol</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span>? &#123; <span class=\"keyword\">get</span> <span class=\"keyword\">set</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> weight: <span class=\"type\">Double</span> &#123; <span class=\"keyword\">get</span> <span class=\"keyword\">set</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">run</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Cat</span> : <span class=\"title class_\">AnimalCommonProtocol</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">run</span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;cat run&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span>?</span><br><span class=\"line\">    <span class=\"keyword\">var</span> weight: <span class=\"type\">Double</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> gender: <span class=\"type\">String</span>?</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Dog</span> : <span class=\"title class_\">AnimalCommonProtocol</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">run</span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;dog run&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span>?</span><br><span class=\"line\">    <span class=\"keyword\">var</span> weight: <span class=\"type\">Double</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> type: <span class=\"type\">String</span>?</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n"},{"title":"02. Performance Comparison between Structure and Class","date":"2023-03-02T19:43:59.000Z","_content":"\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nAs we all know that, Since struct instances are allocated on stack, and class instances are allocated on heap, structs can sometimes be drastically faster.\nSo there is an example here can prove that.\n\nConsider the following example, which demonstrates 2 strategies of wrapping Int data type using struct and class. Using 10 repeated values are to better reflect real world, where you have multiple fields.\n```Swift\n// 1 field \nclass IntClass {\n    let value: Int\n    init(_ val: Int) { self.value = val }\n}\n\nstruct IntStruct {\n    let value: Int\n    init(_ val: Int) { self.value = val }\n}\n\nfunc + (x: IntClass, y: IntClass) -> IntClass {\n    return IntClass(x.value + y.value)\n}\n\nfunc + (x: IntStruct, y: IntStruct) -> IntStruct {\n    return IntStruct(x.value + y.value)\n}\n// 10 fields\nclass Int10Class {\n    let value1, value2, value3, value4, value5, value6, value7, value8, value9, value10: Int\n    \n    init(_ val: Int) {\n        self.value1 = val\n        self.value2 = val\n        self.value3 = val\n        self.value4 = val\n        self.value5 = val\n        self.value6 = val\n        self.value7 = val\n        self.value8 = val\n        self.value9 = val\n        self.value10 = val\n    }\n}\n\nstruct Int10Struct {\n    let value1, value2, value3, value4, value5, value6, value7, value8, value9, value10: Int\n    \n    init(_ val: Int) {\n        self.value1 = val\n        self.value2 = val\n        self.value3 = val\n        self.value4 = val\n        self.value5 = val\n        self.value6 = val\n        self.value7 = val\n        self.value8 = val\n        self.value9 = val\n        self.value10 = val\n    }\n}\n\nfunc + (x: Int10Struct, y: Int10Struct) -> Int10Struct {\n    return Int10Struct(x.value1 + y.value1)\n}\n\nfunc + (x: Int10Class, y: Int10Class) -> Int10Class {\n    return Int10Class(x.value1 + y.value1)\n}\n\n```\nPerformance is measured using:  \n<strong>Tests.swift</strong>\n```Swift\nclass Tests {\n    static func runTests() {\n        print(\"Running tests\")\n        \n        measure(\"class (1 field)\") {\n            var x = IntClass(0)\n            for _ in 1...10000000 {\n                x = x + IntClass(1)\n            }\n        }\n        \n        measure(\"struct (1 field)\") {\n            var x = IntStruct(0)\n            for _ in 1...10000000 {\n                x = x + IntStruct(1)\n            }\n        }\n        \n        measure(\"class (10 fields)\") {\n            var x = Int10Class(0)\n            for _ in 1...10000000 {\n                x = x + Int10Class(1)\n            }\n        }\n        \n        measure(\"struct (10 fields)\") {\n            var x = Int10Struct(0)\n            for _ in 1...10000000 {\n                x = x + Int10Struct(1)\n            }\n        }\n    }\n    \n    static private func measure(_ name: String, block: @escaping () -> ()) {\n        print()\n        print(\"\\(name)\")\n        let t0 = CACurrentMediaTime()\n        \n        block()\n        \n        let dt = CACurrentMediaTime() - t0\n        print(\"\\(dt)\")\n    }\n}\n```\nWe can find somewhere in our project and just run the following code:\n```Swift\nTests.runTests()\n```\nOne of my running results is as follows:\n```Swift\nclass (1 field)\n6.262335019011516\n\nstruct (1 field)\n3.954203129003872\n\nclass (10 fields)\n6.161917756006005\n\nstruct (10 fields)\n4.097320644999854\n```\nWe can find that 'struct' type is more faster than 'class' type.\n\n#### <font size=3 color=gray>*Reference*</font>\n[1] [Why Choose Struct Over Class?](https://stackoverflow.com/questions/24232799/why-choose-struct-over-class?rq=1)\n\n","source":"_posts/Swift/03. Structs/02. Performance Comparison Between Structure and Class.md","raw":"---\ntitle: 02. Performance Comparison between Structure and Class\ndate: 2023-03-2 20:43:59\ncategories: \n- [Swift, 03. Structs]\ntags:\n- struct\n- performance\n---\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nAs we all know that, Since struct instances are allocated on stack, and class instances are allocated on heap, structs can sometimes be drastically faster.\nSo there is an example here can prove that.\n\nConsider the following example, which demonstrates 2 strategies of wrapping Int data type using struct and class. Using 10 repeated values are to better reflect real world, where you have multiple fields.\n```Swift\n// 1 field \nclass IntClass {\n    let value: Int\n    init(_ val: Int) { self.value = val }\n}\n\nstruct IntStruct {\n    let value: Int\n    init(_ val: Int) { self.value = val }\n}\n\nfunc + (x: IntClass, y: IntClass) -> IntClass {\n    return IntClass(x.value + y.value)\n}\n\nfunc + (x: IntStruct, y: IntStruct) -> IntStruct {\n    return IntStruct(x.value + y.value)\n}\n// 10 fields\nclass Int10Class {\n    let value1, value2, value3, value4, value5, value6, value7, value8, value9, value10: Int\n    \n    init(_ val: Int) {\n        self.value1 = val\n        self.value2 = val\n        self.value3 = val\n        self.value4 = val\n        self.value5 = val\n        self.value6 = val\n        self.value7 = val\n        self.value8 = val\n        self.value9 = val\n        self.value10 = val\n    }\n}\n\nstruct Int10Struct {\n    let value1, value2, value3, value4, value5, value6, value7, value8, value9, value10: Int\n    \n    init(_ val: Int) {\n        self.value1 = val\n        self.value2 = val\n        self.value3 = val\n        self.value4 = val\n        self.value5 = val\n        self.value6 = val\n        self.value7 = val\n        self.value8 = val\n        self.value9 = val\n        self.value10 = val\n    }\n}\n\nfunc + (x: Int10Struct, y: Int10Struct) -> Int10Struct {\n    return Int10Struct(x.value1 + y.value1)\n}\n\nfunc + (x: Int10Class, y: Int10Class) -> Int10Class {\n    return Int10Class(x.value1 + y.value1)\n}\n\n```\nPerformance is measured using:  \n<strong>Tests.swift</strong>\n```Swift\nclass Tests {\n    static func runTests() {\n        print(\"Running tests\")\n        \n        measure(\"class (1 field)\") {\n            var x = IntClass(0)\n            for _ in 1...10000000 {\n                x = x + IntClass(1)\n            }\n        }\n        \n        measure(\"struct (1 field)\") {\n            var x = IntStruct(0)\n            for _ in 1...10000000 {\n                x = x + IntStruct(1)\n            }\n        }\n        \n        measure(\"class (10 fields)\") {\n            var x = Int10Class(0)\n            for _ in 1...10000000 {\n                x = x + Int10Class(1)\n            }\n        }\n        \n        measure(\"struct (10 fields)\") {\n            var x = Int10Struct(0)\n            for _ in 1...10000000 {\n                x = x + Int10Struct(1)\n            }\n        }\n    }\n    \n    static private func measure(_ name: String, block: @escaping () -> ()) {\n        print()\n        print(\"\\(name)\")\n        let t0 = CACurrentMediaTime()\n        \n        block()\n        \n        let dt = CACurrentMediaTime() - t0\n        print(\"\\(dt)\")\n    }\n}\n```\nWe can find somewhere in our project and just run the following code:\n```Swift\nTests.runTests()\n```\nOne of my running results is as follows:\n```Swift\nclass (1 field)\n6.262335019011516\n\nstruct (1 field)\n3.954203129003872\n\nclass (10 fields)\n6.161917756006005\n\nstruct (10 fields)\n4.097320644999854\n```\nWe can find that 'struct' type is more faster than 'class' type.\n\n#### <font size=3 color=gray>*Reference*</font>\n[1] [Why Choose Struct Over Class?](https://stackoverflow.com/questions/24232799/why-choose-struct-over-class?rq=1)\n\n","slug":"Swift/03. Structs/02. Performance Comparison Between Structure and Class","published":1,"updated":"2023-11-07T13:55:51.443Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr5e002ovu0m38hcd7wd","content":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>As we all know that, Since struct instances are allocated on stack, and class instances are allocated on heap, structs can sometimes be drastically faster.<br>So there is an example here can prove that.</p>\n<p>Consider the following example, which demonstrates 2 strategies of wrapping Int data type using struct and class. Using 10 repeated values are to better reflect real world, where you have multiple fields.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1 field </span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">IntClass</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> value: <span class=\"type\">Int</span></span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"keyword\">_</span> <span class=\"params\">val</span>: <span class=\"type\">Int</span>) &#123; <span class=\"keyword\">self</span>.value <span class=\"operator\">=</span> val &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">IntStruct</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> value: <span class=\"type\">Int</span></span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"keyword\">_</span> <span class=\"params\">val</span>: <span class=\"type\">Int</span>) &#123; <span class=\"keyword\">self</span>.value <span class=\"operator\">=</span> val &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">+</span> (<span class=\"params\">x</span>: <span class=\"type\">IntClass</span>, <span class=\"params\">y</span>: <span class=\"type\">IntClass</span>) -&gt; <span class=\"type\">IntClass</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">IntClass</span>(x.value <span class=\"operator\">+</span> y.value)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">+</span> (<span class=\"params\">x</span>: <span class=\"type\">IntStruct</span>, <span class=\"params\">y</span>: <span class=\"type\">IntStruct</span>) -&gt; <span class=\"type\">IntStruct</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">IntStruct</span>(x.value <span class=\"operator\">+</span> y.value)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 10 fields</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Int10Class</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> value1, value2, value3, value4, value5, value6, value7, value8, value9, value10: <span class=\"type\">Int</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"keyword\">_</span> <span class=\"params\">val</span>: <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value1 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value2 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value3 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value4 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value5 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value6 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value7 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value8 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value9 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value10 <span class=\"operator\">=</span> val</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Int10Struct</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> value1, value2, value3, value4, value5, value6, value7, value8, value9, value10: <span class=\"type\">Int</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"keyword\">_</span> <span class=\"params\">val</span>: <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value1 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value2 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value3 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value4 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value5 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value6 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value7 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value8 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value9 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value10 <span class=\"operator\">=</span> val</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">+</span> (<span class=\"params\">x</span>: <span class=\"type\">Int10Struct</span>, <span class=\"params\">y</span>: <span class=\"type\">Int10Struct</span>) -&gt; <span class=\"type\">Int10Struct</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Int10Struct</span>(x.value1 <span class=\"operator\">+</span> y.value1)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">+</span> (<span class=\"params\">x</span>: <span class=\"type\">Int10Class</span>, <span class=\"params\">y</span>: <span class=\"type\">Int10Class</span>) -&gt; <span class=\"type\">Int10Class</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Int10Class</span>(x.value1 <span class=\"operator\">+</span> y.value1)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>Performance is measured using:<br><strong>Tests.swift</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Tests</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">func</span> <span class=\"title function_\">runTests</span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Running tests&quot;</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        measure(<span class=\"string\">&quot;class (1 field)&quot;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> x <span class=\"operator\">=</span> <span class=\"type\">IntClass</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> <span class=\"keyword\">_</span> <span class=\"keyword\">in</span> <span class=\"number\">1</span><span class=\"operator\">...</span><span class=\"number\">10000000</span> &#123;</span><br><span class=\"line\">                x <span class=\"operator\">=</span> x <span class=\"operator\">+</span> <span class=\"type\">IntClass</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        measure(<span class=\"string\">&quot;struct (1 field)&quot;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> x <span class=\"operator\">=</span> <span class=\"type\">IntStruct</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> <span class=\"keyword\">_</span> <span class=\"keyword\">in</span> <span class=\"number\">1</span><span class=\"operator\">...</span><span class=\"number\">10000000</span> &#123;</span><br><span class=\"line\">                x <span class=\"operator\">=</span> x <span class=\"operator\">+</span> <span class=\"type\">IntStruct</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        measure(<span class=\"string\">&quot;class (10 fields)&quot;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> x <span class=\"operator\">=</span> <span class=\"type\">Int10Class</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> <span class=\"keyword\">_</span> <span class=\"keyword\">in</span> <span class=\"number\">1</span><span class=\"operator\">...</span><span class=\"number\">10000000</span> &#123;</span><br><span class=\"line\">                x <span class=\"operator\">=</span> x <span class=\"operator\">+</span> <span class=\"type\">Int10Class</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        measure(<span class=\"string\">&quot;struct (10 fields)&quot;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> x <span class=\"operator\">=</span> <span class=\"type\">Int10Struct</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> <span class=\"keyword\">_</span> <span class=\"keyword\">in</span> <span class=\"number\">1</span><span class=\"operator\">...</span><span class=\"number\">10000000</span> &#123;</span><br><span class=\"line\">                x <span class=\"operator\">=</span> x <span class=\"operator\">+</span> <span class=\"type\">Int10Struct</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">private</span> <span class=\"keyword\">func</span> <span class=\"title function_\">measure</span>(<span class=\"keyword\">_</span> <span class=\"params\">name</span>: <span class=\"type\">String</span>, <span class=\"params\">block</span>: <span class=\"keyword\">@escaping</span> () -&gt; ()) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;<span class=\"subst\">\\(name)</span>&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> t0 <span class=\"operator\">=</span> <span class=\"type\">CACurrentMediaTime</span>()</span><br><span class=\"line\">        </span><br><span class=\"line\">        block()</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">let</span> dt <span class=\"operator\">=</span> <span class=\"type\">CACurrentMediaTime</span>() <span class=\"operator\">-</span> t0</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;<span class=\"subst\">\\(dt)</span>&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>We can find somewhere in our project and just run the following code:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Tests</span>.runTests()</span><br></pre></td></tr></table></figure>\n<p>One of my running results is as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> (1 <span class=\"title class_\">field</span>)</span><br><span class=\"line\">6.262335019011516</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">struct</span> (1 <span class=\"title class_\">field</span>)</span><br><span class=\"line\">3.954203129003872</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">class</span> (10 <span class=\"title class_\">fields</span>)</span><br><span class=\"line\">6.161917756006005</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">struct</span> (10 <span class=\"title class_\">fields</span>)</span><br><span class=\"line\">4.097320644999854</span><br></pre></td></tr></table></figure>\n<p>We can find that ‘struct’ type is more faster than ‘class’ type.</p>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://stackoverflow.com/questions/24232799/why-choose-struct-over-class?rq=1\">Why Choose Struct Over Class?</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>As we all know that, Since struct instances are allocated on stack, and class instances are allocated on heap, structs can sometimes be drastically faster.<br>So there is an example here can prove that.</p>\n<p>Consider the following example, which demonstrates 2 strategies of wrapping Int data type using struct and class. Using 10 repeated values are to better reflect real world, where you have multiple fields.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1 field </span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">IntClass</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> value: <span class=\"type\">Int</span></span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"keyword\">_</span> <span class=\"params\">val</span>: <span class=\"type\">Int</span>) &#123; <span class=\"keyword\">self</span>.value <span class=\"operator\">=</span> val &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">IntStruct</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> value: <span class=\"type\">Int</span></span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"keyword\">_</span> <span class=\"params\">val</span>: <span class=\"type\">Int</span>) &#123; <span class=\"keyword\">self</span>.value <span class=\"operator\">=</span> val &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">+</span> (<span class=\"params\">x</span>: <span class=\"type\">IntClass</span>, <span class=\"params\">y</span>: <span class=\"type\">IntClass</span>) -&gt; <span class=\"type\">IntClass</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">IntClass</span>(x.value <span class=\"operator\">+</span> y.value)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">+</span> (<span class=\"params\">x</span>: <span class=\"type\">IntStruct</span>, <span class=\"params\">y</span>: <span class=\"type\">IntStruct</span>) -&gt; <span class=\"type\">IntStruct</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">IntStruct</span>(x.value <span class=\"operator\">+</span> y.value)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 10 fields</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Int10Class</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> value1, value2, value3, value4, value5, value6, value7, value8, value9, value10: <span class=\"type\">Int</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"keyword\">_</span> <span class=\"params\">val</span>: <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value1 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value2 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value3 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value4 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value5 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value6 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value7 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value8 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value9 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value10 <span class=\"operator\">=</span> val</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Int10Struct</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> value1, value2, value3, value4, value5, value6, value7, value8, value9, value10: <span class=\"type\">Int</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"keyword\">_</span> <span class=\"params\">val</span>: <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value1 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value2 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value3 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value4 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value5 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value6 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value7 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value8 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value9 <span class=\"operator\">=</span> val</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value10 <span class=\"operator\">=</span> val</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">+</span> (<span class=\"params\">x</span>: <span class=\"type\">Int10Struct</span>, <span class=\"params\">y</span>: <span class=\"type\">Int10Struct</span>) -&gt; <span class=\"type\">Int10Struct</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Int10Struct</span>(x.value1 <span class=\"operator\">+</span> y.value1)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">+</span> (<span class=\"params\">x</span>: <span class=\"type\">Int10Class</span>, <span class=\"params\">y</span>: <span class=\"type\">Int10Class</span>) -&gt; <span class=\"type\">Int10Class</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Int10Class</span>(x.value1 <span class=\"operator\">+</span> y.value1)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>Performance is measured using:<br><strong>Tests.swift</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Tests</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">func</span> <span class=\"title function_\">runTests</span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Running tests&quot;</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        measure(<span class=\"string\">&quot;class (1 field)&quot;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> x <span class=\"operator\">=</span> <span class=\"type\">IntClass</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> <span class=\"keyword\">_</span> <span class=\"keyword\">in</span> <span class=\"number\">1</span><span class=\"operator\">...</span><span class=\"number\">10000000</span> &#123;</span><br><span class=\"line\">                x <span class=\"operator\">=</span> x <span class=\"operator\">+</span> <span class=\"type\">IntClass</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        measure(<span class=\"string\">&quot;struct (1 field)&quot;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> x <span class=\"operator\">=</span> <span class=\"type\">IntStruct</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> <span class=\"keyword\">_</span> <span class=\"keyword\">in</span> <span class=\"number\">1</span><span class=\"operator\">...</span><span class=\"number\">10000000</span> &#123;</span><br><span class=\"line\">                x <span class=\"operator\">=</span> x <span class=\"operator\">+</span> <span class=\"type\">IntStruct</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        measure(<span class=\"string\">&quot;class (10 fields)&quot;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> x <span class=\"operator\">=</span> <span class=\"type\">Int10Class</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> <span class=\"keyword\">_</span> <span class=\"keyword\">in</span> <span class=\"number\">1</span><span class=\"operator\">...</span><span class=\"number\">10000000</span> &#123;</span><br><span class=\"line\">                x <span class=\"operator\">=</span> x <span class=\"operator\">+</span> <span class=\"type\">Int10Class</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        measure(<span class=\"string\">&quot;struct (10 fields)&quot;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> x <span class=\"operator\">=</span> <span class=\"type\">Int10Struct</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> <span class=\"keyword\">_</span> <span class=\"keyword\">in</span> <span class=\"number\">1</span><span class=\"operator\">...</span><span class=\"number\">10000000</span> &#123;</span><br><span class=\"line\">                x <span class=\"operator\">=</span> x <span class=\"operator\">+</span> <span class=\"type\">Int10Struct</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">private</span> <span class=\"keyword\">func</span> <span class=\"title function_\">measure</span>(<span class=\"keyword\">_</span> <span class=\"params\">name</span>: <span class=\"type\">String</span>, <span class=\"params\">block</span>: <span class=\"keyword\">@escaping</span> () -&gt; ()) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;<span class=\"subst\">\\(name)</span>&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> t0 <span class=\"operator\">=</span> <span class=\"type\">CACurrentMediaTime</span>()</span><br><span class=\"line\">        </span><br><span class=\"line\">        block()</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">let</span> dt <span class=\"operator\">=</span> <span class=\"type\">CACurrentMediaTime</span>() <span class=\"operator\">-</span> t0</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;<span class=\"subst\">\\(dt)</span>&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>We can find somewhere in our project and just run the following code:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Tests</span>.runTests()</span><br></pre></td></tr></table></figure>\n<p>One of my running results is as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> (1 <span class=\"title class_\">field</span>)</span><br><span class=\"line\">6.262335019011516</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">struct</span> (1 <span class=\"title class_\">field</span>)</span><br><span class=\"line\">3.954203129003872</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">class</span> (10 <span class=\"title class_\">fields</span>)</span><br><span class=\"line\">6.161917756006005</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">struct</span> (10 <span class=\"title class_\">fields</span>)</span><br><span class=\"line\">4.097320644999854</span><br></pre></td></tr></table></figure>\n<p>We can find that ‘struct’ type is more faster than ‘class’ type.</p>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://stackoverflow.com/questions/24232799/why-choose-struct-over-class?rq=1\">Why Choose Struct Over Class?</a></p>\n"},{"title":"03. Property Defaults and Initialization Constructors","date":"2023-03-02T19:45:59.000Z","_content":"\n<font color=gray size=2>*It will take about 1 minutes to finish reading this article.*</font>\n\nWe often use the following methods to initialize in OC.\n```Swift \n// OCDemoModelBuilder.h\n@interface OCDemoModelBuilder : NSObject\n@property (nonatomic, copy, nonnull) NSString *a;\n@property (nonatomic, copy, nonnull) NSString *b;\n@property (nonatomic, copy, nonnull) NSString *c;\n@property (nonatomic, copy, nonnull) NSString *d;\n@property (nonatomic, copy, nonnull) NSString *e;\n@end\n// OCDemoModelBuilder.m\n@implementation OCDemoModelBuilder\n\n- (instancetype)init {\n    if (self = [super init]) {\n        _a = @\"a\";\n        _b = @\"b\";\n        _c = @\"c\";\n        _d = @\"d\";\n        _e = @\"e\";\n    }\n    return self;\n}\n\n@end\n\n// OCDemoModel.h\n@interface OCDemoModel : NSObject\n@property (nonatomic, readonly, nonnull) NSString *a;\n@property (nonatomic, readonly, nonnull) NSString *b;\n@property (nonatomic, readonly, nonnull) NSString *c;\n@property (nonatomic, readonly, nonnull) NSString *d;\n@property (nonatomic, readonly, nonnull) NSString *e;\n\n- (instancetype)initWithBuilder:(void(^)(OCDemoModelBuilder *builder))builderBlock;\n@end\n\n// OCDemoModel.m\n@implementation OCDemoModel\n- (instancetype)initWithBuilder:(void(^)(OCDemoModelBuilder *builder))builderBlock {\n    if (self = [super init]) {\n        OCDemoModelBuilder *builder = [[OCDemoModelBuilder alloc] init];\n        if (builderBlock) {\n            builderBlock(builder);\n        }\n        _a = builder.a;\n        _b = builder.b;\n        _c = builder.c;\n        _d = builder.d;\n        _e = builder.e;\n    }\n    return self;\n}\n\n@end\n\n// Usage\nOCDemoModel *ret = [[OCDemoModel alloc] initWithBuilder:^(OCDemoModelBuilder * _Nonnull builder) {\n    builder.b = @\"b1\";\n}];\n```\nHowever, Swift's Struct supports attribute default values and initialization constructors, which greatly simplifies the process. The code is as follows:\n\n```Swift\nstruct SwiftDemoModel {\n    var a = \"a\"\n    var b = \"b\"\n    var c = \"c\"\n    var d = \"d\"\n    var e = \"e\"\n}\n\n// Usage\nlet ret = SwiftDemoModel(b: \"b1\")\n// ret = a,b1,c,d,e\n```\n\n\n\n\n\n\n","source":"_posts/Swift/03. Structs/03. A Case of Initialization Constructor.md","raw":"---\ntitle: 03. Property Defaults and Initialization Constructors\ndate: 2023-03-2 20:45:59\ncategories: \n- [Swift, 03. Structs]\ntags:\n- struct\n- initialization\n- constructors\n---\n\n<font color=gray size=2>*It will take about 1 minutes to finish reading this article.*</font>\n\nWe often use the following methods to initialize in OC.\n```Swift \n// OCDemoModelBuilder.h\n@interface OCDemoModelBuilder : NSObject\n@property (nonatomic, copy, nonnull) NSString *a;\n@property (nonatomic, copy, nonnull) NSString *b;\n@property (nonatomic, copy, nonnull) NSString *c;\n@property (nonatomic, copy, nonnull) NSString *d;\n@property (nonatomic, copy, nonnull) NSString *e;\n@end\n// OCDemoModelBuilder.m\n@implementation OCDemoModelBuilder\n\n- (instancetype)init {\n    if (self = [super init]) {\n        _a = @\"a\";\n        _b = @\"b\";\n        _c = @\"c\";\n        _d = @\"d\";\n        _e = @\"e\";\n    }\n    return self;\n}\n\n@end\n\n// OCDemoModel.h\n@interface OCDemoModel : NSObject\n@property (nonatomic, readonly, nonnull) NSString *a;\n@property (nonatomic, readonly, nonnull) NSString *b;\n@property (nonatomic, readonly, nonnull) NSString *c;\n@property (nonatomic, readonly, nonnull) NSString *d;\n@property (nonatomic, readonly, nonnull) NSString *e;\n\n- (instancetype)initWithBuilder:(void(^)(OCDemoModelBuilder *builder))builderBlock;\n@end\n\n// OCDemoModel.m\n@implementation OCDemoModel\n- (instancetype)initWithBuilder:(void(^)(OCDemoModelBuilder *builder))builderBlock {\n    if (self = [super init]) {\n        OCDemoModelBuilder *builder = [[OCDemoModelBuilder alloc] init];\n        if (builderBlock) {\n            builderBlock(builder);\n        }\n        _a = builder.a;\n        _b = builder.b;\n        _c = builder.c;\n        _d = builder.d;\n        _e = builder.e;\n    }\n    return self;\n}\n\n@end\n\n// Usage\nOCDemoModel *ret = [[OCDemoModel alloc] initWithBuilder:^(OCDemoModelBuilder * _Nonnull builder) {\n    builder.b = @\"b1\";\n}];\n```\nHowever, Swift's Struct supports attribute default values and initialization constructors, which greatly simplifies the process. The code is as follows:\n\n```Swift\nstruct SwiftDemoModel {\n    var a = \"a\"\n    var b = \"b\"\n    var c = \"c\"\n    var d = \"d\"\n    var e = \"e\"\n}\n\n// Usage\nlet ret = SwiftDemoModel(b: \"b1\")\n// ret = a,b1,c,d,e\n```\n\n\n\n\n\n\n","slug":"Swift/03. Structs/03. A Case of Initialization Constructor","published":1,"updated":"2023-11-07T13:55:54.306Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr5f002qvu0m22bfh7hx","content":"<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p>\n<p>We often use the following methods to initialize in OC.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// OCDemoModelBuilder.h</span></span><br><span class=\"line\"><span class=\"meta\">@interface</span> <span class=\"type\">OCDemoModelBuilder</span> : <span class=\"type\">NSObject</span></span><br><span class=\"line\"><span class=\"meta\">@property</span> (nonatomic, copy, nonnull) <span class=\"type\">NSString</span> <span class=\"operator\">*</span>a;</span><br><span class=\"line\"><span class=\"meta\">@property</span> (nonatomic, copy, nonnull) <span class=\"type\">NSString</span> <span class=\"operator\">*</span>b;</span><br><span class=\"line\"><span class=\"meta\">@property</span> (nonatomic, copy, nonnull) <span class=\"type\">NSString</span> <span class=\"operator\">*</span>c;</span><br><span class=\"line\"><span class=\"meta\">@property</span> (nonatomic, copy, nonnull) <span class=\"type\">NSString</span> <span class=\"operator\">*</span>d;</span><br><span class=\"line\"><span class=\"meta\">@property</span> (nonatomic, copy, nonnull) <span class=\"type\">NSString</span> <span class=\"operator\">*</span>e;</span><br><span class=\"line\"><span class=\"meta\">@end</span></span><br><span class=\"line\"><span class=\"comment\">// OCDemoModelBuilder.m</span></span><br><span class=\"line\"><span class=\"meta\">@implementation</span> <span class=\"type\">OCDemoModelBuilder</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"operator\">-</span> (instancetype)<span class=\"keyword\">init</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span> <span class=\"operator\">=</span> [<span class=\"keyword\">super</span> <span class=\"keyword\">init</span>]) &#123;</span><br><span class=\"line\">        _a <span class=\"operator\">=</span> @<span class=\"string\">&quot;a&quot;</span>;</span><br><span class=\"line\">        _b <span class=\"operator\">=</span> @<span class=\"string\">&quot;b&quot;</span>;</span><br><span class=\"line\">        _c <span class=\"operator\">=</span> @<span class=\"string\">&quot;c&quot;</span>;</span><br><span class=\"line\">        _d <span class=\"operator\">=</span> @<span class=\"string\">&quot;d&quot;</span>;</span><br><span class=\"line\">        _e <span class=\"operator\">=</span> @<span class=\"string\">&quot;e&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// OCDemoModel.h</span></span><br><span class=\"line\"><span class=\"meta\">@interface</span> <span class=\"type\">OCDemoModel</span> : <span class=\"type\">NSObject</span></span><br><span class=\"line\"><span class=\"meta\">@property</span> (nonatomic, readonly, nonnull) <span class=\"type\">NSString</span> <span class=\"operator\">*</span>a;</span><br><span class=\"line\"><span class=\"meta\">@property</span> (nonatomic, readonly, nonnull) <span class=\"type\">NSString</span> <span class=\"operator\">*</span>b;</span><br><span class=\"line\"><span class=\"meta\">@property</span> (nonatomic, readonly, nonnull) <span class=\"type\">NSString</span> <span class=\"operator\">*</span>c;</span><br><span class=\"line\"><span class=\"meta\">@property</span> (nonatomic, readonly, nonnull) <span class=\"type\">NSString</span> <span class=\"operator\">*</span>d;</span><br><span class=\"line\"><span class=\"meta\">@property</span> (nonatomic, readonly, nonnull) <span class=\"type\">NSString</span> <span class=\"operator\">*</span>e;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"operator\">-</span> (instancetype)initWithBuilder:(void(<span class=\"operator\">^</span>)(<span class=\"type\">OCDemoModelBuilder</span> <span class=\"operator\">*</span>builder))builderBlock;</span><br><span class=\"line\"><span class=\"meta\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// OCDemoModel.m</span></span><br><span class=\"line\"><span class=\"meta\">@implementation</span> <span class=\"type\">OCDemoModel</span></span><br><span class=\"line\"><span class=\"operator\">-</span> (instancetype)initWithBuilder:(void(<span class=\"operator\">^</span>)(<span class=\"type\">OCDemoModelBuilder</span> <span class=\"operator\">*</span>builder))builderBlock &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span> <span class=\"operator\">=</span> [<span class=\"keyword\">super</span> <span class=\"keyword\">init</span>]) &#123;</span><br><span class=\"line\">        <span class=\"type\">OCDemoModelBuilder</span> <span class=\"operator\">*</span>builder <span class=\"operator\">=</span> [[<span class=\"type\">OCDemoModelBuilder</span> alloc] <span class=\"keyword\">init</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (builderBlock) &#123;</span><br><span class=\"line\">            builderBlock(builder);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        _a <span class=\"operator\">=</span> builder.a;</span><br><span class=\"line\">        _b <span class=\"operator\">=</span> builder.b;</span><br><span class=\"line\">        _c <span class=\"operator\">=</span> builder.c;</span><br><span class=\"line\">        _d <span class=\"operator\">=</span> builder.d;</span><br><span class=\"line\">        _e <span class=\"operator\">=</span> builder.e;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Usage</span></span><br><span class=\"line\"><span class=\"type\">OCDemoModel</span> <span class=\"operator\">*</span>ret <span class=\"operator\">=</span> [[<span class=\"type\">OCDemoModel</span> alloc] initWithBuilder:<span class=\"operator\">^</span>(<span class=\"type\">OCDemoModelBuilder</span> <span class=\"operator\">*</span> _Nonnull builder) &#123;</span><br><span class=\"line\">    builder.b <span class=\"operator\">=</span> @<span class=\"string\">&quot;b1&quot;</span>;</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n<p>However, Swift’s Struct supports attribute default values and initialization constructors, which greatly simplifies the process. The code is as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">SwiftDemoModel</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a <span class=\"operator\">=</span> <span class=\"string\">&quot;a&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> b <span class=\"operator\">=</span> <span class=\"string\">&quot;b&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> c <span class=\"operator\">=</span> <span class=\"string\">&quot;c&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> d <span class=\"operator\">=</span> <span class=\"string\">&quot;d&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> e <span class=\"operator\">=</span> <span class=\"string\">&quot;e&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Usage</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ret <span class=\"operator\">=</span> <span class=\"type\">SwiftDemoModel</span>(b: <span class=\"string\">&quot;b1&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">// ret = a,b1,c,d,e</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p>\n<p>We often use the following methods to initialize in OC.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// OCDemoModelBuilder.h</span></span><br><span class=\"line\"><span class=\"meta\">@interface</span> <span class=\"type\">OCDemoModelBuilder</span> : <span class=\"type\">NSObject</span></span><br><span class=\"line\"><span class=\"meta\">@property</span> (nonatomic, copy, nonnull) <span class=\"type\">NSString</span> <span class=\"operator\">*</span>a;</span><br><span class=\"line\"><span class=\"meta\">@property</span> (nonatomic, copy, nonnull) <span class=\"type\">NSString</span> <span class=\"operator\">*</span>b;</span><br><span class=\"line\"><span class=\"meta\">@property</span> (nonatomic, copy, nonnull) <span class=\"type\">NSString</span> <span class=\"operator\">*</span>c;</span><br><span class=\"line\"><span class=\"meta\">@property</span> (nonatomic, copy, nonnull) <span class=\"type\">NSString</span> <span class=\"operator\">*</span>d;</span><br><span class=\"line\"><span class=\"meta\">@property</span> (nonatomic, copy, nonnull) <span class=\"type\">NSString</span> <span class=\"operator\">*</span>e;</span><br><span class=\"line\"><span class=\"meta\">@end</span></span><br><span class=\"line\"><span class=\"comment\">// OCDemoModelBuilder.m</span></span><br><span class=\"line\"><span class=\"meta\">@implementation</span> <span class=\"type\">OCDemoModelBuilder</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"operator\">-</span> (instancetype)<span class=\"keyword\">init</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span> <span class=\"operator\">=</span> [<span class=\"keyword\">super</span> <span class=\"keyword\">init</span>]) &#123;</span><br><span class=\"line\">        _a <span class=\"operator\">=</span> @<span class=\"string\">&quot;a&quot;</span>;</span><br><span class=\"line\">        _b <span class=\"operator\">=</span> @<span class=\"string\">&quot;b&quot;</span>;</span><br><span class=\"line\">        _c <span class=\"operator\">=</span> @<span class=\"string\">&quot;c&quot;</span>;</span><br><span class=\"line\">        _d <span class=\"operator\">=</span> @<span class=\"string\">&quot;d&quot;</span>;</span><br><span class=\"line\">        _e <span class=\"operator\">=</span> @<span class=\"string\">&quot;e&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// OCDemoModel.h</span></span><br><span class=\"line\"><span class=\"meta\">@interface</span> <span class=\"type\">OCDemoModel</span> : <span class=\"type\">NSObject</span></span><br><span class=\"line\"><span class=\"meta\">@property</span> (nonatomic, readonly, nonnull) <span class=\"type\">NSString</span> <span class=\"operator\">*</span>a;</span><br><span class=\"line\"><span class=\"meta\">@property</span> (nonatomic, readonly, nonnull) <span class=\"type\">NSString</span> <span class=\"operator\">*</span>b;</span><br><span class=\"line\"><span class=\"meta\">@property</span> (nonatomic, readonly, nonnull) <span class=\"type\">NSString</span> <span class=\"operator\">*</span>c;</span><br><span class=\"line\"><span class=\"meta\">@property</span> (nonatomic, readonly, nonnull) <span class=\"type\">NSString</span> <span class=\"operator\">*</span>d;</span><br><span class=\"line\"><span class=\"meta\">@property</span> (nonatomic, readonly, nonnull) <span class=\"type\">NSString</span> <span class=\"operator\">*</span>e;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"operator\">-</span> (instancetype)initWithBuilder:(void(<span class=\"operator\">^</span>)(<span class=\"type\">OCDemoModelBuilder</span> <span class=\"operator\">*</span>builder))builderBlock;</span><br><span class=\"line\"><span class=\"meta\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// OCDemoModel.m</span></span><br><span class=\"line\"><span class=\"meta\">@implementation</span> <span class=\"type\">OCDemoModel</span></span><br><span class=\"line\"><span class=\"operator\">-</span> (instancetype)initWithBuilder:(void(<span class=\"operator\">^</span>)(<span class=\"type\">OCDemoModelBuilder</span> <span class=\"operator\">*</span>builder))builderBlock &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span> <span class=\"operator\">=</span> [<span class=\"keyword\">super</span> <span class=\"keyword\">init</span>]) &#123;</span><br><span class=\"line\">        <span class=\"type\">OCDemoModelBuilder</span> <span class=\"operator\">*</span>builder <span class=\"operator\">=</span> [[<span class=\"type\">OCDemoModelBuilder</span> alloc] <span class=\"keyword\">init</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (builderBlock) &#123;</span><br><span class=\"line\">            builderBlock(builder);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        _a <span class=\"operator\">=</span> builder.a;</span><br><span class=\"line\">        _b <span class=\"operator\">=</span> builder.b;</span><br><span class=\"line\">        _c <span class=\"operator\">=</span> builder.c;</span><br><span class=\"line\">        _d <span class=\"operator\">=</span> builder.d;</span><br><span class=\"line\">        _e <span class=\"operator\">=</span> builder.e;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Usage</span></span><br><span class=\"line\"><span class=\"type\">OCDemoModel</span> <span class=\"operator\">*</span>ret <span class=\"operator\">=</span> [[<span class=\"type\">OCDemoModel</span> alloc] initWithBuilder:<span class=\"operator\">^</span>(<span class=\"type\">OCDemoModelBuilder</span> <span class=\"operator\">*</span> _Nonnull builder) &#123;</span><br><span class=\"line\">    builder.b <span class=\"operator\">=</span> @<span class=\"string\">&quot;b1&quot;</span>;</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n<p>However, Swift’s Struct supports attribute default values and initialization constructors, which greatly simplifies the process. The code is as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">SwiftDemoModel</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a <span class=\"operator\">=</span> <span class=\"string\">&quot;a&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> b <span class=\"operator\">=</span> <span class=\"string\">&quot;b&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> c <span class=\"operator\">=</span> <span class=\"string\">&quot;c&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> d <span class=\"operator\">=</span> <span class=\"string\">&quot;d&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> e <span class=\"operator\">=</span> <span class=\"string\">&quot;e&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Usage</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ret <span class=\"operator\">=</span> <span class=\"type\">SwiftDemoModel</span>(b: <span class=\"string\">&quot;b1&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">// ret = a,b1,c,d,e</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n"},{"title":"04. Why should we avoid using closures in structs?","date":"2023-09-09T15:58:59.000Z","_content":"\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nLook at the following example, it will have a surprise result.\n\n```Swift\nstruct Car {\n    var speed: Float = 0.0\n    var increaseSpeed: (() -> ())?\n}\nvar myCar = Car()\nmyCar.increaseSpeed = {\n    myCar.speed += 30 // The retain cycle occurs here. We cannot use [weak myCar] as myCar is a value type.\n}\nmyCar.increaseSpeed?()\nprint(\"My car's speed :\")\nprint(myCar.speed) // Prints 30\n\nvar myNewCar = myCar\nmyNewCar.increaseSpeed?()\nmyNewCar.increaseSpeed?()\nprint(\"My new car's speed :\")\nprint(myNewCar.speed) // Prints 30 still!\nprint(myCar.speed) // Prints 90 !!!\n```\nThe result is:\n```Swift\nMy car's speed :\n30.0\nMy new car's speed :\n30.0\nMy car's speed :\n90.0\n```\nBut why?  \nWell, the reason is, \"myNewCar\" is a partial copy of \"newCar.\" Since closures and their environments cannot be copied completely. The value of \"speed\" is copied, but the property \"increaseSpeed\" of \"myNewCar\" (myNewCar.increaseSpeed?()) holds a reference to the \"increaseSpeed\" of \"myCar\" with the \"speed\" of \"myCar\" in the captured environment. So, the \"increaseSpeed\" of \"myCar\" is invoked.   \nSo what do we do now?   \nThe straight forward solution is, avoid using closures in value types or we should change the struct to a class. If you have to use them, you should be very careful with it, or else it might lead to unexpected results. Regarding the retain cycle, the only way to break them is to set the variables \"myCar\" and \"myNewCar\" to nil manually. It doesn’t sound ideal, but there is no other way. \n\n#### <font size=3 color=gray>*Reference*</font>\n[1] [Why should we avoid using closures in Swift structs?](https://ohmyswift.com/blog/2020/01/10/why-should-we-avoid-using-closures-in-swift-structs/)  \n[2] https://cloud.tencent.com/developer/article/1602230","source":"_posts/Swift/03. Structs/04. Why should we avoid using closures in structs.md","raw":"---\ntitle: 04. Why should we avoid using closures in structs?\ndate: 2023-09-09 17:58:59\ncategories: \n- [Swift, 03. Structs]\ntags:\n- struct\n- closures\n---\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nLook at the following example, it will have a surprise result.\n\n```Swift\nstruct Car {\n    var speed: Float = 0.0\n    var increaseSpeed: (() -> ())?\n}\nvar myCar = Car()\nmyCar.increaseSpeed = {\n    myCar.speed += 30 // The retain cycle occurs here. We cannot use [weak myCar] as myCar is a value type.\n}\nmyCar.increaseSpeed?()\nprint(\"My car's speed :\")\nprint(myCar.speed) // Prints 30\n\nvar myNewCar = myCar\nmyNewCar.increaseSpeed?()\nmyNewCar.increaseSpeed?()\nprint(\"My new car's speed :\")\nprint(myNewCar.speed) // Prints 30 still!\nprint(myCar.speed) // Prints 90 !!!\n```\nThe result is:\n```Swift\nMy car's speed :\n30.0\nMy new car's speed :\n30.0\nMy car's speed :\n90.0\n```\nBut why?  \nWell, the reason is, \"myNewCar\" is a partial copy of \"newCar.\" Since closures and their environments cannot be copied completely. The value of \"speed\" is copied, but the property \"increaseSpeed\" of \"myNewCar\" (myNewCar.increaseSpeed?()) holds a reference to the \"increaseSpeed\" of \"myCar\" with the \"speed\" of \"myCar\" in the captured environment. So, the \"increaseSpeed\" of \"myCar\" is invoked.   \nSo what do we do now?   \nThe straight forward solution is, avoid using closures in value types or we should change the struct to a class. If you have to use them, you should be very careful with it, or else it might lead to unexpected results. Regarding the retain cycle, the only way to break them is to set the variables \"myCar\" and \"myNewCar\" to nil manually. It doesn’t sound ideal, but there is no other way. \n\n#### <font size=3 color=gray>*Reference*</font>\n[1] [Why should we avoid using closures in Swift structs?](https://ohmyswift.com/blog/2020/01/10/why-should-we-avoid-using-closures-in-swift-structs/)  \n[2] https://cloud.tencent.com/developer/article/1602230","slug":"Swift/03. Structs/04. Why should we avoid using closures in structs","published":1,"updated":"2023-11-07T13:55:58.501Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr5g002tvu0mbpnc80ut","content":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>Look at the following example, it will have a surprise result.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Car</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> speed: <span class=\"type\">Float</span> <span class=\"operator\">=</span> <span class=\"number\">0.0</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> increaseSpeed: (() -&gt; ())<span class=\"operator\">?</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> myCar <span class=\"operator\">=</span> <span class=\"type\">Car</span>()</span><br><span class=\"line\">myCar.increaseSpeed <span class=\"operator\">=</span> &#123;</span><br><span class=\"line\">    myCar.speed <span class=\"operator\">+=</span> <span class=\"number\">30</span> <span class=\"comment\">// The retain cycle occurs here. We cannot use [weak myCar] as myCar is a value type.</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">myCar.increaseSpeed<span class=\"operator\">?</span>()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;My car&#x27;s speed :&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(myCar.speed) <span class=\"comment\">// Prints 30</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> myNewCar <span class=\"operator\">=</span> myCar</span><br><span class=\"line\">myNewCar.increaseSpeed<span class=\"operator\">?</span>()</span><br><span class=\"line\">myNewCar.increaseSpeed<span class=\"operator\">?</span>()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;My new car&#x27;s speed :&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(myNewCar.speed) <span class=\"comment\">// Prints 30 still!</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(myCar.speed) <span class=\"comment\">// Prints 90 !!!</span></span><br></pre></td></tr></table></figure>\n<p>The result is:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">My</span> car&#x27;s speed :</span><br><span class=\"line\"><span class=\"number\">30.0</span></span><br><span class=\"line\"><span class=\"type\">My</span> new car&#x27;s speed :</span><br><span class=\"line\"><span class=\"number\">30.0</span></span><br><span class=\"line\"><span class=\"type\">My</span> car&#x27;s speed :</span><br><span class=\"line\"><span class=\"number\">90.0</span></span><br></pre></td></tr></table></figure>\n<p>But why?<br>Well, the reason is, “myNewCar” is a partial copy of “newCar.” Since closures and their environments cannot be copied completely. The value of “speed” is copied, but the property “increaseSpeed” of “myNewCar” (myNewCar.increaseSpeed?()) holds a reference to the “increaseSpeed” of “myCar” with the “speed” of “myCar” in the captured environment. So, the “increaseSpeed” of “myCar” is invoked.<br>So what do we do now?<br>The straight forward solution is, avoid using closures in value types or we should change the struct to a class. If you have to use them, you should be very careful with it, or else it might lead to unexpected results. Regarding the retain cycle, the only way to break them is to set the variables “myCar” and “myNewCar” to nil manually. It doesn’t sound ideal, but there is no other way. </p>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://ohmyswift.com/blog/2020/01/10/why-should-we-avoid-using-closures-in-swift-structs/\">Why should we avoid using closures in Swift structs?</a><br>[2] <a href=\"https://cloud.tencent.com/developer/article/1602230\">https://cloud.tencent.com/developer/article/1602230</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>Look at the following example, it will have a surprise result.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Car</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> speed: <span class=\"type\">Float</span> <span class=\"operator\">=</span> <span class=\"number\">0.0</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> increaseSpeed: (() -&gt; ())<span class=\"operator\">?</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> myCar <span class=\"operator\">=</span> <span class=\"type\">Car</span>()</span><br><span class=\"line\">myCar.increaseSpeed <span class=\"operator\">=</span> &#123;</span><br><span class=\"line\">    myCar.speed <span class=\"operator\">+=</span> <span class=\"number\">30</span> <span class=\"comment\">// The retain cycle occurs here. We cannot use [weak myCar] as myCar is a value type.</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">myCar.increaseSpeed<span class=\"operator\">?</span>()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;My car&#x27;s speed :&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(myCar.speed) <span class=\"comment\">// Prints 30</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> myNewCar <span class=\"operator\">=</span> myCar</span><br><span class=\"line\">myNewCar.increaseSpeed<span class=\"operator\">?</span>()</span><br><span class=\"line\">myNewCar.increaseSpeed<span class=\"operator\">?</span>()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;My new car&#x27;s speed :&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(myNewCar.speed) <span class=\"comment\">// Prints 30 still!</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(myCar.speed) <span class=\"comment\">// Prints 90 !!!</span></span><br></pre></td></tr></table></figure>\n<p>The result is:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">My</span> car&#x27;s speed :</span><br><span class=\"line\"><span class=\"number\">30.0</span></span><br><span class=\"line\"><span class=\"type\">My</span> new car&#x27;s speed :</span><br><span class=\"line\"><span class=\"number\">30.0</span></span><br><span class=\"line\"><span class=\"type\">My</span> car&#x27;s speed :</span><br><span class=\"line\"><span class=\"number\">90.0</span></span><br></pre></td></tr></table></figure>\n<p>But why?<br>Well, the reason is, “myNewCar” is a partial copy of “newCar.” Since closures and their environments cannot be copied completely. The value of “speed” is copied, but the property “increaseSpeed” of “myNewCar” (myNewCar.increaseSpeed?()) holds a reference to the “increaseSpeed” of “myCar” with the “speed” of “myCar” in the captured environment. So, the “increaseSpeed” of “myCar” is invoked.<br>So what do we do now?<br>The straight forward solution is, avoid using closures in value types or we should change the struct to a class. If you have to use them, you should be very careful with it, or else it might lead to unexpected results. Regarding the retain cycle, the only way to break them is to set the variables “myCar” and “myNewCar” to nil manually. It doesn’t sound ideal, but there is no other way. </p>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://ohmyswift.com/blog/2020/01/10/why-should-we-avoid-using-closures-in-swift-structs/\">Why should we avoid using closures in Swift structs?</a><br>[2] <a href=\"https://cloud.tencent.com/developer/article/1602230\">https://cloud.tencent.com/developer/article/1602230</a></p>\n"},{"title":"00. Three forms of Closures","date":"2023-03-01T20:40:59.000Z","_content":"\n<font color=gray size=2>*It will take about 1 minutes to finish reading this article.*</font>\n\nAs the Apple official documents says, closures take one of three forms:\n\n\n#### <font size=3 color=#4169E1> 1. Global functions </font> \nGlobal functions are closures that have a name and don’t capture any values.\n```Swift \nfunc setupBlock {\n    print(\"Hello\")\n}\n```\nIt is a special closure.\n\n#### <font size=3 color=#4169E1> 2. Nested functions </font>\nNested functions are closures that have a name and can capture values from their enclosing function. \n```Swift \nfunc makeIncrementer() -> () -> Int {\n    var runningTotal = 10\n    // nested function，it is a closure too.\n    func incrementer() -> Int{\n        runningTotal += 1\n        return runningTotal\n    }\n    return incrementer\n}\n```\n#### <font size=3 color=#4169E1> 3. Closure expressions </font>\nClosure expressions are unnamed closures written in a lightweight syntax that can capture values from their surrounding context.\n```Swift \n{ (param) -> ReturnType in\n    // Method body\n}\n```\nSwift’s closure expressions have a clean, clear style, with optimizations that encourage brief, clutter-free syntax in common scenarios. These optimizations include:\n1. Inferring parameter and return value types from context\n2. Implicit returns from single-expression closures\n3. Shorthand argument names\n4. Trailing closure syntax\n\n#### <font size=3 color=gray>*Reference*</font>\n<https://docs.swift.org/swift-book/LanguageGuide/Closures.html>  \n","source":"_posts/Swift/02. Closures/00. Three Forms of Closures.md","raw":"---\ntitle: 00. Three forms of Closures\ndate: 2023-02-29 21:40:59\ncategories: \n- [Swift, 02. Closures]\ntags:\n- Closures\n---\n\n<font color=gray size=2>*It will take about 1 minutes to finish reading this article.*</font>\n\nAs the Apple official documents says, closures take one of three forms:\n\n\n#### <font size=3 color=#4169E1> 1. Global functions </font> \nGlobal functions are closures that have a name and don’t capture any values.\n```Swift \nfunc setupBlock {\n    print(\"Hello\")\n}\n```\nIt is a special closure.\n\n#### <font size=3 color=#4169E1> 2. Nested functions </font>\nNested functions are closures that have a name and can capture values from their enclosing function. \n```Swift \nfunc makeIncrementer() -> () -> Int {\n    var runningTotal = 10\n    // nested function，it is a closure too.\n    func incrementer() -> Int{\n        runningTotal += 1\n        return runningTotal\n    }\n    return incrementer\n}\n```\n#### <font size=3 color=#4169E1> 3. Closure expressions </font>\nClosure expressions are unnamed closures written in a lightweight syntax that can capture values from their surrounding context.\n```Swift \n{ (param) -> ReturnType in\n    // Method body\n}\n```\nSwift’s closure expressions have a clean, clear style, with optimizations that encourage brief, clutter-free syntax in common scenarios. These optimizations include:\n1. Inferring parameter and return value types from context\n2. Implicit returns from single-expression closures\n3. Shorthand argument names\n4. Trailing closure syntax\n\n#### <font size=3 color=gray>*Reference*</font>\n<https://docs.swift.org/swift-book/LanguageGuide/Closures.html>  \n","slug":"Swift/02. Closures/00. Three Forms of Closures","published":1,"updated":"2023-11-07T13:55:33.617Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr5h002wvu0mbh5f9ktt","content":"<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p>\n<p>As the Apple official documents says, closures take one of three forms:</p>\n<h4 id=\"1-Global-functions\"><a href=\"#1-Global-functions\" class=\"headerlink\" title=\" 1. Global functions \"></a><font size=3 color=#4169E1> 1. Global functions </font></h4><p>Global functions are closures that have a name and don’t capture any values.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">setupBlock</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Hello&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>It is a special closure.</p>\n<h4 id=\"2-Nested-functions\"><a href=\"#2-Nested-functions\" class=\"headerlink\" title=\" 2. Nested functions \"></a><font size=3 color=#4169E1> 2. Nested functions </font></h4><p>Nested functions are closures that have a name and can capture values from their enclosing function. </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">makeIncrementer</span>() -&gt; () -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> runningTotal <span class=\"operator\">=</span> <span class=\"number\">10</span></span><br><span class=\"line\">    <span class=\"comment\">// nested function，it is a closure too.</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">incrementer</span>() -&gt; <span class=\"type\">Int</span>&#123;</span><br><span class=\"line\">        runningTotal <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> runningTotal</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> incrementer</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-Closure-expressions\"><a href=\"#3-Closure-expressions\" class=\"headerlink\" title=\" 3. Closure expressions \"></a><font size=3 color=#4169E1> 3. Closure expressions </font></h4><p>Closure expressions are unnamed closures written in a lightweight syntax that can capture values from their surrounding context.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; (param) -&gt; <span class=\"type\">ReturnType</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"comment\">// Method body</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Swift’s closure expressions have a clean, clear style, with optimizations that encourage brief, clutter-free syntax in common scenarios. These optimizations include:</p>\n<ol>\n<li>Inferring parameter and return value types from context</li>\n<li>Implicit returns from single-expression closures</li>\n<li>Shorthand argument names</li>\n<li>Trailing closure syntax</li>\n</ol>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p><a href=\"https://docs.swift.org/swift-book/LanguageGuide/Closures.html\">https://docs.swift.org/swift-book/LanguageGuide/Closures.html</a>  </p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p>\n<p>As the Apple official documents says, closures take one of three forms:</p>\n<h4 id=\"1-Global-functions\"><a href=\"#1-Global-functions\" class=\"headerlink\" title=\" 1. Global functions \"></a><font size=3 color=#4169E1> 1. Global functions </font></h4><p>Global functions are closures that have a name and don’t capture any values.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">setupBlock</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Hello&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>It is a special closure.</p>\n<h4 id=\"2-Nested-functions\"><a href=\"#2-Nested-functions\" class=\"headerlink\" title=\" 2. Nested functions \"></a><font size=3 color=#4169E1> 2. Nested functions </font></h4><p>Nested functions are closures that have a name and can capture values from their enclosing function. </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">makeIncrementer</span>() -&gt; () -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> runningTotal <span class=\"operator\">=</span> <span class=\"number\">10</span></span><br><span class=\"line\">    <span class=\"comment\">// nested function，it is a closure too.</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">incrementer</span>() -&gt; <span class=\"type\">Int</span>&#123;</span><br><span class=\"line\">        runningTotal <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> runningTotal</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> incrementer</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-Closure-expressions\"><a href=\"#3-Closure-expressions\" class=\"headerlink\" title=\" 3. Closure expressions \"></a><font size=3 color=#4169E1> 3. Closure expressions </font></h4><p>Closure expressions are unnamed closures written in a lightweight syntax that can capture values from their surrounding context.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; (param) -&gt; <span class=\"type\">ReturnType</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"comment\">// Method body</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Swift’s closure expressions have a clean, clear style, with optimizations that encourage brief, clutter-free syntax in common scenarios. These optimizations include:</p>\n<ol>\n<li>Inferring parameter and return value types from context</li>\n<li>Implicit returns from single-expression closures</li>\n<li>Shorthand argument names</li>\n<li>Trailing closure syntax</li>\n</ol>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p><a href=\"https://docs.swift.org/swift-book/LanguageGuide/Closures.html\">https://docs.swift.org/swift-book/LanguageGuide/Closures.html</a>  </p>\n"},{"title":"01. Capturing Values","date":"2023-03-01T20:40:59.000Z","_content":"\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nThe capture of values in Swift's closure and OC's Block is different.\n\n#### <font size=3 color=#4169E1> 1. The capture of values in OC. </font> \n```Swift \nNSInteger a = 100;\nvoid(^block)(void) = ^{\n    NSLog(@\"block = %ld:\", a);\n};\n \na += 1;\nNSLog(@\"out1 = %ld:\", a);\nblock();\nNSLog(@\"out2 = %ld:\", a);\n//result:\n2021-08-17 11:27:13.846743+0800 MDProject[30746:23593763] out1 = 101\n2021-08-17 11:27:13.846885+0800 MDProject[30746:23593763] block = 100\n2021-08-17 11:27:13.847002+0800 MDProject[30746:23593763] out2 = 101\n```\n#### <font size=3 color=#4169E1> 2. The capture of values in Swift. </font> \n```Swift\nvar a = 100\nlet closure = {\n    print(\"closure = \\(a)\")\n}\na += 1\nprint(\"out 1 = \\(a)\")\nclosure()\nprint(\"out 2 = \\(a)\")\n```\nResult:\n```Swift\nout1 = 101\nclosure = 101\nout 2 = 101\n```\nSwift closures capture \"references\", not the objects they reference. We can print the address of variable a to prove this.\n```Swift\nvar a = 100\nwithUnsafePointer(to: &a) {ptr in print(ptr)}\nlet closure = {\n    print(\"closure = \\(a)\")\n    withUnsafePointer(to: &a) {ptr in print(ptr)}\n}\nclosure()\na += 1\nprint(\"out 1 = \\(a)\")\nwithUnsafePointer(to: &a) {ptr in print(ptr)}\n\nclosure()\nprint(\"out 2 = \\(a)\")\nwithUnsafePointer(to: &a) {ptr in print(ptr)}\n```\nResult as follows:\n```Swift\n0x0000600000209490\nclosure = 100\n0x0000600000209490\nout 1 = 101\n0x0000600000209490\nclosure = 101\n0x0000600000209490\nout 2 = 101\n0x0000600000209490\n```\nThey all have the same address, It proves that closure capture the reference of the variable, not like block in OC.\n\n#### <font size=3 color=#4169E1> 3. Modify value in closure. </font>  \nIf we want to modity value in block, we should add \"__block\" or \"__weak\", that will make the block capture reference of variable from outside.\nLet me see how closure handle this case.\n```Swift\nvar a = 100\nlet closure = {\n    a += 1\n    print(\"closure = \\(a)\")\n}\nprint(\"out 1 = \\(a)\")\nclosure()\nprint(\"out 2 = \\(a)\")\n```\nResult:\n```Swift\nout 1 = 100\nclosure = 101\nout 2 = 101\n```\nWe can modify the value of the variable in closure directly because closure capture the reference of the variable by default.\n\n#### <font size=3 color=#4169E1> 4. Capturing list in closure. </font>   \nIf we capture variable in capturing list in closure, what will happen? Let me see that.\n```Swift\nvar a = 100\nlet closure = {\n    [a] in\n    print(\"closure = \\(a)\")\n}\na += 1\nprint(\"out 1 = \\(a)\")\nclosure()\nprint(\"out 2 = \\(a)\")\n```\nResult:\n```Swift\nout 1 = 101\nclosure = 100\nout 2 = 101\n```\nAt this time if we want to modify 'a' in closure:\n```Swift\nvar a = 100\nlet closure = {\n    [a] in\n    a += 1\n    print(\"closure = \\(a)\")\n}\na += 1\nprint(\"out 1 = \\(a)\")\nclosure()\nprint(\"out 2 = \\(a)\")\n```\nIt will get an error like that:  \n\n{% img /assets/Swift/Tips/image00.jpg %}\n\nAnd this is a tip for us that variable 'a' is an immutable capture now.\n","source":"_posts/Swift/02. Closures/01. Capturing Values.md","raw":"---\ntitle: 01. Capturing Values\ndate: 2023-02-29 21:40:59\ncategories: \n- [Swift, 02. Closures]\ntags:\n- Capturing\n---\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nThe capture of values in Swift's closure and OC's Block is different.\n\n#### <font size=3 color=#4169E1> 1. The capture of values in OC. </font> \n```Swift \nNSInteger a = 100;\nvoid(^block)(void) = ^{\n    NSLog(@\"block = %ld:\", a);\n};\n \na += 1;\nNSLog(@\"out1 = %ld:\", a);\nblock();\nNSLog(@\"out2 = %ld:\", a);\n//result:\n2021-08-17 11:27:13.846743+0800 MDProject[30746:23593763] out1 = 101\n2021-08-17 11:27:13.846885+0800 MDProject[30746:23593763] block = 100\n2021-08-17 11:27:13.847002+0800 MDProject[30746:23593763] out2 = 101\n```\n#### <font size=3 color=#4169E1> 2. The capture of values in Swift. </font> \n```Swift\nvar a = 100\nlet closure = {\n    print(\"closure = \\(a)\")\n}\na += 1\nprint(\"out 1 = \\(a)\")\nclosure()\nprint(\"out 2 = \\(a)\")\n```\nResult:\n```Swift\nout1 = 101\nclosure = 101\nout 2 = 101\n```\nSwift closures capture \"references\", not the objects they reference. We can print the address of variable a to prove this.\n```Swift\nvar a = 100\nwithUnsafePointer(to: &a) {ptr in print(ptr)}\nlet closure = {\n    print(\"closure = \\(a)\")\n    withUnsafePointer(to: &a) {ptr in print(ptr)}\n}\nclosure()\na += 1\nprint(\"out 1 = \\(a)\")\nwithUnsafePointer(to: &a) {ptr in print(ptr)}\n\nclosure()\nprint(\"out 2 = \\(a)\")\nwithUnsafePointer(to: &a) {ptr in print(ptr)}\n```\nResult as follows:\n```Swift\n0x0000600000209490\nclosure = 100\n0x0000600000209490\nout 1 = 101\n0x0000600000209490\nclosure = 101\n0x0000600000209490\nout 2 = 101\n0x0000600000209490\n```\nThey all have the same address, It proves that closure capture the reference of the variable, not like block in OC.\n\n#### <font size=3 color=#4169E1> 3. Modify value in closure. </font>  \nIf we want to modity value in block, we should add \"__block\" or \"__weak\", that will make the block capture reference of variable from outside.\nLet me see how closure handle this case.\n```Swift\nvar a = 100\nlet closure = {\n    a += 1\n    print(\"closure = \\(a)\")\n}\nprint(\"out 1 = \\(a)\")\nclosure()\nprint(\"out 2 = \\(a)\")\n```\nResult:\n```Swift\nout 1 = 100\nclosure = 101\nout 2 = 101\n```\nWe can modify the value of the variable in closure directly because closure capture the reference of the variable by default.\n\n#### <font size=3 color=#4169E1> 4. Capturing list in closure. </font>   \nIf we capture variable in capturing list in closure, what will happen? Let me see that.\n```Swift\nvar a = 100\nlet closure = {\n    [a] in\n    print(\"closure = \\(a)\")\n}\na += 1\nprint(\"out 1 = \\(a)\")\nclosure()\nprint(\"out 2 = \\(a)\")\n```\nResult:\n```Swift\nout 1 = 101\nclosure = 100\nout 2 = 101\n```\nAt this time if we want to modify 'a' in closure:\n```Swift\nvar a = 100\nlet closure = {\n    [a] in\n    a += 1\n    print(\"closure = \\(a)\")\n}\na += 1\nprint(\"out 1 = \\(a)\")\nclosure()\nprint(\"out 2 = \\(a)\")\n```\nIt will get an error like that:  \n\n{% img /assets/Swift/Tips/image00.jpg %}\n\nAnd this is a tip for us that variable 'a' is an immutable capture now.\n","slug":"Swift/02. Closures/01. Capturing Values","published":1,"updated":"2023-11-07T13:55:35.963Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr5h002zvu0m6uaj26b2","content":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>The capture of values in Swift’s closure and OC’s Block is different.</p>\n<h4 id=\"1-The-capture-of-values-in-OC\"><a href=\"#1-The-capture-of-values-in-OC\" class=\"headerlink\" title=\" 1. The capture of values in OC. \"></a><font size=3 color=#4169E1> 1. The capture of values in OC. </font></h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">NSInteger</span> a <span class=\"operator\">=</span> <span class=\"number\">100</span>;</span><br><span class=\"line\">void(<span class=\"operator\">^</span>block)(void) <span class=\"operator\">=</span> <span class=\"operator\">^</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">NSLog</span>(@<span class=\"string\">&quot;block = %ld:&quot;</span>, a);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">a <span class=\"operator\">+=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"type\">NSLog</span>(@<span class=\"string\">&quot;out1 = %ld:&quot;</span>, a);</span><br><span class=\"line\">block();</span><br><span class=\"line\"><span class=\"type\">NSLog</span>(@<span class=\"string\">&quot;out2 = %ld:&quot;</span>, a);</span><br><span class=\"line\"><span class=\"comment\">//result:</span></span><br><span class=\"line\"><span class=\"number\">2021</span><span class=\"operator\">-</span><span class=\"number\">08</span><span class=\"operator\">-</span><span class=\"number\">17</span> <span class=\"number\">11</span>:<span class=\"number\">27</span>:<span class=\"number\">13.846743</span><span class=\"operator\">+</span><span class=\"number\">0800</span> <span class=\"type\">MDProject</span>[<span class=\"number\">30746</span>:<span class=\"number\">23593763</span>] out1 <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br><span class=\"line\"><span class=\"number\">2021</span><span class=\"operator\">-</span><span class=\"number\">08</span><span class=\"operator\">-</span><span class=\"number\">17</span> <span class=\"number\">11</span>:<span class=\"number\">27</span>:<span class=\"number\">13.846885</span><span class=\"operator\">+</span><span class=\"number\">0800</span> <span class=\"type\">MDProject</span>[<span class=\"number\">30746</span>:<span class=\"number\">23593763</span>] block <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"number\">2021</span><span class=\"operator\">-</span><span class=\"number\">08</span><span class=\"operator\">-</span><span class=\"number\">17</span> <span class=\"number\">11</span>:<span class=\"number\">27</span>:<span class=\"number\">13.847002</span><span class=\"operator\">+</span><span class=\"number\">0800</span> <span class=\"type\">MDProject</span>[<span class=\"number\">30746</span>:<span class=\"number\">23593763</span>] out2 <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"2-The-capture-of-values-in-Swift\"><a href=\"#2-The-capture-of-values-in-Swift\" class=\"headerlink\" title=\" 2. The capture of values in Swift. \"></a><font size=3 color=#4169E1> 2. The capture of values in Swift. </font></h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> closure <span class=\"operator\">=</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;closure = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;out 1 = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br><span class=\"line\">closure()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;out 2 = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>Result:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">out1 <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br><span class=\"line\">closure <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br><span class=\"line\">out <span class=\"number\">2</span> <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br></pre></td></tr></table></figure>\n<p>Swift closures capture “references”, not the objects they reference. We can print the address of variable a to prove this.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"built_in\">withUnsafePointer</span>(to: <span class=\"operator\">&amp;</span>a) &#123;ptr <span class=\"keyword\">in</span> <span class=\"built_in\">print</span>(ptr)&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> closure <span class=\"operator\">=</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;closure = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">withUnsafePointer</span>(to: <span class=\"operator\">&amp;</span>a) &#123;ptr <span class=\"keyword\">in</span> <span class=\"built_in\">print</span>(ptr)&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">closure()</span><br><span class=\"line\">a <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;out 1 = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">withUnsafePointer</span>(to: <span class=\"operator\">&amp;</span>a) &#123;ptr <span class=\"keyword\">in</span> <span class=\"built_in\">print</span>(ptr)&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">closure()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;out 2 = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">withUnsafePointer</span>(to: <span class=\"operator\">&amp;</span>a) &#123;ptr <span class=\"keyword\">in</span> <span class=\"built_in\">print</span>(ptr)&#125;</span><br></pre></td></tr></table></figure>\n<p>Result as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0x0000600000209490</span></span><br><span class=\"line\">closure <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"number\">0x0000600000209490</span></span><br><span class=\"line\">out <span class=\"number\">1</span> <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br><span class=\"line\"><span class=\"number\">0x0000600000209490</span></span><br><span class=\"line\">closure <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br><span class=\"line\"><span class=\"number\">0x0000600000209490</span></span><br><span class=\"line\">out <span class=\"number\">2</span> <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br><span class=\"line\"><span class=\"number\">0x0000600000209490</span></span><br></pre></td></tr></table></figure>\n<p>They all have the same address, It proves that closure capture the reference of the variable, not like block in OC.</p>\n<h4 id=\"3-Modify-value-in-closure\"><a href=\"#3-Modify-value-in-closure\" class=\"headerlink\" title=\" 3. Modify value in closure. \"></a><font size=3 color=#4169E1> 3. Modify value in closure. </font></h4><p>If we want to modity value in block, we should add “__block” or “__weak”, that will make the block capture reference of variable from outside.<br>Let me see how closure handle this case.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> closure <span class=\"operator\">=</span> &#123;</span><br><span class=\"line\">    a <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;closure = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;out 1 = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br><span class=\"line\">closure()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;out 2 = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>Result:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">out <span class=\"number\">1</span> <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\">closure <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br><span class=\"line\">out <span class=\"number\">2</span> <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br></pre></td></tr></table></figure>\n<p>We can modify the value of the variable in closure directly because closure capture the reference of the variable by default.</p>\n<h4 id=\"4-Capturing-list-in-closure\"><a href=\"#4-Capturing-list-in-closure\" class=\"headerlink\" title=\" 4. Capturing list in closure. \"></a><font size=3 color=#4169E1> 4. Capturing list in closure. </font></h4><p>If we capture variable in capturing list in closure, what will happen? Let me see that.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> closure <span class=\"operator\">=</span> &#123;</span><br><span class=\"line\">    [a] <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;closure = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;out 1 = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br><span class=\"line\">closure()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;out 2 = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>Result:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">out <span class=\"number\">1</span> <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br><span class=\"line\">closure <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\">out <span class=\"number\">2</span> <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br></pre></td></tr></table></figure>\n<p>At this time if we want to modify ‘a’ in closure:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> closure <span class=\"operator\">=</span> &#123;</span><br><span class=\"line\">    [a] <span class=\"keyword\">in</span></span><br><span class=\"line\">    a <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;closure = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;out 1 = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br><span class=\"line\">closure()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;out 2 = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>It will get an error like that:  </p>\n<img src=\"/assets/Swift/Tips/image00.jpg\" class=\"\">\n\n<p>And this is a tip for us that variable ‘a’ is an immutable capture now.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>The capture of values in Swift’s closure and OC’s Block is different.</p>\n<h4 id=\"1-The-capture-of-values-in-OC\"><a href=\"#1-The-capture-of-values-in-OC\" class=\"headerlink\" title=\" 1. The capture of values in OC. \"></a><font size=3 color=#4169E1> 1. The capture of values in OC. </font></h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">NSInteger</span> a <span class=\"operator\">=</span> <span class=\"number\">100</span>;</span><br><span class=\"line\">void(<span class=\"operator\">^</span>block)(void) <span class=\"operator\">=</span> <span class=\"operator\">^</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">NSLog</span>(@<span class=\"string\">&quot;block = %ld:&quot;</span>, a);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">a <span class=\"operator\">+=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"type\">NSLog</span>(@<span class=\"string\">&quot;out1 = %ld:&quot;</span>, a);</span><br><span class=\"line\">block();</span><br><span class=\"line\"><span class=\"type\">NSLog</span>(@<span class=\"string\">&quot;out2 = %ld:&quot;</span>, a);</span><br><span class=\"line\"><span class=\"comment\">//result:</span></span><br><span class=\"line\"><span class=\"number\">2021</span><span class=\"operator\">-</span><span class=\"number\">08</span><span class=\"operator\">-</span><span class=\"number\">17</span> <span class=\"number\">11</span>:<span class=\"number\">27</span>:<span class=\"number\">13.846743</span><span class=\"operator\">+</span><span class=\"number\">0800</span> <span class=\"type\">MDProject</span>[<span class=\"number\">30746</span>:<span class=\"number\">23593763</span>] out1 <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br><span class=\"line\"><span class=\"number\">2021</span><span class=\"operator\">-</span><span class=\"number\">08</span><span class=\"operator\">-</span><span class=\"number\">17</span> <span class=\"number\">11</span>:<span class=\"number\">27</span>:<span class=\"number\">13.846885</span><span class=\"operator\">+</span><span class=\"number\">0800</span> <span class=\"type\">MDProject</span>[<span class=\"number\">30746</span>:<span class=\"number\">23593763</span>] block <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"number\">2021</span><span class=\"operator\">-</span><span class=\"number\">08</span><span class=\"operator\">-</span><span class=\"number\">17</span> <span class=\"number\">11</span>:<span class=\"number\">27</span>:<span class=\"number\">13.847002</span><span class=\"operator\">+</span><span class=\"number\">0800</span> <span class=\"type\">MDProject</span>[<span class=\"number\">30746</span>:<span class=\"number\">23593763</span>] out2 <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"2-The-capture-of-values-in-Swift\"><a href=\"#2-The-capture-of-values-in-Swift\" class=\"headerlink\" title=\" 2. The capture of values in Swift. \"></a><font size=3 color=#4169E1> 2. The capture of values in Swift. </font></h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> closure <span class=\"operator\">=</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;closure = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;out 1 = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br><span class=\"line\">closure()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;out 2 = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>Result:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">out1 <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br><span class=\"line\">closure <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br><span class=\"line\">out <span class=\"number\">2</span> <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br></pre></td></tr></table></figure>\n<p>Swift closures capture “references”, not the objects they reference. We can print the address of variable a to prove this.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"built_in\">withUnsafePointer</span>(to: <span class=\"operator\">&amp;</span>a) &#123;ptr <span class=\"keyword\">in</span> <span class=\"built_in\">print</span>(ptr)&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> closure <span class=\"operator\">=</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;closure = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">withUnsafePointer</span>(to: <span class=\"operator\">&amp;</span>a) &#123;ptr <span class=\"keyword\">in</span> <span class=\"built_in\">print</span>(ptr)&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">closure()</span><br><span class=\"line\">a <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;out 1 = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">withUnsafePointer</span>(to: <span class=\"operator\">&amp;</span>a) &#123;ptr <span class=\"keyword\">in</span> <span class=\"built_in\">print</span>(ptr)&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">closure()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;out 2 = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">withUnsafePointer</span>(to: <span class=\"operator\">&amp;</span>a) &#123;ptr <span class=\"keyword\">in</span> <span class=\"built_in\">print</span>(ptr)&#125;</span><br></pre></td></tr></table></figure>\n<p>Result as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0x0000600000209490</span></span><br><span class=\"line\">closure <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"number\">0x0000600000209490</span></span><br><span class=\"line\">out <span class=\"number\">1</span> <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br><span class=\"line\"><span class=\"number\">0x0000600000209490</span></span><br><span class=\"line\">closure <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br><span class=\"line\"><span class=\"number\">0x0000600000209490</span></span><br><span class=\"line\">out <span class=\"number\">2</span> <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br><span class=\"line\"><span class=\"number\">0x0000600000209490</span></span><br></pre></td></tr></table></figure>\n<p>They all have the same address, It proves that closure capture the reference of the variable, not like block in OC.</p>\n<h4 id=\"3-Modify-value-in-closure\"><a href=\"#3-Modify-value-in-closure\" class=\"headerlink\" title=\" 3. Modify value in closure. \"></a><font size=3 color=#4169E1> 3. Modify value in closure. </font></h4><p>If we want to modity value in block, we should add “__block” or “__weak”, that will make the block capture reference of variable from outside.<br>Let me see how closure handle this case.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> closure <span class=\"operator\">=</span> &#123;</span><br><span class=\"line\">    a <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;closure = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;out 1 = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br><span class=\"line\">closure()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;out 2 = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>Result:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">out <span class=\"number\">1</span> <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\">closure <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br><span class=\"line\">out <span class=\"number\">2</span> <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br></pre></td></tr></table></figure>\n<p>We can modify the value of the variable in closure directly because closure capture the reference of the variable by default.</p>\n<h4 id=\"4-Capturing-list-in-closure\"><a href=\"#4-Capturing-list-in-closure\" class=\"headerlink\" title=\" 4. Capturing list in closure. \"></a><font size=3 color=#4169E1> 4. Capturing list in closure. </font></h4><p>If we capture variable in capturing list in closure, what will happen? Let me see that.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> closure <span class=\"operator\">=</span> &#123;</span><br><span class=\"line\">    [a] <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;closure = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;out 1 = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br><span class=\"line\">closure()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;out 2 = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>Result:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">out <span class=\"number\">1</span> <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br><span class=\"line\">closure <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\">out <span class=\"number\">2</span> <span class=\"operator\">=</span> <span class=\"number\">101</span></span><br></pre></td></tr></table></figure>\n<p>At this time if we want to modify ‘a’ in closure:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> closure <span class=\"operator\">=</span> &#123;</span><br><span class=\"line\">    [a] <span class=\"keyword\">in</span></span><br><span class=\"line\">    a <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;closure = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;out 1 = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br><span class=\"line\">closure()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;out 2 = <span class=\"subst\">\\(a)</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>It will get an error like that:  </p>\n<img src=\"/assets/Swift/Tips/image00.jpg\" class=\"\">\n\n<p>And this is a tip for us that variable ‘a’ is an immutable capture now.</p>\n"},{"title":"00. Summary of Enumerations","date":"2023-03-03T19:00:00.000Z","_content":"\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\n#### <font size=3 color=#4169E1> 1. General </font>\n \nWe define an enumeration in Objective-C/C as follow:\n```Objective-C\ntypedef enum {\n    AFEncapsulationBoundaryPhase = 1,\n    AFHeaderPhase                = 2,\n    AFBodyPhase                  = 3,\n    AFFinalBoundaryPhase         = 4,\n} AFHTTPBodyPartReadPhase;\n```\nOr like this:\n```Objective-C\ntypedef NS_ENUM(NSInteger, RoleItemType) {\n    RoleItemLabelType = 0,  \n    RoleItemImageType = 1,   \n    RoleItemMixType = 2,     \n};\n```\nBut In Swift we need to define an enumeration like this:\n```Swift \nenum CompassPoint {\n    case north\n    case south\n    case east\n    case west\n}\n```\nUnlike in C/OC, enumeration in Swift is a completely different thing. It is somewhat similar to struct. It is very flexible and has a wide range of uses. Enumeration in Swift has the following characteristics:  \n> * It is of value type.\n> * It can conform to protocols to provide standard functionality.\n> * It can be extended to expand their functionality beyond their original implementation.\n> * It can also define initializers to provide an initial case value and define common functions and properties(computed properties).   \n> * It supports recursion.\n\nEnumerations in Swift are first-class types in their own right. They adopt many features traditionally supported only by classes.\n \n\n#### <font size=3 color=#4169E1> 2. Associated Values and Raw Values </font>\n\n<strong>**<font size=3 color=#F5F5F5>2.1 Associated Values</font>**  </strong>\n\nFirstly, Associated Values can have different member types. for example:\n```Swift\n enum {10,0.8,\"Hello\"}\n```\nSecondly, It always bases on Constant or variable. Thirdly, Associated Value will be set when you create a new constant or variable based on the enumeration member, and its value can be different each time you do so.\n```Swift\nenum Student{\n    case Name(String)\n    case Mark(Int,Int,Int)\n}\nvar studDetails = Student.Name(\"Runoob\")\nvar studMarks = Student.Mark(98,97,95)\nswitch studMarks {\ncase .Name(let studName):\n    print(\"Student Name: \\(studName)。\")\ncase .Mark(let Mark1, let Mark2, let Mark3):\n    print(\"Student Mark: \\(Mark1),\\(Mark2),\\(Mark3)。\")\n}\n```\n<strong>**<font size=3 color=#F5F5F5>2.2 Raw Values</font>**  </strong>   \nFirstly, Raw Values have the same member types. for example:\n```Swift\nenum {10,35,50}\n```\nIt is pre-populated values and fixed.\n```Swift \nenum ASCIIControlCharacter: Character {\n    case tab = \"\\t\"\n    case lineFeed = \"\\n\"\n    case carriageReturn = \"\\r\"\n}\n```\n> NOTE  \n> Raw values are not the same as associated values. Raw values are set to prepopulate values when you first define the enumeration in your code, like the three ASCII codes above. The raw value for a particular enumeration case is always the same. Associated values are set when you create a new constant or variable based on one of the enumeration’s cases, and can be different each time you do so.\n>\n\nUsually, An enumeration that has Declaration Type can be implicitly assigned and you do not need to write them all, for example:\n```Swift\nenum Month: Int {\n    case January = 1, February, March, April, May, June, July, August, September, October, November, December\n}\n\n```\n\n#### <font size=3 color=#4169E1> 3. Add methods and properties to enumerations </font>\n```Swift\nenum Device : Int {\n    case iPhone4s\n    case iPhone5\n    case iPhone6\n    case iPhone7\n    var introduced: Int {\n            switch self {\n            case .iPhone4s: return 2011\n            case .iPhone5: return 2012\n            case .iPhone6: return 2014\n            case .iPhone7: return 2016\n        }\n    }\n}\nlet device = Device.iPhone5\nprint(device.introduced)\n/*result:\n2012\n*/\n```\nWe try to extend this enumeration as follows:\n```Swift\nextension Device {\n    func detailedIntroduced()  {\n            switch self {\n            case .iPhone4s: print(\"published in 2011\")\n            case .iPhone5: print(\"published in 2012\")\n            case .iPhone6: print(\"published in 2014\")\n            case .iPhone7: print(\"published in 2016\")\n        }\n    }\n}\nlet device = Device.iPhone5\ndevice.detailedIntroduced()\n/* result:\npublished in 2012\n*/\n```\n\n#### <font size=3 color=#4169E1> 4. Enumeration and Protocol </font>\nEnumeration can conform to protocols to provide standard functionality.\n\n```Swift\nenum Beverage: CaseIterable {\n    case coffee, tea, juice\n}\nlet numberOfChoices = Beverage.allCases.count\nfor beverage in Beverage.allCases {\n    print(beverage)\n}\n```\n\n#### <font size=3 color=#4169E1> 5. Enumeration and Generics</font>\nA typical example of the application of enumerations in generics is 'Optional'. 'Optional' is an enumeration like that:\n```Swift\nenum Optional<T> {\n  case Some(T)\n  case None\n}\n```\nEnumeration can have multiple generic parameters, for example:\n```Swift\nenum Either<T1, T2> {\n  case Left(T1)\n  case Right(T2)\n}\n```\n\n#### <font size=3 color=gray>*Reference*</font>\n[1] <https://docs.swift.org/swift-book/LanguageGuide/Enumerations.html>\n[2] <https://www.jianshu.com/p/6f5f7a908301>   \n[3] <https://juejin.cn/post/7053223443046596644>\n\n\n\n\n\n","source":"_posts/Swift/04. Enumerations/00. Summary of Enumerations.md","raw":"---\ntitle: 00. Summary of Enumerations\ndate: 2023-03-3 20:00:00\ncategories: \n- [Swift, 04. Enumerations]\ntags:\n- enumeration\n---\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\n#### <font size=3 color=#4169E1> 1. General </font>\n \nWe define an enumeration in Objective-C/C as follow:\n```Objective-C\ntypedef enum {\n    AFEncapsulationBoundaryPhase = 1,\n    AFHeaderPhase                = 2,\n    AFBodyPhase                  = 3,\n    AFFinalBoundaryPhase         = 4,\n} AFHTTPBodyPartReadPhase;\n```\nOr like this:\n```Objective-C\ntypedef NS_ENUM(NSInteger, RoleItemType) {\n    RoleItemLabelType = 0,  \n    RoleItemImageType = 1,   \n    RoleItemMixType = 2,     \n};\n```\nBut In Swift we need to define an enumeration like this:\n```Swift \nenum CompassPoint {\n    case north\n    case south\n    case east\n    case west\n}\n```\nUnlike in C/OC, enumeration in Swift is a completely different thing. It is somewhat similar to struct. It is very flexible and has a wide range of uses. Enumeration in Swift has the following characteristics:  \n> * It is of value type.\n> * It can conform to protocols to provide standard functionality.\n> * It can be extended to expand their functionality beyond their original implementation.\n> * It can also define initializers to provide an initial case value and define common functions and properties(computed properties).   \n> * It supports recursion.\n\nEnumerations in Swift are first-class types in their own right. They adopt many features traditionally supported only by classes.\n \n\n#### <font size=3 color=#4169E1> 2. Associated Values and Raw Values </font>\n\n<strong>**<font size=3 color=#F5F5F5>2.1 Associated Values</font>**  </strong>\n\nFirstly, Associated Values can have different member types. for example:\n```Swift\n enum {10,0.8,\"Hello\"}\n```\nSecondly, It always bases on Constant or variable. Thirdly, Associated Value will be set when you create a new constant or variable based on the enumeration member, and its value can be different each time you do so.\n```Swift\nenum Student{\n    case Name(String)\n    case Mark(Int,Int,Int)\n}\nvar studDetails = Student.Name(\"Runoob\")\nvar studMarks = Student.Mark(98,97,95)\nswitch studMarks {\ncase .Name(let studName):\n    print(\"Student Name: \\(studName)。\")\ncase .Mark(let Mark1, let Mark2, let Mark3):\n    print(\"Student Mark: \\(Mark1),\\(Mark2),\\(Mark3)。\")\n}\n```\n<strong>**<font size=3 color=#F5F5F5>2.2 Raw Values</font>**  </strong>   \nFirstly, Raw Values have the same member types. for example:\n```Swift\nenum {10,35,50}\n```\nIt is pre-populated values and fixed.\n```Swift \nenum ASCIIControlCharacter: Character {\n    case tab = \"\\t\"\n    case lineFeed = \"\\n\"\n    case carriageReturn = \"\\r\"\n}\n```\n> NOTE  \n> Raw values are not the same as associated values. Raw values are set to prepopulate values when you first define the enumeration in your code, like the three ASCII codes above. The raw value for a particular enumeration case is always the same. Associated values are set when you create a new constant or variable based on one of the enumeration’s cases, and can be different each time you do so.\n>\n\nUsually, An enumeration that has Declaration Type can be implicitly assigned and you do not need to write them all, for example:\n```Swift\nenum Month: Int {\n    case January = 1, February, March, April, May, June, July, August, September, October, November, December\n}\n\n```\n\n#### <font size=3 color=#4169E1> 3. Add methods and properties to enumerations </font>\n```Swift\nenum Device : Int {\n    case iPhone4s\n    case iPhone5\n    case iPhone6\n    case iPhone7\n    var introduced: Int {\n            switch self {\n            case .iPhone4s: return 2011\n            case .iPhone5: return 2012\n            case .iPhone6: return 2014\n            case .iPhone7: return 2016\n        }\n    }\n}\nlet device = Device.iPhone5\nprint(device.introduced)\n/*result:\n2012\n*/\n```\nWe try to extend this enumeration as follows:\n```Swift\nextension Device {\n    func detailedIntroduced()  {\n            switch self {\n            case .iPhone4s: print(\"published in 2011\")\n            case .iPhone5: print(\"published in 2012\")\n            case .iPhone6: print(\"published in 2014\")\n            case .iPhone7: print(\"published in 2016\")\n        }\n    }\n}\nlet device = Device.iPhone5\ndevice.detailedIntroduced()\n/* result:\npublished in 2012\n*/\n```\n\n#### <font size=3 color=#4169E1> 4. Enumeration and Protocol </font>\nEnumeration can conform to protocols to provide standard functionality.\n\n```Swift\nenum Beverage: CaseIterable {\n    case coffee, tea, juice\n}\nlet numberOfChoices = Beverage.allCases.count\nfor beverage in Beverage.allCases {\n    print(beverage)\n}\n```\n\n#### <font size=3 color=#4169E1> 5. Enumeration and Generics</font>\nA typical example of the application of enumerations in generics is 'Optional'. 'Optional' is an enumeration like that:\n```Swift\nenum Optional<T> {\n  case Some(T)\n  case None\n}\n```\nEnumeration can have multiple generic parameters, for example:\n```Swift\nenum Either<T1, T2> {\n  case Left(T1)\n  case Right(T2)\n}\n```\n\n#### <font size=3 color=gray>*Reference*</font>\n[1] <https://docs.swift.org/swift-book/LanguageGuide/Enumerations.html>\n[2] <https://www.jianshu.com/p/6f5f7a908301>   \n[3] <https://juejin.cn/post/7053223443046596644>\n\n\n\n\n\n","slug":"Swift/04. Enumerations/00. Summary of Enumerations","published":1,"updated":"2023-11-07T13:56:20.409Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr5i0033vu0mgrb14hn4","content":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<h4 id=\"1-General\"><a href=\"#1-General\" class=\"headerlink\" title=\" 1. General \"></a><font size=3 color=#4169E1> 1. General </font></h4><p>We define an enumeration in Objective-C&#x2F;C as follow:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef enum &#123;</span><br><span class=\"line\">    AFEncapsulationBoundaryPhase = 1,</span><br><span class=\"line\">    AFHeaderPhase                = 2,</span><br><span class=\"line\">    AFBodyPhase                  = 3,</span><br><span class=\"line\">    AFFinalBoundaryPhase         = 4,</span><br><span class=\"line\">&#125; AFHTTPBodyPartReadPhase;</span><br></pre></td></tr></table></figure>\n<p>Or like this:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef NS_ENUM(NSInteger, RoleItemType) &#123;</span><br><span class=\"line\">    RoleItemLabelType = 0,  </span><br><span class=\"line\">    RoleItemImageType = 1,   </span><br><span class=\"line\">    RoleItemMixType = 2,     </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>But In Swift we need to define an enumeration like this:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">CompassPoint</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> north</span><br><span class=\"line\">    <span class=\"keyword\">case</span> south</span><br><span class=\"line\">    <span class=\"keyword\">case</span> east</span><br><span class=\"line\">    <span class=\"keyword\">case</span> west</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Unlike in C&#x2F;OC, enumeration in Swift is a completely different thing. It is somewhat similar to struct. It is very flexible and has a wide range of uses. Enumeration in Swift has the following characteristics:  </p>\n<blockquote>\n<ul>\n<li>It is of value type.</li>\n<li>It can conform to protocols to provide standard functionality.</li>\n<li>It can be extended to expand their functionality beyond their original implementation.</li>\n<li>It can also define initializers to provide an initial case value and define common functions and properties(computed properties).   </li>\n<li>It supports recursion.</li>\n</ul>\n</blockquote>\n<p>Enumerations in Swift are first-class types in their own right. They adopt many features traditionally supported only by classes.</p>\n<h4 id=\"2-Associated-Values-and-Raw-Values\"><a href=\"#2-Associated-Values-and-Raw-Values\" class=\"headerlink\" title=\" 2. Associated Values and Raw Values \"></a><font size=3 color=#4169E1> 2. Associated Values and Raw Values </font></h4><p><strong><strong><font size=3 color=#F5F5F5>2.1 Associated Values</font></strong>  </strong></p>\n<p>Firstly, Associated Values can have different member types. for example:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> &#123;<span class=\"number\">10</span>,<span class=\"number\">0.8</span>,<span class=\"string\">&quot;Hello&quot;</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>Secondly, It always bases on Constant or variable. Thirdly, Associated Value will be set when you create a new constant or variable based on the enumeration member, and its value can be different each time you do so.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Student</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Name</span>(<span class=\"type\">String</span>)</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Mark</span>(<span class=\"type\">Int</span>,<span class=\"type\">Int</span>,<span class=\"type\">Int</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> studDetails <span class=\"operator\">=</span> <span class=\"type\">Student</span>.<span class=\"type\">Name</span>(<span class=\"string\">&quot;Runoob&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> studMarks <span class=\"operator\">=</span> <span class=\"type\">Student</span>.<span class=\"type\">Mark</span>(<span class=\"number\">98</span>,<span class=\"number\">97</span>,<span class=\"number\">95</span>)</span><br><span class=\"line\"><span class=\"keyword\">switch</span> studMarks &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> .<span class=\"type\">Name</span>(<span class=\"keyword\">let</span> studName):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Student Name: <span class=\"subst\">\\(studName)</span>。&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">case</span> .<span class=\"type\">Mark</span>(<span class=\"keyword\">let</span> <span class=\"type\">Mark1</span>, <span class=\"keyword\">let</span> <span class=\"type\">Mark2</span>, <span class=\"keyword\">let</span> <span class=\"type\">Mark3</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Student Mark: <span class=\"subst\">\\(Mark1)</span>,<span class=\"subst\">\\(Mark2)</span>,<span class=\"subst\">\\(Mark3)</span>。&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><strong><font size=3 color=#F5F5F5>2.2 Raw Values</font></strong>  </strong><br>Firstly, Raw Values have the same member types. for example:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> &#123;<span class=\"number\">10</span>,<span class=\"number\">35</span>,<span class=\"number\">50</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>It is pre-populated values and fixed.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">ASCIIControlCharacter</span>: <span class=\"title class_\">Character</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> tab <span class=\"operator\">=</span> <span class=\"string\">&quot;<span class=\"subst\">\\t</span>&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> lineFeed <span class=\"operator\">=</span> <span class=\"string\">&quot;<span class=\"subst\">\\n</span>&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> carriageReturn <span class=\"operator\">=</span> <span class=\"string\">&quot;<span class=\"subst\">\\r</span>&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>NOTE<br>Raw values are not the same as associated values. Raw values are set to prepopulate values when you first define the enumeration in your code, like the three ASCII codes above. The raw value for a particular enumeration case is always the same. Associated values are set when you create a new constant or variable based on one of the enumeration’s cases, and can be different each time you do so.</p>\n</blockquote>\n<p>Usually, An enumeration that has Declaration Type can be implicitly assigned and you do not need to write them all, for example:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Month</span>: <span class=\"title class_\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">January</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>, <span class=\"type\">February</span>, <span class=\"type\">March</span>, <span class=\"type\">April</span>, <span class=\"type\">May</span>, <span class=\"type\">June</span>, <span class=\"type\">July</span>, <span class=\"type\">August</span>, <span class=\"type\">September</span>, <span class=\"type\">October</span>, <span class=\"type\">November</span>, <span class=\"type\">December</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-Add-methods-and-properties-to-enumerations\"><a href=\"#3-Add-methods-and-properties-to-enumerations\" class=\"headerlink\" title=\" 3. Add methods and properties to enumerations \"></a><font size=3 color=#4169E1> 3. Add methods and properties to enumerations </font></h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Device</span> : <span class=\"title class_\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> iPhone4s</span><br><span class=\"line\">    <span class=\"keyword\">case</span> iPhone5</span><br><span class=\"line\">    <span class=\"keyword\">case</span> iPhone6</span><br><span class=\"line\">    <span class=\"keyword\">case</span> iPhone7</span><br><span class=\"line\">    <span class=\"keyword\">var</span> introduced: <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> <span class=\"keyword\">self</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone4s: <span class=\"keyword\">return</span> <span class=\"number\">2011</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone5: <span class=\"keyword\">return</span> <span class=\"number\">2012</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone6: <span class=\"keyword\">return</span> <span class=\"number\">2014</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone7: <span class=\"keyword\">return</span> <span class=\"number\">2016</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> device <span class=\"operator\">=</span> <span class=\"type\">Device</span>.iPhone5</span><br><span class=\"line\"><span class=\"built_in\">print</span>(device.introduced)</span><br><span class=\"line\"><span class=\"comment\">/*result:</span></span><br><span class=\"line\"><span class=\"comment\">2012</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<p>We try to extend this enumeration as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">Device</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">detailedIntroduced</span>()  &#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> <span class=\"keyword\">self</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone4s: <span class=\"built_in\">print</span>(<span class=\"string\">&quot;published in 2011&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone5: <span class=\"built_in\">print</span>(<span class=\"string\">&quot;published in 2012&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone6: <span class=\"built_in\">print</span>(<span class=\"string\">&quot;published in 2014&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone7: <span class=\"built_in\">print</span>(<span class=\"string\">&quot;published in 2016&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> device <span class=\"operator\">=</span> <span class=\"type\">Device</span>.iPhone5</span><br><span class=\"line\">device.detailedIntroduced()</span><br><span class=\"line\"><span class=\"comment\">/* result:</span></span><br><span class=\"line\"><span class=\"comment\">published in 2012</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-Enumeration-and-Protocol\"><a href=\"#4-Enumeration-and-Protocol\" class=\"headerlink\" title=\" 4. Enumeration and Protocol \"></a><font size=3 color=#4169E1> 4. Enumeration and Protocol </font></h4><p>Enumeration can conform to protocols to provide standard functionality.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Beverage</span>: <span class=\"title class_\">CaseIterable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> coffee, tea, juice</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> numberOfChoices <span class=\"operator\">=</span> <span class=\"type\">Beverage</span>.allCases.count</span><br><span class=\"line\"><span class=\"keyword\">for</span> beverage <span class=\"keyword\">in</span> <span class=\"type\">Beverage</span>.allCases &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(beverage)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-Enumeration-and-Generics\"><a href=\"#5-Enumeration-and-Generics\" class=\"headerlink\" title=\" 5. Enumeration and Generics\"></a><font size=3 color=#4169E1> 5. Enumeration and Generics</font></h4><p>A typical example of the application of enumerations in generics is ‘Optional’. ‘Optional’ is an enumeration like that:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Optional</span>&lt;<span class=\"title class_\">T</span>&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">Some</span>(<span class=\"type\">T</span>)</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">None</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Enumeration can have multiple generic parameters, for example:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Either</span>&lt;<span class=\"title class_\">T1</span>, <span class=\"title class_\">T2</span>&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">Left</span>(<span class=\"type\">T1</span>)</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">Right</span>(<span class=\"type\">T2</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://docs.swift.org/swift-book/LanguageGuide/Enumerations.html\">https://docs.swift.org/swift-book/LanguageGuide/Enumerations.html</a><br>[2] <a href=\"https://www.jianshu.com/p/6f5f7a908301\">https://www.jianshu.com/p/6f5f7a908301</a><br>[3] <a href=\"https://juejin.cn/post/7053223443046596644\">https://juejin.cn/post/7053223443046596644</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<h4 id=\"1-General\"><a href=\"#1-General\" class=\"headerlink\" title=\" 1. General \"></a><font size=3 color=#4169E1> 1. General </font></h4><p>We define an enumeration in Objective-C&#x2F;C as follow:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef enum &#123;</span><br><span class=\"line\">    AFEncapsulationBoundaryPhase = 1,</span><br><span class=\"line\">    AFHeaderPhase                = 2,</span><br><span class=\"line\">    AFBodyPhase                  = 3,</span><br><span class=\"line\">    AFFinalBoundaryPhase         = 4,</span><br><span class=\"line\">&#125; AFHTTPBodyPartReadPhase;</span><br></pre></td></tr></table></figure>\n<p>Or like this:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef NS_ENUM(NSInteger, RoleItemType) &#123;</span><br><span class=\"line\">    RoleItemLabelType = 0,  </span><br><span class=\"line\">    RoleItemImageType = 1,   </span><br><span class=\"line\">    RoleItemMixType = 2,     </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>But In Swift we need to define an enumeration like this:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">CompassPoint</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> north</span><br><span class=\"line\">    <span class=\"keyword\">case</span> south</span><br><span class=\"line\">    <span class=\"keyword\">case</span> east</span><br><span class=\"line\">    <span class=\"keyword\">case</span> west</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Unlike in C&#x2F;OC, enumeration in Swift is a completely different thing. It is somewhat similar to struct. It is very flexible and has a wide range of uses. Enumeration in Swift has the following characteristics:  </p>\n<blockquote>\n<ul>\n<li>It is of value type.</li>\n<li>It can conform to protocols to provide standard functionality.</li>\n<li>It can be extended to expand their functionality beyond their original implementation.</li>\n<li>It can also define initializers to provide an initial case value and define common functions and properties(computed properties).   </li>\n<li>It supports recursion.</li>\n</ul>\n</blockquote>\n<p>Enumerations in Swift are first-class types in their own right. They adopt many features traditionally supported only by classes.</p>\n<h4 id=\"2-Associated-Values-and-Raw-Values\"><a href=\"#2-Associated-Values-and-Raw-Values\" class=\"headerlink\" title=\" 2. Associated Values and Raw Values \"></a><font size=3 color=#4169E1> 2. Associated Values and Raw Values </font></h4><p><strong><strong><font size=3 color=#F5F5F5>2.1 Associated Values</font></strong>  </strong></p>\n<p>Firstly, Associated Values can have different member types. for example:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> &#123;<span class=\"number\">10</span>,<span class=\"number\">0.8</span>,<span class=\"string\">&quot;Hello&quot;</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>Secondly, It always bases on Constant or variable. Thirdly, Associated Value will be set when you create a new constant or variable based on the enumeration member, and its value can be different each time you do so.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Student</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Name</span>(<span class=\"type\">String</span>)</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Mark</span>(<span class=\"type\">Int</span>,<span class=\"type\">Int</span>,<span class=\"type\">Int</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> studDetails <span class=\"operator\">=</span> <span class=\"type\">Student</span>.<span class=\"type\">Name</span>(<span class=\"string\">&quot;Runoob&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> studMarks <span class=\"operator\">=</span> <span class=\"type\">Student</span>.<span class=\"type\">Mark</span>(<span class=\"number\">98</span>,<span class=\"number\">97</span>,<span class=\"number\">95</span>)</span><br><span class=\"line\"><span class=\"keyword\">switch</span> studMarks &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> .<span class=\"type\">Name</span>(<span class=\"keyword\">let</span> studName):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Student Name: <span class=\"subst\">\\(studName)</span>。&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">case</span> .<span class=\"type\">Mark</span>(<span class=\"keyword\">let</span> <span class=\"type\">Mark1</span>, <span class=\"keyword\">let</span> <span class=\"type\">Mark2</span>, <span class=\"keyword\">let</span> <span class=\"type\">Mark3</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Student Mark: <span class=\"subst\">\\(Mark1)</span>,<span class=\"subst\">\\(Mark2)</span>,<span class=\"subst\">\\(Mark3)</span>。&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><strong><font size=3 color=#F5F5F5>2.2 Raw Values</font></strong>  </strong><br>Firstly, Raw Values have the same member types. for example:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> &#123;<span class=\"number\">10</span>,<span class=\"number\">35</span>,<span class=\"number\">50</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>It is pre-populated values and fixed.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">ASCIIControlCharacter</span>: <span class=\"title class_\">Character</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> tab <span class=\"operator\">=</span> <span class=\"string\">&quot;<span class=\"subst\">\\t</span>&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> lineFeed <span class=\"operator\">=</span> <span class=\"string\">&quot;<span class=\"subst\">\\n</span>&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> carriageReturn <span class=\"operator\">=</span> <span class=\"string\">&quot;<span class=\"subst\">\\r</span>&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>NOTE<br>Raw values are not the same as associated values. Raw values are set to prepopulate values when you first define the enumeration in your code, like the three ASCII codes above. The raw value for a particular enumeration case is always the same. Associated values are set when you create a new constant or variable based on one of the enumeration’s cases, and can be different each time you do so.</p>\n</blockquote>\n<p>Usually, An enumeration that has Declaration Type can be implicitly assigned and you do not need to write them all, for example:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Month</span>: <span class=\"title class_\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">January</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>, <span class=\"type\">February</span>, <span class=\"type\">March</span>, <span class=\"type\">April</span>, <span class=\"type\">May</span>, <span class=\"type\">June</span>, <span class=\"type\">July</span>, <span class=\"type\">August</span>, <span class=\"type\">September</span>, <span class=\"type\">October</span>, <span class=\"type\">November</span>, <span class=\"type\">December</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-Add-methods-and-properties-to-enumerations\"><a href=\"#3-Add-methods-and-properties-to-enumerations\" class=\"headerlink\" title=\" 3. Add methods and properties to enumerations \"></a><font size=3 color=#4169E1> 3. Add methods and properties to enumerations </font></h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Device</span> : <span class=\"title class_\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> iPhone4s</span><br><span class=\"line\">    <span class=\"keyword\">case</span> iPhone5</span><br><span class=\"line\">    <span class=\"keyword\">case</span> iPhone6</span><br><span class=\"line\">    <span class=\"keyword\">case</span> iPhone7</span><br><span class=\"line\">    <span class=\"keyword\">var</span> introduced: <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> <span class=\"keyword\">self</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone4s: <span class=\"keyword\">return</span> <span class=\"number\">2011</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone5: <span class=\"keyword\">return</span> <span class=\"number\">2012</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone6: <span class=\"keyword\">return</span> <span class=\"number\">2014</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone7: <span class=\"keyword\">return</span> <span class=\"number\">2016</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> device <span class=\"operator\">=</span> <span class=\"type\">Device</span>.iPhone5</span><br><span class=\"line\"><span class=\"built_in\">print</span>(device.introduced)</span><br><span class=\"line\"><span class=\"comment\">/*result:</span></span><br><span class=\"line\"><span class=\"comment\">2012</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<p>We try to extend this enumeration as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">Device</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">detailedIntroduced</span>()  &#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> <span class=\"keyword\">self</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone4s: <span class=\"built_in\">print</span>(<span class=\"string\">&quot;published in 2011&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone5: <span class=\"built_in\">print</span>(<span class=\"string\">&quot;published in 2012&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone6: <span class=\"built_in\">print</span>(<span class=\"string\">&quot;published in 2014&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone7: <span class=\"built_in\">print</span>(<span class=\"string\">&quot;published in 2016&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> device <span class=\"operator\">=</span> <span class=\"type\">Device</span>.iPhone5</span><br><span class=\"line\">device.detailedIntroduced()</span><br><span class=\"line\"><span class=\"comment\">/* result:</span></span><br><span class=\"line\"><span class=\"comment\">published in 2012</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-Enumeration-and-Protocol\"><a href=\"#4-Enumeration-and-Protocol\" class=\"headerlink\" title=\" 4. Enumeration and Protocol \"></a><font size=3 color=#4169E1> 4. Enumeration and Protocol </font></h4><p>Enumeration can conform to protocols to provide standard functionality.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Beverage</span>: <span class=\"title class_\">CaseIterable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> coffee, tea, juice</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> numberOfChoices <span class=\"operator\">=</span> <span class=\"type\">Beverage</span>.allCases.count</span><br><span class=\"line\"><span class=\"keyword\">for</span> beverage <span class=\"keyword\">in</span> <span class=\"type\">Beverage</span>.allCases &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(beverage)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-Enumeration-and-Generics\"><a href=\"#5-Enumeration-and-Generics\" class=\"headerlink\" title=\" 5. Enumeration and Generics\"></a><font size=3 color=#4169E1> 5. Enumeration and Generics</font></h4><p>A typical example of the application of enumerations in generics is ‘Optional’. ‘Optional’ is an enumeration like that:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Optional</span>&lt;<span class=\"title class_\">T</span>&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">Some</span>(<span class=\"type\">T</span>)</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">None</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Enumeration can have multiple generic parameters, for example:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Either</span>&lt;<span class=\"title class_\">T1</span>, <span class=\"title class_\">T2</span>&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">Left</span>(<span class=\"type\">T1</span>)</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">Right</span>(<span class=\"type\">T2</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://docs.swift.org/swift-book/LanguageGuide/Enumerations.html\">https://docs.swift.org/swift-book/LanguageGuide/Enumerations.html</a><br>[2] <a href=\"https://www.jianshu.com/p/6f5f7a908301\">https://www.jianshu.com/p/6f5f7a908301</a><br>[3] <a href=\"https://juejin.cn/post/7053223443046596644\">https://juejin.cn/post/7053223443046596644</a></p>\n"},{"title":"01. Nested Enumeration","date":"2023-03-04T19:10:00.000Z","_content":"\n<font color=gray size=2>*It will take about 1 minutes to finish reading this article.*</font>\n\n <strong>Example Code</strong>\n\n```Swift\nenum Character {\n  enum Weapon {\n    case Bow\n    case Sword\n    case Lance\n    case Dagger\n  }\n  enum Helmet {\n    case Wooden\n    case Iron\n    case Diamond\n  }\n  case Thief\n  case Warrior\n  case Knight\n}\n//Access like this:\nlet character = Character.Thief\nlet weapon = Character.Weapon.Bow\nlet helmet = Character.Helmet.Iron\n```\nWhen accessing nested enumeration members, it is not necessary to enter such a long level every time to access them. You can use convenient methods to access them directly.\n\n```Swift\nfunc strength(of character: Character, \n\n              with weapon: Character.Weapon, \n\n              and armor: Character.Helmet) {\n\n}\nstrength(of: .thief, with: .bow, and: .wooden)\n\n```\n\n\n\n\n\n\n","source":"_posts/Swift/04. Enumerations/01. Nested Enumeration.md","raw":"---\ntitle: 01. Nested Enumeration\ndate: 2023-03-4 20:10:00\ncategories: \n- [Swift, 04. Enumerations]\ntags:\n- enumeration\n- nested\n---\n\n<font color=gray size=2>*It will take about 1 minutes to finish reading this article.*</font>\n\n <strong>Example Code</strong>\n\n```Swift\nenum Character {\n  enum Weapon {\n    case Bow\n    case Sword\n    case Lance\n    case Dagger\n  }\n  enum Helmet {\n    case Wooden\n    case Iron\n    case Diamond\n  }\n  case Thief\n  case Warrior\n  case Knight\n}\n//Access like this:\nlet character = Character.Thief\nlet weapon = Character.Weapon.Bow\nlet helmet = Character.Helmet.Iron\n```\nWhen accessing nested enumeration members, it is not necessary to enter such a long level every time to access them. You can use convenient methods to access them directly.\n\n```Swift\nfunc strength(of character: Character, \n\n              with weapon: Character.Weapon, \n\n              and armor: Character.Helmet) {\n\n}\nstrength(of: .thief, with: .bow, and: .wooden)\n\n```\n\n\n\n\n\n\n","slug":"Swift/04. Enumerations/01. Nested Enumeration","published":1,"updated":"2023-11-07T13:56:22.952Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr5k0037vu0m6ielaow5","content":"<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p>\n<p> <strong>Example Code</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Character</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">enum</span> <span class=\"title class_\">Weapon</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Bow</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Sword</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Lance</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Dagger</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">enum</span> <span class=\"title class_\">Helmet</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Wooden</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Iron</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Diamond</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">Thief</span></span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">Warrior</span></span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">Knight</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Access like this:</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> character <span class=\"operator\">=</span> <span class=\"type\">Character</span>.<span class=\"type\">Thief</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> weapon <span class=\"operator\">=</span> <span class=\"type\">Character</span>.<span class=\"type\">Weapon</span>.<span class=\"type\">Bow</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> helmet <span class=\"operator\">=</span> <span class=\"type\">Character</span>.<span class=\"type\">Helmet</span>.<span class=\"type\">Iron</span></span><br></pre></td></tr></table></figure>\n<p>When accessing nested enumeration members, it is not necessary to enter such a long level every time to access them. You can use convenient methods to access them directly.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">strength</span>(<span class=\"params\">of</span> <span class=\"params\">character</span>: <span class=\"type\">Character</span>, </span><br><span class=\"line\"></span><br><span class=\"line\">              <span class=\"params\">with</span> <span class=\"params\">weapon</span>: <span class=\"type\">Character</span>.<span class=\"type\">Weapon</span>, </span><br><span class=\"line\"></span><br><span class=\"line\">              <span class=\"params\">and</span> <span class=\"params\">armor</span>: <span class=\"type\">Character</span>.<span class=\"type\">Helmet</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">strength(of: .thief, with: .bow, and: .wooden)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p>\n<p> <strong>Example Code</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Character</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">enum</span> <span class=\"title class_\">Weapon</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Bow</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Sword</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Lance</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Dagger</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">enum</span> <span class=\"title class_\">Helmet</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Wooden</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Iron</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Diamond</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">Thief</span></span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">Warrior</span></span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">Knight</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Access like this:</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> character <span class=\"operator\">=</span> <span class=\"type\">Character</span>.<span class=\"type\">Thief</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> weapon <span class=\"operator\">=</span> <span class=\"type\">Character</span>.<span class=\"type\">Weapon</span>.<span class=\"type\">Bow</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> helmet <span class=\"operator\">=</span> <span class=\"type\">Character</span>.<span class=\"type\">Helmet</span>.<span class=\"type\">Iron</span></span><br></pre></td></tr></table></figure>\n<p>When accessing nested enumeration members, it is not necessary to enter such a long level every time to access them. You can use convenient methods to access them directly.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">strength</span>(<span class=\"params\">of</span> <span class=\"params\">character</span>: <span class=\"type\">Character</span>, </span><br><span class=\"line\"></span><br><span class=\"line\">              <span class=\"params\">with</span> <span class=\"params\">weapon</span>: <span class=\"type\">Character</span>.<span class=\"type\">Weapon</span>, </span><br><span class=\"line\"></span><br><span class=\"line\">              <span class=\"params\">and</span> <span class=\"params\">armor</span>: <span class=\"type\">Character</span>.<span class=\"type\">Helmet</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">strength(of: .thief, with: .bow, and: .wooden)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n"},{"title":"02. Inclue Enumeration","date":"2023-03-05T19:12:00.000Z","_content":"\n<font color=gray size=2>*It will take about 1 minutes to finish reading this article.*</font>\n\nWe can also embed enumerations in structures or classes.\n\n<strong>Example Code</strong>\n\n```Swift\nstruct MyCharacter {\n   enum CharacterType {\n        case thief\n        case warrior\n        case knight\n   }\n\n   enum Weapon {\n       case bow\n       case sword\n       case lance\n       case dagger\n   }\n\n   let type: CharacterType\n   let weapon: Weapon\n\n}\n```\nCall as follows:\n```Swift \nlet warrior = MyCharacter(type: .warrior, weapon: .sword)\n```\n\n\n\n\n","source":"_posts/Swift/04. Enumerations/02. Include Enumeration.md","raw":"---\ntitle: 02. Inclue Enumeration\ndate: 2023-03-5 20:12:00\ncategories: \n- [Swift, 04. Enumerations]\ntags:\n- enumeration\n---\n\n<font color=gray size=2>*It will take about 1 minutes to finish reading this article.*</font>\n\nWe can also embed enumerations in structures or classes.\n\n<strong>Example Code</strong>\n\n```Swift\nstruct MyCharacter {\n   enum CharacterType {\n        case thief\n        case warrior\n        case knight\n   }\n\n   enum Weapon {\n       case bow\n       case sword\n       case lance\n       case dagger\n   }\n\n   let type: CharacterType\n   let weapon: Weapon\n\n}\n```\nCall as follows:\n```Swift \nlet warrior = MyCharacter(type: .warrior, weapon: .sword)\n```\n\n\n\n\n","slug":"Swift/04. Enumerations/02. Include Enumeration","published":1,"updated":"2023-11-07T13:56:26.357Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr5l003avu0mdlyj6m5g","content":"<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p>\n<p>We can also embed enumerations in structures or classes.</p>\n<p><strong>Example Code</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">MyCharacter</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">enum</span> <span class=\"title class_\">CharacterType</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> thief</span><br><span class=\"line\">        <span class=\"keyword\">case</span> warrior</span><br><span class=\"line\">        <span class=\"keyword\">case</span> knight</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">enum</span> <span class=\"title class_\">Weapon</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">case</span> bow</span><br><span class=\"line\">       <span class=\"keyword\">case</span> sword</span><br><span class=\"line\">       <span class=\"keyword\">case</span> lance</span><br><span class=\"line\">       <span class=\"keyword\">case</span> dagger</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">let</span> type: <span class=\"type\">CharacterType</span></span><br><span class=\"line\">   <span class=\"keyword\">let</span> weapon: <span class=\"type\">Weapon</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Call as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> warrior <span class=\"operator\">=</span> <span class=\"type\">MyCharacter</span>(type: .warrior, weapon: .sword)</span><br></pre></td></tr></table></figure>\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p>\n<p>We can also embed enumerations in structures or classes.</p>\n<p><strong>Example Code</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">MyCharacter</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">enum</span> <span class=\"title class_\">CharacterType</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> thief</span><br><span class=\"line\">        <span class=\"keyword\">case</span> warrior</span><br><span class=\"line\">        <span class=\"keyword\">case</span> knight</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">enum</span> <span class=\"title class_\">Weapon</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">case</span> bow</span><br><span class=\"line\">       <span class=\"keyword\">case</span> sword</span><br><span class=\"line\">       <span class=\"keyword\">case</span> lance</span><br><span class=\"line\">       <span class=\"keyword\">case</span> dagger</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">let</span> type: <span class=\"type\">CharacterType</span></span><br><span class=\"line\">   <span class=\"keyword\">let</span> weapon: <span class=\"type\">Weapon</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Call as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> warrior <span class=\"operator\">=</span> <span class=\"type\">MyCharacter</span>(type: .warrior, weapon: .sword)</span><br></pre></td></tr></table></figure>\n\n\n\n\n"},{"title":"03. Recursive Enumeration","date":"2023-03-06T19:13:00.000Z","_content":"\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nEnumerations and cases can be marked as indirect, which means that their associated values are stored indirectly, which allows us to define recursive data structures.\n<strong>Example Code</strong>\n\n```Swift\nenum ArithmeticExpression {\n    case number(Int)\n    indirect case addition(ArithmeticExpression, ArithmeticExpression)\n    indirect case multiplication(ArithmeticExpression, ArithmeticExpression)\n}\n// or \nindirect enum ArithmeticExpression {\n    case number(Int)\n    case addition(ArithmeticExpression, ArithmeticExpression)\n    case multiplication(ArithmeticExpression, ArithmeticExpression)\n}\n```\nCall as follows:\n```Swift \nlet five = ArithmeticExpression.number(5)\nlet four = ArithmeticExpression.number(4)\nlet sum = ArithmeticExpression.addition(five, four)\nlet product = ArithmeticExpression.multiplication(sum, ArithmeticExpression.number(2))\n\nfunc evaluate(_ expression: ArithmeticExpression) -> Int {\n    switch expression {\n    case let .number(value):\n        return value\n    case let .addition(left, right):\n        return evaluate(left) + evaluate(right)\n    case let .multiplication(left, right):\n        return evaluate(left) * evaluate(right) // (5 + 4) * 2\n    }\n}\nprint(evaluate(product))\n\n// “18”\n```\n\n\n\n\n","source":"_posts/Swift/04. Enumerations/03. Recursive Enumeration.md","raw":"---\ntitle: 03. Recursive Enumeration\ndate: 2023-03-6 20:13:00\ncategories: \n- [Swift, 04. Enumerations]\ntags:\n- enumeration\n- recursive\n---\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nEnumerations and cases can be marked as indirect, which means that their associated values are stored indirectly, which allows us to define recursive data structures.\n<strong>Example Code</strong>\n\n```Swift\nenum ArithmeticExpression {\n    case number(Int)\n    indirect case addition(ArithmeticExpression, ArithmeticExpression)\n    indirect case multiplication(ArithmeticExpression, ArithmeticExpression)\n}\n// or \nindirect enum ArithmeticExpression {\n    case number(Int)\n    case addition(ArithmeticExpression, ArithmeticExpression)\n    case multiplication(ArithmeticExpression, ArithmeticExpression)\n}\n```\nCall as follows:\n```Swift \nlet five = ArithmeticExpression.number(5)\nlet four = ArithmeticExpression.number(4)\nlet sum = ArithmeticExpression.addition(five, four)\nlet product = ArithmeticExpression.multiplication(sum, ArithmeticExpression.number(2))\n\nfunc evaluate(_ expression: ArithmeticExpression) -> Int {\n    switch expression {\n    case let .number(value):\n        return value\n    case let .addition(left, right):\n        return evaluate(left) + evaluate(right)\n    case let .multiplication(left, right):\n        return evaluate(left) * evaluate(right) // (5 + 4) * 2\n    }\n}\nprint(evaluate(product))\n\n// “18”\n```\n\n\n\n\n","slug":"Swift/04. Enumerations/03. Recursive Enumeration","published":1,"updated":"2023-11-07T13:56:29.748Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr5l003dvu0m3wjmfbqq","content":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>Enumerations and cases can be marked as indirect, which means that their associated values are stored indirectly, which allows us to define recursive data structures.<br><strong>Example Code</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">ArithmeticExpression</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> number(<span class=\"type\">Int</span>)</span><br><span class=\"line\">    <span class=\"keyword\">indirect</span> <span class=\"keyword\">case</span> addition(<span class=\"type\">ArithmeticExpression</span>, <span class=\"type\">ArithmeticExpression</span>)</span><br><span class=\"line\">    <span class=\"keyword\">indirect</span> <span class=\"keyword\">case</span> multiplication(<span class=\"type\">ArithmeticExpression</span>, <span class=\"type\">ArithmeticExpression</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// or </span></span><br><span class=\"line\"><span class=\"keyword\">indirect</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">ArithmeticExpression</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> number(<span class=\"type\">Int</span>)</span><br><span class=\"line\">    <span class=\"keyword\">case</span> addition(<span class=\"type\">ArithmeticExpression</span>, <span class=\"type\">ArithmeticExpression</span>)</span><br><span class=\"line\">    <span class=\"keyword\">case</span> multiplication(<span class=\"type\">ArithmeticExpression</span>, <span class=\"type\">ArithmeticExpression</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Call as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> five <span class=\"operator\">=</span> <span class=\"type\">ArithmeticExpression</span>.number(<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> four <span class=\"operator\">=</span> <span class=\"type\">ArithmeticExpression</span>.number(<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> sum <span class=\"operator\">=</span> <span class=\"type\">ArithmeticExpression</span>.addition(five, four)</span><br><span class=\"line\"><span class=\"keyword\">let</span> product <span class=\"operator\">=</span> <span class=\"type\">ArithmeticExpression</span>.multiplication(sum, <span class=\"type\">ArithmeticExpression</span>.number(<span class=\"number\">2</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">evaluate</span>(<span class=\"keyword\">_</span> <span class=\"params\">expression</span>: <span class=\"type\">ArithmeticExpression</span>) -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> expression &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"keyword\">let</span> .number(value):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"keyword\">let</span> .addition(left, right):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> evaluate(left) <span class=\"operator\">+</span> evaluate(right)</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"keyword\">let</span> .multiplication(left, right):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> evaluate(left) <span class=\"operator\">*</span> evaluate(right) <span class=\"comment\">// (5 + 4) * 2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(evaluate(product))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// “18”</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>Enumerations and cases can be marked as indirect, which means that their associated values are stored indirectly, which allows us to define recursive data structures.<br><strong>Example Code</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">ArithmeticExpression</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> number(<span class=\"type\">Int</span>)</span><br><span class=\"line\">    <span class=\"keyword\">indirect</span> <span class=\"keyword\">case</span> addition(<span class=\"type\">ArithmeticExpression</span>, <span class=\"type\">ArithmeticExpression</span>)</span><br><span class=\"line\">    <span class=\"keyword\">indirect</span> <span class=\"keyword\">case</span> multiplication(<span class=\"type\">ArithmeticExpression</span>, <span class=\"type\">ArithmeticExpression</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// or </span></span><br><span class=\"line\"><span class=\"keyword\">indirect</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">ArithmeticExpression</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> number(<span class=\"type\">Int</span>)</span><br><span class=\"line\">    <span class=\"keyword\">case</span> addition(<span class=\"type\">ArithmeticExpression</span>, <span class=\"type\">ArithmeticExpression</span>)</span><br><span class=\"line\">    <span class=\"keyword\">case</span> multiplication(<span class=\"type\">ArithmeticExpression</span>, <span class=\"type\">ArithmeticExpression</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Call as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> five <span class=\"operator\">=</span> <span class=\"type\">ArithmeticExpression</span>.number(<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> four <span class=\"operator\">=</span> <span class=\"type\">ArithmeticExpression</span>.number(<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> sum <span class=\"operator\">=</span> <span class=\"type\">ArithmeticExpression</span>.addition(five, four)</span><br><span class=\"line\"><span class=\"keyword\">let</span> product <span class=\"operator\">=</span> <span class=\"type\">ArithmeticExpression</span>.multiplication(sum, <span class=\"type\">ArithmeticExpression</span>.number(<span class=\"number\">2</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">evaluate</span>(<span class=\"keyword\">_</span> <span class=\"params\">expression</span>: <span class=\"type\">ArithmeticExpression</span>) -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> expression &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"keyword\">let</span> .number(value):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"keyword\">let</span> .addition(left, right):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> evaluate(left) <span class=\"operator\">+</span> evaluate(right)</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"keyword\">let</span> .multiplication(left, right):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> evaluate(left) <span class=\"operator\">*</span> evaluate(right) <span class=\"comment\">// (5 + 4) * 2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(evaluate(product))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// “18”</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n"},{"title":"00. Summary of Protocols","date":"2023-03-07T19:00:00.000Z","_content":"\nProtocols in Swift have many special characters, So I summarize them here to make it clear.\n\n#### <font size=3 color=#4169E1>1. Property Requirements</font>\n\n<font size=2 color=#4169E1>1.1 'var' keyword always be with the properties.</font>      \nFirstly, Property requirements are always declared as variable properties, prefixed with the <strong>var</strong> keyword. Gettable and settable properties are indicated by writing { get set } after their type declaration, and gettable properties are indicated by writing { get }.   \n<font size=2 color=#4169E1>1.2 'mutating' keyword not be forgotten.</font>      \nSecondly, If you define a protocol instance method requirement that’s intended to mutate instances of any type that adopts the protocol, mark the method with the <strong>mutating</strong> keyword as part of the protocol’s definition. \n\n```Swift \nprotocol SomeProtocol {\n    var mustBeSettable: Int { get set }\n    var doesNotNeedToBeSettable: Int { get }\n    mutating func toggle()\n}\n```\n \n#### <font size=3 color=#4169E1>2. Extension and Protocol</font>\n<font size=2 color=#4169E1>2.1 Extend an existing type without accessing source code.</font>      \n1.1 Extend an existing type \nYou can extend an existing type to adopt and conform to a new protocol, even if you don’t have access to the source code for the existing type.\n```Swift\nprotocol TextRepresentable {\n    var textualDescription: String { get }\n}\nextension Dice: TextRepresentable {\n    var textualDescription: String {\n        return \"A \\(sides)-sided dice\"\n    }\n}\n```\n<font size=2 color=#4169E1>2.2 Declaring Protocol Adoption with an Extension.</font>     \nIf a type already conforms to all of the requirements of a protocol, but hasn’t yet stated that it adopts that protocol, you can make it adopt the protocol with an empty extension:\n```Swift\nstruct Hamster {\n    var name: String\n    var textualDescription: String {\n        return \"A hamster named \\(name)\"\n    }\n}\nextension Hamster: TextRepresentable {}\n``` \n<font size=2 color=#4169E1>2.3 Protocol Extensions.</font>    \nProtocols can be extended directly to provide method, initializer, subscript, and computed property implementations to conforming types. This allows you to define behavior on protocols themselves, rather than in each type’s individual conformance or in a global function.\n```Swift\nprotocol RandomNumberGenerator {\n    func random() -> Double\n}\n\nextension RandomNumberGenerator {\n    func randomBool() -> Bool {\n        return random() > 0.5\n    }\n}\n\n```\n<details>\n<summary>Example Code Details</summary>\n\n```Swift\nprotocol RandomNumberGenerator {\n    func random() -> Double\n}\n\nextension RandomNumberGenerator {\n    func randomBool() -> Bool {\n        return random() > 0.5\n    }\n}\n\nclass LinearGeneratorA: RandomNumberGenerator {\n    var lastRandom = 42.0\n    let m = 1000.0\n    let a = 3877.0\n    let c = 29573.0\n    func random() -> Double {\n        lastRandom = ((lastRandom * a + c)\n            .truncatingRemainder(dividingBy:m))\n        return lastRandom / m\n    }\n}\n\nclass LinearGeneratorB: RandomNumberGenerator {\n    var lastRandom = 42.0\n    let m = 2000.0\n    let a = 3877.0\n    let c = 29573.0\n    func random() -> Double {\n        lastRandom = ((lastRandom * a + c)\n            .truncatingRemainder(dividingBy:m))\n        return lastRandom / m\n    }\n}\n\n//Verify as follows:\nlet generatorA = LinearGeneratorA()\nprint(\"Here's a random number A: \\(generatorA.random())\")\nprint(\"And here's a random Boolean A: \\(generatorA.randomBool())\")\n\nlet generatorB = LinearGeneratorB()\nprint(\"Here's a random number B: \\(generatorB.random())\")\nprint(\"And here's a random Boolean B: \\(generatorB.randomBool())\")\n```\n</details>\nYou can use protocol extensions to provide a default implementation to any method or computed property requirement of that protocol.\n\n#### <font size=3 color=#4169E1> 3. Class-Only Protocols</font>\nYou can limit protocol adoption to class types (and not structures or enumerations) by adding the AnyObject protocol to a protocol’s inheritance list.\n```Swift\nprotocol Generator {\n}\nprotocol RandomNumberGenerator : LinearGeneratorA, Generator {\n    func random() -> Double\n}\nclass LinearGeneratorA: RandomNumberGenerator {\n    var lastRandom = 42.0\n    let m = 1000.0\n    let a = 3877.0\n    let c = 29573.0\n    func random() -> Double {\n        lastRandom = ((lastRandom * a + c)\n            .truncatingRemainder(dividingBy:m))\n        return lastRandom / m\n    }\n}\n```\nAnd It will be report errors if you try to do like as follows:\n```Swift\nclass LinearGeneratorB: RandomNumberGenerator {\n    var lastRandom = 42.0\n    let m = 2000.0\n    let a = 3877.0\n    let c = 29573.0\n    func random() -> Double {\n        lastRandom = ((lastRandom * a + c)\n            .truncatingRemainder(dividingBy:m))\n        return lastRandom / m\n    }\n}\n```\nBesides, we can not limit protocol adoption to structures or enumerations types like that:\n```Swift\nprotocol RandomNumberGenerator : LinearGeneratorA, Generator {\n    func random() -> Double\n}\nstruct LinearGeneratorA: RandomNumberGenerator {\n    var lastRandom = 42.0\n    let m = 1000.0\n    let a = 3877.0\n    let c = 29573.0\n    func random() -> Double {\n        lastRandom = ((lastRandom * a + c)\n            .truncatingRemainder(dividingBy:m))\n        return lastRandom / m\n    }\n} // this is wrong.\n```\n\n#### <font size=3 color=gray>*Reference*</font>\n[1] <https://docs.swift.org/swift-book/LanguageGuide/Protocols.html>  \n[2] <https://blog.csdn.net/Forever_wj/article/details/118767086>\n","source":"_posts/Swift/05. Protocols/00. Summary of Protocols.md","raw":"---\ntitle: 00. Summary of Protocols\ndate: 2023-03-7 20:00:00\ncategories: \n- [Swift, 05. Protocols]\ntags:\n- protocol\n---\n\nProtocols in Swift have many special characters, So I summarize them here to make it clear.\n\n#### <font size=3 color=#4169E1>1. Property Requirements</font>\n\n<font size=2 color=#4169E1>1.1 'var' keyword always be with the properties.</font>      \nFirstly, Property requirements are always declared as variable properties, prefixed with the <strong>var</strong> keyword. Gettable and settable properties are indicated by writing { get set } after their type declaration, and gettable properties are indicated by writing { get }.   \n<font size=2 color=#4169E1>1.2 'mutating' keyword not be forgotten.</font>      \nSecondly, If you define a protocol instance method requirement that’s intended to mutate instances of any type that adopts the protocol, mark the method with the <strong>mutating</strong> keyword as part of the protocol’s definition. \n\n```Swift \nprotocol SomeProtocol {\n    var mustBeSettable: Int { get set }\n    var doesNotNeedToBeSettable: Int { get }\n    mutating func toggle()\n}\n```\n \n#### <font size=3 color=#4169E1>2. Extension and Protocol</font>\n<font size=2 color=#4169E1>2.1 Extend an existing type without accessing source code.</font>      \n1.1 Extend an existing type \nYou can extend an existing type to adopt and conform to a new protocol, even if you don’t have access to the source code for the existing type.\n```Swift\nprotocol TextRepresentable {\n    var textualDescription: String { get }\n}\nextension Dice: TextRepresentable {\n    var textualDescription: String {\n        return \"A \\(sides)-sided dice\"\n    }\n}\n```\n<font size=2 color=#4169E1>2.2 Declaring Protocol Adoption with an Extension.</font>     \nIf a type already conforms to all of the requirements of a protocol, but hasn’t yet stated that it adopts that protocol, you can make it adopt the protocol with an empty extension:\n```Swift\nstruct Hamster {\n    var name: String\n    var textualDescription: String {\n        return \"A hamster named \\(name)\"\n    }\n}\nextension Hamster: TextRepresentable {}\n``` \n<font size=2 color=#4169E1>2.3 Protocol Extensions.</font>    \nProtocols can be extended directly to provide method, initializer, subscript, and computed property implementations to conforming types. This allows you to define behavior on protocols themselves, rather than in each type’s individual conformance or in a global function.\n```Swift\nprotocol RandomNumberGenerator {\n    func random() -> Double\n}\n\nextension RandomNumberGenerator {\n    func randomBool() -> Bool {\n        return random() > 0.5\n    }\n}\n\n```\n<details>\n<summary>Example Code Details</summary>\n\n```Swift\nprotocol RandomNumberGenerator {\n    func random() -> Double\n}\n\nextension RandomNumberGenerator {\n    func randomBool() -> Bool {\n        return random() > 0.5\n    }\n}\n\nclass LinearGeneratorA: RandomNumberGenerator {\n    var lastRandom = 42.0\n    let m = 1000.0\n    let a = 3877.0\n    let c = 29573.0\n    func random() -> Double {\n        lastRandom = ((lastRandom * a + c)\n            .truncatingRemainder(dividingBy:m))\n        return lastRandom / m\n    }\n}\n\nclass LinearGeneratorB: RandomNumberGenerator {\n    var lastRandom = 42.0\n    let m = 2000.0\n    let a = 3877.0\n    let c = 29573.0\n    func random() -> Double {\n        lastRandom = ((lastRandom * a + c)\n            .truncatingRemainder(dividingBy:m))\n        return lastRandom / m\n    }\n}\n\n//Verify as follows:\nlet generatorA = LinearGeneratorA()\nprint(\"Here's a random number A: \\(generatorA.random())\")\nprint(\"And here's a random Boolean A: \\(generatorA.randomBool())\")\n\nlet generatorB = LinearGeneratorB()\nprint(\"Here's a random number B: \\(generatorB.random())\")\nprint(\"And here's a random Boolean B: \\(generatorB.randomBool())\")\n```\n</details>\nYou can use protocol extensions to provide a default implementation to any method or computed property requirement of that protocol.\n\n#### <font size=3 color=#4169E1> 3. Class-Only Protocols</font>\nYou can limit protocol adoption to class types (and not structures or enumerations) by adding the AnyObject protocol to a protocol’s inheritance list.\n```Swift\nprotocol Generator {\n}\nprotocol RandomNumberGenerator : LinearGeneratorA, Generator {\n    func random() -> Double\n}\nclass LinearGeneratorA: RandomNumberGenerator {\n    var lastRandom = 42.0\n    let m = 1000.0\n    let a = 3877.0\n    let c = 29573.0\n    func random() -> Double {\n        lastRandom = ((lastRandom * a + c)\n            .truncatingRemainder(dividingBy:m))\n        return lastRandom / m\n    }\n}\n```\nAnd It will be report errors if you try to do like as follows:\n```Swift\nclass LinearGeneratorB: RandomNumberGenerator {\n    var lastRandom = 42.0\n    let m = 2000.0\n    let a = 3877.0\n    let c = 29573.0\n    func random() -> Double {\n        lastRandom = ((lastRandom * a + c)\n            .truncatingRemainder(dividingBy:m))\n        return lastRandom / m\n    }\n}\n```\nBesides, we can not limit protocol adoption to structures or enumerations types like that:\n```Swift\nprotocol RandomNumberGenerator : LinearGeneratorA, Generator {\n    func random() -> Double\n}\nstruct LinearGeneratorA: RandomNumberGenerator {\n    var lastRandom = 42.0\n    let m = 1000.0\n    let a = 3877.0\n    let c = 29573.0\n    func random() -> Double {\n        lastRandom = ((lastRandom * a + c)\n            .truncatingRemainder(dividingBy:m))\n        return lastRandom / m\n    }\n} // this is wrong.\n```\n\n#### <font size=3 color=gray>*Reference*</font>\n[1] <https://docs.swift.org/swift-book/LanguageGuide/Protocols.html>  \n[2] <https://blog.csdn.net/Forever_wj/article/details/118767086>\n","slug":"Swift/05. Protocols/00. Summary of Protocols","published":1,"updated":"2023-11-07T13:57:08.979Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr5m003gvu0mc3i83lzh","content":"<p>Protocols in Swift have many special characters, So I summarize them here to make it clear.</p>\n<h4 id=\"1-Property-Requirements\"><a href=\"#1-Property-Requirements\" class=\"headerlink\" title=\"1. Property Requirements\"></a><font size=3 color=#4169E1>1. Property Requirements</font></h4><p><font size=2 color=#4169E1>1.1 ‘var’ keyword always be with the properties.</font><br>Firstly, Property requirements are always declared as variable properties, prefixed with the <strong>var</strong> keyword. Gettable and settable properties are indicated by writing { get set } after their type declaration, and gettable properties are indicated by writing { get }.<br><font size=2 color=#4169E1>1.2 ‘mutating’ keyword not be forgotten.</font><br>Secondly, If you define a protocol instance method requirement that’s intended to mutate instances of any type that adopts the protocol, mark the method with the <strong>mutating</strong> keyword as part of the protocol’s definition. </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protocol</span> <span class=\"title class_\">SomeProtocol</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> mustBeSettable: <span class=\"type\">Int</span> &#123; <span class=\"keyword\">get</span> <span class=\"keyword\">set</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> doesNotNeedToBeSettable: <span class=\"type\">Int</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">toggle</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-Extension-and-Protocol\"><a href=\"#2-Extension-and-Protocol\" class=\"headerlink\" title=\"2. Extension and Protocol\"></a><font size=3 color=#4169E1>2. Extension and Protocol</font></h4><p><font size=2 color=#4169E1>2.1 Extend an existing type without accessing source code.</font><br>1.1 Extend an existing type<br>You can extend an existing type to adopt and conform to a new protocol, even if you don’t have access to the source code for the existing type.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protocol</span> <span class=\"title class_\">TextRepresentable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> textualDescription: <span class=\"type\">String</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">Dice</span>: <span class=\"title class_\">TextRepresentable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> textualDescription: <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;A <span class=\"subst\">\\(sides)</span>-sided dice&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><font size=2 color=#4169E1>2.2 Declaring Protocol Adoption with an Extension.</font><br>If a type already conforms to all of the requirements of a protocol, but hasn’t yet stated that it adopts that protocol, you can make it adopt the protocol with an empty extension:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Hamster</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> textualDescription: <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;A hamster named <span class=\"subst\">\\(name)</span>&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">Hamster</span>: <span class=\"title class_\">TextRepresentable</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p><font size=2 color=#4169E1>2.3 Protocol Extensions.</font><br>Protocols can be extended directly to provide method, initializer, subscript, and computed property implementations to conforming types. This allows you to define behavior on protocols themselves, rather than in each type’s individual conformance or in a global function.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protocol</span> <span class=\"title class_\">RandomNumberGenerator</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">random</span>() -&gt; <span class=\"type\">Double</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">RandomNumberGenerator</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">randomBool</span>() -&gt; <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> random() <span class=\"operator\">&gt;</span> <span class=\"number\">0.5</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<details>\n<summary>Example Code Details</summary>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protocol</span> <span class=\"title class_\">RandomNumberGenerator</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">random</span>() -&gt; <span class=\"type\">Double</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">RandomNumberGenerator</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">randomBool</span>() -&gt; <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> random() <span class=\"operator\">&gt;</span> <span class=\"number\">0.5</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LinearGeneratorA</span>: <span class=\"title class_\">RandomNumberGenerator</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> lastRandom <span class=\"operator\">=</span> <span class=\"number\">42.0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> m <span class=\"operator\">=</span> <span class=\"number\">1000.0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> a <span class=\"operator\">=</span> <span class=\"number\">3877.0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> c <span class=\"operator\">=</span> <span class=\"number\">29573.0</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">random</span>() -&gt; <span class=\"type\">Double</span> &#123;</span><br><span class=\"line\">        lastRandom <span class=\"operator\">=</span> ((lastRandom <span class=\"operator\">*</span> a <span class=\"operator\">+</span> c)</span><br><span class=\"line\">            .truncatingRemainder(dividingBy:m))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lastRandom <span class=\"operator\">/</span> m</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LinearGeneratorB</span>: <span class=\"title class_\">RandomNumberGenerator</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> lastRandom <span class=\"operator\">=</span> <span class=\"number\">42.0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> m <span class=\"operator\">=</span> <span class=\"number\">2000.0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> a <span class=\"operator\">=</span> <span class=\"number\">3877.0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> c <span class=\"operator\">=</span> <span class=\"number\">29573.0</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">random</span>() -&gt; <span class=\"type\">Double</span> &#123;</span><br><span class=\"line\">        lastRandom <span class=\"operator\">=</span> ((lastRandom <span class=\"operator\">*</span> a <span class=\"operator\">+</span> c)</span><br><span class=\"line\">            .truncatingRemainder(dividingBy:m))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lastRandom <span class=\"operator\">/</span> m</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Verify as follows:</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> generatorA <span class=\"operator\">=</span> <span class=\"type\">LinearGeneratorA</span>()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Here&#x27;s a random number A: <span class=\"subst\">\\(generatorA.random())</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;And here&#x27;s a random Boolean A: <span class=\"subst\">\\(generatorA.randomBool())</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> generatorB <span class=\"operator\">=</span> <span class=\"type\">LinearGeneratorB</span>()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Here&#x27;s a random number B: <span class=\"subst\">\\(generatorB.random())</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;And here&#x27;s a random Boolean B: <span class=\"subst\">\\(generatorB.randomBool())</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n</details>\nYou can use protocol extensions to provide a default implementation to any method or computed property requirement of that protocol.\n\n<h4 id=\"3-Class-Only-Protocols\"><a href=\"#3-Class-Only-Protocols\" class=\"headerlink\" title=\" 3. Class-Only Protocols\"></a><font size=3 color=#4169E1> 3. Class-Only Protocols</font></h4><p>You can limit protocol adoption to class types (and not structures or enumerations) by adding the AnyObject protocol to a protocol’s inheritance list.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protocol</span> <span class=\"title class_\">Generator</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">protocol</span> <span class=\"title class_\">RandomNumberGenerator</span> : <span class=\"title class_\">LinearGeneratorA</span>, <span class=\"title class_\">Generator</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">random</span>() -&gt; <span class=\"type\">Double</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LinearGeneratorA</span>: <span class=\"title class_\">RandomNumberGenerator</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> lastRandom <span class=\"operator\">=</span> <span class=\"number\">42.0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> m <span class=\"operator\">=</span> <span class=\"number\">1000.0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> a <span class=\"operator\">=</span> <span class=\"number\">3877.0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> c <span class=\"operator\">=</span> <span class=\"number\">29573.0</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">random</span>() -&gt; <span class=\"type\">Double</span> &#123;</span><br><span class=\"line\">        lastRandom <span class=\"operator\">=</span> ((lastRandom <span class=\"operator\">*</span> a <span class=\"operator\">+</span> c)</span><br><span class=\"line\">            .truncatingRemainder(dividingBy:m))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lastRandom <span class=\"operator\">/</span> m</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>And It will be report errors if you try to do like as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LinearGeneratorB</span>: <span class=\"title class_\">RandomNumberGenerator</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> lastRandom <span class=\"operator\">=</span> <span class=\"number\">42.0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> m <span class=\"operator\">=</span> <span class=\"number\">2000.0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> a <span class=\"operator\">=</span> <span class=\"number\">3877.0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> c <span class=\"operator\">=</span> <span class=\"number\">29573.0</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">random</span>() -&gt; <span class=\"type\">Double</span> &#123;</span><br><span class=\"line\">        lastRandom <span class=\"operator\">=</span> ((lastRandom <span class=\"operator\">*</span> a <span class=\"operator\">+</span> c)</span><br><span class=\"line\">            .truncatingRemainder(dividingBy:m))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lastRandom <span class=\"operator\">/</span> m</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Besides, we can not limit protocol adoption to structures or enumerations types like that:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protocol</span> <span class=\"title class_\">RandomNumberGenerator</span> : <span class=\"title class_\">LinearGeneratorA</span>, <span class=\"title class_\">Generator</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">random</span>() -&gt; <span class=\"type\">Double</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">LinearGeneratorA</span>: <span class=\"title class_\">RandomNumberGenerator</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> lastRandom <span class=\"operator\">=</span> <span class=\"number\">42.0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> m <span class=\"operator\">=</span> <span class=\"number\">1000.0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> a <span class=\"operator\">=</span> <span class=\"number\">3877.0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> c <span class=\"operator\">=</span> <span class=\"number\">29573.0</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">random</span>() -&gt; <span class=\"type\">Double</span> &#123;</span><br><span class=\"line\">        lastRandom <span class=\"operator\">=</span> ((lastRandom <span class=\"operator\">*</span> a <span class=\"operator\">+</span> c)</span><br><span class=\"line\">            .truncatingRemainder(dividingBy:m))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lastRandom <span class=\"operator\">/</span> m</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"comment\">// this is wrong.</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://docs.swift.org/swift-book/LanguageGuide/Protocols.html\">https://docs.swift.org/swift-book/LanguageGuide/Protocols.html</a><br>[2] <a href=\"https://blog.csdn.net/Forever_wj/article/details/118767086\">https://blog.csdn.net/Forever_wj/article/details/118767086</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Protocols in Swift have many special characters, So I summarize them here to make it clear.</p>\n<h4 id=\"1-Property-Requirements\"><a href=\"#1-Property-Requirements\" class=\"headerlink\" title=\"1. Property Requirements\"></a><font size=3 color=#4169E1>1. Property Requirements</font></h4><p><font size=2 color=#4169E1>1.1 ‘var’ keyword always be with the properties.</font><br>Firstly, Property requirements are always declared as variable properties, prefixed with the <strong>var</strong> keyword. Gettable and settable properties are indicated by writing { get set } after their type declaration, and gettable properties are indicated by writing { get }.<br><font size=2 color=#4169E1>1.2 ‘mutating’ keyword not be forgotten.</font><br>Secondly, If you define a protocol instance method requirement that’s intended to mutate instances of any type that adopts the protocol, mark the method with the <strong>mutating</strong> keyword as part of the protocol’s definition. </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protocol</span> <span class=\"title class_\">SomeProtocol</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> mustBeSettable: <span class=\"type\">Int</span> &#123; <span class=\"keyword\">get</span> <span class=\"keyword\">set</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> doesNotNeedToBeSettable: <span class=\"type\">Int</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">toggle</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-Extension-and-Protocol\"><a href=\"#2-Extension-and-Protocol\" class=\"headerlink\" title=\"2. Extension and Protocol\"></a><font size=3 color=#4169E1>2. Extension and Protocol</font></h4><p><font size=2 color=#4169E1>2.1 Extend an existing type without accessing source code.</font><br>1.1 Extend an existing type<br>You can extend an existing type to adopt and conform to a new protocol, even if you don’t have access to the source code for the existing type.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protocol</span> <span class=\"title class_\">TextRepresentable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> textualDescription: <span class=\"type\">String</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">Dice</span>: <span class=\"title class_\">TextRepresentable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> textualDescription: <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;A <span class=\"subst\">\\(sides)</span>-sided dice&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><font size=2 color=#4169E1>2.2 Declaring Protocol Adoption with an Extension.</font><br>If a type already conforms to all of the requirements of a protocol, but hasn’t yet stated that it adopts that protocol, you can make it adopt the protocol with an empty extension:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Hamster</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> textualDescription: <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;A hamster named <span class=\"subst\">\\(name)</span>&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">Hamster</span>: <span class=\"title class_\">TextRepresentable</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p><font size=2 color=#4169E1>2.3 Protocol Extensions.</font><br>Protocols can be extended directly to provide method, initializer, subscript, and computed property implementations to conforming types. This allows you to define behavior on protocols themselves, rather than in each type’s individual conformance or in a global function.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protocol</span> <span class=\"title class_\">RandomNumberGenerator</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">random</span>() -&gt; <span class=\"type\">Double</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">RandomNumberGenerator</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">randomBool</span>() -&gt; <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> random() <span class=\"operator\">&gt;</span> <span class=\"number\">0.5</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<details>\n<summary>Example Code Details</summary>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protocol</span> <span class=\"title class_\">RandomNumberGenerator</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">random</span>() -&gt; <span class=\"type\">Double</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">RandomNumberGenerator</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">randomBool</span>() -&gt; <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> random() <span class=\"operator\">&gt;</span> <span class=\"number\">0.5</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LinearGeneratorA</span>: <span class=\"title class_\">RandomNumberGenerator</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> lastRandom <span class=\"operator\">=</span> <span class=\"number\">42.0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> m <span class=\"operator\">=</span> <span class=\"number\">1000.0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> a <span class=\"operator\">=</span> <span class=\"number\">3877.0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> c <span class=\"operator\">=</span> <span class=\"number\">29573.0</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">random</span>() -&gt; <span class=\"type\">Double</span> &#123;</span><br><span class=\"line\">        lastRandom <span class=\"operator\">=</span> ((lastRandom <span class=\"operator\">*</span> a <span class=\"operator\">+</span> c)</span><br><span class=\"line\">            .truncatingRemainder(dividingBy:m))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lastRandom <span class=\"operator\">/</span> m</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LinearGeneratorB</span>: <span class=\"title class_\">RandomNumberGenerator</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> lastRandom <span class=\"operator\">=</span> <span class=\"number\">42.0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> m <span class=\"operator\">=</span> <span class=\"number\">2000.0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> a <span class=\"operator\">=</span> <span class=\"number\">3877.0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> c <span class=\"operator\">=</span> <span class=\"number\">29573.0</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">random</span>() -&gt; <span class=\"type\">Double</span> &#123;</span><br><span class=\"line\">        lastRandom <span class=\"operator\">=</span> ((lastRandom <span class=\"operator\">*</span> a <span class=\"operator\">+</span> c)</span><br><span class=\"line\">            .truncatingRemainder(dividingBy:m))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lastRandom <span class=\"operator\">/</span> m</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Verify as follows:</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> generatorA <span class=\"operator\">=</span> <span class=\"type\">LinearGeneratorA</span>()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Here&#x27;s a random number A: <span class=\"subst\">\\(generatorA.random())</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;And here&#x27;s a random Boolean A: <span class=\"subst\">\\(generatorA.randomBool())</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> generatorB <span class=\"operator\">=</span> <span class=\"type\">LinearGeneratorB</span>()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Here&#x27;s a random number B: <span class=\"subst\">\\(generatorB.random())</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;And here&#x27;s a random Boolean B: <span class=\"subst\">\\(generatorB.randomBool())</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n</details>\nYou can use protocol extensions to provide a default implementation to any method or computed property requirement of that protocol.\n\n<h4 id=\"3-Class-Only-Protocols\"><a href=\"#3-Class-Only-Protocols\" class=\"headerlink\" title=\" 3. Class-Only Protocols\"></a><font size=3 color=#4169E1> 3. Class-Only Protocols</font></h4><p>You can limit protocol adoption to class types (and not structures or enumerations) by adding the AnyObject protocol to a protocol’s inheritance list.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protocol</span> <span class=\"title class_\">Generator</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">protocol</span> <span class=\"title class_\">RandomNumberGenerator</span> : <span class=\"title class_\">LinearGeneratorA</span>, <span class=\"title class_\">Generator</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">random</span>() -&gt; <span class=\"type\">Double</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LinearGeneratorA</span>: <span class=\"title class_\">RandomNumberGenerator</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> lastRandom <span class=\"operator\">=</span> <span class=\"number\">42.0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> m <span class=\"operator\">=</span> <span class=\"number\">1000.0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> a <span class=\"operator\">=</span> <span class=\"number\">3877.0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> c <span class=\"operator\">=</span> <span class=\"number\">29573.0</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">random</span>() -&gt; <span class=\"type\">Double</span> &#123;</span><br><span class=\"line\">        lastRandom <span class=\"operator\">=</span> ((lastRandom <span class=\"operator\">*</span> a <span class=\"operator\">+</span> c)</span><br><span class=\"line\">            .truncatingRemainder(dividingBy:m))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lastRandom <span class=\"operator\">/</span> m</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>And It will be report errors if you try to do like as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LinearGeneratorB</span>: <span class=\"title class_\">RandomNumberGenerator</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> lastRandom <span class=\"operator\">=</span> <span class=\"number\">42.0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> m <span class=\"operator\">=</span> <span class=\"number\">2000.0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> a <span class=\"operator\">=</span> <span class=\"number\">3877.0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> c <span class=\"operator\">=</span> <span class=\"number\">29573.0</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">random</span>() -&gt; <span class=\"type\">Double</span> &#123;</span><br><span class=\"line\">        lastRandom <span class=\"operator\">=</span> ((lastRandom <span class=\"operator\">*</span> a <span class=\"operator\">+</span> c)</span><br><span class=\"line\">            .truncatingRemainder(dividingBy:m))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lastRandom <span class=\"operator\">/</span> m</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Besides, we can not limit protocol adoption to structures or enumerations types like that:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protocol</span> <span class=\"title class_\">RandomNumberGenerator</span> : <span class=\"title class_\">LinearGeneratorA</span>, <span class=\"title class_\">Generator</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">random</span>() -&gt; <span class=\"type\">Double</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">LinearGeneratorA</span>: <span class=\"title class_\">RandomNumberGenerator</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> lastRandom <span class=\"operator\">=</span> <span class=\"number\">42.0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> m <span class=\"operator\">=</span> <span class=\"number\">1000.0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> a <span class=\"operator\">=</span> <span class=\"number\">3877.0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> c <span class=\"operator\">=</span> <span class=\"number\">29573.0</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">random</span>() -&gt; <span class=\"type\">Double</span> &#123;</span><br><span class=\"line\">        lastRandom <span class=\"operator\">=</span> ((lastRandom <span class=\"operator\">*</span> a <span class=\"operator\">+</span> c)</span><br><span class=\"line\">            .truncatingRemainder(dividingBy:m))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lastRandom <span class=\"operator\">/</span> m</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"comment\">// this is wrong.</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://docs.swift.org/swift-book/LanguageGuide/Protocols.html\">https://docs.swift.org/swift-book/LanguageGuide/Protocols.html</a><br>[2] <a href=\"https://blog.csdn.net/Forever_wj/article/details/118767086\">https://blog.csdn.net/Forever_wj/article/details/118767086</a></p>\n"},{"title":"01. Summary of the keyword 'associatedtype'","date":"2023-03-08T19:00:00.000Z","_content":"\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\n\nIn Swift, When defining a protocol, we can’t use generics in a protocol as in a class. The following code is incorrect and will be reported as an error.\n\n<strong> Example Code </strong>\n```Swift \nprotocol Stackble <Element> { \n    mutating func push(_ element:Element)\n    mutating func pop()->Element\n    func top() ->Element\n    func size() ->Int\n}\n```\n  \nTherefore, associated types can solve this problem in Swift. It’s sometimes useful to declare one or more associated types as part of the protocol’s definition. An associated type gives a placeholder name to a type that’s used as part of the protocol. The actual type to use for that associated type isn’t specified until the protocol is adopted. Associated types are specified with the associatedtype keyword.\n\n<strong> Example Code </strong>\n```Swift \nprotocol Stackble {    \n    associatedtype Element \n    mutating func push(_ element:Element)\n    mutating func pop()->Element\n    func top() ->Element\n    func size() ->Int\n}\n```\nAssociated types can be applied in situations as follows:\n## **<font size=3 >1. Associated type be replaced by concrete type </font>**\n \n<strong> Example Code </strong>\n```Swift \nclass StringStack: Stackble {\n    //typealias String = Element\n    var elements = [String]()\n    func push(_ element:String){   \n        \n        elements.append(element)\n    }\n    func pop()->String{\n        elements.removeLast()\n    }\n    func top() ->String{\n        elements.last!\n    }\n    func size() ->Int{\n        elements.count\n    }\n}\n```\nThanks to Swift’s type inference, we don’t actually need to declare a concrete Element of String as part of the definition of StringStack. \n\n## **<font size=3 >2. Associated type be replaced by generic type </font>**\nIn a class with generics, generic types replace association types.\n\n<strong> Example Code </strong>\n```Swift \nclass Stack <E>: Stackble {\n    //typealias E = Element\n    var elements = [E]()  \n     func push(_ element:E) {   \n        elements.append(element)\n    }\n     func pop()->E{\n        elements.removeLast()\n    }\n    func top() ->E{\n        elements.last!\n    }\n    func size() ->Int{\n        elements.count\n    }\n}\n```\n\n## **<font size=3 >3. Points for Attention </font>**\n\nA protocol contains associated types cannot be used as return values and function parameters.\n```Swift \n protocol Runnable {\n    // without any associated types\n }\n class Person : Runnable {\n     \n }\n class Car : Runnable {\n     \n }\n func get(_ type:Int) -> Runnable {\n     if(0 == type) {\n         return Person()\n     }\n     return Car()\n }\n //call as follows:\nvar r1 = get(0) \nvar r2 = get(1)\nprint(\"r1=\",r1)\nprint(\"r2=\",r2)\n//everything is ok now\n ```\nThe following is the code of compilation error.\n```Swift\nprotocol Runnable {\n    associatedtype Speed\n    var speed : Speed {get}\n    \n}\nclass Person:Runnable {\n    var speed: Double = 0.0\n}\nclass Car:Runnable {\n    var speed: Double = 0.0\n}\n\n// this code will be reported an error\nfunc get (run: Runnable) {}\n// this code will be reported an error too.\nfunc get(_ type:Int) -> Runnable { \n    if(0 == type ){\n        return Person()\n    }\n    return Car()\n}\n```\nWe can fix this point just by a generic Type that conform to the protocol.\n```Swift \nfunc get<T:Runnable>(_ type:Int)-> T {  \n    if  0 == type {\n        let result = Person() as! T\n        return result\n    }\n    return Car() as! T\n}\n```\n\n#### <font size=3 color=gray>*Reference*</font>\n[1] <https://docs.swift.org/swift-book/LanguageGuide/Generics.html>\n[2] <https://blog.csdn.net/boildoctor/article/details/113116245>\n\n\n\n\n\n","source":"_posts/Swift/05. Protocols/01. Associatedtype.md","raw":"---\ntitle: 01. Summary of the keyword 'associatedtype'\ndate: 2023-03-8 20:00:00\ncategories: \n- [Swift, 05. Protocols]\ntags:\n- protocol\n- associatedtype\n---\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\n\nIn Swift, When defining a protocol, we can’t use generics in a protocol as in a class. The following code is incorrect and will be reported as an error.\n\n<strong> Example Code </strong>\n```Swift \nprotocol Stackble <Element> { \n    mutating func push(_ element:Element)\n    mutating func pop()->Element\n    func top() ->Element\n    func size() ->Int\n}\n```\n  \nTherefore, associated types can solve this problem in Swift. It’s sometimes useful to declare one or more associated types as part of the protocol’s definition. An associated type gives a placeholder name to a type that’s used as part of the protocol. The actual type to use for that associated type isn’t specified until the protocol is adopted. Associated types are specified with the associatedtype keyword.\n\n<strong> Example Code </strong>\n```Swift \nprotocol Stackble {    \n    associatedtype Element \n    mutating func push(_ element:Element)\n    mutating func pop()->Element\n    func top() ->Element\n    func size() ->Int\n}\n```\nAssociated types can be applied in situations as follows:\n## **<font size=3 >1. Associated type be replaced by concrete type </font>**\n \n<strong> Example Code </strong>\n```Swift \nclass StringStack: Stackble {\n    //typealias String = Element\n    var elements = [String]()\n    func push(_ element:String){   \n        \n        elements.append(element)\n    }\n    func pop()->String{\n        elements.removeLast()\n    }\n    func top() ->String{\n        elements.last!\n    }\n    func size() ->Int{\n        elements.count\n    }\n}\n```\nThanks to Swift’s type inference, we don’t actually need to declare a concrete Element of String as part of the definition of StringStack. \n\n## **<font size=3 >2. Associated type be replaced by generic type </font>**\nIn a class with generics, generic types replace association types.\n\n<strong> Example Code </strong>\n```Swift \nclass Stack <E>: Stackble {\n    //typealias E = Element\n    var elements = [E]()  \n     func push(_ element:E) {   \n        elements.append(element)\n    }\n     func pop()->E{\n        elements.removeLast()\n    }\n    func top() ->E{\n        elements.last!\n    }\n    func size() ->Int{\n        elements.count\n    }\n}\n```\n\n## **<font size=3 >3. Points for Attention </font>**\n\nA protocol contains associated types cannot be used as return values and function parameters.\n```Swift \n protocol Runnable {\n    // without any associated types\n }\n class Person : Runnable {\n     \n }\n class Car : Runnable {\n     \n }\n func get(_ type:Int) -> Runnable {\n     if(0 == type) {\n         return Person()\n     }\n     return Car()\n }\n //call as follows:\nvar r1 = get(0) \nvar r2 = get(1)\nprint(\"r1=\",r1)\nprint(\"r2=\",r2)\n//everything is ok now\n ```\nThe following is the code of compilation error.\n```Swift\nprotocol Runnable {\n    associatedtype Speed\n    var speed : Speed {get}\n    \n}\nclass Person:Runnable {\n    var speed: Double = 0.0\n}\nclass Car:Runnable {\n    var speed: Double = 0.0\n}\n\n// this code will be reported an error\nfunc get (run: Runnable) {}\n// this code will be reported an error too.\nfunc get(_ type:Int) -> Runnable { \n    if(0 == type ){\n        return Person()\n    }\n    return Car()\n}\n```\nWe can fix this point just by a generic Type that conform to the protocol.\n```Swift \nfunc get<T:Runnable>(_ type:Int)-> T {  \n    if  0 == type {\n        let result = Person() as! T\n        return result\n    }\n    return Car() as! T\n}\n```\n\n#### <font size=3 color=gray>*Reference*</font>\n[1] <https://docs.swift.org/swift-book/LanguageGuide/Generics.html>\n[2] <https://blog.csdn.net/boildoctor/article/details/113116245>\n\n\n\n\n\n","slug":"Swift/05. Protocols/01. Associatedtype","published":1,"updated":"2023-11-07T13:57:34.377Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr5n003jvu0m6snifm93","content":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>In Swift, When defining a protocol, we can’t use generics in a protocol as in a class. The following code is incorrect and will be reported as an error.</p>\n<p><strong> Example Code </strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protocol</span> <span class=\"title class_\">Stackble</span> &lt;<span class=\"title class_\">Element</span>&gt; &#123; </span><br><span class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">push</span>(<span class=\"keyword\">_</span> <span class=\"params\">element</span>:<span class=\"type\">Element</span>)</span><br><span class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">pop</span>()-&gt;<span class=\"type\">Element</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">top</span>() -&gt;<span class=\"type\">Element</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">size</span>() -&gt;<span class=\"type\">Int</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Therefore, associated types can solve this problem in Swift. It’s sometimes useful to declare one or more associated types as part of the protocol’s definition. An associated type gives a placeholder name to a type that’s used as part of the protocol. The actual type to use for that associated type isn’t specified until the protocol is adopted. Associated types are specified with the associatedtype keyword.</p>\n<p><strong> Example Code </strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protocol</span> <span class=\"title class_\">Stackble</span> &#123;    </span><br><span class=\"line\">    <span class=\"keyword\">associatedtype</span> <span class=\"type\">Element</span> </span><br><span class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">push</span>(<span class=\"keyword\">_</span> <span class=\"params\">element</span>:<span class=\"type\">Element</span>)</span><br><span class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">pop</span>()-&gt;<span class=\"type\">Element</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">top</span>() -&gt;<span class=\"type\">Element</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">size</span>() -&gt;<span class=\"type\">Int</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Associated types can be applied in situations as follows:</p>\n<h2 id=\"1-Associated-type-be-replaced-by-concrete-type\"><a href=\"#1-Associated-type-be-replaced-by-concrete-type\" class=\"headerlink\" title=\"1. Associated type be replaced by concrete type \"></a><strong><font size=3 >1. Associated type be replaced by concrete type </font></strong></h2><p><strong> Example Code </strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">StringStack</span>: <span class=\"title class_\">Stackble</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//typealias String = Element</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> elements <span class=\"operator\">=</span> [<span class=\"type\">String</span>]()</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">push</span>(<span class=\"keyword\">_</span> <span class=\"params\">element</span>:<span class=\"type\">String</span>)&#123;   </span><br><span class=\"line\">        </span><br><span class=\"line\">        elements.append(element)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">pop</span>()-&gt;<span class=\"type\">String</span>&#123;</span><br><span class=\"line\">        elements.removeLast()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">top</span>() -&gt;<span class=\"type\">String</span>&#123;</span><br><span class=\"line\">        elements.last<span class=\"operator\">!</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">size</span>() -&gt;<span class=\"type\">Int</span>&#123;</span><br><span class=\"line\">        elements.count</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Thanks to Swift’s type inference, we don’t actually need to declare a concrete Element of String as part of the definition of StringStack. </p>\n<h2 id=\"2-Associated-type-be-replaced-by-generic-type\"><a href=\"#2-Associated-type-be-replaced-by-generic-type\" class=\"headerlink\" title=\"2. Associated type be replaced by generic type \"></a><strong><font size=3 >2. Associated type be replaced by generic type </font></strong></h2><p>In a class with generics, generic types replace association types.</p>\n<p><strong> Example Code </strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Stack</span> &lt;<span class=\"title class_\">E</span>&gt;: <span class=\"title class_\">Stackble</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//typealias E = Element</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> elements <span class=\"operator\">=</span> [<span class=\"type\">E</span>]()  </span><br><span class=\"line\">     <span class=\"keyword\">func</span> <span class=\"title function_\">push</span>(<span class=\"keyword\">_</span> <span class=\"params\">element</span>:<span class=\"type\">E</span>) &#123;   </span><br><span class=\"line\">        elements.append(element)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     <span class=\"keyword\">func</span> <span class=\"title function_\">pop</span>()-&gt;<span class=\"type\">E</span>&#123;</span><br><span class=\"line\">        elements.removeLast()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">top</span>() -&gt;<span class=\"type\">E</span>&#123;</span><br><span class=\"line\">        elements.last<span class=\"operator\">!</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">size</span>() -&gt;<span class=\"type\">Int</span>&#123;</span><br><span class=\"line\">        elements.count</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-Points-for-Attention\"><a href=\"#3-Points-for-Attention\" class=\"headerlink\" title=\"3. Points for Attention \"></a><strong><font size=3 >3. Points for Attention </font></strong></h2><p>A protocol contains associated types cannot be used as return values and function parameters.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">protocol</span> <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// without any associated types</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> : <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\">     </span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">class</span> <span class=\"title class_\">Car</span> : <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\">     </span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">func</span> <span class=\"title function_\">get</span>(<span class=\"keyword\">_</span> <span class=\"params\">type</span>:<span class=\"type\">Int</span>) -&gt; <span class=\"type\">Runnable</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(<span class=\"number\">0</span> <span class=\"operator\">==</span> type) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"type\">Person</span>()</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"type\">Car</span>()</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"comment\">//call as follows:</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> r1 <span class=\"operator\">=</span> <span class=\"keyword\">get</span>(<span class=\"number\">0</span>) </span><br><span class=\"line\"><span class=\"keyword\">var</span> r2 <span class=\"operator\">=</span> <span class=\"keyword\">get</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;r1=&quot;</span>,r1)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;r2=&quot;</span>,r2)</span><br><span class=\"line\"><span class=\"comment\">//everything is ok now</span></span><br></pre></td></tr></table></figure>\n<p>The following is the code of compilation error.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protocol</span> <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">associatedtype</span> <span class=\"type\">Speed</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> speed : <span class=\"type\">Speed</span> &#123;<span class=\"keyword\">get</span>&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>:<span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> speed: <span class=\"type\">Double</span> <span class=\"operator\">=</span> <span class=\"number\">0.0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Car</span>:<span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> speed: <span class=\"type\">Double</span> <span class=\"operator\">=</span> <span class=\"number\">0.0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// this code will be reported an error</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">get</span> (<span class=\"params\">run</span>: <span class=\"type\">Runnable</span>) &#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">// this code will be reported an error too.</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">get</span>(<span class=\"keyword\">_</span> <span class=\"params\">type</span>:<span class=\"type\">Int</span>) -&gt; <span class=\"type\">Runnable</span> &#123; </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"number\">0</span> <span class=\"operator\">==</span> type )&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">Person</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Car</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>We can fix this point just by a generic Type that conform to the protocol.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">get</span>&lt;<span class=\"type\">T</span>:<span class=\"type\">Runnable</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">type</span>:<span class=\"type\">Int</span>)-&gt; <span class=\"type\">T</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span>  <span class=\"number\">0</span> <span class=\"operator\">==</span> type &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> result <span class=\"operator\">=</span> <span class=\"type\">Person</span>() <span class=\"keyword\">as!</span> <span class=\"type\">T</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Car</span>() <span class=\"keyword\">as!</span> <span class=\"type\">T</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://docs.swift.org/swift-book/LanguageGuide/Generics.html\">https://docs.swift.org/swift-book/LanguageGuide/Generics.html</a><br>[2] <a href=\"https://blog.csdn.net/boildoctor/article/details/113116245\">https://blog.csdn.net/boildoctor/article/details/113116245</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>In Swift, When defining a protocol, we can’t use generics in a protocol as in a class. The following code is incorrect and will be reported as an error.</p>\n<p><strong> Example Code </strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protocol</span> <span class=\"title class_\">Stackble</span> &lt;<span class=\"title class_\">Element</span>&gt; &#123; </span><br><span class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">push</span>(<span class=\"keyword\">_</span> <span class=\"params\">element</span>:<span class=\"type\">Element</span>)</span><br><span class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">pop</span>()-&gt;<span class=\"type\">Element</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">top</span>() -&gt;<span class=\"type\">Element</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">size</span>() -&gt;<span class=\"type\">Int</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Therefore, associated types can solve this problem in Swift. It’s sometimes useful to declare one or more associated types as part of the protocol’s definition. An associated type gives a placeholder name to a type that’s used as part of the protocol. The actual type to use for that associated type isn’t specified until the protocol is adopted. Associated types are specified with the associatedtype keyword.</p>\n<p><strong> Example Code </strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protocol</span> <span class=\"title class_\">Stackble</span> &#123;    </span><br><span class=\"line\">    <span class=\"keyword\">associatedtype</span> <span class=\"type\">Element</span> </span><br><span class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">push</span>(<span class=\"keyword\">_</span> <span class=\"params\">element</span>:<span class=\"type\">Element</span>)</span><br><span class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">pop</span>()-&gt;<span class=\"type\">Element</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">top</span>() -&gt;<span class=\"type\">Element</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">size</span>() -&gt;<span class=\"type\">Int</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Associated types can be applied in situations as follows:</p>\n<h2 id=\"1-Associated-type-be-replaced-by-concrete-type\"><a href=\"#1-Associated-type-be-replaced-by-concrete-type\" class=\"headerlink\" title=\"1. Associated type be replaced by concrete type \"></a><strong><font size=3 >1. Associated type be replaced by concrete type </font></strong></h2><p><strong> Example Code </strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">StringStack</span>: <span class=\"title class_\">Stackble</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//typealias String = Element</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> elements <span class=\"operator\">=</span> [<span class=\"type\">String</span>]()</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">push</span>(<span class=\"keyword\">_</span> <span class=\"params\">element</span>:<span class=\"type\">String</span>)&#123;   </span><br><span class=\"line\">        </span><br><span class=\"line\">        elements.append(element)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">pop</span>()-&gt;<span class=\"type\">String</span>&#123;</span><br><span class=\"line\">        elements.removeLast()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">top</span>() -&gt;<span class=\"type\">String</span>&#123;</span><br><span class=\"line\">        elements.last<span class=\"operator\">!</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">size</span>() -&gt;<span class=\"type\">Int</span>&#123;</span><br><span class=\"line\">        elements.count</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Thanks to Swift’s type inference, we don’t actually need to declare a concrete Element of String as part of the definition of StringStack. </p>\n<h2 id=\"2-Associated-type-be-replaced-by-generic-type\"><a href=\"#2-Associated-type-be-replaced-by-generic-type\" class=\"headerlink\" title=\"2. Associated type be replaced by generic type \"></a><strong><font size=3 >2. Associated type be replaced by generic type </font></strong></h2><p>In a class with generics, generic types replace association types.</p>\n<p><strong> Example Code </strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Stack</span> &lt;<span class=\"title class_\">E</span>&gt;: <span class=\"title class_\">Stackble</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//typealias E = Element</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> elements <span class=\"operator\">=</span> [<span class=\"type\">E</span>]()  </span><br><span class=\"line\">     <span class=\"keyword\">func</span> <span class=\"title function_\">push</span>(<span class=\"keyword\">_</span> <span class=\"params\">element</span>:<span class=\"type\">E</span>) &#123;   </span><br><span class=\"line\">        elements.append(element)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     <span class=\"keyword\">func</span> <span class=\"title function_\">pop</span>()-&gt;<span class=\"type\">E</span>&#123;</span><br><span class=\"line\">        elements.removeLast()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">top</span>() -&gt;<span class=\"type\">E</span>&#123;</span><br><span class=\"line\">        elements.last<span class=\"operator\">!</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">size</span>() -&gt;<span class=\"type\">Int</span>&#123;</span><br><span class=\"line\">        elements.count</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-Points-for-Attention\"><a href=\"#3-Points-for-Attention\" class=\"headerlink\" title=\"3. Points for Attention \"></a><strong><font size=3 >3. Points for Attention </font></strong></h2><p>A protocol contains associated types cannot be used as return values and function parameters.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">protocol</span> <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// without any associated types</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> : <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\">     </span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">class</span> <span class=\"title class_\">Car</span> : <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\">     </span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">func</span> <span class=\"title function_\">get</span>(<span class=\"keyword\">_</span> <span class=\"params\">type</span>:<span class=\"type\">Int</span>) -&gt; <span class=\"type\">Runnable</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(<span class=\"number\">0</span> <span class=\"operator\">==</span> type) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"type\">Person</span>()</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"type\">Car</span>()</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"comment\">//call as follows:</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> r1 <span class=\"operator\">=</span> <span class=\"keyword\">get</span>(<span class=\"number\">0</span>) </span><br><span class=\"line\"><span class=\"keyword\">var</span> r2 <span class=\"operator\">=</span> <span class=\"keyword\">get</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;r1=&quot;</span>,r1)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;r2=&quot;</span>,r2)</span><br><span class=\"line\"><span class=\"comment\">//everything is ok now</span></span><br></pre></td></tr></table></figure>\n<p>The following is the code of compilation error.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protocol</span> <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">associatedtype</span> <span class=\"type\">Speed</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> speed : <span class=\"type\">Speed</span> &#123;<span class=\"keyword\">get</span>&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>:<span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> speed: <span class=\"type\">Double</span> <span class=\"operator\">=</span> <span class=\"number\">0.0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Car</span>:<span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> speed: <span class=\"type\">Double</span> <span class=\"operator\">=</span> <span class=\"number\">0.0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// this code will be reported an error</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">get</span> (<span class=\"params\">run</span>: <span class=\"type\">Runnable</span>) &#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">// this code will be reported an error too.</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">get</span>(<span class=\"keyword\">_</span> <span class=\"params\">type</span>:<span class=\"type\">Int</span>) -&gt; <span class=\"type\">Runnable</span> &#123; </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"number\">0</span> <span class=\"operator\">==</span> type )&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">Person</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Car</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>We can fix this point just by a generic Type that conform to the protocol.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">get</span>&lt;<span class=\"type\">T</span>:<span class=\"type\">Runnable</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">type</span>:<span class=\"type\">Int</span>)-&gt; <span class=\"type\">T</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span>  <span class=\"number\">0</span> <span class=\"operator\">==</span> type &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> result <span class=\"operator\">=</span> <span class=\"type\">Person</span>() <span class=\"keyword\">as!</span> <span class=\"type\">T</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Car</span>() <span class=\"keyword\">as!</span> <span class=\"type\">T</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://docs.swift.org/swift-book/LanguageGuide/Generics.html\">https://docs.swift.org/swift-book/LanguageGuide/Generics.html</a><br>[2] <a href=\"https://blog.csdn.net/boildoctor/article/details/113116245\">https://blog.csdn.net/boildoctor/article/details/113116245</a></p>\n"},{"title":"00. Common higher-order functions","date":"2023-11-11T19:00:00.000Z","_content":"\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nThis zip function is not used to compress files. It is used to merge the elements of two sequences one by one to generate a new sequence.\n\n#### <font size=5 color=#4169E1>1. map</font> \n\nMap is a common higher-order function that maps each element in a collection to another collection and then returns a new collection.\n\n```Swift\n\nlet a = [1, 2, 3, 4, 5]\nlet b = a.map { $0 * 2 }\nprint(b) // [2, 4, 6, 8, 10]\n\n```\n\nIn this example, we multiply each element in the original array by 2 and store the result in a new array.\n\nWe can customize its custom implementation and write it into the Array extension:\n\n```Swift\nfunc customMap<T>(_ tansform:(Element)->T) -> [T] {\n    var result: [T] = []\n    for x in self {\n        result.append(tansform(x))\n    }\n    return result\n}\n```\n\nThe call is as follows:\n\n```Swift\nlet a = [1, 2, 3, 4, 5]\nlet b = a.customMap { $0 * 2 }\nprint(b) // [2, 4, 6, 8, 10]\n\n```\n\n#### <font size=5 color=#4169E1>2. reduce</font> \n\nreduce is another common higher-order function that combines all elements in a collection into a single value. Its usage is as follows:\n\n```Swift\nlet a = [1, 2, 3, 4, 5]\nlet b = a.reduce(0) { $0 + $1 }\nprint(b) // 15\n\n```\nIn this example, we add all the elements in the original array and store the result in a variable.\n\nThe custom implementation is as follows:\n\n```Swift\n\nfunc customReduce<T>(_ initial:T, _ combine: (T, Element)->T) -> T {\n    var result = initial\n    for x in self {\n        result = combine(result, x)\n    }\n    return result\n}\n\n```\nThe call is as follows:\n\n```Swift\nlet a = [1, 2, 3, 4, 5]\nlet b = b.customReduce(0, +)\nprint(b) // 15\n\n```\n\n#### <font size=5 color=#4169E1>3. filter</font> \n\nFilter is a common high-order function that can filter out elements that meet conditions from a set and then return a new set. Its usage is as follows:\n\n```Swift\nlet a = [1, 2, 3, 4, 5]\nlet b = a.filter { $0 % 2 == 0 }\nprint(b) // [2, 4]\n\n```\n\nIn this example, we filter out all even elements in the original array and store the results in a new array.\n\nThe custom implementation is as follows:\n\n```Swift\nfunc customFilter(_ isInclude:(Element) -> Bool) ->[Element] {\n    var result: [Element] = []\n    for x in self where isInclude(x) {\n        result.append(x)\n    }\n    return result\n}\n\n```\n\nThe call is as follows:\n\n```Swift\nlet a = [1, 2, 3, 4, 5]\nlet b = a.customFilter { $0 % 2 == 0 }\nprint(b) // [2, 4]\n\n```\n\n#### <font size=5 color=#4169E1>4. flatMap</font> \n\nflatMap is a common higher-order function that flattens a nested collection into a single collection. Its usage is as follows:\n\n```Swift\nlet a = [[1, 2], [3, 4], [5, 6]]\nlet b = a.flatMap { $0 }\nprint(b) // [1, 2, 3, 4, 5, 6]\n\n```\n\nIn this example, we flatten an array of three arrays into a single array and store the result in a new array.\n\nIts custom implementation is as follows:\n\n```Swift\nfunc customFlatMap<T>(_ transform: (Element) -> [T]) -> [T] {\n    var tmp: [T] = []\n    for value in self {\n       tmp.append(contentsOf: transform(value))\n    }\n    return tmp\n}\n\n```\n\n```Swift\nlet a = [\"a\", \"b\", \"c\", \"d\"]\nlet b = [\"A\", \"B\", \"C\", \"D\"]\nlet c = [a, b].flatMap({ $0 })\nlet d = [a, b].customFlatMap({ $0 })\nprint (c) //[\"a\", \"b\", \"c\", \"d\", \"A\", \"B\", \"C\", \"D\"]\nprint (d) //[\"a\", \"b\", \"c\", \"d\", \"A\", \"B\", \"C\", \"D\"]\n```","source":"_posts/Swift/06. Collections/00. Common higher-order functions.md","raw":"---\ntitle: 00. Common higher-order functions\ndate: 2023-11-11 20:00:00\ncategories: \n- [Swift, 06. Collections]\ntags:\n- map\n- reduce\n- filter\n- flatMap\n---\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nThis zip function is not used to compress files. It is used to merge the elements of two sequences one by one to generate a new sequence.\n\n#### <font size=5 color=#4169E1>1. map</font> \n\nMap is a common higher-order function that maps each element in a collection to another collection and then returns a new collection.\n\n```Swift\n\nlet a = [1, 2, 3, 4, 5]\nlet b = a.map { $0 * 2 }\nprint(b) // [2, 4, 6, 8, 10]\n\n```\n\nIn this example, we multiply each element in the original array by 2 and store the result in a new array.\n\nWe can customize its custom implementation and write it into the Array extension:\n\n```Swift\nfunc customMap<T>(_ tansform:(Element)->T) -> [T] {\n    var result: [T] = []\n    for x in self {\n        result.append(tansform(x))\n    }\n    return result\n}\n```\n\nThe call is as follows:\n\n```Swift\nlet a = [1, 2, 3, 4, 5]\nlet b = a.customMap { $0 * 2 }\nprint(b) // [2, 4, 6, 8, 10]\n\n```\n\n#### <font size=5 color=#4169E1>2. reduce</font> \n\nreduce is another common higher-order function that combines all elements in a collection into a single value. Its usage is as follows:\n\n```Swift\nlet a = [1, 2, 3, 4, 5]\nlet b = a.reduce(0) { $0 + $1 }\nprint(b) // 15\n\n```\nIn this example, we add all the elements in the original array and store the result in a variable.\n\nThe custom implementation is as follows:\n\n```Swift\n\nfunc customReduce<T>(_ initial:T, _ combine: (T, Element)->T) -> T {\n    var result = initial\n    for x in self {\n        result = combine(result, x)\n    }\n    return result\n}\n\n```\nThe call is as follows:\n\n```Swift\nlet a = [1, 2, 3, 4, 5]\nlet b = b.customReduce(0, +)\nprint(b) // 15\n\n```\n\n#### <font size=5 color=#4169E1>3. filter</font> \n\nFilter is a common high-order function that can filter out elements that meet conditions from a set and then return a new set. Its usage is as follows:\n\n```Swift\nlet a = [1, 2, 3, 4, 5]\nlet b = a.filter { $0 % 2 == 0 }\nprint(b) // [2, 4]\n\n```\n\nIn this example, we filter out all even elements in the original array and store the results in a new array.\n\nThe custom implementation is as follows:\n\n```Swift\nfunc customFilter(_ isInclude:(Element) -> Bool) ->[Element] {\n    var result: [Element] = []\n    for x in self where isInclude(x) {\n        result.append(x)\n    }\n    return result\n}\n\n```\n\nThe call is as follows:\n\n```Swift\nlet a = [1, 2, 3, 4, 5]\nlet b = a.customFilter { $0 % 2 == 0 }\nprint(b) // [2, 4]\n\n```\n\n#### <font size=5 color=#4169E1>4. flatMap</font> \n\nflatMap is a common higher-order function that flattens a nested collection into a single collection. Its usage is as follows:\n\n```Swift\nlet a = [[1, 2], [3, 4], [5, 6]]\nlet b = a.flatMap { $0 }\nprint(b) // [1, 2, 3, 4, 5, 6]\n\n```\n\nIn this example, we flatten an array of three arrays into a single array and store the result in a new array.\n\nIts custom implementation is as follows:\n\n```Swift\nfunc customFlatMap<T>(_ transform: (Element) -> [T]) -> [T] {\n    var tmp: [T] = []\n    for value in self {\n       tmp.append(contentsOf: transform(value))\n    }\n    return tmp\n}\n\n```\n\n```Swift\nlet a = [\"a\", \"b\", \"c\", \"d\"]\nlet b = [\"A\", \"B\", \"C\", \"D\"]\nlet c = [a, b].flatMap({ $0 })\nlet d = [a, b].customFlatMap({ $0 })\nprint (c) //[\"a\", \"b\", \"c\", \"d\", \"A\", \"B\", \"C\", \"D\"]\nprint (d) //[\"a\", \"b\", \"c\", \"d\", \"A\", \"B\", \"C\", \"D\"]\n```","slug":"Swift/06. Collections/00. Common higher-order functions","published":1,"updated":"2023-11-07T17:31:45.905Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr5o003nvu0m5xf946uu","content":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>This zip function is not used to compress files. It is used to merge the elements of two sequences one by one to generate a new sequence.</p>\n<h4 id=\"1-map\"><a href=\"#1-map\" class=\"headerlink\" title=\"1. map\"></a><font size=5 color=#4169E1>1. map</font></h4><p>Map is a common higher-order function that maps each element in a collection to another collection and then returns a new collection.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a <span class=\"operator\">=</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> b <span class=\"operator\">=</span> a.map &#123; <span class=\"variable\">$0</span> <span class=\"operator\">*</span> <span class=\"number\">2</span> &#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(b) <span class=\"comment\">// [2, 4, 6, 8, 10]</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>In this example, we multiply each element in the original array by 2 and store the result in a new array.</p>\n<p>We can customize its custom implementation and write it into the Array extension:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">customMap</span>&lt;<span class=\"type\">T</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">tansform</span>:(<span class=\"type\">Element</span>)-&gt;<span class=\"type\">T</span>) -&gt; [<span class=\"type\">T</span>] &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result: [<span class=\"type\">T</span>] <span class=\"operator\">=</span> []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"keyword\">self</span> &#123;</span><br><span class=\"line\">        result.append(tansform(x))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>The call is as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a <span class=\"operator\">=</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> b <span class=\"operator\">=</span> a.customMap &#123; <span class=\"variable\">$0</span> <span class=\"operator\">*</span> <span class=\"number\">2</span> &#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(b) <span class=\"comment\">// [2, 4, 6, 8, 10]</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-reduce\"><a href=\"#2-reduce\" class=\"headerlink\" title=\"2. reduce\"></a><font size=5 color=#4169E1>2. reduce</font></h4><p>reduce is another common higher-order function that combines all elements in a collection into a single value. Its usage is as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a <span class=\"operator\">=</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> b <span class=\"operator\">=</span> a.reduce(<span class=\"number\">0</span>) &#123; <span class=\"variable\">$0</span> <span class=\"operator\">+</span> <span class=\"variable\">$1</span> &#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(b) <span class=\"comment\">// 15</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>In this example, we add all the elements in the original array and store the result in a variable.</p>\n<p>The custom implementation is as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">customReduce</span>&lt;<span class=\"type\">T</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">initial</span>:<span class=\"type\">T</span>, <span class=\"keyword\">_</span> <span class=\"params\">combine</span>: (<span class=\"type\">T</span>, <span class=\"type\">Element</span>)-&gt;<span class=\"type\">T</span>) -&gt; <span class=\"type\">T</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result <span class=\"operator\">=</span> initial</span><br><span class=\"line\">    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"keyword\">self</span> &#123;</span><br><span class=\"line\">        result <span class=\"operator\">=</span> combine(result, x)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>The call is as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a <span class=\"operator\">=</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> b <span class=\"operator\">=</span> b.customReduce(<span class=\"number\">0</span>, <span class=\"operator\">+</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(b) <span class=\"comment\">// 15</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-filter\"><a href=\"#3-filter\" class=\"headerlink\" title=\"3. filter\"></a><font size=5 color=#4169E1>3. filter</font></h4><p>Filter is a common high-order function that can filter out elements that meet conditions from a set and then return a new set. Its usage is as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a <span class=\"operator\">=</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> b <span class=\"operator\">=</span> a.filter &#123; <span class=\"variable\">$0</span> <span class=\"operator\">%</span> <span class=\"number\">2</span> <span class=\"operator\">==</span> <span class=\"number\">0</span> &#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(b) <span class=\"comment\">// [2, 4]</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>In this example, we filter out all even elements in the original array and store the results in a new array.</p>\n<p>The custom implementation is as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">customFilter</span>(<span class=\"keyword\">_</span> <span class=\"params\">isInclude</span>:(<span class=\"type\">Element</span>) -&gt; <span class=\"type\">Bool</span>) -&gt;[<span class=\"type\">Element</span>] &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result: [<span class=\"type\">Element</span>] <span class=\"operator\">=</span> []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"keyword\">self</span> <span class=\"keyword\">where</span> isInclude(x) &#123;</span><br><span class=\"line\">        result.append(x)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>The call is as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a <span class=\"operator\">=</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> b <span class=\"operator\">=</span> a.customFilter &#123; <span class=\"variable\">$0</span> <span class=\"operator\">%</span> <span class=\"number\">2</span> <span class=\"operator\">==</span> <span class=\"number\">0</span> &#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(b) <span class=\"comment\">// [2, 4]</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-flatMap\"><a href=\"#4-flatMap\" class=\"headerlink\" title=\"4. flatMap\"></a><font size=5 color=#4169E1>4. flatMap</font></h4><p>flatMap is a common higher-order function that flattens a nested collection into a single collection. Its usage is as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a <span class=\"operator\">=</span> [[<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>], [<span class=\"number\">5</span>, <span class=\"number\">6</span>]]</span><br><span class=\"line\"><span class=\"keyword\">let</span> b <span class=\"operator\">=</span> a.flatMap &#123; <span class=\"variable\">$0</span> &#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(b) <span class=\"comment\">// [1, 2, 3, 4, 5, 6]</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>In this example, we flatten an array of three arrays into a single array and store the result in a new array.</p>\n<p>Its custom implementation is as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">customFlatMap</span>&lt;<span class=\"type\">T</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">transform</span>: (<span class=\"type\">Element</span>) -&gt; [<span class=\"type\">T</span>]) -&gt; [<span class=\"type\">T</span>] &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tmp: [<span class=\"type\">T</span>] <span class=\"operator\">=</span> []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> value <span class=\"keyword\">in</span> <span class=\"keyword\">self</span> &#123;</span><br><span class=\"line\">       tmp.append(contentsOf: transform(value))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tmp</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a <span class=\"operator\">=</span> [<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>, <span class=\"string\">&quot;d&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> b <span class=\"operator\">=</span> [<span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;B&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;D&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> c <span class=\"operator\">=</span> [a, b].flatMap(&#123; <span class=\"variable\">$0</span> &#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> d <span class=\"operator\">=</span> [a, b].customFlatMap(&#123; <span class=\"variable\">$0</span> &#125;)</span><br><span class=\"line\">print (c) <span class=\"comment\">//[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;]</span></span><br><span class=\"line\">print (d) <span class=\"comment\">//[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;]</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>This zip function is not used to compress files. It is used to merge the elements of two sequences one by one to generate a new sequence.</p>\n<h4 id=\"1-map\"><a href=\"#1-map\" class=\"headerlink\" title=\"1. map\"></a><font size=5 color=#4169E1>1. map</font></h4><p>Map is a common higher-order function that maps each element in a collection to another collection and then returns a new collection.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a <span class=\"operator\">=</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> b <span class=\"operator\">=</span> a.map &#123; <span class=\"variable\">$0</span> <span class=\"operator\">*</span> <span class=\"number\">2</span> &#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(b) <span class=\"comment\">// [2, 4, 6, 8, 10]</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>In this example, we multiply each element in the original array by 2 and store the result in a new array.</p>\n<p>We can customize its custom implementation and write it into the Array extension:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">customMap</span>&lt;<span class=\"type\">T</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">tansform</span>:(<span class=\"type\">Element</span>)-&gt;<span class=\"type\">T</span>) -&gt; [<span class=\"type\">T</span>] &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result: [<span class=\"type\">T</span>] <span class=\"operator\">=</span> []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"keyword\">self</span> &#123;</span><br><span class=\"line\">        result.append(tansform(x))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>The call is as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a <span class=\"operator\">=</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> b <span class=\"operator\">=</span> a.customMap &#123; <span class=\"variable\">$0</span> <span class=\"operator\">*</span> <span class=\"number\">2</span> &#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(b) <span class=\"comment\">// [2, 4, 6, 8, 10]</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-reduce\"><a href=\"#2-reduce\" class=\"headerlink\" title=\"2. reduce\"></a><font size=5 color=#4169E1>2. reduce</font></h4><p>reduce is another common higher-order function that combines all elements in a collection into a single value. Its usage is as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a <span class=\"operator\">=</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> b <span class=\"operator\">=</span> a.reduce(<span class=\"number\">0</span>) &#123; <span class=\"variable\">$0</span> <span class=\"operator\">+</span> <span class=\"variable\">$1</span> &#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(b) <span class=\"comment\">// 15</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>In this example, we add all the elements in the original array and store the result in a variable.</p>\n<p>The custom implementation is as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">customReduce</span>&lt;<span class=\"type\">T</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">initial</span>:<span class=\"type\">T</span>, <span class=\"keyword\">_</span> <span class=\"params\">combine</span>: (<span class=\"type\">T</span>, <span class=\"type\">Element</span>)-&gt;<span class=\"type\">T</span>) -&gt; <span class=\"type\">T</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result <span class=\"operator\">=</span> initial</span><br><span class=\"line\">    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"keyword\">self</span> &#123;</span><br><span class=\"line\">        result <span class=\"operator\">=</span> combine(result, x)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>The call is as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a <span class=\"operator\">=</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> b <span class=\"operator\">=</span> b.customReduce(<span class=\"number\">0</span>, <span class=\"operator\">+</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(b) <span class=\"comment\">// 15</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-filter\"><a href=\"#3-filter\" class=\"headerlink\" title=\"3. filter\"></a><font size=5 color=#4169E1>3. filter</font></h4><p>Filter is a common high-order function that can filter out elements that meet conditions from a set and then return a new set. Its usage is as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a <span class=\"operator\">=</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> b <span class=\"operator\">=</span> a.filter &#123; <span class=\"variable\">$0</span> <span class=\"operator\">%</span> <span class=\"number\">2</span> <span class=\"operator\">==</span> <span class=\"number\">0</span> &#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(b) <span class=\"comment\">// [2, 4]</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>In this example, we filter out all even elements in the original array and store the results in a new array.</p>\n<p>The custom implementation is as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">customFilter</span>(<span class=\"keyword\">_</span> <span class=\"params\">isInclude</span>:(<span class=\"type\">Element</span>) -&gt; <span class=\"type\">Bool</span>) -&gt;[<span class=\"type\">Element</span>] &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result: [<span class=\"type\">Element</span>] <span class=\"operator\">=</span> []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"keyword\">self</span> <span class=\"keyword\">where</span> isInclude(x) &#123;</span><br><span class=\"line\">        result.append(x)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>The call is as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a <span class=\"operator\">=</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> b <span class=\"operator\">=</span> a.customFilter &#123; <span class=\"variable\">$0</span> <span class=\"operator\">%</span> <span class=\"number\">2</span> <span class=\"operator\">==</span> <span class=\"number\">0</span> &#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(b) <span class=\"comment\">// [2, 4]</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-flatMap\"><a href=\"#4-flatMap\" class=\"headerlink\" title=\"4. flatMap\"></a><font size=5 color=#4169E1>4. flatMap</font></h4><p>flatMap is a common higher-order function that flattens a nested collection into a single collection. Its usage is as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a <span class=\"operator\">=</span> [[<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>], [<span class=\"number\">5</span>, <span class=\"number\">6</span>]]</span><br><span class=\"line\"><span class=\"keyword\">let</span> b <span class=\"operator\">=</span> a.flatMap &#123; <span class=\"variable\">$0</span> &#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(b) <span class=\"comment\">// [1, 2, 3, 4, 5, 6]</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>In this example, we flatten an array of three arrays into a single array and store the result in a new array.</p>\n<p>Its custom implementation is as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">customFlatMap</span>&lt;<span class=\"type\">T</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">transform</span>: (<span class=\"type\">Element</span>) -&gt; [<span class=\"type\">T</span>]) -&gt; [<span class=\"type\">T</span>] &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tmp: [<span class=\"type\">T</span>] <span class=\"operator\">=</span> []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> value <span class=\"keyword\">in</span> <span class=\"keyword\">self</span> &#123;</span><br><span class=\"line\">       tmp.append(contentsOf: transform(value))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tmp</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a <span class=\"operator\">=</span> [<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>, <span class=\"string\">&quot;d&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> b <span class=\"operator\">=</span> [<span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;B&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;D&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> c <span class=\"operator\">=</span> [a, b].flatMap(&#123; <span class=\"variable\">$0</span> &#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> d <span class=\"operator\">=</span> [a, b].customFlatMap(&#123; <span class=\"variable\">$0</span> &#125;)</span><br><span class=\"line\">print (c) <span class=\"comment\">//[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;]</span></span><br><span class=\"line\">print (d) <span class=\"comment\">//[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;]</span></span><br></pre></td></tr></table></figure>"},{"title":"00. The Operations of zip function","date":"2023-03-09T19:00:00.000Z","_content":"\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nThis zip function is not used to compress files. It is used to merge the elements of two sequences one by one to generate a new sequence.\n\n#### <font size=3 color=#4169E1> 1. Merge two arrays into a new tuple array</font>\n<details>\n<summary>Details</summary>\nIn the following code, we combine zip with map to generate a new array. Note: The number of new sequences generated by the zip function is the minimum of the original sequence.\n\n<strong> Example Code </strong>\n```Swift \nlet a = [1, 2, 3, 4, 5]\nlet b = [ \"a\" ,  \"b\" ,  \"c\"]\nlet c = zip(a, b).map{ $0 }\nprint(c)\n//result: [(1, \"a\"), (2, \"b\"), (3, \"c\")]\n```\nSince the whole operation will stop after a short sequence ends in the zip process, we can also use one-way intervals here. The running results of the following code are the same as those above.\n```Swift \nlet b = [\"a\", \"b\", \"c\"]\nlet c = zip(1..., b).map{ $0 }\nprint(c) \n//result: [(1, \"a\"), (2, \"b\"), (3, \"c\")]\n```\n</details>\n\n\n#### <font size=3 color=#4169E1> 2. Creating dictionaries from key value sequences</font>\n<details>\n<summary>Details</summary>\n\nThe following code combines the two arrays into a dictionary.\n```Swift \nlet names = [\"Apple\", \"Pear\"]\nlet prices = [7, 6]\nlet dict =  Dictionary(uniqueKeysWithValues:zip(names, prices))\nprint(dict)\n//result: [\"Apple\": 7, \"Pear\": 6]\n```\nZip and shorthand + can be used to solve the problem of duplicate keys. For example, the array is converted into a dictionary. The dictionary key is the value of the array element, and the dictionary value is the number of occurrences of the element.\n```Swift \nlet array = [ \"Apple\",  \"Pear\",  \"Pear\",  \"Orange\"]\nlet dic = Dictionary(zip(array, repeatElement(1, count: array.count)), uniquingKeysWith: +)\nprint (dic)\n//result: [\"Pear\": 2, \"Apple\": 1, \"Orange\": 1]\n```\n</details>\n\n#### <font size=3 color=#4169E1> 3. Merge the two arrays into a new array</font>\n<details>\n<summary>Details</summary>\n\nWe know that the flatMap function can also open arrays (two-dimensional arrays, N-dimensional arrays) containing arrays into a new array, but the order of elements in the new array is one after another according to the original array order.With zip, two array elements can be inserted at intervals. The following code compares the two methods.\n```Swift \nlet a = [\"a\", \"b\", \"c\", \"d\"]\nlet b = [\"A\", \"B\", \"C\", \"D\"]\n\nlet c = [a, b].flatMap({ $0 })\nprint (\"c：\\(c)\" )\n\nlet d = zip(a, b).flatMap({[$0, $1]})\nprint (\"d：\\(d)\" )\n//result:\n//c：[\"a\", \"b\", \"c\", \"d\", \"A\", \"B\", \"C\", \"D\"]\nd：[\"a\", \"A\", \"b\", \"B\", \"c\", \"C\", \"d\", \"D\"]\n```\n</details>\n\n#### <font size=3 color=#4169E1> 4. Other convenient operations</font>\n<details>\n<summary>Details</summary>\n\n4.1 Generate the corresponding button array according to the String array.\n\n```Swift\nlet titles = [ \"Button 1\" ,  \"Button 2\" ,  \"Button 3\" ]\nlet buttons = zip(0..., titles).map { (i, title) ->  UIButton  in\n     let button =  UIButton (type: .system)\n     button.setTitle(title,  for :.normal)\n     button.tag = i\n     return button\n}\n```\n4.2 Set the buttons in the button array to the colors in the corresponding color array\n```Swift\nzip(self.buttons,  self.colors).forEach { (button, color)  in\n     button.backgroundColor = color\n}\n//or\nzip(self.buttons,  self.colors).forEach {\n     $0.0.backgroundColor = $0.1\n}\n```\n</details>\n\n#### <font size=3 color=gray>*Reference*</font>\n[1] <https://blog.csdn.net/mo_xiao_mo/article/details/78424769>\n \n","source":"_posts/Swift/06. Collections/01. Zip Function.md","raw":"---\ntitle: 00. The Operations of zip function\ndate: 2023-03-9 20:00:00\ncategories: \n- [Swift, 06. Collections]\ntags:\n- collection\n- zip\n---\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nThis zip function is not used to compress files. It is used to merge the elements of two sequences one by one to generate a new sequence.\n\n#### <font size=3 color=#4169E1> 1. Merge two arrays into a new tuple array</font>\n<details>\n<summary>Details</summary>\nIn the following code, we combine zip with map to generate a new array. Note: The number of new sequences generated by the zip function is the minimum of the original sequence.\n\n<strong> Example Code </strong>\n```Swift \nlet a = [1, 2, 3, 4, 5]\nlet b = [ \"a\" ,  \"b\" ,  \"c\"]\nlet c = zip(a, b).map{ $0 }\nprint(c)\n//result: [(1, \"a\"), (2, \"b\"), (3, \"c\")]\n```\nSince the whole operation will stop after a short sequence ends in the zip process, we can also use one-way intervals here. The running results of the following code are the same as those above.\n```Swift \nlet b = [\"a\", \"b\", \"c\"]\nlet c = zip(1..., b).map{ $0 }\nprint(c) \n//result: [(1, \"a\"), (2, \"b\"), (3, \"c\")]\n```\n</details>\n\n\n#### <font size=3 color=#4169E1> 2. Creating dictionaries from key value sequences</font>\n<details>\n<summary>Details</summary>\n\nThe following code combines the two arrays into a dictionary.\n```Swift \nlet names = [\"Apple\", \"Pear\"]\nlet prices = [7, 6]\nlet dict =  Dictionary(uniqueKeysWithValues:zip(names, prices))\nprint(dict)\n//result: [\"Apple\": 7, \"Pear\": 6]\n```\nZip and shorthand + can be used to solve the problem of duplicate keys. For example, the array is converted into a dictionary. The dictionary key is the value of the array element, and the dictionary value is the number of occurrences of the element.\n```Swift \nlet array = [ \"Apple\",  \"Pear\",  \"Pear\",  \"Orange\"]\nlet dic = Dictionary(zip(array, repeatElement(1, count: array.count)), uniquingKeysWith: +)\nprint (dic)\n//result: [\"Pear\": 2, \"Apple\": 1, \"Orange\": 1]\n```\n</details>\n\n#### <font size=3 color=#4169E1> 3. Merge the two arrays into a new array</font>\n<details>\n<summary>Details</summary>\n\nWe know that the flatMap function can also open arrays (two-dimensional arrays, N-dimensional arrays) containing arrays into a new array, but the order of elements in the new array is one after another according to the original array order.With zip, two array elements can be inserted at intervals. The following code compares the two methods.\n```Swift \nlet a = [\"a\", \"b\", \"c\", \"d\"]\nlet b = [\"A\", \"B\", \"C\", \"D\"]\n\nlet c = [a, b].flatMap({ $0 })\nprint (\"c：\\(c)\" )\n\nlet d = zip(a, b).flatMap({[$0, $1]})\nprint (\"d：\\(d)\" )\n//result:\n//c：[\"a\", \"b\", \"c\", \"d\", \"A\", \"B\", \"C\", \"D\"]\nd：[\"a\", \"A\", \"b\", \"B\", \"c\", \"C\", \"d\", \"D\"]\n```\n</details>\n\n#### <font size=3 color=#4169E1> 4. Other convenient operations</font>\n<details>\n<summary>Details</summary>\n\n4.1 Generate the corresponding button array according to the String array.\n\n```Swift\nlet titles = [ \"Button 1\" ,  \"Button 2\" ,  \"Button 3\" ]\nlet buttons = zip(0..., titles).map { (i, title) ->  UIButton  in\n     let button =  UIButton (type: .system)\n     button.setTitle(title,  for :.normal)\n     button.tag = i\n     return button\n}\n```\n4.2 Set the buttons in the button array to the colors in the corresponding color array\n```Swift\nzip(self.buttons,  self.colors).forEach { (button, color)  in\n     button.backgroundColor = color\n}\n//or\nzip(self.buttons,  self.colors).forEach {\n     $0.0.backgroundColor = $0.1\n}\n```\n</details>\n\n#### <font size=3 color=gray>*Reference*</font>\n[1] <https://blog.csdn.net/mo_xiao_mo/article/details/78424769>\n \n","slug":"Swift/06. Collections/01. Zip Function","published":1,"updated":"2023-11-07T13:57:26.154Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr5p003qvu0mdtw2065f","content":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>This zip function is not used to compress files. It is used to merge the elements of two sequences one by one to generate a new sequence.</p>\n<h4 id=\"1-Merge-two-arrays-into-a-new-tuple-array\"><a href=\"#1-Merge-two-arrays-into-a-new-tuple-array\" class=\"headerlink\" title=\" 1. Merge two arrays into a new tuple array\"></a><font size=3 color=#4169E1> 1. Merge two arrays into a new tuple array</font></h4><details>\n<summary>Details</summary>\nIn the following code, we combine zip with map to generate a new array. Note: The number of new sequences generated by the zip function is the minimum of the original sequence.\n\n<p><strong> Example Code </strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a <span class=\"operator\">=</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> b <span class=\"operator\">=</span> [ <span class=\"string\">&quot;a&quot;</span> ,  <span class=\"string\">&quot;b&quot;</span> ,  <span class=\"string\">&quot;c&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> c <span class=\"operator\">=</span> <span class=\"built_in\">zip</span>(a, b).map&#123; <span class=\"variable\">$0</span> &#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(c)</span><br><span class=\"line\"><span class=\"comment\">//result: [(1, &quot;a&quot;), (2, &quot;b&quot;), (3, &quot;c&quot;)]</span></span><br></pre></td></tr></table></figure>\n<p>Since the whole operation will stop after a short sequence ends in the zip process, we can also use one-way intervals here. The running results of the following code are the same as those above.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> b <span class=\"operator\">=</span> [<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> c <span class=\"operator\">=</span> <span class=\"built_in\">zip</span>(<span class=\"number\">1</span><span class=\"operator\">...</span>, b).map&#123; <span class=\"variable\">$0</span> &#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(c) </span><br><span class=\"line\"><span class=\"comment\">//result: [(1, &quot;a&quot;), (2, &quot;b&quot;), (3, &quot;c&quot;)]</span></span><br></pre></td></tr></table></figure>\n</details>\n\n\n<h4 id=\"2-Creating-dictionaries-from-key-value-sequences\"><a href=\"#2-Creating-dictionaries-from-key-value-sequences\" class=\"headerlink\" title=\" 2. Creating dictionaries from key value sequences\"></a><font size=3 color=#4169E1> 2. Creating dictionaries from key value sequences</font></h4><details>\n<summary>Details</summary>\n\n<p>The following code combines the two arrays into a dictionary.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> names <span class=\"operator\">=</span> [<span class=\"string\">&quot;Apple&quot;</span>, <span class=\"string\">&quot;Pear&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> prices <span class=\"operator\">=</span> [<span class=\"number\">7</span>, <span class=\"number\">6</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> dict <span class=\"operator\">=</span>  <span class=\"type\">Dictionary</span>(uniqueKeysWithValues:<span class=\"built_in\">zip</span>(names, prices))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict)</span><br><span class=\"line\"><span class=\"comment\">//result: [&quot;Apple&quot;: 7, &quot;Pear&quot;: 6]</span></span><br></pre></td></tr></table></figure>\n<p>Zip and shorthand + can be used to solve the problem of duplicate keys. For example, the array is converted into a dictionary. The dictionary key is the value of the array element, and the dictionary value is the number of occurrences of the element.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> array <span class=\"operator\">=</span> [ <span class=\"string\">&quot;Apple&quot;</span>,  <span class=\"string\">&quot;Pear&quot;</span>,  <span class=\"string\">&quot;Pear&quot;</span>,  <span class=\"string\">&quot;Orange&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> dic <span class=\"operator\">=</span> <span class=\"type\">Dictionary</span>(<span class=\"built_in\">zip</span>(array, <span class=\"built_in\">repeatElement</span>(<span class=\"number\">1</span>, count: array.count)), uniquingKeysWith: <span class=\"operator\">+</span>)</span><br><span class=\"line\">print (dic)</span><br><span class=\"line\"><span class=\"comment\">//result: [&quot;Pear&quot;: 2, &quot;Apple&quot;: 1, &quot;Orange&quot;: 1]</span></span><br></pre></td></tr></table></figure>\n</details>\n\n<h4 id=\"3-Merge-the-two-arrays-into-a-new-array\"><a href=\"#3-Merge-the-two-arrays-into-a-new-array\" class=\"headerlink\" title=\" 3. Merge the two arrays into a new array\"></a><font size=3 color=#4169E1> 3. Merge the two arrays into a new array</font></h4><details>\n<summary>Details</summary>\n\n<p>We know that the flatMap function can also open arrays (two-dimensional arrays, N-dimensional arrays) containing arrays into a new array, but the order of elements in the new array is one after another according to the original array order.With zip, two array elements can be inserted at intervals. The following code compares the two methods.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a <span class=\"operator\">=</span> [<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>, <span class=\"string\">&quot;d&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> b <span class=\"operator\">=</span> [<span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;B&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;D&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> c <span class=\"operator\">=</span> [a, b].flatMap(&#123; <span class=\"variable\">$0</span> &#125;)</span><br><span class=\"line\">print (<span class=\"string\">&quot;c：<span class=\"subst\">\\(c)</span>&quot;</span> )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> d <span class=\"operator\">=</span> <span class=\"built_in\">zip</span>(a, b).flatMap(&#123;[<span class=\"variable\">$0</span>, <span class=\"variable\">$1</span>]&#125;)</span><br><span class=\"line\">print (<span class=\"string\">&quot;d：<span class=\"subst\">\\(d)</span>&quot;</span> )</span><br><span class=\"line\"><span class=\"comment\">//result:</span></span><br><span class=\"line\"><span class=\"comment\">//c：[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;]</span></span><br><span class=\"line\">d：[<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;B&quot;</span>, <span class=\"string\">&quot;c&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;d&quot;</span>, <span class=\"string\">&quot;D&quot;</span>]</span><br></pre></td></tr></table></figure>\n</details>\n\n<h4 id=\"4-Other-convenient-operations\"><a href=\"#4-Other-convenient-operations\" class=\"headerlink\" title=\" 4. Other convenient operations\"></a><font size=3 color=#4169E1> 4. Other convenient operations</font></h4><details>\n<summary>Details</summary>\n\n<p>4.1 Generate the corresponding button array according to the String array.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> titles <span class=\"operator\">=</span> [ <span class=\"string\">&quot;Button 1&quot;</span> ,  <span class=\"string\">&quot;Button 2&quot;</span> ,  <span class=\"string\">&quot;Button 3&quot;</span> ]</span><br><span class=\"line\"><span class=\"keyword\">let</span> buttons <span class=\"operator\">=</span> <span class=\"built_in\">zip</span>(<span class=\"number\">0</span><span class=\"operator\">...</span>, titles).map &#123; (i, title) -&gt;  <span class=\"type\">UIButton</span>  <span class=\"keyword\">in</span></span><br><span class=\"line\">     <span class=\"keyword\">let</span> button <span class=\"operator\">=</span>  <span class=\"type\">UIButton</span> (type: .system)</span><br><span class=\"line\">     button.setTitle(title,  for :.normal)</span><br><span class=\"line\">     button.tag <span class=\"operator\">=</span> i</span><br><span class=\"line\">     <span class=\"keyword\">return</span> button</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>4.2 Set the buttons in the button array to the colors in the corresponding color array</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">zip</span>(<span class=\"keyword\">self</span>.buttons,  <span class=\"keyword\">self</span>.colors).forEach &#123; (button, color)  <span class=\"keyword\">in</span></span><br><span class=\"line\">     button.backgroundColor <span class=\"operator\">=</span> color</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//or</span></span><br><span class=\"line\"><span class=\"built_in\">zip</span>(<span class=\"keyword\">self</span>.buttons,  <span class=\"keyword\">self</span>.colors).forEach &#123;</span><br><span class=\"line\">     <span class=\"variable\">$0</span>.<span class=\"number\">0</span>.backgroundColor <span class=\"operator\">=</span> <span class=\"variable\">$0</span>.<span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</details>\n\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://blog.csdn.net/mo_xiao_mo/article/details/78424769\">https://blog.csdn.net/mo_xiao_mo/article/details/78424769</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>This zip function is not used to compress files. It is used to merge the elements of two sequences one by one to generate a new sequence.</p>\n<h4 id=\"1-Merge-two-arrays-into-a-new-tuple-array\"><a href=\"#1-Merge-two-arrays-into-a-new-tuple-array\" class=\"headerlink\" title=\" 1. Merge two arrays into a new tuple array\"></a><font size=3 color=#4169E1> 1. Merge two arrays into a new tuple array</font></h4><details>\n<summary>Details</summary>\nIn the following code, we combine zip with map to generate a new array. Note: The number of new sequences generated by the zip function is the minimum of the original sequence.\n\n<p><strong> Example Code </strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a <span class=\"operator\">=</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> b <span class=\"operator\">=</span> [ <span class=\"string\">&quot;a&quot;</span> ,  <span class=\"string\">&quot;b&quot;</span> ,  <span class=\"string\">&quot;c&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> c <span class=\"operator\">=</span> <span class=\"built_in\">zip</span>(a, b).map&#123; <span class=\"variable\">$0</span> &#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(c)</span><br><span class=\"line\"><span class=\"comment\">//result: [(1, &quot;a&quot;), (2, &quot;b&quot;), (3, &quot;c&quot;)]</span></span><br></pre></td></tr></table></figure>\n<p>Since the whole operation will stop after a short sequence ends in the zip process, we can also use one-way intervals here. The running results of the following code are the same as those above.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> b <span class=\"operator\">=</span> [<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> c <span class=\"operator\">=</span> <span class=\"built_in\">zip</span>(<span class=\"number\">1</span><span class=\"operator\">...</span>, b).map&#123; <span class=\"variable\">$0</span> &#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(c) </span><br><span class=\"line\"><span class=\"comment\">//result: [(1, &quot;a&quot;), (2, &quot;b&quot;), (3, &quot;c&quot;)]</span></span><br></pre></td></tr></table></figure>\n</details>\n\n\n<h4 id=\"2-Creating-dictionaries-from-key-value-sequences\"><a href=\"#2-Creating-dictionaries-from-key-value-sequences\" class=\"headerlink\" title=\" 2. Creating dictionaries from key value sequences\"></a><font size=3 color=#4169E1> 2. Creating dictionaries from key value sequences</font></h4><details>\n<summary>Details</summary>\n\n<p>The following code combines the two arrays into a dictionary.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> names <span class=\"operator\">=</span> [<span class=\"string\">&quot;Apple&quot;</span>, <span class=\"string\">&quot;Pear&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> prices <span class=\"operator\">=</span> [<span class=\"number\">7</span>, <span class=\"number\">6</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> dict <span class=\"operator\">=</span>  <span class=\"type\">Dictionary</span>(uniqueKeysWithValues:<span class=\"built_in\">zip</span>(names, prices))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict)</span><br><span class=\"line\"><span class=\"comment\">//result: [&quot;Apple&quot;: 7, &quot;Pear&quot;: 6]</span></span><br></pre></td></tr></table></figure>\n<p>Zip and shorthand + can be used to solve the problem of duplicate keys. For example, the array is converted into a dictionary. The dictionary key is the value of the array element, and the dictionary value is the number of occurrences of the element.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> array <span class=\"operator\">=</span> [ <span class=\"string\">&quot;Apple&quot;</span>,  <span class=\"string\">&quot;Pear&quot;</span>,  <span class=\"string\">&quot;Pear&quot;</span>,  <span class=\"string\">&quot;Orange&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> dic <span class=\"operator\">=</span> <span class=\"type\">Dictionary</span>(<span class=\"built_in\">zip</span>(array, <span class=\"built_in\">repeatElement</span>(<span class=\"number\">1</span>, count: array.count)), uniquingKeysWith: <span class=\"operator\">+</span>)</span><br><span class=\"line\">print (dic)</span><br><span class=\"line\"><span class=\"comment\">//result: [&quot;Pear&quot;: 2, &quot;Apple&quot;: 1, &quot;Orange&quot;: 1]</span></span><br></pre></td></tr></table></figure>\n</details>\n\n<h4 id=\"3-Merge-the-two-arrays-into-a-new-array\"><a href=\"#3-Merge-the-two-arrays-into-a-new-array\" class=\"headerlink\" title=\" 3. Merge the two arrays into a new array\"></a><font size=3 color=#4169E1> 3. Merge the two arrays into a new array</font></h4><details>\n<summary>Details</summary>\n\n<p>We know that the flatMap function can also open arrays (two-dimensional arrays, N-dimensional arrays) containing arrays into a new array, but the order of elements in the new array is one after another according to the original array order.With zip, two array elements can be inserted at intervals. The following code compares the two methods.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a <span class=\"operator\">=</span> [<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>, <span class=\"string\">&quot;d&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> b <span class=\"operator\">=</span> [<span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;B&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;D&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> c <span class=\"operator\">=</span> [a, b].flatMap(&#123; <span class=\"variable\">$0</span> &#125;)</span><br><span class=\"line\">print (<span class=\"string\">&quot;c：<span class=\"subst\">\\(c)</span>&quot;</span> )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> d <span class=\"operator\">=</span> <span class=\"built_in\">zip</span>(a, b).flatMap(&#123;[<span class=\"variable\">$0</span>, <span class=\"variable\">$1</span>]&#125;)</span><br><span class=\"line\">print (<span class=\"string\">&quot;d：<span class=\"subst\">\\(d)</span>&quot;</span> )</span><br><span class=\"line\"><span class=\"comment\">//result:</span></span><br><span class=\"line\"><span class=\"comment\">//c：[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;]</span></span><br><span class=\"line\">d：[<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;B&quot;</span>, <span class=\"string\">&quot;c&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;d&quot;</span>, <span class=\"string\">&quot;D&quot;</span>]</span><br></pre></td></tr></table></figure>\n</details>\n\n<h4 id=\"4-Other-convenient-operations\"><a href=\"#4-Other-convenient-operations\" class=\"headerlink\" title=\" 4. Other convenient operations\"></a><font size=3 color=#4169E1> 4. Other convenient operations</font></h4><details>\n<summary>Details</summary>\n\n<p>4.1 Generate the corresponding button array according to the String array.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> titles <span class=\"operator\">=</span> [ <span class=\"string\">&quot;Button 1&quot;</span> ,  <span class=\"string\">&quot;Button 2&quot;</span> ,  <span class=\"string\">&quot;Button 3&quot;</span> ]</span><br><span class=\"line\"><span class=\"keyword\">let</span> buttons <span class=\"operator\">=</span> <span class=\"built_in\">zip</span>(<span class=\"number\">0</span><span class=\"operator\">...</span>, titles).map &#123; (i, title) -&gt;  <span class=\"type\">UIButton</span>  <span class=\"keyword\">in</span></span><br><span class=\"line\">     <span class=\"keyword\">let</span> button <span class=\"operator\">=</span>  <span class=\"type\">UIButton</span> (type: .system)</span><br><span class=\"line\">     button.setTitle(title,  for :.normal)</span><br><span class=\"line\">     button.tag <span class=\"operator\">=</span> i</span><br><span class=\"line\">     <span class=\"keyword\">return</span> button</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>4.2 Set the buttons in the button array to the colors in the corresponding color array</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">zip</span>(<span class=\"keyword\">self</span>.buttons,  <span class=\"keyword\">self</span>.colors).forEach &#123; (button, color)  <span class=\"keyword\">in</span></span><br><span class=\"line\">     button.backgroundColor <span class=\"operator\">=</span> color</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//or</span></span><br><span class=\"line\"><span class=\"built_in\">zip</span>(<span class=\"keyword\">self</span>.buttons,  <span class=\"keyword\">self</span>.colors).forEach &#123;</span><br><span class=\"line\">     <span class=\"variable\">$0</span>.<span class=\"number\">0</span>.backgroundColor <span class=\"operator\">=</span> <span class=\"variable\">$0</span>.<span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</details>\n\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://blog.csdn.net/mo_xiao_mo/article/details/78424769\">https://blog.csdn.net/mo_xiao_mo/article/details/78424769</a></p>\n"},{"title":"00. How to use do, catch, try, throws in Swift?","date":"2023-08-18T08:00:00.000Z","_content":"\n<font color=gray size=2>*It will take about 5 minutes to finish reading this article.*</font>\n\nAlthough these keywords are not new to Swift, they are almost always used when using Swift Concurrency. Before we introduce the formal Concurrency content, let's take a look at these keywords specifically.   \nIn this article, we will introduce do-catch blocks, try, try? And try! The difference between them, as well as an introduction to throw.\n\n #### <font size=3 color=#4169E1>1. how to use do-catch-try-throws in Swift</font> \n A do-catch statement is a mechanism for handling errors that allows you to write blocks of code that catch and handle possible errors. The general form of the do-catch-try-throws statement is as follows:\n\n```Swift\nfunc someFunction() throws {\n    // Code that may throw errors\n}\n\ndo {\n    try someFunction()\n} catch pattern {\n    // Code that executes after a specific type of error is caught\n} catch pattern {\n    // Another type of error is caught\n}\n```\n**Do code block:**      \nIn this block, you can place code that may throw erros.   \n**Catch code block:**  \nThis is where errors are caught and handled. You can use different patterns based on the error type to catch errors and execute the appropriate code when matched. You can have multiple catch blocks that handle different types of errors.\nHere is an example of how to use do-catch statement:\n\n```Swift\nfunc verifyValueValidity(_ value: Int) throws -> Int {\n    \n    if value < 0 {\n        print(\"Value is too small.\")\n        throw CustomError.valueTooSmall\n    } else if value > 100 {\n        print(\"Value is too large.\")\n        throw CustomError.valueTooLarge\n    } else {\n        print(\"Value is within acceptable range.\")\n        return 1\n    }\n  \n}\n\ndo {\n    let valid1 = try verifyValueValidity(50)\n    // let valid2 = try verifyValueValidity(500)\n} catch CustomError.valueTooSmall {\n    print(\"Value is too small.\")\n} catch CustomError.valueTooLarge {\n    print(\"Value is too large.\")\n} catch {\n    print(\"An error occurred: \\(error)\")\n}\n```\n**Note:**   \nif there are multiple try Code in the do statement in the above code, for example:\n\n```Swift\ndo {\n    let valid1 = try verifyValueValidity(50)\n    let valid2 = try verifyValueValidity(500)\n    let valid3 = try verifyValueValidity(5000)//Will not execute\n    let valid4 = try verifyValueValidity(2500)//Will not execute\n} catch CustomError.valueTooSmall {\n    print(\"Value is too small.\")\n} catch CustomError.valueTooLarge {\n    print(\"Value is too large.\")\n} catch {\n    print(\"An error occurred: \\(error)\")\n}\n```\nThen the try statements will be executed in order, and if a statement hits the catch statement below it, it will stop and the following try statements will not be executed. The result of the execution of the above code:\n\n```Swift\nValue is within acceptable range.\nValue is too large.\n```\n\n#### <font size=3 color=#4169E1>2. try？and try！</font>\nThere is a solution about the problem of the execution of exmultiple try statements. as following:\nOne solution to the above multiple try execution problem is to use try?. As follows is the sample code:\n\n```Swift\ndo {\n    let valid1 = try? verifyValueValidity(50)\n    let valid2 = try? verifyValueValidity(500)\n    let valid3 = try? verifyValueValidity(5000)\n    let valid4 = try? verifyValueValidity(2500)\n    \n} catch CustomError.valueTooSmall {\n    print(\"Value is too small.\")\n} catch CustomError.valueTooLarge {\n    print(\"Value is too large.\")\n} catch {\n    print(\"An error occurred: \\(error)\")\n}\n```\nThe results of the execution are as follows:\n\n```Swift\nValue is within acceptable range.\nValue is too large.\nValue is too large.\nValue is too large.\n```\nThe result of the execution shows that all the try statements are executed, but written this way Xcode will give you a Warning:\n\n```Swift\n'catch' block is unreachable because no errors are thrown in 'do' block\n```\nLike this:   \n{% img /assets/Swift/Concurrency/catch_warning.png %}\n<!-- <image src=\"images/catch_warning.png\">     -->\nThat's right, try? will invalidate the catch statement so that all the try statements will be executed. So the above code can just be simplified to:          \n\n```Swift\nlet valid1 = try? verifyValueValidity(50)\nlet valid2 = try? verifyValueValidity(500)\nlet valid3 = try? verifyValueValidity(5000)\nlet valid4 = try? verifyValueValidity(2500)\n```\nSo, when we don't care about the execution of the catch statement, this is the way to write it.\n\n**Note:**\nIf you change try? to try!, the catch statement will also fail, but if the forced parsing fails, it will cause a Crash, so it is not recommended.\n","source":"_posts/Swift/07. Concurrency/00. How to use do, catch, try, throws in Swift.md","raw":"---\ntitle: 00. How to use do, catch, try, throws in Swift?\ndate: 2023-08-18 10:00:00\ncategories: \n- [Swift, 07. Concurrency]\ntags:\n- concurrency\n---\n\n<font color=gray size=2>*It will take about 5 minutes to finish reading this article.*</font>\n\nAlthough these keywords are not new to Swift, they are almost always used when using Swift Concurrency. Before we introduce the formal Concurrency content, let's take a look at these keywords specifically.   \nIn this article, we will introduce do-catch blocks, try, try? And try! The difference between them, as well as an introduction to throw.\n\n #### <font size=3 color=#4169E1>1. how to use do-catch-try-throws in Swift</font> \n A do-catch statement is a mechanism for handling errors that allows you to write blocks of code that catch and handle possible errors. The general form of the do-catch-try-throws statement is as follows:\n\n```Swift\nfunc someFunction() throws {\n    // Code that may throw errors\n}\n\ndo {\n    try someFunction()\n} catch pattern {\n    // Code that executes after a specific type of error is caught\n} catch pattern {\n    // Another type of error is caught\n}\n```\n**Do code block:**      \nIn this block, you can place code that may throw erros.   \n**Catch code block:**  \nThis is where errors are caught and handled. You can use different patterns based on the error type to catch errors and execute the appropriate code when matched. You can have multiple catch blocks that handle different types of errors.\nHere is an example of how to use do-catch statement:\n\n```Swift\nfunc verifyValueValidity(_ value: Int) throws -> Int {\n    \n    if value < 0 {\n        print(\"Value is too small.\")\n        throw CustomError.valueTooSmall\n    } else if value > 100 {\n        print(\"Value is too large.\")\n        throw CustomError.valueTooLarge\n    } else {\n        print(\"Value is within acceptable range.\")\n        return 1\n    }\n  \n}\n\ndo {\n    let valid1 = try verifyValueValidity(50)\n    // let valid2 = try verifyValueValidity(500)\n} catch CustomError.valueTooSmall {\n    print(\"Value is too small.\")\n} catch CustomError.valueTooLarge {\n    print(\"Value is too large.\")\n} catch {\n    print(\"An error occurred: \\(error)\")\n}\n```\n**Note:**   \nif there are multiple try Code in the do statement in the above code, for example:\n\n```Swift\ndo {\n    let valid1 = try verifyValueValidity(50)\n    let valid2 = try verifyValueValidity(500)\n    let valid3 = try verifyValueValidity(5000)//Will not execute\n    let valid4 = try verifyValueValidity(2500)//Will not execute\n} catch CustomError.valueTooSmall {\n    print(\"Value is too small.\")\n} catch CustomError.valueTooLarge {\n    print(\"Value is too large.\")\n} catch {\n    print(\"An error occurred: \\(error)\")\n}\n```\nThen the try statements will be executed in order, and if a statement hits the catch statement below it, it will stop and the following try statements will not be executed. The result of the execution of the above code:\n\n```Swift\nValue is within acceptable range.\nValue is too large.\n```\n\n#### <font size=3 color=#4169E1>2. try？and try！</font>\nThere is a solution about the problem of the execution of exmultiple try statements. as following:\nOne solution to the above multiple try execution problem is to use try?. As follows is the sample code:\n\n```Swift\ndo {\n    let valid1 = try? verifyValueValidity(50)\n    let valid2 = try? verifyValueValidity(500)\n    let valid3 = try? verifyValueValidity(5000)\n    let valid4 = try? verifyValueValidity(2500)\n    \n} catch CustomError.valueTooSmall {\n    print(\"Value is too small.\")\n} catch CustomError.valueTooLarge {\n    print(\"Value is too large.\")\n} catch {\n    print(\"An error occurred: \\(error)\")\n}\n```\nThe results of the execution are as follows:\n\n```Swift\nValue is within acceptable range.\nValue is too large.\nValue is too large.\nValue is too large.\n```\nThe result of the execution shows that all the try statements are executed, but written this way Xcode will give you a Warning:\n\n```Swift\n'catch' block is unreachable because no errors are thrown in 'do' block\n```\nLike this:   \n{% img /assets/Swift/Concurrency/catch_warning.png %}\n<!-- <image src=\"images/catch_warning.png\">     -->\nThat's right, try? will invalidate the catch statement so that all the try statements will be executed. So the above code can just be simplified to:          \n\n```Swift\nlet valid1 = try? verifyValueValidity(50)\nlet valid2 = try? verifyValueValidity(500)\nlet valid3 = try? verifyValueValidity(5000)\nlet valid4 = try? verifyValueValidity(2500)\n```\nSo, when we don't care about the execution of the catch statement, this is the way to write it.\n\n**Note:**\nIf you change try? to try!, the catch statement will also fail, but if the forced parsing fails, it will cause a Crash, so it is not recommended.\n","slug":"Swift/07. Concurrency/00. How to use do, catch, try, throws in Swift","published":1,"updated":"2023-11-15T13:51:50.369Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr5r003svu0mhg49c76n","content":"<p><font color=gray size=2><em>It will take about 5 minutes to finish reading this article.</em></font></p>\n<p>Although these keywords are not new to Swift, they are almost always used when using Swift Concurrency. Before we introduce the formal Concurrency content, let’s take a look at these keywords specifically.<br>In this article, we will introduce do-catch blocks, try, try? And try! The difference between them, as well as an introduction to throw.</p>\n<h4 id=\"1-how-to-use-do-catch-try-throws-in-Swift\"><a href=\"#1-how-to-use-do-catch-try-throws-in-Swift\" class=\"headerlink\" title=\"1. how to use do-catch-try-throws in Swift\"></a><font size=3 color=#4169E1>1. how to use do-catch-try-throws in Swift</font></h4><p> A do-catch statement is a mechanism for handling errors that allows you to write blocks of code that catch and handle possible errors. The general form of the do-catch-try-throws statement is as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">someFunction</span>() <span class=\"keyword\">throws</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Code that may throw errors</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> someFunction()</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> pattern &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Code that executes after a specific type of error is caught</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> pattern &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Another type of error is caught</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>Do code block:</strong><br>In this block, you can place code that may throw erros.<br><strong>Catch code block:</strong><br>This is where errors are caught and handled. You can use different patterns based on the error type to catch errors and execute the appropriate code when matched. You can have multiple catch blocks that handle different types of errors.<br>Here is an example of how to use do-catch statement:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">verifyValueValidity</span>(<span class=\"keyword\">_</span> <span class=\"params\">value</span>: <span class=\"type\">Int</span>) <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> value <span class=\"operator\">&lt;</span> <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Value is too small.&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"type\">CustomError</span>.valueTooSmall</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> value <span class=\"operator\">&gt;</span> <span class=\"number\">100</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Value is too large.&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"type\">CustomError</span>.valueTooLarge</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Value is within acceptable range.&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> valid1 <span class=\"operator\">=</span> <span class=\"keyword\">try</span> verifyValueValidity(<span class=\"number\">50</span>)</span><br><span class=\"line\">    <span class=\"comment\">// let valid2 = try verifyValueValidity(500)</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> <span class=\"type\">CustomError</span>.valueTooSmall &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Value is too small.&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> <span class=\"type\">CustomError</span>.valueTooLarge &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Value is too large.&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;An error occurred: <span class=\"subst\">\\(error)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>Note:</strong><br>if there are multiple try Code in the do statement in the above code, for example:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> valid1 <span class=\"operator\">=</span> <span class=\"keyword\">try</span> verifyValueValidity(<span class=\"number\">50</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> valid2 <span class=\"operator\">=</span> <span class=\"keyword\">try</span> verifyValueValidity(<span class=\"number\">500</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> valid3 <span class=\"operator\">=</span> <span class=\"keyword\">try</span> verifyValueValidity(<span class=\"number\">5000</span>)<span class=\"comment\">//Will not execute</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> valid4 <span class=\"operator\">=</span> <span class=\"keyword\">try</span> verifyValueValidity(<span class=\"number\">2500</span>)<span class=\"comment\">//Will not execute</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> <span class=\"type\">CustomError</span>.valueTooSmall &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Value is too small.&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> <span class=\"type\">CustomError</span>.valueTooLarge &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Value is too large.&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;An error occurred: <span class=\"subst\">\\(error)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Then the try statements will be executed in order, and if a statement hits the catch statement below it, it will stop and the following try statements will not be executed. The result of the execution of the above code:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Value</span> <span class=\"keyword\">is</span> within acceptable range.</span><br><span class=\"line\"><span class=\"type\">Value</span> <span class=\"keyword\">is</span> too large.</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-try？and-try！\"><a href=\"#2-try？and-try！\" class=\"headerlink\" title=\"2. try？and try！\"></a><font size=3 color=#4169E1>2. try？and try！</font></h4><p>There is a solution about the problem of the execution of exmultiple try statements. as following:<br>One solution to the above multiple try execution problem is to use try?. As follows is the sample code:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> valid1 <span class=\"operator\">=</span> <span class=\"keyword\">try?</span> verifyValueValidity(<span class=\"number\">50</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> valid2 <span class=\"operator\">=</span> <span class=\"keyword\">try?</span> verifyValueValidity(<span class=\"number\">500</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> valid3 <span class=\"operator\">=</span> <span class=\"keyword\">try?</span> verifyValueValidity(<span class=\"number\">5000</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> valid4 <span class=\"operator\">=</span> <span class=\"keyword\">try?</span> verifyValueValidity(<span class=\"number\">2500</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> <span class=\"type\">CustomError</span>.valueTooSmall &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Value is too small.&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> <span class=\"type\">CustomError</span>.valueTooLarge &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Value is too large.&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;An error occurred: <span class=\"subst\">\\(error)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The results of the execution are as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Value</span> <span class=\"keyword\">is</span> within acceptable range.</span><br><span class=\"line\"><span class=\"type\">Value</span> <span class=\"keyword\">is</span> too large.</span><br><span class=\"line\"><span class=\"type\">Value</span> <span class=\"keyword\">is</span> too large.</span><br><span class=\"line\"><span class=\"type\">Value</span> <span class=\"keyword\">is</span> too large.</span><br></pre></td></tr></table></figure>\n<p>The result of the execution shows that all the try statements are executed, but written this way Xcode will give you a Warning:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;<span class=\"keyword\">catch</span>&#x27; block <span class=\"keyword\">is</span> unreachable because no errors are thrown <span class=\"keyword\">in</span> &#x27;<span class=\"keyword\">do</span>&#x27; block</span><br></pre></td></tr></table></figure>\n<p>Like this:   </p>\n<img src=\"/assets/Swift/Concurrency/catch_warning.png\" class=\"\">\n<!-- <image src=\"images/catch_warning.png\">     -->\n<p>That’s right, try? will invalidate the catch statement so that all the try statements will be executed. So the above code can just be simplified to:          </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> valid1 <span class=\"operator\">=</span> <span class=\"keyword\">try?</span> verifyValueValidity(<span class=\"number\">50</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> valid2 <span class=\"operator\">=</span> <span class=\"keyword\">try?</span> verifyValueValidity(<span class=\"number\">500</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> valid3 <span class=\"operator\">=</span> <span class=\"keyword\">try?</span> verifyValueValidity(<span class=\"number\">5000</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> valid4 <span class=\"operator\">=</span> <span class=\"keyword\">try?</span> verifyValueValidity(<span class=\"number\">2500</span>)</span><br></pre></td></tr></table></figure>\n<p>So, when we don’t care about the execution of the catch statement, this is the way to write it.</p>\n<p><strong>Note:</strong><br>If you change try? to try!, the catch statement will also fail, but if the forced parsing fails, it will cause a Crash, so it is not recommended.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 5 minutes to finish reading this article.</em></font></p>\n<p>Although these keywords are not new to Swift, they are almost always used when using Swift Concurrency. Before we introduce the formal Concurrency content, let’s take a look at these keywords specifically.<br>In this article, we will introduce do-catch blocks, try, try? And try! The difference between them, as well as an introduction to throw.</p>\n<h4 id=\"1-how-to-use-do-catch-try-throws-in-Swift\"><a href=\"#1-how-to-use-do-catch-try-throws-in-Swift\" class=\"headerlink\" title=\"1. how to use do-catch-try-throws in Swift\"></a><font size=3 color=#4169E1>1. how to use do-catch-try-throws in Swift</font></h4><p> A do-catch statement is a mechanism for handling errors that allows you to write blocks of code that catch and handle possible errors. The general form of the do-catch-try-throws statement is as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">someFunction</span>() <span class=\"keyword\">throws</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Code that may throw errors</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> someFunction()</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> pattern &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Code that executes after a specific type of error is caught</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> pattern &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Another type of error is caught</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>Do code block:</strong><br>In this block, you can place code that may throw erros.<br><strong>Catch code block:</strong><br>This is where errors are caught and handled. You can use different patterns based on the error type to catch errors and execute the appropriate code when matched. You can have multiple catch blocks that handle different types of errors.<br>Here is an example of how to use do-catch statement:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">verifyValueValidity</span>(<span class=\"keyword\">_</span> <span class=\"params\">value</span>: <span class=\"type\">Int</span>) <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> value <span class=\"operator\">&lt;</span> <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Value is too small.&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"type\">CustomError</span>.valueTooSmall</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> value <span class=\"operator\">&gt;</span> <span class=\"number\">100</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Value is too large.&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"type\">CustomError</span>.valueTooLarge</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Value is within acceptable range.&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> valid1 <span class=\"operator\">=</span> <span class=\"keyword\">try</span> verifyValueValidity(<span class=\"number\">50</span>)</span><br><span class=\"line\">    <span class=\"comment\">// let valid2 = try verifyValueValidity(500)</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> <span class=\"type\">CustomError</span>.valueTooSmall &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Value is too small.&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> <span class=\"type\">CustomError</span>.valueTooLarge &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Value is too large.&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;An error occurred: <span class=\"subst\">\\(error)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>Note:</strong><br>if there are multiple try Code in the do statement in the above code, for example:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> valid1 <span class=\"operator\">=</span> <span class=\"keyword\">try</span> verifyValueValidity(<span class=\"number\">50</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> valid2 <span class=\"operator\">=</span> <span class=\"keyword\">try</span> verifyValueValidity(<span class=\"number\">500</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> valid3 <span class=\"operator\">=</span> <span class=\"keyword\">try</span> verifyValueValidity(<span class=\"number\">5000</span>)<span class=\"comment\">//Will not execute</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> valid4 <span class=\"operator\">=</span> <span class=\"keyword\">try</span> verifyValueValidity(<span class=\"number\">2500</span>)<span class=\"comment\">//Will not execute</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> <span class=\"type\">CustomError</span>.valueTooSmall &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Value is too small.&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> <span class=\"type\">CustomError</span>.valueTooLarge &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Value is too large.&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;An error occurred: <span class=\"subst\">\\(error)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Then the try statements will be executed in order, and if a statement hits the catch statement below it, it will stop and the following try statements will not be executed. The result of the execution of the above code:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Value</span> <span class=\"keyword\">is</span> within acceptable range.</span><br><span class=\"line\"><span class=\"type\">Value</span> <span class=\"keyword\">is</span> too large.</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-try？and-try！\"><a href=\"#2-try？and-try！\" class=\"headerlink\" title=\"2. try？and try！\"></a><font size=3 color=#4169E1>2. try？and try！</font></h4><p>There is a solution about the problem of the execution of exmultiple try statements. as following:<br>One solution to the above multiple try execution problem is to use try?. As follows is the sample code:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> valid1 <span class=\"operator\">=</span> <span class=\"keyword\">try?</span> verifyValueValidity(<span class=\"number\">50</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> valid2 <span class=\"operator\">=</span> <span class=\"keyword\">try?</span> verifyValueValidity(<span class=\"number\">500</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> valid3 <span class=\"operator\">=</span> <span class=\"keyword\">try?</span> verifyValueValidity(<span class=\"number\">5000</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> valid4 <span class=\"operator\">=</span> <span class=\"keyword\">try?</span> verifyValueValidity(<span class=\"number\">2500</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> <span class=\"type\">CustomError</span>.valueTooSmall &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Value is too small.&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> <span class=\"type\">CustomError</span>.valueTooLarge &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Value is too large.&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;An error occurred: <span class=\"subst\">\\(error)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The results of the execution are as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Value</span> <span class=\"keyword\">is</span> within acceptable range.</span><br><span class=\"line\"><span class=\"type\">Value</span> <span class=\"keyword\">is</span> too large.</span><br><span class=\"line\"><span class=\"type\">Value</span> <span class=\"keyword\">is</span> too large.</span><br><span class=\"line\"><span class=\"type\">Value</span> <span class=\"keyword\">is</span> too large.</span><br></pre></td></tr></table></figure>\n<p>The result of the execution shows that all the try statements are executed, but written this way Xcode will give you a Warning:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;<span class=\"keyword\">catch</span>&#x27; block <span class=\"keyword\">is</span> unreachable because no errors are thrown <span class=\"keyword\">in</span> &#x27;<span class=\"keyword\">do</span>&#x27; block</span><br></pre></td></tr></table></figure>\n<p>Like this:   </p>\n<img src=\"/assets/Swift/Concurrency/catch_warning.png\" class=\"\">\n<!-- <image src=\"images/catch_warning.png\">     -->\n<p>That’s right, try? will invalidate the catch statement so that all the try statements will be executed. So the above code can just be simplified to:          </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> valid1 <span class=\"operator\">=</span> <span class=\"keyword\">try?</span> verifyValueValidity(<span class=\"number\">50</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> valid2 <span class=\"operator\">=</span> <span class=\"keyword\">try?</span> verifyValueValidity(<span class=\"number\">500</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> valid3 <span class=\"operator\">=</span> <span class=\"keyword\">try?</span> verifyValueValidity(<span class=\"number\">5000</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> valid4 <span class=\"operator\">=</span> <span class=\"keyword\">try?</span> verifyValueValidity(<span class=\"number\">2500</span>)</span><br></pre></td></tr></table></figure>\n<p>So, when we don’t care about the execution of the catch statement, this is the way to write it.</p>\n<p><strong>Note:</strong><br>If you change try? to try!, the catch statement will also fail, but if the forced parsing fails, it will cause a Crash, so it is not recommended.</p>\n"},{"title":"01. Async and Await","date":"2023-08-23T08:00:00.000Z","_content":"\n<font color=gray size=2>*It will take about 10 minutes to finish reading this article.*</font>\n\n<!-- # **<font size=5 >Async and Await</font>** -->\n#### <font size=3 color=#4169E1>1. Description</font> \n \nIn Swift, async and await are keywords used for asynchronous programming, a cleaner, more readable way to handle asynchronous tasks. These are new features introduced in Swift 5.5 that make asynchronous code look more like synchronous code, and the use of async/await also naturally preserves the semantic structure of the code, providing the necessary support for at least three horizontal improvements: \n(1) Better performance for asynchronous code.   \n(2) Better tools that provide a more consistent experience when debugging, profiling, and exploring code.   \n(3) A foundation for future concurrency features.           \nIn short, they improve the maintainability and understandability of code.\n \n#### <font size=3 color=#4169E1>2. How to use async and await</font>  \n\n<font size=3 color=#4169E1>**2.1 async**</font>  \nA function can be declared as asynchronous by prefixing the return arrow of the function declaration with the async keyword:\n```Swift\nfunc loadSignature() async throws -> String {\n    do {\n        let signature = try await simulateSignatureLoading()\n        return signature\n    } catch {\n        throw CustomError.loadingError\n    }\n}\n```\nAn asynchronous function can pause execution when it encounters the await keyword and wait for an asynchronous operation to complete before resuming execution. \n\n<font size=3 color=#4169E1>**2.2 await**</font>  \nAwait is a keyword used to call asynchronous methods. When await is encountered, the execution of the function pauses until the asynchronous operation completes and returns the result.        \nHere's an example of using await to call an asynchronous function and wait for its result: \n```Swift\n\nfunc simulateSignatureLoading() async throws -> String {\n    // Simulate some asynchronous loading process, eg, from a network request or a file.\n    await Task.sleep(2_000_000_000) // Simulate a 2-second delay\n\n    let success = Bool.random() // Simulate successful or unsuccessful loading\n    if success {\n        let signature = \"This is my signature\"\n        return signature\n    } else {\n        throw CustomError.signatureNotFound\n    }\n}\n```\nSuspension mentioned above:         \n(1) The suspension is the method, not the thread that executes the method.      \n(2) Accurately await should be called a potential suspension point, not a suspension point, because not all await will be suspended, only encountered similar IO, manually start a sub-thread, etc. will suspend the current call stack.        \n(3) Before and after the pause point may occur before and after the thread switch, it is because of the asynchronous method before and after the pause point may change the thread of execution, so in the asynchronous method should be careful to use locks, semaphores and other synchronization operations.\n```Swift\nlet lock = NSLock.init()\nfunc test() async {\n  lock.lock()\n  try? await Task.sleep(nanoseconds: 1_000_000_000)\n  lock.unlock()\n}\n\nfor i in 0..<10 {\n  Task {\n    await test()\n  }\n}\n```\nCode like the above generates a deadlock at lock.lock(), as does switching to a semaphore.      \nNote:       \n async-await is often used companionally in Swift and can be thought of as simply this:         \n\"await is always waiting for a response from its partner, async.\"\n\n\n#### <font size=3 color=#4169E1>3. Application of async-await</font>  \n<font size=3 color=#4169E1>**3.1 Replaces traditional closure callbacks (Asynchronous serial)**</font>  \nTraditional closure callbacks are common in Swift for returning from an asynchronous task, usually in combination with a parameter of type result, as follows:\n```Swift\nfunc fetchImages(completion: ([UIImage]?, Error?) -> Void) {\n    // .. Execution of data requests\n}\n```\nOr\n```Swift\n\nfunc fetchImages(completion: (Result<[UIImage], Error>) -> Void) {\n    // .. Execution of data requests\n}\n```\nWhile this approach is still common, it can have several drawbacks:         \n(1) You have to make sure you call completion closures in every possible exit method.       \n(2) Closure code is often too deeply nested, optional types must be unwrapped, etc., making it harder to read and debug.    \n(3) You need to use weak references to avoid circular references.    \n(4) Implementers need to switch on results to get results (Block callbacks) and cannot use try catch statements from the implementation level.    \nThe fetchImages function above can simply be replaced with async/await as:\n```Swift\nfunc fetchImages() async throws -> [UIImage] {\n    // Simulate asynchronous operations, such as requesting image data from the web\n    return await withCheckedThrowingContinuation { continuation in\n        DispatchQueue.global().async {\n            // Perform an asynchronous operation to get images and errors\n            let images: [UIImage] = []\n            let error: Error? = nil\n\n            if let error = error {\n                continuation.resume(throwing: error)\n            } else {\n                continuation.resume(returning: images)\n            }\n        }\n    }\n}\n```\n```Swift\n\nasync func imagesData() {\n    do {\n        let images = try await fetchImages()\n        // This is where the fetched images are processed\n    } catch {\n        // Handling error\n    }\n}\n\nTask {\n    await imagesData()\n}\n\n```\n**Note 1:**   \nWhen adopting async-await in an existing project, you should be careful not to break all the code at once. When doing such a large-scale refactoring, it's best to consider maintaining the old implementation for the time being so that you don't have to update all the code until you know if the new implementation is stable enough. \nExample:\n```Swift\nstruct ImageFetcher {\n    @available(*, renamed: \"fetchImages()\")\n    func fetchImages(completion: (Result<[UIImage], Error>) -> Void) {\n    \n    }\n    func fetchImages() async throws -> [UIImage] {\n        // .. Execution of data requests\n    }\n}\n```\nThe asynchronous alternative refactoring option is added here, which still retains the old implementation, but adds an available attribute. If you want Xcode's deprecation warning, you can change it to:\n```Swift\n@available(*, deprecated, renamed: \"fetchImages()\")\n```\nThis way you can optimize your code incrementally without having to refactor your entire project at once.\n\n**Note 2:**\nIn the above code, the Result enumeration is also optimized together. Yes, async-await can greatly reduce the use of Result enumerations.\n\n<font size=3 color=#4169E1>**3.2 async-let (asynchronous parallelism)**</font>  \nLet's take a look at the following application for async-await:\n```Swift\nfunc fetchImage(from url: URL) async throws -> UIImage {\n    // Simulate asynchronous downloading of images\n    print(\"fetchImage----- begin \\(Thread.current)\")\n    await Task.sleep(1_000_000_000) // Simulates 1 second download time\n    let data = try await URLSession.shared.data(from: url)\n    guard let image = UIImage(data: data) else {\n        throw NSError(domain: \"ImageDownloadError\", code: 0, userInfo: [NSLocalizedDescriptionKey: \"Failed to download image\"])\n    }\n    print(\"fetchImage----- end \\(Thread.current)\")\n    return image\n}\n```\n```Swift\nfunc downloadImages() async {\n    let imageURLs = [\n        URL(string: \"https://example.com/image1.jpg\")!,\n        URL(string: \"https://example.com/image2.jpg\")!,\n        URL(string: \"https://example.com/image3.jpg\")!\n    ]\n    \n    do {\n        let image1 = await fetchImage(from: imageURLs[0])\n        print(\"Downloaded image 1:\", image1)\n        let image2 = await fetchImage(from: imageURLs[1])\n        print(\"Downloaded image 2:\", image2)\n        let image3 = await fetchImage(from: imageURLs[2])\n        print(\"Downloaded image 3:\", image3)\n        \n    } catch {\n      \n    }\n}\n\nTask {\n    await downloadImages()\n}\n```\nThe 3 images in the example are downloaded serially one by one, using async-let can optimize this code for asynchronous parallelism:\n```Swift\nasync func downloadImages() {\n    let imageURLs = [\n        URL(string: \"https://example.com/image1.jpg\")!,\n        URL(string: \"https://example.com/image2.jpg\")!,\n        URL(string: \"https://example.com/image3.jpg\")!\n    ]\n    var images: [UIImage] = []\n    do {\n        print(\">>>>>>>>>> 1 \\(Thread.current)\")\n        async let fetchImage1 = fetchImage(from: imageURLs[0])\n        async let fetchImage2 = fetchImage(from: imageURLs[1])\n        async let fetchImage3 = fetchImage(from: imageURLs[2])\n        print(\">>>>>>>>>> 2 \\(Thread.current)\")\n        let (image1, image2, image3) = await (try fetchImage1, try fetchImage2, try fetchImage3)\n        print(\">>>>>>>>>> 3 \\(Thread.current)\")\n        images.append(contentsOf: [image1, image2, image3])\n     } catch {\n      \n     }\n}\n```\nThe result of the Print:\n```Swift\n>>>>>>>>>> 1 <_NSMainThread: 0x7b10000003c0>{number = 1, name = main}\n>>>>>>>>>> 2 <_NSMainThread: 0x7b10000003c0>{number = 1, name = main}\nfetchImage----- begin <NSThread: 0x7b1000043a40>{number = 6, name = (null)}\nfetchImage----- begin <NSThread: 0x7b1000046200>{number = 7, name = (null)}\nfetchImage----- begin <NSThread: 0x7b1000046200>{number = 7, name = (null)}\nfetchImage----- begin <NSThread: 0x7b1000043a40>{number = 6, name = (null)}\nfetchImage----- end <NSThread: 0x7b100004b700>{number = 3, name = (null)}\nfetchImage----- end <NSThread: 0x7b1000048ac0>{number = 4, name = (null)}\nfetchImage----- end <NSThread: 0x7b100004b700>{number = 3, name = (null)}\nfetchImage----- end <NSThread: 0x7b1000046200>{number = 7, name = (null)}\n>>>>>>>>>> 3 <_NSMainThread: 0x7b10000003c0>{number = 1, name = main}\n```\n**Note:**   \nAfter modifying the image with async-let, fetchImage hangs, and the thread continues to perform other tasks until it encounters await, and fetchImage will not execute, which is why print2 executes before fetchImage. So async-let is a concurrent binding mechanism to achieve asynchronous concurrency.\n\n#### <font size=3 color=#4169E1>4. Conversion between asynchronous and synchronous functions</font>\nAsynchronous function types differ from synchronous function types. However, there exists an implicit conversion from a synchronous function type to the corresponding asynchronous function type. The approximate rules for combining 'throw' are as follows:\n```Swift\nstruct FunctionTypes {\n  var syncNonThrowing: () -> Void\n  var syncThrowing: () throws -> Void\n  var asyncNonThrowing: () async -> Void\n  var asyncThrowing: () async throws -> Void\n  \n  mutating func demonstrateConversions() {\n    // Okay to add 'async' and/or 'throws'    \n    asyncNonThrowing = syncNonThrowing\n    asyncThrowing = syncThrowing\n    syncThrowing = syncNonThrowing\n    asyncThrowing = asyncNonThrowing\n    \n    // Error to remove 'async' or 'throws'\n    syncNonThrowing = asyncNonThrowing // error\n    syncThrowing = asyncThrowing       // error\n    syncNonThrowing = syncThrowing     // error\n    asyncNonThrowing = syncThrowing    // error\n  }\n}\n```\nAs you can see above, basically synchronous functions can be converted to asynchronous functions, but it doesn't work the other way around.\n\n#### <font size=3 color=gray>*Reference*</font>\n[1] https://cloud.tencent.com/developer/article/2191310     \n[2] https://juejin.cn/post/7025261081291407373      \n[3] https://juejin.cn/post/7076733264798416926     \n[4] https://github.com/apple/swift-evolution/blob/main/proposals/0296-async-await.md     \n","source":"_posts/Swift/07. Concurrency/01. Async and Await.md","raw":"---\ntitle: 01. Async and Await\ndate: 2023-08-23 10:00:00\ncategories: \n- [Swift, 07. Concurrency]\ntags:\n- async\n- await\n---\n\n<font color=gray size=2>*It will take about 10 minutes to finish reading this article.*</font>\n\n<!-- # **<font size=5 >Async and Await</font>** -->\n#### <font size=3 color=#4169E1>1. Description</font> \n \nIn Swift, async and await are keywords used for asynchronous programming, a cleaner, more readable way to handle asynchronous tasks. These are new features introduced in Swift 5.5 that make asynchronous code look more like synchronous code, and the use of async/await also naturally preserves the semantic structure of the code, providing the necessary support for at least three horizontal improvements: \n(1) Better performance for asynchronous code.   \n(2) Better tools that provide a more consistent experience when debugging, profiling, and exploring code.   \n(3) A foundation for future concurrency features.           \nIn short, they improve the maintainability and understandability of code.\n \n#### <font size=3 color=#4169E1>2. How to use async and await</font>  \n\n<font size=3 color=#4169E1>**2.1 async**</font>  \nA function can be declared as asynchronous by prefixing the return arrow of the function declaration with the async keyword:\n```Swift\nfunc loadSignature() async throws -> String {\n    do {\n        let signature = try await simulateSignatureLoading()\n        return signature\n    } catch {\n        throw CustomError.loadingError\n    }\n}\n```\nAn asynchronous function can pause execution when it encounters the await keyword and wait for an asynchronous operation to complete before resuming execution. \n\n<font size=3 color=#4169E1>**2.2 await**</font>  \nAwait is a keyword used to call asynchronous methods. When await is encountered, the execution of the function pauses until the asynchronous operation completes and returns the result.        \nHere's an example of using await to call an asynchronous function and wait for its result: \n```Swift\n\nfunc simulateSignatureLoading() async throws -> String {\n    // Simulate some asynchronous loading process, eg, from a network request or a file.\n    await Task.sleep(2_000_000_000) // Simulate a 2-second delay\n\n    let success = Bool.random() // Simulate successful or unsuccessful loading\n    if success {\n        let signature = \"This is my signature\"\n        return signature\n    } else {\n        throw CustomError.signatureNotFound\n    }\n}\n```\nSuspension mentioned above:         \n(1) The suspension is the method, not the thread that executes the method.      \n(2) Accurately await should be called a potential suspension point, not a suspension point, because not all await will be suspended, only encountered similar IO, manually start a sub-thread, etc. will suspend the current call stack.        \n(3) Before and after the pause point may occur before and after the thread switch, it is because of the asynchronous method before and after the pause point may change the thread of execution, so in the asynchronous method should be careful to use locks, semaphores and other synchronization operations.\n```Swift\nlet lock = NSLock.init()\nfunc test() async {\n  lock.lock()\n  try? await Task.sleep(nanoseconds: 1_000_000_000)\n  lock.unlock()\n}\n\nfor i in 0..<10 {\n  Task {\n    await test()\n  }\n}\n```\nCode like the above generates a deadlock at lock.lock(), as does switching to a semaphore.      \nNote:       \n async-await is often used companionally in Swift and can be thought of as simply this:         \n\"await is always waiting for a response from its partner, async.\"\n\n\n#### <font size=3 color=#4169E1>3. Application of async-await</font>  \n<font size=3 color=#4169E1>**3.1 Replaces traditional closure callbacks (Asynchronous serial)**</font>  \nTraditional closure callbacks are common in Swift for returning from an asynchronous task, usually in combination with a parameter of type result, as follows:\n```Swift\nfunc fetchImages(completion: ([UIImage]?, Error?) -> Void) {\n    // .. Execution of data requests\n}\n```\nOr\n```Swift\n\nfunc fetchImages(completion: (Result<[UIImage], Error>) -> Void) {\n    // .. Execution of data requests\n}\n```\nWhile this approach is still common, it can have several drawbacks:         \n(1) You have to make sure you call completion closures in every possible exit method.       \n(2) Closure code is often too deeply nested, optional types must be unwrapped, etc., making it harder to read and debug.    \n(3) You need to use weak references to avoid circular references.    \n(4) Implementers need to switch on results to get results (Block callbacks) and cannot use try catch statements from the implementation level.    \nThe fetchImages function above can simply be replaced with async/await as:\n```Swift\nfunc fetchImages() async throws -> [UIImage] {\n    // Simulate asynchronous operations, such as requesting image data from the web\n    return await withCheckedThrowingContinuation { continuation in\n        DispatchQueue.global().async {\n            // Perform an asynchronous operation to get images and errors\n            let images: [UIImage] = []\n            let error: Error? = nil\n\n            if let error = error {\n                continuation.resume(throwing: error)\n            } else {\n                continuation.resume(returning: images)\n            }\n        }\n    }\n}\n```\n```Swift\n\nasync func imagesData() {\n    do {\n        let images = try await fetchImages()\n        // This is where the fetched images are processed\n    } catch {\n        // Handling error\n    }\n}\n\nTask {\n    await imagesData()\n}\n\n```\n**Note 1:**   \nWhen adopting async-await in an existing project, you should be careful not to break all the code at once. When doing such a large-scale refactoring, it's best to consider maintaining the old implementation for the time being so that you don't have to update all the code until you know if the new implementation is stable enough. \nExample:\n```Swift\nstruct ImageFetcher {\n    @available(*, renamed: \"fetchImages()\")\n    func fetchImages(completion: (Result<[UIImage], Error>) -> Void) {\n    \n    }\n    func fetchImages() async throws -> [UIImage] {\n        // .. Execution of data requests\n    }\n}\n```\nThe asynchronous alternative refactoring option is added here, which still retains the old implementation, but adds an available attribute. If you want Xcode's deprecation warning, you can change it to:\n```Swift\n@available(*, deprecated, renamed: \"fetchImages()\")\n```\nThis way you can optimize your code incrementally without having to refactor your entire project at once.\n\n**Note 2:**\nIn the above code, the Result enumeration is also optimized together. Yes, async-await can greatly reduce the use of Result enumerations.\n\n<font size=3 color=#4169E1>**3.2 async-let (asynchronous parallelism)**</font>  \nLet's take a look at the following application for async-await:\n```Swift\nfunc fetchImage(from url: URL) async throws -> UIImage {\n    // Simulate asynchronous downloading of images\n    print(\"fetchImage----- begin \\(Thread.current)\")\n    await Task.sleep(1_000_000_000) // Simulates 1 second download time\n    let data = try await URLSession.shared.data(from: url)\n    guard let image = UIImage(data: data) else {\n        throw NSError(domain: \"ImageDownloadError\", code: 0, userInfo: [NSLocalizedDescriptionKey: \"Failed to download image\"])\n    }\n    print(\"fetchImage----- end \\(Thread.current)\")\n    return image\n}\n```\n```Swift\nfunc downloadImages() async {\n    let imageURLs = [\n        URL(string: \"https://example.com/image1.jpg\")!,\n        URL(string: \"https://example.com/image2.jpg\")!,\n        URL(string: \"https://example.com/image3.jpg\")!\n    ]\n    \n    do {\n        let image1 = await fetchImage(from: imageURLs[0])\n        print(\"Downloaded image 1:\", image1)\n        let image2 = await fetchImage(from: imageURLs[1])\n        print(\"Downloaded image 2:\", image2)\n        let image3 = await fetchImage(from: imageURLs[2])\n        print(\"Downloaded image 3:\", image3)\n        \n    } catch {\n      \n    }\n}\n\nTask {\n    await downloadImages()\n}\n```\nThe 3 images in the example are downloaded serially one by one, using async-let can optimize this code for asynchronous parallelism:\n```Swift\nasync func downloadImages() {\n    let imageURLs = [\n        URL(string: \"https://example.com/image1.jpg\")!,\n        URL(string: \"https://example.com/image2.jpg\")!,\n        URL(string: \"https://example.com/image3.jpg\")!\n    ]\n    var images: [UIImage] = []\n    do {\n        print(\">>>>>>>>>> 1 \\(Thread.current)\")\n        async let fetchImage1 = fetchImage(from: imageURLs[0])\n        async let fetchImage2 = fetchImage(from: imageURLs[1])\n        async let fetchImage3 = fetchImage(from: imageURLs[2])\n        print(\">>>>>>>>>> 2 \\(Thread.current)\")\n        let (image1, image2, image3) = await (try fetchImage1, try fetchImage2, try fetchImage3)\n        print(\">>>>>>>>>> 3 \\(Thread.current)\")\n        images.append(contentsOf: [image1, image2, image3])\n     } catch {\n      \n     }\n}\n```\nThe result of the Print:\n```Swift\n>>>>>>>>>> 1 <_NSMainThread: 0x7b10000003c0>{number = 1, name = main}\n>>>>>>>>>> 2 <_NSMainThread: 0x7b10000003c0>{number = 1, name = main}\nfetchImage----- begin <NSThread: 0x7b1000043a40>{number = 6, name = (null)}\nfetchImage----- begin <NSThread: 0x7b1000046200>{number = 7, name = (null)}\nfetchImage----- begin <NSThread: 0x7b1000046200>{number = 7, name = (null)}\nfetchImage----- begin <NSThread: 0x7b1000043a40>{number = 6, name = (null)}\nfetchImage----- end <NSThread: 0x7b100004b700>{number = 3, name = (null)}\nfetchImage----- end <NSThread: 0x7b1000048ac0>{number = 4, name = (null)}\nfetchImage----- end <NSThread: 0x7b100004b700>{number = 3, name = (null)}\nfetchImage----- end <NSThread: 0x7b1000046200>{number = 7, name = (null)}\n>>>>>>>>>> 3 <_NSMainThread: 0x7b10000003c0>{number = 1, name = main}\n```\n**Note:**   \nAfter modifying the image with async-let, fetchImage hangs, and the thread continues to perform other tasks until it encounters await, and fetchImage will not execute, which is why print2 executes before fetchImage. So async-let is a concurrent binding mechanism to achieve asynchronous concurrency.\n\n#### <font size=3 color=#4169E1>4. Conversion between asynchronous and synchronous functions</font>\nAsynchronous function types differ from synchronous function types. However, there exists an implicit conversion from a synchronous function type to the corresponding asynchronous function type. The approximate rules for combining 'throw' are as follows:\n```Swift\nstruct FunctionTypes {\n  var syncNonThrowing: () -> Void\n  var syncThrowing: () throws -> Void\n  var asyncNonThrowing: () async -> Void\n  var asyncThrowing: () async throws -> Void\n  \n  mutating func demonstrateConversions() {\n    // Okay to add 'async' and/or 'throws'    \n    asyncNonThrowing = syncNonThrowing\n    asyncThrowing = syncThrowing\n    syncThrowing = syncNonThrowing\n    asyncThrowing = asyncNonThrowing\n    \n    // Error to remove 'async' or 'throws'\n    syncNonThrowing = asyncNonThrowing // error\n    syncThrowing = asyncThrowing       // error\n    syncNonThrowing = syncThrowing     // error\n    asyncNonThrowing = syncThrowing    // error\n  }\n}\n```\nAs you can see above, basically synchronous functions can be converted to asynchronous functions, but it doesn't work the other way around.\n\n#### <font size=3 color=gray>*Reference*</font>\n[1] https://cloud.tencent.com/developer/article/2191310     \n[2] https://juejin.cn/post/7025261081291407373      \n[3] https://juejin.cn/post/7076733264798416926     \n[4] https://github.com/apple/swift-evolution/blob/main/proposals/0296-async-await.md     \n","slug":"Swift/07. Concurrency/01. Async and Await","published":1,"updated":"2023-08-23T18:33:47.071Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr5s003vvu0m5ndi3o35","content":"<p><font color=gray size=2><em>It will take about 10 minutes to finish reading this article.</em></font></p>\n<!-- # **<font size=5 >Async and Await</font>** -->\n<h4 id=\"1-Description\"><a href=\"#1-Description\" class=\"headerlink\" title=\"1. Description\"></a><font size=3 color=#4169E1>1. Description</font></h4><p>In Swift, async and await are keywords used for asynchronous programming, a cleaner, more readable way to handle asynchronous tasks. These are new features introduced in Swift 5.5 that make asynchronous code look more like synchronous code, and the use of async&#x2F;await also naturally preserves the semantic structure of the code, providing the necessary support for at least three horizontal improvements:<br>(1) Better performance for asynchronous code.<br>(2) Better tools that provide a more consistent experience when debugging, profiling, and exploring code.<br>(3) A foundation for future concurrency features.<br>In short, they improve the maintainability and understandability of code.</p>\n<h4 id=\"2-How-to-use-async-and-await\"><a href=\"#2-How-to-use-async-and-await\" class=\"headerlink\" title=\"2. How to use async and await\"></a><font size=3 color=#4169E1>2. How to use async and await</font></h4><p><font size=3 color=#4169E1><strong>2.1 async</strong></font><br>A function can be declared as asynchronous by prefixing the return arrow of the function declaration with the async keyword:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">loadSignature</span>() <span class=\"keyword\">async</span> <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> signature <span class=\"operator\">=</span> <span class=\"keyword\">try</span> <span class=\"keyword\">await</span> simulateSignatureLoading()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> signature</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"type\">CustomError</span>.loadingError</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>An asynchronous function can pause execution when it encounters the await keyword and wait for an asynchronous operation to complete before resuming execution. </p>\n<p><font size=3 color=#4169E1><strong>2.2 await</strong></font><br>Await is a keyword used to call asynchronous methods. When await is encountered, the execution of the function pauses until the asynchronous operation completes and returns the result.<br>Here’s an example of using await to call an asynchronous function and wait for its result: </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">simulateSignatureLoading</span>() <span class=\"keyword\">async</span> <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Simulate some asynchronous loading process, eg, from a network request or a file.</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"type\">Task</span>.sleep(<span class=\"number\">2_000_000_000</span>) <span class=\"comment\">// Simulate a 2-second delay</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> success <span class=\"operator\">=</span> <span class=\"type\">Bool</span>.random() <span class=\"comment\">// Simulate successful or unsuccessful loading</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> success &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> signature <span class=\"operator\">=</span> <span class=\"string\">&quot;This is my signature&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> signature</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"type\">CustomError</span>.signatureNotFound</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Suspension mentioned above:<br>(1) The suspension is the method, not the thread that executes the method.<br>(2) Accurately await should be called a potential suspension point, not a suspension point, because not all await will be suspended, only encountered similar IO, manually start a sub-thread, etc. will suspend the current call stack.<br>(3) Before and after the pause point may occur before and after the thread switch, it is because of the asynchronous method before and after the pause point may change the thread of execution, so in the asynchronous method should be careful to use locks, semaphores and other synchronization operations.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> lock <span class=\"operator\">=</span> <span class=\"type\">NSLock</span>.<span class=\"keyword\">init</span>()</span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">test</span>() <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">  lock.lock()</span><br><span class=\"line\">  <span class=\"keyword\">try?</span> <span class=\"keyword\">await</span> <span class=\"type\">Task</span>.sleep(nanoseconds: <span class=\"number\">1_000_000_000</span>)</span><br><span class=\"line\">  lock.unlock()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">0</span><span class=\"operator\">..&lt;</span><span class=\"number\">10</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">Task</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> test()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Code like the above generates a deadlock at lock.lock(), as does switching to a semaphore.<br>Note:<br> async-await is often used companionally in Swift and can be thought of as simply this:<br>“await is always waiting for a response from its partner, async.”</p>\n<h4 id=\"3-Application-of-async-await\"><a href=\"#3-Application-of-async-await\" class=\"headerlink\" title=\"3. Application of async-await\"></a><font size=3 color=#4169E1>3. Application of async-await</font></h4><p><font size=3 color=#4169E1><strong>3.1 Replaces traditional closure callbacks (Asynchronous serial)</strong></font><br>Traditional closure callbacks are common in Swift for returning from an asynchronous task, usually in combination with a parameter of type result, as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">fetchImages</span>(<span class=\"params\">completion</span>: ([<span class=\"type\">UIImage</span>]<span class=\"operator\">?</span>, <span class=\"type\">Error</span>?) -&gt; <span class=\"type\">Void</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// .. Execution of data requests</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Or</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">fetchImages</span>(<span class=\"params\">completion</span>: (<span class=\"type\">Result</span>&lt;[<span class=\"type\">UIImage</span>], <span class=\"type\">Error</span>&gt;) -&gt; <span class=\"type\">Void</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// .. Execution of data requests</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>While this approach is still common, it can have several drawbacks:<br>(1) You have to make sure you call completion closures in every possible exit method.<br>(2) Closure code is often too deeply nested, optional types must be unwrapped, etc., making it harder to read and debug.<br>(3) You need to use weak references to avoid circular references.<br>(4) Implementers need to switch on results to get results (Block callbacks) and cannot use try catch statements from the implementation level.<br>The fetchImages function above can simply be replaced with async&#x2F;await as:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">fetchImages</span>() <span class=\"keyword\">async</span> <span class=\"keyword\">throws</span> -&gt; [<span class=\"type\">UIImage</span>] &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Simulate asynchronous operations, such as requesting image data from the web</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> withCheckedThrowingContinuation &#123; continuation <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"type\">DispatchQueue</span>.global().async &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Perform an asynchronous operation to get images and errors</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> images: [<span class=\"type\">UIImage</span>] <span class=\"operator\">=</span> []</span><br><span class=\"line\">            <span class=\"keyword\">let</span> error: <span class=\"type\">Error</span>? <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> error <span class=\"operator\">=</span> error &#123;</span><br><span class=\"line\">                continuation.resume(throwing: error)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                continuation.resume(returning: images)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">func</span> <span class=\"title function_\">imagesData</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> images <span class=\"operator\">=</span> <span class=\"keyword\">try</span> <span class=\"keyword\">await</span> fetchImages()</span><br><span class=\"line\">        <span class=\"comment\">// This is where the fetched images are processed</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Handling error</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Task</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> imagesData()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>Note 1:</strong><br>When adopting async-await in an existing project, you should be careful not to break all the code at once. When doing such a large-scale refactoring, it’s best to consider maintaining the old implementation for the time being so that you don’t have to update all the code until you know if the new implementation is stable enough.<br>Example:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ImageFetcher</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">@available</span>(<span class=\"operator\">*</span>, renamed: <span class=\"string\">&quot;fetchImages()&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">fetchImages</span>(<span class=\"params\">completion</span>: (<span class=\"type\">Result</span>&lt;[<span class=\"type\">UIImage</span>], <span class=\"type\">Error</span>&gt;) -&gt; <span class=\"type\">Void</span>) &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">fetchImages</span>() <span class=\"keyword\">async</span> <span class=\"keyword\">throws</span> -&gt; [<span class=\"type\">UIImage</span>] &#123;</span><br><span class=\"line\">        <span class=\"comment\">// .. Execution of data requests</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The asynchronous alternative refactoring option is added here, which still retains the old implementation, but adds an available attribute. If you want Xcode’s deprecation warning, you can change it to:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@available</span>(<span class=\"operator\">*</span>, deprecated, renamed: <span class=\"string\">&quot;fetchImages()&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>This way you can optimize your code incrementally without having to refactor your entire project at once.</p>\n<p><strong>Note 2:</strong><br>In the above code, the Result enumeration is also optimized together. Yes, async-await can greatly reduce the use of Result enumerations.</p>\n<p><font size=3 color=#4169E1><strong>3.2 async-let (asynchronous parallelism)</strong></font><br>Let’s take a look at the following application for async-await:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">fetchImage</span>(<span class=\"params\">from</span> <span class=\"params\">url</span>: <span class=\"type\">URL</span>) <span class=\"keyword\">async</span> <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">UIImage</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Simulate asynchronous downloading of images</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;fetchImage----- begin <span class=\"subst\">\\(Thread.current)</span>&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"type\">Task</span>.sleep(<span class=\"number\">1_000_000_000</span>) <span class=\"comment\">// Simulates 1 second download time</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> data <span class=\"operator\">=</span> <span class=\"keyword\">try</span> <span class=\"keyword\">await</span> <span class=\"type\">URLSession</span>.shared.data(from: url)</span><br><span class=\"line\">    <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> image <span class=\"operator\">=</span> <span class=\"type\">UIImage</span>(data: data) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"type\">NSError</span>(domain: <span class=\"string\">&quot;ImageDownloadError&quot;</span>, code: <span class=\"number\">0</span>, userInfo: [NSLocalizedDescriptionKey: <span class=\"string\">&quot;Failed to download image&quot;</span>])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;fetchImage----- end <span class=\"subst\">\\(Thread.current)</span>&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> image</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">downloadImages</span>() <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> imageURLs <span class=\"operator\">=</span> [</span><br><span class=\"line\">        <span class=\"type\">URL</span>(string: <span class=\"string\">&quot;https://example.com/image1.jpg&quot;</span>)<span class=\"operator\">!</span>,</span><br><span class=\"line\">        <span class=\"type\">URL</span>(string: <span class=\"string\">&quot;https://example.com/image2.jpg&quot;</span>)<span class=\"operator\">!</span>,</span><br><span class=\"line\">        <span class=\"type\">URL</span>(string: <span class=\"string\">&quot;https://example.com/image3.jpg&quot;</span>)<span class=\"operator\">!</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> image1 <span class=\"operator\">=</span> <span class=\"keyword\">await</span> fetchImage(from: imageURLs[<span class=\"number\">0</span>])</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Downloaded image 1:&quot;</span>, image1)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> image2 <span class=\"operator\">=</span> <span class=\"keyword\">await</span> fetchImage(from: imageURLs[<span class=\"number\">1</span>])</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Downloaded image 2:&quot;</span>, image2)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> image3 <span class=\"operator\">=</span> <span class=\"keyword\">await</span> fetchImage(from: imageURLs[<span class=\"number\">2</span>])</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Downloaded image 3:&quot;</span>, image3)</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">      </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Task</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> downloadImages()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The 3 images in the example are downloaded serially one by one, using async-let can optimize this code for asynchronous parallelism:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">func</span> <span class=\"title function_\">downloadImages</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> imageURLs <span class=\"operator\">=</span> [</span><br><span class=\"line\">        <span class=\"type\">URL</span>(string: <span class=\"string\">&quot;https://example.com/image1.jpg&quot;</span>)<span class=\"operator\">!</span>,</span><br><span class=\"line\">        <span class=\"type\">URL</span>(string: <span class=\"string\">&quot;https://example.com/image2.jpg&quot;</span>)<span class=\"operator\">!</span>,</span><br><span class=\"line\">        <span class=\"type\">URL</span>(string: <span class=\"string\">&quot;https://example.com/image3.jpg&quot;</span>)<span class=\"operator\">!</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">    <span class=\"keyword\">var</span> images: [<span class=\"type\">UIImage</span>] <span class=\"operator\">=</span> []</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 1 <span class=\"subst\">\\(Thread.current)</span>&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">async</span> <span class=\"keyword\">let</span> fetchImage1 <span class=\"operator\">=</span> fetchImage(from: imageURLs[<span class=\"number\">0</span>])</span><br><span class=\"line\">        <span class=\"keyword\">async</span> <span class=\"keyword\">let</span> fetchImage2 <span class=\"operator\">=</span> fetchImage(from: imageURLs[<span class=\"number\">1</span>])</span><br><span class=\"line\">        <span class=\"keyword\">async</span> <span class=\"keyword\">let</span> fetchImage3 <span class=\"operator\">=</span> fetchImage(from: imageURLs[<span class=\"number\">2</span>])</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 2 <span class=\"subst\">\\(Thread.current)</span>&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> (image1, image2, image3) <span class=\"operator\">=</span> <span class=\"keyword\">await</span> (<span class=\"keyword\">try</span> fetchImage1, <span class=\"keyword\">try</span> fetchImage2, <span class=\"keyword\">try</span> fetchImage3)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 3 <span class=\"subst\">\\(Thread.current)</span>&quot;</span>)</span><br><span class=\"line\">        images.append(contentsOf: [image1, image2, image3])</span><br><span class=\"line\">     &#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">      </span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The result of the Print:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span> <span class=\"number\">1</span> <span class=\"operator\">&lt;</span>_NSMainThread: <span class=\"number\">0x7b10000003c0</span><span class=\"operator\">&gt;</span>&#123;number <span class=\"operator\">=</span> <span class=\"number\">1</span>, name <span class=\"operator\">=</span> main&#125;</span><br><span class=\"line\"><span class=\"operator\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span> <span class=\"number\">2</span> <span class=\"operator\">&lt;</span>_NSMainThread: <span class=\"number\">0x7b10000003c0</span><span class=\"operator\">&gt;</span>&#123;number <span class=\"operator\">=</span> <span class=\"number\">1</span>, name <span class=\"operator\">=</span> main&#125;</span><br><span class=\"line\">fetchImage<span class=\"operator\">-----</span> begin <span class=\"operator\">&lt;</span><span class=\"type\">NSThread</span>: <span class=\"number\">0x7b1000043a40</span><span class=\"operator\">&gt;</span>&#123;number <span class=\"operator\">=</span> <span class=\"number\">6</span>, name <span class=\"operator\">=</span> (null)&#125;</span><br><span class=\"line\">fetchImage<span class=\"operator\">-----</span> begin <span class=\"operator\">&lt;</span><span class=\"type\">NSThread</span>: <span class=\"number\">0x7b1000046200</span><span class=\"operator\">&gt;</span>&#123;number <span class=\"operator\">=</span> <span class=\"number\">7</span>, name <span class=\"operator\">=</span> (null)&#125;</span><br><span class=\"line\">fetchImage<span class=\"operator\">-----</span> begin <span class=\"operator\">&lt;</span><span class=\"type\">NSThread</span>: <span class=\"number\">0x7b1000046200</span><span class=\"operator\">&gt;</span>&#123;number <span class=\"operator\">=</span> <span class=\"number\">7</span>, name <span class=\"operator\">=</span> (null)&#125;</span><br><span class=\"line\">fetchImage<span class=\"operator\">-----</span> begin <span class=\"operator\">&lt;</span><span class=\"type\">NSThread</span>: <span class=\"number\">0x7b1000043a40</span><span class=\"operator\">&gt;</span>&#123;number <span class=\"operator\">=</span> <span class=\"number\">6</span>, name <span class=\"operator\">=</span> (null)&#125;</span><br><span class=\"line\">fetchImage<span class=\"operator\">-----</span> end <span class=\"operator\">&lt;</span><span class=\"type\">NSThread</span>: <span class=\"number\">0x7b100004b700</span><span class=\"operator\">&gt;</span>&#123;number <span class=\"operator\">=</span> <span class=\"number\">3</span>, name <span class=\"operator\">=</span> (null)&#125;</span><br><span class=\"line\">fetchImage<span class=\"operator\">-----</span> end <span class=\"operator\">&lt;</span><span class=\"type\">NSThread</span>: <span class=\"number\">0x7b1000048ac0</span><span class=\"operator\">&gt;</span>&#123;number <span class=\"operator\">=</span> <span class=\"number\">4</span>, name <span class=\"operator\">=</span> (null)&#125;</span><br><span class=\"line\">fetchImage<span class=\"operator\">-----</span> end <span class=\"operator\">&lt;</span><span class=\"type\">NSThread</span>: <span class=\"number\">0x7b100004b700</span><span class=\"operator\">&gt;</span>&#123;number <span class=\"operator\">=</span> <span class=\"number\">3</span>, name <span class=\"operator\">=</span> (null)&#125;</span><br><span class=\"line\">fetchImage<span class=\"operator\">-----</span> end <span class=\"operator\">&lt;</span><span class=\"type\">NSThread</span>: <span class=\"number\">0x7b1000046200</span><span class=\"operator\">&gt;</span>&#123;number <span class=\"operator\">=</span> <span class=\"number\">7</span>, name <span class=\"operator\">=</span> (null)&#125;</span><br><span class=\"line\"><span class=\"operator\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span> <span class=\"number\">3</span> <span class=\"operator\">&lt;</span>_NSMainThread: <span class=\"number\">0x7b10000003c0</span><span class=\"operator\">&gt;</span>&#123;number <span class=\"operator\">=</span> <span class=\"number\">1</span>, name <span class=\"operator\">=</span> main&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>Note:</strong><br>After modifying the image with async-let, fetchImage hangs, and the thread continues to perform other tasks until it encounters await, and fetchImage will not execute, which is why print2 executes before fetchImage. So async-let is a concurrent binding mechanism to achieve asynchronous concurrency.</p>\n<h4 id=\"4-Conversion-between-asynchronous-and-synchronous-functions\"><a href=\"#4-Conversion-between-asynchronous-and-synchronous-functions\" class=\"headerlink\" title=\"4. Conversion between asynchronous and synchronous functions\"></a><font size=3 color=#4169E1>4. Conversion between asynchronous and synchronous functions</font></h4><p>Asynchronous function types differ from synchronous function types. However, there exists an implicit conversion from a synchronous function type to the corresponding asynchronous function type. The approximate rules for combining ‘throw’ are as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">FunctionTypes</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> syncNonThrowing: () -&gt; <span class=\"type\">Void</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> syncThrowing: () <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">Void</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> asyncNonThrowing: () <span class=\"keyword\">async</span> -&gt; <span class=\"type\">Void</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> asyncThrowing: () <span class=\"keyword\">async</span> <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">Void</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">demonstrateConversions</span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Okay to add &#x27;async&#x27; and/or &#x27;throws&#x27;    </span></span><br><span class=\"line\">    asyncNonThrowing <span class=\"operator\">=</span> syncNonThrowing</span><br><span class=\"line\">    asyncThrowing <span class=\"operator\">=</span> syncThrowing</span><br><span class=\"line\">    syncThrowing <span class=\"operator\">=</span> syncNonThrowing</span><br><span class=\"line\">    asyncThrowing <span class=\"operator\">=</span> asyncNonThrowing</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Error to remove &#x27;async&#x27; or &#x27;throws&#x27;</span></span><br><span class=\"line\">    syncNonThrowing <span class=\"operator\">=</span> asyncNonThrowing <span class=\"comment\">// error</span></span><br><span class=\"line\">    syncThrowing <span class=\"operator\">=</span> asyncThrowing       <span class=\"comment\">// error</span></span><br><span class=\"line\">    syncNonThrowing <span class=\"operator\">=</span> syncThrowing     <span class=\"comment\">// error</span></span><br><span class=\"line\">    asyncNonThrowing <span class=\"operator\">=</span> syncThrowing    <span class=\"comment\">// error</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>As you can see above, basically synchronous functions can be converted to asynchronous functions, but it doesn’t work the other way around.</p>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://cloud.tencent.com/developer/article/2191310\">https://cloud.tencent.com/developer/article/2191310</a><br>[2] <a href=\"https://juejin.cn/post/7025261081291407373\">https://juejin.cn/post/7025261081291407373</a><br>[3] <a href=\"https://juejin.cn/post/7076733264798416926\">https://juejin.cn/post/7076733264798416926</a><br>[4] <a href=\"https://github.com/apple/swift-evolution/blob/main/proposals/0296-async-await.md\">https://github.com/apple/swift-evolution/blob/main/proposals/0296-async-await.md</a>     </p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 10 minutes to finish reading this article.</em></font></p>\n<!-- # **<font size=5 >Async and Await</font>** -->\n<h4 id=\"1-Description\"><a href=\"#1-Description\" class=\"headerlink\" title=\"1. Description\"></a><font size=3 color=#4169E1>1. Description</font></h4><p>In Swift, async and await are keywords used for asynchronous programming, a cleaner, more readable way to handle asynchronous tasks. These are new features introduced in Swift 5.5 that make asynchronous code look more like synchronous code, and the use of async&#x2F;await also naturally preserves the semantic structure of the code, providing the necessary support for at least three horizontal improvements:<br>(1) Better performance for asynchronous code.<br>(2) Better tools that provide a more consistent experience when debugging, profiling, and exploring code.<br>(3) A foundation for future concurrency features.<br>In short, they improve the maintainability and understandability of code.</p>\n<h4 id=\"2-How-to-use-async-and-await\"><a href=\"#2-How-to-use-async-and-await\" class=\"headerlink\" title=\"2. How to use async and await\"></a><font size=3 color=#4169E1>2. How to use async and await</font></h4><p><font size=3 color=#4169E1><strong>2.1 async</strong></font><br>A function can be declared as asynchronous by prefixing the return arrow of the function declaration with the async keyword:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">loadSignature</span>() <span class=\"keyword\">async</span> <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> signature <span class=\"operator\">=</span> <span class=\"keyword\">try</span> <span class=\"keyword\">await</span> simulateSignatureLoading()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> signature</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"type\">CustomError</span>.loadingError</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>An asynchronous function can pause execution when it encounters the await keyword and wait for an asynchronous operation to complete before resuming execution. </p>\n<p><font size=3 color=#4169E1><strong>2.2 await</strong></font><br>Await is a keyword used to call asynchronous methods. When await is encountered, the execution of the function pauses until the asynchronous operation completes and returns the result.<br>Here’s an example of using await to call an asynchronous function and wait for its result: </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">simulateSignatureLoading</span>() <span class=\"keyword\">async</span> <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Simulate some asynchronous loading process, eg, from a network request or a file.</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"type\">Task</span>.sleep(<span class=\"number\">2_000_000_000</span>) <span class=\"comment\">// Simulate a 2-second delay</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> success <span class=\"operator\">=</span> <span class=\"type\">Bool</span>.random() <span class=\"comment\">// Simulate successful or unsuccessful loading</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> success &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> signature <span class=\"operator\">=</span> <span class=\"string\">&quot;This is my signature&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> signature</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"type\">CustomError</span>.signatureNotFound</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Suspension mentioned above:<br>(1) The suspension is the method, not the thread that executes the method.<br>(2) Accurately await should be called a potential suspension point, not a suspension point, because not all await will be suspended, only encountered similar IO, manually start a sub-thread, etc. will suspend the current call stack.<br>(3) Before and after the pause point may occur before and after the thread switch, it is because of the asynchronous method before and after the pause point may change the thread of execution, so in the asynchronous method should be careful to use locks, semaphores and other synchronization operations.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> lock <span class=\"operator\">=</span> <span class=\"type\">NSLock</span>.<span class=\"keyword\">init</span>()</span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">test</span>() <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">  lock.lock()</span><br><span class=\"line\">  <span class=\"keyword\">try?</span> <span class=\"keyword\">await</span> <span class=\"type\">Task</span>.sleep(nanoseconds: <span class=\"number\">1_000_000_000</span>)</span><br><span class=\"line\">  lock.unlock()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">0</span><span class=\"operator\">..&lt;</span><span class=\"number\">10</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">Task</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> test()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Code like the above generates a deadlock at lock.lock(), as does switching to a semaphore.<br>Note:<br> async-await is often used companionally in Swift and can be thought of as simply this:<br>“await is always waiting for a response from its partner, async.”</p>\n<h4 id=\"3-Application-of-async-await\"><a href=\"#3-Application-of-async-await\" class=\"headerlink\" title=\"3. Application of async-await\"></a><font size=3 color=#4169E1>3. Application of async-await</font></h4><p><font size=3 color=#4169E1><strong>3.1 Replaces traditional closure callbacks (Asynchronous serial)</strong></font><br>Traditional closure callbacks are common in Swift for returning from an asynchronous task, usually in combination with a parameter of type result, as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">fetchImages</span>(<span class=\"params\">completion</span>: ([<span class=\"type\">UIImage</span>]<span class=\"operator\">?</span>, <span class=\"type\">Error</span>?) -&gt; <span class=\"type\">Void</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// .. Execution of data requests</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Or</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">fetchImages</span>(<span class=\"params\">completion</span>: (<span class=\"type\">Result</span>&lt;[<span class=\"type\">UIImage</span>], <span class=\"type\">Error</span>&gt;) -&gt; <span class=\"type\">Void</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// .. Execution of data requests</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>While this approach is still common, it can have several drawbacks:<br>(1) You have to make sure you call completion closures in every possible exit method.<br>(2) Closure code is often too deeply nested, optional types must be unwrapped, etc., making it harder to read and debug.<br>(3) You need to use weak references to avoid circular references.<br>(4) Implementers need to switch on results to get results (Block callbacks) and cannot use try catch statements from the implementation level.<br>The fetchImages function above can simply be replaced with async&#x2F;await as:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">fetchImages</span>() <span class=\"keyword\">async</span> <span class=\"keyword\">throws</span> -&gt; [<span class=\"type\">UIImage</span>] &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Simulate asynchronous operations, such as requesting image data from the web</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> withCheckedThrowingContinuation &#123; continuation <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"type\">DispatchQueue</span>.global().async &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Perform an asynchronous operation to get images and errors</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> images: [<span class=\"type\">UIImage</span>] <span class=\"operator\">=</span> []</span><br><span class=\"line\">            <span class=\"keyword\">let</span> error: <span class=\"type\">Error</span>? <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> error <span class=\"operator\">=</span> error &#123;</span><br><span class=\"line\">                continuation.resume(throwing: error)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                continuation.resume(returning: images)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">func</span> <span class=\"title function_\">imagesData</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> images <span class=\"operator\">=</span> <span class=\"keyword\">try</span> <span class=\"keyword\">await</span> fetchImages()</span><br><span class=\"line\">        <span class=\"comment\">// This is where the fetched images are processed</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Handling error</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Task</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> imagesData()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>Note 1:</strong><br>When adopting async-await in an existing project, you should be careful not to break all the code at once. When doing such a large-scale refactoring, it’s best to consider maintaining the old implementation for the time being so that you don’t have to update all the code until you know if the new implementation is stable enough.<br>Example:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ImageFetcher</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">@available</span>(<span class=\"operator\">*</span>, renamed: <span class=\"string\">&quot;fetchImages()&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">fetchImages</span>(<span class=\"params\">completion</span>: (<span class=\"type\">Result</span>&lt;[<span class=\"type\">UIImage</span>], <span class=\"type\">Error</span>&gt;) -&gt; <span class=\"type\">Void</span>) &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">fetchImages</span>() <span class=\"keyword\">async</span> <span class=\"keyword\">throws</span> -&gt; [<span class=\"type\">UIImage</span>] &#123;</span><br><span class=\"line\">        <span class=\"comment\">// .. Execution of data requests</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The asynchronous alternative refactoring option is added here, which still retains the old implementation, but adds an available attribute. If you want Xcode’s deprecation warning, you can change it to:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@available</span>(<span class=\"operator\">*</span>, deprecated, renamed: <span class=\"string\">&quot;fetchImages()&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>This way you can optimize your code incrementally without having to refactor your entire project at once.</p>\n<p><strong>Note 2:</strong><br>In the above code, the Result enumeration is also optimized together. Yes, async-await can greatly reduce the use of Result enumerations.</p>\n<p><font size=3 color=#4169E1><strong>3.2 async-let (asynchronous parallelism)</strong></font><br>Let’s take a look at the following application for async-await:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">fetchImage</span>(<span class=\"params\">from</span> <span class=\"params\">url</span>: <span class=\"type\">URL</span>) <span class=\"keyword\">async</span> <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">UIImage</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Simulate asynchronous downloading of images</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;fetchImage----- begin <span class=\"subst\">\\(Thread.current)</span>&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"type\">Task</span>.sleep(<span class=\"number\">1_000_000_000</span>) <span class=\"comment\">// Simulates 1 second download time</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> data <span class=\"operator\">=</span> <span class=\"keyword\">try</span> <span class=\"keyword\">await</span> <span class=\"type\">URLSession</span>.shared.data(from: url)</span><br><span class=\"line\">    <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> image <span class=\"operator\">=</span> <span class=\"type\">UIImage</span>(data: data) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"type\">NSError</span>(domain: <span class=\"string\">&quot;ImageDownloadError&quot;</span>, code: <span class=\"number\">0</span>, userInfo: [NSLocalizedDescriptionKey: <span class=\"string\">&quot;Failed to download image&quot;</span>])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;fetchImage----- end <span class=\"subst\">\\(Thread.current)</span>&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> image</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">downloadImages</span>() <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> imageURLs <span class=\"operator\">=</span> [</span><br><span class=\"line\">        <span class=\"type\">URL</span>(string: <span class=\"string\">&quot;https://example.com/image1.jpg&quot;</span>)<span class=\"operator\">!</span>,</span><br><span class=\"line\">        <span class=\"type\">URL</span>(string: <span class=\"string\">&quot;https://example.com/image2.jpg&quot;</span>)<span class=\"operator\">!</span>,</span><br><span class=\"line\">        <span class=\"type\">URL</span>(string: <span class=\"string\">&quot;https://example.com/image3.jpg&quot;</span>)<span class=\"operator\">!</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> image1 <span class=\"operator\">=</span> <span class=\"keyword\">await</span> fetchImage(from: imageURLs[<span class=\"number\">0</span>])</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Downloaded image 1:&quot;</span>, image1)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> image2 <span class=\"operator\">=</span> <span class=\"keyword\">await</span> fetchImage(from: imageURLs[<span class=\"number\">1</span>])</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Downloaded image 2:&quot;</span>, image2)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> image3 <span class=\"operator\">=</span> <span class=\"keyword\">await</span> fetchImage(from: imageURLs[<span class=\"number\">2</span>])</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Downloaded image 3:&quot;</span>, image3)</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">      </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Task</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> downloadImages()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The 3 images in the example are downloaded serially one by one, using async-let can optimize this code for asynchronous parallelism:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">func</span> <span class=\"title function_\">downloadImages</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> imageURLs <span class=\"operator\">=</span> [</span><br><span class=\"line\">        <span class=\"type\">URL</span>(string: <span class=\"string\">&quot;https://example.com/image1.jpg&quot;</span>)<span class=\"operator\">!</span>,</span><br><span class=\"line\">        <span class=\"type\">URL</span>(string: <span class=\"string\">&quot;https://example.com/image2.jpg&quot;</span>)<span class=\"operator\">!</span>,</span><br><span class=\"line\">        <span class=\"type\">URL</span>(string: <span class=\"string\">&quot;https://example.com/image3.jpg&quot;</span>)<span class=\"operator\">!</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">    <span class=\"keyword\">var</span> images: [<span class=\"type\">UIImage</span>] <span class=\"operator\">=</span> []</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 1 <span class=\"subst\">\\(Thread.current)</span>&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">async</span> <span class=\"keyword\">let</span> fetchImage1 <span class=\"operator\">=</span> fetchImage(from: imageURLs[<span class=\"number\">0</span>])</span><br><span class=\"line\">        <span class=\"keyword\">async</span> <span class=\"keyword\">let</span> fetchImage2 <span class=\"operator\">=</span> fetchImage(from: imageURLs[<span class=\"number\">1</span>])</span><br><span class=\"line\">        <span class=\"keyword\">async</span> <span class=\"keyword\">let</span> fetchImage3 <span class=\"operator\">=</span> fetchImage(from: imageURLs[<span class=\"number\">2</span>])</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 2 <span class=\"subst\">\\(Thread.current)</span>&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> (image1, image2, image3) <span class=\"operator\">=</span> <span class=\"keyword\">await</span> (<span class=\"keyword\">try</span> fetchImage1, <span class=\"keyword\">try</span> fetchImage2, <span class=\"keyword\">try</span> fetchImage3)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 3 <span class=\"subst\">\\(Thread.current)</span>&quot;</span>)</span><br><span class=\"line\">        images.append(contentsOf: [image1, image2, image3])</span><br><span class=\"line\">     &#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">      </span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The result of the Print:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span> <span class=\"number\">1</span> <span class=\"operator\">&lt;</span>_NSMainThread: <span class=\"number\">0x7b10000003c0</span><span class=\"operator\">&gt;</span>&#123;number <span class=\"operator\">=</span> <span class=\"number\">1</span>, name <span class=\"operator\">=</span> main&#125;</span><br><span class=\"line\"><span class=\"operator\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span> <span class=\"number\">2</span> <span class=\"operator\">&lt;</span>_NSMainThread: <span class=\"number\">0x7b10000003c0</span><span class=\"operator\">&gt;</span>&#123;number <span class=\"operator\">=</span> <span class=\"number\">1</span>, name <span class=\"operator\">=</span> main&#125;</span><br><span class=\"line\">fetchImage<span class=\"operator\">-----</span> begin <span class=\"operator\">&lt;</span><span class=\"type\">NSThread</span>: <span class=\"number\">0x7b1000043a40</span><span class=\"operator\">&gt;</span>&#123;number <span class=\"operator\">=</span> <span class=\"number\">6</span>, name <span class=\"operator\">=</span> (null)&#125;</span><br><span class=\"line\">fetchImage<span class=\"operator\">-----</span> begin <span class=\"operator\">&lt;</span><span class=\"type\">NSThread</span>: <span class=\"number\">0x7b1000046200</span><span class=\"operator\">&gt;</span>&#123;number <span class=\"operator\">=</span> <span class=\"number\">7</span>, name <span class=\"operator\">=</span> (null)&#125;</span><br><span class=\"line\">fetchImage<span class=\"operator\">-----</span> begin <span class=\"operator\">&lt;</span><span class=\"type\">NSThread</span>: <span class=\"number\">0x7b1000046200</span><span class=\"operator\">&gt;</span>&#123;number <span class=\"operator\">=</span> <span class=\"number\">7</span>, name <span class=\"operator\">=</span> (null)&#125;</span><br><span class=\"line\">fetchImage<span class=\"operator\">-----</span> begin <span class=\"operator\">&lt;</span><span class=\"type\">NSThread</span>: <span class=\"number\">0x7b1000043a40</span><span class=\"operator\">&gt;</span>&#123;number <span class=\"operator\">=</span> <span class=\"number\">6</span>, name <span class=\"operator\">=</span> (null)&#125;</span><br><span class=\"line\">fetchImage<span class=\"operator\">-----</span> end <span class=\"operator\">&lt;</span><span class=\"type\">NSThread</span>: <span class=\"number\">0x7b100004b700</span><span class=\"operator\">&gt;</span>&#123;number <span class=\"operator\">=</span> <span class=\"number\">3</span>, name <span class=\"operator\">=</span> (null)&#125;</span><br><span class=\"line\">fetchImage<span class=\"operator\">-----</span> end <span class=\"operator\">&lt;</span><span class=\"type\">NSThread</span>: <span class=\"number\">0x7b1000048ac0</span><span class=\"operator\">&gt;</span>&#123;number <span class=\"operator\">=</span> <span class=\"number\">4</span>, name <span class=\"operator\">=</span> (null)&#125;</span><br><span class=\"line\">fetchImage<span class=\"operator\">-----</span> end <span class=\"operator\">&lt;</span><span class=\"type\">NSThread</span>: <span class=\"number\">0x7b100004b700</span><span class=\"operator\">&gt;</span>&#123;number <span class=\"operator\">=</span> <span class=\"number\">3</span>, name <span class=\"operator\">=</span> (null)&#125;</span><br><span class=\"line\">fetchImage<span class=\"operator\">-----</span> end <span class=\"operator\">&lt;</span><span class=\"type\">NSThread</span>: <span class=\"number\">0x7b1000046200</span><span class=\"operator\">&gt;</span>&#123;number <span class=\"operator\">=</span> <span class=\"number\">7</span>, name <span class=\"operator\">=</span> (null)&#125;</span><br><span class=\"line\"><span class=\"operator\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span> <span class=\"number\">3</span> <span class=\"operator\">&lt;</span>_NSMainThread: <span class=\"number\">0x7b10000003c0</span><span class=\"operator\">&gt;</span>&#123;number <span class=\"operator\">=</span> <span class=\"number\">1</span>, name <span class=\"operator\">=</span> main&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>Note:</strong><br>After modifying the image with async-let, fetchImage hangs, and the thread continues to perform other tasks until it encounters await, and fetchImage will not execute, which is why print2 executes before fetchImage. So async-let is a concurrent binding mechanism to achieve asynchronous concurrency.</p>\n<h4 id=\"4-Conversion-between-asynchronous-and-synchronous-functions\"><a href=\"#4-Conversion-between-asynchronous-and-synchronous-functions\" class=\"headerlink\" title=\"4. Conversion between asynchronous and synchronous functions\"></a><font size=3 color=#4169E1>4. Conversion between asynchronous and synchronous functions</font></h4><p>Asynchronous function types differ from synchronous function types. However, there exists an implicit conversion from a synchronous function type to the corresponding asynchronous function type. The approximate rules for combining ‘throw’ are as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">FunctionTypes</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> syncNonThrowing: () -&gt; <span class=\"type\">Void</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> syncThrowing: () <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">Void</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> asyncNonThrowing: () <span class=\"keyword\">async</span> -&gt; <span class=\"type\">Void</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> asyncThrowing: () <span class=\"keyword\">async</span> <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">Void</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">demonstrateConversions</span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Okay to add &#x27;async&#x27; and/or &#x27;throws&#x27;    </span></span><br><span class=\"line\">    asyncNonThrowing <span class=\"operator\">=</span> syncNonThrowing</span><br><span class=\"line\">    asyncThrowing <span class=\"operator\">=</span> syncThrowing</span><br><span class=\"line\">    syncThrowing <span class=\"operator\">=</span> syncNonThrowing</span><br><span class=\"line\">    asyncThrowing <span class=\"operator\">=</span> asyncNonThrowing</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Error to remove &#x27;async&#x27; or &#x27;throws&#x27;</span></span><br><span class=\"line\">    syncNonThrowing <span class=\"operator\">=</span> asyncNonThrowing <span class=\"comment\">// error</span></span><br><span class=\"line\">    syncThrowing <span class=\"operator\">=</span> asyncThrowing       <span class=\"comment\">// error</span></span><br><span class=\"line\">    syncNonThrowing <span class=\"operator\">=</span> syncThrowing     <span class=\"comment\">// error</span></span><br><span class=\"line\">    asyncNonThrowing <span class=\"operator\">=</span> syncThrowing    <span class=\"comment\">// error</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>As you can see above, basically synchronous functions can be converted to asynchronous functions, but it doesn’t work the other way around.</p>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://cloud.tencent.com/developer/article/2191310\">https://cloud.tencent.com/developer/article/2191310</a><br>[2] <a href=\"https://juejin.cn/post/7025261081291407373\">https://juejin.cn/post/7025261081291407373</a><br>[3] <a href=\"https://juejin.cn/post/7076733264798416926\">https://juejin.cn/post/7076733264798416926</a><br>[4] <a href=\"https://github.com/apple/swift-evolution/blob/main/proposals/0296-async-await.md\">https://github.com/apple/swift-evolution/blob/main/proposals/0296-async-await.md</a>     </p>\n"},{"title":"02. The use of Continuation","date":"2023-09-09T18:25:00.000Z","_content":"\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nContinuation is a mechanism used in Swift to handle asynchronous programming that helps developers write and manage asynchronous code more easily. In asynchronous programming, developers usually need to handle the results of asynchronous operations through callbacks, delegates, closures and other mechanisms. This can lead to poor code readability, difficult to manage and maintain, and is prone to Callback Hell. Continuations aims to solve these problems and provide a cleaner way of asynchronous programming.\n\nContinuation provides two functions, withUnsafeContinuation and withUnsafeThrowingContinuation, that allow callback-based APIs to be invoked from within the asynchronous code.Each of these functions receives an operation closure that will invoke the callback-based API.The closure receives a Continuation instance, which must be recovered by the callback to provide either the result value or (in the Throwing variant) the thrown error, which becomes the result of the withUnsafeContinuation call when the asynchronous task is resumed.\n\n**Sample code one:**\n```Swift\nclass CheckedContinuationBootcampNetworkManager {\n    \n    func getHeartImageFromDatabase(completionHandler: @escaping (_ image: UIImage) -> ()) {\n        DispatchQueue.main.asyncAfter(deadline: .now() + 5) {\n            completionHandler(UIImage(systemName: \"heart.fill\")!)\n        }\n    }\n    \n}\n```\nThe calling Code is as follows:\n```Swift\nlet networkManager = CheckedContinuationBootcampNetworkManager()\nnetworkManager.getHeartImageFromDatabase(completionHandler: { image in\n      self.image = image\n})\n```\nThe Code that using the Continuation is as follows:\n```Swift\nclass CheckedContinuationBootcampNetworkManager {\n    \n    func getHeartImageFromDatabase(completionHandler: @escaping (_ image: UIImage) -> ()) {\n        DispatchQueue.main.asyncAfter(deadline: .now() + 5) {\n            completionHandler(UIImage(systemName: \"heart.fill\")!)\n        }\n    }\n\n    //withCheckedContinuation is added here\n    func getHeartImageFromDatabase() async -> UIImage {\n        await withCheckedContinuation { continuation in\n            getHeartImageFromDatabase { image in\n                continuation.resume(returning: image)\n            }\n        }\n    }\n    \n}\n```\nThe calling code is as follows:\n```Swift\nself.image = await networkManager.getHeartImageFromDatabase()\n```\nThe Code below looks more cleaner.\n\n**Sample code two:**\n```Swift\nfunc getData(url: URL) async throws -> Data {\n    do {\n        let (data, _) = try await URLSession.shared.data(from: url, delegate: nil)\n        return data\n    } catch {\n        throw error\n    }\n}\n```\nAfter the optimization of the 'withCheckedThrowingContinuation':\n```Swift\nfunc getData2(url: URL) async throws -> Data {\n    return try await withCheckedThrowingContinuation { continuation in\n        URLSession.shared.dataTask(with: url) { data, response, error in\n            if let data = data {\n                continuation.resume(returning: data)\n            } else if let error = error {\n                continuation.resume(throwing: error)\n            } else {\n                continuation.resume(throwing: URLError(.badURL))\n            }\n        }\n        .resume()\n    }\n}\n```\n\n**Note:**  \nIn the continuation callback, 'resume' must be guaranteed once.\n\n#### <font size=3 color=gray>*Reference*</font>\n[1] https://github.com/apple/swift-evolution/blob/main/proposals/0300-continuation.md\n[2] https://www.youtube.com/watch?v=Tw_WLMIfEPQ&list=PLwvDm4Vfkdphr2Dl4sY4rS9PLzPdyi8PM&index=8\n","source":"_posts/Swift/07. Concurrency/02. The use of Continuation.md","raw":"---\ntitle: 02. The use of Continuation\ndate: 2023-09-09 20:25:00\ncategories: \n- [Swift, 07. Concurrency]\ntags:\n- Continuations\n---\n\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nContinuation is a mechanism used in Swift to handle asynchronous programming that helps developers write and manage asynchronous code more easily. In asynchronous programming, developers usually need to handle the results of asynchronous operations through callbacks, delegates, closures and other mechanisms. This can lead to poor code readability, difficult to manage and maintain, and is prone to Callback Hell. Continuations aims to solve these problems and provide a cleaner way of asynchronous programming.\n\nContinuation provides two functions, withUnsafeContinuation and withUnsafeThrowingContinuation, that allow callback-based APIs to be invoked from within the asynchronous code.Each of these functions receives an operation closure that will invoke the callback-based API.The closure receives a Continuation instance, which must be recovered by the callback to provide either the result value or (in the Throwing variant) the thrown error, which becomes the result of the withUnsafeContinuation call when the asynchronous task is resumed.\n\n**Sample code one:**\n```Swift\nclass CheckedContinuationBootcampNetworkManager {\n    \n    func getHeartImageFromDatabase(completionHandler: @escaping (_ image: UIImage) -> ()) {\n        DispatchQueue.main.asyncAfter(deadline: .now() + 5) {\n            completionHandler(UIImage(systemName: \"heart.fill\")!)\n        }\n    }\n    \n}\n```\nThe calling Code is as follows:\n```Swift\nlet networkManager = CheckedContinuationBootcampNetworkManager()\nnetworkManager.getHeartImageFromDatabase(completionHandler: { image in\n      self.image = image\n})\n```\nThe Code that using the Continuation is as follows:\n```Swift\nclass CheckedContinuationBootcampNetworkManager {\n    \n    func getHeartImageFromDatabase(completionHandler: @escaping (_ image: UIImage) -> ()) {\n        DispatchQueue.main.asyncAfter(deadline: .now() + 5) {\n            completionHandler(UIImage(systemName: \"heart.fill\")!)\n        }\n    }\n\n    //withCheckedContinuation is added here\n    func getHeartImageFromDatabase() async -> UIImage {\n        await withCheckedContinuation { continuation in\n            getHeartImageFromDatabase { image in\n                continuation.resume(returning: image)\n            }\n        }\n    }\n    \n}\n```\nThe calling code is as follows:\n```Swift\nself.image = await networkManager.getHeartImageFromDatabase()\n```\nThe Code below looks more cleaner.\n\n**Sample code two:**\n```Swift\nfunc getData(url: URL) async throws -> Data {\n    do {\n        let (data, _) = try await URLSession.shared.data(from: url, delegate: nil)\n        return data\n    } catch {\n        throw error\n    }\n}\n```\nAfter the optimization of the 'withCheckedThrowingContinuation':\n```Swift\nfunc getData2(url: URL) async throws -> Data {\n    return try await withCheckedThrowingContinuation { continuation in\n        URLSession.shared.dataTask(with: url) { data, response, error in\n            if let data = data {\n                continuation.resume(returning: data)\n            } else if let error = error {\n                continuation.resume(throwing: error)\n            } else {\n                continuation.resume(throwing: URLError(.badURL))\n            }\n        }\n        .resume()\n    }\n}\n```\n\n**Note:**  \nIn the continuation callback, 'resume' must be guaranteed once.\n\n#### <font size=3 color=gray>*Reference*</font>\n[1] https://github.com/apple/swift-evolution/blob/main/proposals/0300-continuation.md\n[2] https://www.youtube.com/watch?v=Tw_WLMIfEPQ&list=PLwvDm4Vfkdphr2Dl4sY4rS9PLzPdyi8PM&index=8\n","slug":"Swift/07. Concurrency/02. The use of Continuation","published":1,"updated":"2023-09-20T18:54:00.322Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr5t003yvu0mc32carb8","content":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>Continuation is a mechanism used in Swift to handle asynchronous programming that helps developers write and manage asynchronous code more easily. In asynchronous programming, developers usually need to handle the results of asynchronous operations through callbacks, delegates, closures and other mechanisms. This can lead to poor code readability, difficult to manage and maintain, and is prone to Callback Hell. Continuations aims to solve these problems and provide a cleaner way of asynchronous programming.</p>\n<p>Continuation provides two functions, withUnsafeContinuation and withUnsafeThrowingContinuation, that allow callback-based APIs to be invoked from within the asynchronous code.Each of these functions receives an operation closure that will invoke the callback-based API.The closure receives a Continuation instance, which must be recovered by the callback to provide either the result value or (in the Throwing variant) the thrown error, which becomes the result of the withUnsafeContinuation call when the asynchronous task is resumed.</p>\n<p><strong>Sample code one:</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CheckedContinuationBootcampNetworkManager</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">getHeartImageFromDatabase</span>(<span class=\"params\">completionHandler</span>: <span class=\"keyword\">@escaping</span> (<span class=\"keyword\">_</span> image: <span class=\"type\">UIImage</span>) -&gt; ()) &#123;</span><br><span class=\"line\">        <span class=\"type\">DispatchQueue</span>.main.asyncAfter(deadline: .now() <span class=\"operator\">+</span> <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">            completionHandler(<span class=\"type\">UIImage</span>(systemName: <span class=\"string\">&quot;heart.fill&quot;</span>)<span class=\"operator\">!</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The calling Code is as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> networkManager <span class=\"operator\">=</span> <span class=\"type\">CheckedContinuationBootcampNetworkManager</span>()</span><br><span class=\"line\">networkManager.getHeartImageFromDatabase(completionHandler: &#123; image <span class=\"keyword\">in</span></span><br><span class=\"line\">      <span class=\"keyword\">self</span>.image <span class=\"operator\">=</span> image</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>The Code that using the Continuation is as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CheckedContinuationBootcampNetworkManager</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">getHeartImageFromDatabase</span>(<span class=\"params\">completionHandler</span>: <span class=\"keyword\">@escaping</span> (<span class=\"keyword\">_</span> image: <span class=\"type\">UIImage</span>) -&gt; ()) &#123;</span><br><span class=\"line\">        <span class=\"type\">DispatchQueue</span>.main.asyncAfter(deadline: .now() <span class=\"operator\">+</span> <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">            completionHandler(<span class=\"type\">UIImage</span>(systemName: <span class=\"string\">&quot;heart.fill&quot;</span>)<span class=\"operator\">!</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//withCheckedContinuation is added here</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">getHeartImageFromDatabase</span>() <span class=\"keyword\">async</span> -&gt; <span class=\"type\">UIImage</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> withCheckedContinuation &#123; continuation <span class=\"keyword\">in</span></span><br><span class=\"line\">            getHeartImageFromDatabase &#123; image <span class=\"keyword\">in</span></span><br><span class=\"line\">                continuation.resume(returning: image)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The calling code is as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">self</span>.image <span class=\"operator\">=</span> <span class=\"keyword\">await</span> networkManager.getHeartImageFromDatabase()</span><br></pre></td></tr></table></figure>\n<p>The Code below looks more cleaner.</p>\n<p><strong>Sample code two:</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">getData</span>(<span class=\"params\">url</span>: <span class=\"type\">URL</span>) <span class=\"keyword\">async</span> <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">Data</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> (data, <span class=\"keyword\">_</span>) <span class=\"operator\">=</span> <span class=\"keyword\">try</span> <span class=\"keyword\">await</span> <span class=\"type\">URLSession</span>.shared.data(from: url, delegate: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> error</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>After the optimization of the ‘withCheckedThrowingContinuation’:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">getData2</span>(<span class=\"params\">url</span>: <span class=\"type\">URL</span>) <span class=\"keyword\">async</span> <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">Data</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">try</span> <span class=\"keyword\">await</span> withCheckedThrowingContinuation &#123; continuation <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"type\">URLSession</span>.shared.dataTask(with: url) &#123; data, response, error <span class=\"keyword\">in</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> data <span class=\"operator\">=</span> data &#123;</span><br><span class=\"line\">                continuation.resume(returning: data)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> error <span class=\"operator\">=</span> error &#123;</span><br><span class=\"line\">                continuation.resume(throwing: error)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                continuation.resume(throwing: <span class=\"type\">URLError</span>(.badURL))</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .resume()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Note:</strong><br>In the continuation callback, ‘resume’ must be guaranteed once.</p>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://github.com/apple/swift-evolution/blob/main/proposals/0300-continuation.md\">https://github.com/apple/swift-evolution/blob/main/proposals/0300-continuation.md</a><br>[2] <a href=\"https://www.youtube.com/watch?v=Tw_WLMIfEPQ&list=PLwvDm4Vfkdphr2Dl4sY4rS9PLzPdyi8PM&index=8\">https://www.youtube.com/watch?v=Tw_WLMIfEPQ&amp;list=PLwvDm4Vfkdphr2Dl4sY4rS9PLzPdyi8PM&amp;index=8</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>Continuation is a mechanism used in Swift to handle asynchronous programming that helps developers write and manage asynchronous code more easily. In asynchronous programming, developers usually need to handle the results of asynchronous operations through callbacks, delegates, closures and other mechanisms. This can lead to poor code readability, difficult to manage and maintain, and is prone to Callback Hell. Continuations aims to solve these problems and provide a cleaner way of asynchronous programming.</p>\n<p>Continuation provides two functions, withUnsafeContinuation and withUnsafeThrowingContinuation, that allow callback-based APIs to be invoked from within the asynchronous code.Each of these functions receives an operation closure that will invoke the callback-based API.The closure receives a Continuation instance, which must be recovered by the callback to provide either the result value or (in the Throwing variant) the thrown error, which becomes the result of the withUnsafeContinuation call when the asynchronous task is resumed.</p>\n<p><strong>Sample code one:</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CheckedContinuationBootcampNetworkManager</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">getHeartImageFromDatabase</span>(<span class=\"params\">completionHandler</span>: <span class=\"keyword\">@escaping</span> (<span class=\"keyword\">_</span> image: <span class=\"type\">UIImage</span>) -&gt; ()) &#123;</span><br><span class=\"line\">        <span class=\"type\">DispatchQueue</span>.main.asyncAfter(deadline: .now() <span class=\"operator\">+</span> <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">            completionHandler(<span class=\"type\">UIImage</span>(systemName: <span class=\"string\">&quot;heart.fill&quot;</span>)<span class=\"operator\">!</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The calling Code is as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> networkManager <span class=\"operator\">=</span> <span class=\"type\">CheckedContinuationBootcampNetworkManager</span>()</span><br><span class=\"line\">networkManager.getHeartImageFromDatabase(completionHandler: &#123; image <span class=\"keyword\">in</span></span><br><span class=\"line\">      <span class=\"keyword\">self</span>.image <span class=\"operator\">=</span> image</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>The Code that using the Continuation is as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CheckedContinuationBootcampNetworkManager</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">getHeartImageFromDatabase</span>(<span class=\"params\">completionHandler</span>: <span class=\"keyword\">@escaping</span> (<span class=\"keyword\">_</span> image: <span class=\"type\">UIImage</span>) -&gt; ()) &#123;</span><br><span class=\"line\">        <span class=\"type\">DispatchQueue</span>.main.asyncAfter(deadline: .now() <span class=\"operator\">+</span> <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">            completionHandler(<span class=\"type\">UIImage</span>(systemName: <span class=\"string\">&quot;heart.fill&quot;</span>)<span class=\"operator\">!</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//withCheckedContinuation is added here</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">getHeartImageFromDatabase</span>() <span class=\"keyword\">async</span> -&gt; <span class=\"type\">UIImage</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> withCheckedContinuation &#123; continuation <span class=\"keyword\">in</span></span><br><span class=\"line\">            getHeartImageFromDatabase &#123; image <span class=\"keyword\">in</span></span><br><span class=\"line\">                continuation.resume(returning: image)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The calling code is as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">self</span>.image <span class=\"operator\">=</span> <span class=\"keyword\">await</span> networkManager.getHeartImageFromDatabase()</span><br></pre></td></tr></table></figure>\n<p>The Code below looks more cleaner.</p>\n<p><strong>Sample code two:</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">getData</span>(<span class=\"params\">url</span>: <span class=\"type\">URL</span>) <span class=\"keyword\">async</span> <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">Data</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> (data, <span class=\"keyword\">_</span>) <span class=\"operator\">=</span> <span class=\"keyword\">try</span> <span class=\"keyword\">await</span> <span class=\"type\">URLSession</span>.shared.data(from: url, delegate: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> error</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>After the optimization of the ‘withCheckedThrowingContinuation’:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">getData2</span>(<span class=\"params\">url</span>: <span class=\"type\">URL</span>) <span class=\"keyword\">async</span> <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">Data</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">try</span> <span class=\"keyword\">await</span> withCheckedThrowingContinuation &#123; continuation <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"type\">URLSession</span>.shared.dataTask(with: url) &#123; data, response, error <span class=\"keyword\">in</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> data <span class=\"operator\">=</span> data &#123;</span><br><span class=\"line\">                continuation.resume(returning: data)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> error <span class=\"operator\">=</span> error &#123;</span><br><span class=\"line\">                continuation.resume(throwing: error)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                continuation.resume(throwing: <span class=\"type\">URLError</span>(.badURL))</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .resume()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Note:</strong><br>In the continuation callback, ‘resume’ must be guaranteed once.</p>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://github.com/apple/swift-evolution/blob/main/proposals/0300-continuation.md\">https://github.com/apple/swift-evolution/blob/main/proposals/0300-continuation.md</a><br>[2] <a href=\"https://www.youtube.com/watch?v=Tw_WLMIfEPQ&list=PLwvDm4Vfkdphr2Dl4sY4rS9PLzPdyi8PM&index=8\">https://www.youtube.com/watch?v=Tw_WLMIfEPQ&amp;list=PLwvDm4Vfkdphr2Dl4sY4rS9PLzPdyi8PM&amp;index=8</a></p>\n"},{"title":"03. Task","date":"2023-09-20T18:13:00.000Z","_content":"\n<font color=gray size=2>*It will take about 10 minutes to finish reading this article.*</font>\n\n#### <font size=3 color=#4169E1>1. Backgroud</font> \n \nasync/await are used to write natural, efficient asynchronous code. However, async/await does not have concurrency capabilities on its own, but asynchronous functions (introduced with async) can abort the executing thread at any given pause point (marked by await), which is necessary for building highly concurrent systems. Swift 5.5 introduces task, which is designed to provide concurrency.\n \n#### <font size=3 color=#4169E1>2. what exactly is Task?</font>  \n\nA task is the basic unit of concurrency; each asynchronous function executes in a task. When a function makes an asynchronous call, the called function still runs as part of the same task (the caller waits for the function to return).\n\nSimilarly, when the function returns from an asynchronous call, the caller continues to run in the same task. So tasks are different from threads in that they are a higher abstraction above threads, and the system is responsible for scheduling the execution of a task on the appropriate thread.\n\n\n<font size=3 color=#4169E1>**2.1 \"Task is to asynchronous functions as threads are to synchronous functions\"**</font>  \nSynchronized Functions and Threads\n\nIn traditional synchronous functions, code is executed sequentially, with one function call waiting for its internal operations to complete before moving on to the next function call. This model tends to cause the program to block when performing time-consuming operations, as the execution of one function may prevent the execution of subsequent functions. To solve this problem, multithreaded programming can be used. A thread is the smallest unit of execution scheduled by the operating system that executes different tasks in parallel, thus improving the concurrency and responsiveness of the program.\n\nAsynchronous functions and tasks\n\nAsynchronous functions, unlike synchronous functions, allow the program to continue performing other operations without blocking while waiting for time-consuming operations to complete. This is accomplished by using the \"await\" keyword, which allows a function to suspend while waiting for an operation to complete, and then resume execution once the operation completes.\n \n\n<font size=3 color=#4169E1>**2.2 State of the Task**</font>  \n\nTask has 3 states:\n\n(1) Suspended, suspended tasks are schedulable.\nThere are 2 situations that will cause the Task to be in a suspended state:\nFirst, the Task is ready and waiting for the system to allocate execution threads;\n\nSecond, wait for external events. For example, after a Task encounters a suspension point, it may enter a suspended state and wait for external events to wake up.\n\n(2) Running, the running task is currently running on a thread.\nIt will run until it returns from the initial function (completion) or reaches a pause point (pause).\n\n(3) Completed, the task has no work to do and will never enter any other state.\nCode can wait for tasks to complete in various ways, the main one being through await.\n\n<font size=3 color=#4169E1>**2.3 Some advanced uses of Task**</font>  \n\nTasks carry scheduling information, such as the priority of the task.\n\nTask is a handle through which operations such as cancellation and query can be performed.\n\nCan carry user-supplied task-local data.\n\n```Swift\nimport Foundation\n\nfunc performTask() {\n    let task = Task.detached(priority: .userInitiated) {\n        print(\"Task started with priority: \\(Task.currentPriority)\")\n\n        // Simulate a long-running task\n        for i in 1...5 {\n            if Task.isCancelled {\n                print(\"Task was cancelled\")\n                return\n            }\n\n            print(\"Task processing step \\(i)\")\n            sleep(1)\n        }\n\n        print(\"Task completed\")\n    }\n\n    // Cancel the task after 3 seconds\n    DispatchQueue.global().asyncAfter(deadline: .now() + 3) {\n        task.cancel()\n    }\n\n    // Wait for the task to complete or be cancelled\n    task.value?.waitForCancellation()\n    print(\"Task finished or cancelled\")\n}\n\nperformTask()\n```\n\nIn this example, we demonstrate how to use task handles to implement tasks such as priority, cancellation, and query operations.\n\n<font size=3 color=#4169E1>**2.4 child task**</font>  \n\nAsynchronous functions can create child tasks. The child task inherits part of the structure of the parent task, including priority, but can run concurrently with the parent task. However, this concurrency has limits. This kind of parent-child relationship between Tasks has the following characteristics:\n\n(1) The life cycle of the child Task will not exceed the scope of the parent Task (this is very important);\n\n(2) When a Task is canceled, all its sub-Tasks will also be canceled;\n\n(3) Unhandled errors will automatically be propagated from the child Task to the parent Task;\n\n(4) The child Task will inherit the priority of the parent Task by default;\n\n(5) Task-local data will be shared between parent and child Tasks;\n\n(6) The parent Task can easily collect the results of the child Task.\n\n```Swift\nimport Foundation\n\nfunc performParentTask() {\n    let parentTask = Task {\n        print(\"Parent task started\")\n\n        let childTask1 = Task.detached {\n            print(\"Child task 1 started\")\n            await Task.sleep(1_000_000_000) // Sleep for 1 second\n            print(\"Child task 1 completed\")\n        }\n\n        let childTask2 = Task.detached {\n            print(\"Child task 2 started\")\n            await Task.sleep(1_500_000_000) // Sleep for 1.5 seconds\n            print(\"Child task 2 completed\")\n        }\n\n        await childTask1 // Wait for childTask1 to complete\n        await childTask2 // Wait for childTask2 to complete\n\n        print(\"Parent task completed\")\n    }\n\n    parentTask.waitForAll()\n}\n\nperformParentTask()\n```\n\nIn this example we have a function called performParentTask which creates a main task parentTask. Inside the main task, we create two child tasks childTask1 and childTask2 using Task.detached. These two child tasks perform asynchronous sleep operations respectively to simulate time-consuming operations. We then use the await keyword to wait for the child task to complete.\n\n<font size=3 color=#4169E1>**2.5 Task groups and child tasks**</font>\n\nTask groups define a scope within which new child-tasks can be created programmatically. Like all child-tasks, child-tasks in a task group scope must complete when that scope exits. If the scope throws an error on exit, the child-tasks will first be implicitly canceled.\n\n```Swift\nfunc fetchImagesWithTaskGroup() async throws -> [UIImage] {\n    let urlStrings = [\n        \"https://picsum.photos/300\",\n        \"https://picsum.photos/300\",\n        \"https://picsum.photos/300\",\n        \"https://picsum.photos/300\",\n        \"https://picsum.photos/300\"\n    ]\n\n    var images: [UIImage] = []\n\n    // Use a throwing task group to fetch images concurrently\n    try await withThrowingTaskGroup(of: UIImage.self) { group in\n        // Add tasks to the group\n        for urlString in urlStrings {\n            group.addTask {\n                try await self.fetchImage(urlString: urlString)\n            }\n        }\n\n        // Collect the images as they are fetched\n        for try await image in group {\n            images.append(image)\n        }\n    }\n\n    return images\n}\n```\n\n<font size=3 color=#4169E1>**2.6 Task.init and Task.detached**</font>\n\nIf you create a new task using the regular Task.init initializer, the work starts running immediately, inheriting the caller's priority, any task local values, and its actor context.\n\nHowever, tasks created through Task.detached are completely independent of the current context, that is, they will not inherit the priority, task-local data, and actor isolation of the current context. The Task.detached function returns a handle that you can use to cancel, query task status, etc.\n\nConsider a scenario where you need to execute two tasks in the background, one using Task.init and the other using Task.detached, and observe their behavior. Here is sample code:\n\n```Swift\nimport Foundation\n\nfunc performTaskWithInit() async {\n    print(\"Task with Task.init started\")\n    await Task.sleep(2_000_000_000) // Sleep for 2 seconds\n    print(\"Task with Task.init completed\")\n}\n\nfunc performTaskDetached() async {\n    print(\"Detached task started\")\n    await Task.sleep(1_000_000_000) // Sleep for 1 second\n    print(\"Detached task completed\")\n}\n\nTask {\n    print(\"Main task started\")\n    \n    // Using Task.init\n    await performTaskWithInit()\n    \n    // Using Task.detached\n    await Task.detached {\n        await performTaskDetached()\n    }\n    \n    print(\"Main task completed\")\n}\n\n// Sleep to allow tasks to finish before the program exits\nsleep(5)\n```\nIn this example, we have three tasks: the main task, the task created using Task.init, and the task created using Task.detached. The main task will run the performTaskWithInit function and execute a task in the background that takes 2 seconds. The task created using Task.detached then runs the performTaskDetached function and performs a task in the background that takes 1 second. The point is that the main task will wait for the completion of the performTaskWithInit function and will not wait for the task created using Task.detached. Therefore, the main task continues execution after performTaskWithInit completes without waiting for performTaskDetached to complete.\n\nAfter running the example, you will see output like this:\n```Swift\nMain task started\nTask with Task.init started\nTask with Task.init completed\nMain task completed\nDetached task started\nDetached task completed\n```\n\n<font size=3 color=#4169E1>**2.7 Task.yield**</font>\n \nTask.yield() is used to actively pause the current task so that Swift can give other tasks a chance to continue when needed. Look at a sample code:\n\n```Swift\nTask(priority: .high) {\n    print(\"high\")\n}\nTask(priority: .userInitiated) {\n    print(\"userInitiated\")\n}\nTask(priority: .medium) {\n    print(\"medium\")\n}\nTask(priority: .low) {\n    print(\"low\")\n}\nTask(priority: .utility) {\n    print(\"utility\")\n}\nTask(priority: .background) {\n    print(\"background\")\n}\n```\n\nThe execution results are as follows:\n```Swift\nhigh <---\nuserInitiated\nmedium\nutility\nlow\nbackground\n```\n\nYield the .high thread:\n```Swift\nTask(priority: .high) {\n    await Task.yield()\n    print(\"high\")\n}\nTask(priority: .userInitiated) {\n    print(\"userInitiated\")\n}\nTask(priority: .medium) {\n    print(\"medium\")\n}\nTask(priority: .low) {\n    print(\"low\")\n}\nTask(priority: .utility) {\n    print(\"utility\")\n}\nTask(priority: .background) {\n    print(\"background\")\n}\n```\n\nResults of the:\n```Swift\nmedium\nuserInitiated\nhigh <---\nlow\nutility\nbackground\n```\nNote: \nCalling yield() does not always mean that the task will stop running: if the task has a higher priority than other waiting tasks, it is entirely possible for the task to resume work immediately.\n\n\n#### <font size=3 color=gray>*Reference*</font>\n[1] https://github.com/apple/swift-evolution/blob/main/proposals/0304-structured-concurrency.md\n[2] https://juejin.cn/post/7084640887250092062\n","source":"_posts/Swift/07. Concurrency/03. Task.md","raw":"-------\ntitle: 03. Task\ndate: 2023-09-20 20:13:00\ncategories: \n- [Swift, 07. Concurrency] \ntags:\n- task\n-------\n\n<font color=gray size=2>*It will take about 10 minutes to finish reading this article.*</font>\n\n#### <font size=3 color=#4169E1>1. Backgroud</font> \n \nasync/await are used to write natural, efficient asynchronous code. However, async/await does not have concurrency capabilities on its own, but asynchronous functions (introduced with async) can abort the executing thread at any given pause point (marked by await), which is necessary for building highly concurrent systems. Swift 5.5 introduces task, which is designed to provide concurrency.\n \n#### <font size=3 color=#4169E1>2. what exactly is Task?</font>  \n\nA task is the basic unit of concurrency; each asynchronous function executes in a task. When a function makes an asynchronous call, the called function still runs as part of the same task (the caller waits for the function to return).\n\nSimilarly, when the function returns from an asynchronous call, the caller continues to run in the same task. So tasks are different from threads in that they are a higher abstraction above threads, and the system is responsible for scheduling the execution of a task on the appropriate thread.\n\n\n<font size=3 color=#4169E1>**2.1 \"Task is to asynchronous functions as threads are to synchronous functions\"**</font>  \nSynchronized Functions and Threads\n\nIn traditional synchronous functions, code is executed sequentially, with one function call waiting for its internal operations to complete before moving on to the next function call. This model tends to cause the program to block when performing time-consuming operations, as the execution of one function may prevent the execution of subsequent functions. To solve this problem, multithreaded programming can be used. A thread is the smallest unit of execution scheduled by the operating system that executes different tasks in parallel, thus improving the concurrency and responsiveness of the program.\n\nAsynchronous functions and tasks\n\nAsynchronous functions, unlike synchronous functions, allow the program to continue performing other operations without blocking while waiting for time-consuming operations to complete. This is accomplished by using the \"await\" keyword, which allows a function to suspend while waiting for an operation to complete, and then resume execution once the operation completes.\n \n\n<font size=3 color=#4169E1>**2.2 State of the Task**</font>  \n\nTask has 3 states:\n\n(1) Suspended, suspended tasks are schedulable.\nThere are 2 situations that will cause the Task to be in a suspended state:\nFirst, the Task is ready and waiting for the system to allocate execution threads;\n\nSecond, wait for external events. For example, after a Task encounters a suspension point, it may enter a suspended state and wait for external events to wake up.\n\n(2) Running, the running task is currently running on a thread.\nIt will run until it returns from the initial function (completion) or reaches a pause point (pause).\n\n(3) Completed, the task has no work to do and will never enter any other state.\nCode can wait for tasks to complete in various ways, the main one being through await.\n\n<font size=3 color=#4169E1>**2.3 Some advanced uses of Task**</font>  \n\nTasks carry scheduling information, such as the priority of the task.\n\nTask is a handle through which operations such as cancellation and query can be performed.\n\nCan carry user-supplied task-local data.\n\n```Swift\nimport Foundation\n\nfunc performTask() {\n    let task = Task.detached(priority: .userInitiated) {\n        print(\"Task started with priority: \\(Task.currentPriority)\")\n\n        // Simulate a long-running task\n        for i in 1...5 {\n            if Task.isCancelled {\n                print(\"Task was cancelled\")\n                return\n            }\n\n            print(\"Task processing step \\(i)\")\n            sleep(1)\n        }\n\n        print(\"Task completed\")\n    }\n\n    // Cancel the task after 3 seconds\n    DispatchQueue.global().asyncAfter(deadline: .now() + 3) {\n        task.cancel()\n    }\n\n    // Wait for the task to complete or be cancelled\n    task.value?.waitForCancellation()\n    print(\"Task finished or cancelled\")\n}\n\nperformTask()\n```\n\nIn this example, we demonstrate how to use task handles to implement tasks such as priority, cancellation, and query operations.\n\n<font size=3 color=#4169E1>**2.4 child task**</font>  \n\nAsynchronous functions can create child tasks. The child task inherits part of the structure of the parent task, including priority, but can run concurrently with the parent task. However, this concurrency has limits. This kind of parent-child relationship between Tasks has the following characteristics:\n\n(1) The life cycle of the child Task will not exceed the scope of the parent Task (this is very important);\n\n(2) When a Task is canceled, all its sub-Tasks will also be canceled;\n\n(3) Unhandled errors will automatically be propagated from the child Task to the parent Task;\n\n(4) The child Task will inherit the priority of the parent Task by default;\n\n(5) Task-local data will be shared between parent and child Tasks;\n\n(6) The parent Task can easily collect the results of the child Task.\n\n```Swift\nimport Foundation\n\nfunc performParentTask() {\n    let parentTask = Task {\n        print(\"Parent task started\")\n\n        let childTask1 = Task.detached {\n            print(\"Child task 1 started\")\n            await Task.sleep(1_000_000_000) // Sleep for 1 second\n            print(\"Child task 1 completed\")\n        }\n\n        let childTask2 = Task.detached {\n            print(\"Child task 2 started\")\n            await Task.sleep(1_500_000_000) // Sleep for 1.5 seconds\n            print(\"Child task 2 completed\")\n        }\n\n        await childTask1 // Wait for childTask1 to complete\n        await childTask2 // Wait for childTask2 to complete\n\n        print(\"Parent task completed\")\n    }\n\n    parentTask.waitForAll()\n}\n\nperformParentTask()\n```\n\nIn this example we have a function called performParentTask which creates a main task parentTask. Inside the main task, we create two child tasks childTask1 and childTask2 using Task.detached. These two child tasks perform asynchronous sleep operations respectively to simulate time-consuming operations. We then use the await keyword to wait for the child task to complete.\n\n<font size=3 color=#4169E1>**2.5 Task groups and child tasks**</font>\n\nTask groups define a scope within which new child-tasks can be created programmatically. Like all child-tasks, child-tasks in a task group scope must complete when that scope exits. If the scope throws an error on exit, the child-tasks will first be implicitly canceled.\n\n```Swift\nfunc fetchImagesWithTaskGroup() async throws -> [UIImage] {\n    let urlStrings = [\n        \"https://picsum.photos/300\",\n        \"https://picsum.photos/300\",\n        \"https://picsum.photos/300\",\n        \"https://picsum.photos/300\",\n        \"https://picsum.photos/300\"\n    ]\n\n    var images: [UIImage] = []\n\n    // Use a throwing task group to fetch images concurrently\n    try await withThrowingTaskGroup(of: UIImage.self) { group in\n        // Add tasks to the group\n        for urlString in urlStrings {\n            group.addTask {\n                try await self.fetchImage(urlString: urlString)\n            }\n        }\n\n        // Collect the images as they are fetched\n        for try await image in group {\n            images.append(image)\n        }\n    }\n\n    return images\n}\n```\n\n<font size=3 color=#4169E1>**2.6 Task.init and Task.detached**</font>\n\nIf you create a new task using the regular Task.init initializer, the work starts running immediately, inheriting the caller's priority, any task local values, and its actor context.\n\nHowever, tasks created through Task.detached are completely independent of the current context, that is, they will not inherit the priority, task-local data, and actor isolation of the current context. The Task.detached function returns a handle that you can use to cancel, query task status, etc.\n\nConsider a scenario where you need to execute two tasks in the background, one using Task.init and the other using Task.detached, and observe their behavior. Here is sample code:\n\n```Swift\nimport Foundation\n\nfunc performTaskWithInit() async {\n    print(\"Task with Task.init started\")\n    await Task.sleep(2_000_000_000) // Sleep for 2 seconds\n    print(\"Task with Task.init completed\")\n}\n\nfunc performTaskDetached() async {\n    print(\"Detached task started\")\n    await Task.sleep(1_000_000_000) // Sleep for 1 second\n    print(\"Detached task completed\")\n}\n\nTask {\n    print(\"Main task started\")\n    \n    // Using Task.init\n    await performTaskWithInit()\n    \n    // Using Task.detached\n    await Task.detached {\n        await performTaskDetached()\n    }\n    \n    print(\"Main task completed\")\n}\n\n// Sleep to allow tasks to finish before the program exits\nsleep(5)\n```\nIn this example, we have three tasks: the main task, the task created using Task.init, and the task created using Task.detached. The main task will run the performTaskWithInit function and execute a task in the background that takes 2 seconds. The task created using Task.detached then runs the performTaskDetached function and performs a task in the background that takes 1 second. The point is that the main task will wait for the completion of the performTaskWithInit function and will not wait for the task created using Task.detached. Therefore, the main task continues execution after performTaskWithInit completes without waiting for performTaskDetached to complete.\n\nAfter running the example, you will see output like this:\n```Swift\nMain task started\nTask with Task.init started\nTask with Task.init completed\nMain task completed\nDetached task started\nDetached task completed\n```\n\n<font size=3 color=#4169E1>**2.7 Task.yield**</font>\n \nTask.yield() is used to actively pause the current task so that Swift can give other tasks a chance to continue when needed. Look at a sample code:\n\n```Swift\nTask(priority: .high) {\n    print(\"high\")\n}\nTask(priority: .userInitiated) {\n    print(\"userInitiated\")\n}\nTask(priority: .medium) {\n    print(\"medium\")\n}\nTask(priority: .low) {\n    print(\"low\")\n}\nTask(priority: .utility) {\n    print(\"utility\")\n}\nTask(priority: .background) {\n    print(\"background\")\n}\n```\n\nThe execution results are as follows:\n```Swift\nhigh <---\nuserInitiated\nmedium\nutility\nlow\nbackground\n```\n\nYield the .high thread:\n```Swift\nTask(priority: .high) {\n    await Task.yield()\n    print(\"high\")\n}\nTask(priority: .userInitiated) {\n    print(\"userInitiated\")\n}\nTask(priority: .medium) {\n    print(\"medium\")\n}\nTask(priority: .low) {\n    print(\"low\")\n}\nTask(priority: .utility) {\n    print(\"utility\")\n}\nTask(priority: .background) {\n    print(\"background\")\n}\n```\n\nResults of the:\n```Swift\nmedium\nuserInitiated\nhigh <---\nlow\nutility\nbackground\n```\nNote: \nCalling yield() does not always mean that the task will stop running: if the task has a higher priority than other waiting tasks, it is entirely possible for the task to resume work immediately.\n\n\n#### <font size=3 color=gray>*Reference*</font>\n[1] https://github.com/apple/swift-evolution/blob/main/proposals/0304-structured-concurrency.md\n[2] https://juejin.cn/post/7084640887250092062\n","slug":"Swift/07. Concurrency/03. Task","published":1,"updated":"2023-09-25T19:17:21.296Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr5u0041vu0majugf7f6","content":"<p><font color=gray size=2><em>It will take about 10 minutes to finish reading this article.</em></font></p>\n<h4 id=\"1-Backgroud\"><a href=\"#1-Backgroud\" class=\"headerlink\" title=\"1. Backgroud\"></a><font size=3 color=#4169E1>1. Backgroud</font></h4><p>async&#x2F;await are used to write natural, efficient asynchronous code. However, async&#x2F;await does not have concurrency capabilities on its own, but asynchronous functions (introduced with async) can abort the executing thread at any given pause point (marked by await), which is necessary for building highly concurrent systems. Swift 5.5 introduces task, which is designed to provide concurrency.</p>\n<h4 id=\"2-what-exactly-is-Task\"><a href=\"#2-what-exactly-is-Task\" class=\"headerlink\" title=\"2. what exactly is Task?\"></a><font size=3 color=#4169E1>2. what exactly is Task?</font></h4><p>A task is the basic unit of concurrency; each asynchronous function executes in a task. When a function makes an asynchronous call, the called function still runs as part of the same task (the caller waits for the function to return).</p>\n<p>Similarly, when the function returns from an asynchronous call, the caller continues to run in the same task. So tasks are different from threads in that they are a higher abstraction above threads, and the system is responsible for scheduling the execution of a task on the appropriate thread.</p>\n<p><font size=3 color=#4169E1><strong>2.1 “Task is to asynchronous functions as threads are to synchronous functions”</strong></font><br>Synchronized Functions and Threads</p>\n<p>In traditional synchronous functions, code is executed sequentially, with one function call waiting for its internal operations to complete before moving on to the next function call. This model tends to cause the program to block when performing time-consuming operations, as the execution of one function may prevent the execution of subsequent functions. To solve this problem, multithreaded programming can be used. A thread is the smallest unit of execution scheduled by the operating system that executes different tasks in parallel, thus improving the concurrency and responsiveness of the program.</p>\n<p>Asynchronous functions and tasks</p>\n<p>Asynchronous functions, unlike synchronous functions, allow the program to continue performing other operations without blocking while waiting for time-consuming operations to complete. This is accomplished by using the “await” keyword, which allows a function to suspend while waiting for an operation to complete, and then resume execution once the operation completes.</p>\n<p><font size=3 color=#4169E1><strong>2.2 State of the Task</strong></font>  </p>\n<p>Task has 3 states:</p>\n<p>(1) Suspended, suspended tasks are schedulable.<br>There are 2 situations that will cause the Task to be in a suspended state:<br>First, the Task is ready and waiting for the system to allocate execution threads;</p>\n<p>Second, wait for external events. For example, after a Task encounters a suspension point, it may enter a suspended state and wait for external events to wake up.</p>\n<p>(2) Running, the running task is currently running on a thread.<br>It will run until it returns from the initial function (completion) or reaches a pause point (pause).</p>\n<p>(3) Completed, the task has no work to do and will never enter any other state.<br>Code can wait for tasks to complete in various ways, the main one being through await.</p>\n<p><font size=3 color=#4169E1><strong>2.3 Some advanced uses of Task</strong></font>  </p>\n<p>Tasks carry scheduling information, such as the priority of the task.</p>\n<p>Task is a handle through which operations such as cancellation and query can be performed.</p>\n<p>Can carry user-supplied task-local data.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Foundation</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">performTask</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> task <span class=\"operator\">=</span> <span class=\"type\">Task</span>.detached(priority: .userInitiated) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Task started with priority: <span class=\"subst\">\\(Task.currentPriority)</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Simulate a long-running task</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">1</span><span class=\"operator\">...</span><span class=\"number\">5</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"type\">Task</span>.isCancelled &#123;</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Task was cancelled&quot;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Task processing step <span class=\"subst\">\\(i)</span>&quot;</span>)</span><br><span class=\"line\">            sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Task completed&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Cancel the task after 3 seconds</span></span><br><span class=\"line\">    <span class=\"type\">DispatchQueue</span>.global().asyncAfter(deadline: .now() <span class=\"operator\">+</span> <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">        task.cancel()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Wait for the task to complete or be cancelled</span></span><br><span class=\"line\">    task.value<span class=\"operator\">?</span>.waitForCancellation()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Task finished or cancelled&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">performTask()</span><br></pre></td></tr></table></figure>\n\n<p>In this example, we demonstrate how to use task handles to implement tasks such as priority, cancellation, and query operations.</p>\n<p><font size=3 color=#4169E1><strong>2.4 child task</strong></font>  </p>\n<p>Asynchronous functions can create child tasks. The child task inherits part of the structure of the parent task, including priority, but can run concurrently with the parent task. However, this concurrency has limits. This kind of parent-child relationship between Tasks has the following characteristics:</p>\n<p>(1) The life cycle of the child Task will not exceed the scope of the parent Task (this is very important);</p>\n<p>(2) When a Task is canceled, all its sub-Tasks will also be canceled;</p>\n<p>(3) Unhandled errors will automatically be propagated from the child Task to the parent Task;</p>\n<p>(4) The child Task will inherit the priority of the parent Task by default;</p>\n<p>(5) Task-local data will be shared between parent and child Tasks;</p>\n<p>(6) The parent Task can easily collect the results of the child Task.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Foundation</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">performParentTask</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> parentTask <span class=\"operator\">=</span> <span class=\"type\">Task</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Parent task started&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> childTask1 <span class=\"operator\">=</span> <span class=\"type\">Task</span>.detached &#123;</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Child task 1 started&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">await</span> <span class=\"type\">Task</span>.sleep(<span class=\"number\">1_000_000_000</span>) <span class=\"comment\">// Sleep for 1 second</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Child task 1 completed&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> childTask2 <span class=\"operator\">=</span> <span class=\"type\">Task</span>.detached &#123;</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Child task 2 started&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">await</span> <span class=\"type\">Task</span>.sleep(<span class=\"number\">1_500_000_000</span>) <span class=\"comment\">// Sleep for 1.5 seconds</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Child task 2 completed&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">await</span> childTask1 <span class=\"comment\">// Wait for childTask1 to complete</span></span><br><span class=\"line\">        <span class=\"keyword\">await</span> childTask2 <span class=\"comment\">// Wait for childTask2 to complete</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Parent task completed&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    parentTask.waitForAll()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">performParentTask()</span><br></pre></td></tr></table></figure>\n\n<p>In this example we have a function called performParentTask which creates a main task parentTask. Inside the main task, we create two child tasks childTask1 and childTask2 using Task.detached. These two child tasks perform asynchronous sleep operations respectively to simulate time-consuming operations. We then use the await keyword to wait for the child task to complete.</p>\n<p><font size=3 color=#4169E1><strong>2.5 Task groups and child tasks</strong></font></p>\n<p>Task groups define a scope within which new child-tasks can be created programmatically. Like all child-tasks, child-tasks in a task group scope must complete when that scope exits. If the scope throws an error on exit, the child-tasks will first be implicitly canceled.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">fetchImagesWithTaskGroup</span>() <span class=\"keyword\">async</span> <span class=\"keyword\">throws</span> -&gt; [<span class=\"type\">UIImage</span>] &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> urlStrings <span class=\"operator\">=</span> [</span><br><span class=\"line\">        <span class=\"string\">&quot;https://picsum.photos/300&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;https://picsum.photos/300&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;https://picsum.photos/300&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;https://picsum.photos/300&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;https://picsum.photos/300&quot;</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> images: [<span class=\"type\">UIImage</span>] <span class=\"operator\">=</span> []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Use a throwing task group to fetch images concurrently</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> <span class=\"keyword\">await</span> withThrowingTaskGroup(of: <span class=\"type\">UIImage</span>.<span class=\"keyword\">self</span>) &#123; group <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"comment\">// Add tasks to the group</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> urlString <span class=\"keyword\">in</span> urlStrings &#123;</span><br><span class=\"line\">            group.addTask &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> <span class=\"keyword\">await</span> <span class=\"keyword\">self</span>.fetchImage(urlString: urlString)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Collect the images as they are fetched</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"keyword\">try</span> <span class=\"keyword\">await</span> image <span class=\"keyword\">in</span> group &#123;</span><br><span class=\"line\">            images.append(image)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> images</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><font size=3 color=#4169E1><strong>2.6 Task.init and Task.detached</strong></font></p>\n<p>If you create a new task using the regular Task.init initializer, the work starts running immediately, inheriting the caller’s priority, any task local values, and its actor context.</p>\n<p>However, tasks created through Task.detached are completely independent of the current context, that is, they will not inherit the priority, task-local data, and actor isolation of the current context. The Task.detached function returns a handle that you can use to cancel, query task status, etc.</p>\n<p>Consider a scenario where you need to execute two tasks in the background, one using Task.init and the other using Task.detached, and observe their behavior. Here is sample code:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Foundation</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">performTaskWithInit</span>() <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Task with Task.init started&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"type\">Task</span>.sleep(<span class=\"number\">2_000_000_000</span>) <span class=\"comment\">// Sleep for 2 seconds</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Task with Task.init completed&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">performTaskDetached</span>() <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Detached task started&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"type\">Task</span>.sleep(<span class=\"number\">1_000_000_000</span>) <span class=\"comment\">// Sleep for 1 second</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Detached task completed&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Task</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Main task started&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Using Task.init</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> performTaskWithInit()</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Using Task.detached</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"type\">Task</span>.detached &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> performTaskDetached()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Main task completed&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Sleep to allow tasks to finish before the program exits</span></span><br><span class=\"line\">sleep(<span class=\"number\">5</span>)</span><br></pre></td></tr></table></figure>\n<p>In this example, we have three tasks: the main task, the task created using Task.init, and the task created using Task.detached. The main task will run the performTaskWithInit function and execute a task in the background that takes 2 seconds. The task created using Task.detached then runs the performTaskDetached function and performs a task in the background that takes 1 second. The point is that the main task will wait for the completion of the performTaskWithInit function and will not wait for the task created using Task.detached. Therefore, the main task continues execution after performTaskWithInit completes without waiting for performTaskDetached to complete.</p>\n<p>After running the example, you will see output like this:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Main</span> task started</span><br><span class=\"line\"><span class=\"type\">Task</span> with <span class=\"type\">Task</span>.<span class=\"keyword\">init</span> started</span><br><span class=\"line\"><span class=\"type\">Task</span> with <span class=\"type\">Task</span>.<span class=\"keyword\">init</span> completed</span><br><span class=\"line\"><span class=\"type\">Main</span> task completed</span><br><span class=\"line\"><span class=\"type\">Detached</span> task started</span><br><span class=\"line\"><span class=\"type\">Detached</span> task completed</span><br></pre></td></tr></table></figure>\n\n<p><font size=3 color=#4169E1><strong>2.7 Task.yield</strong></font></p>\n<p>Task.yield() is used to actively pause the current task so that Swift can give other tasks a chance to continue when needed. Look at a sample code:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Task</span>(priority: .high) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;high&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">Task</span>(priority: .userInitiated) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;userInitiated&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">Task</span>(priority: .medium) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;medium&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">Task</span>(priority: .low) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;low&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">Task</span>(priority: .utility) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;utility&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">Task</span>(priority: .background) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;background&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>The execution results are as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">high <span class=\"operator\">&lt;---</span></span><br><span class=\"line\">userInitiated</span><br><span class=\"line\">medium</span><br><span class=\"line\">utility</span><br><span class=\"line\">low</span><br><span class=\"line\">background</span><br></pre></td></tr></table></figure>\n\n<p>Yield the .high thread:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Task</span>(priority: .high) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"type\">Task</span>.yield()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;high&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">Task</span>(priority: .userInitiated) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;userInitiated&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">Task</span>(priority: .medium) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;medium&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">Task</span>(priority: .low) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;low&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">Task</span>(priority: .utility) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;utility&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">Task</span>(priority: .background) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;background&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Results of the:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">medium</span><br><span class=\"line\">userInitiated</span><br><span class=\"line\">high <span class=\"operator\">&lt;---</span></span><br><span class=\"line\">low</span><br><span class=\"line\">utility</span><br><span class=\"line\">background</span><br></pre></td></tr></table></figure>\n<p>Note:<br>Calling yield() does not always mean that the task will stop running: if the task has a higher priority than other waiting tasks, it is entirely possible for the task to resume work immediately.</p>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://github.com/apple/swift-evolution/blob/main/proposals/0304-structured-concurrency.md\">https://github.com/apple/swift-evolution/blob/main/proposals/0304-structured-concurrency.md</a><br>[2] <a href=\"https://juejin.cn/post/7084640887250092062\">https://juejin.cn/post/7084640887250092062</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 10 minutes to finish reading this article.</em></font></p>\n<h4 id=\"1-Backgroud\"><a href=\"#1-Backgroud\" class=\"headerlink\" title=\"1. Backgroud\"></a><font size=3 color=#4169E1>1. Backgroud</font></h4><p>async&#x2F;await are used to write natural, efficient asynchronous code. However, async&#x2F;await does not have concurrency capabilities on its own, but asynchronous functions (introduced with async) can abort the executing thread at any given pause point (marked by await), which is necessary for building highly concurrent systems. Swift 5.5 introduces task, which is designed to provide concurrency.</p>\n<h4 id=\"2-what-exactly-is-Task\"><a href=\"#2-what-exactly-is-Task\" class=\"headerlink\" title=\"2. what exactly is Task?\"></a><font size=3 color=#4169E1>2. what exactly is Task?</font></h4><p>A task is the basic unit of concurrency; each asynchronous function executes in a task. When a function makes an asynchronous call, the called function still runs as part of the same task (the caller waits for the function to return).</p>\n<p>Similarly, when the function returns from an asynchronous call, the caller continues to run in the same task. So tasks are different from threads in that they are a higher abstraction above threads, and the system is responsible for scheduling the execution of a task on the appropriate thread.</p>\n<p><font size=3 color=#4169E1><strong>2.1 “Task is to asynchronous functions as threads are to synchronous functions”</strong></font><br>Synchronized Functions and Threads</p>\n<p>In traditional synchronous functions, code is executed sequentially, with one function call waiting for its internal operations to complete before moving on to the next function call. This model tends to cause the program to block when performing time-consuming operations, as the execution of one function may prevent the execution of subsequent functions. To solve this problem, multithreaded programming can be used. A thread is the smallest unit of execution scheduled by the operating system that executes different tasks in parallel, thus improving the concurrency and responsiveness of the program.</p>\n<p>Asynchronous functions and tasks</p>\n<p>Asynchronous functions, unlike synchronous functions, allow the program to continue performing other operations without blocking while waiting for time-consuming operations to complete. This is accomplished by using the “await” keyword, which allows a function to suspend while waiting for an operation to complete, and then resume execution once the operation completes.</p>\n<p><font size=3 color=#4169E1><strong>2.2 State of the Task</strong></font>  </p>\n<p>Task has 3 states:</p>\n<p>(1) Suspended, suspended tasks are schedulable.<br>There are 2 situations that will cause the Task to be in a suspended state:<br>First, the Task is ready and waiting for the system to allocate execution threads;</p>\n<p>Second, wait for external events. For example, after a Task encounters a suspension point, it may enter a suspended state and wait for external events to wake up.</p>\n<p>(2) Running, the running task is currently running on a thread.<br>It will run until it returns from the initial function (completion) or reaches a pause point (pause).</p>\n<p>(3) Completed, the task has no work to do and will never enter any other state.<br>Code can wait for tasks to complete in various ways, the main one being through await.</p>\n<p><font size=3 color=#4169E1><strong>2.3 Some advanced uses of Task</strong></font>  </p>\n<p>Tasks carry scheduling information, such as the priority of the task.</p>\n<p>Task is a handle through which operations such as cancellation and query can be performed.</p>\n<p>Can carry user-supplied task-local data.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Foundation</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">performTask</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> task <span class=\"operator\">=</span> <span class=\"type\">Task</span>.detached(priority: .userInitiated) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Task started with priority: <span class=\"subst\">\\(Task.currentPriority)</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Simulate a long-running task</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">1</span><span class=\"operator\">...</span><span class=\"number\">5</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"type\">Task</span>.isCancelled &#123;</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Task was cancelled&quot;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Task processing step <span class=\"subst\">\\(i)</span>&quot;</span>)</span><br><span class=\"line\">            sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Task completed&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Cancel the task after 3 seconds</span></span><br><span class=\"line\">    <span class=\"type\">DispatchQueue</span>.global().asyncAfter(deadline: .now() <span class=\"operator\">+</span> <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">        task.cancel()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Wait for the task to complete or be cancelled</span></span><br><span class=\"line\">    task.value<span class=\"operator\">?</span>.waitForCancellation()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Task finished or cancelled&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">performTask()</span><br></pre></td></tr></table></figure>\n\n<p>In this example, we demonstrate how to use task handles to implement tasks such as priority, cancellation, and query operations.</p>\n<p><font size=3 color=#4169E1><strong>2.4 child task</strong></font>  </p>\n<p>Asynchronous functions can create child tasks. The child task inherits part of the structure of the parent task, including priority, but can run concurrently with the parent task. However, this concurrency has limits. This kind of parent-child relationship between Tasks has the following characteristics:</p>\n<p>(1) The life cycle of the child Task will not exceed the scope of the parent Task (this is very important);</p>\n<p>(2) When a Task is canceled, all its sub-Tasks will also be canceled;</p>\n<p>(3) Unhandled errors will automatically be propagated from the child Task to the parent Task;</p>\n<p>(4) The child Task will inherit the priority of the parent Task by default;</p>\n<p>(5) Task-local data will be shared between parent and child Tasks;</p>\n<p>(6) The parent Task can easily collect the results of the child Task.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Foundation</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">performParentTask</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> parentTask <span class=\"operator\">=</span> <span class=\"type\">Task</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Parent task started&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> childTask1 <span class=\"operator\">=</span> <span class=\"type\">Task</span>.detached &#123;</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Child task 1 started&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">await</span> <span class=\"type\">Task</span>.sleep(<span class=\"number\">1_000_000_000</span>) <span class=\"comment\">// Sleep for 1 second</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Child task 1 completed&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> childTask2 <span class=\"operator\">=</span> <span class=\"type\">Task</span>.detached &#123;</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Child task 2 started&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">await</span> <span class=\"type\">Task</span>.sleep(<span class=\"number\">1_500_000_000</span>) <span class=\"comment\">// Sleep for 1.5 seconds</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Child task 2 completed&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">await</span> childTask1 <span class=\"comment\">// Wait for childTask1 to complete</span></span><br><span class=\"line\">        <span class=\"keyword\">await</span> childTask2 <span class=\"comment\">// Wait for childTask2 to complete</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Parent task completed&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    parentTask.waitForAll()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">performParentTask()</span><br></pre></td></tr></table></figure>\n\n<p>In this example we have a function called performParentTask which creates a main task parentTask. Inside the main task, we create two child tasks childTask1 and childTask2 using Task.detached. These two child tasks perform asynchronous sleep operations respectively to simulate time-consuming operations. We then use the await keyword to wait for the child task to complete.</p>\n<p><font size=3 color=#4169E1><strong>2.5 Task groups and child tasks</strong></font></p>\n<p>Task groups define a scope within which new child-tasks can be created programmatically. Like all child-tasks, child-tasks in a task group scope must complete when that scope exits. If the scope throws an error on exit, the child-tasks will first be implicitly canceled.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">fetchImagesWithTaskGroup</span>() <span class=\"keyword\">async</span> <span class=\"keyword\">throws</span> -&gt; [<span class=\"type\">UIImage</span>] &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> urlStrings <span class=\"operator\">=</span> [</span><br><span class=\"line\">        <span class=\"string\">&quot;https://picsum.photos/300&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;https://picsum.photos/300&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;https://picsum.photos/300&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;https://picsum.photos/300&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;https://picsum.photos/300&quot;</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> images: [<span class=\"type\">UIImage</span>] <span class=\"operator\">=</span> []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Use a throwing task group to fetch images concurrently</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> <span class=\"keyword\">await</span> withThrowingTaskGroup(of: <span class=\"type\">UIImage</span>.<span class=\"keyword\">self</span>) &#123; group <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"comment\">// Add tasks to the group</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> urlString <span class=\"keyword\">in</span> urlStrings &#123;</span><br><span class=\"line\">            group.addTask &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> <span class=\"keyword\">await</span> <span class=\"keyword\">self</span>.fetchImage(urlString: urlString)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Collect the images as they are fetched</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"keyword\">try</span> <span class=\"keyword\">await</span> image <span class=\"keyword\">in</span> group &#123;</span><br><span class=\"line\">            images.append(image)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> images</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><font size=3 color=#4169E1><strong>2.6 Task.init and Task.detached</strong></font></p>\n<p>If you create a new task using the regular Task.init initializer, the work starts running immediately, inheriting the caller’s priority, any task local values, and its actor context.</p>\n<p>However, tasks created through Task.detached are completely independent of the current context, that is, they will not inherit the priority, task-local data, and actor isolation of the current context. The Task.detached function returns a handle that you can use to cancel, query task status, etc.</p>\n<p>Consider a scenario where you need to execute two tasks in the background, one using Task.init and the other using Task.detached, and observe their behavior. Here is sample code:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Foundation</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">performTaskWithInit</span>() <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Task with Task.init started&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"type\">Task</span>.sleep(<span class=\"number\">2_000_000_000</span>) <span class=\"comment\">// Sleep for 2 seconds</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Task with Task.init completed&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">performTaskDetached</span>() <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Detached task started&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"type\">Task</span>.sleep(<span class=\"number\">1_000_000_000</span>) <span class=\"comment\">// Sleep for 1 second</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Detached task completed&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Task</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Main task started&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Using Task.init</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> performTaskWithInit()</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Using Task.detached</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"type\">Task</span>.detached &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> performTaskDetached()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Main task completed&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Sleep to allow tasks to finish before the program exits</span></span><br><span class=\"line\">sleep(<span class=\"number\">5</span>)</span><br></pre></td></tr></table></figure>\n<p>In this example, we have three tasks: the main task, the task created using Task.init, and the task created using Task.detached. The main task will run the performTaskWithInit function and execute a task in the background that takes 2 seconds. The task created using Task.detached then runs the performTaskDetached function and performs a task in the background that takes 1 second. The point is that the main task will wait for the completion of the performTaskWithInit function and will not wait for the task created using Task.detached. Therefore, the main task continues execution after performTaskWithInit completes without waiting for performTaskDetached to complete.</p>\n<p>After running the example, you will see output like this:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Main</span> task started</span><br><span class=\"line\"><span class=\"type\">Task</span> with <span class=\"type\">Task</span>.<span class=\"keyword\">init</span> started</span><br><span class=\"line\"><span class=\"type\">Task</span> with <span class=\"type\">Task</span>.<span class=\"keyword\">init</span> completed</span><br><span class=\"line\"><span class=\"type\">Main</span> task completed</span><br><span class=\"line\"><span class=\"type\">Detached</span> task started</span><br><span class=\"line\"><span class=\"type\">Detached</span> task completed</span><br></pre></td></tr></table></figure>\n\n<p><font size=3 color=#4169E1><strong>2.7 Task.yield</strong></font></p>\n<p>Task.yield() is used to actively pause the current task so that Swift can give other tasks a chance to continue when needed. Look at a sample code:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Task</span>(priority: .high) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;high&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">Task</span>(priority: .userInitiated) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;userInitiated&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">Task</span>(priority: .medium) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;medium&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">Task</span>(priority: .low) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;low&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">Task</span>(priority: .utility) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;utility&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">Task</span>(priority: .background) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;background&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>The execution results are as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">high <span class=\"operator\">&lt;---</span></span><br><span class=\"line\">userInitiated</span><br><span class=\"line\">medium</span><br><span class=\"line\">utility</span><br><span class=\"line\">low</span><br><span class=\"line\">background</span><br></pre></td></tr></table></figure>\n\n<p>Yield the .high thread:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Task</span>(priority: .high) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"type\">Task</span>.yield()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;high&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">Task</span>(priority: .userInitiated) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;userInitiated&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">Task</span>(priority: .medium) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;medium&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">Task</span>(priority: .low) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;low&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">Task</span>(priority: .utility) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;utility&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">Task</span>(priority: .background) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;background&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Results of the:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">medium</span><br><span class=\"line\">userInitiated</span><br><span class=\"line\">high <span class=\"operator\">&lt;---</span></span><br><span class=\"line\">low</span><br><span class=\"line\">utility</span><br><span class=\"line\">background</span><br></pre></td></tr></table></figure>\n<p>Note:<br>Calling yield() does not always mean that the task will stop running: if the task has a higher priority than other waiting tasks, it is entirely possible for the task to resume work immediately.</p>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://github.com/apple/swift-evolution/blob/main/proposals/0304-structured-concurrency.md\">https://github.com/apple/swift-evolution/blob/main/proposals/0304-structured-concurrency.md</a><br>[2] <a href=\"https://juejin.cn/post/7084640887250092062\">https://juejin.cn/post/7084640887250092062</a></p>\n"},{"title":"04. Actor","date":"2023-09-21T19:00:00.000Z","_content":"\n\n<font color=gray size=2>*It will take about 10 minutes to finish reading this article.*</font>\n\n\n#### <font size=3 color=#4169E1>1. The Birth of Actor</font> \nclass allows creating types with mutable properties and sharing them throughout a program. However, classes have problems in concurrent programming, requiring developers to manually implement error-prone synchronization mechanisms to avoid data races.\n\nOur goal is to allow global sharing of mutable state while maintaining static detection of data contention and other concurrency issues. And the actor model can be a good solution to this problem. Each actor ensures the independence of its data through data isolation, thus ensuring that only one thread can access that data at a time.\n\n**Note:**   \nActor model is a concurrent computing programming model, originally proposed by computer scientist Carl Hewitt and others in 1973, it is not owned by a certain language or framework, and can be used in almost any programming language. It ensures data security through data isolation. Its principle maintains a serial queue (mailbox) inside, and all external calls involving data security are executed serially.\n\nSee: https://en.wikipedia.org/wiki/Actor_model\n\nSwift introduced Actor as part of the Swift concurrency family in version 5.5. the actor model guarantees the same race conditions and memory safety as structured concurrency, while providing a Swift abstraction that is familiar to developers, and implementing features that are available in other explicitly declared types.\n\n#### <font size=3 color=#4169E1>2. Concept of Actor</font> \nIn Proposition 0306, Actor is a reference type, and except for the lack of inheritance support, actor is very similar to class: it can adhere to specified protocols, support extensions, etc.\n```Swift\nactor MyActor {\n    var title: String\n    let num: Int\n​\n    init(title: String, num: Int) {\n        self.title = title\n        self.num = num\n    }\n​\n    func updateTitle(newTitle: String) {\n        title = newTitle\n    }\n}\n​\nlet objectA = MyActor(title: \"Starting title!\", num: 1001)\nawait print(\"ObjectA: \", objectA.title)\nawait objectA.updateTitle(newTitle: \"Second title!\")\nawait print(\"ObjectA: \", objectA.title)\n```\n\nIn order to ensure data security under concurrency, the Actor internally executes external accesses serially. Therefore, such accesses are asynchronous, which means that they do not return a result immediately, but are queued up and executed sequentially. Therefore, such accesses need to be executed via await.\n\n#### <font size=3 color=#4169E1>3. Actor isolation</font> \nActor isolation is a way to protect its mutable state by isolating the actor instance as a unit (boundary) from the outside world and severely restricting cross-boundary access, so that only direct access to its stored instance properties is allowed on self.\n```Swift\nobjectA.title = \"New title!\"\n``` \nThe above code will report an error:\n\n```Swift\nActor-isolated property title can not be mutated from the main actor\n```\n\n#### <font size=3 color=#4169E1>4. Nonisolated</font> \nNonisolated, as the name implies, means non-isolated. the mailbox serial access mechanism inside the actor is bound to have some performance loss, and methods and computation attributes inside the actor do not always cause Data races. therefore, the \"Improved control over actor isolation\" in SE0313 provides an explicit way for clients to freely synchronize access to immutable actor states with the keyword nonisolated.\n\n```Swift\nextension MyActor {\n    // Inside the method, only the let num is referenced, so there are no Data races.\n    // Can be modified by nonisolated\n    nonisolated func changeIntToSting(num: Int) -> String {\n        return \"Num:\" + String(num)\n    }\n}\n```\nThis allows you to call the following code directly, and since you don't need to go through the asynchronous serial mechanism, you don't need to add await:         \n```Swift\nlet num = objectA.changeIntToSting(num: 1002)\nprint(\"ObjectA: \", num)\nprint(\"ObjectA: \", objectA.num)\n```\n**Note:**\nIt is not possible to access the isolated state in the nonisolated method, for example:\n```Swift\nnonisolated func changeIntToSting(num: Int) -> String {\n    //Actor-isolated property 'title' can not be mutated from a non-isolated context\n    title = \"Title\"\n    return \"Num:\" + String(num)\n}\n```\nRemove nonisolated and turn it into an internal method of the actor, where methods and properties can be accessed directly.         \n```Swift\nextension MyActor {\n    func changeIntToSting(num: Int) -> String {\n        title = \"New Title1\"\n        updateTitle(newTitle: \"New Title2\")\n        return \"Num:\" + String(num)\n    }\n}\n```\n\n#### <font size=3 color=#4169E1>5. Actor Reentrancy</font> \nActor Reentrancy is the context of entering the same actor multiple times in the same thread.Actor-isolated methods are reentrant, which means that the same actor's method can be called multiple times in the same thread without blocking or waiting.\n\nThis reentrancy can improve performance in some cases because it allows a task executing an actor-isolated method to not wait for the previous call to complete if it needs to call the method again. This flexibility can reduce the overhead of thread switching and thus improve performance.\n\nSpecific attention should be paid to:\n(1) Actor-isolated methods may have pause points within them when explicitly declared as asynchronous methods;\n\n(2) When an Actor-isolated method is hung due to a pause point, the method is reentrant, i.e., it can be accessed again before the previous hang is resumed;\n```Swift\nactor MyActor {\n    var title: String\n    let num: Int\n    var capacity: Int\n​\n    init(title: String, num: Int, capacity: Int) {\n        self.title = title\n        self.num = num\n        self.capacity = capacity\n    }\n​\n    func updateTitle(newTitle: String) {\n        title = newTitle\n    }\n}\n​\nextension MyActor {\n​\n    func waitHere() async -> Bool {\n        try? await Task.sleep(nanoseconds: 1_000_000_000)\n        return true\n    }\n​\n    func consumeCapacity(consume: Int) async throws -> Int {\n        guard capacity >= consume else {\n            throw CustomError.valueTooLarge\n        }\n​\n        guard await waitHere() else {\n            throw CustomError.valueTooLarge\n        }\n​\n        capacity -= consume\n        return capacity\n    }\n}\n```\nThe call is as follows:\n```Swift\nlet myActor = MyActor(title: \"Starting title!\", num: 1001, capacity: 9000)\nTask {\n    do {\n        let capacity1 = try await myActor.consumeCapacity(consume: 5000)\n        print(\"Consume succeeded, capacity = \\(capacity1)\")\n    } catch {\n        print(\"Consume failed: \\(error)\")\n    }\n}\n​\nTask {\n    do {\n        let capacity2 = try await myActor.consumeCapacity(consume: 5000)\n        print(\"Consume succeeded, capacity = \\(capacity2)\")\n    } catch {\n        print(\"Consume failed: \\(error)\")\n    }\n}\n```\nThe results of the implementation are as follows:\n```Swift\nComsume succeeded, capacity = 4000\nComsume succeeded, capacity = -1000\n```\nWhere did it go wrong?      \n​Generally, the two-step operation of \"check-modify\" should not cross the await suspension point. They belong to an \"atomic operation\", and the await suspension point may \"cut\" them. How to solve this problem? , you can check it again before modifying:\n```Swift\nfunc consumeCapacity(consume: Int) async throws -> Int {\n​\n    guard capacity >= consume else {\n        throw CustomError.valueTooLarge\n    }\n​\n    // suspension point\n    guard await waitHere() else {\n        throw CustomError.valueTooLarge\n    }\n​\n    // re-check\n    guard capacity >= consume else {\n        throw CustomError.valueTooLarge\n    }\n​\n    capacity -= consume\n    return capacity\n}\n```\nThe results are as follows:\n```Swift\nConsume succeeded, capacity = 4000\nConsume failed: valueTooLarge\n```\nSo, this issue needs to be taken care of.\n\n#### <font size=3 color=#4169E1>6. globalActor and MainActor</font> \n\n6.1 globalActor         \nAn actor is data-protected at the boundaries of its instances. globalActor is designed to be thread-safe for global variables, static attributes, and cross-type/cross-instance. A global actor is a type that has the @globalActor attribute and contains a static attribute called shared that provides a shared instance of an actor. Example:\n```Swift\n@globalActor\npublic struct SomeGlobalActor {\n  public actor MyActor { }\n​\n  public static let shared = MyActor()\n}\n```\n\n```Swift\n@MyGlobalActor\nvar globalValue = 0\n​\n@MyGlobalActor\nfunc incrementGlobalValue() async {\n    globalValue += 1\n}\n​\n@MyGlobalActor\nfunc printGlobalValue() {\n    print(\"Global value: \\(globalValue)\")\n}\n```\nThis makes the global variable globalValue thread-safe.\n```Swift\nTask {\n    await incrementGlobalValue()\n    await printGlobalValue()\n}\nTask {\n    await incrementGlobalValue()\n    await printGlobalValue()\n}\n```\n\n6.2 MainActor       \nMainActor is a special case of globalActor. MainActor is a global actor that describes the main thread, and the methods, properties, etc. modified by MainActor will be executed on the main thread.\n```Swift\n@globalActor\npublic actor MainActor {\n  public static let shared = MainActor(...)\n}\n```\nWe often use 'MainActor.run' to execute a piece of code on the main thread:\n```Swift\nawait MainActor.run {\n    self.image = image\n}\n```\n\n#### <font size=3 color=gray>*Reference*</font>\n[1] https://github.com/apple/swift-evolution/blob/main/proposals/0306-actors.md\n[2] https://juejin.cn/post/7076738494869012494\n[3] https://zhuanlan.zhihu.com/p/86460724\n","source":"_posts/Swift/07. Concurrency/04. Actor.md","raw":"---\ntitle: 04. Actor\ndate: 2023-09-21 21:00:00\ncategories: \n- [Swift, 07. Concurrency]\ntags:\n- actor\n---\n\n\n<font color=gray size=2>*It will take about 10 minutes to finish reading this article.*</font>\n\n\n#### <font size=3 color=#4169E1>1. The Birth of Actor</font> \nclass allows creating types with mutable properties and sharing them throughout a program. However, classes have problems in concurrent programming, requiring developers to manually implement error-prone synchronization mechanisms to avoid data races.\n\nOur goal is to allow global sharing of mutable state while maintaining static detection of data contention and other concurrency issues. And the actor model can be a good solution to this problem. Each actor ensures the independence of its data through data isolation, thus ensuring that only one thread can access that data at a time.\n\n**Note:**   \nActor model is a concurrent computing programming model, originally proposed by computer scientist Carl Hewitt and others in 1973, it is not owned by a certain language or framework, and can be used in almost any programming language. It ensures data security through data isolation. Its principle maintains a serial queue (mailbox) inside, and all external calls involving data security are executed serially.\n\nSee: https://en.wikipedia.org/wiki/Actor_model\n\nSwift introduced Actor as part of the Swift concurrency family in version 5.5. the actor model guarantees the same race conditions and memory safety as structured concurrency, while providing a Swift abstraction that is familiar to developers, and implementing features that are available in other explicitly declared types.\n\n#### <font size=3 color=#4169E1>2. Concept of Actor</font> \nIn Proposition 0306, Actor is a reference type, and except for the lack of inheritance support, actor is very similar to class: it can adhere to specified protocols, support extensions, etc.\n```Swift\nactor MyActor {\n    var title: String\n    let num: Int\n​\n    init(title: String, num: Int) {\n        self.title = title\n        self.num = num\n    }\n​\n    func updateTitle(newTitle: String) {\n        title = newTitle\n    }\n}\n​\nlet objectA = MyActor(title: \"Starting title!\", num: 1001)\nawait print(\"ObjectA: \", objectA.title)\nawait objectA.updateTitle(newTitle: \"Second title!\")\nawait print(\"ObjectA: \", objectA.title)\n```\n\nIn order to ensure data security under concurrency, the Actor internally executes external accesses serially. Therefore, such accesses are asynchronous, which means that they do not return a result immediately, but are queued up and executed sequentially. Therefore, such accesses need to be executed via await.\n\n#### <font size=3 color=#4169E1>3. Actor isolation</font> \nActor isolation is a way to protect its mutable state by isolating the actor instance as a unit (boundary) from the outside world and severely restricting cross-boundary access, so that only direct access to its stored instance properties is allowed on self.\n```Swift\nobjectA.title = \"New title!\"\n``` \nThe above code will report an error:\n\n```Swift\nActor-isolated property title can not be mutated from the main actor\n```\n\n#### <font size=3 color=#4169E1>4. Nonisolated</font> \nNonisolated, as the name implies, means non-isolated. the mailbox serial access mechanism inside the actor is bound to have some performance loss, and methods and computation attributes inside the actor do not always cause Data races. therefore, the \"Improved control over actor isolation\" in SE0313 provides an explicit way for clients to freely synchronize access to immutable actor states with the keyword nonisolated.\n\n```Swift\nextension MyActor {\n    // Inside the method, only the let num is referenced, so there are no Data races.\n    // Can be modified by nonisolated\n    nonisolated func changeIntToSting(num: Int) -> String {\n        return \"Num:\" + String(num)\n    }\n}\n```\nThis allows you to call the following code directly, and since you don't need to go through the asynchronous serial mechanism, you don't need to add await:         \n```Swift\nlet num = objectA.changeIntToSting(num: 1002)\nprint(\"ObjectA: \", num)\nprint(\"ObjectA: \", objectA.num)\n```\n**Note:**\nIt is not possible to access the isolated state in the nonisolated method, for example:\n```Swift\nnonisolated func changeIntToSting(num: Int) -> String {\n    //Actor-isolated property 'title' can not be mutated from a non-isolated context\n    title = \"Title\"\n    return \"Num:\" + String(num)\n}\n```\nRemove nonisolated and turn it into an internal method of the actor, where methods and properties can be accessed directly.         \n```Swift\nextension MyActor {\n    func changeIntToSting(num: Int) -> String {\n        title = \"New Title1\"\n        updateTitle(newTitle: \"New Title2\")\n        return \"Num:\" + String(num)\n    }\n}\n```\n\n#### <font size=3 color=#4169E1>5. Actor Reentrancy</font> \nActor Reentrancy is the context of entering the same actor multiple times in the same thread.Actor-isolated methods are reentrant, which means that the same actor's method can be called multiple times in the same thread without blocking or waiting.\n\nThis reentrancy can improve performance in some cases because it allows a task executing an actor-isolated method to not wait for the previous call to complete if it needs to call the method again. This flexibility can reduce the overhead of thread switching and thus improve performance.\n\nSpecific attention should be paid to:\n(1) Actor-isolated methods may have pause points within them when explicitly declared as asynchronous methods;\n\n(2) When an Actor-isolated method is hung due to a pause point, the method is reentrant, i.e., it can be accessed again before the previous hang is resumed;\n```Swift\nactor MyActor {\n    var title: String\n    let num: Int\n    var capacity: Int\n​\n    init(title: String, num: Int, capacity: Int) {\n        self.title = title\n        self.num = num\n        self.capacity = capacity\n    }\n​\n    func updateTitle(newTitle: String) {\n        title = newTitle\n    }\n}\n​\nextension MyActor {\n​\n    func waitHere() async -> Bool {\n        try? await Task.sleep(nanoseconds: 1_000_000_000)\n        return true\n    }\n​\n    func consumeCapacity(consume: Int) async throws -> Int {\n        guard capacity >= consume else {\n            throw CustomError.valueTooLarge\n        }\n​\n        guard await waitHere() else {\n            throw CustomError.valueTooLarge\n        }\n​\n        capacity -= consume\n        return capacity\n    }\n}\n```\nThe call is as follows:\n```Swift\nlet myActor = MyActor(title: \"Starting title!\", num: 1001, capacity: 9000)\nTask {\n    do {\n        let capacity1 = try await myActor.consumeCapacity(consume: 5000)\n        print(\"Consume succeeded, capacity = \\(capacity1)\")\n    } catch {\n        print(\"Consume failed: \\(error)\")\n    }\n}\n​\nTask {\n    do {\n        let capacity2 = try await myActor.consumeCapacity(consume: 5000)\n        print(\"Consume succeeded, capacity = \\(capacity2)\")\n    } catch {\n        print(\"Consume failed: \\(error)\")\n    }\n}\n```\nThe results of the implementation are as follows:\n```Swift\nComsume succeeded, capacity = 4000\nComsume succeeded, capacity = -1000\n```\nWhere did it go wrong?      \n​Generally, the two-step operation of \"check-modify\" should not cross the await suspension point. They belong to an \"atomic operation\", and the await suspension point may \"cut\" them. How to solve this problem? , you can check it again before modifying:\n```Swift\nfunc consumeCapacity(consume: Int) async throws -> Int {\n​\n    guard capacity >= consume else {\n        throw CustomError.valueTooLarge\n    }\n​\n    // suspension point\n    guard await waitHere() else {\n        throw CustomError.valueTooLarge\n    }\n​\n    // re-check\n    guard capacity >= consume else {\n        throw CustomError.valueTooLarge\n    }\n​\n    capacity -= consume\n    return capacity\n}\n```\nThe results are as follows:\n```Swift\nConsume succeeded, capacity = 4000\nConsume failed: valueTooLarge\n```\nSo, this issue needs to be taken care of.\n\n#### <font size=3 color=#4169E1>6. globalActor and MainActor</font> \n\n6.1 globalActor         \nAn actor is data-protected at the boundaries of its instances. globalActor is designed to be thread-safe for global variables, static attributes, and cross-type/cross-instance. A global actor is a type that has the @globalActor attribute and contains a static attribute called shared that provides a shared instance of an actor. Example:\n```Swift\n@globalActor\npublic struct SomeGlobalActor {\n  public actor MyActor { }\n​\n  public static let shared = MyActor()\n}\n```\n\n```Swift\n@MyGlobalActor\nvar globalValue = 0\n​\n@MyGlobalActor\nfunc incrementGlobalValue() async {\n    globalValue += 1\n}\n​\n@MyGlobalActor\nfunc printGlobalValue() {\n    print(\"Global value: \\(globalValue)\")\n}\n```\nThis makes the global variable globalValue thread-safe.\n```Swift\nTask {\n    await incrementGlobalValue()\n    await printGlobalValue()\n}\nTask {\n    await incrementGlobalValue()\n    await printGlobalValue()\n}\n```\n\n6.2 MainActor       \nMainActor is a special case of globalActor. MainActor is a global actor that describes the main thread, and the methods, properties, etc. modified by MainActor will be executed on the main thread.\n```Swift\n@globalActor\npublic actor MainActor {\n  public static let shared = MainActor(...)\n}\n```\nWe often use 'MainActor.run' to execute a piece of code on the main thread:\n```Swift\nawait MainActor.run {\n    self.image = image\n}\n```\n\n#### <font size=3 color=gray>*Reference*</font>\n[1] https://github.com/apple/swift-evolution/blob/main/proposals/0306-actors.md\n[2] https://juejin.cn/post/7076738494869012494\n[3] https://zhuanlan.zhihu.com/p/86460724\n","slug":"Swift/07. Concurrency/04. Actor","published":1,"updated":"2023-09-25T19:13:53.500Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr5v0044vu0m79tufo5a","content":"<p><font color=gray size=2><em>It will take about 10 minutes to finish reading this article.</em></font></p>\n<h4 id=\"1-The-Birth-of-Actor\"><a href=\"#1-The-Birth-of-Actor\" class=\"headerlink\" title=\"1. The Birth of Actor\"></a><font size=3 color=#4169E1>1. The Birth of Actor</font></h4><p>class allows creating types with mutable properties and sharing them throughout a program. However, classes have problems in concurrent programming, requiring developers to manually implement error-prone synchronization mechanisms to avoid data races.</p>\n<p>Our goal is to allow global sharing of mutable state while maintaining static detection of data contention and other concurrency issues. And the actor model can be a good solution to this problem. Each actor ensures the independence of its data through data isolation, thus ensuring that only one thread can access that data at a time.</p>\n<p><strong>Note:</strong><br>Actor model is a concurrent computing programming model, originally proposed by computer scientist Carl Hewitt and others in 1973, it is not owned by a certain language or framework, and can be used in almost any programming language. It ensures data security through data isolation. Its principle maintains a serial queue (mailbox) inside, and all external calls involving data security are executed serially.</p>\n<p>See: <a href=\"https://en.wikipedia.org/wiki/Actor_model\">https://en.wikipedia.org/wiki/Actor_model</a></p>\n<p>Swift introduced Actor as part of the Swift concurrency family in version 5.5. the actor model guarantees the same race conditions and memory safety as structured concurrency, while providing a Swift abstraction that is familiar to developers, and implementing features that are available in other explicitly declared types.</p>\n<h4 id=\"2-Concept-of-Actor\"><a href=\"#2-Concept-of-Actor\" class=\"headerlink\" title=\"2. Concept of Actor\"></a><font size=3 color=#4169E1>2. Concept of Actor</font></h4><p>In Proposition 0306, Actor is a reference type, and except for the lack of inheritance support, actor is very similar to class: it can adhere to specified protocols, support extensions, etc.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">actor</span> <span class=\"title class_\">MyActor</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> title: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> num: <span class=\"type\">Int</span></span><br><span class=\"line\">​</span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"params\">title</span>: <span class=\"type\">String</span>, <span class=\"params\">num</span>: <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.title <span class=\"operator\">=</span> title</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.num <span class=\"operator\">=</span> num</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">​</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">updateTitle</span>(<span class=\"params\">newTitle</span>: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">        title <span class=\"operator\">=</span> newTitle</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"keyword\">let</span> objectA <span class=\"operator\">=</span> <span class=\"type\">MyActor</span>(title: <span class=\"string\">&quot;Starting title!&quot;</span>, num: <span class=\"number\">1001</span>)</span><br><span class=\"line\"><span class=\"keyword\">await</span> <span class=\"built_in\">print</span>(<span class=\"string\">&quot;ObjectA: &quot;</span>, objectA.title)</span><br><span class=\"line\"><span class=\"keyword\">await</span> objectA.updateTitle(newTitle: <span class=\"string\">&quot;Second title!&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">await</span> <span class=\"built_in\">print</span>(<span class=\"string\">&quot;ObjectA: &quot;</span>, objectA.title)</span><br></pre></td></tr></table></figure>\n\n<p>In order to ensure data security under concurrency, the Actor internally executes external accesses serially. Therefore, such accesses are asynchronous, which means that they do not return a result immediately, but are queued up and executed sequentially. Therefore, such accesses need to be executed via await.</p>\n<h4 id=\"3-Actor-isolation\"><a href=\"#3-Actor-isolation\" class=\"headerlink\" title=\"3. Actor isolation\"></a><font size=3 color=#4169E1>3. Actor isolation</font></h4><p>Actor isolation is a way to protect its mutable state by isolating the actor instance as a unit (boundary) from the outside world and severely restricting cross-boundary access, so that only direct access to its stored instance properties is allowed on self.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objectA.title <span class=\"operator\">=</span> <span class=\"string\">&quot;New title!&quot;</span></span><br></pre></td></tr></table></figure>\n<p>The above code will report an error:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Actor</span><span class=\"operator\">-</span><span class=\"keyword\">isolated</span> property title can not be mutated from the main <span class=\"keyword\">actor</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-Nonisolated\"><a href=\"#4-Nonisolated\" class=\"headerlink\" title=\"4. Nonisolated\"></a><font size=3 color=#4169E1>4. Nonisolated</font></h4><p>Nonisolated, as the name implies, means non-isolated. the mailbox serial access mechanism inside the actor is bound to have some performance loss, and methods and computation attributes inside the actor do not always cause Data races. therefore, the “Improved control over actor isolation” in SE0313 provides an explicit way for clients to freely synchronize access to immutable actor states with the keyword nonisolated.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">MyActor</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Inside the method, only the let num is referenced, so there are no Data races.</span></span><br><span class=\"line\">    <span class=\"comment\">// Can be modified by nonisolated</span></span><br><span class=\"line\">    <span class=\"keyword\">nonisolated</span> <span class=\"keyword\">func</span> <span class=\"title function_\">changeIntToSting</span>(<span class=\"params\">num</span>: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Num:&quot;</span> <span class=\"operator\">+</span> <span class=\"type\">String</span>(num)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>This allows you to call the following code directly, and since you don’t need to go through the asynchronous serial mechanism, you don’t need to add await:         </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> num <span class=\"operator\">=</span> objectA.changeIntToSting(num: <span class=\"number\">1002</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;ObjectA: &quot;</span>, num)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;ObjectA: &quot;</span>, objectA.num)</span><br></pre></td></tr></table></figure>\n<p><strong>Note:</strong><br>It is not possible to access the isolated state in the nonisolated method, for example:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">nonisolated</span> <span class=\"keyword\">func</span> <span class=\"title function_\">changeIntToSting</span>(<span class=\"params\">num</span>: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//Actor-isolated property &#x27;title&#x27; can not be mutated from a non-isolated context</span></span><br><span class=\"line\">    title <span class=\"operator\">=</span> <span class=\"string\">&quot;Title&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;Num:&quot;</span> <span class=\"operator\">+</span> <span class=\"type\">String</span>(num)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Remove nonisolated and turn it into an internal method of the actor, where methods and properties can be accessed directly.         </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">MyActor</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">changeIntToSting</span>(<span class=\"params\">num</span>: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        title <span class=\"operator\">=</span> <span class=\"string\">&quot;New Title1&quot;</span></span><br><span class=\"line\">        updateTitle(newTitle: <span class=\"string\">&quot;New Title2&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Num:&quot;</span> <span class=\"operator\">+</span> <span class=\"type\">String</span>(num)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-Actor-Reentrancy\"><a href=\"#5-Actor-Reentrancy\" class=\"headerlink\" title=\"5. Actor Reentrancy\"></a><font size=3 color=#4169E1>5. Actor Reentrancy</font></h4><p>Actor Reentrancy is the context of entering the same actor multiple times in the same thread.Actor-isolated methods are reentrant, which means that the same actor’s method can be called multiple times in the same thread without blocking or waiting.</p>\n<p>This reentrancy can improve performance in some cases because it allows a task executing an actor-isolated method to not wait for the previous call to complete if it needs to call the method again. This flexibility can reduce the overhead of thread switching and thus improve performance.</p>\n<p>Specific attention should be paid to:<br>(1) Actor-isolated methods may have pause points within them when explicitly declared as asynchronous methods;</p>\n<p>(2) When an Actor-isolated method is hung due to a pause point, the method is reentrant, i.e., it can be accessed again before the previous hang is resumed;</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">actor</span> <span class=\"title class_\">MyActor</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> title: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> num: <span class=\"type\">Int</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> capacity: <span class=\"type\">Int</span></span><br><span class=\"line\">​</span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"params\">title</span>: <span class=\"type\">String</span>, <span class=\"params\">num</span>: <span class=\"type\">Int</span>, <span class=\"params\">capacity</span>: <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.title <span class=\"operator\">=</span> title</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.num <span class=\"operator\">=</span> num</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.capacity <span class=\"operator\">=</span> capacity</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">​</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">updateTitle</span>(<span class=\"params\">newTitle</span>: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">        title <span class=\"operator\">=</span> newTitle</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">MyActor</span> &#123;</span><br><span class=\"line\">​</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">waitHere</span>() <span class=\"keyword\">async</span> -&gt; <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try?</span> <span class=\"keyword\">await</span> <span class=\"type\">Task</span>.sleep(nanoseconds: <span class=\"number\">1_000_000_000</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">​</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">consumeCapacity</span>(<span class=\"params\">consume</span>: <span class=\"type\">Int</span>) <span class=\"keyword\">async</span> <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">guard</span> capacity <span class=\"operator\">&gt;=</span> consume <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"type\">CustomError</span>.valueTooLarge</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">​</span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">await</span> waitHere() <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"type\">CustomError</span>.valueTooLarge</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">​</span><br><span class=\"line\">        capacity <span class=\"operator\">-=</span> consume</span><br><span class=\"line\">        <span class=\"keyword\">return</span> capacity</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The call is as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> myActor <span class=\"operator\">=</span> <span class=\"type\">MyActor</span>(title: <span class=\"string\">&quot;Starting title!&quot;</span>, num: <span class=\"number\">1001</span>, capacity: <span class=\"number\">9000</span>)</span><br><span class=\"line\"><span class=\"type\">Task</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> capacity1 <span class=\"operator\">=</span> <span class=\"keyword\">try</span> <span class=\"keyword\">await</span> myActor.consumeCapacity(consume: <span class=\"number\">5000</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Consume succeeded, capacity = <span class=\"subst\">\\(capacity1)</span>&quot;</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Consume failed: <span class=\"subst\">\\(error)</span>&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"type\">Task</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> capacity2 <span class=\"operator\">=</span> <span class=\"keyword\">try</span> <span class=\"keyword\">await</span> myActor.consumeCapacity(consume: <span class=\"number\">5000</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Consume succeeded, capacity = <span class=\"subst\">\\(capacity2)</span>&quot;</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Consume failed: <span class=\"subst\">\\(error)</span>&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The results of the implementation are as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Comsume</span> succeeded, capacity <span class=\"operator\">=</span> <span class=\"number\">4000</span></span><br><span class=\"line\"><span class=\"type\">Comsume</span> succeeded, capacity <span class=\"operator\">=</span> <span class=\"operator\">-</span><span class=\"number\">1000</span></span><br></pre></td></tr></table></figure>\n<p>Where did it go wrong?<br>​Generally, the two-step operation of “check-modify” should not cross the await suspension point. They belong to an “atomic operation”, and the await suspension point may “cut” them. How to solve this problem? , you can check it again before modifying:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">consumeCapacity</span>(<span class=\"params\">consume</span>: <span class=\"type\">Int</span>) <span class=\"keyword\">async</span> <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">​</span><br><span class=\"line\">    <span class=\"keyword\">guard</span> capacity <span class=\"operator\">&gt;=</span> consume <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"type\">CustomError</span>.valueTooLarge</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">​</span><br><span class=\"line\">    <span class=\"comment\">// suspension point</span></span><br><span class=\"line\">    <span class=\"keyword\">guard</span> <span class=\"keyword\">await</span> waitHere() <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"type\">CustomError</span>.valueTooLarge</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">​</span><br><span class=\"line\">    <span class=\"comment\">// re-check</span></span><br><span class=\"line\">    <span class=\"keyword\">guard</span> capacity <span class=\"operator\">&gt;=</span> consume <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"type\">CustomError</span>.valueTooLarge</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">​</span><br><span class=\"line\">    capacity <span class=\"operator\">-=</span> consume</span><br><span class=\"line\">    <span class=\"keyword\">return</span> capacity</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The results are as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Consume</span> succeeded, capacity <span class=\"operator\">=</span> <span class=\"number\">4000</span></span><br><span class=\"line\"><span class=\"type\">Consume</span> failed: valueTooLarge</span><br></pre></td></tr></table></figure>\n<p>So, this issue needs to be taken care of.</p>\n<h4 id=\"6-globalActor-and-MainActor\"><a href=\"#6-globalActor-and-MainActor\" class=\"headerlink\" title=\"6. globalActor and MainActor\"></a><font size=3 color=#4169E1>6. globalActor and MainActor</font></h4><p>6.1 globalActor<br>An actor is data-protected at the boundaries of its instances. globalActor is designed to be thread-safe for global variables, static attributes, and cross-type&#x2F;cross-instance. A global actor is a type that has the @globalActor attribute and contains a static attribute called shared that provides a shared instance of an actor. Example:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@globalActor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">SomeGlobalActor</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">actor</span> <span class=\"title class_\">MyActor</span> &#123; &#125;</span><br><span class=\"line\">​</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> shared <span class=\"operator\">=</span> <span class=\"type\">MyActor</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@MyGlobalActor</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> globalValue <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"meta\">@MyGlobalActor</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">incrementGlobalValue</span>() <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">    globalValue <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"meta\">@MyGlobalActor</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">printGlobalValue</span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Global value: <span class=\"subst\">\\(globalValue)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>This makes the global variable globalValue thread-safe.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Task</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> incrementGlobalValue()</span><br><span class=\"line\">    <span class=\"keyword\">await</span> printGlobalValue()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">Task</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> incrementGlobalValue()</span><br><span class=\"line\">    <span class=\"keyword\">await</span> printGlobalValue()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>6.2 MainActor<br>MainActor is a special case of globalActor. MainActor is a global actor that describes the main thread, and the methods, properties, etc. modified by MainActor will be executed on the main thread.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@globalActor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">actor</span> <span class=\"title class_\">MainActor</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> shared <span class=\"operator\">=</span> <span class=\"type\">MainActor</span>(<span class=\"operator\">...</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>We often use ‘MainActor.run’ to execute a piece of code on the main thread:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">await</span> <span class=\"type\">MainActor</span>.run &#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.image <span class=\"operator\">=</span> image</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://github.com/apple/swift-evolution/blob/main/proposals/0306-actors.md\">https://github.com/apple/swift-evolution/blob/main/proposals/0306-actors.md</a><br>[2] <a href=\"https://juejin.cn/post/7076738494869012494\">https://juejin.cn/post/7076738494869012494</a><br>[3] <a href=\"https://zhuanlan.zhihu.com/p/86460724\">https://zhuanlan.zhihu.com/p/86460724</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 10 minutes to finish reading this article.</em></font></p>\n<h4 id=\"1-The-Birth-of-Actor\"><a href=\"#1-The-Birth-of-Actor\" class=\"headerlink\" title=\"1. The Birth of Actor\"></a><font size=3 color=#4169E1>1. The Birth of Actor</font></h4><p>class allows creating types with mutable properties and sharing them throughout a program. However, classes have problems in concurrent programming, requiring developers to manually implement error-prone synchronization mechanisms to avoid data races.</p>\n<p>Our goal is to allow global sharing of mutable state while maintaining static detection of data contention and other concurrency issues. And the actor model can be a good solution to this problem. Each actor ensures the independence of its data through data isolation, thus ensuring that only one thread can access that data at a time.</p>\n<p><strong>Note:</strong><br>Actor model is a concurrent computing programming model, originally proposed by computer scientist Carl Hewitt and others in 1973, it is not owned by a certain language or framework, and can be used in almost any programming language. It ensures data security through data isolation. Its principle maintains a serial queue (mailbox) inside, and all external calls involving data security are executed serially.</p>\n<p>See: <a href=\"https://en.wikipedia.org/wiki/Actor_model\">https://en.wikipedia.org/wiki/Actor_model</a></p>\n<p>Swift introduced Actor as part of the Swift concurrency family in version 5.5. the actor model guarantees the same race conditions and memory safety as structured concurrency, while providing a Swift abstraction that is familiar to developers, and implementing features that are available in other explicitly declared types.</p>\n<h4 id=\"2-Concept-of-Actor\"><a href=\"#2-Concept-of-Actor\" class=\"headerlink\" title=\"2. Concept of Actor\"></a><font size=3 color=#4169E1>2. Concept of Actor</font></h4><p>In Proposition 0306, Actor is a reference type, and except for the lack of inheritance support, actor is very similar to class: it can adhere to specified protocols, support extensions, etc.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">actor</span> <span class=\"title class_\">MyActor</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> title: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> num: <span class=\"type\">Int</span></span><br><span class=\"line\">​</span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"params\">title</span>: <span class=\"type\">String</span>, <span class=\"params\">num</span>: <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.title <span class=\"operator\">=</span> title</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.num <span class=\"operator\">=</span> num</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">​</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">updateTitle</span>(<span class=\"params\">newTitle</span>: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">        title <span class=\"operator\">=</span> newTitle</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"keyword\">let</span> objectA <span class=\"operator\">=</span> <span class=\"type\">MyActor</span>(title: <span class=\"string\">&quot;Starting title!&quot;</span>, num: <span class=\"number\">1001</span>)</span><br><span class=\"line\"><span class=\"keyword\">await</span> <span class=\"built_in\">print</span>(<span class=\"string\">&quot;ObjectA: &quot;</span>, objectA.title)</span><br><span class=\"line\"><span class=\"keyword\">await</span> objectA.updateTitle(newTitle: <span class=\"string\">&quot;Second title!&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">await</span> <span class=\"built_in\">print</span>(<span class=\"string\">&quot;ObjectA: &quot;</span>, objectA.title)</span><br></pre></td></tr></table></figure>\n\n<p>In order to ensure data security under concurrency, the Actor internally executes external accesses serially. Therefore, such accesses are asynchronous, which means that they do not return a result immediately, but are queued up and executed sequentially. Therefore, such accesses need to be executed via await.</p>\n<h4 id=\"3-Actor-isolation\"><a href=\"#3-Actor-isolation\" class=\"headerlink\" title=\"3. Actor isolation\"></a><font size=3 color=#4169E1>3. Actor isolation</font></h4><p>Actor isolation is a way to protect its mutable state by isolating the actor instance as a unit (boundary) from the outside world and severely restricting cross-boundary access, so that only direct access to its stored instance properties is allowed on self.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objectA.title <span class=\"operator\">=</span> <span class=\"string\">&quot;New title!&quot;</span></span><br></pre></td></tr></table></figure>\n<p>The above code will report an error:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Actor</span><span class=\"operator\">-</span><span class=\"keyword\">isolated</span> property title can not be mutated from the main <span class=\"keyword\">actor</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-Nonisolated\"><a href=\"#4-Nonisolated\" class=\"headerlink\" title=\"4. Nonisolated\"></a><font size=3 color=#4169E1>4. Nonisolated</font></h4><p>Nonisolated, as the name implies, means non-isolated. the mailbox serial access mechanism inside the actor is bound to have some performance loss, and methods and computation attributes inside the actor do not always cause Data races. therefore, the “Improved control over actor isolation” in SE0313 provides an explicit way for clients to freely synchronize access to immutable actor states with the keyword nonisolated.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">MyActor</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Inside the method, only the let num is referenced, so there are no Data races.</span></span><br><span class=\"line\">    <span class=\"comment\">// Can be modified by nonisolated</span></span><br><span class=\"line\">    <span class=\"keyword\">nonisolated</span> <span class=\"keyword\">func</span> <span class=\"title function_\">changeIntToSting</span>(<span class=\"params\">num</span>: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Num:&quot;</span> <span class=\"operator\">+</span> <span class=\"type\">String</span>(num)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>This allows you to call the following code directly, and since you don’t need to go through the asynchronous serial mechanism, you don’t need to add await:         </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> num <span class=\"operator\">=</span> objectA.changeIntToSting(num: <span class=\"number\">1002</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;ObjectA: &quot;</span>, num)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;ObjectA: &quot;</span>, objectA.num)</span><br></pre></td></tr></table></figure>\n<p><strong>Note:</strong><br>It is not possible to access the isolated state in the nonisolated method, for example:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">nonisolated</span> <span class=\"keyword\">func</span> <span class=\"title function_\">changeIntToSting</span>(<span class=\"params\">num</span>: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//Actor-isolated property &#x27;title&#x27; can not be mutated from a non-isolated context</span></span><br><span class=\"line\">    title <span class=\"operator\">=</span> <span class=\"string\">&quot;Title&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;Num:&quot;</span> <span class=\"operator\">+</span> <span class=\"type\">String</span>(num)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Remove nonisolated and turn it into an internal method of the actor, where methods and properties can be accessed directly.         </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">MyActor</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">changeIntToSting</span>(<span class=\"params\">num</span>: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        title <span class=\"operator\">=</span> <span class=\"string\">&quot;New Title1&quot;</span></span><br><span class=\"line\">        updateTitle(newTitle: <span class=\"string\">&quot;New Title2&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Num:&quot;</span> <span class=\"operator\">+</span> <span class=\"type\">String</span>(num)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-Actor-Reentrancy\"><a href=\"#5-Actor-Reentrancy\" class=\"headerlink\" title=\"5. Actor Reentrancy\"></a><font size=3 color=#4169E1>5. Actor Reentrancy</font></h4><p>Actor Reentrancy is the context of entering the same actor multiple times in the same thread.Actor-isolated methods are reentrant, which means that the same actor’s method can be called multiple times in the same thread without blocking or waiting.</p>\n<p>This reentrancy can improve performance in some cases because it allows a task executing an actor-isolated method to not wait for the previous call to complete if it needs to call the method again. This flexibility can reduce the overhead of thread switching and thus improve performance.</p>\n<p>Specific attention should be paid to:<br>(1) Actor-isolated methods may have pause points within them when explicitly declared as asynchronous methods;</p>\n<p>(2) When an Actor-isolated method is hung due to a pause point, the method is reentrant, i.e., it can be accessed again before the previous hang is resumed;</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">actor</span> <span class=\"title class_\">MyActor</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> title: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> num: <span class=\"type\">Int</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> capacity: <span class=\"type\">Int</span></span><br><span class=\"line\">​</span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"params\">title</span>: <span class=\"type\">String</span>, <span class=\"params\">num</span>: <span class=\"type\">Int</span>, <span class=\"params\">capacity</span>: <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.title <span class=\"operator\">=</span> title</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.num <span class=\"operator\">=</span> num</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.capacity <span class=\"operator\">=</span> capacity</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">​</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">updateTitle</span>(<span class=\"params\">newTitle</span>: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">        title <span class=\"operator\">=</span> newTitle</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">MyActor</span> &#123;</span><br><span class=\"line\">​</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">waitHere</span>() <span class=\"keyword\">async</span> -&gt; <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try?</span> <span class=\"keyword\">await</span> <span class=\"type\">Task</span>.sleep(nanoseconds: <span class=\"number\">1_000_000_000</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">​</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">consumeCapacity</span>(<span class=\"params\">consume</span>: <span class=\"type\">Int</span>) <span class=\"keyword\">async</span> <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">guard</span> capacity <span class=\"operator\">&gt;=</span> consume <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"type\">CustomError</span>.valueTooLarge</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">​</span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">await</span> waitHere() <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"type\">CustomError</span>.valueTooLarge</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">​</span><br><span class=\"line\">        capacity <span class=\"operator\">-=</span> consume</span><br><span class=\"line\">        <span class=\"keyword\">return</span> capacity</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The call is as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> myActor <span class=\"operator\">=</span> <span class=\"type\">MyActor</span>(title: <span class=\"string\">&quot;Starting title!&quot;</span>, num: <span class=\"number\">1001</span>, capacity: <span class=\"number\">9000</span>)</span><br><span class=\"line\"><span class=\"type\">Task</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> capacity1 <span class=\"operator\">=</span> <span class=\"keyword\">try</span> <span class=\"keyword\">await</span> myActor.consumeCapacity(consume: <span class=\"number\">5000</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Consume succeeded, capacity = <span class=\"subst\">\\(capacity1)</span>&quot;</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Consume failed: <span class=\"subst\">\\(error)</span>&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"type\">Task</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> capacity2 <span class=\"operator\">=</span> <span class=\"keyword\">try</span> <span class=\"keyword\">await</span> myActor.consumeCapacity(consume: <span class=\"number\">5000</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Consume succeeded, capacity = <span class=\"subst\">\\(capacity2)</span>&quot;</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Consume failed: <span class=\"subst\">\\(error)</span>&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The results of the implementation are as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Comsume</span> succeeded, capacity <span class=\"operator\">=</span> <span class=\"number\">4000</span></span><br><span class=\"line\"><span class=\"type\">Comsume</span> succeeded, capacity <span class=\"operator\">=</span> <span class=\"operator\">-</span><span class=\"number\">1000</span></span><br></pre></td></tr></table></figure>\n<p>Where did it go wrong?<br>​Generally, the two-step operation of “check-modify” should not cross the await suspension point. They belong to an “atomic operation”, and the await suspension point may “cut” them. How to solve this problem? , you can check it again before modifying:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">consumeCapacity</span>(<span class=\"params\">consume</span>: <span class=\"type\">Int</span>) <span class=\"keyword\">async</span> <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">​</span><br><span class=\"line\">    <span class=\"keyword\">guard</span> capacity <span class=\"operator\">&gt;=</span> consume <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"type\">CustomError</span>.valueTooLarge</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">​</span><br><span class=\"line\">    <span class=\"comment\">// suspension point</span></span><br><span class=\"line\">    <span class=\"keyword\">guard</span> <span class=\"keyword\">await</span> waitHere() <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"type\">CustomError</span>.valueTooLarge</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">​</span><br><span class=\"line\">    <span class=\"comment\">// re-check</span></span><br><span class=\"line\">    <span class=\"keyword\">guard</span> capacity <span class=\"operator\">&gt;=</span> consume <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"type\">CustomError</span>.valueTooLarge</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">​</span><br><span class=\"line\">    capacity <span class=\"operator\">-=</span> consume</span><br><span class=\"line\">    <span class=\"keyword\">return</span> capacity</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The results are as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Consume</span> succeeded, capacity <span class=\"operator\">=</span> <span class=\"number\">4000</span></span><br><span class=\"line\"><span class=\"type\">Consume</span> failed: valueTooLarge</span><br></pre></td></tr></table></figure>\n<p>So, this issue needs to be taken care of.</p>\n<h4 id=\"6-globalActor-and-MainActor\"><a href=\"#6-globalActor-and-MainActor\" class=\"headerlink\" title=\"6. globalActor and MainActor\"></a><font size=3 color=#4169E1>6. globalActor and MainActor</font></h4><p>6.1 globalActor<br>An actor is data-protected at the boundaries of its instances. globalActor is designed to be thread-safe for global variables, static attributes, and cross-type&#x2F;cross-instance. A global actor is a type that has the @globalActor attribute and contains a static attribute called shared that provides a shared instance of an actor. Example:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@globalActor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">SomeGlobalActor</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">actor</span> <span class=\"title class_\">MyActor</span> &#123; &#125;</span><br><span class=\"line\">​</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> shared <span class=\"operator\">=</span> <span class=\"type\">MyActor</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@MyGlobalActor</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> globalValue <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"meta\">@MyGlobalActor</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">incrementGlobalValue</span>() <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">    globalValue <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"meta\">@MyGlobalActor</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">printGlobalValue</span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Global value: <span class=\"subst\">\\(globalValue)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>This makes the global variable globalValue thread-safe.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Task</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> incrementGlobalValue()</span><br><span class=\"line\">    <span class=\"keyword\">await</span> printGlobalValue()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">Task</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> incrementGlobalValue()</span><br><span class=\"line\">    <span class=\"keyword\">await</span> printGlobalValue()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>6.2 MainActor<br>MainActor is a special case of globalActor. MainActor is a global actor that describes the main thread, and the methods, properties, etc. modified by MainActor will be executed on the main thread.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@globalActor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">actor</span> <span class=\"title class_\">MainActor</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> shared <span class=\"operator\">=</span> <span class=\"type\">MainActor</span>(<span class=\"operator\">...</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>We often use ‘MainActor.run’ to execute a piece of code on the main thread:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">await</span> <span class=\"type\">MainActor</span>.run &#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.image <span class=\"operator\">=</span> image</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://github.com/apple/swift-evolution/blob/main/proposals/0306-actors.md\">https://github.com/apple/swift-evolution/blob/main/proposals/0306-actors.md</a><br>[2] <a href=\"https://juejin.cn/post/7076738494869012494\">https://juejin.cn/post/7076738494869012494</a><br>[3] <a href=\"https://zhuanlan.zhihu.com/p/86460724\">https://zhuanlan.zhihu.com/p/86460724</a></p>\n"},{"title":"05. Sendable","date":"2023-09-24T19:00:00.000Z","_content":"\n\n<font color=gray size=2>*It will take about 5 minutes to finish reading this article.*</font>\n\n\n#### <font size=3 color=#4169E1>1. Backgroud</font> \n\nSendable is used to mark a type that can be safely passed between different tasks and threads. It is an important concept in concurrent programming and is used to ensure that data is passed without causing race conditions or data race issues. By marking a type as Sendable, the compiler can verify the delivery behavior of concurrent code at compile time to improve the safety of the code.\n\nBecause Actor can only guarantee the thread safety of instance boundaries, it cannot guarantee the safety of objects such as references that cross Actor. For example:\n\n```Swift\nclass User {\n  var name: String\n  var age: Int\n\n  init(name: String, age: Int) {\n    self.name = name\n    self.age = age\n  }\n}\n\nactor BankAccount {\n  let accountNumber: Int\n  var balance: Double\n  var name: String\n  var age: Int\n\n  func user() -> User {\n    return User.init(name: name, age: age)\n  }\n}\n```\nAt this time, once the User is obtained externally, security cannot be guaranteed. At this time, Sendable can help to pass it freely across actors.\n\n#### <font size=3 color=#4169E1>2. The Sendable Protocol</font> \n\nThe protocol is defined as follows:\n```Swift\n/// ### Sendable Metatypes\n///\n/// Metatypes such as `Int.Type` implicitly conform to the `Sendable` protocol.\npublic protocol Sendable {\n\n}\n```\n\nThe Sendable protocol has the following characteristics:\n\n(1) Sendable is an empty protocol and a Marker Protocol;\n\n(2) It cannot be used as a type name for is, as? and other operations;\n\n(3) Cannot be used as a constraint on a generic type to make a type comform to a non-marker protocol, for example:\n\n```Swift\nprotocol P {\n   func test()\n }\n\n class A<T> {}\n\n // Error: Conditional conformance to non-marker protocol 'P' cannot depend on conformance of 'T' to non-marker protocol 'Sendable'\n extension A: P where T: Sendable {\n   func test() {}\n }\n```\n\n(4) Value types (struct, basic type, enum, etc.) will perform a copy operation when being passed, which means that they are safe to pass across actors. These types implicitly and automatically comply with the Sendable protocol, as follows:\n\n```Swift\n// Implicitly complies with the Sendable protocol\nstruct A {\n     var views: Int\n}\n// Will not implicitly comply with the Sendable protocol\nclass B {\n     var views: Int\n}\n// Because it contains a reference type, it does not implicitly comply with the Sendable protocol.\nstruct C {\n     var views: Int\n     var b: B\n}\n\n//If Value does not comply with the Sendable protocol, D will not automatically comply with the protocol implicitly.\nstruct D<Value> {\n     var child: Value\n}\n```\nNote: \nIf struct and enum contain reference types, they will not implicitly comply with the Sendable protocol.\n\n(5) All actors comform to the Actor protocol, which inherits from Sendable, as follows:\n\n```Swift\n@available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)\npublic protocol Actor : AnyObject, Sendable {\n    nonisolated var unownedExecutor: UnownedSerialExecutor { get }\n}\n\n```\n\n(6) Class requires us to actively declare compliance with the Sendable protocol and has the following restrictions:\n\nA. Final class restriction: When a class is declared to conform to the Sendable protocol, it must be a final class. \n\nThis is because inheritance may introduce concurrency safety issues, and only methods and properties of final classes can be safely used in a concurrent environment. If the class is not final, the compiler will provide a warning and suggest using @unchecked Sendable as an alternative, but this does not provide the same concurrency safety.\n\nB. Immutable attribute restrictions: The stored attributes of classes that conform to`` the Sendable protocol must be immutable, that is, they cannot be modified after initialization. \n\nThis is to ensure that no race conditions occur when passing instances.\n\nC. Attribute type restrictions: The type of the storage attribute of the class must also comform to the Sendable protocol. \n\nThis is to ensure that the passing of properties is also safe. If the property's type is not Sendable, a race condition may occur when passing it.\n\nD. Ancestor class restriction: If a class has an ancestor class, then the ancestor class must comply with the Sendable protocol or NSObject.\n\nThis is to ensure that all classes in the class inheritance chain are safe in a concurrent environment.\n\nGoing back to the top code example, User has 2 modification options:\n\nChanged from class to struct:\n\n```Swift\nstruct User {\n  var name: String\n  var age: Int\n}\n```\n\nOr manually implement the Sendable protocol:\n\n```Swift\nfinal class User: Sendable {\n  let name: String\n  let age: Int\n}\n```\n\n(7) If you want the compiler not to check Sendable semantics, you can use @unchecked attribute;\n\n#### <font size=3 color=#4169E1>3. @Sendable</font> \n\nSendable can only be used to modify regular types. For closures and functions, you need to use @Sendable. Functions and closures modified by @Sendable can be passed across actors.\n\n(1) To modify a function:\n\n```Swift\n@Sendable\nfunc incrementAndPrint(value: inout Int) {\n    value += 1\n    print(\"Value is now \\(value)\")\n}\n\nvar myValue = 5\n\nTask {\n    await incrementAndPrint(value: &myValue)\n}\n\nTask {\n    await incrementAndPrint(value: &myValue)\n}\n```\n(2) To modify a closure:\n\n```Swift\nactorStorage {\n     var capacity: Int\n    \n     init(capacity: Int) {\n         self.capacity = capacity\n     }\n    \n     func addCapacity(consume: Int, completion: @Sendable (Storage) -> Void) {\n         capacity += consume\n         completion(self)\n     }\n}\n\n//Create actor instance\nlet storage = Storage(capacity: 1500)\n\n//Execute tasks in actor context\nTask {\n     await Storage.(consume: 500) { storage in\n         print(\"Storage new capacity: \\(storage.capacity)\")\n     }\n}\n```\nThe closure modified by @Sendable may be called in a concurrent environment, so data security must be paid attention to.\n\nTherefore, when it comes to closures executed in a concurrent environment, especially method parameters and return values ​​within the actor or external methods of the actor, if they may be passed between different tasks and threads, they should be decorated with @Sendable. Ensure safety.\n\nCompliance checks performed by the compiler when using @Sendable to decorate a closure help ensure the safety of the closure in a concurrent environment:\n\nFirst, actor-isolated properties cannot be captured: since @Sendable closures may be executed in a concurrent environment, they cannot capture actor-isolated properties belonging to other actors. Because @Sendable closures can execute across different tasks and threads, capturing properties belonging to other actors can lead to race conditions. Only asynchronous @Sendable closures (@Sendable () async) can capture actor-isolated properties, because async closures can execute in the same actor context.\n\nSecond, mutable var variables cannot be captured: Since @Sendable closures may be executed between different tasks and threads, capturing mutable var variables may cause data race problems. Therefore, @Sendable closures do not allow capture of mutable variables.\n\nThird, the captured object must implement the Sendable protocol: the object captured in the @Sendable closure must be a type that follows the Sendable protocol. This is to ensure safety when passing objects in a concurrent environment and avoid race conditions and data races.\n\nIn addition, it should be noted that in WWDC21, Apple stated that in future versions, the Swift compiler will prohibit passing instances of non-Sendable types to actors. This change may affect some existing code, especially that involving the passing of instances of non-Sendable types.\n\n\n\n#### <font size=3 color=gray>*Reference*</font>\n\n[1] https://juejin.cn/post/7153096148842971144      \n[2] https://juejin.cn/post/7076741945820872717","source":"_posts/Swift/07. Concurrency/05. Sendable.md","raw":"---\ntitle: 05. Sendable \ndate: 2023-09-24 21:00:00\ncategories: \n- [Swift, 07. Concurrency]\ntags:\n- Sendable\n---\n\n\n<font color=gray size=2>*It will take about 5 minutes to finish reading this article.*</font>\n\n\n#### <font size=3 color=#4169E1>1. Backgroud</font> \n\nSendable is used to mark a type that can be safely passed between different tasks and threads. It is an important concept in concurrent programming and is used to ensure that data is passed without causing race conditions or data race issues. By marking a type as Sendable, the compiler can verify the delivery behavior of concurrent code at compile time to improve the safety of the code.\n\nBecause Actor can only guarantee the thread safety of instance boundaries, it cannot guarantee the safety of objects such as references that cross Actor. For example:\n\n```Swift\nclass User {\n  var name: String\n  var age: Int\n\n  init(name: String, age: Int) {\n    self.name = name\n    self.age = age\n  }\n}\n\nactor BankAccount {\n  let accountNumber: Int\n  var balance: Double\n  var name: String\n  var age: Int\n\n  func user() -> User {\n    return User.init(name: name, age: age)\n  }\n}\n```\nAt this time, once the User is obtained externally, security cannot be guaranteed. At this time, Sendable can help to pass it freely across actors.\n\n#### <font size=3 color=#4169E1>2. The Sendable Protocol</font> \n\nThe protocol is defined as follows:\n```Swift\n/// ### Sendable Metatypes\n///\n/// Metatypes such as `Int.Type` implicitly conform to the `Sendable` protocol.\npublic protocol Sendable {\n\n}\n```\n\nThe Sendable protocol has the following characteristics:\n\n(1) Sendable is an empty protocol and a Marker Protocol;\n\n(2) It cannot be used as a type name for is, as? and other operations;\n\n(3) Cannot be used as a constraint on a generic type to make a type comform to a non-marker protocol, for example:\n\n```Swift\nprotocol P {\n   func test()\n }\n\n class A<T> {}\n\n // Error: Conditional conformance to non-marker protocol 'P' cannot depend on conformance of 'T' to non-marker protocol 'Sendable'\n extension A: P where T: Sendable {\n   func test() {}\n }\n```\n\n(4) Value types (struct, basic type, enum, etc.) will perform a copy operation when being passed, which means that they are safe to pass across actors. These types implicitly and automatically comply with the Sendable protocol, as follows:\n\n```Swift\n// Implicitly complies with the Sendable protocol\nstruct A {\n     var views: Int\n}\n// Will not implicitly comply with the Sendable protocol\nclass B {\n     var views: Int\n}\n// Because it contains a reference type, it does not implicitly comply with the Sendable protocol.\nstruct C {\n     var views: Int\n     var b: B\n}\n\n//If Value does not comply with the Sendable protocol, D will not automatically comply with the protocol implicitly.\nstruct D<Value> {\n     var child: Value\n}\n```\nNote: \nIf struct and enum contain reference types, they will not implicitly comply with the Sendable protocol.\n\n(5) All actors comform to the Actor protocol, which inherits from Sendable, as follows:\n\n```Swift\n@available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)\npublic protocol Actor : AnyObject, Sendable {\n    nonisolated var unownedExecutor: UnownedSerialExecutor { get }\n}\n\n```\n\n(6) Class requires us to actively declare compliance with the Sendable protocol and has the following restrictions:\n\nA. Final class restriction: When a class is declared to conform to the Sendable protocol, it must be a final class. \n\nThis is because inheritance may introduce concurrency safety issues, and only methods and properties of final classes can be safely used in a concurrent environment. If the class is not final, the compiler will provide a warning and suggest using @unchecked Sendable as an alternative, but this does not provide the same concurrency safety.\n\nB. Immutable attribute restrictions: The stored attributes of classes that conform to`` the Sendable protocol must be immutable, that is, they cannot be modified after initialization. \n\nThis is to ensure that no race conditions occur when passing instances.\n\nC. Attribute type restrictions: The type of the storage attribute of the class must also comform to the Sendable protocol. \n\nThis is to ensure that the passing of properties is also safe. If the property's type is not Sendable, a race condition may occur when passing it.\n\nD. Ancestor class restriction: If a class has an ancestor class, then the ancestor class must comply with the Sendable protocol or NSObject.\n\nThis is to ensure that all classes in the class inheritance chain are safe in a concurrent environment.\n\nGoing back to the top code example, User has 2 modification options:\n\nChanged from class to struct:\n\n```Swift\nstruct User {\n  var name: String\n  var age: Int\n}\n```\n\nOr manually implement the Sendable protocol:\n\n```Swift\nfinal class User: Sendable {\n  let name: String\n  let age: Int\n}\n```\n\n(7) If you want the compiler not to check Sendable semantics, you can use @unchecked attribute;\n\n#### <font size=3 color=#4169E1>3. @Sendable</font> \n\nSendable can only be used to modify regular types. For closures and functions, you need to use @Sendable. Functions and closures modified by @Sendable can be passed across actors.\n\n(1) To modify a function:\n\n```Swift\n@Sendable\nfunc incrementAndPrint(value: inout Int) {\n    value += 1\n    print(\"Value is now \\(value)\")\n}\n\nvar myValue = 5\n\nTask {\n    await incrementAndPrint(value: &myValue)\n}\n\nTask {\n    await incrementAndPrint(value: &myValue)\n}\n```\n(2) To modify a closure:\n\n```Swift\nactorStorage {\n     var capacity: Int\n    \n     init(capacity: Int) {\n         self.capacity = capacity\n     }\n    \n     func addCapacity(consume: Int, completion: @Sendable (Storage) -> Void) {\n         capacity += consume\n         completion(self)\n     }\n}\n\n//Create actor instance\nlet storage = Storage(capacity: 1500)\n\n//Execute tasks in actor context\nTask {\n     await Storage.(consume: 500) { storage in\n         print(\"Storage new capacity: \\(storage.capacity)\")\n     }\n}\n```\nThe closure modified by @Sendable may be called in a concurrent environment, so data security must be paid attention to.\n\nTherefore, when it comes to closures executed in a concurrent environment, especially method parameters and return values ​​within the actor or external methods of the actor, if they may be passed between different tasks and threads, they should be decorated with @Sendable. Ensure safety.\n\nCompliance checks performed by the compiler when using @Sendable to decorate a closure help ensure the safety of the closure in a concurrent environment:\n\nFirst, actor-isolated properties cannot be captured: since @Sendable closures may be executed in a concurrent environment, they cannot capture actor-isolated properties belonging to other actors. Because @Sendable closures can execute across different tasks and threads, capturing properties belonging to other actors can lead to race conditions. Only asynchronous @Sendable closures (@Sendable () async) can capture actor-isolated properties, because async closures can execute in the same actor context.\n\nSecond, mutable var variables cannot be captured: Since @Sendable closures may be executed between different tasks and threads, capturing mutable var variables may cause data race problems. Therefore, @Sendable closures do not allow capture of mutable variables.\n\nThird, the captured object must implement the Sendable protocol: the object captured in the @Sendable closure must be a type that follows the Sendable protocol. This is to ensure safety when passing objects in a concurrent environment and avoid race conditions and data races.\n\nIn addition, it should be noted that in WWDC21, Apple stated that in future versions, the Swift compiler will prohibit passing instances of non-Sendable types to actors. This change may affect some existing code, especially that involving the passing of instances of non-Sendable types.\n\n\n\n#### <font size=3 color=gray>*Reference*</font>\n\n[1] https://juejin.cn/post/7153096148842971144      \n[2] https://juejin.cn/post/7076741945820872717","slug":"Swift/07. Concurrency/05. Sendable","published":1,"updated":"2023-09-26T19:41:38.527Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr5w0048vu0m3k7ccexp","content":"<p><font color=gray size=2><em>It will take about 5 minutes to finish reading this article.</em></font></p>\n<h4 id=\"1-Backgroud\"><a href=\"#1-Backgroud\" class=\"headerlink\" title=\"1. Backgroud\"></a><font size=3 color=#4169E1>1. Backgroud</font></h4><p>Sendable is used to mark a type that can be safely passed between different tasks and threads. It is an important concept in concurrent programming and is used to ensure that data is passed without causing race conditions or data race issues. By marking a type as Sendable, the compiler can verify the delivery behavior of concurrent code at compile time to improve the safety of the code.</p>\n<p>Because Actor can only guarantee the thread safety of instance boundaries, it cannot guarantee the safety of objects such as references that cross Actor. For example:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> name: <span class=\"type\">String</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> age: <span class=\"type\">Int</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">init</span>(<span class=\"params\">name</span>: <span class=\"type\">String</span>, <span class=\"params\">age</span>: <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.name <span class=\"operator\">=</span> name</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.age <span class=\"operator\">=</span> age</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">actor</span> <span class=\"title class_\">BankAccount</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> accountNumber: <span class=\"type\">Int</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> balance: <span class=\"type\">Double</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> name: <span class=\"type\">String</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> age: <span class=\"type\">Int</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">func</span> <span class=\"title function_\">user</span>() -&gt; <span class=\"type\">User</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">User</span>.<span class=\"keyword\">init</span>(name: name, age: age)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>At this time, once the User is obtained externally, security cannot be guaranteed. At this time, Sendable can help to pass it freely across actors.</p>\n<h4 id=\"2-The-Sendable-Protocol\"><a href=\"#2-The-Sendable-Protocol\" class=\"headerlink\" title=\"2. The Sendable Protocol\"></a><font size=3 color=#4169E1>2. The Sendable Protocol</font></h4><p>The protocol is defined as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// ### Sendable Metatypes</span></span><br><span class=\"line\"><span class=\"comment\">///</span></span><br><span class=\"line\"><span class=\"comment\">/// Metatypes such as `Int.Type` implicitly conform to the `Sendable` protocol.</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">protocol</span> <span class=\"title class_\">Sendable</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>The Sendable protocol has the following characteristics:</p>\n<p>(1) Sendable is an empty protocol and a Marker Protocol;</p>\n<p>(2) It cannot be used as a type name for is, as? and other operations;</p>\n<p>(3) Cannot be used as a constraint on a generic type to make a type comform to a non-marker protocol, for example:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protocol</span> <span class=\"title class_\">P</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">func</span> <span class=\"title function_\">test</span>()</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">class</span> <span class=\"title class_\">A</span>&lt;<span class=\"title class_\">T</span>&gt; &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// Error: Conditional conformance to non-marker protocol &#x27;P&#x27; cannot depend on conformance of &#x27;T&#x27; to non-marker protocol &#x27;Sendable&#x27;</span></span><br><span class=\"line\"> <span class=\"keyword\">extension</span> <span class=\"title class_\">A</span>: <span class=\"title class_\">P</span> <span class=\"title class_\">where</span> <span class=\"title class_\">T</span>: <span class=\"title class_\">Sendable</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">func</span> <span class=\"title function_\">test</span>() &#123;&#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>(4) Value types (struct, basic type, enum, etc.) will perform a copy operation when being passed, which means that they are safe to pass across actors. These types implicitly and automatically comply with the Sendable protocol, as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Implicitly complies with the Sendable protocol</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">var</span> views: <span class=\"type\">Int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Will not implicitly comply with the Sendable protocol</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">var</span> views: <span class=\"type\">Int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Because it contains a reference type, it does not implicitly comply with the Sendable protocol.</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">C</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">var</span> views: <span class=\"type\">Int</span></span><br><span class=\"line\">     <span class=\"keyword\">var</span> b: <span class=\"type\">B</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//If Value does not comply with the Sendable protocol, D will not automatically comply with the protocol implicitly.</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">D</span>&lt;<span class=\"title class_\">Value</span>&gt; &#123;</span><br><span class=\"line\">     <span class=\"keyword\">var</span> child: <span class=\"type\">Value</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Note:<br>If struct and enum contain reference types, they will not implicitly comply with the Sendable protocol.</p>\n<p>(5) All actors comform to the Actor protocol, which inherits from Sendable, as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@available</span>(<span class=\"keyword\">macOS</span> <span class=\"number\">10.15</span>, <span class=\"keyword\">iOS</span> <span class=\"number\">13.0</span>, <span class=\"keyword\">watchOS</span> <span class=\"number\">6.0</span>, <span class=\"keyword\">tvOS</span> <span class=\"number\">13.0</span>, <span class=\"operator\">*</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">protocol</span> <span class=\"title class_\">Actor</span> : <span class=\"title class_\">AnyObject</span>, <span class=\"title class_\">Sendable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">nonisolated</span> <span class=\"keyword\">var</span> unownedExecutor: <span class=\"type\">UnownedSerialExecutor</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>(6) Class requires us to actively declare compliance with the Sendable protocol and has the following restrictions:</p>\n<p>A. Final class restriction: When a class is declared to conform to the Sendable protocol, it must be a final class. </p>\n<p>This is because inheritance may introduce concurrency safety issues, and only methods and properties of final classes can be safely used in a concurrent environment. If the class is not final, the compiler will provide a warning and suggest using @unchecked Sendable as an alternative, but this does not provide the same concurrency safety.</p>\n<p>B. Immutable attribute restrictions: The stored attributes of classes that conform to&#96;&#96; the Sendable protocol must be immutable, that is, they cannot be modified after initialization. </p>\n<p>This is to ensure that no race conditions occur when passing instances.</p>\n<p>C. Attribute type restrictions: The type of the storage attribute of the class must also comform to the Sendable protocol. </p>\n<p>This is to ensure that the passing of properties is also safe. If the property’s type is not Sendable, a race condition may occur when passing it.</p>\n<p>D. Ancestor class restriction: If a class has an ancestor class, then the ancestor class must comply with the Sendable protocol or NSObject.</p>\n<p>This is to ensure that all classes in the class inheritance chain are safe in a concurrent environment.</p>\n<p>Going back to the top code example, User has 2 modification options:</p>\n<p>Changed from class to struct:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> name: <span class=\"type\">String</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> age: <span class=\"type\">Int</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Or manually implement the Sendable protocol:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span>: <span class=\"title class_\">Sendable</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> name: <span class=\"type\">String</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> age: <span class=\"type\">Int</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>(7) If you want the compiler not to check Sendable semantics, you can use @unchecked attribute;</p>\n<h4 id=\"3-Sendable\"><a href=\"#3-Sendable\" class=\"headerlink\" title=\"3. @Sendable\"></a><font size=3 color=#4169E1>3. @Sendable</font></h4><p>Sendable can only be used to modify regular types. For closures and functions, you need to use @Sendable. Functions and closures modified by @Sendable can be passed across actors.</p>\n<p>(1) To modify a function:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Sendable</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">incrementAndPrint</span>(<span class=\"params\">value</span>: <span class=\"keyword\">inout</span> <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">    value <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Value is now <span class=\"subst\">\\(value)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> myValue <span class=\"operator\">=</span> <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Task</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> incrementAndPrint(value: <span class=\"operator\">&amp;</span>myValue)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Task</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> incrementAndPrint(value: <span class=\"operator\">&amp;</span>myValue)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>(2) To modify a closure:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">actorStorage &#123;</span><br><span class=\"line\">     <span class=\"keyword\">var</span> capacity: <span class=\"type\">Int</span></span><br><span class=\"line\">    </span><br><span class=\"line\">     <span class=\"keyword\">init</span>(<span class=\"params\">capacity</span>: <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">self</span>.capacity <span class=\"operator\">=</span> capacity</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">     <span class=\"keyword\">func</span> <span class=\"title function_\">addCapacity</span>(<span class=\"params\">consume</span>: <span class=\"type\">Int</span>, <span class=\"params\">completion</span>: <span class=\"meta\">@Sendable</span> (<span class=\"type\">Storage</span>) -&gt; <span class=\"type\">Void</span>) &#123;</span><br><span class=\"line\">         capacity <span class=\"operator\">+=</span> consume</span><br><span class=\"line\">         completion(<span class=\"keyword\">self</span>)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Create actor instance</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> storage <span class=\"operator\">=</span> <span class=\"type\">Storage</span>(capacity: <span class=\"number\">1500</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Execute tasks in actor context</span></span><br><span class=\"line\"><span class=\"type\">Task</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">await</span> <span class=\"type\">Storage</span>.(consume: <span class=\"number\">500</span>) &#123; storage <span class=\"keyword\">in</span></span><br><span class=\"line\">         <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Storage new capacity: <span class=\"subst\">\\(storage.capacity)</span>&quot;</span>)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The closure modified by @Sendable may be called in a concurrent environment, so data security must be paid attention to.</p>\n<p>Therefore, when it comes to closures executed in a concurrent environment, especially method parameters and return values ​​within the actor or external methods of the actor, if they may be passed between different tasks and threads, they should be decorated with @Sendable. Ensure safety.</p>\n<p>Compliance checks performed by the compiler when using @Sendable to decorate a closure help ensure the safety of the closure in a concurrent environment:</p>\n<p>First, actor-isolated properties cannot be captured: since @Sendable closures may be executed in a concurrent environment, they cannot capture actor-isolated properties belonging to other actors. Because @Sendable closures can execute across different tasks and threads, capturing properties belonging to other actors can lead to race conditions. Only asynchronous @Sendable closures (@Sendable () async) can capture actor-isolated properties, because async closures can execute in the same actor context.</p>\n<p>Second, mutable var variables cannot be captured: Since @Sendable closures may be executed between different tasks and threads, capturing mutable var variables may cause data race problems. Therefore, @Sendable closures do not allow capture of mutable variables.</p>\n<p>Third, the captured object must implement the Sendable protocol: the object captured in the @Sendable closure must be a type that follows the Sendable protocol. This is to ensure safety when passing objects in a concurrent environment and avoid race conditions and data races.</p>\n<p>In addition, it should be noted that in WWDC21, Apple stated that in future versions, the Swift compiler will prohibit passing instances of non-Sendable types to actors. This change may affect some existing code, especially that involving the passing of instances of non-Sendable types.</p>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://juejin.cn/post/7153096148842971144\">https://juejin.cn/post/7153096148842971144</a><br>[2] <a href=\"https://juejin.cn/post/7076741945820872717\">https://juejin.cn/post/7076741945820872717</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 5 minutes to finish reading this article.</em></font></p>\n<h4 id=\"1-Backgroud\"><a href=\"#1-Backgroud\" class=\"headerlink\" title=\"1. Backgroud\"></a><font size=3 color=#4169E1>1. Backgroud</font></h4><p>Sendable is used to mark a type that can be safely passed between different tasks and threads. It is an important concept in concurrent programming and is used to ensure that data is passed without causing race conditions or data race issues. By marking a type as Sendable, the compiler can verify the delivery behavior of concurrent code at compile time to improve the safety of the code.</p>\n<p>Because Actor can only guarantee the thread safety of instance boundaries, it cannot guarantee the safety of objects such as references that cross Actor. For example:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> name: <span class=\"type\">String</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> age: <span class=\"type\">Int</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">init</span>(<span class=\"params\">name</span>: <span class=\"type\">String</span>, <span class=\"params\">age</span>: <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.name <span class=\"operator\">=</span> name</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.age <span class=\"operator\">=</span> age</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">actor</span> <span class=\"title class_\">BankAccount</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> accountNumber: <span class=\"type\">Int</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> balance: <span class=\"type\">Double</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> name: <span class=\"type\">String</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> age: <span class=\"type\">Int</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">func</span> <span class=\"title function_\">user</span>() -&gt; <span class=\"type\">User</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">User</span>.<span class=\"keyword\">init</span>(name: name, age: age)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>At this time, once the User is obtained externally, security cannot be guaranteed. At this time, Sendable can help to pass it freely across actors.</p>\n<h4 id=\"2-The-Sendable-Protocol\"><a href=\"#2-The-Sendable-Protocol\" class=\"headerlink\" title=\"2. The Sendable Protocol\"></a><font size=3 color=#4169E1>2. The Sendable Protocol</font></h4><p>The protocol is defined as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// ### Sendable Metatypes</span></span><br><span class=\"line\"><span class=\"comment\">///</span></span><br><span class=\"line\"><span class=\"comment\">/// Metatypes such as `Int.Type` implicitly conform to the `Sendable` protocol.</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">protocol</span> <span class=\"title class_\">Sendable</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>The Sendable protocol has the following characteristics:</p>\n<p>(1) Sendable is an empty protocol and a Marker Protocol;</p>\n<p>(2) It cannot be used as a type name for is, as? and other operations;</p>\n<p>(3) Cannot be used as a constraint on a generic type to make a type comform to a non-marker protocol, for example:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protocol</span> <span class=\"title class_\">P</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">func</span> <span class=\"title function_\">test</span>()</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">class</span> <span class=\"title class_\">A</span>&lt;<span class=\"title class_\">T</span>&gt; &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// Error: Conditional conformance to non-marker protocol &#x27;P&#x27; cannot depend on conformance of &#x27;T&#x27; to non-marker protocol &#x27;Sendable&#x27;</span></span><br><span class=\"line\"> <span class=\"keyword\">extension</span> <span class=\"title class_\">A</span>: <span class=\"title class_\">P</span> <span class=\"title class_\">where</span> <span class=\"title class_\">T</span>: <span class=\"title class_\">Sendable</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">func</span> <span class=\"title function_\">test</span>() &#123;&#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>(4) Value types (struct, basic type, enum, etc.) will perform a copy operation when being passed, which means that they are safe to pass across actors. These types implicitly and automatically comply with the Sendable protocol, as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Implicitly complies with the Sendable protocol</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">var</span> views: <span class=\"type\">Int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Will not implicitly comply with the Sendable protocol</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">var</span> views: <span class=\"type\">Int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Because it contains a reference type, it does not implicitly comply with the Sendable protocol.</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">C</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">var</span> views: <span class=\"type\">Int</span></span><br><span class=\"line\">     <span class=\"keyword\">var</span> b: <span class=\"type\">B</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//If Value does not comply with the Sendable protocol, D will not automatically comply with the protocol implicitly.</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">D</span>&lt;<span class=\"title class_\">Value</span>&gt; &#123;</span><br><span class=\"line\">     <span class=\"keyword\">var</span> child: <span class=\"type\">Value</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Note:<br>If struct and enum contain reference types, they will not implicitly comply with the Sendable protocol.</p>\n<p>(5) All actors comform to the Actor protocol, which inherits from Sendable, as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@available</span>(<span class=\"keyword\">macOS</span> <span class=\"number\">10.15</span>, <span class=\"keyword\">iOS</span> <span class=\"number\">13.0</span>, <span class=\"keyword\">watchOS</span> <span class=\"number\">6.0</span>, <span class=\"keyword\">tvOS</span> <span class=\"number\">13.0</span>, <span class=\"operator\">*</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">protocol</span> <span class=\"title class_\">Actor</span> : <span class=\"title class_\">AnyObject</span>, <span class=\"title class_\">Sendable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">nonisolated</span> <span class=\"keyword\">var</span> unownedExecutor: <span class=\"type\">UnownedSerialExecutor</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>(6) Class requires us to actively declare compliance with the Sendable protocol and has the following restrictions:</p>\n<p>A. Final class restriction: When a class is declared to conform to the Sendable protocol, it must be a final class. </p>\n<p>This is because inheritance may introduce concurrency safety issues, and only methods and properties of final classes can be safely used in a concurrent environment. If the class is not final, the compiler will provide a warning and suggest using @unchecked Sendable as an alternative, but this does not provide the same concurrency safety.</p>\n<p>B. Immutable attribute restrictions: The stored attributes of classes that conform to&#96;&#96; the Sendable protocol must be immutable, that is, they cannot be modified after initialization. </p>\n<p>This is to ensure that no race conditions occur when passing instances.</p>\n<p>C. Attribute type restrictions: The type of the storage attribute of the class must also comform to the Sendable protocol. </p>\n<p>This is to ensure that the passing of properties is also safe. If the property’s type is not Sendable, a race condition may occur when passing it.</p>\n<p>D. Ancestor class restriction: If a class has an ancestor class, then the ancestor class must comply with the Sendable protocol or NSObject.</p>\n<p>This is to ensure that all classes in the class inheritance chain are safe in a concurrent environment.</p>\n<p>Going back to the top code example, User has 2 modification options:</p>\n<p>Changed from class to struct:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> name: <span class=\"type\">String</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> age: <span class=\"type\">Int</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Or manually implement the Sendable protocol:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span>: <span class=\"title class_\">Sendable</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> name: <span class=\"type\">String</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> age: <span class=\"type\">Int</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>(7) If you want the compiler not to check Sendable semantics, you can use @unchecked attribute;</p>\n<h4 id=\"3-Sendable\"><a href=\"#3-Sendable\" class=\"headerlink\" title=\"3. @Sendable\"></a><font size=3 color=#4169E1>3. @Sendable</font></h4><p>Sendable can only be used to modify regular types. For closures and functions, you need to use @Sendable. Functions and closures modified by @Sendable can be passed across actors.</p>\n<p>(1) To modify a function:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Sendable</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">incrementAndPrint</span>(<span class=\"params\">value</span>: <span class=\"keyword\">inout</span> <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">    value <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Value is now <span class=\"subst\">\\(value)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> myValue <span class=\"operator\">=</span> <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Task</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> incrementAndPrint(value: <span class=\"operator\">&amp;</span>myValue)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Task</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> incrementAndPrint(value: <span class=\"operator\">&amp;</span>myValue)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>(2) To modify a closure:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">actorStorage &#123;</span><br><span class=\"line\">     <span class=\"keyword\">var</span> capacity: <span class=\"type\">Int</span></span><br><span class=\"line\">    </span><br><span class=\"line\">     <span class=\"keyword\">init</span>(<span class=\"params\">capacity</span>: <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">self</span>.capacity <span class=\"operator\">=</span> capacity</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">     <span class=\"keyword\">func</span> <span class=\"title function_\">addCapacity</span>(<span class=\"params\">consume</span>: <span class=\"type\">Int</span>, <span class=\"params\">completion</span>: <span class=\"meta\">@Sendable</span> (<span class=\"type\">Storage</span>) -&gt; <span class=\"type\">Void</span>) &#123;</span><br><span class=\"line\">         capacity <span class=\"operator\">+=</span> consume</span><br><span class=\"line\">         completion(<span class=\"keyword\">self</span>)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Create actor instance</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> storage <span class=\"operator\">=</span> <span class=\"type\">Storage</span>(capacity: <span class=\"number\">1500</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Execute tasks in actor context</span></span><br><span class=\"line\"><span class=\"type\">Task</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">await</span> <span class=\"type\">Storage</span>.(consume: <span class=\"number\">500</span>) &#123; storage <span class=\"keyword\">in</span></span><br><span class=\"line\">         <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Storage new capacity: <span class=\"subst\">\\(storage.capacity)</span>&quot;</span>)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The closure modified by @Sendable may be called in a concurrent environment, so data security must be paid attention to.</p>\n<p>Therefore, when it comes to closures executed in a concurrent environment, especially method parameters and return values ​​within the actor or external methods of the actor, if they may be passed between different tasks and threads, they should be decorated with @Sendable. Ensure safety.</p>\n<p>Compliance checks performed by the compiler when using @Sendable to decorate a closure help ensure the safety of the closure in a concurrent environment:</p>\n<p>First, actor-isolated properties cannot be captured: since @Sendable closures may be executed in a concurrent environment, they cannot capture actor-isolated properties belonging to other actors. Because @Sendable closures can execute across different tasks and threads, capturing properties belonging to other actors can lead to race conditions. Only asynchronous @Sendable closures (@Sendable () async) can capture actor-isolated properties, because async closures can execute in the same actor context.</p>\n<p>Second, mutable var variables cannot be captured: Since @Sendable closures may be executed between different tasks and threads, capturing mutable var variables may cause data race problems. Therefore, @Sendable closures do not allow capture of mutable variables.</p>\n<p>Third, the captured object must implement the Sendable protocol: the object captured in the @Sendable closure must be a type that follows the Sendable protocol. This is to ensure safety when passing objects in a concurrent environment and avoid race conditions and data races.</p>\n<p>In addition, it should be noted that in WWDC21, Apple stated that in future versions, the Swift compiler will prohibit passing instances of non-Sendable types to actors. This change may affect some existing code, especially that involving the passing of instances of non-Sendable types.</p>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://juejin.cn/post/7153096148842971144\">https://juejin.cn/post/7153096148842971144</a><br>[2] <a href=\"https://juejin.cn/post/7076741945820872717\">https://juejin.cn/post/7076741945820872717</a></p>\n"},{"title":"06. Structured Concurrency","date":"2023-09-28T19:00:00.000Z","_content":"\n\n<font color=gray size=2>*It will take about 5 minutes to finish reading this article.*</font>\n\n \n#### <font size=4 color=#4169E1>1. Concept of Structured-Concurrency</font> \n\nStructured-Concurrency is a programming paradigm that aims to improve code clarity and efficiency by using structured parallel programming methods.\n\nSuppose there is a function that does a lot of work on the CPU. We want to optimize this by spreading the work across the two cores; so now the function creates multiple new threads, does a portion of the work in each thread, and then lets the original thread wait for the new thread to finish. There is some relationship (dependency, priority, synchronization, etc.) between the work done by these threads, but the system does not know it. This requires developers to write high-quality code to ensure.\n\nIn other words, Structured-Concurrency can help us better leverage the synergy of multi-core processors and greatly improve the performance of our code, but it may not be that easy to implement it manually.\n\nIn fact, in the Objective-C era, we can also implement Structured-Concurrency through some code, such as the following code we use GCD to implement:\n\n```Swift\n#import <Foundation/Foundation.h>\n\n//Define a task to be executed asynchronously\nvoid performTask(int taskNumber) {\n     dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n         NSLog(@\"Task %d starts executing\", taskNumber);\n        \n         // Simulate time-consuming operations\n         [NSThread sleepForTimeInterval:2.0];\n        \n         NSLog(@\"Task %d completed\", taskNumber);\n     });\n}\n\nint main(int argc, const char * argv[]) {\n     @autoreleasepool {\n      //Create a concurrent queue group\n         dispatch_group_t group = dispatch_group_create();\n        \n         // Start multiple tasks and add them to the queue group\n         for (int i = 1; i <= 3; i++) {\n             dispatch_group_async(group, dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n                 performTask(i);\n             });\n         }\n        \n         // Wait for all tasks in the queue group to be completed\n         dispatch_group_wait(group, DISPATCH_TIME_FOREVER);\n        \n         //The main thread can continue to perform other work\n         NSLog(@\"The main thread continues to perform other work\");\n        \n         // Sleep for a while to wait for the asynchronous task to complete\n         [NSThread sleepForTimeInterval:5.0];\n     }\n     return 0;\n}\n```\n\nIt is important to note that when using GCD in Objective-C, you need to carefully manage communication and synchronization between threads and tasks to avoid potential race conditions and data sharing issues.\n\nGCD provides various scheduling queues, semaphores, and other tools to help you implement more complex concurrency logic. However, this approach is not as intuitive or type-safe as Swift's Structured-Concurrency. If you need more advanced concurrency control and error handling, you may want to consider writing your application in Swift.\n\n#### <font size=4 color=#4169E1>2. Structured-Concurrency in Swift</font> \n\nStructured concurrency is mainly implemented in Swift through async let and task group.\n\nThe following is an asynchronous common code for downloading images:\n\n```Swift\nfunc fetchImage(from url: URL) async throws -> UIImage {\n     // Simulate asynchronous download of pictures\n     print(\"fetchImage----- begin: \\(Thread.current)\")\n     try? await Task.sleep(nanoseconds: 1_000_000_000) // Simulate a download time of 1 second\n     let (data, _) = try await URLSession.shared.data(from: url)\n     guard let image = UIImage(data: data) else {\n         throw NSError(domain: \"ImageDownloadError\", code: 0, userInfo: [NSLocalizedDescriptionKey: \"Failed to download image\"])\n     }\n     print(\"fetchImage----- end: \\(Thread.current)\")\n     return image\n}\n```\n\n<font size=3 color=#4169E1>**2.1 Implement Structured-Concurrency by 'async let'**</font>  \n\n```Swift\nfunc downloadImages() async {\n    let imageURLs = [\n        URL(string: \"https://example.com/image1.jpg\")!,\n        URL(string: \"https://example.com/image2.jpg\")!,\n        URL(string: \"https://example.com/image3.jpg\")!\n    ]\n    var images: [UIImage] = []\n    do {\n            print(\"fetchImage ----- begin\")\n            async let fetchImage1 = fetchImage(from: imageURLs[0])\n            async let fetchImage2 = fetchImage(from: imageURLs[1])\n            async let fetchImage3 = fetchImage(from: imageURLs[2])\n            print(\"fetchImage ----- going\")//这里先执行\n            let (image1, image2, image3) = await (try fetchImage1, try fetchImage2, try fetchImage3)\n            print(\"fetchImage ----- end\")\n            images.append(contentsOf: [image1, image2, image3])\n     } catch {\n\n     }\n}\n```\n\nResult:         \n\n```Swift\nfetchImage ----- begin\nfetchImage ----- going\nfetchImage----- begin: <NSThread: 0x7b100003fe40>{number = 6, name = (null)}\nfetchImage----- begin: <NSThread: 0x7b100004a840>{number = 7, name = (null)}\nfetchImage----- begin: <NSThread: 0x7b100004a840>{number = 7, name = (null)}\nfetchImage----- end: <NSThread: 0x7b100004a840>{number = 7, name = (null)}\nfetchImage----- end: <NSThread: 0x7b100005bd40>{number = 8, name = (null)}\nfetchImage----- end: <NSThread: 0x7b100004a840>{number = 7, name = (null)}\nfetchImage ----- end\n```\nNote: the above code in the assignment expression of the leftmost plus async let instead of await, called async let binding, it is because of this binding operation, so that the previous fetchImage1, fetchImage2, fetchImage3 are encapsulated in a subtask waiting to be completed, this is the This is the key point of Structured-Concurrency.\n\n<font size=3 color=#4169E1>**2.2 Implement Structured-Concurrency by 'task group'**</font>  \n\n```Swift\nfunc downloadImages() async {\n    let imageURLs = [\n        URL(string: \"https://picsum.photos/300\")!,\n        URL(string: \"https://picsum.photos/300\")!,\n        URL(string: \"https://picsum.photos/300\")!\n    ]\n    \n    var images: [UIImage] = []\n    \n    do {\n        print(\"fetchImage ----- begin\")\n        try await withThrowingTaskGroup(of: UIImage.self) { group in\n            \n            group.addTask {\n                try await fetchImage(from: imageURLs[0])\n            }\n            group.addTask {\n                try await fetchImage(from: imageURLs[1])\n            }\n            group.addTask {\n                try await fetchImage(from: imageURLs[2])\n            }\n            print(\"fetchImage ----- going\")\n            for try await image in group {\n                images.append(image)\n            }\n            print(\"fetchImage ----- end\")\n         }      \n    } catch {\n        \n    }\n}\n```\nResult:     \n\n```Swift\nfetchImage ----- begin\nfetchImage ----- going\nfetchImage----- begin: <NSThread: 0x7b1000048300>{number = 5, name = (null)}\nfetchImage----- begin: <NSThread: 0x7b1000046d00>{number = 7, name = (null)}\nfetchImage----- begin: <NSThread: 0x7b1000048300>{number = 5, name = (null)}\nfetchImage----- end: <NSThread: 0x7b100004a800>{number = 4, name = (null)}\nfetchImage----- end: <NSThread: 0x7b1000048300>{number = 5, name = (null)}\nfetchImage----- end: <NSThread: 0x7b1000062c80>{number = 8, name = (null)}\nfetchImage ----- end\n```\n \n<font size=3 color=#4169E1>**2.3 The difference between the two**</font>  \n\nFirst, not only the number of subtasks created by async let is static, but the order in which the subtasks are completed is also fixed, so it cannot obtain the results in the order in which the subtasks are completed. This determines that it is lighter and more intuitive. So if it can meet the needs, developers should give priority to async let.\n\nSecond, task groups can dynamically create subtasks and have more flexible operations, but they also require unified Closure encapsulation;\n\n\n#### <font size=4 color=#4169E1>3. Unstructured tasks</font> \n\nIn Apple's 0304-structured-concurrency article, there is a mention of the unstructured concept. Compared to structured tasks (which mainly refer to parent-child tasks), then unstructured tasks mainly refer to some scenarios that run independently without relationship (parent-child). Unstructured tasks are mainly created by Task.init and Task.detached. These two ways to create the task, you can get the handle of the task, can be canceled, which is contrary to the structured concurrency. Specific sample code please see Task which chapter introduction.\n \n#### <font size=4 color=gray>*Reference*</font>\n[1] https://github.com/apple/swift-evolution/blob/main/proposals/0304-structured-concurrency.md\n[2] https://juejin.cn/post/7084640887250092062\n[3] https://en.wikipedia.org/wiki/Structured_concurrency\n[4] http://chuquan.me/2023/03/11/structured-concurrency\n","source":"_posts/Swift/07. Concurrency/06. Structured concurrency.md","raw":"---\ntitle: 06. Structured Concurrency\ndate: 2023-09-28 21:00:00\ncategories: \n- [Swift, 07. Concurrency]\ntags:\n- Structured Concurrency\n---\n\n\n<font color=gray size=2>*It will take about 5 minutes to finish reading this article.*</font>\n\n \n#### <font size=4 color=#4169E1>1. Concept of Structured-Concurrency</font> \n\nStructured-Concurrency is a programming paradigm that aims to improve code clarity and efficiency by using structured parallel programming methods.\n\nSuppose there is a function that does a lot of work on the CPU. We want to optimize this by spreading the work across the two cores; so now the function creates multiple new threads, does a portion of the work in each thread, and then lets the original thread wait for the new thread to finish. There is some relationship (dependency, priority, synchronization, etc.) between the work done by these threads, but the system does not know it. This requires developers to write high-quality code to ensure.\n\nIn other words, Structured-Concurrency can help us better leverage the synergy of multi-core processors and greatly improve the performance of our code, but it may not be that easy to implement it manually.\n\nIn fact, in the Objective-C era, we can also implement Structured-Concurrency through some code, such as the following code we use GCD to implement:\n\n```Swift\n#import <Foundation/Foundation.h>\n\n//Define a task to be executed asynchronously\nvoid performTask(int taskNumber) {\n     dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n         NSLog(@\"Task %d starts executing\", taskNumber);\n        \n         // Simulate time-consuming operations\n         [NSThread sleepForTimeInterval:2.0];\n        \n         NSLog(@\"Task %d completed\", taskNumber);\n     });\n}\n\nint main(int argc, const char * argv[]) {\n     @autoreleasepool {\n      //Create a concurrent queue group\n         dispatch_group_t group = dispatch_group_create();\n        \n         // Start multiple tasks and add them to the queue group\n         for (int i = 1; i <= 3; i++) {\n             dispatch_group_async(group, dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n                 performTask(i);\n             });\n         }\n        \n         // Wait for all tasks in the queue group to be completed\n         dispatch_group_wait(group, DISPATCH_TIME_FOREVER);\n        \n         //The main thread can continue to perform other work\n         NSLog(@\"The main thread continues to perform other work\");\n        \n         // Sleep for a while to wait for the asynchronous task to complete\n         [NSThread sleepForTimeInterval:5.0];\n     }\n     return 0;\n}\n```\n\nIt is important to note that when using GCD in Objective-C, you need to carefully manage communication and synchronization between threads and tasks to avoid potential race conditions and data sharing issues.\n\nGCD provides various scheduling queues, semaphores, and other tools to help you implement more complex concurrency logic. However, this approach is not as intuitive or type-safe as Swift's Structured-Concurrency. If you need more advanced concurrency control and error handling, you may want to consider writing your application in Swift.\n\n#### <font size=4 color=#4169E1>2. Structured-Concurrency in Swift</font> \n\nStructured concurrency is mainly implemented in Swift through async let and task group.\n\nThe following is an asynchronous common code for downloading images:\n\n```Swift\nfunc fetchImage(from url: URL) async throws -> UIImage {\n     // Simulate asynchronous download of pictures\n     print(\"fetchImage----- begin: \\(Thread.current)\")\n     try? await Task.sleep(nanoseconds: 1_000_000_000) // Simulate a download time of 1 second\n     let (data, _) = try await URLSession.shared.data(from: url)\n     guard let image = UIImage(data: data) else {\n         throw NSError(domain: \"ImageDownloadError\", code: 0, userInfo: [NSLocalizedDescriptionKey: \"Failed to download image\"])\n     }\n     print(\"fetchImage----- end: \\(Thread.current)\")\n     return image\n}\n```\n\n<font size=3 color=#4169E1>**2.1 Implement Structured-Concurrency by 'async let'**</font>  \n\n```Swift\nfunc downloadImages() async {\n    let imageURLs = [\n        URL(string: \"https://example.com/image1.jpg\")!,\n        URL(string: \"https://example.com/image2.jpg\")!,\n        URL(string: \"https://example.com/image3.jpg\")!\n    ]\n    var images: [UIImage] = []\n    do {\n            print(\"fetchImage ----- begin\")\n            async let fetchImage1 = fetchImage(from: imageURLs[0])\n            async let fetchImage2 = fetchImage(from: imageURLs[1])\n            async let fetchImage3 = fetchImage(from: imageURLs[2])\n            print(\"fetchImage ----- going\")//这里先执行\n            let (image1, image2, image3) = await (try fetchImage1, try fetchImage2, try fetchImage3)\n            print(\"fetchImage ----- end\")\n            images.append(contentsOf: [image1, image2, image3])\n     } catch {\n\n     }\n}\n```\n\nResult:         \n\n```Swift\nfetchImage ----- begin\nfetchImage ----- going\nfetchImage----- begin: <NSThread: 0x7b100003fe40>{number = 6, name = (null)}\nfetchImage----- begin: <NSThread: 0x7b100004a840>{number = 7, name = (null)}\nfetchImage----- begin: <NSThread: 0x7b100004a840>{number = 7, name = (null)}\nfetchImage----- end: <NSThread: 0x7b100004a840>{number = 7, name = (null)}\nfetchImage----- end: <NSThread: 0x7b100005bd40>{number = 8, name = (null)}\nfetchImage----- end: <NSThread: 0x7b100004a840>{number = 7, name = (null)}\nfetchImage ----- end\n```\nNote: the above code in the assignment expression of the leftmost plus async let instead of await, called async let binding, it is because of this binding operation, so that the previous fetchImage1, fetchImage2, fetchImage3 are encapsulated in a subtask waiting to be completed, this is the This is the key point of Structured-Concurrency.\n\n<font size=3 color=#4169E1>**2.2 Implement Structured-Concurrency by 'task group'**</font>  \n\n```Swift\nfunc downloadImages() async {\n    let imageURLs = [\n        URL(string: \"https://picsum.photos/300\")!,\n        URL(string: \"https://picsum.photos/300\")!,\n        URL(string: \"https://picsum.photos/300\")!\n    ]\n    \n    var images: [UIImage] = []\n    \n    do {\n        print(\"fetchImage ----- begin\")\n        try await withThrowingTaskGroup(of: UIImage.self) { group in\n            \n            group.addTask {\n                try await fetchImage(from: imageURLs[0])\n            }\n            group.addTask {\n                try await fetchImage(from: imageURLs[1])\n            }\n            group.addTask {\n                try await fetchImage(from: imageURLs[2])\n            }\n            print(\"fetchImage ----- going\")\n            for try await image in group {\n                images.append(image)\n            }\n            print(\"fetchImage ----- end\")\n         }      \n    } catch {\n        \n    }\n}\n```\nResult:     \n\n```Swift\nfetchImage ----- begin\nfetchImage ----- going\nfetchImage----- begin: <NSThread: 0x7b1000048300>{number = 5, name = (null)}\nfetchImage----- begin: <NSThread: 0x7b1000046d00>{number = 7, name = (null)}\nfetchImage----- begin: <NSThread: 0x7b1000048300>{number = 5, name = (null)}\nfetchImage----- end: <NSThread: 0x7b100004a800>{number = 4, name = (null)}\nfetchImage----- end: <NSThread: 0x7b1000048300>{number = 5, name = (null)}\nfetchImage----- end: <NSThread: 0x7b1000062c80>{number = 8, name = (null)}\nfetchImage ----- end\n```\n \n<font size=3 color=#4169E1>**2.3 The difference between the two**</font>  \n\nFirst, not only the number of subtasks created by async let is static, but the order in which the subtasks are completed is also fixed, so it cannot obtain the results in the order in which the subtasks are completed. This determines that it is lighter and more intuitive. So if it can meet the needs, developers should give priority to async let.\n\nSecond, task groups can dynamically create subtasks and have more flexible operations, but they also require unified Closure encapsulation;\n\n\n#### <font size=4 color=#4169E1>3. Unstructured tasks</font> \n\nIn Apple's 0304-structured-concurrency article, there is a mention of the unstructured concept. Compared to structured tasks (which mainly refer to parent-child tasks), then unstructured tasks mainly refer to some scenarios that run independently without relationship (parent-child). Unstructured tasks are mainly created by Task.init and Task.detached. These two ways to create the task, you can get the handle of the task, can be canceled, which is contrary to the structured concurrency. Specific sample code please see Task which chapter introduction.\n \n#### <font size=4 color=gray>*Reference*</font>\n[1] https://github.com/apple/swift-evolution/blob/main/proposals/0304-structured-concurrency.md\n[2] https://juejin.cn/post/7084640887250092062\n[3] https://en.wikipedia.org/wiki/Structured_concurrency\n[4] http://chuquan.me/2023/03/11/structured-concurrency\n","slug":"Swift/07. Concurrency/06. Structured concurrency","published":1,"updated":"2023-09-29T11:41:26.794Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr5w004avu0m7nn811f4","content":"<p><font color=gray size=2><em>It will take about 5 minutes to finish reading this article.</em></font></p>\n<h4 id=\"1-Concept-of-Structured-Concurrency\"><a href=\"#1-Concept-of-Structured-Concurrency\" class=\"headerlink\" title=\"1. Concept of Structured-Concurrency\"></a><font size=4 color=#4169E1>1. Concept of Structured-Concurrency</font></h4><p>Structured-Concurrency is a programming paradigm that aims to improve code clarity and efficiency by using structured parallel programming methods.</p>\n<p>Suppose there is a function that does a lot of work on the CPU. We want to optimize this by spreading the work across the two cores; so now the function creates multiple new threads, does a portion of the work in each thread, and then lets the original thread wait for the new thread to finish. There is some relationship (dependency, priority, synchronization, etc.) between the work done by these threads, but the system does not know it. This requires developers to write high-quality code to ensure.</p>\n<p>In other words, Structured-Concurrency can help us better leverage the synergy of multi-core processors and greatly improve the performance of our code, but it may not be that easy to implement it manually.</p>\n<p>In fact, in the Objective-C era, we can also implement Structured-Concurrency through some code, such as the following code we use GCD to implement:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#<span class=\"keyword\">import</span> &lt;Foundation/Foundation.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Define a task to be executed asynchronously</span></span><br><span class=\"line\">void performTask(int taskNumber) &#123;</span><br><span class=\"line\">     dispatch_async(dispatch_get_global_queue(<span class=\"type\">DISPATCH_QUEUE_PRIORITY_DEFAULT</span>, <span class=\"number\">0</span>), <span class=\"operator\">^</span>&#123;</span><br><span class=\"line\">         <span class=\"type\">NSLog</span>(@<span class=\"string\">&quot;Task %d starts executing&quot;</span>, taskNumber);</span><br><span class=\"line\">        </span><br><span class=\"line\">         <span class=\"comment\">// Simulate time-consuming operations</span></span><br><span class=\"line\">         [<span class=\"type\">NSThread</span> sleepForTimeInterval:<span class=\"number\">2.0</span>];</span><br><span class=\"line\">        </span><br><span class=\"line\">         <span class=\"type\">NSLog</span>(@<span class=\"string\">&quot;Task %d completed&quot;</span>, taskNumber);</span><br><span class=\"line\">     &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, const char <span class=\"operator\">*</span> argv[]) &#123;</span><br><span class=\"line\">     <span class=\"meta\">@autoreleasepool</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//Create a concurrent queue group</span></span><br><span class=\"line\">         dispatch_group_t group <span class=\"operator\">=</span> dispatch_group_create();</span><br><span class=\"line\">        </span><br><span class=\"line\">         <span class=\"comment\">// Start multiple tasks and add them to the queue group</span></span><br><span class=\"line\">         <span class=\"keyword\">for</span> (int i <span class=\"operator\">=</span> <span class=\"number\">1</span>; i <span class=\"operator\">&lt;=</span> <span class=\"number\">3</span>; i<span class=\"operator\">++</span>) &#123;</span><br><span class=\"line\">             dispatch_group_async(group, dispatch_get_global_queue(<span class=\"type\">DISPATCH_QUEUE_PRIORITY_DEFAULT</span>, <span class=\"number\">0</span>), <span class=\"operator\">^</span>&#123;</span><br><span class=\"line\">                 performTask(i);</span><br><span class=\"line\">             &#125;);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">         <span class=\"comment\">// Wait for all tasks in the queue group to be completed</span></span><br><span class=\"line\">         dispatch_group_wait(group, <span class=\"type\">DISPATCH_TIME_FOREVER</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">         <span class=\"comment\">//The main thread can continue to perform other work</span></span><br><span class=\"line\">         <span class=\"type\">NSLog</span>(@<span class=\"string\">&quot;The main thread continues to perform other work&quot;</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">         <span class=\"comment\">// Sleep for a while to wait for the asynchronous task to complete</span></span><br><span class=\"line\">         [<span class=\"type\">NSThread</span> sleepForTimeInterval:<span class=\"number\">5.0</span>];</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>It is important to note that when using GCD in Objective-C, you need to carefully manage communication and synchronization between threads and tasks to avoid potential race conditions and data sharing issues.</p>\n<p>GCD provides various scheduling queues, semaphores, and other tools to help you implement more complex concurrency logic. However, this approach is not as intuitive or type-safe as Swift’s Structured-Concurrency. If you need more advanced concurrency control and error handling, you may want to consider writing your application in Swift.</p>\n<h4 id=\"2-Structured-Concurrency-in-Swift\"><a href=\"#2-Structured-Concurrency-in-Swift\" class=\"headerlink\" title=\"2. Structured-Concurrency in Swift\"></a><font size=4 color=#4169E1>2. Structured-Concurrency in Swift</font></h4><p>Structured concurrency is mainly implemented in Swift through async let and task group.</p>\n<p>The following is an asynchronous common code for downloading images:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">fetchImage</span>(<span class=\"params\">from</span> <span class=\"params\">url</span>: <span class=\"type\">URL</span>) <span class=\"keyword\">async</span> <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">UIImage</span> &#123;</span><br><span class=\"line\">     <span class=\"comment\">// Simulate asynchronous download of pictures</span></span><br><span class=\"line\">     <span class=\"built_in\">print</span>(<span class=\"string\">&quot;fetchImage----- begin: <span class=\"subst\">\\(Thread.current)</span>&quot;</span>)</span><br><span class=\"line\">     <span class=\"keyword\">try?</span> <span class=\"keyword\">await</span> <span class=\"type\">Task</span>.sleep(nanoseconds: <span class=\"number\">1_000_000_000</span>) <span class=\"comment\">// Simulate a download time of 1 second</span></span><br><span class=\"line\">     <span class=\"keyword\">let</span> (data, <span class=\"keyword\">_</span>) <span class=\"operator\">=</span> <span class=\"keyword\">try</span> <span class=\"keyword\">await</span> <span class=\"type\">URLSession</span>.shared.data(from: url)</span><br><span class=\"line\">     <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> image <span class=\"operator\">=</span> <span class=\"type\">UIImage</span>(data: data) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">throw</span> <span class=\"type\">NSError</span>(domain: <span class=\"string\">&quot;ImageDownloadError&quot;</span>, code: <span class=\"number\">0</span>, userInfo: [NSLocalizedDescriptionKey: <span class=\"string\">&quot;Failed to download image&quot;</span>])</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"built_in\">print</span>(<span class=\"string\">&quot;fetchImage----- end: <span class=\"subst\">\\(Thread.current)</span>&quot;</span>)</span><br><span class=\"line\">     <span class=\"keyword\">return</span> image</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><font size=3 color=#4169E1><strong>2.1 Implement Structured-Concurrency by ‘async let’</strong></font>  </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">downloadImages</span>() <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> imageURLs <span class=\"operator\">=</span> [</span><br><span class=\"line\">        <span class=\"type\">URL</span>(string: <span class=\"string\">&quot;https://example.com/image1.jpg&quot;</span>)<span class=\"operator\">!</span>,</span><br><span class=\"line\">        <span class=\"type\">URL</span>(string: <span class=\"string\">&quot;https://example.com/image2.jpg&quot;</span>)<span class=\"operator\">!</span>,</span><br><span class=\"line\">        <span class=\"type\">URL</span>(string: <span class=\"string\">&quot;https://example.com/image3.jpg&quot;</span>)<span class=\"operator\">!</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">    <span class=\"keyword\">var</span> images: [<span class=\"type\">UIImage</span>] <span class=\"operator\">=</span> []</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;fetchImage ----- begin&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">async</span> <span class=\"keyword\">let</span> fetchImage1 <span class=\"operator\">=</span> fetchImage(from: imageURLs[<span class=\"number\">0</span>])</span><br><span class=\"line\">            <span class=\"keyword\">async</span> <span class=\"keyword\">let</span> fetchImage2 <span class=\"operator\">=</span> fetchImage(from: imageURLs[<span class=\"number\">1</span>])</span><br><span class=\"line\">            <span class=\"keyword\">async</span> <span class=\"keyword\">let</span> fetchImage3 <span class=\"operator\">=</span> fetchImage(from: imageURLs[<span class=\"number\">2</span>])</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;fetchImage ----- going&quot;</span>)<span class=\"comment\">//这里先执行</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> (image1, image2, image3) <span class=\"operator\">=</span> <span class=\"keyword\">await</span> (<span class=\"keyword\">try</span> fetchImage1, <span class=\"keyword\">try</span> fetchImage2, <span class=\"keyword\">try</span> fetchImage3)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;fetchImage ----- end&quot;</span>)</span><br><span class=\"line\">            images.append(contentsOf: [image1, image2, image3])</span><br><span class=\"line\">     &#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Result:         </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fetchImage <span class=\"operator\">-----</span> begin</span><br><span class=\"line\">fetchImage <span class=\"operator\">-----</span> going</span><br><span class=\"line\">fetchImage<span class=\"operator\">-----</span> begin: <span class=\"operator\">&lt;</span><span class=\"type\">NSThread</span>: <span class=\"number\">0x7b100003fe40</span><span class=\"operator\">&gt;</span>&#123;number <span class=\"operator\">=</span> <span class=\"number\">6</span>, name <span class=\"operator\">=</span> (null)&#125;</span><br><span class=\"line\">fetchImage<span class=\"operator\">-----</span> begin: <span class=\"operator\">&lt;</span><span class=\"type\">NSThread</span>: <span class=\"number\">0x7b100004a840</span><span class=\"operator\">&gt;</span>&#123;number <span class=\"operator\">=</span> <span class=\"number\">7</span>, name <span class=\"operator\">=</span> (null)&#125;</span><br><span class=\"line\">fetchImage<span class=\"operator\">-----</span> begin: <span class=\"operator\">&lt;</span><span class=\"type\">NSThread</span>: <span class=\"number\">0x7b100004a840</span><span class=\"operator\">&gt;</span>&#123;number <span class=\"operator\">=</span> <span class=\"number\">7</span>, name <span class=\"operator\">=</span> (null)&#125;</span><br><span class=\"line\">fetchImage<span class=\"operator\">-----</span> end: <span class=\"operator\">&lt;</span><span class=\"type\">NSThread</span>: <span class=\"number\">0x7b100004a840</span><span class=\"operator\">&gt;</span>&#123;number <span class=\"operator\">=</span> <span class=\"number\">7</span>, name <span class=\"operator\">=</span> (null)&#125;</span><br><span class=\"line\">fetchImage<span class=\"operator\">-----</span> end: <span class=\"operator\">&lt;</span><span class=\"type\">NSThread</span>: <span class=\"number\">0x7b100005bd40</span><span class=\"operator\">&gt;</span>&#123;number <span class=\"operator\">=</span> <span class=\"number\">8</span>, name <span class=\"operator\">=</span> (null)&#125;</span><br><span class=\"line\">fetchImage<span class=\"operator\">-----</span> end: <span class=\"operator\">&lt;</span><span class=\"type\">NSThread</span>: <span class=\"number\">0x7b100004a840</span><span class=\"operator\">&gt;</span>&#123;number <span class=\"operator\">=</span> <span class=\"number\">7</span>, name <span class=\"operator\">=</span> (null)&#125;</span><br><span class=\"line\">fetchImage <span class=\"operator\">-----</span> end</span><br></pre></td></tr></table></figure>\n<p>Note: the above code in the assignment expression of the leftmost plus async let instead of await, called async let binding, it is because of this binding operation, so that the previous fetchImage1, fetchImage2, fetchImage3 are encapsulated in a subtask waiting to be completed, this is the This is the key point of Structured-Concurrency.</p>\n<p><font size=3 color=#4169E1><strong>2.2 Implement Structured-Concurrency by ‘task group’</strong></font>  </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">downloadImages</span>() <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> imageURLs <span class=\"operator\">=</span> [</span><br><span class=\"line\">        <span class=\"type\">URL</span>(string: <span class=\"string\">&quot;https://picsum.photos/300&quot;</span>)<span class=\"operator\">!</span>,</span><br><span class=\"line\">        <span class=\"type\">URL</span>(string: <span class=\"string\">&quot;https://picsum.photos/300&quot;</span>)<span class=\"operator\">!</span>,</span><br><span class=\"line\">        <span class=\"type\">URL</span>(string: <span class=\"string\">&quot;https://picsum.photos/300&quot;</span>)<span class=\"operator\">!</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> images: [<span class=\"type\">UIImage</span>] <span class=\"operator\">=</span> []</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;fetchImage ----- begin&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">try</span> <span class=\"keyword\">await</span> withThrowingTaskGroup(of: <span class=\"type\">UIImage</span>.<span class=\"keyword\">self</span>) &#123; group <span class=\"keyword\">in</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            group.addTask &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> <span class=\"keyword\">await</span> fetchImage(from: imageURLs[<span class=\"number\">0</span>])</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            group.addTask &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> <span class=\"keyword\">await</span> fetchImage(from: imageURLs[<span class=\"number\">1</span>])</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            group.addTask &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> <span class=\"keyword\">await</span> fetchImage(from: imageURLs[<span class=\"number\">2</span>])</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;fetchImage ----- going&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> <span class=\"keyword\">try</span> <span class=\"keyword\">await</span> image <span class=\"keyword\">in</span> group &#123;</span><br><span class=\"line\">                images.append(image)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;fetchImage ----- end&quot;</span>)</span><br><span class=\"line\">         &#125;      </span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Result:     </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fetchImage <span class=\"operator\">-----</span> begin</span><br><span class=\"line\">fetchImage <span class=\"operator\">-----</span> going</span><br><span class=\"line\">fetchImage<span class=\"operator\">-----</span> begin: <span class=\"operator\">&lt;</span><span class=\"type\">NSThread</span>: <span class=\"number\">0x7b1000048300</span><span class=\"operator\">&gt;</span>&#123;number <span class=\"operator\">=</span> <span class=\"number\">5</span>, name <span class=\"operator\">=</span> (null)&#125;</span><br><span class=\"line\">fetchImage<span class=\"operator\">-----</span> begin: <span class=\"operator\">&lt;</span><span class=\"type\">NSThread</span>: <span class=\"number\">0x7b1000046d00</span><span class=\"operator\">&gt;</span>&#123;number <span class=\"operator\">=</span> <span class=\"number\">7</span>, name <span class=\"operator\">=</span> (null)&#125;</span><br><span class=\"line\">fetchImage<span class=\"operator\">-----</span> begin: <span class=\"operator\">&lt;</span><span class=\"type\">NSThread</span>: <span class=\"number\">0x7b1000048300</span><span class=\"operator\">&gt;</span>&#123;number <span class=\"operator\">=</span> <span class=\"number\">5</span>, name <span class=\"operator\">=</span> (null)&#125;</span><br><span class=\"line\">fetchImage<span class=\"operator\">-----</span> end: <span class=\"operator\">&lt;</span><span class=\"type\">NSThread</span>: <span class=\"number\">0x7b100004a800</span><span class=\"operator\">&gt;</span>&#123;number <span class=\"operator\">=</span> <span class=\"number\">4</span>, name <span class=\"operator\">=</span> (null)&#125;</span><br><span class=\"line\">fetchImage<span class=\"operator\">-----</span> end: <span class=\"operator\">&lt;</span><span class=\"type\">NSThread</span>: <span class=\"number\">0x7b1000048300</span><span class=\"operator\">&gt;</span>&#123;number <span class=\"operator\">=</span> <span class=\"number\">5</span>, name <span class=\"operator\">=</span> (null)&#125;</span><br><span class=\"line\">fetchImage<span class=\"operator\">-----</span> end: <span class=\"operator\">&lt;</span><span class=\"type\">NSThread</span>: <span class=\"number\">0x7b1000062c80</span><span class=\"operator\">&gt;</span>&#123;number <span class=\"operator\">=</span> <span class=\"number\">8</span>, name <span class=\"operator\">=</span> (null)&#125;</span><br><span class=\"line\">fetchImage <span class=\"operator\">-----</span> end</span><br></pre></td></tr></table></figure>\n<p><font size=3 color=#4169E1><strong>2.3 The difference between the two</strong></font>  </p>\n<p>First, not only the number of subtasks created by async let is static, but the order in which the subtasks are completed is also fixed, so it cannot obtain the results in the order in which the subtasks are completed. This determines that it is lighter and more intuitive. So if it can meet the needs, developers should give priority to async let.</p>\n<p>Second, task groups can dynamically create subtasks and have more flexible operations, but they also require unified Closure encapsulation;</p>\n<h4 id=\"3-Unstructured-tasks\"><a href=\"#3-Unstructured-tasks\" class=\"headerlink\" title=\"3. Unstructured tasks\"></a><font size=4 color=#4169E1>3. Unstructured tasks</font></h4><p>In Apple’s 0304-structured-concurrency article, there is a mention of the unstructured concept. Compared to structured tasks (which mainly refer to parent-child tasks), then unstructured tasks mainly refer to some scenarios that run independently without relationship (parent-child). Unstructured tasks are mainly created by Task.init and Task.detached. These two ways to create the task, you can get the handle of the task, can be canceled, which is contrary to the structured concurrency. Specific sample code please see Task which chapter introduction.</p>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=4 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://github.com/apple/swift-evolution/blob/main/proposals/0304-structured-concurrency.md\">https://github.com/apple/swift-evolution/blob/main/proposals/0304-structured-concurrency.md</a><br>[2] <a href=\"https://juejin.cn/post/7084640887250092062\">https://juejin.cn/post/7084640887250092062</a><br>[3] <a href=\"https://en.wikipedia.org/wiki/Structured_concurrency\">https://en.wikipedia.org/wiki/Structured_concurrency</a><br>[4] <a href=\"http://chuquan.me/2023/03/11/structured-concurrency\">http://chuquan.me/2023/03/11/structured-concurrency</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 5 minutes to finish reading this article.</em></font></p>\n<h4 id=\"1-Concept-of-Structured-Concurrency\"><a href=\"#1-Concept-of-Structured-Concurrency\" class=\"headerlink\" title=\"1. Concept of Structured-Concurrency\"></a><font size=4 color=#4169E1>1. Concept of Structured-Concurrency</font></h4><p>Structured-Concurrency is a programming paradigm that aims to improve code clarity and efficiency by using structured parallel programming methods.</p>\n<p>Suppose there is a function that does a lot of work on the CPU. We want to optimize this by spreading the work across the two cores; so now the function creates multiple new threads, does a portion of the work in each thread, and then lets the original thread wait for the new thread to finish. There is some relationship (dependency, priority, synchronization, etc.) between the work done by these threads, but the system does not know it. This requires developers to write high-quality code to ensure.</p>\n<p>In other words, Structured-Concurrency can help us better leverage the synergy of multi-core processors and greatly improve the performance of our code, but it may not be that easy to implement it manually.</p>\n<p>In fact, in the Objective-C era, we can also implement Structured-Concurrency through some code, such as the following code we use GCD to implement:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#<span class=\"keyword\">import</span> &lt;Foundation/Foundation.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Define a task to be executed asynchronously</span></span><br><span class=\"line\">void performTask(int taskNumber) &#123;</span><br><span class=\"line\">     dispatch_async(dispatch_get_global_queue(<span class=\"type\">DISPATCH_QUEUE_PRIORITY_DEFAULT</span>, <span class=\"number\">0</span>), <span class=\"operator\">^</span>&#123;</span><br><span class=\"line\">         <span class=\"type\">NSLog</span>(@<span class=\"string\">&quot;Task %d starts executing&quot;</span>, taskNumber);</span><br><span class=\"line\">        </span><br><span class=\"line\">         <span class=\"comment\">// Simulate time-consuming operations</span></span><br><span class=\"line\">         [<span class=\"type\">NSThread</span> sleepForTimeInterval:<span class=\"number\">2.0</span>];</span><br><span class=\"line\">        </span><br><span class=\"line\">         <span class=\"type\">NSLog</span>(@<span class=\"string\">&quot;Task %d completed&quot;</span>, taskNumber);</span><br><span class=\"line\">     &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, const char <span class=\"operator\">*</span> argv[]) &#123;</span><br><span class=\"line\">     <span class=\"meta\">@autoreleasepool</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//Create a concurrent queue group</span></span><br><span class=\"line\">         dispatch_group_t group <span class=\"operator\">=</span> dispatch_group_create();</span><br><span class=\"line\">        </span><br><span class=\"line\">         <span class=\"comment\">// Start multiple tasks and add them to the queue group</span></span><br><span class=\"line\">         <span class=\"keyword\">for</span> (int i <span class=\"operator\">=</span> <span class=\"number\">1</span>; i <span class=\"operator\">&lt;=</span> <span class=\"number\">3</span>; i<span class=\"operator\">++</span>) &#123;</span><br><span class=\"line\">             dispatch_group_async(group, dispatch_get_global_queue(<span class=\"type\">DISPATCH_QUEUE_PRIORITY_DEFAULT</span>, <span class=\"number\">0</span>), <span class=\"operator\">^</span>&#123;</span><br><span class=\"line\">                 performTask(i);</span><br><span class=\"line\">             &#125;);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">         <span class=\"comment\">// Wait for all tasks in the queue group to be completed</span></span><br><span class=\"line\">         dispatch_group_wait(group, <span class=\"type\">DISPATCH_TIME_FOREVER</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">         <span class=\"comment\">//The main thread can continue to perform other work</span></span><br><span class=\"line\">         <span class=\"type\">NSLog</span>(@<span class=\"string\">&quot;The main thread continues to perform other work&quot;</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">         <span class=\"comment\">// Sleep for a while to wait for the asynchronous task to complete</span></span><br><span class=\"line\">         [<span class=\"type\">NSThread</span> sleepForTimeInterval:<span class=\"number\">5.0</span>];</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>It is important to note that when using GCD in Objective-C, you need to carefully manage communication and synchronization between threads and tasks to avoid potential race conditions and data sharing issues.</p>\n<p>GCD provides various scheduling queues, semaphores, and other tools to help you implement more complex concurrency logic. However, this approach is not as intuitive or type-safe as Swift’s Structured-Concurrency. If you need more advanced concurrency control and error handling, you may want to consider writing your application in Swift.</p>\n<h4 id=\"2-Structured-Concurrency-in-Swift\"><a href=\"#2-Structured-Concurrency-in-Swift\" class=\"headerlink\" title=\"2. Structured-Concurrency in Swift\"></a><font size=4 color=#4169E1>2. Structured-Concurrency in Swift</font></h4><p>Structured concurrency is mainly implemented in Swift through async let and task group.</p>\n<p>The following is an asynchronous common code for downloading images:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">fetchImage</span>(<span class=\"params\">from</span> <span class=\"params\">url</span>: <span class=\"type\">URL</span>) <span class=\"keyword\">async</span> <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">UIImage</span> &#123;</span><br><span class=\"line\">     <span class=\"comment\">// Simulate asynchronous download of pictures</span></span><br><span class=\"line\">     <span class=\"built_in\">print</span>(<span class=\"string\">&quot;fetchImage----- begin: <span class=\"subst\">\\(Thread.current)</span>&quot;</span>)</span><br><span class=\"line\">     <span class=\"keyword\">try?</span> <span class=\"keyword\">await</span> <span class=\"type\">Task</span>.sleep(nanoseconds: <span class=\"number\">1_000_000_000</span>) <span class=\"comment\">// Simulate a download time of 1 second</span></span><br><span class=\"line\">     <span class=\"keyword\">let</span> (data, <span class=\"keyword\">_</span>) <span class=\"operator\">=</span> <span class=\"keyword\">try</span> <span class=\"keyword\">await</span> <span class=\"type\">URLSession</span>.shared.data(from: url)</span><br><span class=\"line\">     <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> image <span class=\"operator\">=</span> <span class=\"type\">UIImage</span>(data: data) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">throw</span> <span class=\"type\">NSError</span>(domain: <span class=\"string\">&quot;ImageDownloadError&quot;</span>, code: <span class=\"number\">0</span>, userInfo: [NSLocalizedDescriptionKey: <span class=\"string\">&quot;Failed to download image&quot;</span>])</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"built_in\">print</span>(<span class=\"string\">&quot;fetchImage----- end: <span class=\"subst\">\\(Thread.current)</span>&quot;</span>)</span><br><span class=\"line\">     <span class=\"keyword\">return</span> image</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><font size=3 color=#4169E1><strong>2.1 Implement Structured-Concurrency by ‘async let’</strong></font>  </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">downloadImages</span>() <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> imageURLs <span class=\"operator\">=</span> [</span><br><span class=\"line\">        <span class=\"type\">URL</span>(string: <span class=\"string\">&quot;https://example.com/image1.jpg&quot;</span>)<span class=\"operator\">!</span>,</span><br><span class=\"line\">        <span class=\"type\">URL</span>(string: <span class=\"string\">&quot;https://example.com/image2.jpg&quot;</span>)<span class=\"operator\">!</span>,</span><br><span class=\"line\">        <span class=\"type\">URL</span>(string: <span class=\"string\">&quot;https://example.com/image3.jpg&quot;</span>)<span class=\"operator\">!</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">    <span class=\"keyword\">var</span> images: [<span class=\"type\">UIImage</span>] <span class=\"operator\">=</span> []</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;fetchImage ----- begin&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">async</span> <span class=\"keyword\">let</span> fetchImage1 <span class=\"operator\">=</span> fetchImage(from: imageURLs[<span class=\"number\">0</span>])</span><br><span class=\"line\">            <span class=\"keyword\">async</span> <span class=\"keyword\">let</span> fetchImage2 <span class=\"operator\">=</span> fetchImage(from: imageURLs[<span class=\"number\">1</span>])</span><br><span class=\"line\">            <span class=\"keyword\">async</span> <span class=\"keyword\">let</span> fetchImage3 <span class=\"operator\">=</span> fetchImage(from: imageURLs[<span class=\"number\">2</span>])</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;fetchImage ----- going&quot;</span>)<span class=\"comment\">//这里先执行</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> (image1, image2, image3) <span class=\"operator\">=</span> <span class=\"keyword\">await</span> (<span class=\"keyword\">try</span> fetchImage1, <span class=\"keyword\">try</span> fetchImage2, <span class=\"keyword\">try</span> fetchImage3)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;fetchImage ----- end&quot;</span>)</span><br><span class=\"line\">            images.append(contentsOf: [image1, image2, image3])</span><br><span class=\"line\">     &#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Result:         </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fetchImage <span class=\"operator\">-----</span> begin</span><br><span class=\"line\">fetchImage <span class=\"operator\">-----</span> going</span><br><span class=\"line\">fetchImage<span class=\"operator\">-----</span> begin: <span class=\"operator\">&lt;</span><span class=\"type\">NSThread</span>: <span class=\"number\">0x7b100003fe40</span><span class=\"operator\">&gt;</span>&#123;number <span class=\"operator\">=</span> <span class=\"number\">6</span>, name <span class=\"operator\">=</span> (null)&#125;</span><br><span class=\"line\">fetchImage<span class=\"operator\">-----</span> begin: <span class=\"operator\">&lt;</span><span class=\"type\">NSThread</span>: <span class=\"number\">0x7b100004a840</span><span class=\"operator\">&gt;</span>&#123;number <span class=\"operator\">=</span> <span class=\"number\">7</span>, name <span class=\"operator\">=</span> (null)&#125;</span><br><span class=\"line\">fetchImage<span class=\"operator\">-----</span> begin: <span class=\"operator\">&lt;</span><span class=\"type\">NSThread</span>: <span class=\"number\">0x7b100004a840</span><span class=\"operator\">&gt;</span>&#123;number <span class=\"operator\">=</span> <span class=\"number\">7</span>, name <span class=\"operator\">=</span> (null)&#125;</span><br><span class=\"line\">fetchImage<span class=\"operator\">-----</span> end: <span class=\"operator\">&lt;</span><span class=\"type\">NSThread</span>: <span class=\"number\">0x7b100004a840</span><span class=\"operator\">&gt;</span>&#123;number <span class=\"operator\">=</span> <span class=\"number\">7</span>, name <span class=\"operator\">=</span> (null)&#125;</span><br><span class=\"line\">fetchImage<span class=\"operator\">-----</span> end: <span class=\"operator\">&lt;</span><span class=\"type\">NSThread</span>: <span class=\"number\">0x7b100005bd40</span><span class=\"operator\">&gt;</span>&#123;number <span class=\"operator\">=</span> <span class=\"number\">8</span>, name <span class=\"operator\">=</span> (null)&#125;</span><br><span class=\"line\">fetchImage<span class=\"operator\">-----</span> end: <span class=\"operator\">&lt;</span><span class=\"type\">NSThread</span>: <span class=\"number\">0x7b100004a840</span><span class=\"operator\">&gt;</span>&#123;number <span class=\"operator\">=</span> <span class=\"number\">7</span>, name <span class=\"operator\">=</span> (null)&#125;</span><br><span class=\"line\">fetchImage <span class=\"operator\">-----</span> end</span><br></pre></td></tr></table></figure>\n<p>Note: the above code in the assignment expression of the leftmost plus async let instead of await, called async let binding, it is because of this binding operation, so that the previous fetchImage1, fetchImage2, fetchImage3 are encapsulated in a subtask waiting to be completed, this is the This is the key point of Structured-Concurrency.</p>\n<p><font size=3 color=#4169E1><strong>2.2 Implement Structured-Concurrency by ‘task group’</strong></font>  </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">downloadImages</span>() <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> imageURLs <span class=\"operator\">=</span> [</span><br><span class=\"line\">        <span class=\"type\">URL</span>(string: <span class=\"string\">&quot;https://picsum.photos/300&quot;</span>)<span class=\"operator\">!</span>,</span><br><span class=\"line\">        <span class=\"type\">URL</span>(string: <span class=\"string\">&quot;https://picsum.photos/300&quot;</span>)<span class=\"operator\">!</span>,</span><br><span class=\"line\">        <span class=\"type\">URL</span>(string: <span class=\"string\">&quot;https://picsum.photos/300&quot;</span>)<span class=\"operator\">!</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> images: [<span class=\"type\">UIImage</span>] <span class=\"operator\">=</span> []</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;fetchImage ----- begin&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">try</span> <span class=\"keyword\">await</span> withThrowingTaskGroup(of: <span class=\"type\">UIImage</span>.<span class=\"keyword\">self</span>) &#123; group <span class=\"keyword\">in</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            group.addTask &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> <span class=\"keyword\">await</span> fetchImage(from: imageURLs[<span class=\"number\">0</span>])</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            group.addTask &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> <span class=\"keyword\">await</span> fetchImage(from: imageURLs[<span class=\"number\">1</span>])</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            group.addTask &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> <span class=\"keyword\">await</span> fetchImage(from: imageURLs[<span class=\"number\">2</span>])</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;fetchImage ----- going&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> <span class=\"keyword\">try</span> <span class=\"keyword\">await</span> image <span class=\"keyword\">in</span> group &#123;</span><br><span class=\"line\">                images.append(image)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;fetchImage ----- end&quot;</span>)</span><br><span class=\"line\">         &#125;      </span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Result:     </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fetchImage <span class=\"operator\">-----</span> begin</span><br><span class=\"line\">fetchImage <span class=\"operator\">-----</span> going</span><br><span class=\"line\">fetchImage<span class=\"operator\">-----</span> begin: <span class=\"operator\">&lt;</span><span class=\"type\">NSThread</span>: <span class=\"number\">0x7b1000048300</span><span class=\"operator\">&gt;</span>&#123;number <span class=\"operator\">=</span> <span class=\"number\">5</span>, name <span class=\"operator\">=</span> (null)&#125;</span><br><span class=\"line\">fetchImage<span class=\"operator\">-----</span> begin: <span class=\"operator\">&lt;</span><span class=\"type\">NSThread</span>: <span class=\"number\">0x7b1000046d00</span><span class=\"operator\">&gt;</span>&#123;number <span class=\"operator\">=</span> <span class=\"number\">7</span>, name <span class=\"operator\">=</span> (null)&#125;</span><br><span class=\"line\">fetchImage<span class=\"operator\">-----</span> begin: <span class=\"operator\">&lt;</span><span class=\"type\">NSThread</span>: <span class=\"number\">0x7b1000048300</span><span class=\"operator\">&gt;</span>&#123;number <span class=\"operator\">=</span> <span class=\"number\">5</span>, name <span class=\"operator\">=</span> (null)&#125;</span><br><span class=\"line\">fetchImage<span class=\"operator\">-----</span> end: <span class=\"operator\">&lt;</span><span class=\"type\">NSThread</span>: <span class=\"number\">0x7b100004a800</span><span class=\"operator\">&gt;</span>&#123;number <span class=\"operator\">=</span> <span class=\"number\">4</span>, name <span class=\"operator\">=</span> (null)&#125;</span><br><span class=\"line\">fetchImage<span class=\"operator\">-----</span> end: <span class=\"operator\">&lt;</span><span class=\"type\">NSThread</span>: <span class=\"number\">0x7b1000048300</span><span class=\"operator\">&gt;</span>&#123;number <span class=\"operator\">=</span> <span class=\"number\">5</span>, name <span class=\"operator\">=</span> (null)&#125;</span><br><span class=\"line\">fetchImage<span class=\"operator\">-----</span> end: <span class=\"operator\">&lt;</span><span class=\"type\">NSThread</span>: <span class=\"number\">0x7b1000062c80</span><span class=\"operator\">&gt;</span>&#123;number <span class=\"operator\">=</span> <span class=\"number\">8</span>, name <span class=\"operator\">=</span> (null)&#125;</span><br><span class=\"line\">fetchImage <span class=\"operator\">-----</span> end</span><br></pre></td></tr></table></figure>\n<p><font size=3 color=#4169E1><strong>2.3 The difference between the two</strong></font>  </p>\n<p>First, not only the number of subtasks created by async let is static, but the order in which the subtasks are completed is also fixed, so it cannot obtain the results in the order in which the subtasks are completed. This determines that it is lighter and more intuitive. So if it can meet the needs, developers should give priority to async let.</p>\n<p>Second, task groups can dynamically create subtasks and have more flexible operations, but they also require unified Closure encapsulation;</p>\n<h4 id=\"3-Unstructured-tasks\"><a href=\"#3-Unstructured-tasks\" class=\"headerlink\" title=\"3. Unstructured tasks\"></a><font size=4 color=#4169E1>3. Unstructured tasks</font></h4><p>In Apple’s 0304-structured-concurrency article, there is a mention of the unstructured concept. Compared to structured tasks (which mainly refer to parent-child tasks), then unstructured tasks mainly refer to some scenarios that run independently without relationship (parent-child). Unstructured tasks are mainly created by Task.init and Task.detached. These two ways to create the task, you can get the handle of the task, can be canceled, which is contrary to the structured concurrency. Specific sample code please see Task which chapter introduction.</p>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=4 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://github.com/apple/swift-evolution/blob/main/proposals/0304-structured-concurrency.md\">https://github.com/apple/swift-evolution/blob/main/proposals/0304-structured-concurrency.md</a><br>[2] <a href=\"https://juejin.cn/post/7084640887250092062\">https://juejin.cn/post/7084640887250092062</a><br>[3] <a href=\"https://en.wikipedia.org/wiki/Structured_concurrency\">https://en.wikipedia.org/wiki/Structured_concurrency</a><br>[4] <a href=\"http://chuquan.me/2023/03/11/structured-concurrency\">http://chuquan.me/2023/03/11/structured-concurrency</a></p>\n"},{"title":"00. Call the Macro definition of Objective-C in Swift","date":"2023-03-10T19:00:00.000Z","_content":"\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nThere are usually lots of macro definitions in Objective-C projects, as follows:\n```Swift \n#define kScreenScale [UIScreen mainScreen].scale\n#define kOnePixelPointValue (1.0f / kScreenScale)\n#define kScreenWidth  [[UIScreen mainScreen] bounds].size.width\n#define kScreenHeight [[UIScreen mainScreen] bounds].size.height\n#define kApplicationWidth  MIN([[UIScreen mainScreen] bounds].size.width, [[UIScreen mainScreen] bounds].size.height)\n#define kApplicationHeight MAX([[UIScreen mainScreen] bounds].size.width, [[UIScreen mainScreen] bounds].size.height)\n#define kScreenCenterX kScreenWidth / 2.0\n#define kScreenCenterY kScreenHeight / 2.0\n```\nActually, Swift cannot directly use the macro definitions of OC. We need to do some conversions For Swift.\n\n#### <font size=3 color=#4169E1> 1. Overwrite them with Swift language entirely</font>\n\n```Swift \npublic struct SizeDefault {\n    public static let screenScale = UIScreen.main.scale\n    public static let onePixelPointValue = (1.0 / screenScale)\n    public static let screenWidth = UIScreen.main.bounds.size.width\n    public static let screenHeight = UIScreen.main.bounds.size.height\n    public static let applicationWidth = min(screenWidth, screenHeight)\n    public static let applicationHeight = max(screenWidth, screenHeight)\n    public static let screenCenterX = screenWidth / 2.0\n    public static let screenCenterY = screenHeight / 2.0\n    ...\n}\nextension UIDevice {\n    public static let ako = SizeDefault.self\n}\n```\nI overwrited all the code and wrapped them in the UIDevice extension, then I can use them as follows:\n```Swift \nlet height = UIDevice.ako.applicationHeight\nprint(height)\n```\nThis is what I recommend if you have enough time. \n\n#### <font size=3 color=#4169E1> 2. Convert them with inline function simply</font>\nIn fact, there are some macros that comprise complicated logic code and you don not have enough time or confidence to overwrite them. Therefore, there is a compromise method to meet our requirement quickly and safely.\n\n```Swift\n#define isIPhoneXSeries ({  \\\n    BOOL iPhoneXSeries = NO;  \\\n    if ([UIDevice currentDevice].userInterfaceIdiom != UIUserInterfaceIdiomPhone) { \\\n        return iPhoneXSeries; \\\n    } \\\n    if (@available(iOS 11.0, *)) { \\\n        UIWindow *mainWindow = [[[UIApplication sharedApplication] delegate] window]; \\\n        if (mainWindow.safeAreaInsets.bottom > 0.0) { \\\n            iPhoneXSeries = YES; \\\n        } \\\n    } \\\n    iPhoneXSeries; \\\n})\n```\nWe can just convert it with incline function like that:\n\n```Swift\nstatic inline BOOL isIPhoneXSeries()\n{\n    BOOL iPhoneXSeries = NO;\n    if ([UIDevice currentDevice].userInterfaceIdiom != UIUserInterfaceIdiomPhone) {\n        return iPhoneXSeries;\n    }\n    if (@available(iOS 11.0, *)) {\n        UIWindow *mainWindow = [[[UIApplication sharedApplication] delegate] window];\n        if (mainWindow.safeAreaInsets.bottom > 0.0) {\n            iPhoneXSeries = YES;\n        }\n    }\n    return iPhoneXSeries;\n}\n```\nor like this:\n```Swift\nstatic inline CGFloat AKOApplicationWidth()\n{\n    return kApplicationWidth;\n}\n\nstatic inline CGFloat AKOApplicationHeight()\n{\n    return kApplicationHeight;\n}\n```\nIt is very convenient. And then We can use it in our Project like this:\n```Swift\nisIPhoneXSeries()\n```\nWe can also add it to UIDevice extension like as below:\n\n```Swift\npublic struct SizeDefault {\n  ...\n  public static let isIPhoneXSeries = AKOISIPhoneXSeries()\n  ...\n\n```\n\n\n\n\n","source":"_posts/Swift/08. Hybrid Programming/00. Call the Macro definition of Objective-C in Swift.md","raw":"---\ntitle: 00. Call the Macro definition of Objective-C in Swift\ndate: 2023-03-10 20:00:00\ncategories: \n- [Swift, 08. Hybrid Programming]\ntags:\n- hybrid\n- macro\n---\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nThere are usually lots of macro definitions in Objective-C projects, as follows:\n```Swift \n#define kScreenScale [UIScreen mainScreen].scale\n#define kOnePixelPointValue (1.0f / kScreenScale)\n#define kScreenWidth  [[UIScreen mainScreen] bounds].size.width\n#define kScreenHeight [[UIScreen mainScreen] bounds].size.height\n#define kApplicationWidth  MIN([[UIScreen mainScreen] bounds].size.width, [[UIScreen mainScreen] bounds].size.height)\n#define kApplicationHeight MAX([[UIScreen mainScreen] bounds].size.width, [[UIScreen mainScreen] bounds].size.height)\n#define kScreenCenterX kScreenWidth / 2.0\n#define kScreenCenterY kScreenHeight / 2.0\n```\nActually, Swift cannot directly use the macro definitions of OC. We need to do some conversions For Swift.\n\n#### <font size=3 color=#4169E1> 1. Overwrite them with Swift language entirely</font>\n\n```Swift \npublic struct SizeDefault {\n    public static let screenScale = UIScreen.main.scale\n    public static let onePixelPointValue = (1.0 / screenScale)\n    public static let screenWidth = UIScreen.main.bounds.size.width\n    public static let screenHeight = UIScreen.main.bounds.size.height\n    public static let applicationWidth = min(screenWidth, screenHeight)\n    public static let applicationHeight = max(screenWidth, screenHeight)\n    public static let screenCenterX = screenWidth / 2.0\n    public static let screenCenterY = screenHeight / 2.0\n    ...\n}\nextension UIDevice {\n    public static let ako = SizeDefault.self\n}\n```\nI overwrited all the code and wrapped them in the UIDevice extension, then I can use them as follows:\n```Swift \nlet height = UIDevice.ako.applicationHeight\nprint(height)\n```\nThis is what I recommend if you have enough time. \n\n#### <font size=3 color=#4169E1> 2. Convert them with inline function simply</font>\nIn fact, there are some macros that comprise complicated logic code and you don not have enough time or confidence to overwrite them. Therefore, there is a compromise method to meet our requirement quickly and safely.\n\n```Swift\n#define isIPhoneXSeries ({  \\\n    BOOL iPhoneXSeries = NO;  \\\n    if ([UIDevice currentDevice].userInterfaceIdiom != UIUserInterfaceIdiomPhone) { \\\n        return iPhoneXSeries; \\\n    } \\\n    if (@available(iOS 11.0, *)) { \\\n        UIWindow *mainWindow = [[[UIApplication sharedApplication] delegate] window]; \\\n        if (mainWindow.safeAreaInsets.bottom > 0.0) { \\\n            iPhoneXSeries = YES; \\\n        } \\\n    } \\\n    iPhoneXSeries; \\\n})\n```\nWe can just convert it with incline function like that:\n\n```Swift\nstatic inline BOOL isIPhoneXSeries()\n{\n    BOOL iPhoneXSeries = NO;\n    if ([UIDevice currentDevice].userInterfaceIdiom != UIUserInterfaceIdiomPhone) {\n        return iPhoneXSeries;\n    }\n    if (@available(iOS 11.0, *)) {\n        UIWindow *mainWindow = [[[UIApplication sharedApplication] delegate] window];\n        if (mainWindow.safeAreaInsets.bottom > 0.0) {\n            iPhoneXSeries = YES;\n        }\n    }\n    return iPhoneXSeries;\n}\n```\nor like this:\n```Swift\nstatic inline CGFloat AKOApplicationWidth()\n{\n    return kApplicationWidth;\n}\n\nstatic inline CGFloat AKOApplicationHeight()\n{\n    return kApplicationHeight;\n}\n```\nIt is very convenient. And then We can use it in our Project like this:\n```Swift\nisIPhoneXSeries()\n```\nWe can also add it to UIDevice extension like as below:\n\n```Swift\npublic struct SizeDefault {\n  ...\n  public static let isIPhoneXSeries = AKOISIPhoneXSeries()\n  ...\n\n```\n\n\n\n\n","slug":"Swift/08. Hybrid Programming/00. Call the Macro definition of Objective-C in Swift","published":1,"updated":"2023-11-07T13:57:45.457Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr5x004dvu0m3a0qa5m4","content":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>There are usually lots of macro definitions in Objective-C projects, as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define kScreenScale [<span class=\"type\">UIScreen</span> mainScreen].scale</span><br><span class=\"line\">#define kOnePixelPointValue (<span class=\"number\">1</span>.0f <span class=\"operator\">/</span> kScreenScale)</span><br><span class=\"line\">#define kScreenWidth  [[<span class=\"type\">UIScreen</span> mainScreen] bounds].size.width</span><br><span class=\"line\">#define kScreenHeight [[<span class=\"type\">UIScreen</span> mainScreen] bounds].size.height</span><br><span class=\"line\">#define kApplicationWidth  <span class=\"type\">MIN</span>([[<span class=\"type\">UIScreen</span> mainScreen] bounds].size.width, [[<span class=\"type\">UIScreen</span> mainScreen] bounds].size.height)</span><br><span class=\"line\">#define kApplicationHeight <span class=\"type\">MAX</span>([[<span class=\"type\">UIScreen</span> mainScreen] bounds].size.width, [[<span class=\"type\">UIScreen</span> mainScreen] bounds].size.height)</span><br><span class=\"line\">#define kScreenCenterX kScreenWidth <span class=\"operator\">/</span> <span class=\"number\">2.0</span></span><br><span class=\"line\">#define kScreenCenterY kScreenHeight <span class=\"operator\">/</span> <span class=\"number\">2.0</span></span><br></pre></td></tr></table></figure>\n<p>Actually, Swift cannot directly use the macro definitions of OC. We need to do some conversions For Swift.</p>\n<h4 id=\"1-Overwrite-them-with-Swift-language-entirely\"><a href=\"#1-Overwrite-them-with-Swift-language-entirely\" class=\"headerlink\" title=\" 1. Overwrite them with Swift language entirely\"></a><font size=3 color=#4169E1> 1. Overwrite them with Swift language entirely</font></h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">SizeDefault</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> screenScale <span class=\"operator\">=</span> <span class=\"type\">UIScreen</span>.main.scale</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> onePixelPointValue <span class=\"operator\">=</span> (<span class=\"number\">1.0</span> <span class=\"operator\">/</span> screenScale)</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> screenWidth <span class=\"operator\">=</span> <span class=\"type\">UIScreen</span>.main.bounds.size.width</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> screenHeight <span class=\"operator\">=</span> <span class=\"type\">UIScreen</span>.main.bounds.size.height</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> applicationWidth <span class=\"operator\">=</span> <span class=\"built_in\">min</span>(screenWidth, screenHeight)</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> applicationHeight <span class=\"operator\">=</span> <span class=\"built_in\">max</span>(screenWidth, screenHeight)</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> screenCenterX <span class=\"operator\">=</span> screenWidth <span class=\"operator\">/</span> <span class=\"number\">2.0</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> screenCenterY <span class=\"operator\">=</span> screenHeight <span class=\"operator\">/</span> <span class=\"number\">2.0</span></span><br><span class=\"line\">    <span class=\"operator\">...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">UIDevice</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> ako <span class=\"operator\">=</span> <span class=\"type\">SizeDefault</span>.<span class=\"keyword\">self</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>I overwrited all the code and wrapped them in the UIDevice extension, then I can use them as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> height <span class=\"operator\">=</span> <span class=\"type\">UIDevice</span>.ako.applicationHeight</span><br><span class=\"line\"><span class=\"built_in\">print</span>(height)</span><br></pre></td></tr></table></figure>\n<p>This is what I recommend if you have enough time. </p>\n<h4 id=\"2-Convert-them-with-inline-function-simply\"><a href=\"#2-Convert-them-with-inline-function-simply\" class=\"headerlink\" title=\" 2. Convert them with inline function simply\"></a><font size=3 color=#4169E1> 2. Convert them with inline function simply</font></h4><p>In fact, there are some macros that comprise complicated logic code and you don not have enough time or confidence to overwrite them. Therefore, there is a compromise method to meet our requirement quickly and safely.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define isIPhoneXSeries (&#123;  \\</span><br><span class=\"line\">    <span class=\"type\">BOOL</span> iPhoneXSeries <span class=\"operator\">=</span> <span class=\"type\">NO</span>;  \\</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ([<span class=\"type\">UIDevice</span> currentDevice].userInterfaceIdiom <span class=\"operator\">!=</span> <span class=\"type\">UIUserInterfaceIdiomPhone</span>) &#123; \\</span><br><span class=\"line\">        <span class=\"keyword\">return</span> iPhoneXSeries; \\</span><br><span class=\"line\">    &#125; \\</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">@available</span>(<span class=\"keyword\">iOS</span> <span class=\"number\">11.0</span>, <span class=\"operator\">*</span>)) &#123; \\</span><br><span class=\"line\">        <span class=\"type\">UIWindow</span> <span class=\"operator\">*</span>mainWindow <span class=\"operator\">=</span> [[[<span class=\"type\">UIApplication</span> sharedApplication] delegate] window]; \\</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mainWindow.safeAreaInsets.bottom <span class=\"operator\">&gt;</span> <span class=\"number\">0.0</span>) &#123; \\</span><br><span class=\"line\">            iPhoneXSeries <span class=\"operator\">=</span> <span class=\"type\">YES</span>; \\</span><br><span class=\"line\">        &#125; \\</span><br><span class=\"line\">    &#125; \\</span><br><span class=\"line\">    iPhoneXSeries; \\</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>We can just convert it with incline function like that:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> inline <span class=\"type\">BOOL</span> isIPhoneXSeries()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">BOOL</span> iPhoneXSeries <span class=\"operator\">=</span> <span class=\"type\">NO</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ([<span class=\"type\">UIDevice</span> currentDevice].userInterfaceIdiom <span class=\"operator\">!=</span> <span class=\"type\">UIUserInterfaceIdiomPhone</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> iPhoneXSeries;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">@available</span>(<span class=\"keyword\">iOS</span> <span class=\"number\">11.0</span>, <span class=\"operator\">*</span>)) &#123;</span><br><span class=\"line\">        <span class=\"type\">UIWindow</span> <span class=\"operator\">*</span>mainWindow <span class=\"operator\">=</span> [[[<span class=\"type\">UIApplication</span> sharedApplication] delegate] window];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mainWindow.safeAreaInsets.bottom <span class=\"operator\">&gt;</span> <span class=\"number\">0.0</span>) &#123;</span><br><span class=\"line\">            iPhoneXSeries <span class=\"operator\">=</span> <span class=\"type\">YES</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> iPhoneXSeries;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>or like this:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> inline <span class=\"type\">CGFloat</span> <span class=\"type\">AKOApplicationWidth</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> kApplicationWidth;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> inline <span class=\"type\">CGFloat</span> <span class=\"type\">AKOApplicationHeight</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> kApplicationHeight;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>It is very convenient. And then We can use it in our Project like this:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">isIPhoneXSeries()</span><br></pre></td></tr></table></figure>\n<p>We can also add it to UIDevice extension like as below:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">SizeDefault</span> &#123;</span><br><span class=\"line\">  <span class=\"operator\">...</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> isIPhoneXSeries <span class=\"operator\">=</span> <span class=\"type\">AKOISIPhoneXSeries</span>()</span><br><span class=\"line\">  <span class=\"operator\">...</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>There are usually lots of macro definitions in Objective-C projects, as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define kScreenScale [<span class=\"type\">UIScreen</span> mainScreen].scale</span><br><span class=\"line\">#define kOnePixelPointValue (<span class=\"number\">1</span>.0f <span class=\"operator\">/</span> kScreenScale)</span><br><span class=\"line\">#define kScreenWidth  [[<span class=\"type\">UIScreen</span> mainScreen] bounds].size.width</span><br><span class=\"line\">#define kScreenHeight [[<span class=\"type\">UIScreen</span> mainScreen] bounds].size.height</span><br><span class=\"line\">#define kApplicationWidth  <span class=\"type\">MIN</span>([[<span class=\"type\">UIScreen</span> mainScreen] bounds].size.width, [[<span class=\"type\">UIScreen</span> mainScreen] bounds].size.height)</span><br><span class=\"line\">#define kApplicationHeight <span class=\"type\">MAX</span>([[<span class=\"type\">UIScreen</span> mainScreen] bounds].size.width, [[<span class=\"type\">UIScreen</span> mainScreen] bounds].size.height)</span><br><span class=\"line\">#define kScreenCenterX kScreenWidth <span class=\"operator\">/</span> <span class=\"number\">2.0</span></span><br><span class=\"line\">#define kScreenCenterY kScreenHeight <span class=\"operator\">/</span> <span class=\"number\">2.0</span></span><br></pre></td></tr></table></figure>\n<p>Actually, Swift cannot directly use the macro definitions of OC. We need to do some conversions For Swift.</p>\n<h4 id=\"1-Overwrite-them-with-Swift-language-entirely\"><a href=\"#1-Overwrite-them-with-Swift-language-entirely\" class=\"headerlink\" title=\" 1. Overwrite them with Swift language entirely\"></a><font size=3 color=#4169E1> 1. Overwrite them with Swift language entirely</font></h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">SizeDefault</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> screenScale <span class=\"operator\">=</span> <span class=\"type\">UIScreen</span>.main.scale</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> onePixelPointValue <span class=\"operator\">=</span> (<span class=\"number\">1.0</span> <span class=\"operator\">/</span> screenScale)</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> screenWidth <span class=\"operator\">=</span> <span class=\"type\">UIScreen</span>.main.bounds.size.width</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> screenHeight <span class=\"operator\">=</span> <span class=\"type\">UIScreen</span>.main.bounds.size.height</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> applicationWidth <span class=\"operator\">=</span> <span class=\"built_in\">min</span>(screenWidth, screenHeight)</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> applicationHeight <span class=\"operator\">=</span> <span class=\"built_in\">max</span>(screenWidth, screenHeight)</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> screenCenterX <span class=\"operator\">=</span> screenWidth <span class=\"operator\">/</span> <span class=\"number\">2.0</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> screenCenterY <span class=\"operator\">=</span> screenHeight <span class=\"operator\">/</span> <span class=\"number\">2.0</span></span><br><span class=\"line\">    <span class=\"operator\">...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">UIDevice</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> ako <span class=\"operator\">=</span> <span class=\"type\">SizeDefault</span>.<span class=\"keyword\">self</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>I overwrited all the code and wrapped them in the UIDevice extension, then I can use them as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> height <span class=\"operator\">=</span> <span class=\"type\">UIDevice</span>.ako.applicationHeight</span><br><span class=\"line\"><span class=\"built_in\">print</span>(height)</span><br></pre></td></tr></table></figure>\n<p>This is what I recommend if you have enough time. </p>\n<h4 id=\"2-Convert-them-with-inline-function-simply\"><a href=\"#2-Convert-them-with-inline-function-simply\" class=\"headerlink\" title=\" 2. Convert them with inline function simply\"></a><font size=3 color=#4169E1> 2. Convert them with inline function simply</font></h4><p>In fact, there are some macros that comprise complicated logic code and you don not have enough time or confidence to overwrite them. Therefore, there is a compromise method to meet our requirement quickly and safely.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define isIPhoneXSeries (&#123;  \\</span><br><span class=\"line\">    <span class=\"type\">BOOL</span> iPhoneXSeries <span class=\"operator\">=</span> <span class=\"type\">NO</span>;  \\</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ([<span class=\"type\">UIDevice</span> currentDevice].userInterfaceIdiom <span class=\"operator\">!=</span> <span class=\"type\">UIUserInterfaceIdiomPhone</span>) &#123; \\</span><br><span class=\"line\">        <span class=\"keyword\">return</span> iPhoneXSeries; \\</span><br><span class=\"line\">    &#125; \\</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">@available</span>(<span class=\"keyword\">iOS</span> <span class=\"number\">11.0</span>, <span class=\"operator\">*</span>)) &#123; \\</span><br><span class=\"line\">        <span class=\"type\">UIWindow</span> <span class=\"operator\">*</span>mainWindow <span class=\"operator\">=</span> [[[<span class=\"type\">UIApplication</span> sharedApplication] delegate] window]; \\</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mainWindow.safeAreaInsets.bottom <span class=\"operator\">&gt;</span> <span class=\"number\">0.0</span>) &#123; \\</span><br><span class=\"line\">            iPhoneXSeries <span class=\"operator\">=</span> <span class=\"type\">YES</span>; \\</span><br><span class=\"line\">        &#125; \\</span><br><span class=\"line\">    &#125; \\</span><br><span class=\"line\">    iPhoneXSeries; \\</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>We can just convert it with incline function like that:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> inline <span class=\"type\">BOOL</span> isIPhoneXSeries()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">BOOL</span> iPhoneXSeries <span class=\"operator\">=</span> <span class=\"type\">NO</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ([<span class=\"type\">UIDevice</span> currentDevice].userInterfaceIdiom <span class=\"operator\">!=</span> <span class=\"type\">UIUserInterfaceIdiomPhone</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> iPhoneXSeries;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">@available</span>(<span class=\"keyword\">iOS</span> <span class=\"number\">11.0</span>, <span class=\"operator\">*</span>)) &#123;</span><br><span class=\"line\">        <span class=\"type\">UIWindow</span> <span class=\"operator\">*</span>mainWindow <span class=\"operator\">=</span> [[[<span class=\"type\">UIApplication</span> sharedApplication] delegate] window];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mainWindow.safeAreaInsets.bottom <span class=\"operator\">&gt;</span> <span class=\"number\">0.0</span>) &#123;</span><br><span class=\"line\">            iPhoneXSeries <span class=\"operator\">=</span> <span class=\"type\">YES</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> iPhoneXSeries;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>or like this:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> inline <span class=\"type\">CGFloat</span> <span class=\"type\">AKOApplicationWidth</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> kApplicationWidth;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> inline <span class=\"type\">CGFloat</span> <span class=\"type\">AKOApplicationHeight</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> kApplicationHeight;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>It is very convenient. And then We can use it in our Project like this:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">isIPhoneXSeries()</span><br></pre></td></tr></table></figure>\n<p>We can also add it to UIDevice extension like as below:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">SizeDefault</span> &#123;</span><br><span class=\"line\">  <span class=\"operator\">...</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> isIPhoneXSeries <span class=\"operator\">=</span> <span class=\"type\">AKOISIPhoneXSeries</span>()</span><br><span class=\"line\">  <span class=\"operator\">...</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n"},{"title":"00. Difference between nil in Objective-C and nil in Swift","date":"2023-08-15T19:46:00.000Z","_content":"\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\n#### <font size=3 color=#4169E1>1. nil in Objective-C</font>\n **1.1 The Concept**   \nnil (or Nil) in Objective-C is a pointer to an empty object. In Objective-C, an object can be an instance or a class. When an object is created, it is allocated to memory and initialized to zero. If it is not initialized to another value, the object pointer has a value of nil.\n\nIn Objective-C, sending a message to a nil object is valid because the message does not result in any operation. This is because Objective-C messaging is implemented through method calls that send messages to objects, not through the methods of the objects themselves. So when the object is nil, calling the object's methods has no effect because it is essentially a null pointer.\n \nHere's an example showing the use of nil in Objective-C:\n```Objective-C \nNSString *str = nil;\nNSLog(@\"The value of str is: %@\", str);\n```\nOutput results:\n```Objective-C\nThe value of str is: (null)\n```\n\n **1.2 Implementation Principle**   \nIn terms of the underlying implementation, nil in Objective-C is actually a predefined macro for a null object pointer. In Objective-C, all objects are accessed via pointers, and a nil is actually a pointer with a value of zero. Thus, when an object is assigned a value of nil, it is actually given a pointer with a value of 0, indicating that the object does not exist.\n```\n#define nil __DARWIN_NULL\n```\n'__DARWIN_NULL' is a null pointer constant pointing to a null address, defined in <stddef.h> with the following code:\n```\n#define __DARWIN_NULL ((void *)0)\n```\nThus, in Objective-C, when we use nil, we are actually using a null pointer constant to a null address for a null object pointer.\n\n#### <font size=3 color=#4169E1>2. nil in Swift</font>\n**2.1 The Concept**  \nIn Swift, nil is not a pointer to an empty object. It represents a special type that lacks a value, which is not limited to objects. In Swift, you can use nil to represent any type of value, including basic data types (such as Int, Double, etc.) as well as object types.\n\nnil in Swift is used for optional types. If a variable or constant is declared as an optional type, it can either contain a value or be nil. if an attempt is made to forcibly unwrap (i.e., get the actual value of) a variable or constant of an optional type, and the variable or constant currently has the value of nil, the program will crash.\n\nHere's an example showing the use of nil in Swift:\n```Swift\nvar str: String? = nil\nprint(\"The value of str is: \\(str)\")\n```\nOutput results:\n```Swift\nThe value of str is: nil\n```\nThe above code will report an error if it is changed to the following:\n```Swift\nvar str: String = nil\n```\nOr\n```Swift\nvar str = nil\n```\nThe error messages are as follows:   \n{% img /assets/iOS/Others/001.png %}    \nOr   \n{% img /assets/iOS/Others/002.png %}\n \nThat's because in Swift, the types of variables and constants must be explicitly specified at declaration time. When we declare a variable or constant and initialize it to nil, the Swift compiler can't determine the type of the variable or constant because nil can represent a missing value of many types. Therefore, we need to tell the compiler the type of the variable or constant by way of a type annotation or type inference.\n\n'var str: String = nil ' declares a variable str of type String and initializes it to nil, but the Swift compiler is not able to determine the type of the variable because nil can represent the missing value of multiple types. As a result, the compiler reports an error, suggesting that we need to provide a Contextual Type or an optional type for it.\n\n**2.2 Implementation Principle**   \n\nIn Swift, all types can use optional types to represent the case of missing values. An optional type is actually an enumerated type that has two possible values: a value and no value. When an optional type has a value of nil, it is actually a special enum member that indicates that the value is missing.\n\n```Swift\nenum Optional<T> {\n    case none\n    case some(T)\n}\n\nvar str: String? = \"hello\"\nstr = nil\n\nif let value = str {\n    print(\"The value of str is: \\(value)\")\n} else {\n    print(\"The value of str is nil\")\n}\n```\nOutput results\n```Swift\nThe value of str is nil\n```\n\n#### <font size=3 color=#4169E1>3. Conclusion</font>\n\nIn Objective-C, nil represents a pointer to a null object, which is used to indicate that the object does not exist. In Swift, nil represents a missing value and can be used to represent any type of value. In terms of the underlying implementation, nil in Objective-C is a predefined macro that represents a pointer to a null object, while nil in Swift is a special type that represents the case of an optional type (enumerated type) that is missing a value. In practice, developers need to choose the appropriate language and data type to indicate the presence or absence of a value according to different situations to ensure the correctness and stability of the program.\n","source":"_posts/iOS/00. Tips/00. Difference Of nil in OC and nil in Swift.md","raw":"---\ntitle: 00. Difference between nil in Objective-C and nil in Swift\ndate: 2023-08-15 21:46:00\ncategories: \n- [iOS, 00. Tips]\ntags:\n- nil\n---\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\n#### <font size=3 color=#4169E1>1. nil in Objective-C</font>\n **1.1 The Concept**   \nnil (or Nil) in Objective-C is a pointer to an empty object. In Objective-C, an object can be an instance or a class. When an object is created, it is allocated to memory and initialized to zero. If it is not initialized to another value, the object pointer has a value of nil.\n\nIn Objective-C, sending a message to a nil object is valid because the message does not result in any operation. This is because Objective-C messaging is implemented through method calls that send messages to objects, not through the methods of the objects themselves. So when the object is nil, calling the object's methods has no effect because it is essentially a null pointer.\n \nHere's an example showing the use of nil in Objective-C:\n```Objective-C \nNSString *str = nil;\nNSLog(@\"The value of str is: %@\", str);\n```\nOutput results:\n```Objective-C\nThe value of str is: (null)\n```\n\n **1.2 Implementation Principle**   \nIn terms of the underlying implementation, nil in Objective-C is actually a predefined macro for a null object pointer. In Objective-C, all objects are accessed via pointers, and a nil is actually a pointer with a value of zero. Thus, when an object is assigned a value of nil, it is actually given a pointer with a value of 0, indicating that the object does not exist.\n```\n#define nil __DARWIN_NULL\n```\n'__DARWIN_NULL' is a null pointer constant pointing to a null address, defined in <stddef.h> with the following code:\n```\n#define __DARWIN_NULL ((void *)0)\n```\nThus, in Objective-C, when we use nil, we are actually using a null pointer constant to a null address for a null object pointer.\n\n#### <font size=3 color=#4169E1>2. nil in Swift</font>\n**2.1 The Concept**  \nIn Swift, nil is not a pointer to an empty object. It represents a special type that lacks a value, which is not limited to objects. In Swift, you can use nil to represent any type of value, including basic data types (such as Int, Double, etc.) as well as object types.\n\nnil in Swift is used for optional types. If a variable or constant is declared as an optional type, it can either contain a value or be nil. if an attempt is made to forcibly unwrap (i.e., get the actual value of) a variable or constant of an optional type, and the variable or constant currently has the value of nil, the program will crash.\n\nHere's an example showing the use of nil in Swift:\n```Swift\nvar str: String? = nil\nprint(\"The value of str is: \\(str)\")\n```\nOutput results:\n```Swift\nThe value of str is: nil\n```\nThe above code will report an error if it is changed to the following:\n```Swift\nvar str: String = nil\n```\nOr\n```Swift\nvar str = nil\n```\nThe error messages are as follows:   \n{% img /assets/iOS/Others/001.png %}    \nOr   \n{% img /assets/iOS/Others/002.png %}\n \nThat's because in Swift, the types of variables and constants must be explicitly specified at declaration time. When we declare a variable or constant and initialize it to nil, the Swift compiler can't determine the type of the variable or constant because nil can represent a missing value of many types. Therefore, we need to tell the compiler the type of the variable or constant by way of a type annotation or type inference.\n\n'var str: String = nil ' declares a variable str of type String and initializes it to nil, but the Swift compiler is not able to determine the type of the variable because nil can represent the missing value of multiple types. As a result, the compiler reports an error, suggesting that we need to provide a Contextual Type or an optional type for it.\n\n**2.2 Implementation Principle**   \n\nIn Swift, all types can use optional types to represent the case of missing values. An optional type is actually an enumerated type that has two possible values: a value and no value. When an optional type has a value of nil, it is actually a special enum member that indicates that the value is missing.\n\n```Swift\nenum Optional<T> {\n    case none\n    case some(T)\n}\n\nvar str: String? = \"hello\"\nstr = nil\n\nif let value = str {\n    print(\"The value of str is: \\(value)\")\n} else {\n    print(\"The value of str is nil\")\n}\n```\nOutput results\n```Swift\nThe value of str is nil\n```\n\n#### <font size=3 color=#4169E1>3. Conclusion</font>\n\nIn Objective-C, nil represents a pointer to a null object, which is used to indicate that the object does not exist. In Swift, nil represents a missing value and can be used to represent any type of value. In terms of the underlying implementation, nil in Objective-C is a predefined macro that represents a pointer to a null object, while nil in Swift is a special type that represents the case of an optional type (enumerated type) that is missing a value. In practice, developers need to choose the appropriate language and data type to indicate the presence or absence of a value according to different situations to ensure the correctness and stability of the program.\n","slug":"iOS/00. Tips/00. Difference Of nil in OC and nil in Swift","published":1,"updated":"2023-09-02T19:29:21.341Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr5y004fvu0mev1iar87","content":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<h4 id=\"1-nil-in-Objective-C\"><a href=\"#1-nil-in-Objective-C\" class=\"headerlink\" title=\"1. nil in Objective-C\"></a><font size=3 color=#4169E1>1. nil in Objective-C</font></h4><p> <strong>1.1 The Concept</strong><br>nil (or Nil) in Objective-C is a pointer to an empty object. In Objective-C, an object can be an instance or a class. When an object is created, it is allocated to memory and initialized to zero. If it is not initialized to another value, the object pointer has a value of nil.</p>\n<p>In Objective-C, sending a message to a nil object is valid because the message does not result in any operation. This is because Objective-C messaging is implemented through method calls that send messages to objects, not through the methods of the objects themselves. So when the object is nil, calling the object’s methods has no effect because it is essentially a null pointer.</p>\n<p>Here’s an example showing the use of nil in Objective-C:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *str = nil;</span><br><span class=\"line\">NSLog(@&quot;The value of str is: %@&quot;, str);</span><br></pre></td></tr></table></figure>\n<p>Output results:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The value of str is: (null)</span><br></pre></td></tr></table></figure>\n\n<p> <strong>1.2 Implementation Principle</strong><br>In terms of the underlying implementation, nil in Objective-C is actually a predefined macro for a null object pointer. In Objective-C, all objects are accessed via pointers, and a nil is actually a pointer with a value of zero. Thus, when an object is assigned a value of nil, it is actually given a pointer with a value of 0, indicating that the object does not exist.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define nil __DARWIN_NULL</span><br></pre></td></tr></table></figure>\n<p>‘__DARWIN_NULL’ is a null pointer constant pointing to a null address, defined in &lt;stddef.h&gt; with the following code:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define __DARWIN_NULL ((void *)0)</span><br></pre></td></tr></table></figure>\n<p>Thus, in Objective-C, when we use nil, we are actually using a null pointer constant to a null address for a null object pointer.</p>\n<h4 id=\"2-nil-in-Swift\"><a href=\"#2-nil-in-Swift\" class=\"headerlink\" title=\"2. nil in Swift\"></a><font size=3 color=#4169E1>2. nil in Swift</font></h4><p><strong>2.1 The Concept</strong><br>In Swift, nil is not a pointer to an empty object. It represents a special type that lacks a value, which is not limited to objects. In Swift, you can use nil to represent any type of value, including basic data types (such as Int, Double, etc.) as well as object types.</p>\n<p>nil in Swift is used for optional types. If a variable or constant is declared as an optional type, it can either contain a value or be nil. if an attempt is made to forcibly unwrap (i.e., get the actual value of) a variable or constant of an optional type, and the variable or constant currently has the value of nil, the program will crash.</p>\n<p>Here’s an example showing the use of nil in Swift:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str: <span class=\"type\">String</span>? <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;The value of str is: <span class=\"subst\">\\(str)</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>Output results:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">The</span> value of str <span class=\"keyword\">is</span>: <span class=\"literal\">nil</span></span><br></pre></td></tr></table></figure>\n<p>The above code will report an error if it is changed to the following:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str: <span class=\"type\">String</span> <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br></pre></td></tr></table></figure>\n<p>Or</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br></pre></td></tr></table></figure>\n<p>The error messages are as follows:   </p>\n<img src=\"/assets/iOS/Others/001.png\" class=\"\">    \n<p>Or   </p>\n<img src=\"/assets/iOS/Others/002.png\" class=\"\">\n<p>That’s because in Swift, the types of variables and constants must be explicitly specified at declaration time. When we declare a variable or constant and initialize it to nil, the Swift compiler can’t determine the type of the variable or constant because nil can represent a missing value of many types. Therefore, we need to tell the compiler the type of the variable or constant by way of a type annotation or type inference.</p>\n<p>‘var str: String &#x3D; nil ‘ declares a variable str of type String and initializes it to nil, but the Swift compiler is not able to determine the type of the variable because nil can represent the missing value of multiple types. As a result, the compiler reports an error, suggesting that we need to provide a Contextual Type or an optional type for it.</p>\n<p><strong>2.2 Implementation Principle</strong>   </p>\n<p>In Swift, all types can use optional types to represent the case of missing values. An optional type is actually an enumerated type that has two possible values: a value and no value. When an optional type has a value of nil, it is actually a special enum member that indicates that the value is missing.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Optional</span>&lt;<span class=\"title class_\">T</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> none</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"keyword\">some</span>(<span class=\"type\">T</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> str: <span class=\"type\">String</span>? <span class=\"operator\">=</span> <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">str <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> value <span class=\"operator\">=</span> str &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;The value of str is: <span class=\"subst\">\\(value)</span>&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;The value of str is nil&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Output results</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">The</span> value of str <span class=\"keyword\">is</span> <span class=\"literal\">nil</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-Conclusion\"><a href=\"#3-Conclusion\" class=\"headerlink\" title=\"3. Conclusion\"></a><font size=3 color=#4169E1>3. Conclusion</font></h4><p>In Objective-C, nil represents a pointer to a null object, which is used to indicate that the object does not exist. In Swift, nil represents a missing value and can be used to represent any type of value. In terms of the underlying implementation, nil in Objective-C is a predefined macro that represents a pointer to a null object, while nil in Swift is a special type that represents the case of an optional type (enumerated type) that is missing a value. In practice, developers need to choose the appropriate language and data type to indicate the presence or absence of a value according to different situations to ensure the correctness and stability of the program.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<h4 id=\"1-nil-in-Objective-C\"><a href=\"#1-nil-in-Objective-C\" class=\"headerlink\" title=\"1. nil in Objective-C\"></a><font size=3 color=#4169E1>1. nil in Objective-C</font></h4><p> <strong>1.1 The Concept</strong><br>nil (or Nil) in Objective-C is a pointer to an empty object. In Objective-C, an object can be an instance or a class. When an object is created, it is allocated to memory and initialized to zero. If it is not initialized to another value, the object pointer has a value of nil.</p>\n<p>In Objective-C, sending a message to a nil object is valid because the message does not result in any operation. This is because Objective-C messaging is implemented through method calls that send messages to objects, not through the methods of the objects themselves. So when the object is nil, calling the object’s methods has no effect because it is essentially a null pointer.</p>\n<p>Here’s an example showing the use of nil in Objective-C:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *str = nil;</span><br><span class=\"line\">NSLog(@&quot;The value of str is: %@&quot;, str);</span><br></pre></td></tr></table></figure>\n<p>Output results:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The value of str is: (null)</span><br></pre></td></tr></table></figure>\n\n<p> <strong>1.2 Implementation Principle</strong><br>In terms of the underlying implementation, nil in Objective-C is actually a predefined macro for a null object pointer. In Objective-C, all objects are accessed via pointers, and a nil is actually a pointer with a value of zero. Thus, when an object is assigned a value of nil, it is actually given a pointer with a value of 0, indicating that the object does not exist.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define nil __DARWIN_NULL</span><br></pre></td></tr></table></figure>\n<p>‘__DARWIN_NULL’ is a null pointer constant pointing to a null address, defined in &lt;stddef.h&gt; with the following code:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define __DARWIN_NULL ((void *)0)</span><br></pre></td></tr></table></figure>\n<p>Thus, in Objective-C, when we use nil, we are actually using a null pointer constant to a null address for a null object pointer.</p>\n<h4 id=\"2-nil-in-Swift\"><a href=\"#2-nil-in-Swift\" class=\"headerlink\" title=\"2. nil in Swift\"></a><font size=3 color=#4169E1>2. nil in Swift</font></h4><p><strong>2.1 The Concept</strong><br>In Swift, nil is not a pointer to an empty object. It represents a special type that lacks a value, which is not limited to objects. In Swift, you can use nil to represent any type of value, including basic data types (such as Int, Double, etc.) as well as object types.</p>\n<p>nil in Swift is used for optional types. If a variable or constant is declared as an optional type, it can either contain a value or be nil. if an attempt is made to forcibly unwrap (i.e., get the actual value of) a variable or constant of an optional type, and the variable or constant currently has the value of nil, the program will crash.</p>\n<p>Here’s an example showing the use of nil in Swift:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str: <span class=\"type\">String</span>? <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;The value of str is: <span class=\"subst\">\\(str)</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>Output results:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">The</span> value of str <span class=\"keyword\">is</span>: <span class=\"literal\">nil</span></span><br></pre></td></tr></table></figure>\n<p>The above code will report an error if it is changed to the following:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str: <span class=\"type\">String</span> <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br></pre></td></tr></table></figure>\n<p>Or</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br></pre></td></tr></table></figure>\n<p>The error messages are as follows:   </p>\n<img src=\"/assets/iOS/Others/001.png\" class=\"\">    \n<p>Or   </p>\n<img src=\"/assets/iOS/Others/002.png\" class=\"\">\n<p>That’s because in Swift, the types of variables and constants must be explicitly specified at declaration time. When we declare a variable or constant and initialize it to nil, the Swift compiler can’t determine the type of the variable or constant because nil can represent a missing value of many types. Therefore, we need to tell the compiler the type of the variable or constant by way of a type annotation or type inference.</p>\n<p>‘var str: String &#x3D; nil ‘ declares a variable str of type String and initializes it to nil, but the Swift compiler is not able to determine the type of the variable because nil can represent the missing value of multiple types. As a result, the compiler reports an error, suggesting that we need to provide a Contextual Type or an optional type for it.</p>\n<p><strong>2.2 Implementation Principle</strong>   </p>\n<p>In Swift, all types can use optional types to represent the case of missing values. An optional type is actually an enumerated type that has two possible values: a value and no value. When an optional type has a value of nil, it is actually a special enum member that indicates that the value is missing.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Optional</span>&lt;<span class=\"title class_\">T</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> none</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"keyword\">some</span>(<span class=\"type\">T</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> str: <span class=\"type\">String</span>? <span class=\"operator\">=</span> <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">str <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> value <span class=\"operator\">=</span> str &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;The value of str is: <span class=\"subst\">\\(value)</span>&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;The value of str is nil&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Output results</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">The</span> value of str <span class=\"keyword\">is</span> <span class=\"literal\">nil</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-Conclusion\"><a href=\"#3-Conclusion\" class=\"headerlink\" title=\"3. Conclusion\"></a><font size=3 color=#4169E1>3. Conclusion</font></h4><p>In Objective-C, nil represents a pointer to a null object, which is used to indicate that the object does not exist. In Swift, nil represents a missing value and can be used to represent any type of value. In terms of the underlying implementation, nil in Objective-C is a predefined macro that represents a pointer to a null object, while nil in Swift is a special type that represents the case of an optional type (enumerated type) that is missing a value. In practice, developers need to choose the appropriate language and data type to indicate the presence or absence of a value according to different situations to ensure the correctness and stability of the program.</p>\n"},{"title":"01. The ways to extend a class in Objective-C","date":"2023-11-13T15:00:00.000Z","_content":"\n<font color=gray size=2>*It will take about 1 minutes to finish reading this article.*</font>\n\n**1. Category** \n\nCategories allow you to add methods to a class without modifying the original class interface. You can place the implementation of a class in a separate file and use the extended methods by importing that file.\n\nExample:\n\n```Swift\n// MyClass+Extension.h\n@interface MyClass (Extension)\n- (void)newMethod;\n@end\n\n// MyClass+Extension.m\n@implementation MyClass (Extension)\n- (void)newMethod {\n    // new logic code\n}\n@end\n\n```\n \n**2. Extension** \n\nAn extension is a special form of class that allows you to declare private properties and methods in the same file. Extensions are merged with the original class's definition at compile time and require no additional imports.\n\n```Swift\n//MyClass.h\n@interface MyClass : NSObject\n//Public interface\n@end\n\n//MyClass.m\n@interfaceMyClass()\n// Private interface in extension\n@property (nonatomic, strong) NSString *privateProperty;\n- (void)privateMethod;\n@end\n\n@implementationMyClass\n// Class implementation\n@end\n\n```\n\n**3. Inheritance** \n\nYou can create a new class that inherits from the original class and add or modify methods in the new class. This way, the new class will inherit all properties and methods of the original class, and you can add your own logic in the new class.\n\n```Swift\n// MySubclass.h\n@interface MySubclass : MyClass\n// new method\n- (void)newMethod;\n@end\n\n// MySubclass.m\n@implementation MySubclass\n- (void)newMethod {\n    // implement new method\n}\n@end\n\n```\n \n\n**4. Protocol** \n\nYou can add a set of method declarations to a class by implementing a protocol. Similar to interfaces in Java or other object-oriented languages, a protocol defines a set of methods, and classes implement these methods.\n\n```Swift\n//MyProtocol.h\n@protocol MyProtocol\n- (void)newMethod;\n@end\n\n//MyClass.h\n@interface MyClass : NSObject <MyProtocol>\n// The interface of the class, including the methods declared in the protocol\n@end\n\n//MyClass.m\n@implementationMyClass\n- (void)newMethod {\n     // Implement the logic of the new method\n}\n@end\n\n```\n\n**5. Associated Objects** \n\nAssociated objects allow you to add additional instance variables to an existing class at runtime. Although this is not a traditional way of extending a class, it can be useful in some situations.\n\n```Swift\n#import <objc/runtime.h>\n\nstatic char kAssociatedObjectKey;\n\nobjc_setAssociatedObject(myInstance, &kAssociatedObjectKey, @\"Associated Value\", OBJC_ASSOCIATION_RETAIN_NONATOMIC);\n\nNSString *associatedValue = objc_getAssociatedObject(myInstance, &kAssociatedObjectKey);\nNSLog(@\"%@\", associatedValue);\n\n\n```\n\n\n","source":"_posts/iOS/00. Tips/01. The ways to extend a class in Objective-C.md","raw":"---\ntitle: 01. The ways to extend a class in Objective-C\ndate: 2023-11-13 16:00:00\ncategories: \n- [iOS, 00. Tips]\ntags:\n- nil\n---\n\n<font color=gray size=2>*It will take about 1 minutes to finish reading this article.*</font>\n\n**1. Category** \n\nCategories allow you to add methods to a class without modifying the original class interface. You can place the implementation of a class in a separate file and use the extended methods by importing that file.\n\nExample:\n\n```Swift\n// MyClass+Extension.h\n@interface MyClass (Extension)\n- (void)newMethod;\n@end\n\n// MyClass+Extension.m\n@implementation MyClass (Extension)\n- (void)newMethod {\n    // new logic code\n}\n@end\n\n```\n \n**2. Extension** \n\nAn extension is a special form of class that allows you to declare private properties and methods in the same file. Extensions are merged with the original class's definition at compile time and require no additional imports.\n\n```Swift\n//MyClass.h\n@interface MyClass : NSObject\n//Public interface\n@end\n\n//MyClass.m\n@interfaceMyClass()\n// Private interface in extension\n@property (nonatomic, strong) NSString *privateProperty;\n- (void)privateMethod;\n@end\n\n@implementationMyClass\n// Class implementation\n@end\n\n```\n\n**3. Inheritance** \n\nYou can create a new class that inherits from the original class and add or modify methods in the new class. This way, the new class will inherit all properties and methods of the original class, and you can add your own logic in the new class.\n\n```Swift\n// MySubclass.h\n@interface MySubclass : MyClass\n// new method\n- (void)newMethod;\n@end\n\n// MySubclass.m\n@implementation MySubclass\n- (void)newMethod {\n    // implement new method\n}\n@end\n\n```\n \n\n**4. Protocol** \n\nYou can add a set of method declarations to a class by implementing a protocol. Similar to interfaces in Java or other object-oriented languages, a protocol defines a set of methods, and classes implement these methods.\n\n```Swift\n//MyProtocol.h\n@protocol MyProtocol\n- (void)newMethod;\n@end\n\n//MyClass.h\n@interface MyClass : NSObject <MyProtocol>\n// The interface of the class, including the methods declared in the protocol\n@end\n\n//MyClass.m\n@implementationMyClass\n- (void)newMethod {\n     // Implement the logic of the new method\n}\n@end\n\n```\n\n**5. Associated Objects** \n\nAssociated objects allow you to add additional instance variables to an existing class at runtime. Although this is not a traditional way of extending a class, it can be useful in some situations.\n\n```Swift\n#import <objc/runtime.h>\n\nstatic char kAssociatedObjectKey;\n\nobjc_setAssociatedObject(myInstance, &kAssociatedObjectKey, @\"Associated Value\", OBJC_ASSOCIATION_RETAIN_NONATOMIC);\n\nNSString *associatedValue = objc_getAssociatedObject(myInstance, &kAssociatedObjectKey);\nNSLog(@\"%@\", associatedValue);\n\n\n```\n\n\n","slug":"iOS/00. Tips/01. The ways to extend a class in Objective-C","published":1,"updated":"2023-11-13T15:08:43.180Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr5z004ivu0mfrha6z9h","content":"<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p>\n<p><strong>1. Category</strong> </p>\n<p>Categories allow you to add methods to a class without modifying the original class interface. You can place the implementation of a class in a separate file and use the extended methods by importing that file.</p>\n<p>Example:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MyClass+Extension.h</span></span><br><span class=\"line\"><span class=\"meta\">@interface</span> <span class=\"type\">MyClass</span> (<span class=\"type\">Extension</span>)</span><br><span class=\"line\"><span class=\"operator\">-</span> (void)newMethod;</span><br><span class=\"line\"><span class=\"meta\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// MyClass+Extension.m</span></span><br><span class=\"line\"><span class=\"meta\">@implementation</span> <span class=\"type\">MyClass</span> (<span class=\"type\">Extension</span>)</span><br><span class=\"line\"><span class=\"operator\">-</span> (void)newMethod &#123;</span><br><span class=\"line\">    <span class=\"comment\">// new logic code</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@end</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>2. Extension</strong> </p>\n<p>An extension is a special form of class that allows you to declare private properties and methods in the same file. Extensions are merged with the original class’s definition at compile time and require no additional imports.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//MyClass.h</span></span><br><span class=\"line\"><span class=\"meta\">@interface</span> <span class=\"type\">MyClass</span> : <span class=\"type\">NSObject</span></span><br><span class=\"line\"><span class=\"comment\">//Public interface</span></span><br><span class=\"line\"><span class=\"meta\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//MyClass.m</span></span><br><span class=\"line\"><span class=\"meta\">@interfaceMyClass</span>()</span><br><span class=\"line\"><span class=\"comment\">// Private interface in extension</span></span><br><span class=\"line\"><span class=\"meta\">@property</span> (nonatomic, strong) <span class=\"type\">NSString</span> <span class=\"operator\">*</span>privateProperty;</span><br><span class=\"line\"><span class=\"operator\">-</span> (void)privateMethod;</span><br><span class=\"line\"><span class=\"meta\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@implementationMyClass</span></span><br><span class=\"line\"><span class=\"comment\">// Class implementation</span></span><br><span class=\"line\"><span class=\"meta\">@end</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>3. Inheritance</strong> </p>\n<p>You can create a new class that inherits from the original class and add or modify methods in the new class. This way, the new class will inherit all properties and methods of the original class, and you can add your own logic in the new class.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MySubclass.h</span></span><br><span class=\"line\"><span class=\"meta\">@interface</span> <span class=\"type\">MySubclass</span> : <span class=\"type\">MyClass</span></span><br><span class=\"line\"><span class=\"comment\">// new method</span></span><br><span class=\"line\"><span class=\"operator\">-</span> (void)newMethod;</span><br><span class=\"line\"><span class=\"meta\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// MySubclass.m</span></span><br><span class=\"line\"><span class=\"meta\">@implementation</span> <span class=\"type\">MySubclass</span></span><br><span class=\"line\"><span class=\"operator\">-</span> (void)newMethod &#123;</span><br><span class=\"line\">    <span class=\"comment\">// implement new method</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@end</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>4. Protocol</strong> </p>\n<p>You can add a set of method declarations to a class by implementing a protocol. Similar to interfaces in Java or other object-oriented languages, a protocol defines a set of methods, and classes implement these methods.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//MyProtocol.h</span></span><br><span class=\"line\"><span class=\"meta\">@protocol</span> <span class=\"type\">MyProtocol</span></span><br><span class=\"line\"><span class=\"operator\">-</span> (void)newMethod;</span><br><span class=\"line\"><span class=\"meta\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//MyClass.h</span></span><br><span class=\"line\"><span class=\"meta\">@interface</span> <span class=\"type\">MyClass</span> : <span class=\"type\">NSObject</span> <span class=\"operator\">&lt;</span><span class=\"type\">MyProtocol</span><span class=\"operator\">&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// The interface of the class, including the methods declared in the protocol</span></span><br><span class=\"line\"><span class=\"meta\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//MyClass.m</span></span><br><span class=\"line\"><span class=\"meta\">@implementationMyClass</span></span><br><span class=\"line\"><span class=\"operator\">-</span> (void)newMethod &#123;</span><br><span class=\"line\">     <span class=\"comment\">// Implement the logic of the new method</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@end</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>5. Associated Objects</strong> </p>\n<p>Associated objects allow you to add additional instance variables to an existing class at runtime. Although this is not a traditional way of extending a class, it can be useful in some situations.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#<span class=\"keyword\">import</span> &lt;objc/runtime.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> char kAssociatedObjectKey;</span><br><span class=\"line\"></span><br><span class=\"line\">objc_setAssociatedObject(myInstance, <span class=\"operator\">&amp;</span>kAssociatedObjectKey, @<span class=\"string\">&quot;Associated Value&quot;</span>, <span class=\"type\">OBJC_ASSOCIATION_RETAIN_NONATOMIC</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">NSString</span> <span class=\"operator\">*</span>associatedValue <span class=\"operator\">=</span> objc_getAssociatedObject(myInstance, <span class=\"operator\">&amp;</span>kAssociatedObjectKey);</span><br><span class=\"line\"><span class=\"type\">NSLog</span>(@<span class=\"string\">&quot;%@&quot;</span>, associatedValue);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p>\n<p><strong>1. Category</strong> </p>\n<p>Categories allow you to add methods to a class without modifying the original class interface. You can place the implementation of a class in a separate file and use the extended methods by importing that file.</p>\n<p>Example:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MyClass+Extension.h</span></span><br><span class=\"line\"><span class=\"meta\">@interface</span> <span class=\"type\">MyClass</span> (<span class=\"type\">Extension</span>)</span><br><span class=\"line\"><span class=\"operator\">-</span> (void)newMethod;</span><br><span class=\"line\"><span class=\"meta\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// MyClass+Extension.m</span></span><br><span class=\"line\"><span class=\"meta\">@implementation</span> <span class=\"type\">MyClass</span> (<span class=\"type\">Extension</span>)</span><br><span class=\"line\"><span class=\"operator\">-</span> (void)newMethod &#123;</span><br><span class=\"line\">    <span class=\"comment\">// new logic code</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@end</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>2. Extension</strong> </p>\n<p>An extension is a special form of class that allows you to declare private properties and methods in the same file. Extensions are merged with the original class’s definition at compile time and require no additional imports.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//MyClass.h</span></span><br><span class=\"line\"><span class=\"meta\">@interface</span> <span class=\"type\">MyClass</span> : <span class=\"type\">NSObject</span></span><br><span class=\"line\"><span class=\"comment\">//Public interface</span></span><br><span class=\"line\"><span class=\"meta\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//MyClass.m</span></span><br><span class=\"line\"><span class=\"meta\">@interfaceMyClass</span>()</span><br><span class=\"line\"><span class=\"comment\">// Private interface in extension</span></span><br><span class=\"line\"><span class=\"meta\">@property</span> (nonatomic, strong) <span class=\"type\">NSString</span> <span class=\"operator\">*</span>privateProperty;</span><br><span class=\"line\"><span class=\"operator\">-</span> (void)privateMethod;</span><br><span class=\"line\"><span class=\"meta\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@implementationMyClass</span></span><br><span class=\"line\"><span class=\"comment\">// Class implementation</span></span><br><span class=\"line\"><span class=\"meta\">@end</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>3. Inheritance</strong> </p>\n<p>You can create a new class that inherits from the original class and add or modify methods in the new class. This way, the new class will inherit all properties and methods of the original class, and you can add your own logic in the new class.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MySubclass.h</span></span><br><span class=\"line\"><span class=\"meta\">@interface</span> <span class=\"type\">MySubclass</span> : <span class=\"type\">MyClass</span></span><br><span class=\"line\"><span class=\"comment\">// new method</span></span><br><span class=\"line\"><span class=\"operator\">-</span> (void)newMethod;</span><br><span class=\"line\"><span class=\"meta\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// MySubclass.m</span></span><br><span class=\"line\"><span class=\"meta\">@implementation</span> <span class=\"type\">MySubclass</span></span><br><span class=\"line\"><span class=\"operator\">-</span> (void)newMethod &#123;</span><br><span class=\"line\">    <span class=\"comment\">// implement new method</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@end</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>4. Protocol</strong> </p>\n<p>You can add a set of method declarations to a class by implementing a protocol. Similar to interfaces in Java or other object-oriented languages, a protocol defines a set of methods, and classes implement these methods.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//MyProtocol.h</span></span><br><span class=\"line\"><span class=\"meta\">@protocol</span> <span class=\"type\">MyProtocol</span></span><br><span class=\"line\"><span class=\"operator\">-</span> (void)newMethod;</span><br><span class=\"line\"><span class=\"meta\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//MyClass.h</span></span><br><span class=\"line\"><span class=\"meta\">@interface</span> <span class=\"type\">MyClass</span> : <span class=\"type\">NSObject</span> <span class=\"operator\">&lt;</span><span class=\"type\">MyProtocol</span><span class=\"operator\">&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// The interface of the class, including the methods declared in the protocol</span></span><br><span class=\"line\"><span class=\"meta\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//MyClass.m</span></span><br><span class=\"line\"><span class=\"meta\">@implementationMyClass</span></span><br><span class=\"line\"><span class=\"operator\">-</span> (void)newMethod &#123;</span><br><span class=\"line\">     <span class=\"comment\">// Implement the logic of the new method</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@end</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>5. Associated Objects</strong> </p>\n<p>Associated objects allow you to add additional instance variables to an existing class at runtime. Although this is not a traditional way of extending a class, it can be useful in some situations.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#<span class=\"keyword\">import</span> &lt;objc/runtime.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> char kAssociatedObjectKey;</span><br><span class=\"line\"></span><br><span class=\"line\">objc_setAssociatedObject(myInstance, <span class=\"operator\">&amp;</span>kAssociatedObjectKey, @<span class=\"string\">&quot;Associated Value&quot;</span>, <span class=\"type\">OBJC_ASSOCIATION_RETAIN_NONATOMIC</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">NSString</span> <span class=\"operator\">*</span>associatedValue <span class=\"operator\">=</span> objc_getAssociatedObject(myInstance, <span class=\"operator\">&amp;</span>kAssociatedObjectKey);</span><br><span class=\"line\"><span class=\"type\">NSLog</span>(@<span class=\"string\">&quot;%@&quot;</span>, associatedValue);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n"},{"title":"00. Summary Of Memory Leak","date":"2023-03-08T19:46:59.000Z","_content":"\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nQuestions about Memory leak (memory leak), if the interview was asked this question and such questions, mainly related to the following 3 aspects.\n- What are the common scenarios of memory leaks, and list a few common examples?\n- How to locate and solve memory leaks that actually occur during development?\n- How to avoid memory leaks in development and what are the methods?    \n\nBelow we summarize these 3 aspects respectively.\n\n#### <font size=3 color=#4169E1> Common scenarios for Memory Leak</font>\n<strong>1. Circular References</strong>   \nUnder the ARC mechanism, circular references are a major cause of memory leaks, and it is also divided into many specific scenarios, such as\n- Circular references between two class objects.\n- Circular reference problems in Blocks (including GCD or other system Blocks, etc.).\n- Circular reference problem in Timer. \n- Circular reference problem brought by delegate.\n- Scenarios such as property observation and listening classes.   \n  \n<strong>2. improper object life cycle management</strong>   \nThis kind needs to be analyzed in the context of actual business problems, e.g.\n- Static fields or other global objects lead to improper holding causing memory leaks.\n- The reference relationship of collection classes, etc. is improper or not released in time, etc.   \n\n<strong>3. untimely release of objects</strong>   \nSome objects require manual memory release, such as the Core Foundation (CF) and Core Graphics (CG) framework objects. If these objects are not released in time, it may lead to memory leaks.   \n\n<strong>4. Untimely closure or release of resources</strong>   \nUntimely closure (or failure to release) of resource classes is also a common memory leak scenario, for example\n- The file is opened (FileHandle) and not closed in time.\n- The URLSession object of a network request is not released in time.\n\n\n#### <font size=3 color=#4169E1> How to locate and solve the memory leak</font>\n\nIn fact, after finding the problem, it is basically easy to solve, for example:\n\nCircular reference means to break the cycle by using weak; If the life cycle of the object is improper, the holder can be changed or the code needs to be redesigned; CF or CG objects need to be released manually; The occupation of resource class also needs to be released manually in time.\n\nBut the main problem is how to find the leaked code.\n\n<strong>**<font size=3>1. Manual debugging method</font>**  </strong>\n\nWhen we realize that there is a leak, there are usually obvious symptoms, such as VC Pop failure.\n\nIf we are familiar with the code, generally, I believe many people will directly find the code for manual debugging. Common means include:\n\n- Override dealloc or deinit methods\n\nWe can try to add a log to the dealloc or deinit method breakpoint of some classes. If there is no expected execution, it is a suspected leak point.\n\n- Manually check reference count\n\nManually checking the reference count of an object can help us find out whether there is a memory leak caused by a reference count error. We can manually check the reference count of an object using the retentCount property in Objective-C or Swift.\n\n- Write some extra test code\n\nIf the memory leak point is relatively obscure, it can be reproduced by writing code of some test cases, such as 9999 consecutive cycles to expand the problem and cause memory exhaustion and crash, and then locate the code according to the stack, which is also a common method to locate probabilistic crashes;\n\n- One-by-one ranking method\n\nComment out the code of the problem one by one until the problem point is found. Similar methods are often used to troubleshoot the crash problem during development. Although it looks very low, it is very effective.\n\n<strong>**<font size=3>2. Tools</font>**  </strong>\n\nThere are many ways to use this, such as:\n\n- Instruments toolbox, which uses Leaks tool or memory debugger Analyze to analyze;\n\n- The Memory Graph in Xcode Memory Debugger can help us analyze the memory reference relationship of objects and find circular references and memory leaks.\n\n- Third-party detection tools, such as MLeaksFinder, FBRetainCycleDetector, LeakDetector, HeapInspector, etc.\n\n- Static analysis tools, such as Clang static analyzer, Infer, OCLint, SwiftLint and other tools. These tools generally find some memory leak code incidentally, which can give us some tips or warnings.\n  \n#### <font size=3 color=#4169E1>How to avoid Memory Leak?</font>\nIn actual development, it is unlikely that writing a piece of code to run the tools of Instrument immediately, even some MLeaksFinder these often false alarm tools are too annoying to close directly.\nThen How can we avoid and minimize the generation of problem code?\n\nFirst, there should be some risk awareness. For example, Timer since the choice of it, you should know that its biggest risk is easy to cause memory problems. Know by heart some scenarios that can easily lead to leaks. Also, for example, be careful with global variables or single instances, etc.\n\nSecond, get into some habits. For example, after writing a piece of code or receiving a piece of code, make sure the object is expected to be released at the dealloc or deinit breakpoint. Also for example, Swift as far as possible to take the value type, rather than reference types; development after self-test, some memory detection tools are turned on as an aid to detection.\n\nThird, good system design. Some business scenarios are easy to generate leakage, for example, once I participated in the development of a live business, the room VC and the room's only data model object dataModel is easy to refer to each other, because the dataModel carries a lot of business information, the business is extremely dependent on the dataModel, the object is therefore also passed very deep and wide, and a circular reference occurs easily. For this kind of improper design at the beginning, only a patch can be fixed later (maintain a dataModel weak reference collection, each time you use the id to query and get the corresponding room dataModel object, the business only needs to maintain an id String object or a dictionary object to store the least information). Similar business scenarios are commodity detail pages and so on.\n\nFourth, the regular project code to do a \"physical examination\", the general project volume is larger, this is very necessary, run the Instrumentation or Memory Graph, almost every time there are gains.\n \n\n","source":"_posts/iOS/01. Memory & Performance & Stability/00. Summary of Memory Leak.md","raw":"---\ntitle: 00. Summary Of Memory Leak\ndate: 2023-03-8 20:46:59\ncategories: \n- [iOS, 01. Memory & Performance & Stability]\ntags:\n- memory \n- leak\n---\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nQuestions about Memory leak (memory leak), if the interview was asked this question and such questions, mainly related to the following 3 aspects.\n- What are the common scenarios of memory leaks, and list a few common examples?\n- How to locate and solve memory leaks that actually occur during development?\n- How to avoid memory leaks in development and what are the methods?    \n\nBelow we summarize these 3 aspects respectively.\n\n#### <font size=3 color=#4169E1> Common scenarios for Memory Leak</font>\n<strong>1. Circular References</strong>   \nUnder the ARC mechanism, circular references are a major cause of memory leaks, and it is also divided into many specific scenarios, such as\n- Circular references between two class objects.\n- Circular reference problems in Blocks (including GCD or other system Blocks, etc.).\n- Circular reference problem in Timer. \n- Circular reference problem brought by delegate.\n- Scenarios such as property observation and listening classes.   \n  \n<strong>2. improper object life cycle management</strong>   \nThis kind needs to be analyzed in the context of actual business problems, e.g.\n- Static fields or other global objects lead to improper holding causing memory leaks.\n- The reference relationship of collection classes, etc. is improper or not released in time, etc.   \n\n<strong>3. untimely release of objects</strong>   \nSome objects require manual memory release, such as the Core Foundation (CF) and Core Graphics (CG) framework objects. If these objects are not released in time, it may lead to memory leaks.   \n\n<strong>4. Untimely closure or release of resources</strong>   \nUntimely closure (or failure to release) of resource classes is also a common memory leak scenario, for example\n- The file is opened (FileHandle) and not closed in time.\n- The URLSession object of a network request is not released in time.\n\n\n#### <font size=3 color=#4169E1> How to locate and solve the memory leak</font>\n\nIn fact, after finding the problem, it is basically easy to solve, for example:\n\nCircular reference means to break the cycle by using weak; If the life cycle of the object is improper, the holder can be changed or the code needs to be redesigned; CF or CG objects need to be released manually; The occupation of resource class also needs to be released manually in time.\n\nBut the main problem is how to find the leaked code.\n\n<strong>**<font size=3>1. Manual debugging method</font>**  </strong>\n\nWhen we realize that there is a leak, there are usually obvious symptoms, such as VC Pop failure.\n\nIf we are familiar with the code, generally, I believe many people will directly find the code for manual debugging. Common means include:\n\n- Override dealloc or deinit methods\n\nWe can try to add a log to the dealloc or deinit method breakpoint of some classes. If there is no expected execution, it is a suspected leak point.\n\n- Manually check reference count\n\nManually checking the reference count of an object can help us find out whether there is a memory leak caused by a reference count error. We can manually check the reference count of an object using the retentCount property in Objective-C or Swift.\n\n- Write some extra test code\n\nIf the memory leak point is relatively obscure, it can be reproduced by writing code of some test cases, such as 9999 consecutive cycles to expand the problem and cause memory exhaustion and crash, and then locate the code according to the stack, which is also a common method to locate probabilistic crashes;\n\n- One-by-one ranking method\n\nComment out the code of the problem one by one until the problem point is found. Similar methods are often used to troubleshoot the crash problem during development. Although it looks very low, it is very effective.\n\n<strong>**<font size=3>2. Tools</font>**  </strong>\n\nThere are many ways to use this, such as:\n\n- Instruments toolbox, which uses Leaks tool or memory debugger Analyze to analyze;\n\n- The Memory Graph in Xcode Memory Debugger can help us analyze the memory reference relationship of objects and find circular references and memory leaks.\n\n- Third-party detection tools, such as MLeaksFinder, FBRetainCycleDetector, LeakDetector, HeapInspector, etc.\n\n- Static analysis tools, such as Clang static analyzer, Infer, OCLint, SwiftLint and other tools. These tools generally find some memory leak code incidentally, which can give us some tips or warnings.\n  \n#### <font size=3 color=#4169E1>How to avoid Memory Leak?</font>\nIn actual development, it is unlikely that writing a piece of code to run the tools of Instrument immediately, even some MLeaksFinder these often false alarm tools are too annoying to close directly.\nThen How can we avoid and minimize the generation of problem code?\n\nFirst, there should be some risk awareness. For example, Timer since the choice of it, you should know that its biggest risk is easy to cause memory problems. Know by heart some scenarios that can easily lead to leaks. Also, for example, be careful with global variables or single instances, etc.\n\nSecond, get into some habits. For example, after writing a piece of code or receiving a piece of code, make sure the object is expected to be released at the dealloc or deinit breakpoint. Also for example, Swift as far as possible to take the value type, rather than reference types; development after self-test, some memory detection tools are turned on as an aid to detection.\n\nThird, good system design. Some business scenarios are easy to generate leakage, for example, once I participated in the development of a live business, the room VC and the room's only data model object dataModel is easy to refer to each other, because the dataModel carries a lot of business information, the business is extremely dependent on the dataModel, the object is therefore also passed very deep and wide, and a circular reference occurs easily. For this kind of improper design at the beginning, only a patch can be fixed later (maintain a dataModel weak reference collection, each time you use the id to query and get the corresponding room dataModel object, the business only needs to maintain an id String object or a dictionary object to store the least information). Similar business scenarios are commodity detail pages and so on.\n\nFourth, the regular project code to do a \"physical examination\", the general project volume is larger, this is very necessary, run the Instrumentation or Memory Graph, almost every time there are gains.\n \n\n","slug":"iOS/01. Memory & Performance & Stability/00. Summary of Memory Leak","published":1,"updated":"2023-08-15T17:33:42.218Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr5z004lvu0mewbp7b9y","content":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>Questions about Memory leak (memory leak), if the interview was asked this question and such questions, mainly related to the following 3 aspects.</p>\n<ul>\n<li>What are the common scenarios of memory leaks, and list a few common examples?</li>\n<li>How to locate and solve memory leaks that actually occur during development?</li>\n<li>How to avoid memory leaks in development and what are the methods?</li>\n</ul>\n<p>Below we summarize these 3 aspects respectively.</p>\n<h4 id=\"Common-scenarios-for-Memory-Leak\"><a href=\"#Common-scenarios-for-Memory-Leak\" class=\"headerlink\" title=\" Common scenarios for Memory Leak\"></a><font size=3 color=#4169E1> Common scenarios for Memory Leak</font></h4><p><strong>1. Circular References</strong><br>Under the ARC mechanism, circular references are a major cause of memory leaks, and it is also divided into many specific scenarios, such as</p>\n<ul>\n<li>Circular references between two class objects.</li>\n<li>Circular reference problems in Blocks (including GCD or other system Blocks, etc.).</li>\n<li>Circular reference problem in Timer. </li>\n<li>Circular reference problem brought by delegate.</li>\n<li>Scenarios such as property observation and listening classes.</li>\n</ul>\n<p><strong>2. improper object life cycle management</strong><br>This kind needs to be analyzed in the context of actual business problems, e.g.</p>\n<ul>\n<li>Static fields or other global objects lead to improper holding causing memory leaks.</li>\n<li>The reference relationship of collection classes, etc. is improper or not released in time, etc.</li>\n</ul>\n<p><strong>3. untimely release of objects</strong><br>Some objects require manual memory release, such as the Core Foundation (CF) and Core Graphics (CG) framework objects. If these objects are not released in time, it may lead to memory leaks.   </p>\n<p><strong>4. Untimely closure or release of resources</strong><br>Untimely closure (or failure to release) of resource classes is also a common memory leak scenario, for example</p>\n<ul>\n<li>The file is opened (FileHandle) and not closed in time.</li>\n<li>The URLSession object of a network request is not released in time.</li>\n</ul>\n<h4 id=\"How-to-locate-and-solve-the-memory-leak\"><a href=\"#How-to-locate-and-solve-the-memory-leak\" class=\"headerlink\" title=\" How to locate and solve the memory leak\"></a><font size=3 color=#4169E1> How to locate and solve the memory leak</font></h4><p>In fact, after finding the problem, it is basically easy to solve, for example:</p>\n<p>Circular reference means to break the cycle by using weak; If the life cycle of the object is improper, the holder can be changed or the code needs to be redesigned; CF or CG objects need to be released manually; The occupation of resource class also needs to be released manually in time.</p>\n<p>But the main problem is how to find the leaked code.</p>\n<p><strong><strong><font size=3>1. Manual debugging method</font></strong>  </strong></p>\n<p>When we realize that there is a leak, there are usually obvious symptoms, such as VC Pop failure.</p>\n<p>If we are familiar with the code, generally, I believe many people will directly find the code for manual debugging. Common means include:</p>\n<ul>\n<li>Override dealloc or deinit methods</li>\n</ul>\n<p>We can try to add a log to the dealloc or deinit method breakpoint of some classes. If there is no expected execution, it is a suspected leak point.</p>\n<ul>\n<li>Manually check reference count</li>\n</ul>\n<p>Manually checking the reference count of an object can help us find out whether there is a memory leak caused by a reference count error. We can manually check the reference count of an object using the retentCount property in Objective-C or Swift.</p>\n<ul>\n<li>Write some extra test code</li>\n</ul>\n<p>If the memory leak point is relatively obscure, it can be reproduced by writing code of some test cases, such as 9999 consecutive cycles to expand the problem and cause memory exhaustion and crash, and then locate the code according to the stack, which is also a common method to locate probabilistic crashes;</p>\n<ul>\n<li>One-by-one ranking method</li>\n</ul>\n<p>Comment out the code of the problem one by one until the problem point is found. Similar methods are often used to troubleshoot the crash problem during development. Although it looks very low, it is very effective.</p>\n<p><strong><strong><font size=3>2. Tools</font></strong>  </strong></p>\n<p>There are many ways to use this, such as:</p>\n<ul>\n<li><p>Instruments toolbox, which uses Leaks tool or memory debugger Analyze to analyze;</p>\n</li>\n<li><p>The Memory Graph in Xcode Memory Debugger can help us analyze the memory reference relationship of objects and find circular references and memory leaks.</p>\n</li>\n<li><p>Third-party detection tools, such as MLeaksFinder, FBRetainCycleDetector, LeakDetector, HeapInspector, etc.</p>\n</li>\n<li><p>Static analysis tools, such as Clang static analyzer, Infer, OCLint, SwiftLint and other tools. These tools generally find some memory leak code incidentally, which can give us some tips or warnings.</p>\n</li>\n</ul>\n<h4 id=\"How-to-avoid-Memory-Leak\"><a href=\"#How-to-avoid-Memory-Leak\" class=\"headerlink\" title=\"How to avoid Memory Leak?\"></a><font size=3 color=#4169E1>How to avoid Memory Leak?</font></h4><p>In actual development, it is unlikely that writing a piece of code to run the tools of Instrument immediately, even some MLeaksFinder these often false alarm tools are too annoying to close directly.<br>Then How can we avoid and minimize the generation of problem code?</p>\n<p>First, there should be some risk awareness. For example, Timer since the choice of it, you should know that its biggest risk is easy to cause memory problems. Know by heart some scenarios that can easily lead to leaks. Also, for example, be careful with global variables or single instances, etc.</p>\n<p>Second, get into some habits. For example, after writing a piece of code or receiving a piece of code, make sure the object is expected to be released at the dealloc or deinit breakpoint. Also for example, Swift as far as possible to take the value type, rather than reference types; development after self-test, some memory detection tools are turned on as an aid to detection.</p>\n<p>Third, good system design. Some business scenarios are easy to generate leakage, for example, once I participated in the development of a live business, the room VC and the room’s only data model object dataModel is easy to refer to each other, because the dataModel carries a lot of business information, the business is extremely dependent on the dataModel, the object is therefore also passed very deep and wide, and a circular reference occurs easily. For this kind of improper design at the beginning, only a patch can be fixed later (maintain a dataModel weak reference collection, each time you use the id to query and get the corresponding room dataModel object, the business only needs to maintain an id String object or a dictionary object to store the least information). Similar business scenarios are commodity detail pages and so on.</p>\n<p>Fourth, the regular project code to do a “physical examination”, the general project volume is larger, this is very necessary, run the Instrumentation or Memory Graph, almost every time there are gains.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>Questions about Memory leak (memory leak), if the interview was asked this question and such questions, mainly related to the following 3 aspects.</p>\n<ul>\n<li>What are the common scenarios of memory leaks, and list a few common examples?</li>\n<li>How to locate and solve memory leaks that actually occur during development?</li>\n<li>How to avoid memory leaks in development and what are the methods?</li>\n</ul>\n<p>Below we summarize these 3 aspects respectively.</p>\n<h4 id=\"Common-scenarios-for-Memory-Leak\"><a href=\"#Common-scenarios-for-Memory-Leak\" class=\"headerlink\" title=\" Common scenarios for Memory Leak\"></a><font size=3 color=#4169E1> Common scenarios for Memory Leak</font></h4><p><strong>1. Circular References</strong><br>Under the ARC mechanism, circular references are a major cause of memory leaks, and it is also divided into many specific scenarios, such as</p>\n<ul>\n<li>Circular references between two class objects.</li>\n<li>Circular reference problems in Blocks (including GCD or other system Blocks, etc.).</li>\n<li>Circular reference problem in Timer. </li>\n<li>Circular reference problem brought by delegate.</li>\n<li>Scenarios such as property observation and listening classes.</li>\n</ul>\n<p><strong>2. improper object life cycle management</strong><br>This kind needs to be analyzed in the context of actual business problems, e.g.</p>\n<ul>\n<li>Static fields or other global objects lead to improper holding causing memory leaks.</li>\n<li>The reference relationship of collection classes, etc. is improper or not released in time, etc.</li>\n</ul>\n<p><strong>3. untimely release of objects</strong><br>Some objects require manual memory release, such as the Core Foundation (CF) and Core Graphics (CG) framework objects. If these objects are not released in time, it may lead to memory leaks.   </p>\n<p><strong>4. Untimely closure or release of resources</strong><br>Untimely closure (or failure to release) of resource classes is also a common memory leak scenario, for example</p>\n<ul>\n<li>The file is opened (FileHandle) and not closed in time.</li>\n<li>The URLSession object of a network request is not released in time.</li>\n</ul>\n<h4 id=\"How-to-locate-and-solve-the-memory-leak\"><a href=\"#How-to-locate-and-solve-the-memory-leak\" class=\"headerlink\" title=\" How to locate and solve the memory leak\"></a><font size=3 color=#4169E1> How to locate and solve the memory leak</font></h4><p>In fact, after finding the problem, it is basically easy to solve, for example:</p>\n<p>Circular reference means to break the cycle by using weak; If the life cycle of the object is improper, the holder can be changed or the code needs to be redesigned; CF or CG objects need to be released manually; The occupation of resource class also needs to be released manually in time.</p>\n<p>But the main problem is how to find the leaked code.</p>\n<p><strong><strong><font size=3>1. Manual debugging method</font></strong>  </strong></p>\n<p>When we realize that there is a leak, there are usually obvious symptoms, such as VC Pop failure.</p>\n<p>If we are familiar with the code, generally, I believe many people will directly find the code for manual debugging. Common means include:</p>\n<ul>\n<li>Override dealloc or deinit methods</li>\n</ul>\n<p>We can try to add a log to the dealloc or deinit method breakpoint of some classes. If there is no expected execution, it is a suspected leak point.</p>\n<ul>\n<li>Manually check reference count</li>\n</ul>\n<p>Manually checking the reference count of an object can help us find out whether there is a memory leak caused by a reference count error. We can manually check the reference count of an object using the retentCount property in Objective-C or Swift.</p>\n<ul>\n<li>Write some extra test code</li>\n</ul>\n<p>If the memory leak point is relatively obscure, it can be reproduced by writing code of some test cases, such as 9999 consecutive cycles to expand the problem and cause memory exhaustion and crash, and then locate the code according to the stack, which is also a common method to locate probabilistic crashes;</p>\n<ul>\n<li>One-by-one ranking method</li>\n</ul>\n<p>Comment out the code of the problem one by one until the problem point is found. Similar methods are often used to troubleshoot the crash problem during development. Although it looks very low, it is very effective.</p>\n<p><strong><strong><font size=3>2. Tools</font></strong>  </strong></p>\n<p>There are many ways to use this, such as:</p>\n<ul>\n<li><p>Instruments toolbox, which uses Leaks tool or memory debugger Analyze to analyze;</p>\n</li>\n<li><p>The Memory Graph in Xcode Memory Debugger can help us analyze the memory reference relationship of objects and find circular references and memory leaks.</p>\n</li>\n<li><p>Third-party detection tools, such as MLeaksFinder, FBRetainCycleDetector, LeakDetector, HeapInspector, etc.</p>\n</li>\n<li><p>Static analysis tools, such as Clang static analyzer, Infer, OCLint, SwiftLint and other tools. These tools generally find some memory leak code incidentally, which can give us some tips or warnings.</p>\n</li>\n</ul>\n<h4 id=\"How-to-avoid-Memory-Leak\"><a href=\"#How-to-avoid-Memory-Leak\" class=\"headerlink\" title=\"How to avoid Memory Leak?\"></a><font size=3 color=#4169E1>How to avoid Memory Leak?</font></h4><p>In actual development, it is unlikely that writing a piece of code to run the tools of Instrument immediately, even some MLeaksFinder these often false alarm tools are too annoying to close directly.<br>Then How can we avoid and minimize the generation of problem code?</p>\n<p>First, there should be some risk awareness. For example, Timer since the choice of it, you should know that its biggest risk is easy to cause memory problems. Know by heart some scenarios that can easily lead to leaks. Also, for example, be careful with global variables or single instances, etc.</p>\n<p>Second, get into some habits. For example, after writing a piece of code or receiving a piece of code, make sure the object is expected to be released at the dealloc or deinit breakpoint. Also for example, Swift as far as possible to take the value type, rather than reference types; development after self-test, some memory detection tools are turned on as an aid to detection.</p>\n<p>Third, good system design. Some business scenarios are easy to generate leakage, for example, once I participated in the development of a live business, the room VC and the room’s only data model object dataModel is easy to refer to each other, because the dataModel carries a lot of business information, the business is extremely dependent on the dataModel, the object is therefore also passed very deep and wide, and a circular reference occurs easily. For this kind of improper design at the beginning, only a patch can be fixed later (maintain a dataModel weak reference collection, each time you use the id to query and get the corresponding room dataModel object, the business only needs to maintain an id String object or a dictionary object to store the least information). Similar business scenarios are commodity detail pages and so on.</p>\n<p>Fourth, the regular project code to do a “physical examination”, the general project volume is larger, this is very necessary, run the Instrumentation or Memory Graph, almost every time there are gains.</p>\n"},{"title":"01. Common Crash Scenarios","date":"2023-03-10T19:46:59.000Z","_content":"\n<font color=gray size=2>*It will take about 5 minutes to finish reading this article.*</font>\n\n#### <font size=3 color=#4169E1> 1. \"Unrecognized selector sent to instance\" </font> \n<strong>Problem analysis：</strong>     \n\"unrecognized selector sent to instance\" is an Objective-C exception that indicates an attempt to call a method or message that does not exist. This exception usually occurs when: \n- When using the performSelector: method, the specified method does not exist; \n- When using KVO (key Value observation), the observed property does not exist; \n- When using NSNotificationCenter, the monitored event does not exist; \n- The specified method is not present when using NSInvocation (message invocation); \n- When extending a class with a Category, methods are implemented directly in the implementation file instead of being declared in the header file; \nAnd so on.        \n\n<strong>Sample code：</strong>\n<details>\n<summary>Objective-C</summary>\n\n```Swift\n@interface MyClass : NSObject\n- (void)doSomething;\n@end\n\n@implementation MyClass\n@end\n\n@interface MyOtherClass : NSObject\n@end\n\n@implementation MyOtherClass\n- (void)doSomethingElse {\n    NSLog(@\"Doing something else...\");\n}\n@end\n\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n        MyClass *object = [[MyClass alloc] init];\n        // unrecognized selector sent to instance\n        [object performSelector:@selector(doSomethingElse)]; \n    }\n    return 0;\n}\n```\n</details>\n\n<strong>Recommended solution:：</strong>     \n- Use the \"respondsToSelector\" judgment before calling, or use ProtocolKit in Release mode to add a default implementation to the protocol to prevent crashes, and turn off the default implementation in Debug mode.\n- Take advantage of the dynamic nature of OC and use several methods of message forwarding to underwrite the process.\n\n\n\n#### <font size=3 color=#4169E1> 2. \"EXC_BAD_ACCESS\" </font> \n<strong>Problem analysis：</strong>         \nThere are many reasons for the problem:\n- Occurrence of hanging pointers (null pointers, wild pointers)\n- Objects are not initialized\n- The accessed object is freed\n- Access to out-of-bounds collection elements\netc.\n\n<strong>Sample code：</strong>     \nOmitted.   \n<strong>Recommended solution:：</strong>   \n1. turn on zombie mode in Debug phase and turn off zombie mode in Release.  \n2. use Xcode's Address Sanitizer to check address access out of bounds.  \n3. remember to initialize when creating objects.  \n4. use the correct modifier for the object's attributes (should use strong/weak, misused assign).   \n5. call block and other objects before the time to make a judgment.  \n\n#### <font size=3 color=#4169E1> 3. Caused by Collection Related </font> \n<strong>Problem analysis：</strong>  \nThere are also many scenarios that lead to Crash.   \n1. Array out-of-bounds, where the access subscript is greater than the number of arrays.   \n2. Adding empty data to the array.     \n3. Multi-threaded environment, a thread is reading, a thread is removing.        \n4. Multi-threaded operation of variable arrays (expansion of arrays, access to zombie objects).   \n\n<strong>Sample code：</strong>  \n\n```Swift \n// Accessing an array out of bounds will cause a crash\nlet array = [1, 2, 3]\nlet item = array[3]\n```\n\n```Swift\n// Forcibly unwrapping an optional type and it's value is nil will cause a crash\nvar dict: [String: String?] = [\"key1\": \"value1\", \"key2\": \"value2\"]\nlet value = dict[\"key1\"]! \n```\n```Swift\n// Forcibly unwrapping an optional type and it's value is nil will cause a crash\nvar set: Set<String?> = [\"value1\", \"value2\", nil]\nlet value = set.first!  \n```\n\n<strong>Recommended solution:：</strong>  \n1. When using dictionaries and sets, check whether the keys and values are nil (use guard, if let, and other syntax to avoid crashes caused by forced unwrapping);\n2. Use extensions to override original methods and perform checks internally;\n3. In Objective-C, use Runtime mechanism to replace original methods with custom secure methods;\n4. When performing multi-threaded operations on arrays, ensure the atomicity of read and write operations, such as locking or other protective measures.\n\n```Swift\n//Use the safe subscript extension provided by Swift to avoid accessing an array out of bounds.\nextension Collection {\n    subscript(safe index: Index) -> Element? {\n        return indices.contains(index) ? self[index] : nil\n    }\n}\n\nlet array = [1, 2, 3]\nlet item = array[safe: 3] //It will not cause a crash, and the resulting value will be nil.\n```\n\n\n#### <font size=3 color=#4169E1> 4. \"Out of Memory\" </font> \n<strong>Problem analysis：</strong>  \nIn iOS applications, if the application allocates too much memory and causes the system to run out of memory, an OOM error will occur. Each application on an iOS device has its own memory limit. When an application needs to allocate more memory, if there is not enough available memory, the system will automatically trigger an OOM error, terminate the application, and release it from memory.\n\nThe causes of OOM errors may include:\n1. The application tries to allocate a large amount of memory when there is not enough memory available.\n2. Memory leaks in the application that cause high memory usage.\n3. The application's memory usage is not compatible with system resources, resulting in high memory usage, etc.\n\n<strong>Sample code：</strong>  \n```Swift\nvar array = [Int]()\nwhile true {\n    array.append(1)\n}\n```\n\n<strong>Recommended solution:：</strong>  \n\nTo avoid OOM errors, the following measures can be taken:\n1. Use appropriate data structures to avoid unnecessary memory usage.\n2. Debug memory leaks.\n3. Release unnecessary memory in a timely manner, such as calling autoreleasepool to release it after using a large memory object.\n4. Reduce object creation. Object pool and other technologies can be used to reuse existing objects rather than frequently creating and destroying objects.\n5. For large memory objects, lazy-loading and other technologies can be used to load them only when needed to reduce memory usage.\n \n\n#### <font size=3 color=#4169E1> 5. \"Type Cast Exception\"or \"Type Mismatch\" </font> \n<strong>Problem analysis：</strong>   \nType Cast Exception or Type Mismatch refers to the exception that occurs during type conversion, leading to application crash. In iOS development, common scenarios include:\n1. Type mismatch occurs when converting an instance of one type to an instance of another type.\n2. Type mismatch occurs when converting from AnyObject to a specific type.\n3. Crash occurs when forcing the unwrapping of an optional type to a non-optional type with a nil value.\n\n<strong>Sample code：</strong>  \n```Swift\n let array: [Any] = [\"A\", \"B\", \"C\"]\n let str = array[0] as! Int\n //Error: Could not cast value of type 'Swift.String' (0x7ff8553bc178) to 'Swift.Int' (0x7ff8553be0e0).\n```\n\n<strong>Recommended solution:：</strong>  \n1. Before performing type conversion, check if the object is an instance of the target type using the is keyword.\n2. Use optional binding to avoid exceptions when typecasting.\n  \nFor example, in the above example, the following code can be used for improvement:\n```Swift\nlet array: [Any] = [\"A\", \"B\", \"C\"]\nif let obj = array[0] as? Int {\n    \n}\n```\n\n#### <font size=3 color=#4169E1> 6. Caused by Deadlock </font> \n<strong>Problem analysis：</strong>   \nDeadlock refers to a situation where two or more threads are waiting for each other to complete their operations, causing the program to become unresponsive. In iOS, the most common cause of a deadlock is when a synchronous operation is executed on the main thread that waits for another thread to complete, while the other thread is also waiting for the main thread to complete, resulting in a deadlock.\n\n<strong>Sample code：</strong>  \nIn the following code, when the main thread calls the queue.sync method, it waits for the completion of Block 1. However, Block 1 calls queue.sync again, causing the thread to enter a waiting state. Since Block 2 depends on the thread to release the lock before it can execute, the entire program is in a deadlock state and cannot continue executing.\n```Swift\nlet queue = DispatchQueue(label: \"com.example.queue\")\nqueue.sync {\n    print(\"Block 1\")\n    queue.sync {\n        print(\"Block 2\")\n    }\n}\nprint(\"Done\")\n``` \n\n{% img /assets/iOS/Memory&Performance&Stability/001.png %}\n\n<strong>Recommended solution:：</strong> \n1. Avoid executing long synchronous operations on the main thread, and instead, perform them on a background thread.\n2. Avoid using synchronous operations that wait for each other on the same queue and use asynchronous operations instead.\n3. Avoid using synchronous operations on multiple queues that cause deadlocks. Use asynchronous operations instead or use techniques such as dispatch_group to solve the issue.\n\nIn the above example, you can replace the synchronous operations with asynchronous operations, as shown below:\n```Swift\nlet queue = DispatchQueue(label: \"com.example.queue\")\nqueue.async {\n    print(\"Block 1\")\n    queue.async {\n        print(\"Block 2\")\n    }\n}\nprint(\"Done\")\n\n```\n\n#### <font size=3 color=#4169E1> 7. Caused by Stack Overflow </font> \n<strong>Problem analysis：</strong>   \nStack Overflow usually occurs in recursive calls. If the recursion does not have a termination condition or the termination condition is incorrect, the recursion depth will continue to increase until the stack space is exhausted, causing a stack overflow. \n\nIn addition, if one method calls another method, a deep call stack can also cause a stack overflow.         \n\n<strong>Sample code：</strong>  \n```Swift\nfunc recursiveFunction() {\n    recursiveFunction()\n}\nrecursiveFunction() \n```\n<strong>Recommended solution:：</strong>  \n1. Optimize algorithms: Optimize recursive algorithms to reduce the depth of the call stack. For example, use iterative instead of recursive algorithms.\n2. Increase stack space: Increase available stack space by changing the thread stack size or using the dispatch_set_concurrency function of GCD.\n3. Reduce stack space usage: Reduce stack space usage by reducing the local variables allocated during function calls, reducing nested calls, or using tail recursion and other techniques.\n4. Use tail recursion: Tail recursion refers to the last operation in a recursive function being a recursive call to itself. In Swift, you can use the @_optimize(speed) and @_optimize(safety) attributes to mark functions so that the compiler can optimize tail recursion.\n5. Avoid infinite recursion: Ensure that the recursive algorithm has the correct termination condition; otherwise, the recursion depth will increase infinitely, eventually leading to a stack overflow.\n6. Use data structures with smaller stack space: For large-scale recursive algorithms, data structures with smaller stack space, such as linked lists or queues, can be used.\n\n\n#### <font size=3 color=#4169E1> 8. Caused by KVO </font> \n<strong>Problem analysis：</strong>   \nKVO (Key-Value Observing) is an observer pattern in the Cocoa framework that allows objects to be notified when the value of another object's property changes. When using KVO, if observers are not removed in a timely manner or the observer object has already been released, it can cause a crash.\n<strong>Sample code：</strong>  \nOmitted.（Objective-C）       \n<strong>Recommended solution:：</strong>  \n1. Remove the observer in a timely manner and ensure the observer object exists.\n2. Best practices for using KVO:    \n    - Use KVO only when necessary to avoid overuse;   \n    - Use Swift's Property Observers instead of KVO;  \n    - Use closures or Notification Center instead of KVO;     \n    - Use the correct method when removing observers to avoid omissions;  \n    - Avoid using strings as keyPaths. Instead, use static variables or constants, or use the #keyPath() method introduced in Swift 4 to obtain the keyPath.\n\n#### <font size=3 color=#4169E1> 9. Caused by Multi-threaded </font> \n<strong>Problem analysis：</strong>   \nCrashes caused by multi-threading are a common issue in iOS, which may occur in different scenarios. Here are some possible scenarios, sample code, and recommended solutions that may cause multi-threading crashes:\n     \n1. Multiple threads accessing the same shared data structure or variable without synchronization or locking.\n2. Using unsafe data structures or APIs in a multi-threaded environment, such as using non-thread-safe mutable collection class Array.\n3. Calling a long-running operation (such as network requests or I/O operations) in a thread, causing the UI thread to be blocked.\n4. Updating the UI in a sub-thread.\n\nIn general, the crash caused by multi-threading will receive a SIGSEGV signal, indicating that an attempt was made to access memory that was not allocated to oneself or to write data to a memory address without write permission.\n\n<strong>Sample code：</strong>  \nThe following is a simple sample code that demonstrates the scenarios and issues caused by multi-threading crashes:  \n```Swift\nvar array = [Int]()\nDispatchQueue.global().async {\n    for i in 0..<100 {\n        array.append(i)\n    }\n}\n\nDispatchQueue.global().async {\n    for i in 100..<200 {\n        array.append(i)\n    }\n}\n```\nAfter running it, the crash occurs:\n{% img /assets/iOS/Memory&Performance&Stability/002.jpeg %}\n\n<strong>Recommended solution:：</strong>  \n\nHere are three possible recommended solutions that can help you avoid multi-threading crashes:\n1. Use thread-safe data structures or APIs, such as using NSLock or dispatch_semaphore_t to synchronize.\n```Swift\nlet lock = NSLock()\nDispatchQueue.global().async {\n    lock.lock()\n    for i in 0..<100 {\n        array.append(i)\n    }\n    lock.unlock()\n}\nDispatchQueue.global().async {\n    lock.lock()\n    for i in 100..<200 {\n        array.append(i)\n    }\n    lock.unlock()\n}\n```\n1. Use GCD for inter-thread communication and avoid long-running operations on the main thread.\n```Swift\nDispatchQueue.global().async {\n    let data = getData() // long-running operation\n    DispatchQueue.main.async {\n        self.updateUI(with: data) // update UI on the main thread\n    }\n}\n```\nThe above code performs a long-running operation on the background thread and uses GCD to send the result to the main thread to update the UI.\n\n1. Use a serial queue to ensure that operations on the same object are executed in order.\n```Swift\nlet serialQueue = DispatchQueue(label: \"com.example.serialQueue\")\n\nserialQueue.async {\n    self.updateUI(with: data1) // operation 1\n}\n\nserialQueue.async {\n    self.updateUI(with: data2) // operation 2\n}\n```\n\n#### <font size=3 color=#4169E1> 10. Caused by Long connection of Socket </font> \n<strong>Problem analysis：</strong>  \nWhen the server closes a connection, if the client continues to send data, according to the TCP protocol, it will receive an RST response. When the client sends data to this server again, the system will send a SIGPIPE signal to the process, telling the process that the connection has been disconnected and not to write anymore. According to the default signal handling rules, the default action of the SIGPIPE signal is to terminate or exit. Therefore, the client will exit.\n\n<strong>Sample code：</strong>  \n```Swift\nclass SocketManager {\n    \n    private var inputStream: InputStream?\n    private var outputStream: OutputStream?\n    private let host: String = \"localhost\"\n    private let port: Int = 12345\n    \n    func connect() {\n        Stream.getStreamsToHost(withName: host, port: port, inputStream: &inputStream, outputStream: &outputStream)\n        \n        inputStream?.open()\n        outputStream?.open()\n    }\n    \n    func disconnect() {\n        inputStream?.close()\n        outputStream?.close()\n    }    \n}\n```\n\n<strong>Recommended solution:：</strong>     \nHere are three possible recommended solutions to avoid the crash caused by long connections of sockets:\n\nFirst, when the application enters the background, immediately close the socket connection:\n```Swift\nfunc applicationWillResignActive(_ application: UIApplication) {\n    socketManager.disconnect()\n}\n```\nSecond, when using the background running mode in the application, handle the socket connection correctly.\n```Swift\nfunc application(_ application: UIApplication, performFetchWithCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void) {\n    if application.backgroundTimeRemaining < 60 {\n        socketManager.disconnect()\n    }\n    \n    // Execute background task here\n}\n\n```\nThe above code shows that when using Background Fetch, check the remaining background running time of the application, and close the socket connection if it is less than 1 minute.\n\nThird, use signal(SIGPIPE,SIG_IGN) to hand over SIGPIPE to the system, which sets SIGPIPE to SIG_IGN, making the client not execute the default operation, that is, not to exit.\n\n#### <font size=3 color=#4169E1> 11. Caused by Watch Dog Timeout </font> \n<strong>Problem analysis：</strong>   \nWatchdog Timeout is a monitoring mechanism built into the iOS system that checks whether the code executed by the application in the main thread exceeds the specified time. If it times out, the system automatically terminates the execution of the application to avoid a poor user experience caused by application freezes.\n\nWatchdog Timeout typically occurs during time-consuming operations such as network requests, IO operations, and large data processing. If these time-consuming operations are not handled correctly, it is easy to trigger Watchdog Timeout, leading to application crashes.\n\n<strong>Sample code：</strong>  \nFor example, executing the following code in the main thread may trigger a Watchdog timeout:\n```Swift\nfunc doHeavyWork() {\n    for i in 1...1000000000 {\n        // execute a large number of loop operations\n    }\n}\n```\n\n<strong>Recommended solution:：</strong>     \nFirst, put time-consuming operations in a separate thread to avoid occupying the main thread for too long, thereby avoiding the occurrence of Watchdog Timeout. You can use GCD or NSOperationQueue to implement this.\n\nSecond, use an asynchronous method to execute time-consuming operations and use an appropriate queue to manage the execution. For example, use DispatchQueue.global() to create a global queue, and then use the async method to asynchronously execute tasks. In addition, you can also use NSOperationQueue to manage tasks.         \n\nThird, use a timer or RunLoop to periodically execute time-consuming operations, and check whether the time exceeds the Watchdog Timeout setting before execution. If it times out, stop executing and put the task on hold until the next execution cycle.  \n\nFourth, if time-consuming operations must be performed in the main thread, you can use NSRunLoop to control the execution time and periodically call the run method to ensure that the Watchdog Timeout setting is not exceeded.\n\n\n#### <font size=3 color=gray>*Reference*</font>\n[1] <https://juejin.cn/post/6844903775203753997>\n[2] <https://juejin.cn/post/6978014329333350430>\n \n\n","source":"_posts/iOS/01. Memory & Performance & Stability/01. Common Crash Scenarios.md","raw":"---\ntitle: 01. Common Crash Scenarios\ndate: 2023-03-10 20:46:59\ncategories: \n- [iOS, 01. Memory & Performance & Stability]\ntags:\n- crash\n---\n\n<font color=gray size=2>*It will take about 5 minutes to finish reading this article.*</font>\n\n#### <font size=3 color=#4169E1> 1. \"Unrecognized selector sent to instance\" </font> \n<strong>Problem analysis：</strong>     \n\"unrecognized selector sent to instance\" is an Objective-C exception that indicates an attempt to call a method or message that does not exist. This exception usually occurs when: \n- When using the performSelector: method, the specified method does not exist; \n- When using KVO (key Value observation), the observed property does not exist; \n- When using NSNotificationCenter, the monitored event does not exist; \n- The specified method is not present when using NSInvocation (message invocation); \n- When extending a class with a Category, methods are implemented directly in the implementation file instead of being declared in the header file; \nAnd so on.        \n\n<strong>Sample code：</strong>\n<details>\n<summary>Objective-C</summary>\n\n```Swift\n@interface MyClass : NSObject\n- (void)doSomething;\n@end\n\n@implementation MyClass\n@end\n\n@interface MyOtherClass : NSObject\n@end\n\n@implementation MyOtherClass\n- (void)doSomethingElse {\n    NSLog(@\"Doing something else...\");\n}\n@end\n\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n        MyClass *object = [[MyClass alloc] init];\n        // unrecognized selector sent to instance\n        [object performSelector:@selector(doSomethingElse)]; \n    }\n    return 0;\n}\n```\n</details>\n\n<strong>Recommended solution:：</strong>     \n- Use the \"respondsToSelector\" judgment before calling, or use ProtocolKit in Release mode to add a default implementation to the protocol to prevent crashes, and turn off the default implementation in Debug mode.\n- Take advantage of the dynamic nature of OC and use several methods of message forwarding to underwrite the process.\n\n\n\n#### <font size=3 color=#4169E1> 2. \"EXC_BAD_ACCESS\" </font> \n<strong>Problem analysis：</strong>         \nThere are many reasons for the problem:\n- Occurrence of hanging pointers (null pointers, wild pointers)\n- Objects are not initialized\n- The accessed object is freed\n- Access to out-of-bounds collection elements\netc.\n\n<strong>Sample code：</strong>     \nOmitted.   \n<strong>Recommended solution:：</strong>   \n1. turn on zombie mode in Debug phase and turn off zombie mode in Release.  \n2. use Xcode's Address Sanitizer to check address access out of bounds.  \n3. remember to initialize when creating objects.  \n4. use the correct modifier for the object's attributes (should use strong/weak, misused assign).   \n5. call block and other objects before the time to make a judgment.  \n\n#### <font size=3 color=#4169E1> 3. Caused by Collection Related </font> \n<strong>Problem analysis：</strong>  \nThere are also many scenarios that lead to Crash.   \n1. Array out-of-bounds, where the access subscript is greater than the number of arrays.   \n2. Adding empty data to the array.     \n3. Multi-threaded environment, a thread is reading, a thread is removing.        \n4. Multi-threaded operation of variable arrays (expansion of arrays, access to zombie objects).   \n\n<strong>Sample code：</strong>  \n\n```Swift \n// Accessing an array out of bounds will cause a crash\nlet array = [1, 2, 3]\nlet item = array[3]\n```\n\n```Swift\n// Forcibly unwrapping an optional type and it's value is nil will cause a crash\nvar dict: [String: String?] = [\"key1\": \"value1\", \"key2\": \"value2\"]\nlet value = dict[\"key1\"]! \n```\n```Swift\n// Forcibly unwrapping an optional type and it's value is nil will cause a crash\nvar set: Set<String?> = [\"value1\", \"value2\", nil]\nlet value = set.first!  \n```\n\n<strong>Recommended solution:：</strong>  \n1. When using dictionaries and sets, check whether the keys and values are nil (use guard, if let, and other syntax to avoid crashes caused by forced unwrapping);\n2. Use extensions to override original methods and perform checks internally;\n3. In Objective-C, use Runtime mechanism to replace original methods with custom secure methods;\n4. When performing multi-threaded operations on arrays, ensure the atomicity of read and write operations, such as locking or other protective measures.\n\n```Swift\n//Use the safe subscript extension provided by Swift to avoid accessing an array out of bounds.\nextension Collection {\n    subscript(safe index: Index) -> Element? {\n        return indices.contains(index) ? self[index] : nil\n    }\n}\n\nlet array = [1, 2, 3]\nlet item = array[safe: 3] //It will not cause a crash, and the resulting value will be nil.\n```\n\n\n#### <font size=3 color=#4169E1> 4. \"Out of Memory\" </font> \n<strong>Problem analysis：</strong>  \nIn iOS applications, if the application allocates too much memory and causes the system to run out of memory, an OOM error will occur. Each application on an iOS device has its own memory limit. When an application needs to allocate more memory, if there is not enough available memory, the system will automatically trigger an OOM error, terminate the application, and release it from memory.\n\nThe causes of OOM errors may include:\n1. The application tries to allocate a large amount of memory when there is not enough memory available.\n2. Memory leaks in the application that cause high memory usage.\n3. The application's memory usage is not compatible with system resources, resulting in high memory usage, etc.\n\n<strong>Sample code：</strong>  \n```Swift\nvar array = [Int]()\nwhile true {\n    array.append(1)\n}\n```\n\n<strong>Recommended solution:：</strong>  \n\nTo avoid OOM errors, the following measures can be taken:\n1. Use appropriate data structures to avoid unnecessary memory usage.\n2. Debug memory leaks.\n3. Release unnecessary memory in a timely manner, such as calling autoreleasepool to release it after using a large memory object.\n4. Reduce object creation. Object pool and other technologies can be used to reuse existing objects rather than frequently creating and destroying objects.\n5. For large memory objects, lazy-loading and other technologies can be used to load them only when needed to reduce memory usage.\n \n\n#### <font size=3 color=#4169E1> 5. \"Type Cast Exception\"or \"Type Mismatch\" </font> \n<strong>Problem analysis：</strong>   \nType Cast Exception or Type Mismatch refers to the exception that occurs during type conversion, leading to application crash. In iOS development, common scenarios include:\n1. Type mismatch occurs when converting an instance of one type to an instance of another type.\n2. Type mismatch occurs when converting from AnyObject to a specific type.\n3. Crash occurs when forcing the unwrapping of an optional type to a non-optional type with a nil value.\n\n<strong>Sample code：</strong>  \n```Swift\n let array: [Any] = [\"A\", \"B\", \"C\"]\n let str = array[0] as! Int\n //Error: Could not cast value of type 'Swift.String' (0x7ff8553bc178) to 'Swift.Int' (0x7ff8553be0e0).\n```\n\n<strong>Recommended solution:：</strong>  \n1. Before performing type conversion, check if the object is an instance of the target type using the is keyword.\n2. Use optional binding to avoid exceptions when typecasting.\n  \nFor example, in the above example, the following code can be used for improvement:\n```Swift\nlet array: [Any] = [\"A\", \"B\", \"C\"]\nif let obj = array[0] as? Int {\n    \n}\n```\n\n#### <font size=3 color=#4169E1> 6. Caused by Deadlock </font> \n<strong>Problem analysis：</strong>   \nDeadlock refers to a situation where two or more threads are waiting for each other to complete their operations, causing the program to become unresponsive. In iOS, the most common cause of a deadlock is when a synchronous operation is executed on the main thread that waits for another thread to complete, while the other thread is also waiting for the main thread to complete, resulting in a deadlock.\n\n<strong>Sample code：</strong>  \nIn the following code, when the main thread calls the queue.sync method, it waits for the completion of Block 1. However, Block 1 calls queue.sync again, causing the thread to enter a waiting state. Since Block 2 depends on the thread to release the lock before it can execute, the entire program is in a deadlock state and cannot continue executing.\n```Swift\nlet queue = DispatchQueue(label: \"com.example.queue\")\nqueue.sync {\n    print(\"Block 1\")\n    queue.sync {\n        print(\"Block 2\")\n    }\n}\nprint(\"Done\")\n``` \n\n{% img /assets/iOS/Memory&Performance&Stability/001.png %}\n\n<strong>Recommended solution:：</strong> \n1. Avoid executing long synchronous operations on the main thread, and instead, perform them on a background thread.\n2. Avoid using synchronous operations that wait for each other on the same queue and use asynchronous operations instead.\n3. Avoid using synchronous operations on multiple queues that cause deadlocks. Use asynchronous operations instead or use techniques such as dispatch_group to solve the issue.\n\nIn the above example, you can replace the synchronous operations with asynchronous operations, as shown below:\n```Swift\nlet queue = DispatchQueue(label: \"com.example.queue\")\nqueue.async {\n    print(\"Block 1\")\n    queue.async {\n        print(\"Block 2\")\n    }\n}\nprint(\"Done\")\n\n```\n\n#### <font size=3 color=#4169E1> 7. Caused by Stack Overflow </font> \n<strong>Problem analysis：</strong>   \nStack Overflow usually occurs in recursive calls. If the recursion does not have a termination condition or the termination condition is incorrect, the recursion depth will continue to increase until the stack space is exhausted, causing a stack overflow. \n\nIn addition, if one method calls another method, a deep call stack can also cause a stack overflow.         \n\n<strong>Sample code：</strong>  \n```Swift\nfunc recursiveFunction() {\n    recursiveFunction()\n}\nrecursiveFunction() \n```\n<strong>Recommended solution:：</strong>  \n1. Optimize algorithms: Optimize recursive algorithms to reduce the depth of the call stack. For example, use iterative instead of recursive algorithms.\n2. Increase stack space: Increase available stack space by changing the thread stack size or using the dispatch_set_concurrency function of GCD.\n3. Reduce stack space usage: Reduce stack space usage by reducing the local variables allocated during function calls, reducing nested calls, or using tail recursion and other techniques.\n4. Use tail recursion: Tail recursion refers to the last operation in a recursive function being a recursive call to itself. In Swift, you can use the @_optimize(speed) and @_optimize(safety) attributes to mark functions so that the compiler can optimize tail recursion.\n5. Avoid infinite recursion: Ensure that the recursive algorithm has the correct termination condition; otherwise, the recursion depth will increase infinitely, eventually leading to a stack overflow.\n6. Use data structures with smaller stack space: For large-scale recursive algorithms, data structures with smaller stack space, such as linked lists or queues, can be used.\n\n\n#### <font size=3 color=#4169E1> 8. Caused by KVO </font> \n<strong>Problem analysis：</strong>   \nKVO (Key-Value Observing) is an observer pattern in the Cocoa framework that allows objects to be notified when the value of another object's property changes. When using KVO, if observers are not removed in a timely manner or the observer object has already been released, it can cause a crash.\n<strong>Sample code：</strong>  \nOmitted.（Objective-C）       \n<strong>Recommended solution:：</strong>  \n1. Remove the observer in a timely manner and ensure the observer object exists.\n2. Best practices for using KVO:    \n    - Use KVO only when necessary to avoid overuse;   \n    - Use Swift's Property Observers instead of KVO;  \n    - Use closures or Notification Center instead of KVO;     \n    - Use the correct method when removing observers to avoid omissions;  \n    - Avoid using strings as keyPaths. Instead, use static variables or constants, or use the #keyPath() method introduced in Swift 4 to obtain the keyPath.\n\n#### <font size=3 color=#4169E1> 9. Caused by Multi-threaded </font> \n<strong>Problem analysis：</strong>   \nCrashes caused by multi-threading are a common issue in iOS, which may occur in different scenarios. Here are some possible scenarios, sample code, and recommended solutions that may cause multi-threading crashes:\n     \n1. Multiple threads accessing the same shared data structure or variable without synchronization or locking.\n2. Using unsafe data structures or APIs in a multi-threaded environment, such as using non-thread-safe mutable collection class Array.\n3. Calling a long-running operation (such as network requests or I/O operations) in a thread, causing the UI thread to be blocked.\n4. Updating the UI in a sub-thread.\n\nIn general, the crash caused by multi-threading will receive a SIGSEGV signal, indicating that an attempt was made to access memory that was not allocated to oneself or to write data to a memory address without write permission.\n\n<strong>Sample code：</strong>  \nThe following is a simple sample code that demonstrates the scenarios and issues caused by multi-threading crashes:  \n```Swift\nvar array = [Int]()\nDispatchQueue.global().async {\n    for i in 0..<100 {\n        array.append(i)\n    }\n}\n\nDispatchQueue.global().async {\n    for i in 100..<200 {\n        array.append(i)\n    }\n}\n```\nAfter running it, the crash occurs:\n{% img /assets/iOS/Memory&Performance&Stability/002.jpeg %}\n\n<strong>Recommended solution:：</strong>  \n\nHere are three possible recommended solutions that can help you avoid multi-threading crashes:\n1. Use thread-safe data structures or APIs, such as using NSLock or dispatch_semaphore_t to synchronize.\n```Swift\nlet lock = NSLock()\nDispatchQueue.global().async {\n    lock.lock()\n    for i in 0..<100 {\n        array.append(i)\n    }\n    lock.unlock()\n}\nDispatchQueue.global().async {\n    lock.lock()\n    for i in 100..<200 {\n        array.append(i)\n    }\n    lock.unlock()\n}\n```\n1. Use GCD for inter-thread communication and avoid long-running operations on the main thread.\n```Swift\nDispatchQueue.global().async {\n    let data = getData() // long-running operation\n    DispatchQueue.main.async {\n        self.updateUI(with: data) // update UI on the main thread\n    }\n}\n```\nThe above code performs a long-running operation on the background thread and uses GCD to send the result to the main thread to update the UI.\n\n1. Use a serial queue to ensure that operations on the same object are executed in order.\n```Swift\nlet serialQueue = DispatchQueue(label: \"com.example.serialQueue\")\n\nserialQueue.async {\n    self.updateUI(with: data1) // operation 1\n}\n\nserialQueue.async {\n    self.updateUI(with: data2) // operation 2\n}\n```\n\n#### <font size=3 color=#4169E1> 10. Caused by Long connection of Socket </font> \n<strong>Problem analysis：</strong>  \nWhen the server closes a connection, if the client continues to send data, according to the TCP protocol, it will receive an RST response. When the client sends data to this server again, the system will send a SIGPIPE signal to the process, telling the process that the connection has been disconnected and not to write anymore. According to the default signal handling rules, the default action of the SIGPIPE signal is to terminate or exit. Therefore, the client will exit.\n\n<strong>Sample code：</strong>  \n```Swift\nclass SocketManager {\n    \n    private var inputStream: InputStream?\n    private var outputStream: OutputStream?\n    private let host: String = \"localhost\"\n    private let port: Int = 12345\n    \n    func connect() {\n        Stream.getStreamsToHost(withName: host, port: port, inputStream: &inputStream, outputStream: &outputStream)\n        \n        inputStream?.open()\n        outputStream?.open()\n    }\n    \n    func disconnect() {\n        inputStream?.close()\n        outputStream?.close()\n    }    \n}\n```\n\n<strong>Recommended solution:：</strong>     \nHere are three possible recommended solutions to avoid the crash caused by long connections of sockets:\n\nFirst, when the application enters the background, immediately close the socket connection:\n```Swift\nfunc applicationWillResignActive(_ application: UIApplication) {\n    socketManager.disconnect()\n}\n```\nSecond, when using the background running mode in the application, handle the socket connection correctly.\n```Swift\nfunc application(_ application: UIApplication, performFetchWithCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void) {\n    if application.backgroundTimeRemaining < 60 {\n        socketManager.disconnect()\n    }\n    \n    // Execute background task here\n}\n\n```\nThe above code shows that when using Background Fetch, check the remaining background running time of the application, and close the socket connection if it is less than 1 minute.\n\nThird, use signal(SIGPIPE,SIG_IGN) to hand over SIGPIPE to the system, which sets SIGPIPE to SIG_IGN, making the client not execute the default operation, that is, not to exit.\n\n#### <font size=3 color=#4169E1> 11. Caused by Watch Dog Timeout </font> \n<strong>Problem analysis：</strong>   \nWatchdog Timeout is a monitoring mechanism built into the iOS system that checks whether the code executed by the application in the main thread exceeds the specified time. If it times out, the system automatically terminates the execution of the application to avoid a poor user experience caused by application freezes.\n\nWatchdog Timeout typically occurs during time-consuming operations such as network requests, IO operations, and large data processing. If these time-consuming operations are not handled correctly, it is easy to trigger Watchdog Timeout, leading to application crashes.\n\n<strong>Sample code：</strong>  \nFor example, executing the following code in the main thread may trigger a Watchdog timeout:\n```Swift\nfunc doHeavyWork() {\n    for i in 1...1000000000 {\n        // execute a large number of loop operations\n    }\n}\n```\n\n<strong>Recommended solution:：</strong>     \nFirst, put time-consuming operations in a separate thread to avoid occupying the main thread for too long, thereby avoiding the occurrence of Watchdog Timeout. You can use GCD or NSOperationQueue to implement this.\n\nSecond, use an asynchronous method to execute time-consuming operations and use an appropriate queue to manage the execution. For example, use DispatchQueue.global() to create a global queue, and then use the async method to asynchronously execute tasks. In addition, you can also use NSOperationQueue to manage tasks.         \n\nThird, use a timer or RunLoop to periodically execute time-consuming operations, and check whether the time exceeds the Watchdog Timeout setting before execution. If it times out, stop executing and put the task on hold until the next execution cycle.  \n\nFourth, if time-consuming operations must be performed in the main thread, you can use NSRunLoop to control the execution time and periodically call the run method to ensure that the Watchdog Timeout setting is not exceeded.\n\n\n#### <font size=3 color=gray>*Reference*</font>\n[1] <https://juejin.cn/post/6844903775203753997>\n[2] <https://juejin.cn/post/6978014329333350430>\n \n\n","slug":"iOS/01. Memory & Performance & Stability/01. Common Crash Scenarios","published":1,"updated":"2023-08-15T17:35:32.834Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr60004pvu0m3faud4gp","content":"<p><font color=gray size=2><em>It will take about 5 minutes to finish reading this article.</em></font></p>\n<h4 id=\"1-“Unrecognized-selector-sent-to-instance”\"><a href=\"#1-“Unrecognized-selector-sent-to-instance”\" class=\"headerlink\" title=\" 1. “Unrecognized selector sent to instance” \"></a><font size=3 color=#4169E1> 1. “Unrecognized selector sent to instance” </font></h4><p><strong>Problem analysis：</strong><br>“unrecognized selector sent to instance” is an Objective-C exception that indicates an attempt to call a method or message that does not exist. This exception usually occurs when: </p>\n<ul>\n<li>When using the performSelector: method, the specified method does not exist; </li>\n<li>When using KVO (key Value observation), the observed property does not exist; </li>\n<li>When using NSNotificationCenter, the monitored event does not exist; </li>\n<li>The specified method is not present when using NSInvocation (message invocation); </li>\n<li>When extending a class with a Category, methods are implemented directly in the implementation file instead of being declared in the header file;<br>And so on.</li>\n</ul>\n<p><strong>Sample code：</strong></p>\n<details>\n<summary>Objective-C</summary>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@interface</span> <span class=\"type\">MyClass</span> : <span class=\"type\">NSObject</span></span><br><span class=\"line\"><span class=\"operator\">-</span> (void)doSomething;</span><br><span class=\"line\"><span class=\"meta\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@implementation</span> <span class=\"type\">MyClass</span></span><br><span class=\"line\"><span class=\"meta\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@interface</span> <span class=\"type\">MyOtherClass</span> : <span class=\"type\">NSObject</span></span><br><span class=\"line\"><span class=\"meta\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@implementation</span> <span class=\"type\">MyOtherClass</span></span><br><span class=\"line\"><span class=\"operator\">-</span> (void)doSomethingElse &#123;</span><br><span class=\"line\">    <span class=\"type\">NSLog</span>(@<span class=\"string\">&quot;Doing something else...&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, const char <span class=\"operator\">*</span> argv[]) &#123;</span><br><span class=\"line\">    <span class=\"meta\">@autoreleasepool</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">MyClass</span> <span class=\"operator\">*</span>object <span class=\"operator\">=</span> [[<span class=\"type\">MyClass</span> alloc] <span class=\"keyword\">init</span>];</span><br><span class=\"line\">        <span class=\"comment\">// unrecognized selector sent to instance</span></span><br><span class=\"line\">        [object performSelector:<span class=\"meta\">@selector</span>(doSomethingElse)]; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</details>\n\n<p><strong>Recommended solution:：</strong>     </p>\n<ul>\n<li>Use the “respondsToSelector” judgment before calling, or use ProtocolKit in Release mode to add a default implementation to the protocol to prevent crashes, and turn off the default implementation in Debug mode.</li>\n<li>Take advantage of the dynamic nature of OC and use several methods of message forwarding to underwrite the process.</li>\n</ul>\n<h4 id=\"2-“EXC-BAD-ACCESS”\"><a href=\"#2-“EXC-BAD-ACCESS”\" class=\"headerlink\" title=\" 2. “EXC_BAD_ACCESS” \"></a><font size=3 color=#4169E1> 2. “EXC_BAD_ACCESS” </font></h4><p><strong>Problem analysis：</strong><br>There are many reasons for the problem:</p>\n<ul>\n<li>Occurrence of hanging pointers (null pointers, wild pointers)</li>\n<li>Objects are not initialized</li>\n<li>The accessed object is freed</li>\n<li>Access to out-of-bounds collection elements<br>etc.</li>\n</ul>\n<p><strong>Sample code：</strong><br>Omitted.<br><strong>Recommended solution:：</strong>   </p>\n<ol>\n<li>turn on zombie mode in Debug phase and turn off zombie mode in Release.  </li>\n<li>use Xcode’s Address Sanitizer to check address access out of bounds.  </li>\n<li>remember to initialize when creating objects.  </li>\n<li>use the correct modifier for the object’s attributes (should use strong&#x2F;weak, misused assign).   </li>\n<li>call block and other objects before the time to make a judgment.</li>\n</ol>\n<h4 id=\"3-Caused-by-Collection-Related\"><a href=\"#3-Caused-by-Collection-Related\" class=\"headerlink\" title=\" 3. Caused by Collection Related \"></a><font size=3 color=#4169E1> 3. Caused by Collection Related </font></h4><p><strong>Problem analysis：</strong><br>There are also many scenarios that lead to Crash.   </p>\n<ol>\n<li>Array out-of-bounds, where the access subscript is greater than the number of arrays.   </li>\n<li>Adding empty data to the array.     </li>\n<li>Multi-threaded environment, a thread is reading, a thread is removing.        </li>\n<li>Multi-threaded operation of variable arrays (expansion of arrays, access to zombie objects).</li>\n</ol>\n<p><strong>Sample code：</strong>  </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Accessing an array out of bounds will cause a crash</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> array <span class=\"operator\">=</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> item <span class=\"operator\">=</span> array[<span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Forcibly unwrapping an optional type and it&#x27;s value is nil will cause a crash</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> dict: [<span class=\"type\">String</span>: <span class=\"type\">String</span>?] <span class=\"operator\">=</span> [<span class=\"string\">&quot;key1&quot;</span>: <span class=\"string\">&quot;value1&quot;</span>, <span class=\"string\">&quot;key2&quot;</span>: <span class=\"string\">&quot;value2&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> value <span class=\"operator\">=</span> dict[<span class=\"string\">&quot;key1&quot;</span>]<span class=\"operator\">!</span> </span><br></pre></td></tr></table></figure>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Forcibly unwrapping an optional type and it&#x27;s value is nil will cause a crash</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"keyword\">set</span>: <span class=\"type\">Set</span>&lt;<span class=\"type\">String</span>?&gt; <span class=\"operator\">=</span> [<span class=\"string\">&quot;value1&quot;</span>, <span class=\"string\">&quot;value2&quot;</span>, <span class=\"literal\">nil</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> value <span class=\"operator\">=</span> <span class=\"keyword\">set</span>.first<span class=\"operator\">!</span>  </span><br></pre></td></tr></table></figure>\n\n<p><strong>Recommended solution:：</strong>  </p>\n<ol>\n<li>When using dictionaries and sets, check whether the keys and values are nil (use guard, if let, and other syntax to avoid crashes caused by forced unwrapping);</li>\n<li>Use extensions to override original methods and perform checks internally;</li>\n<li>In Objective-C, use Runtime mechanism to replace original methods with custom secure methods;</li>\n<li>When performing multi-threaded operations on arrays, ensure the atomicity of read and write operations, such as locking or other protective measures.</li>\n</ol>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Use the safe subscript extension provided by Swift to avoid accessing an array out of bounds.</span></span><br><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">Collection</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">subscript</span>(<span class=\"params\">safe</span> <span class=\"params\">index</span>: <span class=\"type\">Index</span>) -&gt; <span class=\"type\">Element</span>? &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> indices.contains(index) <span class=\"operator\">?</span> <span class=\"keyword\">self</span>[index] : <span class=\"literal\">nil</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> array <span class=\"operator\">=</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> item <span class=\"operator\">=</span> array[safe: <span class=\"number\">3</span>] <span class=\"comment\">//It will not cause a crash, and the resulting value will be nil.</span></span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"4-“Out-of-Memory”\"><a href=\"#4-“Out-of-Memory”\" class=\"headerlink\" title=\" 4. “Out of Memory” \"></a><font size=3 color=#4169E1> 4. “Out of Memory” </font></h4><p><strong>Problem analysis：</strong><br>In iOS applications, if the application allocates too much memory and causes the system to run out of memory, an OOM error will occur. Each application on an iOS device has its own memory limit. When an application needs to allocate more memory, if there is not enough available memory, the system will automatically trigger an OOM error, terminate the application, and release it from memory.</p>\n<p>The causes of OOM errors may include:</p>\n<ol>\n<li>The application tries to allocate a large amount of memory when there is not enough memory available.</li>\n<li>Memory leaks in the application that cause high memory usage.</li>\n<li>The application’s memory usage is not compatible with system resources, resulting in high memory usage, etc.</li>\n</ol>\n<p><strong>Sample code：</strong>  </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array <span class=\"operator\">=</span> [<span class=\"type\">Int</span>]()</span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">true</span> &#123;</span><br><span class=\"line\">    array.append(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Recommended solution:：</strong>  </p>\n<p>To avoid OOM errors, the following measures can be taken:</p>\n<ol>\n<li>Use appropriate data structures to avoid unnecessary memory usage.</li>\n<li>Debug memory leaks.</li>\n<li>Release unnecessary memory in a timely manner, such as calling autoreleasepool to release it after using a large memory object.</li>\n<li>Reduce object creation. Object pool and other technologies can be used to reuse existing objects rather than frequently creating and destroying objects.</li>\n<li>For large memory objects, lazy-loading and other technologies can be used to load them only when needed to reduce memory usage.</li>\n</ol>\n<h4 id=\"5-“Type-Cast-Exception”or-“Type-Mismatch”\"><a href=\"#5-“Type-Cast-Exception”or-“Type-Mismatch”\" class=\"headerlink\" title=\" 5. “Type Cast Exception”or “Type Mismatch” \"></a><font size=3 color=#4169E1> 5. “Type Cast Exception”or “Type Mismatch” </font></h4><p><strong>Problem analysis：</strong><br>Type Cast Exception or Type Mismatch refers to the exception that occurs during type conversion, leading to application crash. In iOS development, common scenarios include:</p>\n<ol>\n<li>Type mismatch occurs when converting an instance of one type to an instance of another type.</li>\n<li>Type mismatch occurs when converting from AnyObject to a specific type.</li>\n<li>Crash occurs when forcing the unwrapping of an optional type to a non-optional type with a nil value.</li>\n</ol>\n<p><strong>Sample code：</strong>  </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> array: [<span class=\"keyword\">Any</span>] <span class=\"operator\">=</span> [<span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;B&quot;</span>, <span class=\"string\">&quot;C&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> str <span class=\"operator\">=</span> array[<span class=\"number\">0</span>] <span class=\"keyword\">as!</span> <span class=\"type\">Int</span></span><br><span class=\"line\"><span class=\"comment\">//Error: Could not cast value of type &#x27;Swift.String&#x27; (0x7ff8553bc178) to &#x27;Swift.Int&#x27; (0x7ff8553be0e0).</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>Recommended solution:：</strong>  </p>\n<ol>\n<li>Before performing type conversion, check if the object is an instance of the target type using the is keyword.</li>\n<li>Use optional binding to avoid exceptions when typecasting.</li>\n</ol>\n<p>For example, in the above example, the following code can be used for improvement:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> array: [<span class=\"keyword\">Any</span>] <span class=\"operator\">=</span> [<span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;B&quot;</span>, <span class=\"string\">&quot;C&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> obj <span class=\"operator\">=</span> array[<span class=\"number\">0</span>] <span class=\"keyword\">as?</span> <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-Caused-by-Deadlock\"><a href=\"#6-Caused-by-Deadlock\" class=\"headerlink\" title=\" 6. Caused by Deadlock \"></a><font size=3 color=#4169E1> 6. Caused by Deadlock </font></h4><p><strong>Problem analysis：</strong><br>Deadlock refers to a situation where two or more threads are waiting for each other to complete their operations, causing the program to become unresponsive. In iOS, the most common cause of a deadlock is when a synchronous operation is executed on the main thread that waits for another thread to complete, while the other thread is also waiting for the main thread to complete, resulting in a deadlock.</p>\n<p><strong>Sample code：</strong><br>In the following code, when the main thread calls the queue.sync method, it waits for the completion of Block 1. However, Block 1 calls queue.sync again, causing the thread to enter a waiting state. Since Block 2 depends on the thread to release the lock before it can execute, the entire program is in a deadlock state and cannot continue executing.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> queue <span class=\"operator\">=</span> <span class=\"type\">DispatchQueue</span>(label: <span class=\"string\">&quot;com.example.queue&quot;</span>)</span><br><span class=\"line\">queue.sync &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Block 1&quot;</span>)</span><br><span class=\"line\">    queue.sync &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Block 2&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Done&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<img src=\"/assets/iOS/Memory&Performance&Stability/001.png\" class=\"\">\n\n<p><strong>Recommended solution:：</strong> </p>\n<ol>\n<li>Avoid executing long synchronous operations on the main thread, and instead, perform them on a background thread.</li>\n<li>Avoid using synchronous operations that wait for each other on the same queue and use asynchronous operations instead.</li>\n<li>Avoid using synchronous operations on multiple queues that cause deadlocks. Use asynchronous operations instead or use techniques such as dispatch_group to solve the issue.</li>\n</ol>\n<p>In the above example, you can replace the synchronous operations with asynchronous operations, as shown below:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> queue <span class=\"operator\">=</span> <span class=\"type\">DispatchQueue</span>(label: <span class=\"string\">&quot;com.example.queue&quot;</span>)</span><br><span class=\"line\">queue.async &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Block 1&quot;</span>)</span><br><span class=\"line\">    queue.async &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Block 2&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Done&quot;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"7-Caused-by-Stack-Overflow\"><a href=\"#7-Caused-by-Stack-Overflow\" class=\"headerlink\" title=\" 7. Caused by Stack Overflow \"></a><font size=3 color=#4169E1> 7. Caused by Stack Overflow </font></h4><p><strong>Problem analysis：</strong><br>Stack Overflow usually occurs in recursive calls. If the recursion does not have a termination condition or the termination condition is incorrect, the recursion depth will continue to increase until the stack space is exhausted, causing a stack overflow. </p>\n<p>In addition, if one method calls another method, a deep call stack can also cause a stack overflow.         </p>\n<p><strong>Sample code：</strong>  </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">recursiveFunction</span>() &#123;</span><br><span class=\"line\">    recursiveFunction()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">recursiveFunction() </span><br></pre></td></tr></table></figure>\n<p><strong>Recommended solution:：</strong>  </p>\n<ol>\n<li>Optimize algorithms: Optimize recursive algorithms to reduce the depth of the call stack. For example, use iterative instead of recursive algorithms.</li>\n<li>Increase stack space: Increase available stack space by changing the thread stack size or using the dispatch_set_concurrency function of GCD.</li>\n<li>Reduce stack space usage: Reduce stack space usage by reducing the local variables allocated during function calls, reducing nested calls, or using tail recursion and other techniques.</li>\n<li>Use tail recursion: Tail recursion refers to the last operation in a recursive function being a recursive call to itself. In Swift, you can use the @_optimize(speed) and @_optimize(safety) attributes to mark functions so that the compiler can optimize tail recursion.</li>\n<li>Avoid infinite recursion: Ensure that the recursive algorithm has the correct termination condition; otherwise, the recursion depth will increase infinitely, eventually leading to a stack overflow.</li>\n<li>Use data structures with smaller stack space: For large-scale recursive algorithms, data structures with smaller stack space, such as linked lists or queues, can be used.</li>\n</ol>\n<h4 id=\"8-Caused-by-KVO\"><a href=\"#8-Caused-by-KVO\" class=\"headerlink\" title=\" 8. Caused by KVO \"></a><font size=3 color=#4169E1> 8. Caused by KVO </font></h4><p><strong>Problem analysis：</strong><br>KVO (Key-Value Observing) is an observer pattern in the Cocoa framework that allows objects to be notified when the value of another object’s property changes. When using KVO, if observers are not removed in a timely manner or the observer object has already been released, it can cause a crash.<br><strong>Sample code：</strong><br>Omitted.（Objective-C）<br><strong>Recommended solution:：</strong>  </p>\n<ol>\n<li>Remove the observer in a timely manner and ensure the observer object exists.</li>\n<li>Best practices for using KVO:    <ul>\n<li>Use KVO only when necessary to avoid overuse;   </li>\n<li>Use Swift’s Property Observers instead of KVO;  </li>\n<li>Use closures or Notification Center instead of KVO;     </li>\n<li>Use the correct method when removing observers to avoid omissions;  </li>\n<li>Avoid using strings as keyPaths. Instead, use static variables or constants, or use the #keyPath() method introduced in Swift 4 to obtain the keyPath.</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"9-Caused-by-Multi-threaded\"><a href=\"#9-Caused-by-Multi-threaded\" class=\"headerlink\" title=\" 9. Caused by Multi-threaded \"></a><font size=3 color=#4169E1> 9. Caused by Multi-threaded </font></h4><p><strong>Problem analysis：</strong><br>Crashes caused by multi-threading are a common issue in iOS, which may occur in different scenarios. Here are some possible scenarios, sample code, and recommended solutions that may cause multi-threading crashes:</p>\n<ol>\n<li>Multiple threads accessing the same shared data structure or variable without synchronization or locking.</li>\n<li>Using unsafe data structures or APIs in a multi-threaded environment, such as using non-thread-safe mutable collection class Array.</li>\n<li>Calling a long-running operation (such as network requests or I&#x2F;O operations) in a thread, causing the UI thread to be blocked.</li>\n<li>Updating the UI in a sub-thread.</li>\n</ol>\n<p>In general, the crash caused by multi-threading will receive a SIGSEGV signal, indicating that an attempt was made to access memory that was not allocated to oneself or to write data to a memory address without write permission.</p>\n<p><strong>Sample code：</strong><br>The following is a simple sample code that demonstrates the scenarios and issues caused by multi-threading crashes:  </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array <span class=\"operator\">=</span> [<span class=\"type\">Int</span>]()</span><br><span class=\"line\"><span class=\"type\">DispatchQueue</span>.global().async &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">0</span><span class=\"operator\">..&lt;</span><span class=\"number\">100</span> &#123;</span><br><span class=\"line\">        array.append(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">DispatchQueue</span>.global().async &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">100</span><span class=\"operator\">..&lt;</span><span class=\"number\">200</span> &#123;</span><br><span class=\"line\">        array.append(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>After running it, the crash occurs:</p>\n<img src=\"/assets/iOS/Memory&Performance&Stability/002.jpeg\" class=\"\">\n\n<p><strong>Recommended solution:：</strong>  </p>\n<p>Here are three possible recommended solutions that can help you avoid multi-threading crashes:</p>\n<ol>\n<li><p>Use thread-safe data structures or APIs, such as using NSLock or dispatch_semaphore_t to synchronize.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> lock <span class=\"operator\">=</span> <span class=\"type\">NSLock</span>()</span><br><span class=\"line\"><span class=\"type\">DispatchQueue</span>.global().async &#123;</span><br><span class=\"line\">    lock.lock()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">0</span><span class=\"operator\">..&lt;</span><span class=\"number\">100</span> &#123;</span><br><span class=\"line\">        array.append(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    lock.unlock()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">DispatchQueue</span>.global().async &#123;</span><br><span class=\"line\">    lock.lock()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">100</span><span class=\"operator\">..&lt;</span><span class=\"number\">200</span> &#123;</span><br><span class=\"line\">        array.append(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    lock.unlock()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>Use GCD for inter-thread communication and avoid long-running operations on the main thread.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">DispatchQueue</span>.global().async &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> data <span class=\"operator\">=</span> getData() <span class=\"comment\">// long-running operation</span></span><br><span class=\"line\">    <span class=\"type\">DispatchQueue</span>.main.async &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.updateUI(with: data) <span class=\"comment\">// update UI on the main thread</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The above code performs a long-running operation on the background thread and uses GCD to send the result to the main thread to update the UI.</p>\n</li>\n<li><p>Use a serial queue to ensure that operations on the same object are executed in order.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> serialQueue <span class=\"operator\">=</span> <span class=\"type\">DispatchQueue</span>(label: <span class=\"string\">&quot;com.example.serialQueue&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">serialQueue.async &#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.updateUI(with: data1) <span class=\"comment\">// operation 1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">serialQueue.async &#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.updateUI(with: data2) <span class=\"comment\">// operation 2</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"10-Caused-by-Long-connection-of-Socket\"><a href=\"#10-Caused-by-Long-connection-of-Socket\" class=\"headerlink\" title=\" 10. Caused by Long connection of Socket \"></a><font size=3 color=#4169E1> 10. Caused by Long connection of Socket </font></h4><p><strong>Problem analysis：</strong><br>When the server closes a connection, if the client continues to send data, according to the TCP protocol, it will receive an RST response. When the client sends data to this server again, the system will send a SIGPIPE signal to the process, telling the process that the connection has been disconnected and not to write anymore. According to the default signal handling rules, the default action of the SIGPIPE signal is to terminate or exit. Therefore, the client will exit.</p>\n<p><strong>Sample code：</strong>  </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SocketManager</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> inputStream: <span class=\"type\">InputStream</span>?</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> outputStream: <span class=\"type\">OutputStream</span>?</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">let</span> host: <span class=\"type\">String</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;localhost&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">let</span> port: <span class=\"type\">Int</span> <span class=\"operator\">=</span> <span class=\"number\">12345</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">connect</span>() &#123;</span><br><span class=\"line\">        <span class=\"type\">Stream</span>.getStreamsToHost(withName: host, port: port, inputStream: <span class=\"operator\">&amp;</span>inputStream, outputStream: <span class=\"operator\">&amp;</span>outputStream)</span><br><span class=\"line\">        </span><br><span class=\"line\">        inputStream<span class=\"operator\">?</span>.open()</span><br><span class=\"line\">        outputStream<span class=\"operator\">?</span>.open()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">disconnect</span>() &#123;</span><br><span class=\"line\">        inputStream<span class=\"operator\">?</span>.close()</span><br><span class=\"line\">        outputStream<span class=\"operator\">?</span>.close()</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Recommended solution:：</strong><br>Here are three possible recommended solutions to avoid the crash caused by long connections of sockets:</p>\n<p>First, when the application enters the background, immediately close the socket connection:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">applicationWillResignActive</span>(<span class=\"keyword\">_</span> <span class=\"params\">application</span>: <span class=\"type\">UIApplication</span>) &#123;</span><br><span class=\"line\">    socketManager.disconnect()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Second, when using the background running mode in the application, handle the socket connection correctly.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">application</span>(<span class=\"keyword\">_</span> <span class=\"params\">application</span>: <span class=\"type\">UIApplication</span>, <span class=\"params\">performFetchWithCompletionHandler</span> <span class=\"params\">completionHandler</span>: <span class=\"keyword\">@escaping</span> (<span class=\"type\">UIBackgroundFetchResult</span>) -&gt; <span class=\"type\">Void</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> application.backgroundTimeRemaining <span class=\"operator\">&lt;</span> <span class=\"number\">60</span> &#123;</span><br><span class=\"line\">        socketManager.disconnect()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Execute background task here</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>The above code shows that when using Background Fetch, check the remaining background running time of the application, and close the socket connection if it is less than 1 minute.</p>\n<p>Third, use signal(SIGPIPE,SIG_IGN) to hand over SIGPIPE to the system, which sets SIGPIPE to SIG_IGN, making the client not execute the default operation, that is, not to exit.</p>\n<h4 id=\"11-Caused-by-Watch-Dog-Timeout\"><a href=\"#11-Caused-by-Watch-Dog-Timeout\" class=\"headerlink\" title=\" 11. Caused by Watch Dog Timeout \"></a><font size=3 color=#4169E1> 11. Caused by Watch Dog Timeout </font></h4><p><strong>Problem analysis：</strong><br>Watchdog Timeout is a monitoring mechanism built into the iOS system that checks whether the code executed by the application in the main thread exceeds the specified time. If it times out, the system automatically terminates the execution of the application to avoid a poor user experience caused by application freezes.</p>\n<p>Watchdog Timeout typically occurs during time-consuming operations such as network requests, IO operations, and large data processing. If these time-consuming operations are not handled correctly, it is easy to trigger Watchdog Timeout, leading to application crashes.</p>\n<p><strong>Sample code：</strong><br>For example, executing the following code in the main thread may trigger a Watchdog timeout:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">doHeavyWork</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">1</span><span class=\"operator\">...</span><span class=\"number\">1000000000</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// execute a large number of loop operations</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Recommended solution:：</strong><br>First, put time-consuming operations in a separate thread to avoid occupying the main thread for too long, thereby avoiding the occurrence of Watchdog Timeout. You can use GCD or NSOperationQueue to implement this.</p>\n<p>Second, use an asynchronous method to execute time-consuming operations and use an appropriate queue to manage the execution. For example, use DispatchQueue.global() to create a global queue, and then use the async method to asynchronously execute tasks. In addition, you can also use NSOperationQueue to manage tasks.         </p>\n<p>Third, use a timer or RunLoop to periodically execute time-consuming operations, and check whether the time exceeds the Watchdog Timeout setting before execution. If it times out, stop executing and put the task on hold until the next execution cycle.  </p>\n<p>Fourth, if time-consuming operations must be performed in the main thread, you can use NSRunLoop to control the execution time and periodically call the run method to ensure that the Watchdog Timeout setting is not exceeded.</p>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://juejin.cn/post/6844903775203753997\">https://juejin.cn/post/6844903775203753997</a><br>[2] <a href=\"https://juejin.cn/post/6978014329333350430\">https://juejin.cn/post/6978014329333350430</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 5 minutes to finish reading this article.</em></font></p>\n<h4 id=\"1-“Unrecognized-selector-sent-to-instance”\"><a href=\"#1-“Unrecognized-selector-sent-to-instance”\" class=\"headerlink\" title=\" 1. “Unrecognized selector sent to instance” \"></a><font size=3 color=#4169E1> 1. “Unrecognized selector sent to instance” </font></h4><p><strong>Problem analysis：</strong><br>“unrecognized selector sent to instance” is an Objective-C exception that indicates an attempt to call a method or message that does not exist. This exception usually occurs when: </p>\n<ul>\n<li>When using the performSelector: method, the specified method does not exist; </li>\n<li>When using KVO (key Value observation), the observed property does not exist; </li>\n<li>When using NSNotificationCenter, the monitored event does not exist; </li>\n<li>The specified method is not present when using NSInvocation (message invocation); </li>\n<li>When extending a class with a Category, methods are implemented directly in the implementation file instead of being declared in the header file;<br>And so on.</li>\n</ul>\n<p><strong>Sample code：</strong></p>\n<details>\n<summary>Objective-C</summary>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@interface</span> <span class=\"type\">MyClass</span> : <span class=\"type\">NSObject</span></span><br><span class=\"line\"><span class=\"operator\">-</span> (void)doSomething;</span><br><span class=\"line\"><span class=\"meta\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@implementation</span> <span class=\"type\">MyClass</span></span><br><span class=\"line\"><span class=\"meta\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@interface</span> <span class=\"type\">MyOtherClass</span> : <span class=\"type\">NSObject</span></span><br><span class=\"line\"><span class=\"meta\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@implementation</span> <span class=\"type\">MyOtherClass</span></span><br><span class=\"line\"><span class=\"operator\">-</span> (void)doSomethingElse &#123;</span><br><span class=\"line\">    <span class=\"type\">NSLog</span>(@<span class=\"string\">&quot;Doing something else...&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, const char <span class=\"operator\">*</span> argv[]) &#123;</span><br><span class=\"line\">    <span class=\"meta\">@autoreleasepool</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">MyClass</span> <span class=\"operator\">*</span>object <span class=\"operator\">=</span> [[<span class=\"type\">MyClass</span> alloc] <span class=\"keyword\">init</span>];</span><br><span class=\"line\">        <span class=\"comment\">// unrecognized selector sent to instance</span></span><br><span class=\"line\">        [object performSelector:<span class=\"meta\">@selector</span>(doSomethingElse)]; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</details>\n\n<p><strong>Recommended solution:：</strong>     </p>\n<ul>\n<li>Use the “respondsToSelector” judgment before calling, or use ProtocolKit in Release mode to add a default implementation to the protocol to prevent crashes, and turn off the default implementation in Debug mode.</li>\n<li>Take advantage of the dynamic nature of OC and use several methods of message forwarding to underwrite the process.</li>\n</ul>\n<h4 id=\"2-“EXC-BAD-ACCESS”\"><a href=\"#2-“EXC-BAD-ACCESS”\" class=\"headerlink\" title=\" 2. “EXC_BAD_ACCESS” \"></a><font size=3 color=#4169E1> 2. “EXC_BAD_ACCESS” </font></h4><p><strong>Problem analysis：</strong><br>There are many reasons for the problem:</p>\n<ul>\n<li>Occurrence of hanging pointers (null pointers, wild pointers)</li>\n<li>Objects are not initialized</li>\n<li>The accessed object is freed</li>\n<li>Access to out-of-bounds collection elements<br>etc.</li>\n</ul>\n<p><strong>Sample code：</strong><br>Omitted.<br><strong>Recommended solution:：</strong>   </p>\n<ol>\n<li>turn on zombie mode in Debug phase and turn off zombie mode in Release.  </li>\n<li>use Xcode’s Address Sanitizer to check address access out of bounds.  </li>\n<li>remember to initialize when creating objects.  </li>\n<li>use the correct modifier for the object’s attributes (should use strong&#x2F;weak, misused assign).   </li>\n<li>call block and other objects before the time to make a judgment.</li>\n</ol>\n<h4 id=\"3-Caused-by-Collection-Related\"><a href=\"#3-Caused-by-Collection-Related\" class=\"headerlink\" title=\" 3. Caused by Collection Related \"></a><font size=3 color=#4169E1> 3. Caused by Collection Related </font></h4><p><strong>Problem analysis：</strong><br>There are also many scenarios that lead to Crash.   </p>\n<ol>\n<li>Array out-of-bounds, where the access subscript is greater than the number of arrays.   </li>\n<li>Adding empty data to the array.     </li>\n<li>Multi-threaded environment, a thread is reading, a thread is removing.        </li>\n<li>Multi-threaded operation of variable arrays (expansion of arrays, access to zombie objects).</li>\n</ol>\n<p><strong>Sample code：</strong>  </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Accessing an array out of bounds will cause a crash</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> array <span class=\"operator\">=</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> item <span class=\"operator\">=</span> array[<span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Forcibly unwrapping an optional type and it&#x27;s value is nil will cause a crash</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> dict: [<span class=\"type\">String</span>: <span class=\"type\">String</span>?] <span class=\"operator\">=</span> [<span class=\"string\">&quot;key1&quot;</span>: <span class=\"string\">&quot;value1&quot;</span>, <span class=\"string\">&quot;key2&quot;</span>: <span class=\"string\">&quot;value2&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> value <span class=\"operator\">=</span> dict[<span class=\"string\">&quot;key1&quot;</span>]<span class=\"operator\">!</span> </span><br></pre></td></tr></table></figure>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Forcibly unwrapping an optional type and it&#x27;s value is nil will cause a crash</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"keyword\">set</span>: <span class=\"type\">Set</span>&lt;<span class=\"type\">String</span>?&gt; <span class=\"operator\">=</span> [<span class=\"string\">&quot;value1&quot;</span>, <span class=\"string\">&quot;value2&quot;</span>, <span class=\"literal\">nil</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> value <span class=\"operator\">=</span> <span class=\"keyword\">set</span>.first<span class=\"operator\">!</span>  </span><br></pre></td></tr></table></figure>\n\n<p><strong>Recommended solution:：</strong>  </p>\n<ol>\n<li>When using dictionaries and sets, check whether the keys and values are nil (use guard, if let, and other syntax to avoid crashes caused by forced unwrapping);</li>\n<li>Use extensions to override original methods and perform checks internally;</li>\n<li>In Objective-C, use Runtime mechanism to replace original methods with custom secure methods;</li>\n<li>When performing multi-threaded operations on arrays, ensure the atomicity of read and write operations, such as locking or other protective measures.</li>\n</ol>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Use the safe subscript extension provided by Swift to avoid accessing an array out of bounds.</span></span><br><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">Collection</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">subscript</span>(<span class=\"params\">safe</span> <span class=\"params\">index</span>: <span class=\"type\">Index</span>) -&gt; <span class=\"type\">Element</span>? &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> indices.contains(index) <span class=\"operator\">?</span> <span class=\"keyword\">self</span>[index] : <span class=\"literal\">nil</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> array <span class=\"operator\">=</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> item <span class=\"operator\">=</span> array[safe: <span class=\"number\">3</span>] <span class=\"comment\">//It will not cause a crash, and the resulting value will be nil.</span></span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"4-“Out-of-Memory”\"><a href=\"#4-“Out-of-Memory”\" class=\"headerlink\" title=\" 4. “Out of Memory” \"></a><font size=3 color=#4169E1> 4. “Out of Memory” </font></h4><p><strong>Problem analysis：</strong><br>In iOS applications, if the application allocates too much memory and causes the system to run out of memory, an OOM error will occur. Each application on an iOS device has its own memory limit. When an application needs to allocate more memory, if there is not enough available memory, the system will automatically trigger an OOM error, terminate the application, and release it from memory.</p>\n<p>The causes of OOM errors may include:</p>\n<ol>\n<li>The application tries to allocate a large amount of memory when there is not enough memory available.</li>\n<li>Memory leaks in the application that cause high memory usage.</li>\n<li>The application’s memory usage is not compatible with system resources, resulting in high memory usage, etc.</li>\n</ol>\n<p><strong>Sample code：</strong>  </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array <span class=\"operator\">=</span> [<span class=\"type\">Int</span>]()</span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">true</span> &#123;</span><br><span class=\"line\">    array.append(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Recommended solution:：</strong>  </p>\n<p>To avoid OOM errors, the following measures can be taken:</p>\n<ol>\n<li>Use appropriate data structures to avoid unnecessary memory usage.</li>\n<li>Debug memory leaks.</li>\n<li>Release unnecessary memory in a timely manner, such as calling autoreleasepool to release it after using a large memory object.</li>\n<li>Reduce object creation. Object pool and other technologies can be used to reuse existing objects rather than frequently creating and destroying objects.</li>\n<li>For large memory objects, lazy-loading and other technologies can be used to load them only when needed to reduce memory usage.</li>\n</ol>\n<h4 id=\"5-“Type-Cast-Exception”or-“Type-Mismatch”\"><a href=\"#5-“Type-Cast-Exception”or-“Type-Mismatch”\" class=\"headerlink\" title=\" 5. “Type Cast Exception”or “Type Mismatch” \"></a><font size=3 color=#4169E1> 5. “Type Cast Exception”or “Type Mismatch” </font></h4><p><strong>Problem analysis：</strong><br>Type Cast Exception or Type Mismatch refers to the exception that occurs during type conversion, leading to application crash. In iOS development, common scenarios include:</p>\n<ol>\n<li>Type mismatch occurs when converting an instance of one type to an instance of another type.</li>\n<li>Type mismatch occurs when converting from AnyObject to a specific type.</li>\n<li>Crash occurs when forcing the unwrapping of an optional type to a non-optional type with a nil value.</li>\n</ol>\n<p><strong>Sample code：</strong>  </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> array: [<span class=\"keyword\">Any</span>] <span class=\"operator\">=</span> [<span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;B&quot;</span>, <span class=\"string\">&quot;C&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> str <span class=\"operator\">=</span> array[<span class=\"number\">0</span>] <span class=\"keyword\">as!</span> <span class=\"type\">Int</span></span><br><span class=\"line\"><span class=\"comment\">//Error: Could not cast value of type &#x27;Swift.String&#x27; (0x7ff8553bc178) to &#x27;Swift.Int&#x27; (0x7ff8553be0e0).</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>Recommended solution:：</strong>  </p>\n<ol>\n<li>Before performing type conversion, check if the object is an instance of the target type using the is keyword.</li>\n<li>Use optional binding to avoid exceptions when typecasting.</li>\n</ol>\n<p>For example, in the above example, the following code can be used for improvement:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> array: [<span class=\"keyword\">Any</span>] <span class=\"operator\">=</span> [<span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;B&quot;</span>, <span class=\"string\">&quot;C&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> obj <span class=\"operator\">=</span> array[<span class=\"number\">0</span>] <span class=\"keyword\">as?</span> <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-Caused-by-Deadlock\"><a href=\"#6-Caused-by-Deadlock\" class=\"headerlink\" title=\" 6. Caused by Deadlock \"></a><font size=3 color=#4169E1> 6. Caused by Deadlock </font></h4><p><strong>Problem analysis：</strong><br>Deadlock refers to a situation where two or more threads are waiting for each other to complete their operations, causing the program to become unresponsive. In iOS, the most common cause of a deadlock is when a synchronous operation is executed on the main thread that waits for another thread to complete, while the other thread is also waiting for the main thread to complete, resulting in a deadlock.</p>\n<p><strong>Sample code：</strong><br>In the following code, when the main thread calls the queue.sync method, it waits for the completion of Block 1. However, Block 1 calls queue.sync again, causing the thread to enter a waiting state. Since Block 2 depends on the thread to release the lock before it can execute, the entire program is in a deadlock state and cannot continue executing.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> queue <span class=\"operator\">=</span> <span class=\"type\">DispatchQueue</span>(label: <span class=\"string\">&quot;com.example.queue&quot;</span>)</span><br><span class=\"line\">queue.sync &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Block 1&quot;</span>)</span><br><span class=\"line\">    queue.sync &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Block 2&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Done&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<img src=\"/assets/iOS/Memory&Performance&Stability/001.png\" class=\"\">\n\n<p><strong>Recommended solution:：</strong> </p>\n<ol>\n<li>Avoid executing long synchronous operations on the main thread, and instead, perform them on a background thread.</li>\n<li>Avoid using synchronous operations that wait for each other on the same queue and use asynchronous operations instead.</li>\n<li>Avoid using synchronous operations on multiple queues that cause deadlocks. Use asynchronous operations instead or use techniques such as dispatch_group to solve the issue.</li>\n</ol>\n<p>In the above example, you can replace the synchronous operations with asynchronous operations, as shown below:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> queue <span class=\"operator\">=</span> <span class=\"type\">DispatchQueue</span>(label: <span class=\"string\">&quot;com.example.queue&quot;</span>)</span><br><span class=\"line\">queue.async &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Block 1&quot;</span>)</span><br><span class=\"line\">    queue.async &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Block 2&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Done&quot;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"7-Caused-by-Stack-Overflow\"><a href=\"#7-Caused-by-Stack-Overflow\" class=\"headerlink\" title=\" 7. Caused by Stack Overflow \"></a><font size=3 color=#4169E1> 7. Caused by Stack Overflow </font></h4><p><strong>Problem analysis：</strong><br>Stack Overflow usually occurs in recursive calls. If the recursion does not have a termination condition or the termination condition is incorrect, the recursion depth will continue to increase until the stack space is exhausted, causing a stack overflow. </p>\n<p>In addition, if one method calls another method, a deep call stack can also cause a stack overflow.         </p>\n<p><strong>Sample code：</strong>  </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">recursiveFunction</span>() &#123;</span><br><span class=\"line\">    recursiveFunction()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">recursiveFunction() </span><br></pre></td></tr></table></figure>\n<p><strong>Recommended solution:：</strong>  </p>\n<ol>\n<li>Optimize algorithms: Optimize recursive algorithms to reduce the depth of the call stack. For example, use iterative instead of recursive algorithms.</li>\n<li>Increase stack space: Increase available stack space by changing the thread stack size or using the dispatch_set_concurrency function of GCD.</li>\n<li>Reduce stack space usage: Reduce stack space usage by reducing the local variables allocated during function calls, reducing nested calls, or using tail recursion and other techniques.</li>\n<li>Use tail recursion: Tail recursion refers to the last operation in a recursive function being a recursive call to itself. In Swift, you can use the @_optimize(speed) and @_optimize(safety) attributes to mark functions so that the compiler can optimize tail recursion.</li>\n<li>Avoid infinite recursion: Ensure that the recursive algorithm has the correct termination condition; otherwise, the recursion depth will increase infinitely, eventually leading to a stack overflow.</li>\n<li>Use data structures with smaller stack space: For large-scale recursive algorithms, data structures with smaller stack space, such as linked lists or queues, can be used.</li>\n</ol>\n<h4 id=\"8-Caused-by-KVO\"><a href=\"#8-Caused-by-KVO\" class=\"headerlink\" title=\" 8. Caused by KVO \"></a><font size=3 color=#4169E1> 8. Caused by KVO </font></h4><p><strong>Problem analysis：</strong><br>KVO (Key-Value Observing) is an observer pattern in the Cocoa framework that allows objects to be notified when the value of another object’s property changes. When using KVO, if observers are not removed in a timely manner or the observer object has already been released, it can cause a crash.<br><strong>Sample code：</strong><br>Omitted.（Objective-C）<br><strong>Recommended solution:：</strong>  </p>\n<ol>\n<li>Remove the observer in a timely manner and ensure the observer object exists.</li>\n<li>Best practices for using KVO:    <ul>\n<li>Use KVO only when necessary to avoid overuse;   </li>\n<li>Use Swift’s Property Observers instead of KVO;  </li>\n<li>Use closures or Notification Center instead of KVO;     </li>\n<li>Use the correct method when removing observers to avoid omissions;  </li>\n<li>Avoid using strings as keyPaths. Instead, use static variables or constants, or use the #keyPath() method introduced in Swift 4 to obtain the keyPath.</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"9-Caused-by-Multi-threaded\"><a href=\"#9-Caused-by-Multi-threaded\" class=\"headerlink\" title=\" 9. Caused by Multi-threaded \"></a><font size=3 color=#4169E1> 9. Caused by Multi-threaded </font></h4><p><strong>Problem analysis：</strong><br>Crashes caused by multi-threading are a common issue in iOS, which may occur in different scenarios. Here are some possible scenarios, sample code, and recommended solutions that may cause multi-threading crashes:</p>\n<ol>\n<li>Multiple threads accessing the same shared data structure or variable without synchronization or locking.</li>\n<li>Using unsafe data structures or APIs in a multi-threaded environment, such as using non-thread-safe mutable collection class Array.</li>\n<li>Calling a long-running operation (such as network requests or I&#x2F;O operations) in a thread, causing the UI thread to be blocked.</li>\n<li>Updating the UI in a sub-thread.</li>\n</ol>\n<p>In general, the crash caused by multi-threading will receive a SIGSEGV signal, indicating that an attempt was made to access memory that was not allocated to oneself or to write data to a memory address without write permission.</p>\n<p><strong>Sample code：</strong><br>The following is a simple sample code that demonstrates the scenarios and issues caused by multi-threading crashes:  </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array <span class=\"operator\">=</span> [<span class=\"type\">Int</span>]()</span><br><span class=\"line\"><span class=\"type\">DispatchQueue</span>.global().async &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">0</span><span class=\"operator\">..&lt;</span><span class=\"number\">100</span> &#123;</span><br><span class=\"line\">        array.append(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">DispatchQueue</span>.global().async &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">100</span><span class=\"operator\">..&lt;</span><span class=\"number\">200</span> &#123;</span><br><span class=\"line\">        array.append(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>After running it, the crash occurs:</p>\n<img src=\"/assets/iOS/Memory&Performance&Stability/002.jpeg\" class=\"\">\n\n<p><strong>Recommended solution:：</strong>  </p>\n<p>Here are three possible recommended solutions that can help you avoid multi-threading crashes:</p>\n<ol>\n<li><p>Use thread-safe data structures or APIs, such as using NSLock or dispatch_semaphore_t to synchronize.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> lock <span class=\"operator\">=</span> <span class=\"type\">NSLock</span>()</span><br><span class=\"line\"><span class=\"type\">DispatchQueue</span>.global().async &#123;</span><br><span class=\"line\">    lock.lock()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">0</span><span class=\"operator\">..&lt;</span><span class=\"number\">100</span> &#123;</span><br><span class=\"line\">        array.append(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    lock.unlock()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">DispatchQueue</span>.global().async &#123;</span><br><span class=\"line\">    lock.lock()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">100</span><span class=\"operator\">..&lt;</span><span class=\"number\">200</span> &#123;</span><br><span class=\"line\">        array.append(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    lock.unlock()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>Use GCD for inter-thread communication and avoid long-running operations on the main thread.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">DispatchQueue</span>.global().async &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> data <span class=\"operator\">=</span> getData() <span class=\"comment\">// long-running operation</span></span><br><span class=\"line\">    <span class=\"type\">DispatchQueue</span>.main.async &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.updateUI(with: data) <span class=\"comment\">// update UI on the main thread</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The above code performs a long-running operation on the background thread and uses GCD to send the result to the main thread to update the UI.</p>\n</li>\n<li><p>Use a serial queue to ensure that operations on the same object are executed in order.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> serialQueue <span class=\"operator\">=</span> <span class=\"type\">DispatchQueue</span>(label: <span class=\"string\">&quot;com.example.serialQueue&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">serialQueue.async &#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.updateUI(with: data1) <span class=\"comment\">// operation 1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">serialQueue.async &#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.updateUI(with: data2) <span class=\"comment\">// operation 2</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"10-Caused-by-Long-connection-of-Socket\"><a href=\"#10-Caused-by-Long-connection-of-Socket\" class=\"headerlink\" title=\" 10. Caused by Long connection of Socket \"></a><font size=3 color=#4169E1> 10. Caused by Long connection of Socket </font></h4><p><strong>Problem analysis：</strong><br>When the server closes a connection, if the client continues to send data, according to the TCP protocol, it will receive an RST response. When the client sends data to this server again, the system will send a SIGPIPE signal to the process, telling the process that the connection has been disconnected and not to write anymore. According to the default signal handling rules, the default action of the SIGPIPE signal is to terminate or exit. Therefore, the client will exit.</p>\n<p><strong>Sample code：</strong>  </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SocketManager</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> inputStream: <span class=\"type\">InputStream</span>?</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> outputStream: <span class=\"type\">OutputStream</span>?</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">let</span> host: <span class=\"type\">String</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;localhost&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">let</span> port: <span class=\"type\">Int</span> <span class=\"operator\">=</span> <span class=\"number\">12345</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">connect</span>() &#123;</span><br><span class=\"line\">        <span class=\"type\">Stream</span>.getStreamsToHost(withName: host, port: port, inputStream: <span class=\"operator\">&amp;</span>inputStream, outputStream: <span class=\"operator\">&amp;</span>outputStream)</span><br><span class=\"line\">        </span><br><span class=\"line\">        inputStream<span class=\"operator\">?</span>.open()</span><br><span class=\"line\">        outputStream<span class=\"operator\">?</span>.open()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">disconnect</span>() &#123;</span><br><span class=\"line\">        inputStream<span class=\"operator\">?</span>.close()</span><br><span class=\"line\">        outputStream<span class=\"operator\">?</span>.close()</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Recommended solution:：</strong><br>Here are three possible recommended solutions to avoid the crash caused by long connections of sockets:</p>\n<p>First, when the application enters the background, immediately close the socket connection:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">applicationWillResignActive</span>(<span class=\"keyword\">_</span> <span class=\"params\">application</span>: <span class=\"type\">UIApplication</span>) &#123;</span><br><span class=\"line\">    socketManager.disconnect()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Second, when using the background running mode in the application, handle the socket connection correctly.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">application</span>(<span class=\"keyword\">_</span> <span class=\"params\">application</span>: <span class=\"type\">UIApplication</span>, <span class=\"params\">performFetchWithCompletionHandler</span> <span class=\"params\">completionHandler</span>: <span class=\"keyword\">@escaping</span> (<span class=\"type\">UIBackgroundFetchResult</span>) -&gt; <span class=\"type\">Void</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> application.backgroundTimeRemaining <span class=\"operator\">&lt;</span> <span class=\"number\">60</span> &#123;</span><br><span class=\"line\">        socketManager.disconnect()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Execute background task here</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>The above code shows that when using Background Fetch, check the remaining background running time of the application, and close the socket connection if it is less than 1 minute.</p>\n<p>Third, use signal(SIGPIPE,SIG_IGN) to hand over SIGPIPE to the system, which sets SIGPIPE to SIG_IGN, making the client not execute the default operation, that is, not to exit.</p>\n<h4 id=\"11-Caused-by-Watch-Dog-Timeout\"><a href=\"#11-Caused-by-Watch-Dog-Timeout\" class=\"headerlink\" title=\" 11. Caused by Watch Dog Timeout \"></a><font size=3 color=#4169E1> 11. Caused by Watch Dog Timeout </font></h4><p><strong>Problem analysis：</strong><br>Watchdog Timeout is a monitoring mechanism built into the iOS system that checks whether the code executed by the application in the main thread exceeds the specified time. If it times out, the system automatically terminates the execution of the application to avoid a poor user experience caused by application freezes.</p>\n<p>Watchdog Timeout typically occurs during time-consuming operations such as network requests, IO operations, and large data processing. If these time-consuming operations are not handled correctly, it is easy to trigger Watchdog Timeout, leading to application crashes.</p>\n<p><strong>Sample code：</strong><br>For example, executing the following code in the main thread may trigger a Watchdog timeout:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">doHeavyWork</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">1</span><span class=\"operator\">...</span><span class=\"number\">1000000000</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// execute a large number of loop operations</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Recommended solution:：</strong><br>First, put time-consuming operations in a separate thread to avoid occupying the main thread for too long, thereby avoiding the occurrence of Watchdog Timeout. You can use GCD or NSOperationQueue to implement this.</p>\n<p>Second, use an asynchronous method to execute time-consuming operations and use an appropriate queue to manage the execution. For example, use DispatchQueue.global() to create a global queue, and then use the async method to asynchronously execute tasks. In addition, you can also use NSOperationQueue to manage tasks.         </p>\n<p>Third, use a timer or RunLoop to periodically execute time-consuming operations, and check whether the time exceeds the Watchdog Timeout setting before execution. If it times out, stop executing and put the task on hold until the next execution cycle.  </p>\n<p>Fourth, if time-consuming operations must be performed in the main thread, you can use NSRunLoop to control the execution time and periodically call the run method to ensure that the Watchdog Timeout setting is not exceeded.</p>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://juejin.cn/post/6844903775203753997\">https://juejin.cn/post/6844903775203753997</a><br>[2] <a href=\"https://juejin.cn/post/6978014329333350430\">https://juejin.cn/post/6978014329333350430</a></p>\n"},{"title":"02. Summary of Local Data Persistence Solutions","date":"2023-11-14T13:30:00.000Z","_content":"\n<font color=gray size=2>*It will take about 5 minutes to finish reading this article.*</font>\n\nEssentially, no matter which caching method is used, it will eventually be stored on the disk in the form of a file, but the upper layer performs some kind of \"encapsulation\" or \"abstraction\", so it is still classified. Currently, iOS local persistent Cache has the following forms:\n\n**1. UserDefaults**     \n**2. File Cache**   \n**3. Keychain**     \n**4. Core Data**    \n**5. Database (SQLite)**    \n\nNote: What is discussed here is only the persistent cache. If we simply discuss the cache, strictly speaking, memory caches such as NSCache, NSURLCache, etc. should also be taken into consideration. Below we will introduce these caching mechanisms from the aspects of principles, sample code, precautions, etc.\n\n#### <font size=5 color=#4169E1> 1. UserDefaults </font> \n\nUserDefaults is a common lightweight caching mechanism in iOS. It can be used to store application configuration information, user preferences, temporary cache data, etc.\n\n**Principle description:**\n\nUserDefaults uses plist files for storage, which saves cached data in the file in the form of key-value. This file is stored in the Library/Preferences directory in the application sandbox and is automatically managed by the system.\n\n**Sample Code:**\n\nUserDefaults is a singleton object and we can access it through its shared instance. Here is a sample code that uses UserDefaults to store and read:\n\n```Swift\n// Storing data\nUserDefaults.standard.set(\"hello\", forKey: \"greeting\")\n \n// read data\nlet greeting = UserDefaults.standard.string(forKey: \"greeting\")\nprint(greeting)\n\n```\n\n**Notice:**\n\nUserDefaults can only store basic data types and some object types in the Foundation framework, such as NSString, NSNumber, NSArray, NSDictionary, etc., and does not support storing custom object types.\n\nSince the stored data of UserDefaults is saved through plist files, for data that needs to be written frequently, it is best to use a more efficient storage method, such as Core Data, SQLite, etc.\n\nWhen using UserDefaults to store sensitive data, encryption is required to ensure data security.\n\n**Summarize:**\n\nUserDefaults is a common lightweight caching mechanism in iOS. It uses plist files for storage and supports the storage of basic data types and some object types in the Foundation framework. It is easy to use and simple, but you need to pay attention to the limitations of stored data types and data security. question.\n \n\n#### <font size=5 color=#4169E1> 2. File Cache </font> \n\nThe file caching mechanism is also a common caching method.\n\n**Principle Description:**\n\nIt is a method of permanently saving an application's data in the local file system so that the data can be read quickly the next time the application is launched. This caching mechanism works by saving data to the application's sandbox directory and reading that data the next time the application starts.\n\n**Sample Code:**\n\nUsing the file persistence caching mechanism requires the use of the file system API in iOS, such as NSFileManager and NSFileHandle classes. These classes provide basic operations on the file system, such as creating, deleting, moving, and reading and writing files.\n\nThe following is a sample code using the file persistence caching mechanism:\n\n```Swift\n\n// Get the application's sandbox directory\nlet documentsDirectory = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!\n \n//Set the data to be saved\nlet data = \"Hello, world!\".data(using: .utf8)\n \n//Save data to file\nlet fileURL = documentsDirectory.appendingPathComponent(\"cache.txt\")\ndo {\n     try data?.write(to: fileURL)\n} catch {\n     print(\"Error writing to file: \\(error)\")\n}\n \n//Read data from file\ndo {\n     let cachedData = try Data(contentsOf: fileURL)\n     let cachedString = String(data: cachedData, encoding: .utf8)\n     print(\"Cached string: \\(cachedString)\")\n} catch {\n     print(\"Error reading from file: \\(error)\")\n}\n\n```\n\n**Notice:**\n\nWhen using the file persistence cache mechanism, you need to pay attention to the following points:\n\n1. You should try to avoid saving large amounts of data to the local file system, as this takes up storage space on the device.\n\n2. For sensitive data, encryption algorithms should be used to protect the security of the data.\n\n3. Cache files should be cleared regularly to avoid excessive cache files causing insufficient storage space on the device.\n\n4. Care should be taken to handle errors when reading and writing files to avoid program crashes or data loss.\n\nIn addition, there is a special but commonly used method of file caching, which is KeyedArchiver.\n\n**KeyedArchiver**\n\nUsed to serialize objects into binary data and write them to files for caching. KeyedArchiver provides a convenient way for developers to serialize custom objects into binary data and save it to the file system for later reading from the file.\n\nHere's how to use KeyedArchiver:\n\n1. Implement NSCoding protocol\n\nFirst, the NSCoding protocol needs to be implemented in the custom object so that KeyedArchiver can serialize the object into binary data. The protocol includes two methods, encode and init(coder:), which are used to serialize objects into binary data and deserialize binary data into objects respectively.\n\n```Swift\n\nclass Person: NSObject, NSCoding {\n    var name: String\n    var age: Int\n \n    init(name: String, age: Int) {\n        self.name = name\n        self.age = age\n    }\n \n    func encode(with coder: NSCoder) {\n        coder.encode(name, forKey: \"name\")\n        coder.encode(age, forKey: \"age\")\n    }\n \n    required init?(coder: NSCoder) {\n        name = coder.decodeObject(forKey: \"name\") as? String ?? \"\"\n        age = coder.decodeInteger(forKey: \"age\")\n    }\n}\n\n```\n\n2. Cache objects\n   \nNext, use KeyedArchiver to serialize the custom object into binary data and write it to a file for caching.\n\n```Swift\nlet person = Person(name: \"Tom\", age: 20)\n \n// Get file path\nlet path = NSSearchPathForDirectoriesInDomains(.documentDirectory, .userDomainMask, true)[0] as String\nlet filePath = path + \"/person.archive\"\n \n// Serialize the object into binary data and write it to the file\nlet data = NSKeyedArchiver.archivedData(withRootObject: person)\ntry? data.write(to: URL(fileURLWithPath: filePath))\n\n```\n\n3. Read object from cache\n\n```Swift\n//Read binary data from file and deserialize into object\nlet data = try? Data(contentsOf: URL(fileURLWithPath: filePath))\nlet cachedPerson = NSKeyedUnarchiver.unarchiveObject(with: data!) as? Person\n \nprint(\"Name: \\(cachedPerson?.name ?? \"\")\")\nprint(\"Age: \\(cachedPerson?.age ?? 0)\")\n```\n\nYou need to pay attention to the following points when using KeyedArchiver:\n\n(1) Implement the encode and init(coder:) methods in the NSCoding protocol for custom objects so that KeyedArchiver can serialize objects into binary data.\n\n(2) KeyedArchiver will serialize objects into binary data, so you need to pay attention to memory consumption issues.\n\n(3) For some sensitive data, data security needs to be considered. Encryption algorithms can be used to protect data security.\n\n(4) Pay attention to errors when handling file reading and writing to avoid program crashes or data loss.\n\n#### <font size=5 color=#4169E1> 3. Keychain </font> \n\nKeychain is a persistent caching mechanism for iOS and part of the security framework in iOS, providing an API for storing and retrieving data in a secure manner.\n\n**Principle Description:**\n\nData in Keychain is stored in a protected system area, which is completely isolated and data cannot be shared between different applications. Each application has its own Keychain, which can only access its own data and not other applications' data. This isolation ensures the security of Keychain storage.\n\nIt guarantees secure storage and retrieval of sensitive data between application launch and device restart. It stores data such as passwords, encryption keys, and other credentials in an encrypted manner so that it cannot be accessed by other applications and systems.\n\nFor every application, KeyChain has two access areas, private area and public area. The private area is a Sandbox. Any data stored by this program is not visible to other programs, and other applications cannot access the data in this area. Using the Keychain API, data can be stored through key-value pairs and identified using service names and account names. This ensures that the data is associated with the application and can only be used by applications with the corresponding service name and account name. access.\n\nIf you want to place the stored content in the public area so that multiple applications can jointly access some data, you can first declare the name of the public area. The official document calls this name \"keychain access group\".\n\n**Usage Example:**\n\nThe following is how to use Keychain and sample code (Swift):\n\n1. Import the Security framework\n\nBefore using Keychain, you need to import the Security framework.\n\n```Swift\nimport Security\n```\n\n2. Storing data\n\nUse the SecItemAdd method to store data into the Keychain.\n\n```Swift\nlet password = \"123456\"\nlet data = password.data(using: .utf8)!\nlet query: [String: Any] = [kSecClass as String: kSecClassGenericPassword,\n                            kSecAttrAccount as String: \"MyPassword\",\n                            kSecValueData as String: data]\n \nlet status = SecItemAdd(query as CFDictionary, nil)\n \nif status == errSecSuccess {\n    print(\"Password saved to Keychain.\")\n} else {\n    print(\"Failed to save password to Keychain.\")\n}\n```\n\nIn the above code, we convert the string password into binary data and store it into Keychain. kSecClass represents the stored data type, kSecAttrAccount is the name used to identify the stored data, and kSecValueData is the stored binary data.\n\n3. Read data\n\nUse the SecItemCopyMatching method to read data from the Keychain.\n\n```Swift\nlet query: [String: Any] = [kSecClass as String: kSecClassGenericPassword,\n                            kSecAttrAccount as String: \"MyPassword\",\n                            kSecReturnData as String: kCFBooleanTrue!,\n                            kSecMatchLimit as String: kSecMatchLimitOne]\n \nvar dataTypeRef: AnyObject?\nlet status = SecItemCopyMatching(query as CFDictionary, &dataTypeRef)\n \nif status == errSecSuccess {\n    if let retrievedData = dataTypeRef as? Data,\n        let password = String(data: retrievedData, encoding: .utf8) {\n        print(\"Retrieved password from Keychain: \\(password)\")\n    } else {\n        print(\"Failed to retrieve password from Keychain.\")\n    }\n} else {\n    print(\"Failed to retrieve password from Keychain.\")\n}\n```\n\nIn the above code, we use kSecReturnData to represent the returned stored binary data, and kSecMatchLimit to represent the amount of returned data. Here we only need to return one result, so we specify kSecMatchLimitOne.\n\n**Notice:**\n\nYou need to pay attention to the following points when using Keychain:\n\n(1) Access to the Keychain should be restricted and ensure that only authorized users can access the data in the Keychain.\n\n(2) The data stored in Keychain are encrypted, so they cannot be accessed from the outside. If the data needs to be shared with other applications, you can use the group method to allow the program to be shared between apps, but the TeamID must be the same.\n\n(3) The data in the Keychain is not stored in the Sandbox of the App. Even if the App is deleted, the data is still stored in the Keychain. If you reinstall the app, you can also get data from the keychain.\n\n(4) Keychain is a secure storage mechanism, but it is not perfect. For example, a jailbroken device can access data stored in Keychain. Therefore, highly sensitive data should not be stored in Keychain. So sensitive information still needs to be used and stored with caution.\n\n(5) When handling Keychain, attention should be paid to handling possible errors to avoid program crash or data loss.\n\nApple also provides a wealth of development documentation for keychain, including Keychain Services Programming Guide: the article includes keychain development using mac and ios.\n\n#### <font size=5 color=#4169E1> 4. Core Data </font> \n\nCore Data is a data management framework provided by Apple that provides a convenient way to manage and manipulate data in applications. The most important feature is persistent storage, which stores data in local files so that it can be used the next time the application starts.\n\n**Principle Description:**\n\n\nIn Core Data, persistent storage is implemented using a SQLite database. SQLite is a lightweight embedded database that can be easily embedded into applications, providing an efficient and reliable way to store data.\n\n**Usage example:**\n\nUsing Core Data for persistent storage requires the following steps:\n\n(1) Define the data model: Create a data model file in Xcode to define the entities, attributes, relationships, etc. of the data.\n\n(2) Create Core Data stack: Use the NSPersistentContainer class to create the Core Data stack, including managed object context, persistent storage coordinator and other components.\n\n(3) Store and read data: Use the NSManagedObjectContext class to operate the managed object context, and store and read data by operating elements such as entities and attributes.\n\nHere is a simple Swift code example that demonstrates how to use Core Data for data storage:\n\n```Swift\n// Create Core Data stack\nlet container = NSPersistentContainer(name: \"DataModel\")\ncontainer.loadPersistentStores { _, error in\n     if let error = error {\n         print(\"Failed to load persistent stores: \\(error)\")\n         return\n     }\n}\n \n//Create a managed object context\nlet context = container.viewContext\n \n//Create a Person entity object\nlet person = NSEntityDescription.insertNewObject(forEntityName: \"Person\", into: context) as! Person\nperson.name = \"Tom\"\nperson.age = 30\n \n//Save data to persistent storage\ndo {\n     try context.save()\n} catch {\n     print(\"Failed to save context: \\(error)\")\n}\n \n//Read data from persistent storage\nlet fetchRequest: NSFetchRequest<Person> = Person.fetchRequest()\ndo {\n     let persons = try context.fetch(fetchRequest)\n     for person in persons {\n         print(\"Name: \\(person.name!), Age: \\(person.age)\")\n     }\n} catch {\n     print(\"Failed to fetch persons: \\(error)\")\n}\n```\n\nWhen using Core Data for persistent storage, you need to pay attention to the following points:\n\n(1) When defining your data model, you should keep it as simple as possible. A complex data model can cause database operations to slow down and increase code complexity.\n\n(2) Core Data provides a variety of persistent storage methods, such as SQLite, binary files, XML files, etc. Developers need to choose the appropriate storage method based on specific needs.\n\n(3) Core Data is a thread-safe framework, but multi-threaded programming still requires attention to thread safety issues. It is recommended to create a separate managed object context in each thread.\n\nIn short, Core Data is a powerful persistent storage in iOS.\n\n#### <font size=5 color=#4169E1> 5. Database (SQLite) </font> \n\nIn iOS, SQLite is a lightweight database engine that is widely used for persistent storage. SQLite uses files as data storage media to store and read data by encoding and decoding data. In iOS, SQLite is used to develop native applications to store large amounts of structured data.\n\n**Principle Description**\n\nSQLite is a disk-based relational database that supports SQL language operations. SQLite stores all data in a single file that can be easily copied, backed up, and transferred. SQLite is characterized by occupying very little memory and being fast, making it suitable for resource-constrained environments such as mobile devices.\n\n**Usage example:**\n\nUsing SQLite persistent cache requires the following steps:\n\n(1) Import the SQLite library: Import the SQLite library into the project, you can use CocoaPods or import it manually.\n\n(2) Create database: Create database files through the API provided by the SQLite library. If the database file already exists, you can open it directly, otherwise you can use SQL statements to create the database file.\n\n(3) Create a table: Use SQL statements to create a table and define field types and constraints for the table.\n\n(4) Execute SQL statements: Execute SQL statements through the API provided by SQLite, and perform add, delete, modify and query operations on the table.\n\n(5) Close the database: When the application exits or no longer uses the database, the database needs to be closed and resources released.\n\n**Sample code**\n\nHere is an example code for using SQLite for data storage, using Swift’s SQLite.swift library:\n \n```Swift\n//Import SQLite.swift library\nimport SQLite\n \n//Open database connection\nlet db = try! Connection(\"path/to/database.sqlite3\")\n \n//Define data table\nlet users = Table(\"users\")\nlet id = Expression<Int64>(\"id\")\nlet name = Expression<String>(\"name\")\nlet email = Expression<String>(\"email\")\n \n//Create table\ntry!db.run(users.create { t in\n     t.column(id, primaryKey: true)\n     t.column(name)\n     t.column(email, unique: true)\n})\n \n//Insert data\nlet insert = users.insert(name <- \"Alice\", email <- \"alice@example.com\")\ntry!db.run(insert)\n \n// Query data\nfor user in try! db.prepare(users) {\n     print(\"id: \\(user[id]), name: \\(user[name]), email: \\(user[email])\")\n}\n \n// update data\nlet alice = users.filter(name == \"Alice\")\ntry! db.run(alice.update(email <- \"alice@example.org\"))\n \n// delete data\ntry! db.run(alice.delete())\n \n//Close database connection\ndb.close()\n```\n\n**Notice:**\n\nWhen using SQLite persistent cache, you need to pay attention to the following things:\n\n(1) It is necessary to manually write SQL statements to perform data operations, which may be difficult for developers who are not familiar with the SQL language.\n\n(2) Thread safety needs to be ensured when performing data operations. You can use the transaction mechanism provided by SQLite to perform data operations to avoid data damage or loss.\n\n(3) SQLite database files can be easily copied, backed up and transferred, but data security issues need to be paid attention to.\n\n\n#### <font size=5 color=#4169E1> 6. Summary </font> \n\n\nAfter the above introduction, we can summarize it as follows:\n\n**UserDefaults**\n\nUserDefaults is a lightweight persistent storage method suitable for storing some simple configuration information or user preferences. Its advantage is that it is simple and easy to use, without having to consider issues such as data models and data migration. But its disadvantage is that it can only store some basic data types and cannot support complex data structures.\n\nBest application scenario: Suitable for storing a small amount of simple configuration information or user preferences.\n\n**File Caching**\n\nFile caching can store data in the local file system in the form of files, and is suitable for storing larger data, such as pictures, videos, etc. Its advantage is that it can flexibly control the cache strategy and cache size, which can effectively reduce the server load and improve the user experience. However, its disadvantage is that it requires manual management of cache, including cache path, cache file name, cache expiration time, etc. Improper management may lead to too many cache files and waste storage space.\n\nBest application scenario: Suitable for storing large amounts of non-sensitive data, such as pictures, audio, video (SDWebImage), etc.\n\n**Keychain**\n\nKeychain is a secure storage method that can encrypt sensitive information (such as user passwords, keys, etc.) and store it in the system to ensure data security. Its advantage is that it can protect sensitive information from being maliciously obtained, and it also provides a convenient API to manage this sensitive information. But its disadvantage is that it can only store smaller data and is not suitable for storing large amounts of data.\n\nBest application scenario: Suitable for storing sensitive information, such as user passwords, keys, etc.\n\n**Core Data**\n\nCore Data is an ORM (Object Relational Mapping) framework that can store data in a SQLite database. Its advantage is that it can easily manage data models, while providing powerful query, sorting, filtering and other functions, which is very suitable for storing complex data structures. However, its disadvantage is that the learning curve is steep, and you need to understand some concepts and APIs of Core Data. You also need to consider issues such as the migration of data models.\n\nBest application scenario: Suitable for storing complex data structures, such as contacts, music playlists, calendar events, etc.\n\n**Database (SQLite)**\n\nDatabase is a universal storage method that can store any type of data. It also provides rich query, sorting, filtering and other functions. But generally, we prefer to use it in scenarios that require complex storage and query. Such as contacts, music playlists, etc.","source":"_posts/iOS/01. Memory & Performance & Stability/02. Summary of Local Data Persistence Solutions.md","raw":"---\ntitle: 02. Summary of Local Data Persistence Solutions\ndate: 2023-11-14 14:30:00\ncategories: \n- [iOS, 01. Memory & Performance & Stability]\ntags:\n- Data Persistence\n---\n\n<font color=gray size=2>*It will take about 5 minutes to finish reading this article.*</font>\n\nEssentially, no matter which caching method is used, it will eventually be stored on the disk in the form of a file, but the upper layer performs some kind of \"encapsulation\" or \"abstraction\", so it is still classified. Currently, iOS local persistent Cache has the following forms:\n\n**1. UserDefaults**     \n**2. File Cache**   \n**3. Keychain**     \n**4. Core Data**    \n**5. Database (SQLite)**    \n\nNote: What is discussed here is only the persistent cache. If we simply discuss the cache, strictly speaking, memory caches such as NSCache, NSURLCache, etc. should also be taken into consideration. Below we will introduce these caching mechanisms from the aspects of principles, sample code, precautions, etc.\n\n#### <font size=5 color=#4169E1> 1. UserDefaults </font> \n\nUserDefaults is a common lightweight caching mechanism in iOS. It can be used to store application configuration information, user preferences, temporary cache data, etc.\n\n**Principle description:**\n\nUserDefaults uses plist files for storage, which saves cached data in the file in the form of key-value. This file is stored in the Library/Preferences directory in the application sandbox and is automatically managed by the system.\n\n**Sample Code:**\n\nUserDefaults is a singleton object and we can access it through its shared instance. Here is a sample code that uses UserDefaults to store and read:\n\n```Swift\n// Storing data\nUserDefaults.standard.set(\"hello\", forKey: \"greeting\")\n \n// read data\nlet greeting = UserDefaults.standard.string(forKey: \"greeting\")\nprint(greeting)\n\n```\n\n**Notice:**\n\nUserDefaults can only store basic data types and some object types in the Foundation framework, such as NSString, NSNumber, NSArray, NSDictionary, etc., and does not support storing custom object types.\n\nSince the stored data of UserDefaults is saved through plist files, for data that needs to be written frequently, it is best to use a more efficient storage method, such as Core Data, SQLite, etc.\n\nWhen using UserDefaults to store sensitive data, encryption is required to ensure data security.\n\n**Summarize:**\n\nUserDefaults is a common lightweight caching mechanism in iOS. It uses plist files for storage and supports the storage of basic data types and some object types in the Foundation framework. It is easy to use and simple, but you need to pay attention to the limitations of stored data types and data security. question.\n \n\n#### <font size=5 color=#4169E1> 2. File Cache </font> \n\nThe file caching mechanism is also a common caching method.\n\n**Principle Description:**\n\nIt is a method of permanently saving an application's data in the local file system so that the data can be read quickly the next time the application is launched. This caching mechanism works by saving data to the application's sandbox directory and reading that data the next time the application starts.\n\n**Sample Code:**\n\nUsing the file persistence caching mechanism requires the use of the file system API in iOS, such as NSFileManager and NSFileHandle classes. These classes provide basic operations on the file system, such as creating, deleting, moving, and reading and writing files.\n\nThe following is a sample code using the file persistence caching mechanism:\n\n```Swift\n\n// Get the application's sandbox directory\nlet documentsDirectory = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!\n \n//Set the data to be saved\nlet data = \"Hello, world!\".data(using: .utf8)\n \n//Save data to file\nlet fileURL = documentsDirectory.appendingPathComponent(\"cache.txt\")\ndo {\n     try data?.write(to: fileURL)\n} catch {\n     print(\"Error writing to file: \\(error)\")\n}\n \n//Read data from file\ndo {\n     let cachedData = try Data(contentsOf: fileURL)\n     let cachedString = String(data: cachedData, encoding: .utf8)\n     print(\"Cached string: \\(cachedString)\")\n} catch {\n     print(\"Error reading from file: \\(error)\")\n}\n\n```\n\n**Notice:**\n\nWhen using the file persistence cache mechanism, you need to pay attention to the following points:\n\n1. You should try to avoid saving large amounts of data to the local file system, as this takes up storage space on the device.\n\n2. For sensitive data, encryption algorithms should be used to protect the security of the data.\n\n3. Cache files should be cleared regularly to avoid excessive cache files causing insufficient storage space on the device.\n\n4. Care should be taken to handle errors when reading and writing files to avoid program crashes or data loss.\n\nIn addition, there is a special but commonly used method of file caching, which is KeyedArchiver.\n\n**KeyedArchiver**\n\nUsed to serialize objects into binary data and write them to files for caching. KeyedArchiver provides a convenient way for developers to serialize custom objects into binary data and save it to the file system for later reading from the file.\n\nHere's how to use KeyedArchiver:\n\n1. Implement NSCoding protocol\n\nFirst, the NSCoding protocol needs to be implemented in the custom object so that KeyedArchiver can serialize the object into binary data. The protocol includes two methods, encode and init(coder:), which are used to serialize objects into binary data and deserialize binary data into objects respectively.\n\n```Swift\n\nclass Person: NSObject, NSCoding {\n    var name: String\n    var age: Int\n \n    init(name: String, age: Int) {\n        self.name = name\n        self.age = age\n    }\n \n    func encode(with coder: NSCoder) {\n        coder.encode(name, forKey: \"name\")\n        coder.encode(age, forKey: \"age\")\n    }\n \n    required init?(coder: NSCoder) {\n        name = coder.decodeObject(forKey: \"name\") as? String ?? \"\"\n        age = coder.decodeInteger(forKey: \"age\")\n    }\n}\n\n```\n\n2. Cache objects\n   \nNext, use KeyedArchiver to serialize the custom object into binary data and write it to a file for caching.\n\n```Swift\nlet person = Person(name: \"Tom\", age: 20)\n \n// Get file path\nlet path = NSSearchPathForDirectoriesInDomains(.documentDirectory, .userDomainMask, true)[0] as String\nlet filePath = path + \"/person.archive\"\n \n// Serialize the object into binary data and write it to the file\nlet data = NSKeyedArchiver.archivedData(withRootObject: person)\ntry? data.write(to: URL(fileURLWithPath: filePath))\n\n```\n\n3. Read object from cache\n\n```Swift\n//Read binary data from file and deserialize into object\nlet data = try? Data(contentsOf: URL(fileURLWithPath: filePath))\nlet cachedPerson = NSKeyedUnarchiver.unarchiveObject(with: data!) as? Person\n \nprint(\"Name: \\(cachedPerson?.name ?? \"\")\")\nprint(\"Age: \\(cachedPerson?.age ?? 0)\")\n```\n\nYou need to pay attention to the following points when using KeyedArchiver:\n\n(1) Implement the encode and init(coder:) methods in the NSCoding protocol for custom objects so that KeyedArchiver can serialize objects into binary data.\n\n(2) KeyedArchiver will serialize objects into binary data, so you need to pay attention to memory consumption issues.\n\n(3) For some sensitive data, data security needs to be considered. Encryption algorithms can be used to protect data security.\n\n(4) Pay attention to errors when handling file reading and writing to avoid program crashes or data loss.\n\n#### <font size=5 color=#4169E1> 3. Keychain </font> \n\nKeychain is a persistent caching mechanism for iOS and part of the security framework in iOS, providing an API for storing and retrieving data in a secure manner.\n\n**Principle Description:**\n\nData in Keychain is stored in a protected system area, which is completely isolated and data cannot be shared between different applications. Each application has its own Keychain, which can only access its own data and not other applications' data. This isolation ensures the security of Keychain storage.\n\nIt guarantees secure storage and retrieval of sensitive data between application launch and device restart. It stores data such as passwords, encryption keys, and other credentials in an encrypted manner so that it cannot be accessed by other applications and systems.\n\nFor every application, KeyChain has two access areas, private area and public area. The private area is a Sandbox. Any data stored by this program is not visible to other programs, and other applications cannot access the data in this area. Using the Keychain API, data can be stored through key-value pairs and identified using service names and account names. This ensures that the data is associated with the application and can only be used by applications with the corresponding service name and account name. access.\n\nIf you want to place the stored content in the public area so that multiple applications can jointly access some data, you can first declare the name of the public area. The official document calls this name \"keychain access group\".\n\n**Usage Example:**\n\nThe following is how to use Keychain and sample code (Swift):\n\n1. Import the Security framework\n\nBefore using Keychain, you need to import the Security framework.\n\n```Swift\nimport Security\n```\n\n2. Storing data\n\nUse the SecItemAdd method to store data into the Keychain.\n\n```Swift\nlet password = \"123456\"\nlet data = password.data(using: .utf8)!\nlet query: [String: Any] = [kSecClass as String: kSecClassGenericPassword,\n                            kSecAttrAccount as String: \"MyPassword\",\n                            kSecValueData as String: data]\n \nlet status = SecItemAdd(query as CFDictionary, nil)\n \nif status == errSecSuccess {\n    print(\"Password saved to Keychain.\")\n} else {\n    print(\"Failed to save password to Keychain.\")\n}\n```\n\nIn the above code, we convert the string password into binary data and store it into Keychain. kSecClass represents the stored data type, kSecAttrAccount is the name used to identify the stored data, and kSecValueData is the stored binary data.\n\n3. Read data\n\nUse the SecItemCopyMatching method to read data from the Keychain.\n\n```Swift\nlet query: [String: Any] = [kSecClass as String: kSecClassGenericPassword,\n                            kSecAttrAccount as String: \"MyPassword\",\n                            kSecReturnData as String: kCFBooleanTrue!,\n                            kSecMatchLimit as String: kSecMatchLimitOne]\n \nvar dataTypeRef: AnyObject?\nlet status = SecItemCopyMatching(query as CFDictionary, &dataTypeRef)\n \nif status == errSecSuccess {\n    if let retrievedData = dataTypeRef as? Data,\n        let password = String(data: retrievedData, encoding: .utf8) {\n        print(\"Retrieved password from Keychain: \\(password)\")\n    } else {\n        print(\"Failed to retrieve password from Keychain.\")\n    }\n} else {\n    print(\"Failed to retrieve password from Keychain.\")\n}\n```\n\nIn the above code, we use kSecReturnData to represent the returned stored binary data, and kSecMatchLimit to represent the amount of returned data. Here we only need to return one result, so we specify kSecMatchLimitOne.\n\n**Notice:**\n\nYou need to pay attention to the following points when using Keychain:\n\n(1) Access to the Keychain should be restricted and ensure that only authorized users can access the data in the Keychain.\n\n(2) The data stored in Keychain are encrypted, so they cannot be accessed from the outside. If the data needs to be shared with other applications, you can use the group method to allow the program to be shared between apps, but the TeamID must be the same.\n\n(3) The data in the Keychain is not stored in the Sandbox of the App. Even if the App is deleted, the data is still stored in the Keychain. If you reinstall the app, you can also get data from the keychain.\n\n(4) Keychain is a secure storage mechanism, but it is not perfect. For example, a jailbroken device can access data stored in Keychain. Therefore, highly sensitive data should not be stored in Keychain. So sensitive information still needs to be used and stored with caution.\n\n(5) When handling Keychain, attention should be paid to handling possible errors to avoid program crash or data loss.\n\nApple also provides a wealth of development documentation for keychain, including Keychain Services Programming Guide: the article includes keychain development using mac and ios.\n\n#### <font size=5 color=#4169E1> 4. Core Data </font> \n\nCore Data is a data management framework provided by Apple that provides a convenient way to manage and manipulate data in applications. The most important feature is persistent storage, which stores data in local files so that it can be used the next time the application starts.\n\n**Principle Description:**\n\n\nIn Core Data, persistent storage is implemented using a SQLite database. SQLite is a lightweight embedded database that can be easily embedded into applications, providing an efficient and reliable way to store data.\n\n**Usage example:**\n\nUsing Core Data for persistent storage requires the following steps:\n\n(1) Define the data model: Create a data model file in Xcode to define the entities, attributes, relationships, etc. of the data.\n\n(2) Create Core Data stack: Use the NSPersistentContainer class to create the Core Data stack, including managed object context, persistent storage coordinator and other components.\n\n(3) Store and read data: Use the NSManagedObjectContext class to operate the managed object context, and store and read data by operating elements such as entities and attributes.\n\nHere is a simple Swift code example that demonstrates how to use Core Data for data storage:\n\n```Swift\n// Create Core Data stack\nlet container = NSPersistentContainer(name: \"DataModel\")\ncontainer.loadPersistentStores { _, error in\n     if let error = error {\n         print(\"Failed to load persistent stores: \\(error)\")\n         return\n     }\n}\n \n//Create a managed object context\nlet context = container.viewContext\n \n//Create a Person entity object\nlet person = NSEntityDescription.insertNewObject(forEntityName: \"Person\", into: context) as! Person\nperson.name = \"Tom\"\nperson.age = 30\n \n//Save data to persistent storage\ndo {\n     try context.save()\n} catch {\n     print(\"Failed to save context: \\(error)\")\n}\n \n//Read data from persistent storage\nlet fetchRequest: NSFetchRequest<Person> = Person.fetchRequest()\ndo {\n     let persons = try context.fetch(fetchRequest)\n     for person in persons {\n         print(\"Name: \\(person.name!), Age: \\(person.age)\")\n     }\n} catch {\n     print(\"Failed to fetch persons: \\(error)\")\n}\n```\n\nWhen using Core Data for persistent storage, you need to pay attention to the following points:\n\n(1) When defining your data model, you should keep it as simple as possible. A complex data model can cause database operations to slow down and increase code complexity.\n\n(2) Core Data provides a variety of persistent storage methods, such as SQLite, binary files, XML files, etc. Developers need to choose the appropriate storage method based on specific needs.\n\n(3) Core Data is a thread-safe framework, but multi-threaded programming still requires attention to thread safety issues. It is recommended to create a separate managed object context in each thread.\n\nIn short, Core Data is a powerful persistent storage in iOS.\n\n#### <font size=5 color=#4169E1> 5. Database (SQLite) </font> \n\nIn iOS, SQLite is a lightweight database engine that is widely used for persistent storage. SQLite uses files as data storage media to store and read data by encoding and decoding data. In iOS, SQLite is used to develop native applications to store large amounts of structured data.\n\n**Principle Description**\n\nSQLite is a disk-based relational database that supports SQL language operations. SQLite stores all data in a single file that can be easily copied, backed up, and transferred. SQLite is characterized by occupying very little memory and being fast, making it suitable for resource-constrained environments such as mobile devices.\n\n**Usage example:**\n\nUsing SQLite persistent cache requires the following steps:\n\n(1) Import the SQLite library: Import the SQLite library into the project, you can use CocoaPods or import it manually.\n\n(2) Create database: Create database files through the API provided by the SQLite library. If the database file already exists, you can open it directly, otherwise you can use SQL statements to create the database file.\n\n(3) Create a table: Use SQL statements to create a table and define field types and constraints for the table.\n\n(4) Execute SQL statements: Execute SQL statements through the API provided by SQLite, and perform add, delete, modify and query operations on the table.\n\n(5) Close the database: When the application exits or no longer uses the database, the database needs to be closed and resources released.\n\n**Sample code**\n\nHere is an example code for using SQLite for data storage, using Swift’s SQLite.swift library:\n \n```Swift\n//Import SQLite.swift library\nimport SQLite\n \n//Open database connection\nlet db = try! Connection(\"path/to/database.sqlite3\")\n \n//Define data table\nlet users = Table(\"users\")\nlet id = Expression<Int64>(\"id\")\nlet name = Expression<String>(\"name\")\nlet email = Expression<String>(\"email\")\n \n//Create table\ntry!db.run(users.create { t in\n     t.column(id, primaryKey: true)\n     t.column(name)\n     t.column(email, unique: true)\n})\n \n//Insert data\nlet insert = users.insert(name <- \"Alice\", email <- \"alice@example.com\")\ntry!db.run(insert)\n \n// Query data\nfor user in try! db.prepare(users) {\n     print(\"id: \\(user[id]), name: \\(user[name]), email: \\(user[email])\")\n}\n \n// update data\nlet alice = users.filter(name == \"Alice\")\ntry! db.run(alice.update(email <- \"alice@example.org\"))\n \n// delete data\ntry! db.run(alice.delete())\n \n//Close database connection\ndb.close()\n```\n\n**Notice:**\n\nWhen using SQLite persistent cache, you need to pay attention to the following things:\n\n(1) It is necessary to manually write SQL statements to perform data operations, which may be difficult for developers who are not familiar with the SQL language.\n\n(2) Thread safety needs to be ensured when performing data operations. You can use the transaction mechanism provided by SQLite to perform data operations to avoid data damage or loss.\n\n(3) SQLite database files can be easily copied, backed up and transferred, but data security issues need to be paid attention to.\n\n\n#### <font size=5 color=#4169E1> 6. Summary </font> \n\n\nAfter the above introduction, we can summarize it as follows:\n\n**UserDefaults**\n\nUserDefaults is a lightweight persistent storage method suitable for storing some simple configuration information or user preferences. Its advantage is that it is simple and easy to use, without having to consider issues such as data models and data migration. But its disadvantage is that it can only store some basic data types and cannot support complex data structures.\n\nBest application scenario: Suitable for storing a small amount of simple configuration information or user preferences.\n\n**File Caching**\n\nFile caching can store data in the local file system in the form of files, and is suitable for storing larger data, such as pictures, videos, etc. Its advantage is that it can flexibly control the cache strategy and cache size, which can effectively reduce the server load and improve the user experience. However, its disadvantage is that it requires manual management of cache, including cache path, cache file name, cache expiration time, etc. Improper management may lead to too many cache files and waste storage space.\n\nBest application scenario: Suitable for storing large amounts of non-sensitive data, such as pictures, audio, video (SDWebImage), etc.\n\n**Keychain**\n\nKeychain is a secure storage method that can encrypt sensitive information (such as user passwords, keys, etc.) and store it in the system to ensure data security. Its advantage is that it can protect sensitive information from being maliciously obtained, and it also provides a convenient API to manage this sensitive information. But its disadvantage is that it can only store smaller data and is not suitable for storing large amounts of data.\n\nBest application scenario: Suitable for storing sensitive information, such as user passwords, keys, etc.\n\n**Core Data**\n\nCore Data is an ORM (Object Relational Mapping) framework that can store data in a SQLite database. Its advantage is that it can easily manage data models, while providing powerful query, sorting, filtering and other functions, which is very suitable for storing complex data structures. However, its disadvantage is that the learning curve is steep, and you need to understand some concepts and APIs of Core Data. You also need to consider issues such as the migration of data models.\n\nBest application scenario: Suitable for storing complex data structures, such as contacts, music playlists, calendar events, etc.\n\n**Database (SQLite)**\n\nDatabase is a universal storage method that can store any type of data. It also provides rich query, sorting, filtering and other functions. But generally, we prefer to use it in scenarios that require complex storage and query. Such as contacts, music playlists, etc.","slug":"iOS/01. Memory & Performance & Stability/02. Summary of Local Data Persistence Solutions","published":1,"updated":"2023-11-14T21:23:09.424Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr61004qvu0mgoot96fr","content":"<p><font color=gray size=2><em>It will take about 5 minutes to finish reading this article.</em></font></p>\n<p>Essentially, no matter which caching method is used, it will eventually be stored on the disk in the form of a file, but the upper layer performs some kind of “encapsulation” or “abstraction”, so it is still classified. Currently, iOS local persistent Cache has the following forms:</p>\n<p><strong>1. UserDefaults</strong><br><strong>2. File Cache</strong><br><strong>3. Keychain</strong><br><strong>4. Core Data</strong><br><strong>5. Database (SQLite)</strong>    </p>\n<p>Note: What is discussed here is only the persistent cache. If we simply discuss the cache, strictly speaking, memory caches such as NSCache, NSURLCache, etc. should also be taken into consideration. Below we will introduce these caching mechanisms from the aspects of principles, sample code, precautions, etc.</p>\n<h4 id=\"1-UserDefaults\"><a href=\"#1-UserDefaults\" class=\"headerlink\" title=\" 1. UserDefaults \"></a><font size=5 color=#4169E1> 1. UserDefaults </font></h4><p>UserDefaults is a common lightweight caching mechanism in iOS. It can be used to store application configuration information, user preferences, temporary cache data, etc.</p>\n<p><strong>Principle description:</strong></p>\n<p>UserDefaults uses plist files for storage, which saves cached data in the file in the form of key-value. This file is stored in the Library&#x2F;Preferences directory in the application sandbox and is automatically managed by the system.</p>\n<p><strong>Sample Code:</strong></p>\n<p>UserDefaults is a singleton object and we can access it through its shared instance. Here is a sample code that uses UserDefaults to store and read:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Storing data</span></span><br><span class=\"line\"><span class=\"type\">UserDefaults</span>.standard.set(<span class=\"string\">&quot;hello&quot;</span>, forKey: <span class=\"string\">&quot;greeting&quot;</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// read data</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> greeting <span class=\"operator\">=</span> <span class=\"type\">UserDefaults</span>.standard.string(forKey: <span class=\"string\">&quot;greeting&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(greeting)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>Notice:</strong></p>\n<p>UserDefaults can only store basic data types and some object types in the Foundation framework, such as NSString, NSNumber, NSArray, NSDictionary, etc., and does not support storing custom object types.</p>\n<p>Since the stored data of UserDefaults is saved through plist files, for data that needs to be written frequently, it is best to use a more efficient storage method, such as Core Data, SQLite, etc.</p>\n<p>When using UserDefaults to store sensitive data, encryption is required to ensure data security.</p>\n<p><strong>Summarize:</strong></p>\n<p>UserDefaults is a common lightweight caching mechanism in iOS. It uses plist files for storage and supports the storage of basic data types and some object types in the Foundation framework. It is easy to use and simple, but you need to pay attention to the limitations of stored data types and data security. question.</p>\n<h4 id=\"2-File-Cache\"><a href=\"#2-File-Cache\" class=\"headerlink\" title=\" 2. File Cache \"></a><font size=5 color=#4169E1> 2. File Cache </font></h4><p>The file caching mechanism is also a common caching method.</p>\n<p><strong>Principle Description:</strong></p>\n<p>It is a method of permanently saving an application’s data in the local file system so that the data can be read quickly the next time the application is launched. This caching mechanism works by saving data to the application’s sandbox directory and reading that data the next time the application starts.</p>\n<p><strong>Sample Code:</strong></p>\n<p>Using the file persistence caching mechanism requires the use of the file system API in iOS, such as NSFileManager and NSFileHandle classes. These classes provide basic operations on the file system, such as creating, deleting, moving, and reading and writing files.</p>\n<p>The following is a sample code using the file persistence caching mechanism:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Get the application&#x27;s sandbox directory</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> documentsDirectory <span class=\"operator\">=</span> <span class=\"type\">FileManager</span>.default.urls(for: .documentDirectory, in: .userDomainMask).first<span class=\"operator\">!</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//Set the data to be saved</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> data <span class=\"operator\">=</span> <span class=\"string\">&quot;Hello, world!&quot;</span>.data(using: .utf8)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//Save data to file</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> fileURL <span class=\"operator\">=</span> documentsDirectory.appendingPathComponent(<span class=\"string\">&quot;cache.txt&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">try</span> data<span class=\"operator\">?</span>.write(to: fileURL)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">     <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Error writing to file: <span class=\"subst\">\\(error)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//Read data from file</span></span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">let</span> cachedData <span class=\"operator\">=</span> <span class=\"keyword\">try</span> <span class=\"type\">Data</span>(contentsOf: fileURL)</span><br><span class=\"line\">     <span class=\"keyword\">let</span> cachedString <span class=\"operator\">=</span> <span class=\"type\">String</span>(data: cachedData, encoding: .utf8)</span><br><span class=\"line\">     <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Cached string: <span class=\"subst\">\\(cachedString)</span>&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">     <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Error reading from file: <span class=\"subst\">\\(error)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>Notice:</strong></p>\n<p>When using the file persistence cache mechanism, you need to pay attention to the following points:</p>\n<ol>\n<li><p>You should try to avoid saving large amounts of data to the local file system, as this takes up storage space on the device.</p>\n</li>\n<li><p>For sensitive data, encryption algorithms should be used to protect the security of the data.</p>\n</li>\n<li><p>Cache files should be cleared regularly to avoid excessive cache files causing insufficient storage space on the device.</p>\n</li>\n<li><p>Care should be taken to handle errors when reading and writing files to avoid program crashes or data loss.</p>\n</li>\n</ol>\n<p>In addition, there is a special but commonly used method of file caching, which is KeyedArchiver.</p>\n<p><strong>KeyedArchiver</strong></p>\n<p>Used to serialize objects into binary data and write them to files for caching. KeyedArchiver provides a convenient way for developers to serialize custom objects into binary data and save it to the file system for later reading from the file.</p>\n<p>Here’s how to use KeyedArchiver:</p>\n<ol>\n<li>Implement NSCoding protocol</li>\n</ol>\n<p>First, the NSCoding protocol needs to be implemented in the custom object so that KeyedArchiver can serialize the object into binary data. The protocol includes two methods, encode and init(coder:), which are used to serialize objects into binary data and deserialize binary data into objects respectively.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>: <span class=\"title class_\">NSObject</span>, <span class=\"title class_\">NSCoding</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> age: <span class=\"type\">Int</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"params\">name</span>: <span class=\"type\">String</span>, <span class=\"params\">age</span>: <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.name <span class=\"operator\">=</span> name</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.age <span class=\"operator\">=</span> age</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">encode</span>(<span class=\"params\">with</span> <span class=\"params\">coder</span>: <span class=\"type\">NSCoder</span>) &#123;</span><br><span class=\"line\">        coder.encode(name, forKey: <span class=\"string\">&quot;name&quot;</span>)</span><br><span class=\"line\">        coder.encode(age, forKey: <span class=\"string\">&quot;age&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">required</span> <span class=\"keyword\">init?</span>(<span class=\"params\">coder</span>: <span class=\"type\">NSCoder</span>) &#123;</span><br><span class=\"line\">        name <span class=\"operator\">=</span> coder.decodeObject(forKey: <span class=\"string\">&quot;name&quot;</span>) <span class=\"keyword\">as?</span> <span class=\"type\">String</span> <span class=\"operator\">??</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">        age <span class=\"operator\">=</span> coder.decodeInteger(forKey: <span class=\"string\">&quot;age&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>Cache objects</li>\n</ol>\n<p>Next, use KeyedArchiver to serialize the custom object into binary data and write it to a file for caching.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> person <span class=\"operator\">=</span> <span class=\"type\">Person</span>(name: <span class=\"string\">&quot;Tom&quot;</span>, age: <span class=\"number\">20</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// Get file path</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> path <span class=\"operator\">=</span> <span class=\"type\">NSSearchPathForDirectoriesInDomains</span>(.documentDirectory, .userDomainMask, <span class=\"literal\">true</span>)[<span class=\"number\">0</span>] <span class=\"keyword\">as</span> <span class=\"type\">String</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> filePath <span class=\"operator\">=</span> path <span class=\"operator\">+</span> <span class=\"string\">&quot;/person.archive&quot;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// Serialize the object into binary data and write it to the file</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> data <span class=\"operator\">=</span> <span class=\"type\">NSKeyedArchiver</span>.archivedData(withRootObject: person)</span><br><span class=\"line\"><span class=\"keyword\">try?</span> data.write(to: <span class=\"type\">URL</span>(fileURLWithPath: filePath))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>Read object from cache</li>\n</ol>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Read binary data from file and deserialize into object</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> data <span class=\"operator\">=</span> <span class=\"keyword\">try?</span> <span class=\"type\">Data</span>(contentsOf: <span class=\"type\">URL</span>(fileURLWithPath: filePath))</span><br><span class=\"line\"><span class=\"keyword\">let</span> cachedPerson <span class=\"operator\">=</span> <span class=\"type\">NSKeyedUnarchiver</span>.unarchiveObject(with: data<span class=\"operator\">!</span>) <span class=\"keyword\">as?</span> <span class=\"type\">Person</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Name: <span class=\"subst\">\\(cachedPerson<span class=\"operator\">?</span>.name <span class=\"operator\">??</span> <span class=\"string\">&quot;&quot;</span>)</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Age: <span class=\"subst\">\\(cachedPerson<span class=\"operator\">?</span>.age <span class=\"operator\">??</span> <span class=\"number\">0</span>)</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>You need to pay attention to the following points when using KeyedArchiver:</p>\n<p>(1) Implement the encode and init(coder:) methods in the NSCoding protocol for custom objects so that KeyedArchiver can serialize objects into binary data.</p>\n<p>(2) KeyedArchiver will serialize objects into binary data, so you need to pay attention to memory consumption issues.</p>\n<p>(3) For some sensitive data, data security needs to be considered. Encryption algorithms can be used to protect data security.</p>\n<p>(4) Pay attention to errors when handling file reading and writing to avoid program crashes or data loss.</p>\n<h4 id=\"3-Keychain\"><a href=\"#3-Keychain\" class=\"headerlink\" title=\" 3. Keychain \"></a><font size=5 color=#4169E1> 3. Keychain </font></h4><p>Keychain is a persistent caching mechanism for iOS and part of the security framework in iOS, providing an API for storing and retrieving data in a secure manner.</p>\n<p><strong>Principle Description:</strong></p>\n<p>Data in Keychain is stored in a protected system area, which is completely isolated and data cannot be shared between different applications. Each application has its own Keychain, which can only access its own data and not other applications’ data. This isolation ensures the security of Keychain storage.</p>\n<p>It guarantees secure storage and retrieval of sensitive data between application launch and device restart. It stores data such as passwords, encryption keys, and other credentials in an encrypted manner so that it cannot be accessed by other applications and systems.</p>\n<p>For every application, KeyChain has two access areas, private area and public area. The private area is a Sandbox. Any data stored by this program is not visible to other programs, and other applications cannot access the data in this area. Using the Keychain API, data can be stored through key-value pairs and identified using service names and account names. This ensures that the data is associated with the application and can only be used by applications with the corresponding service name and account name. access.</p>\n<p>If you want to place the stored content in the public area so that multiple applications can jointly access some data, you can first declare the name of the public area. The official document calls this name “keychain access group”.</p>\n<p><strong>Usage Example:</strong></p>\n<p>The following is how to use Keychain and sample code (Swift):</p>\n<ol>\n<li>Import the Security framework</li>\n</ol>\n<p>Before using Keychain, you need to import the Security framework.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Security</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>Storing data</li>\n</ol>\n<p>Use the SecItemAdd method to store data into the Keychain.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> password <span class=\"operator\">=</span> <span class=\"string\">&quot;123456&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> data <span class=\"operator\">=</span> password.data(using: .utf8)<span class=\"operator\">!</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> query: [<span class=\"type\">String</span>: <span class=\"keyword\">Any</span>] <span class=\"operator\">=</span> [kSecClass <span class=\"keyword\">as</span> <span class=\"type\">String</span>: kSecClassGenericPassword,</span><br><span class=\"line\">                            kSecAttrAccount <span class=\"keyword\">as</span> <span class=\"type\">String</span>: <span class=\"string\">&quot;MyPassword&quot;</span>,</span><br><span class=\"line\">                            kSecValueData <span class=\"keyword\">as</span> <span class=\"type\">String</span>: data]</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">let</span> status <span class=\"operator\">=</span> <span class=\"type\">SecItemAdd</span>(query <span class=\"keyword\">as</span> <span class=\"type\">CFDictionary</span>, <span class=\"literal\">nil</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> status <span class=\"operator\">==</span> errSecSuccess &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Password saved to Keychain.&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Failed to save password to Keychain.&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>In the above code, we convert the string password into binary data and store it into Keychain. kSecClass represents the stored data type, kSecAttrAccount is the name used to identify the stored data, and kSecValueData is the stored binary data.</p>\n<ol start=\"3\">\n<li>Read data</li>\n</ol>\n<p>Use the SecItemCopyMatching method to read data from the Keychain.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> query: [<span class=\"type\">String</span>: <span class=\"keyword\">Any</span>] <span class=\"operator\">=</span> [kSecClass <span class=\"keyword\">as</span> <span class=\"type\">String</span>: kSecClassGenericPassword,</span><br><span class=\"line\">                            kSecAttrAccount <span class=\"keyword\">as</span> <span class=\"type\">String</span>: <span class=\"string\">&quot;MyPassword&quot;</span>,</span><br><span class=\"line\">                            kSecReturnData <span class=\"keyword\">as</span> <span class=\"type\">String</span>: kCFBooleanTrue<span class=\"operator\">!</span>,</span><br><span class=\"line\">                            kSecMatchLimit <span class=\"keyword\">as</span> <span class=\"type\">String</span>: kSecMatchLimitOne]</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">var</span> dataTypeRef: <span class=\"type\">AnyObject</span>?</span><br><span class=\"line\"><span class=\"keyword\">let</span> status <span class=\"operator\">=</span> <span class=\"type\">SecItemCopyMatching</span>(query <span class=\"keyword\">as</span> <span class=\"type\">CFDictionary</span>, <span class=\"operator\">&amp;</span>dataTypeRef)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> status <span class=\"operator\">==</span> errSecSuccess &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> retrievedData <span class=\"operator\">=</span> dataTypeRef <span class=\"keyword\">as?</span> <span class=\"type\">Data</span>,</span><br><span class=\"line\">        <span class=\"keyword\">let</span> password <span class=\"operator\">=</span> <span class=\"type\">String</span>(data: retrievedData, encoding: .utf8) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Retrieved password from Keychain: <span class=\"subst\">\\(password)</span>&quot;</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Failed to retrieve password from Keychain.&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Failed to retrieve password from Keychain.&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>In the above code, we use kSecReturnData to represent the returned stored binary data, and kSecMatchLimit to represent the amount of returned data. Here we only need to return one result, so we specify kSecMatchLimitOne.</p>\n<p><strong>Notice:</strong></p>\n<p>You need to pay attention to the following points when using Keychain:</p>\n<p>(1) Access to the Keychain should be restricted and ensure that only authorized users can access the data in the Keychain.</p>\n<p>(2) The data stored in Keychain are encrypted, so they cannot be accessed from the outside. If the data needs to be shared with other applications, you can use the group method to allow the program to be shared between apps, but the TeamID must be the same.</p>\n<p>(3) The data in the Keychain is not stored in the Sandbox of the App. Even if the App is deleted, the data is still stored in the Keychain. If you reinstall the app, you can also get data from the keychain.</p>\n<p>(4) Keychain is a secure storage mechanism, but it is not perfect. For example, a jailbroken device can access data stored in Keychain. Therefore, highly sensitive data should not be stored in Keychain. So sensitive information still needs to be used and stored with caution.</p>\n<p>(5) When handling Keychain, attention should be paid to handling possible errors to avoid program crash or data loss.</p>\n<p>Apple also provides a wealth of development documentation for keychain, including Keychain Services Programming Guide: the article includes keychain development using mac and ios.</p>\n<h4 id=\"4-Core-Data\"><a href=\"#4-Core-Data\" class=\"headerlink\" title=\" 4. Core Data \"></a><font size=5 color=#4169E1> 4. Core Data </font></h4><p>Core Data is a data management framework provided by Apple that provides a convenient way to manage and manipulate data in applications. The most important feature is persistent storage, which stores data in local files so that it can be used the next time the application starts.</p>\n<p><strong>Principle Description:</strong></p>\n<p>In Core Data, persistent storage is implemented using a SQLite database. SQLite is a lightweight embedded database that can be easily embedded into applications, providing an efficient and reliable way to store data.</p>\n<p><strong>Usage example:</strong></p>\n<p>Using Core Data for persistent storage requires the following steps:</p>\n<p>(1) Define the data model: Create a data model file in Xcode to define the entities, attributes, relationships, etc. of the data.</p>\n<p>(2) Create Core Data stack: Use the NSPersistentContainer class to create the Core Data stack, including managed object context, persistent storage coordinator and other components.</p>\n<p>(3) Store and read data: Use the NSManagedObjectContext class to operate the managed object context, and store and read data by operating elements such as entities and attributes.</p>\n<p>Here is a simple Swift code example that demonstrates how to use Core Data for data storage:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Create Core Data stack</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> container <span class=\"operator\">=</span> <span class=\"type\">NSPersistentContainer</span>(name: <span class=\"string\">&quot;DataModel&quot;</span>)</span><br><span class=\"line\">container.loadPersistentStores &#123; <span class=\"keyword\">_</span>, error <span class=\"keyword\">in</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> error <span class=\"operator\">=</span> error &#123;</span><br><span class=\"line\">         <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Failed to load persistent stores: <span class=\"subst\">\\(error)</span>&quot;</span>)</span><br><span class=\"line\">         <span class=\"keyword\">return</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//Create a managed object context</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> context <span class=\"operator\">=</span> container.viewContext</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//Create a Person entity object</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> person <span class=\"operator\">=</span> <span class=\"type\">NSEntityDescription</span>.insertNewObject(forEntityName: <span class=\"string\">&quot;Person&quot;</span>, into: context) <span class=\"keyword\">as!</span> <span class=\"type\">Person</span></span><br><span class=\"line\">person.name <span class=\"operator\">=</span> <span class=\"string\">&quot;Tom&quot;</span></span><br><span class=\"line\">person.age <span class=\"operator\">=</span> <span class=\"number\">30</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//Save data to persistent storage</span></span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">try</span> context.save()</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">     <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Failed to save context: <span class=\"subst\">\\(error)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//Read data from persistent storage</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> fetchRequest: <span class=\"type\">NSFetchRequest</span>&lt;<span class=\"type\">Person</span>&gt; <span class=\"operator\">=</span> <span class=\"type\">Person</span>.fetchRequest()</span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">let</span> persons <span class=\"operator\">=</span> <span class=\"keyword\">try</span> context.fetch(fetchRequest)</span><br><span class=\"line\">     <span class=\"keyword\">for</span> person <span class=\"keyword\">in</span> persons &#123;</span><br><span class=\"line\">         <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Name: <span class=\"subst\">\\(person.name<span class=\"operator\">!</span>)</span>, Age: <span class=\"subst\">\\(person.age)</span>&quot;</span>)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">     <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Failed to fetch persons: <span class=\"subst\">\\(error)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>When using Core Data for persistent storage, you need to pay attention to the following points:</p>\n<p>(1) When defining your data model, you should keep it as simple as possible. A complex data model can cause database operations to slow down and increase code complexity.</p>\n<p>(2) Core Data provides a variety of persistent storage methods, such as SQLite, binary files, XML files, etc. Developers need to choose the appropriate storage method based on specific needs.</p>\n<p>(3) Core Data is a thread-safe framework, but multi-threaded programming still requires attention to thread safety issues. It is recommended to create a separate managed object context in each thread.</p>\n<p>In short, Core Data is a powerful persistent storage in iOS.</p>\n<h4 id=\"5-Database-SQLite\"><a href=\"#5-Database-SQLite\" class=\"headerlink\" title=\" 5. Database (SQLite) \"></a><font size=5 color=#4169E1> 5. Database (SQLite) </font></h4><p>In iOS, SQLite is a lightweight database engine that is widely used for persistent storage. SQLite uses files as data storage media to store and read data by encoding and decoding data. In iOS, SQLite is used to develop native applications to store large amounts of structured data.</p>\n<p><strong>Principle Description</strong></p>\n<p>SQLite is a disk-based relational database that supports SQL language operations. SQLite stores all data in a single file that can be easily copied, backed up, and transferred. SQLite is characterized by occupying very little memory and being fast, making it suitable for resource-constrained environments such as mobile devices.</p>\n<p><strong>Usage example:</strong></p>\n<p>Using SQLite persistent cache requires the following steps:</p>\n<p>(1) Import the SQLite library: Import the SQLite library into the project, you can use CocoaPods or import it manually.</p>\n<p>(2) Create database: Create database files through the API provided by the SQLite library. If the database file already exists, you can open it directly, otherwise you can use SQL statements to create the database file.</p>\n<p>(3) Create a table: Use SQL statements to create a table and define field types and constraints for the table.</p>\n<p>(4) Execute SQL statements: Execute SQL statements through the API provided by SQLite, and perform add, delete, modify and query operations on the table.</p>\n<p>(5) Close the database: When the application exits or no longer uses the database, the database needs to be closed and resources released.</p>\n<p><strong>Sample code</strong></p>\n<p>Here is an example code for using SQLite for data storage, using Swift’s SQLite.swift library:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Import SQLite.swift library</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> SQLite</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//Open database connection</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> db <span class=\"operator\">=</span> <span class=\"keyword\">try!</span> <span class=\"type\">Connection</span>(<span class=\"string\">&quot;path/to/database.sqlite3&quot;</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//Define data table</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> users <span class=\"operator\">=</span> <span class=\"type\">Table</span>(<span class=\"string\">&quot;users&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> id <span class=\"operator\">=</span> <span class=\"type\">Expression</span>&lt;<span class=\"type\">Int64</span>&gt;(<span class=\"string\">&quot;id&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> name <span class=\"operator\">=</span> <span class=\"type\">Expression</span>&lt;<span class=\"type\">String</span>&gt;(<span class=\"string\">&quot;name&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> email <span class=\"operator\">=</span> <span class=\"type\">Expression</span>&lt;<span class=\"type\">String</span>&gt;(<span class=\"string\">&quot;email&quot;</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//Create table</span></span><br><span class=\"line\"><span class=\"keyword\">try</span><span class=\"operator\">!</span>db.run(users.create &#123; t <span class=\"keyword\">in</span></span><br><span class=\"line\">     t.column(id, primaryKey: <span class=\"literal\">true</span>)</span><br><span class=\"line\">     t.column(name)</span><br><span class=\"line\">     t.column(email, unique: <span class=\"literal\">true</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//Insert data</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> insert <span class=\"operator\">=</span> users.insert(name <span class=\"operator\">&lt;-</span> <span class=\"string\">&quot;Alice&quot;</span>, email <span class=\"operator\">&lt;-</span> <span class=\"string\">&quot;alice@example.com&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">try</span><span class=\"operator\">!</span>db.run(insert)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// Query data</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> user <span class=\"keyword\">in</span> <span class=\"keyword\">try!</span> db.prepare(users) &#123;</span><br><span class=\"line\">     <span class=\"built_in\">print</span>(<span class=\"string\">&quot;id: <span class=\"subst\">\\(user[id])</span>, name: <span class=\"subst\">\\(user[name])</span>, email: <span class=\"subst\">\\(user[email])</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// update data</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> alice <span class=\"operator\">=</span> users.filter(name <span class=\"operator\">==</span> <span class=\"string\">&quot;Alice&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">try!</span> db.run(alice.update(email <span class=\"operator\">&lt;-</span> <span class=\"string\">&quot;alice@example.org&quot;</span>))</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// delete data</span></span><br><span class=\"line\"><span class=\"keyword\">try!</span> db.run(alice.delete())</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//Close database connection</span></span><br><span class=\"line\">db.close()</span><br></pre></td></tr></table></figure>\n\n<p><strong>Notice:</strong></p>\n<p>When using SQLite persistent cache, you need to pay attention to the following things:</p>\n<p>(1) It is necessary to manually write SQL statements to perform data operations, which may be difficult for developers who are not familiar with the SQL language.</p>\n<p>(2) Thread safety needs to be ensured when performing data operations. You can use the transaction mechanism provided by SQLite to perform data operations to avoid data damage or loss.</p>\n<p>(3) SQLite database files can be easily copied, backed up and transferred, but data security issues need to be paid attention to.</p>\n<h4 id=\"6-Summary\"><a href=\"#6-Summary\" class=\"headerlink\" title=\" 6. Summary \"></a><font size=5 color=#4169E1> 6. Summary </font></h4><p>After the above introduction, we can summarize it as follows:</p>\n<p><strong>UserDefaults</strong></p>\n<p>UserDefaults is a lightweight persistent storage method suitable for storing some simple configuration information or user preferences. Its advantage is that it is simple and easy to use, without having to consider issues such as data models and data migration. But its disadvantage is that it can only store some basic data types and cannot support complex data structures.</p>\n<p>Best application scenario: Suitable for storing a small amount of simple configuration information or user preferences.</p>\n<p><strong>File Caching</strong></p>\n<p>File caching can store data in the local file system in the form of files, and is suitable for storing larger data, such as pictures, videos, etc. Its advantage is that it can flexibly control the cache strategy and cache size, which can effectively reduce the server load and improve the user experience. However, its disadvantage is that it requires manual management of cache, including cache path, cache file name, cache expiration time, etc. Improper management may lead to too many cache files and waste storage space.</p>\n<p>Best application scenario: Suitable for storing large amounts of non-sensitive data, such as pictures, audio, video (SDWebImage), etc.</p>\n<p><strong>Keychain</strong></p>\n<p>Keychain is a secure storage method that can encrypt sensitive information (such as user passwords, keys, etc.) and store it in the system to ensure data security. Its advantage is that it can protect sensitive information from being maliciously obtained, and it also provides a convenient API to manage this sensitive information. But its disadvantage is that it can only store smaller data and is not suitable for storing large amounts of data.</p>\n<p>Best application scenario: Suitable for storing sensitive information, such as user passwords, keys, etc.</p>\n<p><strong>Core Data</strong></p>\n<p>Core Data is an ORM (Object Relational Mapping) framework that can store data in a SQLite database. Its advantage is that it can easily manage data models, while providing powerful query, sorting, filtering and other functions, which is very suitable for storing complex data structures. However, its disadvantage is that the learning curve is steep, and you need to understand some concepts and APIs of Core Data. You also need to consider issues such as the migration of data models.</p>\n<p>Best application scenario: Suitable for storing complex data structures, such as contacts, music playlists, calendar events, etc.</p>\n<p><strong>Database (SQLite)</strong></p>\n<p>Database is a universal storage method that can store any type of data. It also provides rich query, sorting, filtering and other functions. But generally, we prefer to use it in scenarios that require complex storage and query. Such as contacts, music playlists, etc.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 5 minutes to finish reading this article.</em></font></p>\n<p>Essentially, no matter which caching method is used, it will eventually be stored on the disk in the form of a file, but the upper layer performs some kind of “encapsulation” or “abstraction”, so it is still classified. Currently, iOS local persistent Cache has the following forms:</p>\n<p><strong>1. UserDefaults</strong><br><strong>2. File Cache</strong><br><strong>3. Keychain</strong><br><strong>4. Core Data</strong><br><strong>5. Database (SQLite)</strong>    </p>\n<p>Note: What is discussed here is only the persistent cache. If we simply discuss the cache, strictly speaking, memory caches such as NSCache, NSURLCache, etc. should also be taken into consideration. Below we will introduce these caching mechanisms from the aspects of principles, sample code, precautions, etc.</p>\n<h4 id=\"1-UserDefaults\"><a href=\"#1-UserDefaults\" class=\"headerlink\" title=\" 1. UserDefaults \"></a><font size=5 color=#4169E1> 1. UserDefaults </font></h4><p>UserDefaults is a common lightweight caching mechanism in iOS. It can be used to store application configuration information, user preferences, temporary cache data, etc.</p>\n<p><strong>Principle description:</strong></p>\n<p>UserDefaults uses plist files for storage, which saves cached data in the file in the form of key-value. This file is stored in the Library&#x2F;Preferences directory in the application sandbox and is automatically managed by the system.</p>\n<p><strong>Sample Code:</strong></p>\n<p>UserDefaults is a singleton object and we can access it through its shared instance. Here is a sample code that uses UserDefaults to store and read:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Storing data</span></span><br><span class=\"line\"><span class=\"type\">UserDefaults</span>.standard.set(<span class=\"string\">&quot;hello&quot;</span>, forKey: <span class=\"string\">&quot;greeting&quot;</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// read data</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> greeting <span class=\"operator\">=</span> <span class=\"type\">UserDefaults</span>.standard.string(forKey: <span class=\"string\">&quot;greeting&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(greeting)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>Notice:</strong></p>\n<p>UserDefaults can only store basic data types and some object types in the Foundation framework, such as NSString, NSNumber, NSArray, NSDictionary, etc., and does not support storing custom object types.</p>\n<p>Since the stored data of UserDefaults is saved through plist files, for data that needs to be written frequently, it is best to use a more efficient storage method, such as Core Data, SQLite, etc.</p>\n<p>When using UserDefaults to store sensitive data, encryption is required to ensure data security.</p>\n<p><strong>Summarize:</strong></p>\n<p>UserDefaults is a common lightweight caching mechanism in iOS. It uses plist files for storage and supports the storage of basic data types and some object types in the Foundation framework. It is easy to use and simple, but you need to pay attention to the limitations of stored data types and data security. question.</p>\n<h4 id=\"2-File-Cache\"><a href=\"#2-File-Cache\" class=\"headerlink\" title=\" 2. File Cache \"></a><font size=5 color=#4169E1> 2. File Cache </font></h4><p>The file caching mechanism is also a common caching method.</p>\n<p><strong>Principle Description:</strong></p>\n<p>It is a method of permanently saving an application’s data in the local file system so that the data can be read quickly the next time the application is launched. This caching mechanism works by saving data to the application’s sandbox directory and reading that data the next time the application starts.</p>\n<p><strong>Sample Code:</strong></p>\n<p>Using the file persistence caching mechanism requires the use of the file system API in iOS, such as NSFileManager and NSFileHandle classes. These classes provide basic operations on the file system, such as creating, deleting, moving, and reading and writing files.</p>\n<p>The following is a sample code using the file persistence caching mechanism:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Get the application&#x27;s sandbox directory</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> documentsDirectory <span class=\"operator\">=</span> <span class=\"type\">FileManager</span>.default.urls(for: .documentDirectory, in: .userDomainMask).first<span class=\"operator\">!</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//Set the data to be saved</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> data <span class=\"operator\">=</span> <span class=\"string\">&quot;Hello, world!&quot;</span>.data(using: .utf8)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//Save data to file</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> fileURL <span class=\"operator\">=</span> documentsDirectory.appendingPathComponent(<span class=\"string\">&quot;cache.txt&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">try</span> data<span class=\"operator\">?</span>.write(to: fileURL)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">     <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Error writing to file: <span class=\"subst\">\\(error)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//Read data from file</span></span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">let</span> cachedData <span class=\"operator\">=</span> <span class=\"keyword\">try</span> <span class=\"type\">Data</span>(contentsOf: fileURL)</span><br><span class=\"line\">     <span class=\"keyword\">let</span> cachedString <span class=\"operator\">=</span> <span class=\"type\">String</span>(data: cachedData, encoding: .utf8)</span><br><span class=\"line\">     <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Cached string: <span class=\"subst\">\\(cachedString)</span>&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">     <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Error reading from file: <span class=\"subst\">\\(error)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>Notice:</strong></p>\n<p>When using the file persistence cache mechanism, you need to pay attention to the following points:</p>\n<ol>\n<li><p>You should try to avoid saving large amounts of data to the local file system, as this takes up storage space on the device.</p>\n</li>\n<li><p>For sensitive data, encryption algorithms should be used to protect the security of the data.</p>\n</li>\n<li><p>Cache files should be cleared regularly to avoid excessive cache files causing insufficient storage space on the device.</p>\n</li>\n<li><p>Care should be taken to handle errors when reading and writing files to avoid program crashes or data loss.</p>\n</li>\n</ol>\n<p>In addition, there is a special but commonly used method of file caching, which is KeyedArchiver.</p>\n<p><strong>KeyedArchiver</strong></p>\n<p>Used to serialize objects into binary data and write them to files for caching. KeyedArchiver provides a convenient way for developers to serialize custom objects into binary data and save it to the file system for later reading from the file.</p>\n<p>Here’s how to use KeyedArchiver:</p>\n<ol>\n<li>Implement NSCoding protocol</li>\n</ol>\n<p>First, the NSCoding protocol needs to be implemented in the custom object so that KeyedArchiver can serialize the object into binary data. The protocol includes two methods, encode and init(coder:), which are used to serialize objects into binary data and deserialize binary data into objects respectively.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>: <span class=\"title class_\">NSObject</span>, <span class=\"title class_\">NSCoding</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> age: <span class=\"type\">Int</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"params\">name</span>: <span class=\"type\">String</span>, <span class=\"params\">age</span>: <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.name <span class=\"operator\">=</span> name</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.age <span class=\"operator\">=</span> age</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">encode</span>(<span class=\"params\">with</span> <span class=\"params\">coder</span>: <span class=\"type\">NSCoder</span>) &#123;</span><br><span class=\"line\">        coder.encode(name, forKey: <span class=\"string\">&quot;name&quot;</span>)</span><br><span class=\"line\">        coder.encode(age, forKey: <span class=\"string\">&quot;age&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">required</span> <span class=\"keyword\">init?</span>(<span class=\"params\">coder</span>: <span class=\"type\">NSCoder</span>) &#123;</span><br><span class=\"line\">        name <span class=\"operator\">=</span> coder.decodeObject(forKey: <span class=\"string\">&quot;name&quot;</span>) <span class=\"keyword\">as?</span> <span class=\"type\">String</span> <span class=\"operator\">??</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">        age <span class=\"operator\">=</span> coder.decodeInteger(forKey: <span class=\"string\">&quot;age&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>Cache objects</li>\n</ol>\n<p>Next, use KeyedArchiver to serialize the custom object into binary data and write it to a file for caching.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> person <span class=\"operator\">=</span> <span class=\"type\">Person</span>(name: <span class=\"string\">&quot;Tom&quot;</span>, age: <span class=\"number\">20</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// Get file path</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> path <span class=\"operator\">=</span> <span class=\"type\">NSSearchPathForDirectoriesInDomains</span>(.documentDirectory, .userDomainMask, <span class=\"literal\">true</span>)[<span class=\"number\">0</span>] <span class=\"keyword\">as</span> <span class=\"type\">String</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> filePath <span class=\"operator\">=</span> path <span class=\"operator\">+</span> <span class=\"string\">&quot;/person.archive&quot;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// Serialize the object into binary data and write it to the file</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> data <span class=\"operator\">=</span> <span class=\"type\">NSKeyedArchiver</span>.archivedData(withRootObject: person)</span><br><span class=\"line\"><span class=\"keyword\">try?</span> data.write(to: <span class=\"type\">URL</span>(fileURLWithPath: filePath))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>Read object from cache</li>\n</ol>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Read binary data from file and deserialize into object</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> data <span class=\"operator\">=</span> <span class=\"keyword\">try?</span> <span class=\"type\">Data</span>(contentsOf: <span class=\"type\">URL</span>(fileURLWithPath: filePath))</span><br><span class=\"line\"><span class=\"keyword\">let</span> cachedPerson <span class=\"operator\">=</span> <span class=\"type\">NSKeyedUnarchiver</span>.unarchiveObject(with: data<span class=\"operator\">!</span>) <span class=\"keyword\">as?</span> <span class=\"type\">Person</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Name: <span class=\"subst\">\\(cachedPerson<span class=\"operator\">?</span>.name <span class=\"operator\">??</span> <span class=\"string\">&quot;&quot;</span>)</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Age: <span class=\"subst\">\\(cachedPerson<span class=\"operator\">?</span>.age <span class=\"operator\">??</span> <span class=\"number\">0</span>)</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>You need to pay attention to the following points when using KeyedArchiver:</p>\n<p>(1) Implement the encode and init(coder:) methods in the NSCoding protocol for custom objects so that KeyedArchiver can serialize objects into binary data.</p>\n<p>(2) KeyedArchiver will serialize objects into binary data, so you need to pay attention to memory consumption issues.</p>\n<p>(3) For some sensitive data, data security needs to be considered. Encryption algorithms can be used to protect data security.</p>\n<p>(4) Pay attention to errors when handling file reading and writing to avoid program crashes or data loss.</p>\n<h4 id=\"3-Keychain\"><a href=\"#3-Keychain\" class=\"headerlink\" title=\" 3. Keychain \"></a><font size=5 color=#4169E1> 3. Keychain </font></h4><p>Keychain is a persistent caching mechanism for iOS and part of the security framework in iOS, providing an API for storing and retrieving data in a secure manner.</p>\n<p><strong>Principle Description:</strong></p>\n<p>Data in Keychain is stored in a protected system area, which is completely isolated and data cannot be shared between different applications. Each application has its own Keychain, which can only access its own data and not other applications’ data. This isolation ensures the security of Keychain storage.</p>\n<p>It guarantees secure storage and retrieval of sensitive data between application launch and device restart. It stores data such as passwords, encryption keys, and other credentials in an encrypted manner so that it cannot be accessed by other applications and systems.</p>\n<p>For every application, KeyChain has two access areas, private area and public area. The private area is a Sandbox. Any data stored by this program is not visible to other programs, and other applications cannot access the data in this area. Using the Keychain API, data can be stored through key-value pairs and identified using service names and account names. This ensures that the data is associated with the application and can only be used by applications with the corresponding service name and account name. access.</p>\n<p>If you want to place the stored content in the public area so that multiple applications can jointly access some data, you can first declare the name of the public area. The official document calls this name “keychain access group”.</p>\n<p><strong>Usage Example:</strong></p>\n<p>The following is how to use Keychain and sample code (Swift):</p>\n<ol>\n<li>Import the Security framework</li>\n</ol>\n<p>Before using Keychain, you need to import the Security framework.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Security</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>Storing data</li>\n</ol>\n<p>Use the SecItemAdd method to store data into the Keychain.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> password <span class=\"operator\">=</span> <span class=\"string\">&quot;123456&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> data <span class=\"operator\">=</span> password.data(using: .utf8)<span class=\"operator\">!</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> query: [<span class=\"type\">String</span>: <span class=\"keyword\">Any</span>] <span class=\"operator\">=</span> [kSecClass <span class=\"keyword\">as</span> <span class=\"type\">String</span>: kSecClassGenericPassword,</span><br><span class=\"line\">                            kSecAttrAccount <span class=\"keyword\">as</span> <span class=\"type\">String</span>: <span class=\"string\">&quot;MyPassword&quot;</span>,</span><br><span class=\"line\">                            kSecValueData <span class=\"keyword\">as</span> <span class=\"type\">String</span>: data]</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">let</span> status <span class=\"operator\">=</span> <span class=\"type\">SecItemAdd</span>(query <span class=\"keyword\">as</span> <span class=\"type\">CFDictionary</span>, <span class=\"literal\">nil</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> status <span class=\"operator\">==</span> errSecSuccess &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Password saved to Keychain.&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Failed to save password to Keychain.&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>In the above code, we convert the string password into binary data and store it into Keychain. kSecClass represents the stored data type, kSecAttrAccount is the name used to identify the stored data, and kSecValueData is the stored binary data.</p>\n<ol start=\"3\">\n<li>Read data</li>\n</ol>\n<p>Use the SecItemCopyMatching method to read data from the Keychain.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> query: [<span class=\"type\">String</span>: <span class=\"keyword\">Any</span>] <span class=\"operator\">=</span> [kSecClass <span class=\"keyword\">as</span> <span class=\"type\">String</span>: kSecClassGenericPassword,</span><br><span class=\"line\">                            kSecAttrAccount <span class=\"keyword\">as</span> <span class=\"type\">String</span>: <span class=\"string\">&quot;MyPassword&quot;</span>,</span><br><span class=\"line\">                            kSecReturnData <span class=\"keyword\">as</span> <span class=\"type\">String</span>: kCFBooleanTrue<span class=\"operator\">!</span>,</span><br><span class=\"line\">                            kSecMatchLimit <span class=\"keyword\">as</span> <span class=\"type\">String</span>: kSecMatchLimitOne]</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">var</span> dataTypeRef: <span class=\"type\">AnyObject</span>?</span><br><span class=\"line\"><span class=\"keyword\">let</span> status <span class=\"operator\">=</span> <span class=\"type\">SecItemCopyMatching</span>(query <span class=\"keyword\">as</span> <span class=\"type\">CFDictionary</span>, <span class=\"operator\">&amp;</span>dataTypeRef)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> status <span class=\"operator\">==</span> errSecSuccess &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> retrievedData <span class=\"operator\">=</span> dataTypeRef <span class=\"keyword\">as?</span> <span class=\"type\">Data</span>,</span><br><span class=\"line\">        <span class=\"keyword\">let</span> password <span class=\"operator\">=</span> <span class=\"type\">String</span>(data: retrievedData, encoding: .utf8) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Retrieved password from Keychain: <span class=\"subst\">\\(password)</span>&quot;</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Failed to retrieve password from Keychain.&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Failed to retrieve password from Keychain.&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>In the above code, we use kSecReturnData to represent the returned stored binary data, and kSecMatchLimit to represent the amount of returned data. Here we only need to return one result, so we specify kSecMatchLimitOne.</p>\n<p><strong>Notice:</strong></p>\n<p>You need to pay attention to the following points when using Keychain:</p>\n<p>(1) Access to the Keychain should be restricted and ensure that only authorized users can access the data in the Keychain.</p>\n<p>(2) The data stored in Keychain are encrypted, so they cannot be accessed from the outside. If the data needs to be shared with other applications, you can use the group method to allow the program to be shared between apps, but the TeamID must be the same.</p>\n<p>(3) The data in the Keychain is not stored in the Sandbox of the App. Even if the App is deleted, the data is still stored in the Keychain. If you reinstall the app, you can also get data from the keychain.</p>\n<p>(4) Keychain is a secure storage mechanism, but it is not perfect. For example, a jailbroken device can access data stored in Keychain. Therefore, highly sensitive data should not be stored in Keychain. So sensitive information still needs to be used and stored with caution.</p>\n<p>(5) When handling Keychain, attention should be paid to handling possible errors to avoid program crash or data loss.</p>\n<p>Apple also provides a wealth of development documentation for keychain, including Keychain Services Programming Guide: the article includes keychain development using mac and ios.</p>\n<h4 id=\"4-Core-Data\"><a href=\"#4-Core-Data\" class=\"headerlink\" title=\" 4. Core Data \"></a><font size=5 color=#4169E1> 4. Core Data </font></h4><p>Core Data is a data management framework provided by Apple that provides a convenient way to manage and manipulate data in applications. The most important feature is persistent storage, which stores data in local files so that it can be used the next time the application starts.</p>\n<p><strong>Principle Description:</strong></p>\n<p>In Core Data, persistent storage is implemented using a SQLite database. SQLite is a lightweight embedded database that can be easily embedded into applications, providing an efficient and reliable way to store data.</p>\n<p><strong>Usage example:</strong></p>\n<p>Using Core Data for persistent storage requires the following steps:</p>\n<p>(1) Define the data model: Create a data model file in Xcode to define the entities, attributes, relationships, etc. of the data.</p>\n<p>(2) Create Core Data stack: Use the NSPersistentContainer class to create the Core Data stack, including managed object context, persistent storage coordinator and other components.</p>\n<p>(3) Store and read data: Use the NSManagedObjectContext class to operate the managed object context, and store and read data by operating elements such as entities and attributes.</p>\n<p>Here is a simple Swift code example that demonstrates how to use Core Data for data storage:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Create Core Data stack</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> container <span class=\"operator\">=</span> <span class=\"type\">NSPersistentContainer</span>(name: <span class=\"string\">&quot;DataModel&quot;</span>)</span><br><span class=\"line\">container.loadPersistentStores &#123; <span class=\"keyword\">_</span>, error <span class=\"keyword\">in</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> error <span class=\"operator\">=</span> error &#123;</span><br><span class=\"line\">         <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Failed to load persistent stores: <span class=\"subst\">\\(error)</span>&quot;</span>)</span><br><span class=\"line\">         <span class=\"keyword\">return</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//Create a managed object context</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> context <span class=\"operator\">=</span> container.viewContext</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//Create a Person entity object</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> person <span class=\"operator\">=</span> <span class=\"type\">NSEntityDescription</span>.insertNewObject(forEntityName: <span class=\"string\">&quot;Person&quot;</span>, into: context) <span class=\"keyword\">as!</span> <span class=\"type\">Person</span></span><br><span class=\"line\">person.name <span class=\"operator\">=</span> <span class=\"string\">&quot;Tom&quot;</span></span><br><span class=\"line\">person.age <span class=\"operator\">=</span> <span class=\"number\">30</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//Save data to persistent storage</span></span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">try</span> context.save()</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">     <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Failed to save context: <span class=\"subst\">\\(error)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//Read data from persistent storage</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> fetchRequest: <span class=\"type\">NSFetchRequest</span>&lt;<span class=\"type\">Person</span>&gt; <span class=\"operator\">=</span> <span class=\"type\">Person</span>.fetchRequest()</span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">let</span> persons <span class=\"operator\">=</span> <span class=\"keyword\">try</span> context.fetch(fetchRequest)</span><br><span class=\"line\">     <span class=\"keyword\">for</span> person <span class=\"keyword\">in</span> persons &#123;</span><br><span class=\"line\">         <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Name: <span class=\"subst\">\\(person.name<span class=\"operator\">!</span>)</span>, Age: <span class=\"subst\">\\(person.age)</span>&quot;</span>)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">     <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Failed to fetch persons: <span class=\"subst\">\\(error)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>When using Core Data for persistent storage, you need to pay attention to the following points:</p>\n<p>(1) When defining your data model, you should keep it as simple as possible. A complex data model can cause database operations to slow down and increase code complexity.</p>\n<p>(2) Core Data provides a variety of persistent storage methods, such as SQLite, binary files, XML files, etc. Developers need to choose the appropriate storage method based on specific needs.</p>\n<p>(3) Core Data is a thread-safe framework, but multi-threaded programming still requires attention to thread safety issues. It is recommended to create a separate managed object context in each thread.</p>\n<p>In short, Core Data is a powerful persistent storage in iOS.</p>\n<h4 id=\"5-Database-SQLite\"><a href=\"#5-Database-SQLite\" class=\"headerlink\" title=\" 5. Database (SQLite) \"></a><font size=5 color=#4169E1> 5. Database (SQLite) </font></h4><p>In iOS, SQLite is a lightweight database engine that is widely used for persistent storage. SQLite uses files as data storage media to store and read data by encoding and decoding data. In iOS, SQLite is used to develop native applications to store large amounts of structured data.</p>\n<p><strong>Principle Description</strong></p>\n<p>SQLite is a disk-based relational database that supports SQL language operations. SQLite stores all data in a single file that can be easily copied, backed up, and transferred. SQLite is characterized by occupying very little memory and being fast, making it suitable for resource-constrained environments such as mobile devices.</p>\n<p><strong>Usage example:</strong></p>\n<p>Using SQLite persistent cache requires the following steps:</p>\n<p>(1) Import the SQLite library: Import the SQLite library into the project, you can use CocoaPods or import it manually.</p>\n<p>(2) Create database: Create database files through the API provided by the SQLite library. If the database file already exists, you can open it directly, otherwise you can use SQL statements to create the database file.</p>\n<p>(3) Create a table: Use SQL statements to create a table and define field types and constraints for the table.</p>\n<p>(4) Execute SQL statements: Execute SQL statements through the API provided by SQLite, and perform add, delete, modify and query operations on the table.</p>\n<p>(5) Close the database: When the application exits or no longer uses the database, the database needs to be closed and resources released.</p>\n<p><strong>Sample code</strong></p>\n<p>Here is an example code for using SQLite for data storage, using Swift’s SQLite.swift library:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Import SQLite.swift library</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> SQLite</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//Open database connection</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> db <span class=\"operator\">=</span> <span class=\"keyword\">try!</span> <span class=\"type\">Connection</span>(<span class=\"string\">&quot;path/to/database.sqlite3&quot;</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//Define data table</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> users <span class=\"operator\">=</span> <span class=\"type\">Table</span>(<span class=\"string\">&quot;users&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> id <span class=\"operator\">=</span> <span class=\"type\">Expression</span>&lt;<span class=\"type\">Int64</span>&gt;(<span class=\"string\">&quot;id&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> name <span class=\"operator\">=</span> <span class=\"type\">Expression</span>&lt;<span class=\"type\">String</span>&gt;(<span class=\"string\">&quot;name&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> email <span class=\"operator\">=</span> <span class=\"type\">Expression</span>&lt;<span class=\"type\">String</span>&gt;(<span class=\"string\">&quot;email&quot;</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//Create table</span></span><br><span class=\"line\"><span class=\"keyword\">try</span><span class=\"operator\">!</span>db.run(users.create &#123; t <span class=\"keyword\">in</span></span><br><span class=\"line\">     t.column(id, primaryKey: <span class=\"literal\">true</span>)</span><br><span class=\"line\">     t.column(name)</span><br><span class=\"line\">     t.column(email, unique: <span class=\"literal\">true</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//Insert data</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> insert <span class=\"operator\">=</span> users.insert(name <span class=\"operator\">&lt;-</span> <span class=\"string\">&quot;Alice&quot;</span>, email <span class=\"operator\">&lt;-</span> <span class=\"string\">&quot;alice@example.com&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">try</span><span class=\"operator\">!</span>db.run(insert)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// Query data</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> user <span class=\"keyword\">in</span> <span class=\"keyword\">try!</span> db.prepare(users) &#123;</span><br><span class=\"line\">     <span class=\"built_in\">print</span>(<span class=\"string\">&quot;id: <span class=\"subst\">\\(user[id])</span>, name: <span class=\"subst\">\\(user[name])</span>, email: <span class=\"subst\">\\(user[email])</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// update data</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> alice <span class=\"operator\">=</span> users.filter(name <span class=\"operator\">==</span> <span class=\"string\">&quot;Alice&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">try!</span> db.run(alice.update(email <span class=\"operator\">&lt;-</span> <span class=\"string\">&quot;alice@example.org&quot;</span>))</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// delete data</span></span><br><span class=\"line\"><span class=\"keyword\">try!</span> db.run(alice.delete())</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//Close database connection</span></span><br><span class=\"line\">db.close()</span><br></pre></td></tr></table></figure>\n\n<p><strong>Notice:</strong></p>\n<p>When using SQLite persistent cache, you need to pay attention to the following things:</p>\n<p>(1) It is necessary to manually write SQL statements to perform data operations, which may be difficult for developers who are not familiar with the SQL language.</p>\n<p>(2) Thread safety needs to be ensured when performing data operations. You can use the transaction mechanism provided by SQLite to perform data operations to avoid data damage or loss.</p>\n<p>(3) SQLite database files can be easily copied, backed up and transferred, but data security issues need to be paid attention to.</p>\n<h4 id=\"6-Summary\"><a href=\"#6-Summary\" class=\"headerlink\" title=\" 6. Summary \"></a><font size=5 color=#4169E1> 6. Summary </font></h4><p>After the above introduction, we can summarize it as follows:</p>\n<p><strong>UserDefaults</strong></p>\n<p>UserDefaults is a lightweight persistent storage method suitable for storing some simple configuration information or user preferences. Its advantage is that it is simple and easy to use, without having to consider issues such as data models and data migration. But its disadvantage is that it can only store some basic data types and cannot support complex data structures.</p>\n<p>Best application scenario: Suitable for storing a small amount of simple configuration information or user preferences.</p>\n<p><strong>File Caching</strong></p>\n<p>File caching can store data in the local file system in the form of files, and is suitable for storing larger data, such as pictures, videos, etc. Its advantage is that it can flexibly control the cache strategy and cache size, which can effectively reduce the server load and improve the user experience. However, its disadvantage is that it requires manual management of cache, including cache path, cache file name, cache expiration time, etc. Improper management may lead to too many cache files and waste storage space.</p>\n<p>Best application scenario: Suitable for storing large amounts of non-sensitive data, such as pictures, audio, video (SDWebImage), etc.</p>\n<p><strong>Keychain</strong></p>\n<p>Keychain is a secure storage method that can encrypt sensitive information (such as user passwords, keys, etc.) and store it in the system to ensure data security. Its advantage is that it can protect sensitive information from being maliciously obtained, and it also provides a convenient API to manage this sensitive information. But its disadvantage is that it can only store smaller data and is not suitable for storing large amounts of data.</p>\n<p>Best application scenario: Suitable for storing sensitive information, such as user passwords, keys, etc.</p>\n<p><strong>Core Data</strong></p>\n<p>Core Data is an ORM (Object Relational Mapping) framework that can store data in a SQLite database. Its advantage is that it can easily manage data models, while providing powerful query, sorting, filtering and other functions, which is very suitable for storing complex data structures. However, its disadvantage is that the learning curve is steep, and you need to understand some concepts and APIs of Core Data. You also need to consider issues such as the migration of data models.</p>\n<p>Best application scenario: Suitable for storing complex data structures, such as contacts, music playlists, calendar events, etc.</p>\n<p><strong>Database (SQLite)</strong></p>\n<p>Database is a universal storage method that can store any type of data. It also provides rich query, sorting, filtering and other functions. But generally, we prefer to use it in scenarios that require complex storage and query. Such as contacts, music playlists, etc.</p>\n"},{"title":"00. Common Git Commands","date":"2023-11-16T14:00:00.000Z","_content":"\n<font color=gray size=2>*It will take about 5 minutes to finish reading this article.*</font>\n\n#### <font size=5 color=#4169E1>1. Code Merge Commands</font> \n\n<font size=4>**1.1 git merge**</font> \n\nFor merging changes from one branch to another, execute the following command on the target branch. It will create a new merge commit that merges the history of the two branches together. It generates a new merge commit on the target branch, preserving the commit history of the original branch.\n\n```Swift\ngit merge <source_branch> \n```\n\nExample:\n\n```Swift\n      A---B---C  (master)\n           \\\n            D---E  (feature-branch)\n```\nAfter executing git merge master:\n\n```Swift\n      A---B---C---F  (master)\n           \\     /\n            D---E  (feature-branch)\n```\n\nF is a new merge commit that merges the changes from the master branch and the feature-branch branch.\n\n\n**How to handle conflicts:**\n\nUse the merge command to merge branches, resolve conflicts, and execute git add . and git commit -m 'fix conflict'. A commit will be generated at this time.\n\n<font size=4>**1.2 git rebase**</font> \n\nUsed to reapply changes from one branch to another branch. Execute the following command on the target branch. It will stage the commits of the target branch, then apply the commits of the source branch to the target branch one by one, and finally re-apply the previously staged commits on it. The git rebase command will make the commit history of the target branch more linear, making it appear as if changes to the source branch were made directly on the target branch.\n\n```Swift\ngit rebase <source_branch>\n```\n\n\nExample:\n\n```Swift\n      A---B---C  (master)\n           \\\n            D---E  (feature-branch)\n```\nAfter executing git rebase feature-branch:\n\n```Swift\n      A---B---C---D'---E'  (feature-branch)\n                     |\n                   (master)\n```\n\nHere, D' and E' are new commits created via git rebase, they are copies of D and E respectively, and they are rebuilt directly on the latest commit C of the master branch.\n\n**How to handle conflicts:**\n\nUse the rebase command to merge branches, resolve conflicts, and execute git add . and git rebase --continue. No additional commits will be generated. The advantage of this is that it is 'clean' and there will be no meaningless commits to resolve the branch on the branch; the disadvantage is that if there are multiple commits in the merged branch, multiple conflicts need to be handled repeatedly.\n\n<font size=4>**1.3 The difference between 'git rebase' and 'git merge'**</font> \n\n1. Submission history:\nmerge: A new merge commit will be created on the target branch, retaining the history of the two branches.\nRebase: Apply the commits of the source branch to the target branch one by one, creating a more linear commit history.\n\n1. Conflict handling:\nmerge: If a conflict occurs during the merge process, Git will stop and wait for the user to resolve the conflict before the merge is committed.\nRebase: Conflicts are usually resolved with each submission of the app, so users need to resolve them one by one before continuing with the rebase process.\n\n1. Branch retention:\nmerge: The submission history of the original branch is retained, and the branch relationship is clearly visible.\nRebase: \"Move\" the commits from the source branch to the target branch. It looks like modifications were made on the target branch, and the branch relationship becomes more linear.\n\n1. Recommended use:\nmerge: Suitable for merging public branches, such as main branches or long-term branches.\nRebase: Suitable for updating local branches to keep the submission history clean.\nChoosing to use git merge or git rebase depends on the specifics of your project and the preferences of your development team. It’s important to understand their differences and choose the right strategy for the right scenario.\n\n\n<font size=4>**1.4 git cherry-pick**</font> \n\nThis command is used to apply the specified commit to the current branch. This can be used to selectively introduce changes from a certain commit into the current branch without merging the entire branch.\n\n```Swift\ngit cherry-pick <commit>\n```\n\nExample:\nSuppose you have the following commit history:\n\n```Swift\nA---B---C---D  (master)\n     \\\n      E---F---G  (feature-branch)\n```\n\nIf you want to apply commit F on the feature-branch branch to the master branch, you can execute:\n\n```Swift\ngit checkout master\ngit cherry-pick F\n```\nThis will create a new commit on the master branch containing the changes from commit F on feature-branch:\n\n```Swift\nA---B---C---D---F'  (master)\n     \\\n      E---F---G  (feature-branch)\n```\nHere F' is a new commit that contains F's changes.\n\nPrecautions:\n1. git cherry-pick can be used not only for the current branch, but also for copying commits between different branches.\n\n2. If a conflict occurs when applying a commit, Git will pause the cherry-pick process and require you to manually resolve the conflict before continuing.\n\n3. git cherry-pick can not only accept the hash value of a single commit, but also a range of commits, such as git cherry-pick A..D.\n\n4. If you only want to apply the committed changes to the working directory without creating a new commit, you can use the --no-commit option: git cherry-pick --no-commit <commit>.\n\nIn short, git cherry-pick is a powerful command that allows you to selectively introduce the changes of a certain commit into the current branch without merging the entire branch.\n\n\n#### <font size=5 color=#4169E1>2. Check or View Commands</font> \n\n<font size=4>**2.1 git status**</font>\n\n'git status' is used to view the status of the workspace and staging area, showing which files have been modified, which files have been staged, and whether there are untracked files.\n\n<font size=4>**2.2 git log**</font> \n\nUsed to view submission history and display detailed information of all submissions, including submitter, submission time, submission information, etc.\n\n{% img /assets/iOS/Tools&Configurations/00/03_gitlog.png %}   \n\n<font size=4>**2.3 git shortlog**</font>\n\nUsed to generate a brief log of submitters and display submission information grouped by submitters.\n\n{% img /assets/iOS/Tools&Configurations/00/04_gitshortlog.png %}   \n\n<font size=4>**2.4 git show**</font>\n\nUsed to display details of a single commit, including changes to the commit's content.\n\n```Swift\ngit show 1eb6b3788eaf9545c4b44aa5ef6193a9613abbf4\n```\n\n{% img /assets/iOS/Tools&Configurations/00/05_gitshow.png %} \n\n<font size=4>**2.5 git blame**</font>\n\nUsed to display the modification history of a file line by line, showing who modified each line in which commit.\n\n```Swift\ngit blame LocalPods/CodeFavorites/CodeFavorites.podspec\n```\n\n{% img /assets/iOS/Tools&Configurations/00/06_gitblame.png %} \n\n<font size=4>**2.6 git reflog**</font>\n\nUsed to display the recent commit history of the current branch.\n\n{% img /assets/iOS/Tools&Configurations/00/07_gitreflog.png %} \n\n<font size=4>**2.7 git shortlog -sn**</font>\n\nDisplay all users who have submitted, sorted by number of submissions\n\n{% img /assets/iOS/Tools&Configurations/00/08_gitshortlogsn.png %} \n\n<font size=4>**2.8 git diff**</font>\n\n**`git diff`**\n\nShow the difference between workspace and staging area.\n\n**`git diff --cached <file>`**\n\nDisplays the difference between the staging area and the previous commit, for the specified file.\n\n\n**`git diff HEAD`**\n\nDisplays the differences between the workspace and the latest commit of the current branch.\n\n**`git diff first-branch…second-branch`**\n\nShows the differences between two branches. first-branch and second-branch are branch names or commit hashes.\n\n**`git diff --shortstat \"@{0 day ago}\"`**\n\nShows how many lines of code you wrote today.\n\n\n\n#### <font size=5 color=#4169E1>3. Revoke Commonds </font> \n\n<font size=4>**3.1 git reset**</font>\n\nUsed to undo a commit, modify the location of a branch, or unstage a file. It is a powerful command, but it needs to be used with caution as it can change the history of the repository.\n\n**`git reset <file>`**\n\nUsed to reset the specified file in the staging area so that it is consistent with the version submitted (commit), but does not affect the workspace.\n  \n**`git reset --hard`**\n\n- Used to reset the staging area and workspace to make them consistent with the version of the last commit. This operation will clear all uncommitted changes in the workspace. Use with caution. `git reset --soft` is recommended.\n\n**`git reset <commit>`**\n\nUsed to reset the pointer of the current branch to the specified commit and reset the staging area, but does not affect the work area.\n\n**`git reset --hard <commit>`**\n\nUsed to reset the HEAD and pointer of the current branch to the specified commit, and reset the staging area and work area to make them consistent with the specified commit. Use with caution as it clears all uncommitted changes from the workspace.\n\n**`git reset --keep <commit>`**\n\nUsed to reset the current HEAD to the specified commit, but keep the staging area and work area unchanged. This moves the branch pointer to the specified commit, but does not change your working directory or affect the staging area.\n\n**Notice:**\n\n- The `--hard` option is a potentially dangerous option because it removes all uncommitted changes from the workspace. Make sure you understand this and back up important changes before use.\n\n<font size=4>**3.1 git revert**</font>\n\nUsed to undo a commit. It creates a new commit, undoes the changes of the specified commit, and applies the new commit to the current branch. This way, it doesn't change the past commit history, but adds a new commit after it that undoes the previous changes.\n\n\n#### <font size=5 color=#4169E1>4. Code Submission Commonds</font> \n\n**`git commit -m \"...\"`** \n\nSubmit all changes in the staging area to the local warehouse and add a commit message. Usually used to commit simple changes, where the string after the `-m` option is the commit message.\n\n**`git commit file1 file2 ... -m \"...\"`**\n\nSubmit the file changes specified in the staging area to the local warehouse and add a commit message.\n\n**`git commit --amend -m \"...\"`**\n\nUse a new commit to replace the previous submission, usually used to modify the submission information of the previous submission. If there are no new changes to the code, it is used to rewrite the submission information of the last commit.\n\n```Swift\ngit add .\ngit commit -m \"Initial commit\"\n# After making code modifications\ngit add .\ngit commit --amend -m \"Improved initial commit\"\n\n```\n\n#### <font size=5 color=gray>*Reference*</font>\n[1] https://blog.csdn.net/CSDN_33901573/article/details/121111157\n \n","source":"_posts/iOS/04. Tools & Configurations/00. Common Git Commands.md","raw":"---\ntitle: 00. Common Git Commands\ndate: 2023-11-16 15:00:00\ncategories: \n- [iOS, 04. Tools & Configurations]\ntags:\n- git\n---\n\n<font color=gray size=2>*It will take about 5 minutes to finish reading this article.*</font>\n\n#### <font size=5 color=#4169E1>1. Code Merge Commands</font> \n\n<font size=4>**1.1 git merge**</font> \n\nFor merging changes from one branch to another, execute the following command on the target branch. It will create a new merge commit that merges the history of the two branches together. It generates a new merge commit on the target branch, preserving the commit history of the original branch.\n\n```Swift\ngit merge <source_branch> \n```\n\nExample:\n\n```Swift\n      A---B---C  (master)\n           \\\n            D---E  (feature-branch)\n```\nAfter executing git merge master:\n\n```Swift\n      A---B---C---F  (master)\n           \\     /\n            D---E  (feature-branch)\n```\n\nF is a new merge commit that merges the changes from the master branch and the feature-branch branch.\n\n\n**How to handle conflicts:**\n\nUse the merge command to merge branches, resolve conflicts, and execute git add . and git commit -m 'fix conflict'. A commit will be generated at this time.\n\n<font size=4>**1.2 git rebase**</font> \n\nUsed to reapply changes from one branch to another branch. Execute the following command on the target branch. It will stage the commits of the target branch, then apply the commits of the source branch to the target branch one by one, and finally re-apply the previously staged commits on it. The git rebase command will make the commit history of the target branch more linear, making it appear as if changes to the source branch were made directly on the target branch.\n\n```Swift\ngit rebase <source_branch>\n```\n\n\nExample:\n\n```Swift\n      A---B---C  (master)\n           \\\n            D---E  (feature-branch)\n```\nAfter executing git rebase feature-branch:\n\n```Swift\n      A---B---C---D'---E'  (feature-branch)\n                     |\n                   (master)\n```\n\nHere, D' and E' are new commits created via git rebase, they are copies of D and E respectively, and they are rebuilt directly on the latest commit C of the master branch.\n\n**How to handle conflicts:**\n\nUse the rebase command to merge branches, resolve conflicts, and execute git add . and git rebase --continue. No additional commits will be generated. The advantage of this is that it is 'clean' and there will be no meaningless commits to resolve the branch on the branch; the disadvantage is that if there are multiple commits in the merged branch, multiple conflicts need to be handled repeatedly.\n\n<font size=4>**1.3 The difference between 'git rebase' and 'git merge'**</font> \n\n1. Submission history:\nmerge: A new merge commit will be created on the target branch, retaining the history of the two branches.\nRebase: Apply the commits of the source branch to the target branch one by one, creating a more linear commit history.\n\n1. Conflict handling:\nmerge: If a conflict occurs during the merge process, Git will stop and wait for the user to resolve the conflict before the merge is committed.\nRebase: Conflicts are usually resolved with each submission of the app, so users need to resolve them one by one before continuing with the rebase process.\n\n1. Branch retention:\nmerge: The submission history of the original branch is retained, and the branch relationship is clearly visible.\nRebase: \"Move\" the commits from the source branch to the target branch. It looks like modifications were made on the target branch, and the branch relationship becomes more linear.\n\n1. Recommended use:\nmerge: Suitable for merging public branches, such as main branches or long-term branches.\nRebase: Suitable for updating local branches to keep the submission history clean.\nChoosing to use git merge or git rebase depends on the specifics of your project and the preferences of your development team. It’s important to understand their differences and choose the right strategy for the right scenario.\n\n\n<font size=4>**1.4 git cherry-pick**</font> \n\nThis command is used to apply the specified commit to the current branch. This can be used to selectively introduce changes from a certain commit into the current branch without merging the entire branch.\n\n```Swift\ngit cherry-pick <commit>\n```\n\nExample:\nSuppose you have the following commit history:\n\n```Swift\nA---B---C---D  (master)\n     \\\n      E---F---G  (feature-branch)\n```\n\nIf you want to apply commit F on the feature-branch branch to the master branch, you can execute:\n\n```Swift\ngit checkout master\ngit cherry-pick F\n```\nThis will create a new commit on the master branch containing the changes from commit F on feature-branch:\n\n```Swift\nA---B---C---D---F'  (master)\n     \\\n      E---F---G  (feature-branch)\n```\nHere F' is a new commit that contains F's changes.\n\nPrecautions:\n1. git cherry-pick can be used not only for the current branch, but also for copying commits between different branches.\n\n2. If a conflict occurs when applying a commit, Git will pause the cherry-pick process and require you to manually resolve the conflict before continuing.\n\n3. git cherry-pick can not only accept the hash value of a single commit, but also a range of commits, such as git cherry-pick A..D.\n\n4. If you only want to apply the committed changes to the working directory without creating a new commit, you can use the --no-commit option: git cherry-pick --no-commit <commit>.\n\nIn short, git cherry-pick is a powerful command that allows you to selectively introduce the changes of a certain commit into the current branch without merging the entire branch.\n\n\n#### <font size=5 color=#4169E1>2. Check or View Commands</font> \n\n<font size=4>**2.1 git status**</font>\n\n'git status' is used to view the status of the workspace and staging area, showing which files have been modified, which files have been staged, and whether there are untracked files.\n\n<font size=4>**2.2 git log**</font> \n\nUsed to view submission history and display detailed information of all submissions, including submitter, submission time, submission information, etc.\n\n{% img /assets/iOS/Tools&Configurations/00/03_gitlog.png %}   \n\n<font size=4>**2.3 git shortlog**</font>\n\nUsed to generate a brief log of submitters and display submission information grouped by submitters.\n\n{% img /assets/iOS/Tools&Configurations/00/04_gitshortlog.png %}   \n\n<font size=4>**2.4 git show**</font>\n\nUsed to display details of a single commit, including changes to the commit's content.\n\n```Swift\ngit show 1eb6b3788eaf9545c4b44aa5ef6193a9613abbf4\n```\n\n{% img /assets/iOS/Tools&Configurations/00/05_gitshow.png %} \n\n<font size=4>**2.5 git blame**</font>\n\nUsed to display the modification history of a file line by line, showing who modified each line in which commit.\n\n```Swift\ngit blame LocalPods/CodeFavorites/CodeFavorites.podspec\n```\n\n{% img /assets/iOS/Tools&Configurations/00/06_gitblame.png %} \n\n<font size=4>**2.6 git reflog**</font>\n\nUsed to display the recent commit history of the current branch.\n\n{% img /assets/iOS/Tools&Configurations/00/07_gitreflog.png %} \n\n<font size=4>**2.7 git shortlog -sn**</font>\n\nDisplay all users who have submitted, sorted by number of submissions\n\n{% img /assets/iOS/Tools&Configurations/00/08_gitshortlogsn.png %} \n\n<font size=4>**2.8 git diff**</font>\n\n**`git diff`**\n\nShow the difference between workspace and staging area.\n\n**`git diff --cached <file>`**\n\nDisplays the difference between the staging area and the previous commit, for the specified file.\n\n\n**`git diff HEAD`**\n\nDisplays the differences between the workspace and the latest commit of the current branch.\n\n**`git diff first-branch…second-branch`**\n\nShows the differences between two branches. first-branch and second-branch are branch names or commit hashes.\n\n**`git diff --shortstat \"@{0 day ago}\"`**\n\nShows how many lines of code you wrote today.\n\n\n\n#### <font size=5 color=#4169E1>3. Revoke Commonds </font> \n\n<font size=4>**3.1 git reset**</font>\n\nUsed to undo a commit, modify the location of a branch, or unstage a file. It is a powerful command, but it needs to be used with caution as it can change the history of the repository.\n\n**`git reset <file>`**\n\nUsed to reset the specified file in the staging area so that it is consistent with the version submitted (commit), but does not affect the workspace.\n  \n**`git reset --hard`**\n\n- Used to reset the staging area and workspace to make them consistent with the version of the last commit. This operation will clear all uncommitted changes in the workspace. Use with caution. `git reset --soft` is recommended.\n\n**`git reset <commit>`**\n\nUsed to reset the pointer of the current branch to the specified commit and reset the staging area, but does not affect the work area.\n\n**`git reset --hard <commit>`**\n\nUsed to reset the HEAD and pointer of the current branch to the specified commit, and reset the staging area and work area to make them consistent with the specified commit. Use with caution as it clears all uncommitted changes from the workspace.\n\n**`git reset --keep <commit>`**\n\nUsed to reset the current HEAD to the specified commit, but keep the staging area and work area unchanged. This moves the branch pointer to the specified commit, but does not change your working directory or affect the staging area.\n\n**Notice:**\n\n- The `--hard` option is a potentially dangerous option because it removes all uncommitted changes from the workspace. Make sure you understand this and back up important changes before use.\n\n<font size=4>**3.1 git revert**</font>\n\nUsed to undo a commit. It creates a new commit, undoes the changes of the specified commit, and applies the new commit to the current branch. This way, it doesn't change the past commit history, but adds a new commit after it that undoes the previous changes.\n\n\n#### <font size=5 color=#4169E1>4. Code Submission Commonds</font> \n\n**`git commit -m \"...\"`** \n\nSubmit all changes in the staging area to the local warehouse and add a commit message. Usually used to commit simple changes, where the string after the `-m` option is the commit message.\n\n**`git commit file1 file2 ... -m \"...\"`**\n\nSubmit the file changes specified in the staging area to the local warehouse and add a commit message.\n\n**`git commit --amend -m \"...\"`**\n\nUse a new commit to replace the previous submission, usually used to modify the submission information of the previous submission. If there are no new changes to the code, it is used to rewrite the submission information of the last commit.\n\n```Swift\ngit add .\ngit commit -m \"Initial commit\"\n# After making code modifications\ngit add .\ngit commit --amend -m \"Improved initial commit\"\n\n```\n\n#### <font size=5 color=gray>*Reference*</font>\n[1] https://blog.csdn.net/CSDN_33901573/article/details/121111157\n \n","slug":"iOS/04. Tools & Configurations/00. Common Git Commands","published":1,"updated":"2023-11-25T10:00:14.566Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr62004uvu0m9rlhcbqf","content":"<p><font color=gray size=2><em>It will take about 5 minutes to finish reading this article.</em></font></p>\n<h4 id=\"1-Code-Merge-Commands\"><a href=\"#1-Code-Merge-Commands\" class=\"headerlink\" title=\"1. Code Merge Commands\"></a><font size=5 color=#4169E1>1. Code Merge Commands</font></h4><p><font size=4><strong>1.1 git merge</strong></font> </p>\n<p>For merging changes from one branch to another, execute the following command on the target branch. It will create a new merge commit that merges the history of the two branches together. It generates a new merge commit on the target branch, preserving the commit history of the original branch.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge <span class=\"operator\">&lt;</span>source_branch<span class=\"operator\">&gt;</span> </span><br></pre></td></tr></table></figure>\n\n<p>Example:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">A</span><span class=\"operator\">---</span><span class=\"type\">B</span><span class=\"operator\">---</span><span class=\"type\">C</span>  (master)</span><br><span class=\"line\">     \\</span><br><span class=\"line\">      <span class=\"type\">D</span><span class=\"operator\">---</span><span class=\"type\">E</span>  (feature<span class=\"operator\">-</span>branch)</span><br></pre></td></tr></table></figure>\n<p>After executing git merge master:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">A</span><span class=\"operator\">---</span><span class=\"type\">B</span><span class=\"operator\">---</span><span class=\"type\">C</span><span class=\"operator\">---</span><span class=\"type\">F</span>  (master)</span><br><span class=\"line\">     \\     <span class=\"operator\">/</span></span><br><span class=\"line\">      <span class=\"type\">D</span><span class=\"operator\">---</span><span class=\"type\">E</span>  (feature<span class=\"operator\">-</span>branch)</span><br></pre></td></tr></table></figure>\n\n<p>F is a new merge commit that merges the changes from the master branch and the feature-branch branch.</p>\n<p><strong>How to handle conflicts:</strong></p>\n<p>Use the merge command to merge branches, resolve conflicts, and execute git add . and git commit -m ‘fix conflict’. A commit will be generated at this time.</p>\n<p><font size=4><strong>1.2 git rebase</strong></font> </p>\n<p>Used to reapply changes from one branch to another branch. Execute the following command on the target branch. It will stage the commits of the target branch, then apply the commits of the source branch to the target branch one by one, and finally re-apply the previously staged commits on it. The git rebase command will make the commit history of the target branch more linear, making it appear as if changes to the source branch were made directly on the target branch.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rebase <span class=\"operator\">&lt;</span>source_branch<span class=\"operator\">&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<p>Example:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">A</span><span class=\"operator\">---</span><span class=\"type\">B</span><span class=\"operator\">---</span><span class=\"type\">C</span>  (master)</span><br><span class=\"line\">     \\</span><br><span class=\"line\">      <span class=\"type\">D</span><span class=\"operator\">---</span><span class=\"type\">E</span>  (feature<span class=\"operator\">-</span>branch)</span><br></pre></td></tr></table></figure>\n<p>After executing git rebase feature-branch:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">A</span><span class=\"operator\">---</span><span class=\"type\">B</span><span class=\"operator\">---</span><span class=\"type\">C</span><span class=\"operator\">---</span><span class=\"type\">D</span>&#x27;<span class=\"operator\">---</span><span class=\"type\">E</span>&#x27;  (feature<span class=\"operator\">-</span>branch)</span><br><span class=\"line\">               <span class=\"operator\">|</span></span><br><span class=\"line\">             (master)</span><br></pre></td></tr></table></figure>\n\n<p>Here, D’ and E’ are new commits created via git rebase, they are copies of D and E respectively, and they are rebuilt directly on the latest commit C of the master branch.</p>\n<p><strong>How to handle conflicts:</strong></p>\n<p>Use the rebase command to merge branches, resolve conflicts, and execute git add . and git rebase –continue. No additional commits will be generated. The advantage of this is that it is ‘clean’ and there will be no meaningless commits to resolve the branch on the branch; the disadvantage is that if there are multiple commits in the merged branch, multiple conflicts need to be handled repeatedly.</p>\n<p><font size=4><strong>1.3 The difference between ‘git rebase’ and ‘git merge’</strong></font> </p>\n<ol>\n<li><p>Submission history:<br>merge: A new merge commit will be created on the target branch, retaining the history of the two branches.<br>Rebase: Apply the commits of the source branch to the target branch one by one, creating a more linear commit history.</p>\n</li>\n<li><p>Conflict handling:<br>merge: If a conflict occurs during the merge process, Git will stop and wait for the user to resolve the conflict before the merge is committed.<br>Rebase: Conflicts are usually resolved with each submission of the app, so users need to resolve them one by one before continuing with the rebase process.</p>\n</li>\n<li><p>Branch retention:<br>merge: The submission history of the original branch is retained, and the branch relationship is clearly visible.<br>Rebase: “Move” the commits from the source branch to the target branch. It looks like modifications were made on the target branch, and the branch relationship becomes more linear.</p>\n</li>\n<li><p>Recommended use:<br>merge: Suitable for merging public branches, such as main branches or long-term branches.<br>Rebase: Suitable for updating local branches to keep the submission history clean.<br>Choosing to use git merge or git rebase depends on the specifics of your project and the preferences of your development team. It’s important to understand their differences and choose the right strategy for the right scenario.</p>\n</li>\n</ol>\n<p><font size=4><strong>1.4 git cherry-pick</strong></font> </p>\n<p>This command is used to apply the specified commit to the current branch. This can be used to selectively introduce changes from a certain commit into the current branch without merging the entire branch.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git cherry<span class=\"operator\">-</span>pick <span class=\"operator\">&lt;</span>commit<span class=\"operator\">&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Example:<br>Suppose you have the following commit history:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">A</span><span class=\"operator\">---</span><span class=\"type\">B</span><span class=\"operator\">---</span><span class=\"type\">C</span><span class=\"operator\">---</span><span class=\"type\">D</span>  (master)</span><br><span class=\"line\">     \\</span><br><span class=\"line\">      <span class=\"type\">E</span><span class=\"operator\">---</span><span class=\"type\">F</span><span class=\"operator\">---</span><span class=\"type\">G</span>  (feature<span class=\"operator\">-</span>branch)</span><br></pre></td></tr></table></figure>\n\n<p>If you want to apply commit F on the feature-branch branch to the master branch, you can execute:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout master</span><br><span class=\"line\">git cherry<span class=\"operator\">-</span>pick <span class=\"type\">F</span></span><br></pre></td></tr></table></figure>\n<p>This will create a new commit on the master branch containing the changes from commit F on feature-branch:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">A</span><span class=\"operator\">---</span><span class=\"type\">B</span><span class=\"operator\">---</span><span class=\"type\">C</span><span class=\"operator\">---</span><span class=\"type\">D</span><span class=\"operator\">---</span><span class=\"type\">F</span>&#x27;  (master)</span><br><span class=\"line\">     \\</span><br><span class=\"line\">      <span class=\"type\">E</span><span class=\"operator\">---</span><span class=\"type\">F</span><span class=\"operator\">---</span><span class=\"type\">G</span>  (feature<span class=\"operator\">-</span>branch)</span><br></pre></td></tr></table></figure>\n<p>Here F’ is a new commit that contains F’s changes.</p>\n<p>Precautions:</p>\n<ol>\n<li><p>git cherry-pick can be used not only for the current branch, but also for copying commits between different branches.</p>\n</li>\n<li><p>If a conflict occurs when applying a commit, Git will pause the cherry-pick process and require you to manually resolve the conflict before continuing.</p>\n</li>\n<li><p>git cherry-pick can not only accept the hash value of a single commit, but also a range of commits, such as git cherry-pick A..D.</p>\n</li>\n<li><p>If you only want to apply the committed changes to the working directory without creating a new commit, you can use the –no-commit option: git cherry-pick –no-commit <commit>.</p>\n</li>\n</ol>\n<p>In short, git cherry-pick is a powerful command that allows you to selectively introduce the changes of a certain commit into the current branch without merging the entire branch.</p>\n<h4 id=\"2-Check-or-View-Commands\"><a href=\"#2-Check-or-View-Commands\" class=\"headerlink\" title=\"2. Check or View Commands\"></a><font size=5 color=#4169E1>2. Check or View Commands</font></h4><p><font size=4><strong>2.1 git status</strong></font></p>\n<p>‘git status’ is used to view the status of the workspace and staging area, showing which files have been modified, which files have been staged, and whether there are untracked files.</p>\n<p><font size=4><strong>2.2 git log</strong></font> </p>\n<p>Used to view submission history and display detailed information of all submissions, including submitter, submission time, submission information, etc.</p>\n<img src=\"/assets/iOS/Tools&Configurations/00/03_gitlog.png\" class=\"\">   \n\n<p><font size=4><strong>2.3 git shortlog</strong></font></p>\n<p>Used to generate a brief log of submitters and display submission information grouped by submitters.</p>\n<img src=\"/assets/iOS/Tools&Configurations/00/04_gitshortlog.png\" class=\"\">   \n\n<p><font size=4><strong>2.4 git show</strong></font></p>\n<p>Used to display details of a single commit, including changes to the commit’s content.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git show 1eb6b3788eaf9545c4b44aa5ef6193a9613abbf4</span><br></pre></td></tr></table></figure>\n\n<img src=\"/assets/iOS/Tools&Configurations/00/05_gitshow.png\" class=\"\"> \n\n<p><font size=4><strong>2.5 git blame</strong></font></p>\n<p>Used to display the modification history of a file line by line, showing who modified each line in which commit.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git blame <span class=\"type\">LocalPods</span><span class=\"operator\">/</span><span class=\"type\">CodeFavorites</span><span class=\"operator\">/</span><span class=\"type\">CodeFavorites</span>.podspec</span><br></pre></td></tr></table></figure>\n\n<img src=\"/assets/iOS/Tools&Configurations/00/06_gitblame.png\" class=\"\"> \n\n<p><font size=4><strong>2.6 git reflog</strong></font></p>\n<p>Used to display the recent commit history of the current branch.</p>\n<img src=\"/assets/iOS/Tools&Configurations/00/07_gitreflog.png\" class=\"\"> \n\n<p><font size=4><strong>2.7 git shortlog -sn</strong></font></p>\n<p>Display all users who have submitted, sorted by number of submissions</p>\n<img src=\"/assets/iOS/Tools&Configurations/00/08_gitshortlogsn.png\" class=\"\"> \n\n<p><font size=4><strong>2.8 git diff</strong></font></p>\n<p><strong><code>git diff</code></strong></p>\n<p>Show the difference between workspace and staging area.</p>\n<p><strong><code>git diff --cached &lt;file&gt;</code></strong></p>\n<p>Displays the difference between the staging area and the previous commit, for the specified file.</p>\n<p><strong><code>git diff HEAD</code></strong></p>\n<p>Displays the differences between the workspace and the latest commit of the current branch.</p>\n<p><strong><code>git diff first-branch…second-branch</code></strong></p>\n<p>Shows the differences between two branches. first-branch and second-branch are branch names or commit hashes.</p>\n<p><strong><code>git diff --shortstat &quot;@&#123;0 day ago&#125;&quot;</code></strong></p>\n<p>Shows how many lines of code you wrote today.</p>\n<h4 id=\"3-Revoke-Commonds\"><a href=\"#3-Revoke-Commonds\" class=\"headerlink\" title=\"3. Revoke Commonds \"></a><font size=5 color=#4169E1>3. Revoke Commonds </font></h4><p><font size=4><strong>3.1 git reset</strong></font></p>\n<p>Used to undo a commit, modify the location of a branch, or unstage a file. It is a powerful command, but it needs to be used with caution as it can change the history of the repository.</p>\n<p><strong><code>git reset &lt;file&gt;</code></strong></p>\n<p>Used to reset the specified file in the staging area so that it is consistent with the version submitted (commit), but does not affect the workspace.</p>\n<p><strong><code>git reset --hard</code></strong></p>\n<ul>\n<li>Used to reset the staging area and workspace to make them consistent with the version of the last commit. This operation will clear all uncommitted changes in the workspace. Use with caution. <code>git reset --soft</code> is recommended.</li>\n</ul>\n<p><strong><code>git reset &lt;commit&gt;</code></strong></p>\n<p>Used to reset the pointer of the current branch to the specified commit and reset the staging area, but does not affect the work area.</p>\n<p><strong><code>git reset --hard &lt;commit&gt;</code></strong></p>\n<p>Used to reset the HEAD and pointer of the current branch to the specified commit, and reset the staging area and work area to make them consistent with the specified commit. Use with caution as it clears all uncommitted changes from the workspace.</p>\n<p><strong><code>git reset --keep &lt;commit&gt;</code></strong></p>\n<p>Used to reset the current HEAD to the specified commit, but keep the staging area and work area unchanged. This moves the branch pointer to the specified commit, but does not change your working directory or affect the staging area.</p>\n<p><strong>Notice:</strong></p>\n<ul>\n<li>The <code>--hard</code> option is a potentially dangerous option because it removes all uncommitted changes from the workspace. Make sure you understand this and back up important changes before use.</li>\n</ul>\n<p><font size=4><strong>3.1 git revert</strong></font></p>\n<p>Used to undo a commit. It creates a new commit, undoes the changes of the specified commit, and applies the new commit to the current branch. This way, it doesn’t change the past commit history, but adds a new commit after it that undoes the previous changes.</p>\n<h4 id=\"4-Code-Submission-Commonds\"><a href=\"#4-Code-Submission-Commonds\" class=\"headerlink\" title=\"4. Code Submission Commonds\"></a><font size=5 color=#4169E1>4. Code Submission Commonds</font></h4><p><strong><code>git commit -m &quot;...&quot;</code></strong> </p>\n<p>Submit all changes in the staging area to the local warehouse and add a commit message. Usually used to commit simple changes, where the string after the <code>-m</code> option is the commit message.</p>\n<p><strong><code>git commit file1 file2 ... -m &quot;...&quot;</code></strong></p>\n<p>Submit the file changes specified in the staging area to the local warehouse and add a commit message.</p>\n<p><strong><code>git commit --amend -m &quot;...&quot;</code></strong></p>\n<p>Use a new commit to replace the previous submission, usually used to modify the submission information of the previous submission. If there are no new changes to the code, it is used to rewrite the submission information of the last commit.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit <span class=\"operator\">-</span>m <span class=\"string\">&quot;Initial commit&quot;</span></span><br><span class=\"line\"># <span class=\"type\">After</span> making code modifications</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit <span class=\"operator\">--</span>amend <span class=\"operator\">-</span>m <span class=\"string\">&quot;Improved initial commit&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=5 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://blog.csdn.net/CSDN_33901573/article/details/121111157\">https://blog.csdn.net/CSDN_33901573/article/details/121111157</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 5 minutes to finish reading this article.</em></font></p>\n<h4 id=\"1-Code-Merge-Commands\"><a href=\"#1-Code-Merge-Commands\" class=\"headerlink\" title=\"1. Code Merge Commands\"></a><font size=5 color=#4169E1>1. Code Merge Commands</font></h4><p><font size=4><strong>1.1 git merge</strong></font> </p>\n<p>For merging changes from one branch to another, execute the following command on the target branch. It will create a new merge commit that merges the history of the two branches together. It generates a new merge commit on the target branch, preserving the commit history of the original branch.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge <span class=\"operator\">&lt;</span>source_branch<span class=\"operator\">&gt;</span> </span><br></pre></td></tr></table></figure>\n\n<p>Example:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">A</span><span class=\"operator\">---</span><span class=\"type\">B</span><span class=\"operator\">---</span><span class=\"type\">C</span>  (master)</span><br><span class=\"line\">     \\</span><br><span class=\"line\">      <span class=\"type\">D</span><span class=\"operator\">---</span><span class=\"type\">E</span>  (feature<span class=\"operator\">-</span>branch)</span><br></pre></td></tr></table></figure>\n<p>After executing git merge master:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">A</span><span class=\"operator\">---</span><span class=\"type\">B</span><span class=\"operator\">---</span><span class=\"type\">C</span><span class=\"operator\">---</span><span class=\"type\">F</span>  (master)</span><br><span class=\"line\">     \\     <span class=\"operator\">/</span></span><br><span class=\"line\">      <span class=\"type\">D</span><span class=\"operator\">---</span><span class=\"type\">E</span>  (feature<span class=\"operator\">-</span>branch)</span><br></pre></td></tr></table></figure>\n\n<p>F is a new merge commit that merges the changes from the master branch and the feature-branch branch.</p>\n<p><strong>How to handle conflicts:</strong></p>\n<p>Use the merge command to merge branches, resolve conflicts, and execute git add . and git commit -m ‘fix conflict’. A commit will be generated at this time.</p>\n<p><font size=4><strong>1.2 git rebase</strong></font> </p>\n<p>Used to reapply changes from one branch to another branch. Execute the following command on the target branch. It will stage the commits of the target branch, then apply the commits of the source branch to the target branch one by one, and finally re-apply the previously staged commits on it. The git rebase command will make the commit history of the target branch more linear, making it appear as if changes to the source branch were made directly on the target branch.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rebase <span class=\"operator\">&lt;</span>source_branch<span class=\"operator\">&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<p>Example:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">A</span><span class=\"operator\">---</span><span class=\"type\">B</span><span class=\"operator\">---</span><span class=\"type\">C</span>  (master)</span><br><span class=\"line\">     \\</span><br><span class=\"line\">      <span class=\"type\">D</span><span class=\"operator\">---</span><span class=\"type\">E</span>  (feature<span class=\"operator\">-</span>branch)</span><br></pre></td></tr></table></figure>\n<p>After executing git rebase feature-branch:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">A</span><span class=\"operator\">---</span><span class=\"type\">B</span><span class=\"operator\">---</span><span class=\"type\">C</span><span class=\"operator\">---</span><span class=\"type\">D</span>&#x27;<span class=\"operator\">---</span><span class=\"type\">E</span>&#x27;  (feature<span class=\"operator\">-</span>branch)</span><br><span class=\"line\">               <span class=\"operator\">|</span></span><br><span class=\"line\">             (master)</span><br></pre></td></tr></table></figure>\n\n<p>Here, D’ and E’ are new commits created via git rebase, they are copies of D and E respectively, and they are rebuilt directly on the latest commit C of the master branch.</p>\n<p><strong>How to handle conflicts:</strong></p>\n<p>Use the rebase command to merge branches, resolve conflicts, and execute git add . and git rebase –continue. No additional commits will be generated. The advantage of this is that it is ‘clean’ and there will be no meaningless commits to resolve the branch on the branch; the disadvantage is that if there are multiple commits in the merged branch, multiple conflicts need to be handled repeatedly.</p>\n<p><font size=4><strong>1.3 The difference between ‘git rebase’ and ‘git merge’</strong></font> </p>\n<ol>\n<li><p>Submission history:<br>merge: A new merge commit will be created on the target branch, retaining the history of the two branches.<br>Rebase: Apply the commits of the source branch to the target branch one by one, creating a more linear commit history.</p>\n</li>\n<li><p>Conflict handling:<br>merge: If a conflict occurs during the merge process, Git will stop and wait for the user to resolve the conflict before the merge is committed.<br>Rebase: Conflicts are usually resolved with each submission of the app, so users need to resolve them one by one before continuing with the rebase process.</p>\n</li>\n<li><p>Branch retention:<br>merge: The submission history of the original branch is retained, and the branch relationship is clearly visible.<br>Rebase: “Move” the commits from the source branch to the target branch. It looks like modifications were made on the target branch, and the branch relationship becomes more linear.</p>\n</li>\n<li><p>Recommended use:<br>merge: Suitable for merging public branches, such as main branches or long-term branches.<br>Rebase: Suitable for updating local branches to keep the submission history clean.<br>Choosing to use git merge or git rebase depends on the specifics of your project and the preferences of your development team. It’s important to understand their differences and choose the right strategy for the right scenario.</p>\n</li>\n</ol>\n<p><font size=4><strong>1.4 git cherry-pick</strong></font> </p>\n<p>This command is used to apply the specified commit to the current branch. This can be used to selectively introduce changes from a certain commit into the current branch without merging the entire branch.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git cherry<span class=\"operator\">-</span>pick <span class=\"operator\">&lt;</span>commit<span class=\"operator\">&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Example:<br>Suppose you have the following commit history:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">A</span><span class=\"operator\">---</span><span class=\"type\">B</span><span class=\"operator\">---</span><span class=\"type\">C</span><span class=\"operator\">---</span><span class=\"type\">D</span>  (master)</span><br><span class=\"line\">     \\</span><br><span class=\"line\">      <span class=\"type\">E</span><span class=\"operator\">---</span><span class=\"type\">F</span><span class=\"operator\">---</span><span class=\"type\">G</span>  (feature<span class=\"operator\">-</span>branch)</span><br></pre></td></tr></table></figure>\n\n<p>If you want to apply commit F on the feature-branch branch to the master branch, you can execute:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout master</span><br><span class=\"line\">git cherry<span class=\"operator\">-</span>pick <span class=\"type\">F</span></span><br></pre></td></tr></table></figure>\n<p>This will create a new commit on the master branch containing the changes from commit F on feature-branch:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">A</span><span class=\"operator\">---</span><span class=\"type\">B</span><span class=\"operator\">---</span><span class=\"type\">C</span><span class=\"operator\">---</span><span class=\"type\">D</span><span class=\"operator\">---</span><span class=\"type\">F</span>&#x27;  (master)</span><br><span class=\"line\">     \\</span><br><span class=\"line\">      <span class=\"type\">E</span><span class=\"operator\">---</span><span class=\"type\">F</span><span class=\"operator\">---</span><span class=\"type\">G</span>  (feature<span class=\"operator\">-</span>branch)</span><br></pre></td></tr></table></figure>\n<p>Here F’ is a new commit that contains F’s changes.</p>\n<p>Precautions:</p>\n<ol>\n<li><p>git cherry-pick can be used not only for the current branch, but also for copying commits between different branches.</p>\n</li>\n<li><p>If a conflict occurs when applying a commit, Git will pause the cherry-pick process and require you to manually resolve the conflict before continuing.</p>\n</li>\n<li><p>git cherry-pick can not only accept the hash value of a single commit, but also a range of commits, such as git cherry-pick A..D.</p>\n</li>\n<li><p>If you only want to apply the committed changes to the working directory without creating a new commit, you can use the –no-commit option: git cherry-pick –no-commit <commit>.</p>\n</li>\n</ol>\n<p>In short, git cherry-pick is a powerful command that allows you to selectively introduce the changes of a certain commit into the current branch without merging the entire branch.</p>\n<h4 id=\"2-Check-or-View-Commands\"><a href=\"#2-Check-or-View-Commands\" class=\"headerlink\" title=\"2. Check or View Commands\"></a><font size=5 color=#4169E1>2. Check or View Commands</font></h4><p><font size=4><strong>2.1 git status</strong></font></p>\n<p>‘git status’ is used to view the status of the workspace and staging area, showing which files have been modified, which files have been staged, and whether there are untracked files.</p>\n<p><font size=4><strong>2.2 git log</strong></font> </p>\n<p>Used to view submission history and display detailed information of all submissions, including submitter, submission time, submission information, etc.</p>\n<img src=\"/assets/iOS/Tools&Configurations/00/03_gitlog.png\" class=\"\">   \n\n<p><font size=4><strong>2.3 git shortlog</strong></font></p>\n<p>Used to generate a brief log of submitters and display submission information grouped by submitters.</p>\n<img src=\"/assets/iOS/Tools&Configurations/00/04_gitshortlog.png\" class=\"\">   \n\n<p><font size=4><strong>2.4 git show</strong></font></p>\n<p>Used to display details of a single commit, including changes to the commit’s content.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git show 1eb6b3788eaf9545c4b44aa5ef6193a9613abbf4</span><br></pre></td></tr></table></figure>\n\n<img src=\"/assets/iOS/Tools&Configurations/00/05_gitshow.png\" class=\"\"> \n\n<p><font size=4><strong>2.5 git blame</strong></font></p>\n<p>Used to display the modification history of a file line by line, showing who modified each line in which commit.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git blame <span class=\"type\">LocalPods</span><span class=\"operator\">/</span><span class=\"type\">CodeFavorites</span><span class=\"operator\">/</span><span class=\"type\">CodeFavorites</span>.podspec</span><br></pre></td></tr></table></figure>\n\n<img src=\"/assets/iOS/Tools&Configurations/00/06_gitblame.png\" class=\"\"> \n\n<p><font size=4><strong>2.6 git reflog</strong></font></p>\n<p>Used to display the recent commit history of the current branch.</p>\n<img src=\"/assets/iOS/Tools&Configurations/00/07_gitreflog.png\" class=\"\"> \n\n<p><font size=4><strong>2.7 git shortlog -sn</strong></font></p>\n<p>Display all users who have submitted, sorted by number of submissions</p>\n<img src=\"/assets/iOS/Tools&Configurations/00/08_gitshortlogsn.png\" class=\"\"> \n\n<p><font size=4><strong>2.8 git diff</strong></font></p>\n<p><strong><code>git diff</code></strong></p>\n<p>Show the difference between workspace and staging area.</p>\n<p><strong><code>git diff --cached &lt;file&gt;</code></strong></p>\n<p>Displays the difference between the staging area and the previous commit, for the specified file.</p>\n<p><strong><code>git diff HEAD</code></strong></p>\n<p>Displays the differences between the workspace and the latest commit of the current branch.</p>\n<p><strong><code>git diff first-branch…second-branch</code></strong></p>\n<p>Shows the differences between two branches. first-branch and second-branch are branch names or commit hashes.</p>\n<p><strong><code>git diff --shortstat &quot;@&#123;0 day ago&#125;&quot;</code></strong></p>\n<p>Shows how many lines of code you wrote today.</p>\n<h4 id=\"3-Revoke-Commonds\"><a href=\"#3-Revoke-Commonds\" class=\"headerlink\" title=\"3. Revoke Commonds \"></a><font size=5 color=#4169E1>3. Revoke Commonds </font></h4><p><font size=4><strong>3.1 git reset</strong></font></p>\n<p>Used to undo a commit, modify the location of a branch, or unstage a file. It is a powerful command, but it needs to be used with caution as it can change the history of the repository.</p>\n<p><strong><code>git reset &lt;file&gt;</code></strong></p>\n<p>Used to reset the specified file in the staging area so that it is consistent with the version submitted (commit), but does not affect the workspace.</p>\n<p><strong><code>git reset --hard</code></strong></p>\n<ul>\n<li>Used to reset the staging area and workspace to make them consistent with the version of the last commit. This operation will clear all uncommitted changes in the workspace. Use with caution. <code>git reset --soft</code> is recommended.</li>\n</ul>\n<p><strong><code>git reset &lt;commit&gt;</code></strong></p>\n<p>Used to reset the pointer of the current branch to the specified commit and reset the staging area, but does not affect the work area.</p>\n<p><strong><code>git reset --hard &lt;commit&gt;</code></strong></p>\n<p>Used to reset the HEAD and pointer of the current branch to the specified commit, and reset the staging area and work area to make them consistent with the specified commit. Use with caution as it clears all uncommitted changes from the workspace.</p>\n<p><strong><code>git reset --keep &lt;commit&gt;</code></strong></p>\n<p>Used to reset the current HEAD to the specified commit, but keep the staging area and work area unchanged. This moves the branch pointer to the specified commit, but does not change your working directory or affect the staging area.</p>\n<p><strong>Notice:</strong></p>\n<ul>\n<li>The <code>--hard</code> option is a potentially dangerous option because it removes all uncommitted changes from the workspace. Make sure you understand this and back up important changes before use.</li>\n</ul>\n<p><font size=4><strong>3.1 git revert</strong></font></p>\n<p>Used to undo a commit. It creates a new commit, undoes the changes of the specified commit, and applies the new commit to the current branch. This way, it doesn’t change the past commit history, but adds a new commit after it that undoes the previous changes.</p>\n<h4 id=\"4-Code-Submission-Commonds\"><a href=\"#4-Code-Submission-Commonds\" class=\"headerlink\" title=\"4. Code Submission Commonds\"></a><font size=5 color=#4169E1>4. Code Submission Commonds</font></h4><p><strong><code>git commit -m &quot;...&quot;</code></strong> </p>\n<p>Submit all changes in the staging area to the local warehouse and add a commit message. Usually used to commit simple changes, where the string after the <code>-m</code> option is the commit message.</p>\n<p><strong><code>git commit file1 file2 ... -m &quot;...&quot;</code></strong></p>\n<p>Submit the file changes specified in the staging area to the local warehouse and add a commit message.</p>\n<p><strong><code>git commit --amend -m &quot;...&quot;</code></strong></p>\n<p>Use a new commit to replace the previous submission, usually used to modify the submission information of the previous submission. If there are no new changes to the code, it is used to rewrite the submission information of the last commit.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit <span class=\"operator\">-</span>m <span class=\"string\">&quot;Initial commit&quot;</span></span><br><span class=\"line\"># <span class=\"type\">After</span> making code modifications</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit <span class=\"operator\">--</span>amend <span class=\"operator\">-</span>m <span class=\"string\">&quot;Improved initial commit&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=5 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://blog.csdn.net/CSDN_33901573/article/details/121111157\">https://blog.csdn.net/CSDN_33901573/article/details/121111157</a></p>\n"},{"title":"01. How to simulate a weak network environment in iOS?","date":"2023-11-17T10:00:00.000Z","_content":"\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nIn iOS App development, users are often faced with various network environments. If you want a better experience, you must not only be able to run normally in a normal network environment, but also in a weak network environment.\n\nHere are several ways to simulate a weak network environment.\n\n#### <font size=5 color=#4169E1>1. The built-in network link regulator on iOS</font> \n\nThe iOS settings come with a network regulator for development by default, which can be used to simulate a weak network environment. Open the phone system settings, scroll down, and find the `Developer`.\n\n{% img /assets/iOS/Tools&Configurations/01/00.png %} \n\nIf you don’t see this option in your phone’s settings, you can open Xcode first, then connect it to your phone with a data cable, and you’ll see the developer options after a while.\n\n**Note: For iOS 16 and above, you need to turn on the developer mode in Privacy and Security in settings.**\n\n\nClick on the `Developer` and you can see the `Network link Conditioner` column. Click on it again to simulate various network scenarios.\n\n{% img /assets/iOS/Tools&Configurations/01/01.png %} \n\nYou can find some of the system's default network configurations (100% loss, 3G network, Wi-Fi, etc.) on this page. First turn on the enable switch, and then click on one of the presets to select the default network.\n\n{% img /assets/iOS/Tools&Configurations/01/02.png %} \n\nNow you can test your app in this network state.\n\nClick the information button to the right of the preset to see the specific parameters of this network configuration, but they cannot be modified.\n\nIf these preset configurations cannot meet your needs, you can also click the `Add a profile` button below to customize a configuration. You can customize bandwidth, packet loss, delay and other parameters.\n\n{% img /assets/iOS/Tools&Configurations/01/03.png %} \n\n\n#### <font size=5 color=#4169E1>2. Use Charles to simulate a weak network</font> \n\nYou can also use packet capture tools such as Charles to simulate weak networks. First, open the Charles client on your computer. After configuring the `Proxy`, select Proxy on the top toolbar, and then click `Throttle Settings` in the drop-down menu.\n\n{% img /assets/iOS/Tools&Configurations/01/04.png %} \n\nIn the pop-up page, just make settings. You can directly select the Throttle preset option, or directly customize the values in the bandwidth, packet loss, etc. input boxes below.\n\n{% img /assets/iOS/Tools&Configurations/01/05.png %} \n\nAfter clicking OK, you can perform a weak network test in the App.\n\n#### <font size=5 color=#4169E1>3. Mac computer configuration weak network</font> \n\nIn addition to the above two methods, if you want to run tests in the simulator, you may need to simulate a weak network on your Mac. Xcode has some additional tools to do this.\n\nOpen Xcode and click on the top menu Xcode -> Open Developer Tool -> More Developer Tool. By default, the browser will open and jump to Apple's download website https://developer.apple.com/download/all. After entering, you need to Log in to your developer account.\n\n{% img /assets/iOS/Tools&Configurations/01/06.png %} \n\nThen search for network tool in the input box. Xcode’s Additional Tools will appear in the search results. Click to download.\n\n{% img /assets/iOS/Tools&Configurations/01/07.png %} \n\n\nAfter downloading, open this file on your computer, then open the Hardware folder, and you will see the `Network Link Conditioner.perfPane` file. Double-click it to open it and follow the prompts to install it.\n\n{% img /assets/iOS/Tools&Configurations/01/08.png %} \n\nAfter installation, you can see more `Network Link Conditioner` options in the system settings. After clicking on it, you can operate the weak network in the same way as on your mobile phone.\n \n{% img /assets/iOS/Tools&Configurations/01/09.png %} \n\nYou can also manage and add customized configurations by clicking `Manage Profiles` in the lower right corner.\n\n#### <font size=5 color=gray>*Reference*</font>\n[1] https://mp.weixin.qq.com/s/AQ8YS83FPCzj7HnoxyyybA\n ","source":"_posts/iOS/04. Tools & Configurations/01. How to simulate a weak network environment in iOS.md","raw":"---\ntitle: 01. How to simulate a weak network environment in iOS?\ndate: 2023-11-17 11:00:00\ncategories: \n- [iOS, 04. Tools & Configurations]\ntags:\n- weak network\n---\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nIn iOS App development, users are often faced with various network environments. If you want a better experience, you must not only be able to run normally in a normal network environment, but also in a weak network environment.\n\nHere are several ways to simulate a weak network environment.\n\n#### <font size=5 color=#4169E1>1. The built-in network link regulator on iOS</font> \n\nThe iOS settings come with a network regulator for development by default, which can be used to simulate a weak network environment. Open the phone system settings, scroll down, and find the `Developer`.\n\n{% img /assets/iOS/Tools&Configurations/01/00.png %} \n\nIf you don’t see this option in your phone’s settings, you can open Xcode first, then connect it to your phone with a data cable, and you’ll see the developer options after a while.\n\n**Note: For iOS 16 and above, you need to turn on the developer mode in Privacy and Security in settings.**\n\n\nClick on the `Developer` and you can see the `Network link Conditioner` column. Click on it again to simulate various network scenarios.\n\n{% img /assets/iOS/Tools&Configurations/01/01.png %} \n\nYou can find some of the system's default network configurations (100% loss, 3G network, Wi-Fi, etc.) on this page. First turn on the enable switch, and then click on one of the presets to select the default network.\n\n{% img /assets/iOS/Tools&Configurations/01/02.png %} \n\nNow you can test your app in this network state.\n\nClick the information button to the right of the preset to see the specific parameters of this network configuration, but they cannot be modified.\n\nIf these preset configurations cannot meet your needs, you can also click the `Add a profile` button below to customize a configuration. You can customize bandwidth, packet loss, delay and other parameters.\n\n{% img /assets/iOS/Tools&Configurations/01/03.png %} \n\n\n#### <font size=5 color=#4169E1>2. Use Charles to simulate a weak network</font> \n\nYou can also use packet capture tools such as Charles to simulate weak networks. First, open the Charles client on your computer. After configuring the `Proxy`, select Proxy on the top toolbar, and then click `Throttle Settings` in the drop-down menu.\n\n{% img /assets/iOS/Tools&Configurations/01/04.png %} \n\nIn the pop-up page, just make settings. You can directly select the Throttle preset option, or directly customize the values in the bandwidth, packet loss, etc. input boxes below.\n\n{% img /assets/iOS/Tools&Configurations/01/05.png %} \n\nAfter clicking OK, you can perform a weak network test in the App.\n\n#### <font size=5 color=#4169E1>3. Mac computer configuration weak network</font> \n\nIn addition to the above two methods, if you want to run tests in the simulator, you may need to simulate a weak network on your Mac. Xcode has some additional tools to do this.\n\nOpen Xcode and click on the top menu Xcode -> Open Developer Tool -> More Developer Tool. By default, the browser will open and jump to Apple's download website https://developer.apple.com/download/all. After entering, you need to Log in to your developer account.\n\n{% img /assets/iOS/Tools&Configurations/01/06.png %} \n\nThen search for network tool in the input box. Xcode’s Additional Tools will appear in the search results. Click to download.\n\n{% img /assets/iOS/Tools&Configurations/01/07.png %} \n\n\nAfter downloading, open this file on your computer, then open the Hardware folder, and you will see the `Network Link Conditioner.perfPane` file. Double-click it to open it and follow the prompts to install it.\n\n{% img /assets/iOS/Tools&Configurations/01/08.png %} \n\nAfter installation, you can see more `Network Link Conditioner` options in the system settings. After clicking on it, you can operate the weak network in the same way as on your mobile phone.\n \n{% img /assets/iOS/Tools&Configurations/01/09.png %} \n\nYou can also manage and add customized configurations by clicking `Manage Profiles` in the lower right corner.\n\n#### <font size=5 color=gray>*Reference*</font>\n[1] https://mp.weixin.qq.com/s/AQ8YS83FPCzj7HnoxyyybA\n ","slug":"iOS/04. Tools & Configurations/01. How to simulate a weak network environment in iOS","published":1,"updated":"2023-11-17T10:45:07.776Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr62004vvu0m1tjhh42x","content":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>In iOS App development, users are often faced with various network environments. If you want a better experience, you must not only be able to run normally in a normal network environment, but also in a weak network environment.</p>\n<p>Here are several ways to simulate a weak network environment.</p>\n<h4 id=\"1-The-built-in-network-link-regulator-on-iOS\"><a href=\"#1-The-built-in-network-link-regulator-on-iOS\" class=\"headerlink\" title=\"1. The built-in network link regulator on iOS\"></a><font size=5 color=#4169E1>1. The built-in network link regulator on iOS</font></h4><p>The iOS settings come with a network regulator for development by default, which can be used to simulate a weak network environment. Open the phone system settings, scroll down, and find the <code>Developer</code>.</p>\n<img src=\"/assets/iOS/Tools&Configurations/01/00.png\" class=\"\"> \n\n<p>If you don’t see this option in your phone’s settings, you can open Xcode first, then connect it to your phone with a data cable, and you’ll see the developer options after a while.</p>\n<p><strong>Note: For iOS 16 and above, you need to turn on the developer mode in Privacy and Security in settings.</strong></p>\n<p>Click on the <code>Developer</code> and you can see the <code>Network link Conditioner</code> column. Click on it again to simulate various network scenarios.</p>\n<img src=\"/assets/iOS/Tools&Configurations/01/01.png\" class=\"\"> \n\n<p>You can find some of the system’s default network configurations (100% loss, 3G network, Wi-Fi, etc.) on this page. First turn on the enable switch, and then click on one of the presets to select the default network.</p>\n<img src=\"/assets/iOS/Tools&Configurations/01/02.png\" class=\"\"> \n\n<p>Now you can test your app in this network state.</p>\n<p>Click the information button to the right of the preset to see the specific parameters of this network configuration, but they cannot be modified.</p>\n<p>If these preset configurations cannot meet your needs, you can also click the <code>Add a profile</code> button below to customize a configuration. You can customize bandwidth, packet loss, delay and other parameters.</p>\n<img src=\"/assets/iOS/Tools&Configurations/01/03.png\" class=\"\"> \n\n\n<h4 id=\"2-Use-Charles-to-simulate-a-weak-network\"><a href=\"#2-Use-Charles-to-simulate-a-weak-network\" class=\"headerlink\" title=\"2. Use Charles to simulate a weak network\"></a><font size=5 color=#4169E1>2. Use Charles to simulate a weak network</font></h4><p>You can also use packet capture tools such as Charles to simulate weak networks. First, open the Charles client on your computer. After configuring the <code>Proxy</code>, select Proxy on the top toolbar, and then click <code>Throttle Settings</code> in the drop-down menu.</p>\n<img src=\"/assets/iOS/Tools&Configurations/01/04.png\" class=\"\"> \n\n<p>In the pop-up page, just make settings. You can directly select the Throttle preset option, or directly customize the values in the bandwidth, packet loss, etc. input boxes below.</p>\n<img src=\"/assets/iOS/Tools&Configurations/01/05.png\" class=\"\"> \n\n<p>After clicking OK, you can perform a weak network test in the App.</p>\n<h4 id=\"3-Mac-computer-configuration-weak-network\"><a href=\"#3-Mac-computer-configuration-weak-network\" class=\"headerlink\" title=\"3. Mac computer configuration weak network\"></a><font size=5 color=#4169E1>3. Mac computer configuration weak network</font></h4><p>In addition to the above two methods, if you want to run tests in the simulator, you may need to simulate a weak network on your Mac. Xcode has some additional tools to do this.</p>\n<p>Open Xcode and click on the top menu Xcode -&gt; Open Developer Tool -&gt; More Developer Tool. By default, the browser will open and jump to Apple’s download website <a href=\"https://developer.apple.com/download/all\">https://developer.apple.com/download/all</a>. After entering, you need to Log in to your developer account.</p>\n<img src=\"/assets/iOS/Tools&Configurations/01/06.png\" class=\"\"> \n\n<p>Then search for network tool in the input box. Xcode’s Additional Tools will appear in the search results. Click to download.</p>\n<img src=\"/assets/iOS/Tools&Configurations/01/07.png\" class=\"\"> \n\n\n<p>After downloading, open this file on your computer, then open the Hardware folder, and you will see the <code>Network Link Conditioner.perfPane</code> file. Double-click it to open it and follow the prompts to install it.</p>\n<img src=\"/assets/iOS/Tools&Configurations/01/08.png\" class=\"\"> \n\n<p>After installation, you can see more <code>Network Link Conditioner</code> options in the system settings. After clicking on it, you can operate the weak network in the same way as on your mobile phone.</p>\n<img src=\"/assets/iOS/Tools&Configurations/01/09.png\" class=\"\"> \n\n<p>You can also manage and add customized configurations by clicking <code>Manage Profiles</code> in the lower right corner.</p>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=5 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://mp.weixin.qq.com/s/AQ8YS83FPCzj7HnoxyyybA\">https://mp.weixin.qq.com/s/AQ8YS83FPCzj7HnoxyyybA</a>\n </p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>In iOS App development, users are often faced with various network environments. If you want a better experience, you must not only be able to run normally in a normal network environment, but also in a weak network environment.</p>\n<p>Here are several ways to simulate a weak network environment.</p>\n<h4 id=\"1-The-built-in-network-link-regulator-on-iOS\"><a href=\"#1-The-built-in-network-link-regulator-on-iOS\" class=\"headerlink\" title=\"1. The built-in network link regulator on iOS\"></a><font size=5 color=#4169E1>1. The built-in network link regulator on iOS</font></h4><p>The iOS settings come with a network regulator for development by default, which can be used to simulate a weak network environment. Open the phone system settings, scroll down, and find the <code>Developer</code>.</p>\n<img src=\"/assets/iOS/Tools&Configurations/01/00.png\" class=\"\"> \n\n<p>If you don’t see this option in your phone’s settings, you can open Xcode first, then connect it to your phone with a data cable, and you’ll see the developer options after a while.</p>\n<p><strong>Note: For iOS 16 and above, you need to turn on the developer mode in Privacy and Security in settings.</strong></p>\n<p>Click on the <code>Developer</code> and you can see the <code>Network link Conditioner</code> column. Click on it again to simulate various network scenarios.</p>\n<img src=\"/assets/iOS/Tools&Configurations/01/01.png\" class=\"\"> \n\n<p>You can find some of the system’s default network configurations (100% loss, 3G network, Wi-Fi, etc.) on this page. First turn on the enable switch, and then click on one of the presets to select the default network.</p>\n<img src=\"/assets/iOS/Tools&Configurations/01/02.png\" class=\"\"> \n\n<p>Now you can test your app in this network state.</p>\n<p>Click the information button to the right of the preset to see the specific parameters of this network configuration, but they cannot be modified.</p>\n<p>If these preset configurations cannot meet your needs, you can also click the <code>Add a profile</code> button below to customize a configuration. You can customize bandwidth, packet loss, delay and other parameters.</p>\n<img src=\"/assets/iOS/Tools&Configurations/01/03.png\" class=\"\"> \n\n\n<h4 id=\"2-Use-Charles-to-simulate-a-weak-network\"><a href=\"#2-Use-Charles-to-simulate-a-weak-network\" class=\"headerlink\" title=\"2. Use Charles to simulate a weak network\"></a><font size=5 color=#4169E1>2. Use Charles to simulate a weak network</font></h4><p>You can also use packet capture tools such as Charles to simulate weak networks. First, open the Charles client on your computer. After configuring the <code>Proxy</code>, select Proxy on the top toolbar, and then click <code>Throttle Settings</code> in the drop-down menu.</p>\n<img src=\"/assets/iOS/Tools&Configurations/01/04.png\" class=\"\"> \n\n<p>In the pop-up page, just make settings. You can directly select the Throttle preset option, or directly customize the values in the bandwidth, packet loss, etc. input boxes below.</p>\n<img src=\"/assets/iOS/Tools&Configurations/01/05.png\" class=\"\"> \n\n<p>After clicking OK, you can perform a weak network test in the App.</p>\n<h4 id=\"3-Mac-computer-configuration-weak-network\"><a href=\"#3-Mac-computer-configuration-weak-network\" class=\"headerlink\" title=\"3. Mac computer configuration weak network\"></a><font size=5 color=#4169E1>3. Mac computer configuration weak network</font></h4><p>In addition to the above two methods, if you want to run tests in the simulator, you may need to simulate a weak network on your Mac. Xcode has some additional tools to do this.</p>\n<p>Open Xcode and click on the top menu Xcode -&gt; Open Developer Tool -&gt; More Developer Tool. By default, the browser will open and jump to Apple’s download website <a href=\"https://developer.apple.com/download/all\">https://developer.apple.com/download/all</a>. After entering, you need to Log in to your developer account.</p>\n<img src=\"/assets/iOS/Tools&Configurations/01/06.png\" class=\"\"> \n\n<p>Then search for network tool in the input box. Xcode’s Additional Tools will appear in the search results. Click to download.</p>\n<img src=\"/assets/iOS/Tools&Configurations/01/07.png\" class=\"\"> \n\n\n<p>After downloading, open this file on your computer, then open the Hardware folder, and you will see the <code>Network Link Conditioner.perfPane</code> file. Double-click it to open it and follow the prompts to install it.</p>\n<img src=\"/assets/iOS/Tools&Configurations/01/08.png\" class=\"\"> \n\n<p>After installation, you can see more <code>Network Link Conditioner</code> options in the system settings. After clicking on it, you can operate the weak network in the same way as on your mobile phone.</p>\n<img src=\"/assets/iOS/Tools&Configurations/01/09.png\" class=\"\"> \n\n<p>You can also manage and add customized configurations by clicking <code>Manage Profiles</code> in the lower right corner.</p>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=5 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://mp.weixin.qq.com/s/AQ8YS83FPCzj7HnoxyyybA\">https://mp.weixin.qq.com/s/AQ8YS83FPCzj7HnoxyyybA</a>\n </p>\n"},{"title":"00. An investigation of Lost location Issue","date":"2023-08-31T12:58:00.000Z","_content":"\n<font color=gray size=2>*It will take about 5 minutes to finish reading this article.*</font>\n\n#### <font size=4 color=#4169E1>1. Background</font> \nThis is really one of the issues that impressed me. I'm recording it here specifically because I find it quite fascinating.   \n\nAt that time I was a leader of iOS team based on Oversea business at Meituan. The business was brand new, I was one of the few guys who were familiar all Oversea business. One day, Our data engineer came to me, and told me that the location data of our business had a high lost rate to 30%, even to 50% in some special areas. According to past experience, it may be normal for this loss rate to be between 10% and 15%, so it was too high.\n\nAs we all kown, without the correct location information(City or region information), we could not offer different  business data to the accurate areas we wanted. Soon I realized  it was a serious problem for our business, and I reported it to our technical boss. We decided that until the problem was resolved, the users that lost location information could only read the default H5 page we offered.\n\n#### <font size=4 color=#4169E1>2. Investigation process</font>   \n\nThen I began to investigate the issue and tried to optimize it. Later, I gradually discovered that the issues involved in this process are very complicated, involving many links and requiring a lot of cross-team cooperation.\n\nThe process of getting location data in iOS is as follows:   \n\n(1) iOS gets the longitude and latitude by calling the system callback function in CLLocationManagerDelegate.\n```Swift \n- (void)locationManager:(CLLocationManager *)manager didUpdateLocations:(NSArray *)locations {\n    CLLocation *location = [locations firstObject]; \n    CLLocationCoordinate2D coordinate = location.coordinate; \n    NSLog(@\"Longitude: %f, Latitude: %f\",coordinate.longitude,coordinate.latitude);\n\n}\n```\nAt this step, although there could have been failures with a rate of 5% more or less, what we could do was limited, not only because it was a system-level method, but more importantly, this was the code that existed in the basic library. Any modification to it would have affected the entire company's business.\n\n(2) After getting the latitude and longitude, we used them and some other information (IP address, etc.) to request a back-end interface( we can call it requestPosition), which will return the corresponding location information, which is a basic public interface for all the company's business.\n\nThen by querying the interface logs and the database logs of other businesses, I found that the failure rate of this interface for overseas business was very high, but the failure rate for domestic business was normal. I don't know why. After all, all businesses use the same interface. \n\nBut even though I didn't know why, I pushed for something: to create the interface in a way that in overseas business scenarios, if it failed to acquire location information, it would trigger a retry mechanism, meaning that if the first attempt failed, the subsequent attempt would be made up to 2 times until it succeeded(The actual logic may be more complex.).\n\nAfter doing this optimization, I again verified the location information data for the business and found that the data had improved, but the improvement was limited, about 20% to 25% from the original average of 30% to 40%.\n\n(3) I escalated the issue after that because I felt that it might be beyond our capabilities on the mobile side, and I organized multiple meetings with multiple server-side teams to discuss the issue.  \n\nIn the discussion with the server side I found:\nBecause the company's network services are basically customized http protocol, take the network long connection, with the help of strong domestic server resources, domestic users benefit from this way, the network's end-to-end success rate is very high (long connection that is, through the heartbeat message way to keep alive).\n\nHowever, due to the lack of sufficient server resources in foreign countries, coupled with the network conditions in some foreign regions were not very good, at this time, the end-to-end success rate of the network long connection was very low, and may be even lower than the short link method. We originally wanted to change the overseas business network request to short connection, but after discussion, we felt that this is not a fundamental solution. \n\nLater, I learned that through the efforts of our big boss, we were able to help our overseas business deploy a dedicated server resource in Hong Kong to support the overseas business. Later this data was optimized and finally reached the ideal zone.\n\nSo far, this problem was solved.\n \n\n#### <font size=4 color=#4169E1>3. Review and summary</font> \n\nIn this process, I had to constantly review other teams' code, and communicated with the basic service team many times on how to optimize the code.  \n\nI needed to apply permissions to various databases and learned to write various SQL languages to query data. Query server-side logs, query other business data repeatedly for comparison. \n\nDuring this period, I also needed to discuss and communicate with multiple server teams and multiple data teams.\n\nAlthough this work could be beyond the ability and responsibility of an iOS developer, and the process was full of challenges, But Looking back now, I still benefited a lot from it and learned a lot of knowledge beyond iOS.","source":"_posts/iOS/05. Projects & Issues/00. An investigation of Lost location Issue.md","raw":"---\ntitle: 00. An investigation of Lost location Issue \ndate: 2023-08-31 14:58:00\ncategories: \n- [iOS, 05. Projects & Issues]\ntags:\n- latitude \n- longitude\n---\n\n<font color=gray size=2>*It will take about 5 minutes to finish reading this article.*</font>\n\n#### <font size=4 color=#4169E1>1. Background</font> \nThis is really one of the issues that impressed me. I'm recording it here specifically because I find it quite fascinating.   \n\nAt that time I was a leader of iOS team based on Oversea business at Meituan. The business was brand new, I was one of the few guys who were familiar all Oversea business. One day, Our data engineer came to me, and told me that the location data of our business had a high lost rate to 30%, even to 50% in some special areas. According to past experience, it may be normal for this loss rate to be between 10% and 15%, so it was too high.\n\nAs we all kown, without the correct location information(City or region information), we could not offer different  business data to the accurate areas we wanted. Soon I realized  it was a serious problem for our business, and I reported it to our technical boss. We decided that until the problem was resolved, the users that lost location information could only read the default H5 page we offered.\n\n#### <font size=4 color=#4169E1>2. Investigation process</font>   \n\nThen I began to investigate the issue and tried to optimize it. Later, I gradually discovered that the issues involved in this process are very complicated, involving many links and requiring a lot of cross-team cooperation.\n\nThe process of getting location data in iOS is as follows:   \n\n(1) iOS gets the longitude and latitude by calling the system callback function in CLLocationManagerDelegate.\n```Swift \n- (void)locationManager:(CLLocationManager *)manager didUpdateLocations:(NSArray *)locations {\n    CLLocation *location = [locations firstObject]; \n    CLLocationCoordinate2D coordinate = location.coordinate; \n    NSLog(@\"Longitude: %f, Latitude: %f\",coordinate.longitude,coordinate.latitude);\n\n}\n```\nAt this step, although there could have been failures with a rate of 5% more or less, what we could do was limited, not only because it was a system-level method, but more importantly, this was the code that existed in the basic library. Any modification to it would have affected the entire company's business.\n\n(2) After getting the latitude and longitude, we used them and some other information (IP address, etc.) to request a back-end interface( we can call it requestPosition), which will return the corresponding location information, which is a basic public interface for all the company's business.\n\nThen by querying the interface logs and the database logs of other businesses, I found that the failure rate of this interface for overseas business was very high, but the failure rate for domestic business was normal. I don't know why. After all, all businesses use the same interface. \n\nBut even though I didn't know why, I pushed for something: to create the interface in a way that in overseas business scenarios, if it failed to acquire location information, it would trigger a retry mechanism, meaning that if the first attempt failed, the subsequent attempt would be made up to 2 times until it succeeded(The actual logic may be more complex.).\n\nAfter doing this optimization, I again verified the location information data for the business and found that the data had improved, but the improvement was limited, about 20% to 25% from the original average of 30% to 40%.\n\n(3) I escalated the issue after that because I felt that it might be beyond our capabilities on the mobile side, and I organized multiple meetings with multiple server-side teams to discuss the issue.  \n\nIn the discussion with the server side I found:\nBecause the company's network services are basically customized http protocol, take the network long connection, with the help of strong domestic server resources, domestic users benefit from this way, the network's end-to-end success rate is very high (long connection that is, through the heartbeat message way to keep alive).\n\nHowever, due to the lack of sufficient server resources in foreign countries, coupled with the network conditions in some foreign regions were not very good, at this time, the end-to-end success rate of the network long connection was very low, and may be even lower than the short link method. We originally wanted to change the overseas business network request to short connection, but after discussion, we felt that this is not a fundamental solution. \n\nLater, I learned that through the efforts of our big boss, we were able to help our overseas business deploy a dedicated server resource in Hong Kong to support the overseas business. Later this data was optimized and finally reached the ideal zone.\n\nSo far, this problem was solved.\n \n\n#### <font size=4 color=#4169E1>3. Review and summary</font> \n\nIn this process, I had to constantly review other teams' code, and communicated with the basic service team many times on how to optimize the code.  \n\nI needed to apply permissions to various databases and learned to write various SQL languages to query data. Query server-side logs, query other business data repeatedly for comparison. \n\nDuring this period, I also needed to discuss and communicate with multiple server teams and multiple data teams.\n\nAlthough this work could be beyond the ability and responsibility of an iOS developer, and the process was full of challenges, But Looking back now, I still benefited a lot from it and learned a lot of knowledge beyond iOS.","slug":"iOS/05. Projects & Issues/00. An investigation of Lost location Issue","published":1,"updated":"2023-09-07T08:08:10.541Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr63004yvu0metw29tlj","content":"<p><font color=gray size=2><em>It will take about 5 minutes to finish reading this article.</em></font></p>\n<h4 id=\"1-Background\"><a href=\"#1-Background\" class=\"headerlink\" title=\"1. Background\"></a><font size=4 color=#4169E1>1. Background</font></h4><p>This is really one of the issues that impressed me. I’m recording it here specifically because I find it quite fascinating.   </p>\n<p>At that time I was a leader of iOS team based on Oversea business at Meituan. The business was brand new, I was one of the few guys who were familiar all Oversea business. One day, Our data engineer came to me, and told me that the location data of our business had a high lost rate to 30%, even to 50% in some special areas. According to past experience, it may be normal for this loss rate to be between 10% and 15%, so it was too high.</p>\n<p>As we all kown, without the correct location information(City or region information), we could not offer different  business data to the accurate areas we wanted. Soon I realized  it was a serious problem for our business, and I reported it to our technical boss. We decided that until the problem was resolved, the users that lost location information could only read the default H5 page we offered.</p>\n<h4 id=\"2-Investigation-process\"><a href=\"#2-Investigation-process\" class=\"headerlink\" title=\"2. Investigation process\"></a><font size=4 color=#4169E1>2. Investigation process</font></h4><p>Then I began to investigate the issue and tried to optimize it. Later, I gradually discovered that the issues involved in this process are very complicated, involving many links and requiring a lot of cross-team cooperation.</p>\n<p>The process of getting location data in iOS is as follows:   </p>\n<p>(1) iOS gets the longitude and latitude by calling the system callback function in CLLocationManagerDelegate.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">-</span> (void)locationManager:(<span class=\"type\">CLLocationManager</span> <span class=\"operator\">*</span>)manager didUpdateLocations:(<span class=\"type\">NSArray</span> <span class=\"operator\">*</span>)locations &#123;</span><br><span class=\"line\">    <span class=\"type\">CLLocation</span> <span class=\"operator\">*</span>location <span class=\"operator\">=</span> [locations firstObject]; </span><br><span class=\"line\">    <span class=\"type\">CLLocationCoordinate2D</span> coordinate <span class=\"operator\">=</span> location.coordinate; </span><br><span class=\"line\">    <span class=\"type\">NSLog</span>(@<span class=\"string\">&quot;Longitude: %f, Latitude: %f&quot;</span>,coordinate.longitude,coordinate.latitude);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>At this step, although there could have been failures with a rate of 5% more or less, what we could do was limited, not only because it was a system-level method, but more importantly, this was the code that existed in the basic library. Any modification to it would have affected the entire company’s business.</p>\n<p>(2) After getting the latitude and longitude, we used them and some other information (IP address, etc.) to request a back-end interface( we can call it requestPosition), which will return the corresponding location information, which is a basic public interface for all the company’s business.</p>\n<p>Then by querying the interface logs and the database logs of other businesses, I found that the failure rate of this interface for overseas business was very high, but the failure rate for domestic business was normal. I don’t know why. After all, all businesses use the same interface. </p>\n<p>But even though I didn’t know why, I pushed for something: to create the interface in a way that in overseas business scenarios, if it failed to acquire location information, it would trigger a retry mechanism, meaning that if the first attempt failed, the subsequent attempt would be made up to 2 times until it succeeded(The actual logic may be more complex.).</p>\n<p>After doing this optimization, I again verified the location information data for the business and found that the data had improved, but the improvement was limited, about 20% to 25% from the original average of 30% to 40%.</p>\n<p>(3) I escalated the issue after that because I felt that it might be beyond our capabilities on the mobile side, and I organized multiple meetings with multiple server-side teams to discuss the issue.  </p>\n<p>In the discussion with the server side I found:<br>Because the company’s network services are basically customized http protocol, take the network long connection, with the help of strong domestic server resources, domestic users benefit from this way, the network’s end-to-end success rate is very high (long connection that is, through the heartbeat message way to keep alive).</p>\n<p>However, due to the lack of sufficient server resources in foreign countries, coupled with the network conditions in some foreign regions were not very good, at this time, the end-to-end success rate of the network long connection was very low, and may be even lower than the short link method. We originally wanted to change the overseas business network request to short connection, but after discussion, we felt that this is not a fundamental solution. </p>\n<p>Later, I learned that through the efforts of our big boss, we were able to help our overseas business deploy a dedicated server resource in Hong Kong to support the overseas business. Later this data was optimized and finally reached the ideal zone.</p>\n<p>So far, this problem was solved.</p>\n<h4 id=\"3-Review-and-summary\"><a href=\"#3-Review-and-summary\" class=\"headerlink\" title=\"3. Review and summary\"></a><font size=4 color=#4169E1>3. Review and summary</font></h4><p>In this process, I had to constantly review other teams’ code, and communicated with the basic service team many times on how to optimize the code.  </p>\n<p>I needed to apply permissions to various databases and learned to write various SQL languages to query data. Query server-side logs, query other business data repeatedly for comparison. </p>\n<p>During this period, I also needed to discuss and communicate with multiple server teams and multiple data teams.</p>\n<p>Although this work could be beyond the ability and responsibility of an iOS developer, and the process was full of challenges, But Looking back now, I still benefited a lot from it and learned a lot of knowledge beyond iOS.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 5 minutes to finish reading this article.</em></font></p>\n<h4 id=\"1-Background\"><a href=\"#1-Background\" class=\"headerlink\" title=\"1. Background\"></a><font size=4 color=#4169E1>1. Background</font></h4><p>This is really one of the issues that impressed me. I’m recording it here specifically because I find it quite fascinating.   </p>\n<p>At that time I was a leader of iOS team based on Oversea business at Meituan. The business was brand new, I was one of the few guys who were familiar all Oversea business. One day, Our data engineer came to me, and told me that the location data of our business had a high lost rate to 30%, even to 50% in some special areas. According to past experience, it may be normal for this loss rate to be between 10% and 15%, so it was too high.</p>\n<p>As we all kown, without the correct location information(City or region information), we could not offer different  business data to the accurate areas we wanted. Soon I realized  it was a serious problem for our business, and I reported it to our technical boss. We decided that until the problem was resolved, the users that lost location information could only read the default H5 page we offered.</p>\n<h4 id=\"2-Investigation-process\"><a href=\"#2-Investigation-process\" class=\"headerlink\" title=\"2. Investigation process\"></a><font size=4 color=#4169E1>2. Investigation process</font></h4><p>Then I began to investigate the issue and tried to optimize it. Later, I gradually discovered that the issues involved in this process are very complicated, involving many links and requiring a lot of cross-team cooperation.</p>\n<p>The process of getting location data in iOS is as follows:   </p>\n<p>(1) iOS gets the longitude and latitude by calling the system callback function in CLLocationManagerDelegate.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">-</span> (void)locationManager:(<span class=\"type\">CLLocationManager</span> <span class=\"operator\">*</span>)manager didUpdateLocations:(<span class=\"type\">NSArray</span> <span class=\"operator\">*</span>)locations &#123;</span><br><span class=\"line\">    <span class=\"type\">CLLocation</span> <span class=\"operator\">*</span>location <span class=\"operator\">=</span> [locations firstObject]; </span><br><span class=\"line\">    <span class=\"type\">CLLocationCoordinate2D</span> coordinate <span class=\"operator\">=</span> location.coordinate; </span><br><span class=\"line\">    <span class=\"type\">NSLog</span>(@<span class=\"string\">&quot;Longitude: %f, Latitude: %f&quot;</span>,coordinate.longitude,coordinate.latitude);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>At this step, although there could have been failures with a rate of 5% more or less, what we could do was limited, not only because it was a system-level method, but more importantly, this was the code that existed in the basic library. Any modification to it would have affected the entire company’s business.</p>\n<p>(2) After getting the latitude and longitude, we used them and some other information (IP address, etc.) to request a back-end interface( we can call it requestPosition), which will return the corresponding location information, which is a basic public interface for all the company’s business.</p>\n<p>Then by querying the interface logs and the database logs of other businesses, I found that the failure rate of this interface for overseas business was very high, but the failure rate for domestic business was normal. I don’t know why. After all, all businesses use the same interface. </p>\n<p>But even though I didn’t know why, I pushed for something: to create the interface in a way that in overseas business scenarios, if it failed to acquire location information, it would trigger a retry mechanism, meaning that if the first attempt failed, the subsequent attempt would be made up to 2 times until it succeeded(The actual logic may be more complex.).</p>\n<p>After doing this optimization, I again verified the location information data for the business and found that the data had improved, but the improvement was limited, about 20% to 25% from the original average of 30% to 40%.</p>\n<p>(3) I escalated the issue after that because I felt that it might be beyond our capabilities on the mobile side, and I organized multiple meetings with multiple server-side teams to discuss the issue.  </p>\n<p>In the discussion with the server side I found:<br>Because the company’s network services are basically customized http protocol, take the network long connection, with the help of strong domestic server resources, domestic users benefit from this way, the network’s end-to-end success rate is very high (long connection that is, through the heartbeat message way to keep alive).</p>\n<p>However, due to the lack of sufficient server resources in foreign countries, coupled with the network conditions in some foreign regions were not very good, at this time, the end-to-end success rate of the network long connection was very low, and may be even lower than the short link method. We originally wanted to change the overseas business network request to short connection, but after discussion, we felt that this is not a fundamental solution. </p>\n<p>Later, I learned that through the efforts of our big boss, we were able to help our overseas business deploy a dedicated server resource in Hong Kong to support the overseas business. Later this data was optimized and finally reached the ideal zone.</p>\n<p>So far, this problem was solved.</p>\n<h4 id=\"3-Review-and-summary\"><a href=\"#3-Review-and-summary\" class=\"headerlink\" title=\"3. Review and summary\"></a><font size=4 color=#4169E1>3. Review and summary</font></h4><p>In this process, I had to constantly review other teams’ code, and communicated with the basic service team many times on how to optimize the code.  </p>\n<p>I needed to apply permissions to various databases and learned to write various SQL languages to query data. Query server-side logs, query other business data repeatedly for comparison. </p>\n<p>During this period, I also needed to discuss and communicate with multiple server teams and multiple data teams.</p>\n<p>Although this work could be beyond the ability and responsibility of an iOS developer, and the process was full of challenges, But Looking back now, I still benefited a lot from it and learned a lot of knowledge beyond iOS.</p>\n"},{"title":"00. Article publishing failure problem summary","date":"2023-01-15T13:00:00.000Z","_content":"\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nHere is a summary of all the possible reasons for publishing failure in Hexo.\n\n#### <font size=3 color=#4169E1>1. Header information is incorrect</font> \nPlease strictly follow the header format:\n```Swift \n---\ntitle: 00. Article publishing failure problem summary\ndate: 2023-01-15 14:00:00\ncategories: \n- [Others, 00. others]\ntags:\n- hexo\n- configuration\n- tool\n---\n```\n**Note:**   \n**There are no empty lines in the first row.**   \n**All the keywords 'title','date','categories','tags' must be in lower case.**\n\n#### <font size=3 color=#4169E1>2. Picture does not show</font> \n\nThe correct image format is as follows: \n{% img /assets/Demo/wallpaper-2311325.jpg %}    \n{% img /assets/Demo/wallpaper-878514.jpg %}\n\n\n#### <font size=3 color=#4169E1>3. Change the font</font> \nOn the basis of this article below:       \nhttps://blog.csdn.net/Reinhart_L/article/details/122587975       \n(1) Enter. / themes/cactus/source/CSS / _variables styl, can change the font;   \n(2) The available fonts are in . /themes/cactus/source/lib/, cactus comes with only two kinds of 'meslo-LG' and 'vazir-font', you can download them yourself if you need.\n\n\n\n#### <font size=3 color=gray>*Reference*</font>\n[1] [Why should we avoid using closures in Swift structs?](https://ohmyswift.com/blog/2020/01/10/why-should-we-avoid-using-closures-in-swift-structs/)  \n[2] https://github.com/probberechts/hexo-theme-cactus\n","source":"_posts/iOS/05. Projects & Issues/02. Design of a Document Similarity Comparison Tool.md","raw":"---\ntitle: 00. Article publishing failure problem summary\ndate: 2023-01-15 14:00:00\ncategories: \n- [Others]\ntags:\n- hexo\n- configuration\n- tool\n---\n\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nHere is a summary of all the possible reasons for publishing failure in Hexo.\n\n#### <font size=3 color=#4169E1>1. Header information is incorrect</font> \nPlease strictly follow the header format:\n```Swift \n---\ntitle: 00. Article publishing failure problem summary\ndate: 2023-01-15 14:00:00\ncategories: \n- [Others, 00. others]\ntags:\n- hexo\n- configuration\n- tool\n---\n```\n**Note:**   \n**There are no empty lines in the first row.**   \n**All the keywords 'title','date','categories','tags' must be in lower case.**\n\n#### <font size=3 color=#4169E1>2. Picture does not show</font> \n\nThe correct image format is as follows: \n{% img /assets/Demo/wallpaper-2311325.jpg %}    \n{% img /assets/Demo/wallpaper-878514.jpg %}\n\n\n#### <font size=3 color=#4169E1>3. Change the font</font> \nOn the basis of this article below:       \nhttps://blog.csdn.net/Reinhart_L/article/details/122587975       \n(1) Enter. / themes/cactus/source/CSS / _variables styl, can change the font;   \n(2) The available fonts are in . /themes/cactus/source/lib/, cactus comes with only two kinds of 'meslo-LG' and 'vazir-font', you can download them yourself if you need.\n\n\n\n#### <font size=3 color=gray>*Reference*</font>\n[1] [Why should we avoid using closures in Swift structs?](https://ohmyswift.com/blog/2020/01/10/why-should-we-avoid-using-closures-in-swift-structs/)  \n[2] https://github.com/probberechts/hexo-theme-cactus\n","slug":"iOS/05. Projects & Issues/02. Design of a Document Similarity Comparison Tool","published":1,"updated":"2023-08-23T19:22:57.927Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr640051vu0mcof8g4t9","content":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>Here is a summary of all the possible reasons for publishing failure in Hexo.</p>\n<h4 id=\"1-Header-information-is-incorrect\"><a href=\"#1-Header-information-is-incorrect\" class=\"headerlink\" title=\"1. Header information is incorrect\"></a><font size=3 color=#4169E1>1. Header information is incorrect</font></h4><p>Please strictly follow the header format:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">---</span></span><br><span class=\"line\">title: <span class=\"number\">00</span>. <span class=\"type\">Article</span> publishing failure problem summary</span><br><span class=\"line\">date: <span class=\"number\">2023</span><span class=\"operator\">-</span><span class=\"number\">01</span><span class=\"operator\">-</span><span class=\"number\">15</span> <span class=\"number\">14</span>:<span class=\"number\">00</span>:<span class=\"number\">00</span></span><br><span class=\"line\">categories: </span><br><span class=\"line\"><span class=\"operator\">-</span> [<span class=\"type\">Others</span>, <span class=\"number\">00</span>. others]</span><br><span class=\"line\">tags:</span><br><span class=\"line\"><span class=\"operator\">-</span> hexo</span><br><span class=\"line\"><span class=\"operator\">-</span> configuration</span><br><span class=\"line\"><span class=\"operator\">-</span> tool</span><br><span class=\"line\"><span class=\"operator\">---</span></span><br></pre></td></tr></table></figure>\n<p><strong>Note:</strong><br><strong>There are no empty lines in the first row.</strong><br><strong>All the keywords ‘title’,’date’,’categories’,’tags’ must be in lower case.</strong></p>\n<h4 id=\"2-Picture-does-not-show\"><a href=\"#2-Picture-does-not-show\" class=\"headerlink\" title=\"2. Picture does not show\"></a><font size=3 color=#4169E1>2. Picture does not show</font></h4><p>The correct image format is as follows: </p>\n<img src=\"/assets/Demo/wallpaper-2311325.jpg\" class=\"\">    \n<img src=\"/assets/Demo/wallpaper-878514.jpg\" class=\"\">\n\n\n<h4 id=\"3-Change-the-font\"><a href=\"#3-Change-the-font\" class=\"headerlink\" title=\"3. Change the font\"></a><font size=3 color=#4169E1>3. Change the font</font></h4><p>On the basis of this article below:<br><a href=\"https://blog.csdn.net/Reinhart_L/article/details/122587975\">https://blog.csdn.net/Reinhart_L/article/details/122587975</a><br>(1) Enter. &#x2F; themes&#x2F;cactus&#x2F;source&#x2F;CSS &#x2F; _variables styl, can change the font;<br>(2) The available fonts are in . &#x2F;themes&#x2F;cactus&#x2F;source&#x2F;lib&#x2F;, cactus comes with only two kinds of ‘meslo-LG’ and ‘vazir-font’, you can download them yourself if you need.</p>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://ohmyswift.com/blog/2020/01/10/why-should-we-avoid-using-closures-in-swift-structs/\">Why should we avoid using closures in Swift structs?</a><br>[2] <a href=\"https://github.com/probberechts/hexo-theme-cactus\">https://github.com/probberechts/hexo-theme-cactus</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>Here is a summary of all the possible reasons for publishing failure in Hexo.</p>\n<h4 id=\"1-Header-information-is-incorrect\"><a href=\"#1-Header-information-is-incorrect\" class=\"headerlink\" title=\"1. Header information is incorrect\"></a><font size=3 color=#4169E1>1. Header information is incorrect</font></h4><p>Please strictly follow the header format:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">---</span></span><br><span class=\"line\">title: <span class=\"number\">00</span>. <span class=\"type\">Article</span> publishing failure problem summary</span><br><span class=\"line\">date: <span class=\"number\">2023</span><span class=\"operator\">-</span><span class=\"number\">01</span><span class=\"operator\">-</span><span class=\"number\">15</span> <span class=\"number\">14</span>:<span class=\"number\">00</span>:<span class=\"number\">00</span></span><br><span class=\"line\">categories: </span><br><span class=\"line\"><span class=\"operator\">-</span> [<span class=\"type\">Others</span>, <span class=\"number\">00</span>. others]</span><br><span class=\"line\">tags:</span><br><span class=\"line\"><span class=\"operator\">-</span> hexo</span><br><span class=\"line\"><span class=\"operator\">-</span> configuration</span><br><span class=\"line\"><span class=\"operator\">-</span> tool</span><br><span class=\"line\"><span class=\"operator\">---</span></span><br></pre></td></tr></table></figure>\n<p><strong>Note:</strong><br><strong>There are no empty lines in the first row.</strong><br><strong>All the keywords ‘title’,’date’,’categories’,’tags’ must be in lower case.</strong></p>\n<h4 id=\"2-Picture-does-not-show\"><a href=\"#2-Picture-does-not-show\" class=\"headerlink\" title=\"2. Picture does not show\"></a><font size=3 color=#4169E1>2. Picture does not show</font></h4><p>The correct image format is as follows: </p>\n<img src=\"/assets/Demo/wallpaper-2311325.jpg\" class=\"\">    \n<img src=\"/assets/Demo/wallpaper-878514.jpg\" class=\"\">\n\n\n<h4 id=\"3-Change-the-font\"><a href=\"#3-Change-the-font\" class=\"headerlink\" title=\"3. Change the font\"></a><font size=3 color=#4169E1>3. Change the font</font></h4><p>On the basis of this article below:<br><a href=\"https://blog.csdn.net/Reinhart_L/article/details/122587975\">https://blog.csdn.net/Reinhart_L/article/details/122587975</a><br>(1) Enter. &#x2F; themes&#x2F;cactus&#x2F;source&#x2F;CSS &#x2F; _variables styl, can change the font;<br>(2) The available fonts are in . &#x2F;themes&#x2F;cactus&#x2F;source&#x2F;lib&#x2F;, cactus comes with only two kinds of ‘meslo-LG’ and ‘vazir-font’, you can download them yourself if you need.</p>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://ohmyswift.com/blog/2020/01/10/why-should-we-avoid-using-closures-in-swift-structs/\">Why should we avoid using closures in Swift structs?</a><br>[2] <a href=\"https://github.com/probberechts/hexo-theme-cactus\">https://github.com/probberechts/hexo-theme-cactus</a></p>\n"},{"title":"01. How to use iOS Geofencing in your business?","date":"2023-10-06T10:00:00.000Z","_content":"\n\n<font color=gray size=2>*It will take about 10 minutes to finish reading this article.*</font>\n\nHere is a summary of all the possible reasons for publishing failure in Hexo.\n\n#### <font size=3 color=#4169E1>1. Background</font> \n\nThere was once such a requirement scenario, when the user walks into the neighborhood of a shop, we can send the user and the shop related to the push message, so as to attract traffic for the business. This kind of requirement is actually very common, especially for local life business.\n\nFor this kind of requirement, the more common solution is to continuously obtain the latitude and longitude of the user's current location and report it to the back-end, which will then calculate and determine whether the user has entered the area that has been marked out in advance, and if he/she has entered the area, then send a remote notification to the user.\n\nSince the business was brand new, the service side downgraded the priority of this project due to manpower constraints and it could not be scheduled until a long time. At the same time, our product manager had some urgent needs to support this feature. After discussion, we prioritized Region Monitoring on iOS, and the service side only needed to spare less manpower to support it.\n\nTherefore, Core Location provided Region Monitoring to realize this requirement, which was a temporary solution and depended too much on the client-side logic, but for a brand new business, a lot of things needed to be verified with less cost, so Region Monitoring played its role at this time.\n\nThis article was briefly written years ago:\n\nhttps://leon0206.blog.csdn.net/article/details/54670446\n\nThis time it is part of a content update.\n\n#### <font size=3 color=#4169E1>2. Principles of Geofencing</font> \n\n<font size=3 color=#4169E1>**2.1 Prerequisites**</font>\nThe Geofencing feature is a sub-function of CLLocationManager, so its trigger callbacks are also in the callbacks of CLLocationManagerDelegate. If you want to trigger these callbacks, you need to meet some of the conditions, in the official Apple documentation is also introduced, you need to meet the following conditions before you can use it:\n\n{% img /assets/iOS/Projects&Issues/000.png %}   \n\nTo summarize:\n\n(1) The user's phone has the hardware required for area monitoring (GPS, sufficient battery, Wifi, etc.);\n\n(2) The user has enabled location-related services (\"Always\" or \"When in use\" permission, background application refresh, etc.);\n\nOf course we can call CLLocationManager's isMonitoringAvailableFor: class method and authorizationStatus() to tell the availability of the Region Monitoring feature.\n\n```Swift\nif CLLocationManager.isMonitoringAvailable(for: CLCircularRegion.self) {\n    // Circular geofence monitoring is available\n}\n```\n```Swift\nlet authorizationStatus = CLLocationManager.authorizationStatus()\nif authorizationStatus == .authorizedAlways {\n    // Authorized to access location information at all times\n}\n```\n<font size=3 color=#4169E1>**2.2 CLCircularRegion**</font>\n\nGeofencing monitoring starts with setting up a circle to monitor, which is defined as a CLCircularRegion with a center coordinate and a radius in meters, and an identifier as the key value.\n\n```Swift\nopen class CLCircularRegion : CLRegion {\n\n\n    /*\n     *  initWithCenter:radius:identifier:\n     *\n     *  Discussion:\n     *    Initialize a region.  center gives the coordinates of center of the region, while radius gives\n     *    the distance in meters between the center and the region's boundary. identifier is a description\n     *    for the region that could be displayed to the user, and ideally should be chosen by the user.\n     */\n    public init(center: CLLocationCoordinate2D, radius: CLLocationDistance, identifier: String)\n    ...\n}\n```\nNote: identifier is the unique identifier of the region, if the added region has the same identifier, the new region will replace the old one.\n\n<font size=3 color=#4169E1>**2.3 Registered Area Monitors**</font>\n\nFor a Region to be monitored, it first needs to be registered and an already registered Region can also be stopped.\n\n```Swift\nfunc startMonitoring(for region: CLRegion)\nfunc stopMonitoring(for region: CLRegion)\n```\n\n\n<font size=3 color=#4169E1>**2.4 Region Monitor**</font>\n\nWhen iOS devices can listen for users entering or leaving a circular fence area. The entrance event fires when the user moves from outside the circle to inside the circle.\n\nAt the same time, the exit event fires when the user leaves the circular area, as shown in the following figure:\n\n{% img /assets/iOS/Projects&Issues/001.png %}   \n\n{% img /assets/iOS/Projects&Issues/002.png %}   \n\nNote 1:\nAfter registering an area, you can start monitoring immediately, but you won't receive the event immediately, because the event must be triggered by \"boundary crossings\", that is, you have to cross into or out of an area to trigger the event, and the corresponding callback function will be triggered as well:\n\n```Swift\nfunc locationManager(_ manager: CLLocationManager, didEnterRegion region: CLRegion) {\n    if let circularRegion = region as? CLCircularRegion {\n        handleRegionEvent(circularRegion)\n    }\n}\n\nfunc locationManager(_ manager: CLLocationManager, didExitRegion region: CLRegion) {\n    if let circularRegion = region as? CLCircularRegion {\n        handleRegionEvent(circularRegion)\n    }\n}\n\nfunc handleRegionEvent(_ region: CLCircularRegion) {\n    // Code to handle entry or exit zone events\n}\n\n```\n\nNote 2:\n\nYou can use the CLLocationManager's Request Status Information for Specified Region method to check if the user is already in a region:\n```Swift\n// Request state information for the specified region\nlocationManager.requestState(for: region)\n```\n\nWhen a user enters or leaves the monitored area, if the app is not executing, the app will be relaunched in Backgroud to handle the triggered entry and exit actions.\n\nIf the app is suspended in the background, the app will be wokenup for a short period of time (about 10 seconds, more background execution time can be requested if necessary).\n\nCareful people must think, if there is a user in the boundary of the non-stop \"wandering\", will not always start callbacks, for this case, Apple also has a corresponding solution, as follows:\n\n{% img /assets/iOS/Projects&Issues/003.png %}   \n\nThe explanation is:\n\nRegion events may not occur immediately after a region boundary is crossed. To prevent false notifications, iOS does not send region notifications until a specific threshold condition is met. Specifically, the user's location must cross the region boundary, be a minimum distance away from the boundary, and maintain that minimum distance for at least 20 seconds before a notification is sent.\n\n<font size=3 color=#4169E1>**2.5 Demo**</font>\n\nHere we look at a demo demo, this demo is the code address has been noted below, you can download.\n\n(1) in the map area register a center for 31.239394,121.499781, radius of 2000 meters of the area, as follows:\n\n{% img /assets/iOS/Projects&Issues/004.png %} \n\n(2) Change the location of the analog positioning to 31.259394,121.499781 as follows:\n\n{% img /assets/iOS/Projects&Issues/005.png %} \n\n(3) At this time we again change the current location latitude and longitude to: 31.240394,121.499781, has entered the detected area, as follows:\n\n{% img /assets/iOS/Projects&Issues/006.png %} \n\n(4) Similarly, if we cut the app to the background or kill it and change the current location, we can still receive local local notifications as follows:\n\n{% img /assets/iOS/Projects&Issues/007.png %} \n\n\n\n<font size=3 color=#4169E1>**2.6 Regions limit**</font>\n\n \nApple's official document points out that each app can monitor up to 20 regions, and the monitored regions are shared system resources, while the number of monitoring provided by the whole system is limited. For this limitation, one strategy given by Apple is to set different regions according to the user's current location, and after the user changes the location, remove the far away region and set a new region. If you go beyond 20 and continue to add, a fail callback will be executed to you:\n\n```Swift\n\n- (void)locationManager:(CLLocationManager *)manager\n  monitoringDidFailForRegion:(nullable CLRegion *)region\n  withError:(NSError *)error {}\n\n```\n\n#### <font size=3 color=#4169E1>3. Application of business scenarios</font> \n\nHow to use the specific also need to be based on business scenarios to decide, I suggest the following based on our previous business dynamics (this should be the most complex scenarios):\n\n(1)  Server-side distribution strategy of Regions\n\nA user's path we can not predict, so the Regions should take a hierarchical trigger. For example, the first to send a few default province-level large Regions (Zhejiang, Jiangsu, Anhui, etc.), if the user triggers one of the Region (Zhejiang), then you can dynamically update the Regions again for the city-level Region in Zhejiang Province, the next time you trigger a city (Hangzhou) of the Region, you can once again update the regional level of the Region. Region...\n\n\n(2) Note that the specific implementation of\n\nRegions need to be cached (expiration time), the interface needs to be issued Regions trigger strategy to avoid redundant startup requests; Regions identifier to avoid duplication, if it involves multiple businesses, it is best to distinguish the prefixes; Regions if the trigger is not needed, please stop; Regions monitor is recommended to have a global switch, the next time the trigger is a city (Hangzhou) Region, you can update the region again. monitor suggests that there is a global switch, you can server-side control off and on.\n\n#### <font size=3 color=#4169E1>4. Cautions</font> \n\nFirstly, Turning on this feature will set off the background refresh of the app, and the app will become very power-consuming (LocationManager itself is very power-consuming), which may not be a good experience for the user; so you need to be careful to turn on this feature, turn it on in time, and the related parameters (location accuracy precision and monitor's radius) need to be more refined.\n\nSecondly, Region monitor, like some Push services, will wake up the app in not running or suspend state to backgroud state, during which it will execute the application:didFinishLaunchingWithOptions: method in AppDelegate. : method, the following implications may exist here:\n\n(1) If your application adds a large code base to didFinishLaunching without categorizing the application launching scenarios, there may be some problems. For example, your logging system may record this as a cold launch event, which will affect your user activity statistics.\n\n(2) Because the app may only exist in backgroud state and does not need to load all the codebase, it is recommended to optimize it in separate scenarios from the point of view of sex consumption.\n\n(3) Here is a test demo for the OC version of RW: https://github.com/942v/Geotify-RW.\n\n#### <font size=3 color=gray>*Reference*</font>\n[1] https://www.kodeco.com/17649843-geofencing-with-core-location-getting-started\n[2] https://developer.apple.com/library/archive/documentation/UserExperience/Conceptual/LocationAwarenessPG/RegionMonitoring/RegionMonitoring.html\n","source":"_posts/iOS/05. Projects & Issues/01. How to use iOS Geofencing in your business.md","raw":"---\ntitle: 01. How to use iOS Geofencing in your business?\ndate: 2023-10-06 12:00:00\ncategories: \n- [iOS, 05. Projects & Issues]\ntags:\n- Geofencing\n---\n\n\n<font color=gray size=2>*It will take about 10 minutes to finish reading this article.*</font>\n\nHere is a summary of all the possible reasons for publishing failure in Hexo.\n\n#### <font size=3 color=#4169E1>1. Background</font> \n\nThere was once such a requirement scenario, when the user walks into the neighborhood of a shop, we can send the user and the shop related to the push message, so as to attract traffic for the business. This kind of requirement is actually very common, especially for local life business.\n\nFor this kind of requirement, the more common solution is to continuously obtain the latitude and longitude of the user's current location and report it to the back-end, which will then calculate and determine whether the user has entered the area that has been marked out in advance, and if he/she has entered the area, then send a remote notification to the user.\n\nSince the business was brand new, the service side downgraded the priority of this project due to manpower constraints and it could not be scheduled until a long time. At the same time, our product manager had some urgent needs to support this feature. After discussion, we prioritized Region Monitoring on iOS, and the service side only needed to spare less manpower to support it.\n\nTherefore, Core Location provided Region Monitoring to realize this requirement, which was a temporary solution and depended too much on the client-side logic, but for a brand new business, a lot of things needed to be verified with less cost, so Region Monitoring played its role at this time.\n\nThis article was briefly written years ago:\n\nhttps://leon0206.blog.csdn.net/article/details/54670446\n\nThis time it is part of a content update.\n\n#### <font size=3 color=#4169E1>2. Principles of Geofencing</font> \n\n<font size=3 color=#4169E1>**2.1 Prerequisites**</font>\nThe Geofencing feature is a sub-function of CLLocationManager, so its trigger callbacks are also in the callbacks of CLLocationManagerDelegate. If you want to trigger these callbacks, you need to meet some of the conditions, in the official Apple documentation is also introduced, you need to meet the following conditions before you can use it:\n\n{% img /assets/iOS/Projects&Issues/000.png %}   \n\nTo summarize:\n\n(1) The user's phone has the hardware required for area monitoring (GPS, sufficient battery, Wifi, etc.);\n\n(2) The user has enabled location-related services (\"Always\" or \"When in use\" permission, background application refresh, etc.);\n\nOf course we can call CLLocationManager's isMonitoringAvailableFor: class method and authorizationStatus() to tell the availability of the Region Monitoring feature.\n\n```Swift\nif CLLocationManager.isMonitoringAvailable(for: CLCircularRegion.self) {\n    // Circular geofence monitoring is available\n}\n```\n```Swift\nlet authorizationStatus = CLLocationManager.authorizationStatus()\nif authorizationStatus == .authorizedAlways {\n    // Authorized to access location information at all times\n}\n```\n<font size=3 color=#4169E1>**2.2 CLCircularRegion**</font>\n\nGeofencing monitoring starts with setting up a circle to monitor, which is defined as a CLCircularRegion with a center coordinate and a radius in meters, and an identifier as the key value.\n\n```Swift\nopen class CLCircularRegion : CLRegion {\n\n\n    /*\n     *  initWithCenter:radius:identifier:\n     *\n     *  Discussion:\n     *    Initialize a region.  center gives the coordinates of center of the region, while radius gives\n     *    the distance in meters between the center and the region's boundary. identifier is a description\n     *    for the region that could be displayed to the user, and ideally should be chosen by the user.\n     */\n    public init(center: CLLocationCoordinate2D, radius: CLLocationDistance, identifier: String)\n    ...\n}\n```\nNote: identifier is the unique identifier of the region, if the added region has the same identifier, the new region will replace the old one.\n\n<font size=3 color=#4169E1>**2.3 Registered Area Monitors**</font>\n\nFor a Region to be monitored, it first needs to be registered and an already registered Region can also be stopped.\n\n```Swift\nfunc startMonitoring(for region: CLRegion)\nfunc stopMonitoring(for region: CLRegion)\n```\n\n\n<font size=3 color=#4169E1>**2.4 Region Monitor**</font>\n\nWhen iOS devices can listen for users entering or leaving a circular fence area. The entrance event fires when the user moves from outside the circle to inside the circle.\n\nAt the same time, the exit event fires when the user leaves the circular area, as shown in the following figure:\n\n{% img /assets/iOS/Projects&Issues/001.png %}   \n\n{% img /assets/iOS/Projects&Issues/002.png %}   \n\nNote 1:\nAfter registering an area, you can start monitoring immediately, but you won't receive the event immediately, because the event must be triggered by \"boundary crossings\", that is, you have to cross into or out of an area to trigger the event, and the corresponding callback function will be triggered as well:\n\n```Swift\nfunc locationManager(_ manager: CLLocationManager, didEnterRegion region: CLRegion) {\n    if let circularRegion = region as? CLCircularRegion {\n        handleRegionEvent(circularRegion)\n    }\n}\n\nfunc locationManager(_ manager: CLLocationManager, didExitRegion region: CLRegion) {\n    if let circularRegion = region as? CLCircularRegion {\n        handleRegionEvent(circularRegion)\n    }\n}\n\nfunc handleRegionEvent(_ region: CLCircularRegion) {\n    // Code to handle entry or exit zone events\n}\n\n```\n\nNote 2:\n\nYou can use the CLLocationManager's Request Status Information for Specified Region method to check if the user is already in a region:\n```Swift\n// Request state information for the specified region\nlocationManager.requestState(for: region)\n```\n\nWhen a user enters or leaves the monitored area, if the app is not executing, the app will be relaunched in Backgroud to handle the triggered entry and exit actions.\n\nIf the app is suspended in the background, the app will be wokenup for a short period of time (about 10 seconds, more background execution time can be requested if necessary).\n\nCareful people must think, if there is a user in the boundary of the non-stop \"wandering\", will not always start callbacks, for this case, Apple also has a corresponding solution, as follows:\n\n{% img /assets/iOS/Projects&Issues/003.png %}   \n\nThe explanation is:\n\nRegion events may not occur immediately after a region boundary is crossed. To prevent false notifications, iOS does not send region notifications until a specific threshold condition is met. Specifically, the user's location must cross the region boundary, be a minimum distance away from the boundary, and maintain that minimum distance for at least 20 seconds before a notification is sent.\n\n<font size=3 color=#4169E1>**2.5 Demo**</font>\n\nHere we look at a demo demo, this demo is the code address has been noted below, you can download.\n\n(1) in the map area register a center for 31.239394,121.499781, radius of 2000 meters of the area, as follows:\n\n{% img /assets/iOS/Projects&Issues/004.png %} \n\n(2) Change the location of the analog positioning to 31.259394,121.499781 as follows:\n\n{% img /assets/iOS/Projects&Issues/005.png %} \n\n(3) At this time we again change the current location latitude and longitude to: 31.240394,121.499781, has entered the detected area, as follows:\n\n{% img /assets/iOS/Projects&Issues/006.png %} \n\n(4) Similarly, if we cut the app to the background or kill it and change the current location, we can still receive local local notifications as follows:\n\n{% img /assets/iOS/Projects&Issues/007.png %} \n\n\n\n<font size=3 color=#4169E1>**2.6 Regions limit**</font>\n\n \nApple's official document points out that each app can monitor up to 20 regions, and the monitored regions are shared system resources, while the number of monitoring provided by the whole system is limited. For this limitation, one strategy given by Apple is to set different regions according to the user's current location, and after the user changes the location, remove the far away region and set a new region. If you go beyond 20 and continue to add, a fail callback will be executed to you:\n\n```Swift\n\n- (void)locationManager:(CLLocationManager *)manager\n  monitoringDidFailForRegion:(nullable CLRegion *)region\n  withError:(NSError *)error {}\n\n```\n\n#### <font size=3 color=#4169E1>3. Application of business scenarios</font> \n\nHow to use the specific also need to be based on business scenarios to decide, I suggest the following based on our previous business dynamics (this should be the most complex scenarios):\n\n(1)  Server-side distribution strategy of Regions\n\nA user's path we can not predict, so the Regions should take a hierarchical trigger. For example, the first to send a few default province-level large Regions (Zhejiang, Jiangsu, Anhui, etc.), if the user triggers one of the Region (Zhejiang), then you can dynamically update the Regions again for the city-level Region in Zhejiang Province, the next time you trigger a city (Hangzhou) of the Region, you can once again update the regional level of the Region. Region...\n\n\n(2) Note that the specific implementation of\n\nRegions need to be cached (expiration time), the interface needs to be issued Regions trigger strategy to avoid redundant startup requests; Regions identifier to avoid duplication, if it involves multiple businesses, it is best to distinguish the prefixes; Regions if the trigger is not needed, please stop; Regions monitor is recommended to have a global switch, the next time the trigger is a city (Hangzhou) Region, you can update the region again. monitor suggests that there is a global switch, you can server-side control off and on.\n\n#### <font size=3 color=#4169E1>4. Cautions</font> \n\nFirstly, Turning on this feature will set off the background refresh of the app, and the app will become very power-consuming (LocationManager itself is very power-consuming), which may not be a good experience for the user; so you need to be careful to turn on this feature, turn it on in time, and the related parameters (location accuracy precision and monitor's radius) need to be more refined.\n\nSecondly, Region monitor, like some Push services, will wake up the app in not running or suspend state to backgroud state, during which it will execute the application:didFinishLaunchingWithOptions: method in AppDelegate. : method, the following implications may exist here:\n\n(1) If your application adds a large code base to didFinishLaunching without categorizing the application launching scenarios, there may be some problems. For example, your logging system may record this as a cold launch event, which will affect your user activity statistics.\n\n(2) Because the app may only exist in backgroud state and does not need to load all the codebase, it is recommended to optimize it in separate scenarios from the point of view of sex consumption.\n\n(3) Here is a test demo for the OC version of RW: https://github.com/942v/Geotify-RW.\n\n#### <font size=3 color=gray>*Reference*</font>\n[1] https://www.kodeco.com/17649843-geofencing-with-core-location-getting-started\n[2] https://developer.apple.com/library/archive/documentation/UserExperience/Conceptual/LocationAwarenessPG/RegionMonitoring/RegionMonitoring.html\n","slug":"iOS/05. Projects & Issues/01. How to use iOS Geofencing in your business","published":1,"updated":"2023-10-06T14:49:59.635Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr650055vu0m5xr1cmau","content":"<p><font color=gray size=2><em>It will take about 10 minutes to finish reading this article.</em></font></p>\n<p>Here is a summary of all the possible reasons for publishing failure in Hexo.</p>\n<h4 id=\"1-Background\"><a href=\"#1-Background\" class=\"headerlink\" title=\"1. Background\"></a><font size=3 color=#4169E1>1. Background</font></h4><p>There was once such a requirement scenario, when the user walks into the neighborhood of a shop, we can send the user and the shop related to the push message, so as to attract traffic for the business. This kind of requirement is actually very common, especially for local life business.</p>\n<p>For this kind of requirement, the more common solution is to continuously obtain the latitude and longitude of the user’s current location and report it to the back-end, which will then calculate and determine whether the user has entered the area that has been marked out in advance, and if he&#x2F;she has entered the area, then send a remote notification to the user.</p>\n<p>Since the business was brand new, the service side downgraded the priority of this project due to manpower constraints and it could not be scheduled until a long time. At the same time, our product manager had some urgent needs to support this feature. After discussion, we prioritized Region Monitoring on iOS, and the service side only needed to spare less manpower to support it.</p>\n<p>Therefore, Core Location provided Region Monitoring to realize this requirement, which was a temporary solution and depended too much on the client-side logic, but for a brand new business, a lot of things needed to be verified with less cost, so Region Monitoring played its role at this time.</p>\n<p>This article was briefly written years ago:</p>\n<p><a href=\"https://leon0206.blog.csdn.net/article/details/54670446\">https://leon0206.blog.csdn.net/article/details/54670446</a></p>\n<p>This time it is part of a content update.</p>\n<h4 id=\"2-Principles-of-Geofencing\"><a href=\"#2-Principles-of-Geofencing\" class=\"headerlink\" title=\"2. Principles of Geofencing\"></a><font size=3 color=#4169E1>2. Principles of Geofencing</font></h4><p><font size=3 color=#4169E1><strong>2.1 Prerequisites</strong></font><br>The Geofencing feature is a sub-function of CLLocationManager, so its trigger callbacks are also in the callbacks of CLLocationManagerDelegate. If you want to trigger these callbacks, you need to meet some of the conditions, in the official Apple documentation is also introduced, you need to meet the following conditions before you can use it:</p>\n<img src=\"/assets/iOS/Projects&Issues/000.png\" class=\"\">   \n\n<p>To summarize:</p>\n<p>(1) The user’s phone has the hardware required for area monitoring (GPS, sufficient battery, Wifi, etc.);</p>\n<p>(2) The user has enabled location-related services (“Always” or “When in use” permission, background application refresh, etc.);</p>\n<p>Of course we can call CLLocationManager’s isMonitoringAvailableFor: class method and authorizationStatus() to tell the availability of the Region Monitoring feature.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"type\">CLLocationManager</span>.isMonitoringAvailable(for: <span class=\"type\">CLCircularRegion</span>.<span class=\"keyword\">self</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Circular geofence monitoring is available</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> authorizationStatus <span class=\"operator\">=</span> <span class=\"type\">CLLocationManager</span>.authorizationStatus()</span><br><span class=\"line\"><span class=\"keyword\">if</span> authorizationStatus <span class=\"operator\">==</span> .authorizedAlways &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Authorized to access location information at all times</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><font size=3 color=#4169E1><strong>2.2 CLCircularRegion</strong></font></p>\n<p>Geofencing monitoring starts with setting up a circle to monitor, which is defined as a CLCircularRegion with a center coordinate and a radius in meters, and an identifier as the key value.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">open</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CLCircularRegion</span> : <span class=\"title class_\">CLRegion</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     *  initWithCenter:radius:identifier:</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     *  Discussion:</span></span><br><span class=\"line\"><span class=\"comment\">     *    Initialize a region.  center gives the coordinates of center of the region, while radius gives</span></span><br><span class=\"line\"><span class=\"comment\">     *    the distance in meters between the center and the region&#x27;s boundary. identifier is a description</span></span><br><span class=\"line\"><span class=\"comment\">     *    for the region that could be displayed to the user, and ideally should be chosen by the user.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">init</span>(<span class=\"params\">center</span>: <span class=\"type\">CLLocationCoordinate2D</span>, <span class=\"params\">radius</span>: <span class=\"type\">CLLocationDistance</span>, <span class=\"params\">identifier</span>: <span class=\"type\">String</span>)</span><br><span class=\"line\">    <span class=\"operator\">...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Note: identifier is the unique identifier of the region, if the added region has the same identifier, the new region will replace the old one.</p>\n<p><font size=3 color=#4169E1><strong>2.3 Registered Area Monitors</strong></font></p>\n<p>For a Region to be monitored, it first needs to be registered and an already registered Region can also be stopped.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">startMonitoring</span>(<span class=\"params\">for</span> <span class=\"params\">region</span>: <span class=\"type\">CLRegion</span>)</span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">stopMonitoring</span>(<span class=\"params\">for</span> <span class=\"params\">region</span>: <span class=\"type\">CLRegion</span>)</span><br></pre></td></tr></table></figure>\n\n\n<p><font size=3 color=#4169E1><strong>2.4 Region Monitor</strong></font></p>\n<p>When iOS devices can listen for users entering or leaving a circular fence area. The entrance event fires when the user moves from outside the circle to inside the circle.</p>\n<p>At the same time, the exit event fires when the user leaves the circular area, as shown in the following figure:</p>\n<img src=\"/assets/iOS/Projects&Issues/001.png\" class=\"\">   \n\n<img src=\"/assets/iOS/Projects&Issues/002.png\" class=\"\">   \n\n<p>Note 1:<br>After registering an area, you can start monitoring immediately, but you won’t receive the event immediately, because the event must be triggered by “boundary crossings”, that is, you have to cross into or out of an area to trigger the event, and the corresponding callback function will be triggered as well:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">locationManager</span>(<span class=\"keyword\">_</span> <span class=\"params\">manager</span>: <span class=\"type\">CLLocationManager</span>, <span class=\"params\">didEnterRegion</span> <span class=\"params\">region</span>: <span class=\"type\">CLRegion</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> circularRegion <span class=\"operator\">=</span> region <span class=\"keyword\">as?</span> <span class=\"type\">CLCircularRegion</span> &#123;</span><br><span class=\"line\">        handleRegionEvent(circularRegion)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">locationManager</span>(<span class=\"keyword\">_</span> <span class=\"params\">manager</span>: <span class=\"type\">CLLocationManager</span>, <span class=\"params\">didExitRegion</span> <span class=\"params\">region</span>: <span class=\"type\">CLRegion</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> circularRegion <span class=\"operator\">=</span> region <span class=\"keyword\">as?</span> <span class=\"type\">CLCircularRegion</span> &#123;</span><br><span class=\"line\">        handleRegionEvent(circularRegion)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">handleRegionEvent</span>(<span class=\"keyword\">_</span> <span class=\"params\">region</span>: <span class=\"type\">CLCircularRegion</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Code to handle entry or exit zone events</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Note 2:</p>\n<p>You can use the CLLocationManager’s Request Status Information for Specified Region method to check if the user is already in a region:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Request state information for the specified region</span></span><br><span class=\"line\">locationManager.requestState(for: region)</span><br></pre></td></tr></table></figure>\n\n<p>When a user enters or leaves the monitored area, if the app is not executing, the app will be relaunched in Backgroud to handle the triggered entry and exit actions.</p>\n<p>If the app is suspended in the background, the app will be wokenup for a short period of time (about 10 seconds, more background execution time can be requested if necessary).</p>\n<p>Careful people must think, if there is a user in the boundary of the non-stop “wandering”, will not always start callbacks, for this case, Apple also has a corresponding solution, as follows:</p>\n<img src=\"/assets/iOS/Projects&Issues/003.png\" class=\"\">   \n\n<p>The explanation is:</p>\n<p>Region events may not occur immediately after a region boundary is crossed. To prevent false notifications, iOS does not send region notifications until a specific threshold condition is met. Specifically, the user’s location must cross the region boundary, be a minimum distance away from the boundary, and maintain that minimum distance for at least 20 seconds before a notification is sent.</p>\n<p><font size=3 color=#4169E1><strong>2.5 Demo</strong></font></p>\n<p>Here we look at a demo demo, this demo is the code address has been noted below, you can download.</p>\n<p>(1) in the map area register a center for 31.239394,121.499781, radius of 2000 meters of the area, as follows:</p>\n<img src=\"/assets/iOS/Projects&Issues/004.png\" class=\"\"> \n\n<p>(2) Change the location of the analog positioning to 31.259394,121.499781 as follows:</p>\n<img src=\"/assets/iOS/Projects&Issues/005.png\" class=\"\"> \n\n<p>(3) At this time we again change the current location latitude and longitude to: 31.240394,121.499781, has entered the detected area, as follows:</p>\n<img src=\"/assets/iOS/Projects&Issues/006.png\" class=\"\"> \n\n<p>(4) Similarly, if we cut the app to the background or kill it and change the current location, we can still receive local local notifications as follows:</p>\n<img src=\"/assets/iOS/Projects&Issues/007.png\" class=\"\"> \n\n\n\n<p><font size=3 color=#4169E1><strong>2.6 Regions limit</strong></font></p>\n<p>Apple’s official document points out that each app can monitor up to 20 regions, and the monitored regions are shared system resources, while the number of monitoring provided by the whole system is limited. For this limitation, one strategy given by Apple is to set different regions according to the user’s current location, and after the user changes the location, remove the far away region and set a new region. If you go beyond 20 and continue to add, a fail callback will be executed to you:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"operator\">-</span> (void)locationManager:(<span class=\"type\">CLLocationManager</span> <span class=\"operator\">*</span>)manager</span><br><span class=\"line\">  monitoringDidFailForRegion:(nullable <span class=\"type\">CLRegion</span> <span class=\"operator\">*</span>)region</span><br><span class=\"line\">  withError:(<span class=\"type\">NSError</span> <span class=\"operator\">*</span>)error &#123;&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-Application-of-business-scenarios\"><a href=\"#3-Application-of-business-scenarios\" class=\"headerlink\" title=\"3. Application of business scenarios\"></a><font size=3 color=#4169E1>3. Application of business scenarios</font></h4><p>How to use the specific also need to be based on business scenarios to decide, I suggest the following based on our previous business dynamics (this should be the most complex scenarios):</p>\n<p>(1)  Server-side distribution strategy of Regions</p>\n<p>A user’s path we can not predict, so the Regions should take a hierarchical trigger. For example, the first to send a few default province-level large Regions (Zhejiang, Jiangsu, Anhui, etc.), if the user triggers one of the Region (Zhejiang), then you can dynamically update the Regions again for the city-level Region in Zhejiang Province, the next time you trigger a city (Hangzhou) of the Region, you can once again update the regional level of the Region. Region…</p>\n<p>(2) Note that the specific implementation of</p>\n<p>Regions need to be cached (expiration time), the interface needs to be issued Regions trigger strategy to avoid redundant startup requests; Regions identifier to avoid duplication, if it involves multiple businesses, it is best to distinguish the prefixes; Regions if the trigger is not needed, please stop; Regions monitor is recommended to have a global switch, the next time the trigger is a city (Hangzhou) Region, you can update the region again. monitor suggests that there is a global switch, you can server-side control off and on.</p>\n<h4 id=\"4-Cautions\"><a href=\"#4-Cautions\" class=\"headerlink\" title=\"4. Cautions\"></a><font size=3 color=#4169E1>4. Cautions</font></h4><p>Firstly, Turning on this feature will set off the background refresh of the app, and the app will become very power-consuming (LocationManager itself is very power-consuming), which may not be a good experience for the user; so you need to be careful to turn on this feature, turn it on in time, and the related parameters (location accuracy precision and monitor’s radius) need to be more refined.</p>\n<p>Secondly, Region monitor, like some Push services, will wake up the app in not running or suspend state to backgroud state, during which it will execute the application:didFinishLaunchingWithOptions: method in AppDelegate. : method, the following implications may exist here:</p>\n<p>(1) If your application adds a large code base to didFinishLaunching without categorizing the application launching scenarios, there may be some problems. For example, your logging system may record this as a cold launch event, which will affect your user activity statistics.</p>\n<p>(2) Because the app may only exist in backgroud state and does not need to load all the codebase, it is recommended to optimize it in separate scenarios from the point of view of sex consumption.</p>\n<p>(3) Here is a test demo for the OC version of RW: <a href=\"https://github.com/942v/Geotify-RW\">https://github.com/942v/Geotify-RW</a>.</p>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://www.kodeco.com/17649843-geofencing-with-core-location-getting-started\">https://www.kodeco.com/17649843-geofencing-with-core-location-getting-started</a><br>[2] <a href=\"https://developer.apple.com/library/archive/documentation/UserExperience/Conceptual/LocationAwarenessPG/RegionMonitoring/RegionMonitoring.html\">https://developer.apple.com/library/archive/documentation/UserExperience/Conceptual/LocationAwarenessPG/RegionMonitoring/RegionMonitoring.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 10 minutes to finish reading this article.</em></font></p>\n<p>Here is a summary of all the possible reasons for publishing failure in Hexo.</p>\n<h4 id=\"1-Background\"><a href=\"#1-Background\" class=\"headerlink\" title=\"1. Background\"></a><font size=3 color=#4169E1>1. Background</font></h4><p>There was once such a requirement scenario, when the user walks into the neighborhood of a shop, we can send the user and the shop related to the push message, so as to attract traffic for the business. This kind of requirement is actually very common, especially for local life business.</p>\n<p>For this kind of requirement, the more common solution is to continuously obtain the latitude and longitude of the user’s current location and report it to the back-end, which will then calculate and determine whether the user has entered the area that has been marked out in advance, and if he&#x2F;she has entered the area, then send a remote notification to the user.</p>\n<p>Since the business was brand new, the service side downgraded the priority of this project due to manpower constraints and it could not be scheduled until a long time. At the same time, our product manager had some urgent needs to support this feature. After discussion, we prioritized Region Monitoring on iOS, and the service side only needed to spare less manpower to support it.</p>\n<p>Therefore, Core Location provided Region Monitoring to realize this requirement, which was a temporary solution and depended too much on the client-side logic, but for a brand new business, a lot of things needed to be verified with less cost, so Region Monitoring played its role at this time.</p>\n<p>This article was briefly written years ago:</p>\n<p><a href=\"https://leon0206.blog.csdn.net/article/details/54670446\">https://leon0206.blog.csdn.net/article/details/54670446</a></p>\n<p>This time it is part of a content update.</p>\n<h4 id=\"2-Principles-of-Geofencing\"><a href=\"#2-Principles-of-Geofencing\" class=\"headerlink\" title=\"2. Principles of Geofencing\"></a><font size=3 color=#4169E1>2. Principles of Geofencing</font></h4><p><font size=3 color=#4169E1><strong>2.1 Prerequisites</strong></font><br>The Geofencing feature is a sub-function of CLLocationManager, so its trigger callbacks are also in the callbacks of CLLocationManagerDelegate. If you want to trigger these callbacks, you need to meet some of the conditions, in the official Apple documentation is also introduced, you need to meet the following conditions before you can use it:</p>\n<img src=\"/assets/iOS/Projects&Issues/000.png\" class=\"\">   \n\n<p>To summarize:</p>\n<p>(1) The user’s phone has the hardware required for area monitoring (GPS, sufficient battery, Wifi, etc.);</p>\n<p>(2) The user has enabled location-related services (“Always” or “When in use” permission, background application refresh, etc.);</p>\n<p>Of course we can call CLLocationManager’s isMonitoringAvailableFor: class method and authorizationStatus() to tell the availability of the Region Monitoring feature.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"type\">CLLocationManager</span>.isMonitoringAvailable(for: <span class=\"type\">CLCircularRegion</span>.<span class=\"keyword\">self</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Circular geofence monitoring is available</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> authorizationStatus <span class=\"operator\">=</span> <span class=\"type\">CLLocationManager</span>.authorizationStatus()</span><br><span class=\"line\"><span class=\"keyword\">if</span> authorizationStatus <span class=\"operator\">==</span> .authorizedAlways &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Authorized to access location information at all times</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><font size=3 color=#4169E1><strong>2.2 CLCircularRegion</strong></font></p>\n<p>Geofencing monitoring starts with setting up a circle to monitor, which is defined as a CLCircularRegion with a center coordinate and a radius in meters, and an identifier as the key value.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">open</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CLCircularRegion</span> : <span class=\"title class_\">CLRegion</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     *  initWithCenter:radius:identifier:</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     *  Discussion:</span></span><br><span class=\"line\"><span class=\"comment\">     *    Initialize a region.  center gives the coordinates of center of the region, while radius gives</span></span><br><span class=\"line\"><span class=\"comment\">     *    the distance in meters between the center and the region&#x27;s boundary. identifier is a description</span></span><br><span class=\"line\"><span class=\"comment\">     *    for the region that could be displayed to the user, and ideally should be chosen by the user.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">init</span>(<span class=\"params\">center</span>: <span class=\"type\">CLLocationCoordinate2D</span>, <span class=\"params\">radius</span>: <span class=\"type\">CLLocationDistance</span>, <span class=\"params\">identifier</span>: <span class=\"type\">String</span>)</span><br><span class=\"line\">    <span class=\"operator\">...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Note: identifier is the unique identifier of the region, if the added region has the same identifier, the new region will replace the old one.</p>\n<p><font size=3 color=#4169E1><strong>2.3 Registered Area Monitors</strong></font></p>\n<p>For a Region to be monitored, it first needs to be registered and an already registered Region can also be stopped.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">startMonitoring</span>(<span class=\"params\">for</span> <span class=\"params\">region</span>: <span class=\"type\">CLRegion</span>)</span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">stopMonitoring</span>(<span class=\"params\">for</span> <span class=\"params\">region</span>: <span class=\"type\">CLRegion</span>)</span><br></pre></td></tr></table></figure>\n\n\n<p><font size=3 color=#4169E1><strong>2.4 Region Monitor</strong></font></p>\n<p>When iOS devices can listen for users entering or leaving a circular fence area. The entrance event fires when the user moves from outside the circle to inside the circle.</p>\n<p>At the same time, the exit event fires when the user leaves the circular area, as shown in the following figure:</p>\n<img src=\"/assets/iOS/Projects&Issues/001.png\" class=\"\">   \n\n<img src=\"/assets/iOS/Projects&Issues/002.png\" class=\"\">   \n\n<p>Note 1:<br>After registering an area, you can start monitoring immediately, but you won’t receive the event immediately, because the event must be triggered by “boundary crossings”, that is, you have to cross into or out of an area to trigger the event, and the corresponding callback function will be triggered as well:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">locationManager</span>(<span class=\"keyword\">_</span> <span class=\"params\">manager</span>: <span class=\"type\">CLLocationManager</span>, <span class=\"params\">didEnterRegion</span> <span class=\"params\">region</span>: <span class=\"type\">CLRegion</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> circularRegion <span class=\"operator\">=</span> region <span class=\"keyword\">as?</span> <span class=\"type\">CLCircularRegion</span> &#123;</span><br><span class=\"line\">        handleRegionEvent(circularRegion)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">locationManager</span>(<span class=\"keyword\">_</span> <span class=\"params\">manager</span>: <span class=\"type\">CLLocationManager</span>, <span class=\"params\">didExitRegion</span> <span class=\"params\">region</span>: <span class=\"type\">CLRegion</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> circularRegion <span class=\"operator\">=</span> region <span class=\"keyword\">as?</span> <span class=\"type\">CLCircularRegion</span> &#123;</span><br><span class=\"line\">        handleRegionEvent(circularRegion)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">handleRegionEvent</span>(<span class=\"keyword\">_</span> <span class=\"params\">region</span>: <span class=\"type\">CLCircularRegion</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Code to handle entry or exit zone events</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Note 2:</p>\n<p>You can use the CLLocationManager’s Request Status Information for Specified Region method to check if the user is already in a region:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Request state information for the specified region</span></span><br><span class=\"line\">locationManager.requestState(for: region)</span><br></pre></td></tr></table></figure>\n\n<p>When a user enters or leaves the monitored area, if the app is not executing, the app will be relaunched in Backgroud to handle the triggered entry and exit actions.</p>\n<p>If the app is suspended in the background, the app will be wokenup for a short period of time (about 10 seconds, more background execution time can be requested if necessary).</p>\n<p>Careful people must think, if there is a user in the boundary of the non-stop “wandering”, will not always start callbacks, for this case, Apple also has a corresponding solution, as follows:</p>\n<img src=\"/assets/iOS/Projects&Issues/003.png\" class=\"\">   \n\n<p>The explanation is:</p>\n<p>Region events may not occur immediately after a region boundary is crossed. To prevent false notifications, iOS does not send region notifications until a specific threshold condition is met. Specifically, the user’s location must cross the region boundary, be a minimum distance away from the boundary, and maintain that minimum distance for at least 20 seconds before a notification is sent.</p>\n<p><font size=3 color=#4169E1><strong>2.5 Demo</strong></font></p>\n<p>Here we look at a demo demo, this demo is the code address has been noted below, you can download.</p>\n<p>(1) in the map area register a center for 31.239394,121.499781, radius of 2000 meters of the area, as follows:</p>\n<img src=\"/assets/iOS/Projects&Issues/004.png\" class=\"\"> \n\n<p>(2) Change the location of the analog positioning to 31.259394,121.499781 as follows:</p>\n<img src=\"/assets/iOS/Projects&Issues/005.png\" class=\"\"> \n\n<p>(3) At this time we again change the current location latitude and longitude to: 31.240394,121.499781, has entered the detected area, as follows:</p>\n<img src=\"/assets/iOS/Projects&Issues/006.png\" class=\"\"> \n\n<p>(4) Similarly, if we cut the app to the background or kill it and change the current location, we can still receive local local notifications as follows:</p>\n<img src=\"/assets/iOS/Projects&Issues/007.png\" class=\"\"> \n\n\n\n<p><font size=3 color=#4169E1><strong>2.6 Regions limit</strong></font></p>\n<p>Apple’s official document points out that each app can monitor up to 20 regions, and the monitored regions are shared system resources, while the number of monitoring provided by the whole system is limited. For this limitation, one strategy given by Apple is to set different regions according to the user’s current location, and after the user changes the location, remove the far away region and set a new region. If you go beyond 20 and continue to add, a fail callback will be executed to you:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"operator\">-</span> (void)locationManager:(<span class=\"type\">CLLocationManager</span> <span class=\"operator\">*</span>)manager</span><br><span class=\"line\">  monitoringDidFailForRegion:(nullable <span class=\"type\">CLRegion</span> <span class=\"operator\">*</span>)region</span><br><span class=\"line\">  withError:(<span class=\"type\">NSError</span> <span class=\"operator\">*</span>)error &#123;&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-Application-of-business-scenarios\"><a href=\"#3-Application-of-business-scenarios\" class=\"headerlink\" title=\"3. Application of business scenarios\"></a><font size=3 color=#4169E1>3. Application of business scenarios</font></h4><p>How to use the specific also need to be based on business scenarios to decide, I suggest the following based on our previous business dynamics (this should be the most complex scenarios):</p>\n<p>(1)  Server-side distribution strategy of Regions</p>\n<p>A user’s path we can not predict, so the Regions should take a hierarchical trigger. For example, the first to send a few default province-level large Regions (Zhejiang, Jiangsu, Anhui, etc.), if the user triggers one of the Region (Zhejiang), then you can dynamically update the Regions again for the city-level Region in Zhejiang Province, the next time you trigger a city (Hangzhou) of the Region, you can once again update the regional level of the Region. Region…</p>\n<p>(2) Note that the specific implementation of</p>\n<p>Regions need to be cached (expiration time), the interface needs to be issued Regions trigger strategy to avoid redundant startup requests; Regions identifier to avoid duplication, if it involves multiple businesses, it is best to distinguish the prefixes; Regions if the trigger is not needed, please stop; Regions monitor is recommended to have a global switch, the next time the trigger is a city (Hangzhou) Region, you can update the region again. monitor suggests that there is a global switch, you can server-side control off and on.</p>\n<h4 id=\"4-Cautions\"><a href=\"#4-Cautions\" class=\"headerlink\" title=\"4. Cautions\"></a><font size=3 color=#4169E1>4. Cautions</font></h4><p>Firstly, Turning on this feature will set off the background refresh of the app, and the app will become very power-consuming (LocationManager itself is very power-consuming), which may not be a good experience for the user; so you need to be careful to turn on this feature, turn it on in time, and the related parameters (location accuracy precision and monitor’s radius) need to be more refined.</p>\n<p>Secondly, Region monitor, like some Push services, will wake up the app in not running or suspend state to backgroud state, during which it will execute the application:didFinishLaunchingWithOptions: method in AppDelegate. : method, the following implications may exist here:</p>\n<p>(1) If your application adds a large code base to didFinishLaunching without categorizing the application launching scenarios, there may be some problems. For example, your logging system may record this as a cold launch event, which will affect your user activity statistics.</p>\n<p>(2) Because the app may only exist in backgroud state and does not need to load all the codebase, it is recommended to optimize it in separate scenarios from the point of view of sex consumption.</p>\n<p>(3) Here is a test demo for the OC version of RW: <a href=\"https://github.com/942v/Geotify-RW\">https://github.com/942v/Geotify-RW</a>.</p>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://www.kodeco.com/17649843-geofencing-with-core-location-getting-started\">https://www.kodeco.com/17649843-geofencing-with-core-location-getting-started</a><br>[2] <a href=\"https://developer.apple.com/library/archive/documentation/UserExperience/Conceptual/LocationAwarenessPG/RegionMonitoring/RegionMonitoring.html\">https://developer.apple.com/library/archive/documentation/UserExperience/Conceptual/LocationAwarenessPG/RegionMonitoring/RegionMonitoring.html</a></p>\n"},{"title":"00. Article publishing failure problem summary","date":"2023-01-15T13:00:00.000Z","_content":"\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nHere is a summary of all the possible reasons for publishing failure in Hexo.\n\n#### <font size=3 color=#4169E1>1. Header information is incorrect</font> \nPlease strictly follow the header format:\n```Swift \n---\ntitle: 00. Article publishing failure problem summary\ndate: 2023-01-15 14:00:00\ncategories: \n- [Others, 00. others]\ntags:\n- hexo\n- configuration\n- tool\n---\n```\n**Note:**   \n**There are no empty lines in the first row.**   \n**All the keywords 'title','date','categories','tags' must be in lower case.**\n\n#### <font size=3 color=#4169E1>2. Picture does not show</font> \n\nThe correct image format is as follows: \n{% img /assets/Demo/wallpaper-2311325.jpg %}    \n{% img /assets/Demo/wallpaper-878514.jpg %}\n\n\n#### <font size=3 color=#4169E1>3. Change the font</font> \nOn the basis of this article below:       \nhttps://blog.csdn.net/Reinhart_L/article/details/122587975       \n(1) Enter. / themes/cactus/source/CSS / _variables styl, can change the font;   \n(2) The available fonts are in . /themes/cactus/source/lib/, cactus comes with only two kinds of 'meslo-LG' and 'vazir-font', you can download them yourself if you need.\n\n\n\n#### <font size=3 color=gray>*Reference*</font>\n[1] [Why should we avoid using closures in Swift structs?](https://ohmyswift.com/blog/2020/01/10/why-should-we-avoid-using-closures-in-swift-structs/)  \n[2] https://github.com/probberechts/hexo-theme-cactus\n","source":"_posts/iOS/05. Projects & Issues/03. A modular page-building solution based on UIView..md","raw":"---\ntitle: 00. Article publishing failure problem summary\ndate: 2023-01-15 14:00:00\ncategories: \n- [Others]\ntags:\n- hexo\n- configuration\n- tool\n---\n\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nHere is a summary of all the possible reasons for publishing failure in Hexo.\n\n#### <font size=3 color=#4169E1>1. Header information is incorrect</font> \nPlease strictly follow the header format:\n```Swift \n---\ntitle: 00. Article publishing failure problem summary\ndate: 2023-01-15 14:00:00\ncategories: \n- [Others, 00. others]\ntags:\n- hexo\n- configuration\n- tool\n---\n```\n**Note:**   \n**There are no empty lines in the first row.**   \n**All the keywords 'title','date','categories','tags' must be in lower case.**\n\n#### <font size=3 color=#4169E1>2. Picture does not show</font> \n\nThe correct image format is as follows: \n{% img /assets/Demo/wallpaper-2311325.jpg %}    \n{% img /assets/Demo/wallpaper-878514.jpg %}\n\n\n#### <font size=3 color=#4169E1>3. Change the font</font> \nOn the basis of this article below:       \nhttps://blog.csdn.net/Reinhart_L/article/details/122587975       \n(1) Enter. / themes/cactus/source/CSS / _variables styl, can change the font;   \n(2) The available fonts are in . /themes/cactus/source/lib/, cactus comes with only two kinds of 'meslo-LG' and 'vazir-font', you can download them yourself if you need.\n\n\n\n#### <font size=3 color=gray>*Reference*</font>\n[1] [Why should we avoid using closures in Swift structs?](https://ohmyswift.com/blog/2020/01/10/why-should-we-avoid-using-closures-in-swift-structs/)  \n[2] https://github.com/probberechts/hexo-theme-cactus\n","slug":"iOS/05. Projects & Issues/03. A modular page-building solution based on UIView.","published":1,"updated":"2023-08-23T19:22:57.927Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr650057vu0m9j9ohsd6","content":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>Here is a summary of all the possible reasons for publishing failure in Hexo.</p>\n<h4 id=\"1-Header-information-is-incorrect\"><a href=\"#1-Header-information-is-incorrect\" class=\"headerlink\" title=\"1. Header information is incorrect\"></a><font size=3 color=#4169E1>1. Header information is incorrect</font></h4><p>Please strictly follow the header format:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">---</span></span><br><span class=\"line\">title: <span class=\"number\">00</span>. <span class=\"type\">Article</span> publishing failure problem summary</span><br><span class=\"line\">date: <span class=\"number\">2023</span><span class=\"operator\">-</span><span class=\"number\">01</span><span class=\"operator\">-</span><span class=\"number\">15</span> <span class=\"number\">14</span>:<span class=\"number\">00</span>:<span class=\"number\">00</span></span><br><span class=\"line\">categories: </span><br><span class=\"line\"><span class=\"operator\">-</span> [<span class=\"type\">Others</span>, <span class=\"number\">00</span>. others]</span><br><span class=\"line\">tags:</span><br><span class=\"line\"><span class=\"operator\">-</span> hexo</span><br><span class=\"line\"><span class=\"operator\">-</span> configuration</span><br><span class=\"line\"><span class=\"operator\">-</span> tool</span><br><span class=\"line\"><span class=\"operator\">---</span></span><br></pre></td></tr></table></figure>\n<p><strong>Note:</strong><br><strong>There are no empty lines in the first row.</strong><br><strong>All the keywords ‘title’,’date’,’categories’,’tags’ must be in lower case.</strong></p>\n<h4 id=\"2-Picture-does-not-show\"><a href=\"#2-Picture-does-not-show\" class=\"headerlink\" title=\"2. Picture does not show\"></a><font size=3 color=#4169E1>2. Picture does not show</font></h4><p>The correct image format is as follows: </p>\n<img src=\"/assets/Demo/wallpaper-2311325.jpg\" class=\"\">    \n<img src=\"/assets/Demo/wallpaper-878514.jpg\" class=\"\">\n\n\n<h4 id=\"3-Change-the-font\"><a href=\"#3-Change-the-font\" class=\"headerlink\" title=\"3. Change the font\"></a><font size=3 color=#4169E1>3. Change the font</font></h4><p>On the basis of this article below:<br><a href=\"https://blog.csdn.net/Reinhart_L/article/details/122587975\">https://blog.csdn.net/Reinhart_L/article/details/122587975</a><br>(1) Enter. &#x2F; themes&#x2F;cactus&#x2F;source&#x2F;CSS &#x2F; _variables styl, can change the font;<br>(2) The available fonts are in . &#x2F;themes&#x2F;cactus&#x2F;source&#x2F;lib&#x2F;, cactus comes with only two kinds of ‘meslo-LG’ and ‘vazir-font’, you can download them yourself if you need.</p>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://ohmyswift.com/blog/2020/01/10/why-should-we-avoid-using-closures-in-swift-structs/\">Why should we avoid using closures in Swift structs?</a><br>[2] <a href=\"https://github.com/probberechts/hexo-theme-cactus\">https://github.com/probberechts/hexo-theme-cactus</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>Here is a summary of all the possible reasons for publishing failure in Hexo.</p>\n<h4 id=\"1-Header-information-is-incorrect\"><a href=\"#1-Header-information-is-incorrect\" class=\"headerlink\" title=\"1. Header information is incorrect\"></a><font size=3 color=#4169E1>1. Header information is incorrect</font></h4><p>Please strictly follow the header format:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">---</span></span><br><span class=\"line\">title: <span class=\"number\">00</span>. <span class=\"type\">Article</span> publishing failure problem summary</span><br><span class=\"line\">date: <span class=\"number\">2023</span><span class=\"operator\">-</span><span class=\"number\">01</span><span class=\"operator\">-</span><span class=\"number\">15</span> <span class=\"number\">14</span>:<span class=\"number\">00</span>:<span class=\"number\">00</span></span><br><span class=\"line\">categories: </span><br><span class=\"line\"><span class=\"operator\">-</span> [<span class=\"type\">Others</span>, <span class=\"number\">00</span>. others]</span><br><span class=\"line\">tags:</span><br><span class=\"line\"><span class=\"operator\">-</span> hexo</span><br><span class=\"line\"><span class=\"operator\">-</span> configuration</span><br><span class=\"line\"><span class=\"operator\">-</span> tool</span><br><span class=\"line\"><span class=\"operator\">---</span></span><br></pre></td></tr></table></figure>\n<p><strong>Note:</strong><br><strong>There are no empty lines in the first row.</strong><br><strong>All the keywords ‘title’,’date’,’categories’,’tags’ must be in lower case.</strong></p>\n<h4 id=\"2-Picture-does-not-show\"><a href=\"#2-Picture-does-not-show\" class=\"headerlink\" title=\"2. Picture does not show\"></a><font size=3 color=#4169E1>2. Picture does not show</font></h4><p>The correct image format is as follows: </p>\n<img src=\"/assets/Demo/wallpaper-2311325.jpg\" class=\"\">    \n<img src=\"/assets/Demo/wallpaper-878514.jpg\" class=\"\">\n\n\n<h4 id=\"3-Change-the-font\"><a href=\"#3-Change-the-font\" class=\"headerlink\" title=\"3. Change the font\"></a><font size=3 color=#4169E1>3. Change the font</font></h4><p>On the basis of this article below:<br><a href=\"https://blog.csdn.net/Reinhart_L/article/details/122587975\">https://blog.csdn.net/Reinhart_L/article/details/122587975</a><br>(1) Enter. &#x2F; themes&#x2F;cactus&#x2F;source&#x2F;CSS &#x2F; _variables styl, can change the font;<br>(2) The available fonts are in . &#x2F;themes&#x2F;cactus&#x2F;source&#x2F;lib&#x2F;, cactus comes with only two kinds of ‘meslo-LG’ and ‘vazir-font’, you can download them yourself if you need.</p>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://ohmyswift.com/blog/2020/01/10/why-should-we-avoid-using-closures-in-swift-structs/\">Why should we avoid using closures in Swift structs?</a><br>[2] <a href=\"https://github.com/probberechts/hexo-theme-cactus\">https://github.com/probberechts/hexo-theme-cactus</a></p>\n"},{"title":"00. Article publishing failure problem summary","date":"2023-01-15T13:00:00.000Z","_content":"\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nHere is a summary of all the possible reasons for publishing failure in Hexo.\n\n#### <font size=3 color=#4169E1>1. Header information is incorrect</font> \nPlease strictly follow the header format:\n```Swift \n---\ntitle: 00. Article publishing failure problem summary\ndate: 2023-01-15 14:00:00\ncategories: \n- [Others, 00. others]\ntags:\n- hexo\n- configuration\n- tool\n---\n```\n**Note:**   \n**There are no empty lines in the first row.**   \n**All the keywords 'title','date','categories','tags' must be in lower case.**\n\n#### <font size=3 color=#4169E1>2. Picture does not show</font> \n\nThe correct image format is as follows: \n{% img /assets/Demo/wallpaper-2311325.jpg %}    \n{% img /assets/Demo/wallpaper-878514.jpg %}\n\n\n#### <font size=3 color=#4169E1>3. Change the font</font> \nOn the basis of this article below:       \nhttps://blog.csdn.net/Reinhart_L/article/details/122587975       \n(1) Enter. / themes/cactus/source/CSS / _variables styl, can change the font;   \n(2) The available fonts are in . /themes/cactus/source/lib/, cactus comes with only two kinds of 'meslo-LG' and 'vazir-font', you can download them yourself if you need.\n\n\n\n#### <font size=3 color=gray>*Reference*</font>\n[1] [Why should we avoid using closures in Swift structs?](https://ohmyswift.com/blog/2020/01/10/why-should-we-avoid-using-closures-in-swift-structs/)  \n[2] https://github.com/probberechts/hexo-theme-cactus\n","source":"_posts/iOS/05. Projects & Issues/04. A page-building solution based on State machines..md","raw":"---\ntitle: 00. Article publishing failure problem summary\ndate: 2023-01-15 14:00:00\ncategories: \n- [Others]\ntags:\n- hexo\n- configuration\n- tool\n---\n\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nHere is a summary of all the possible reasons for publishing failure in Hexo.\n\n#### <font size=3 color=#4169E1>1. Header information is incorrect</font> \nPlease strictly follow the header format:\n```Swift \n---\ntitle: 00. Article publishing failure problem summary\ndate: 2023-01-15 14:00:00\ncategories: \n- [Others, 00. others]\ntags:\n- hexo\n- configuration\n- tool\n---\n```\n**Note:**   \n**There are no empty lines in the first row.**   \n**All the keywords 'title','date','categories','tags' must be in lower case.**\n\n#### <font size=3 color=#4169E1>2. Picture does not show</font> \n\nThe correct image format is as follows: \n{% img /assets/Demo/wallpaper-2311325.jpg %}    \n{% img /assets/Demo/wallpaper-878514.jpg %}\n\n\n#### <font size=3 color=#4169E1>3. Change the font</font> \nOn the basis of this article below:       \nhttps://blog.csdn.net/Reinhart_L/article/details/122587975       \n(1) Enter. / themes/cactus/source/CSS / _variables styl, can change the font;   \n(2) The available fonts are in . /themes/cactus/source/lib/, cactus comes with only two kinds of 'meslo-LG' and 'vazir-font', you can download them yourself if you need.\n\n\n\n#### <font size=3 color=gray>*Reference*</font>\n[1] [Why should we avoid using closures in Swift structs?](https://ohmyswift.com/blog/2020/01/10/why-should-we-avoid-using-closures-in-swift-structs/)  \n[2] https://github.com/probberechts/hexo-theme-cactus\n","slug":"iOS/05. Projects & Issues/04. A page-building solution based on State machines.","published":1,"updated":"2023-08-23T19:22:57.927Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr66005bvu0mer7z2bn6","content":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>Here is a summary of all the possible reasons for publishing failure in Hexo.</p>\n<h4 id=\"1-Header-information-is-incorrect\"><a href=\"#1-Header-information-is-incorrect\" class=\"headerlink\" title=\"1. Header information is incorrect\"></a><font size=3 color=#4169E1>1. Header information is incorrect</font></h4><p>Please strictly follow the header format:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">---</span></span><br><span class=\"line\">title: <span class=\"number\">00</span>. <span class=\"type\">Article</span> publishing failure problem summary</span><br><span class=\"line\">date: <span class=\"number\">2023</span><span class=\"operator\">-</span><span class=\"number\">01</span><span class=\"operator\">-</span><span class=\"number\">15</span> <span class=\"number\">14</span>:<span class=\"number\">00</span>:<span class=\"number\">00</span></span><br><span class=\"line\">categories: </span><br><span class=\"line\"><span class=\"operator\">-</span> [<span class=\"type\">Others</span>, <span class=\"number\">00</span>. others]</span><br><span class=\"line\">tags:</span><br><span class=\"line\"><span class=\"operator\">-</span> hexo</span><br><span class=\"line\"><span class=\"operator\">-</span> configuration</span><br><span class=\"line\"><span class=\"operator\">-</span> tool</span><br><span class=\"line\"><span class=\"operator\">---</span></span><br></pre></td></tr></table></figure>\n<p><strong>Note:</strong><br><strong>There are no empty lines in the first row.</strong><br><strong>All the keywords ‘title’,’date’,’categories’,’tags’ must be in lower case.</strong></p>\n<h4 id=\"2-Picture-does-not-show\"><a href=\"#2-Picture-does-not-show\" class=\"headerlink\" title=\"2. Picture does not show\"></a><font size=3 color=#4169E1>2. Picture does not show</font></h4><p>The correct image format is as follows: </p>\n<img src=\"/assets/Demo/wallpaper-2311325.jpg\" class=\"\">    \n<img src=\"/assets/Demo/wallpaper-878514.jpg\" class=\"\">\n\n\n<h4 id=\"3-Change-the-font\"><a href=\"#3-Change-the-font\" class=\"headerlink\" title=\"3. Change the font\"></a><font size=3 color=#4169E1>3. Change the font</font></h4><p>On the basis of this article below:<br><a href=\"https://blog.csdn.net/Reinhart_L/article/details/122587975\">https://blog.csdn.net/Reinhart_L/article/details/122587975</a><br>(1) Enter. &#x2F; themes&#x2F;cactus&#x2F;source&#x2F;CSS &#x2F; _variables styl, can change the font;<br>(2) The available fonts are in . &#x2F;themes&#x2F;cactus&#x2F;source&#x2F;lib&#x2F;, cactus comes with only two kinds of ‘meslo-LG’ and ‘vazir-font’, you can download them yourself if you need.</p>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://ohmyswift.com/blog/2020/01/10/why-should-we-avoid-using-closures-in-swift-structs/\">Why should we avoid using closures in Swift structs?</a><br>[2] <a href=\"https://github.com/probberechts/hexo-theme-cactus\">https://github.com/probberechts/hexo-theme-cactus</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>Here is a summary of all the possible reasons for publishing failure in Hexo.</p>\n<h4 id=\"1-Header-information-is-incorrect\"><a href=\"#1-Header-information-is-incorrect\" class=\"headerlink\" title=\"1. Header information is incorrect\"></a><font size=3 color=#4169E1>1. Header information is incorrect</font></h4><p>Please strictly follow the header format:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">---</span></span><br><span class=\"line\">title: <span class=\"number\">00</span>. <span class=\"type\">Article</span> publishing failure problem summary</span><br><span class=\"line\">date: <span class=\"number\">2023</span><span class=\"operator\">-</span><span class=\"number\">01</span><span class=\"operator\">-</span><span class=\"number\">15</span> <span class=\"number\">14</span>:<span class=\"number\">00</span>:<span class=\"number\">00</span></span><br><span class=\"line\">categories: </span><br><span class=\"line\"><span class=\"operator\">-</span> [<span class=\"type\">Others</span>, <span class=\"number\">00</span>. others]</span><br><span class=\"line\">tags:</span><br><span class=\"line\"><span class=\"operator\">-</span> hexo</span><br><span class=\"line\"><span class=\"operator\">-</span> configuration</span><br><span class=\"line\"><span class=\"operator\">-</span> tool</span><br><span class=\"line\"><span class=\"operator\">---</span></span><br></pre></td></tr></table></figure>\n<p><strong>Note:</strong><br><strong>There are no empty lines in the first row.</strong><br><strong>All the keywords ‘title’,’date’,’categories’,’tags’ must be in lower case.</strong></p>\n<h4 id=\"2-Picture-does-not-show\"><a href=\"#2-Picture-does-not-show\" class=\"headerlink\" title=\"2. Picture does not show\"></a><font size=3 color=#4169E1>2. Picture does not show</font></h4><p>The correct image format is as follows: </p>\n<img src=\"/assets/Demo/wallpaper-2311325.jpg\" class=\"\">    \n<img src=\"/assets/Demo/wallpaper-878514.jpg\" class=\"\">\n\n\n<h4 id=\"3-Change-the-font\"><a href=\"#3-Change-the-font\" class=\"headerlink\" title=\"3. Change the font\"></a><font size=3 color=#4169E1>3. Change the font</font></h4><p>On the basis of this article below:<br><a href=\"https://blog.csdn.net/Reinhart_L/article/details/122587975\">https://blog.csdn.net/Reinhart_L/article/details/122587975</a><br>(1) Enter. &#x2F; themes&#x2F;cactus&#x2F;source&#x2F;CSS &#x2F; _variables styl, can change the font;<br>(2) The available fonts are in . &#x2F;themes&#x2F;cactus&#x2F;source&#x2F;lib&#x2F;, cactus comes with only two kinds of ‘meslo-LG’ and ‘vazir-font’, you can download them yourself if you need.</p>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://ohmyswift.com/blog/2020/01/10/why-should-we-avoid-using-closures-in-swift-structs/\">Why should we avoid using closures in Swift structs?</a><br>[2] <a href=\"https://github.com/probberechts/hexo-theme-cactus\">https://github.com/probberechts/hexo-theme-cactus</a></p>\n"},{"title":"00. Article publishing failure problem summary?","date":"2023-01-15T13:00:00.000Z","_content":"\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nHere is a summary of all the possible reasons for publishing failure in Hexo.\n\n#### <font size=3 color=#4169E1>1. Header information is incorrect</font> \nPlease strictly follow the header format:\n```Swift \n---\ntitle: 00. Article publishing failure problem summary\ndate: 2023-01-15 14:00:00\ncategories: \n- [Others, 00. others]\ntags:\n- hexo\n- configuration\n- tool\n---\n```\n**Note:**   \n**There are no empty lines in the first row.**   \n**All the keywords 'title','date','categories','tags' must be in lower case.**\n\n#### <font size=3 color=#4169E1>2. Picture does not show</font> \n\nThe correct image format is as follows: \n{% img /assets/Demo/wallpaper-2311325.jpg %}    \n{% img /assets/Demo/wallpaper-878514.jpg %}\n\n\n#### <font size=3 color=#4169E1>3. Change the font</font> \nOn the basis of this article below:       \nhttps://blog.csdn.net/Reinhart_L/article/details/122587975       \n(1) Enter. / themes/cactus/source/CSS / _variables styl, can change the font;   \n(2) The available fonts are in . /themes/cactus/source/lib/, cactus comes with only two kinds of 'meslo-LG' and 'vazir-font', you can download them yourself if you need.\n\n\n\n#### <font size=3 color=gray>*Reference*</font>\n[1] [Why should we avoid using closures in Swift structs?](https://ohmyswift.com/blog/2020/01/10/why-should-we-avoid-using-closures-in-swift-structs/)  \n[2] https://github.com/probberechts/hexo-theme-cactus\n","source":"_posts/iOS/05. Projects & Issues/05. How to support multi-source configuration in a componentized Pod.md","raw":"---\ntitle: 00. Article publishing failure problem summary?\ndate: 2023-01-15 14:00:00\ncategories: \n- [Others]\ntags:\n- hexo\n- configuration\n- tool\n---\n\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nHere is a summary of all the possible reasons for publishing failure in Hexo.\n\n#### <font size=3 color=#4169E1>1. Header information is incorrect</font> \nPlease strictly follow the header format:\n```Swift \n---\ntitle: 00. Article publishing failure problem summary\ndate: 2023-01-15 14:00:00\ncategories: \n- [Others, 00. others]\ntags:\n- hexo\n- configuration\n- tool\n---\n```\n**Note:**   \n**There are no empty lines in the first row.**   \n**All the keywords 'title','date','categories','tags' must be in lower case.**\n\n#### <font size=3 color=#4169E1>2. Picture does not show</font> \n\nThe correct image format is as follows: \n{% img /assets/Demo/wallpaper-2311325.jpg %}    \n{% img /assets/Demo/wallpaper-878514.jpg %}\n\n\n#### <font size=3 color=#4169E1>3. Change the font</font> \nOn the basis of this article below:       \nhttps://blog.csdn.net/Reinhart_L/article/details/122587975       \n(1) Enter. / themes/cactus/source/CSS / _variables styl, can change the font;   \n(2) The available fonts are in . /themes/cactus/source/lib/, cactus comes with only two kinds of 'meslo-LG' and 'vazir-font', you can download them yourself if you need.\n\n\n\n#### <font size=3 color=gray>*Reference*</font>\n[1] [Why should we avoid using closures in Swift structs?](https://ohmyswift.com/blog/2020/01/10/why-should-we-avoid-using-closures-in-swift-structs/)  \n[2] https://github.com/probberechts/hexo-theme-cactus\n","slug":"iOS/05. Projects & Issues/05. How to support multi-source configuration in a componentized Pod","published":1,"updated":"2023-11-15T13:52:18.691Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr68005dvu0mgde38x67","content":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>Here is a summary of all the possible reasons for publishing failure in Hexo.</p>\n<h4 id=\"1-Header-information-is-incorrect\"><a href=\"#1-Header-information-is-incorrect\" class=\"headerlink\" title=\"1. Header information is incorrect\"></a><font size=3 color=#4169E1>1. Header information is incorrect</font></h4><p>Please strictly follow the header format:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">---</span></span><br><span class=\"line\">title: <span class=\"number\">00</span>. <span class=\"type\">Article</span> publishing failure problem summary</span><br><span class=\"line\">date: <span class=\"number\">2023</span><span class=\"operator\">-</span><span class=\"number\">01</span><span class=\"operator\">-</span><span class=\"number\">15</span> <span class=\"number\">14</span>:<span class=\"number\">00</span>:<span class=\"number\">00</span></span><br><span class=\"line\">categories: </span><br><span class=\"line\"><span class=\"operator\">-</span> [<span class=\"type\">Others</span>, <span class=\"number\">00</span>. others]</span><br><span class=\"line\">tags:</span><br><span class=\"line\"><span class=\"operator\">-</span> hexo</span><br><span class=\"line\"><span class=\"operator\">-</span> configuration</span><br><span class=\"line\"><span class=\"operator\">-</span> tool</span><br><span class=\"line\"><span class=\"operator\">---</span></span><br></pre></td></tr></table></figure>\n<p><strong>Note:</strong><br><strong>There are no empty lines in the first row.</strong><br><strong>All the keywords ‘title’,’date’,’categories’,’tags’ must be in lower case.</strong></p>\n<h4 id=\"2-Picture-does-not-show\"><a href=\"#2-Picture-does-not-show\" class=\"headerlink\" title=\"2. Picture does not show\"></a><font size=3 color=#4169E1>2. Picture does not show</font></h4><p>The correct image format is as follows: </p>\n<img src=\"/assets/Demo/wallpaper-2311325.jpg\" class=\"\">    \n<img src=\"/assets/Demo/wallpaper-878514.jpg\" class=\"\">\n\n\n<h4 id=\"3-Change-the-font\"><a href=\"#3-Change-the-font\" class=\"headerlink\" title=\"3. Change the font\"></a><font size=3 color=#4169E1>3. Change the font</font></h4><p>On the basis of this article below:<br><a href=\"https://blog.csdn.net/Reinhart_L/article/details/122587975\">https://blog.csdn.net/Reinhart_L/article/details/122587975</a><br>(1) Enter. &#x2F; themes&#x2F;cactus&#x2F;source&#x2F;CSS &#x2F; _variables styl, can change the font;<br>(2) The available fonts are in . &#x2F;themes&#x2F;cactus&#x2F;source&#x2F;lib&#x2F;, cactus comes with only two kinds of ‘meslo-LG’ and ‘vazir-font’, you can download them yourself if you need.</p>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://ohmyswift.com/blog/2020/01/10/why-should-we-avoid-using-closures-in-swift-structs/\">Why should we avoid using closures in Swift structs?</a><br>[2] <a href=\"https://github.com/probberechts/hexo-theme-cactus\">https://github.com/probberechts/hexo-theme-cactus</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>Here is a summary of all the possible reasons for publishing failure in Hexo.</p>\n<h4 id=\"1-Header-information-is-incorrect\"><a href=\"#1-Header-information-is-incorrect\" class=\"headerlink\" title=\"1. Header information is incorrect\"></a><font size=3 color=#4169E1>1. Header information is incorrect</font></h4><p>Please strictly follow the header format:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">---</span></span><br><span class=\"line\">title: <span class=\"number\">00</span>. <span class=\"type\">Article</span> publishing failure problem summary</span><br><span class=\"line\">date: <span class=\"number\">2023</span><span class=\"operator\">-</span><span class=\"number\">01</span><span class=\"operator\">-</span><span class=\"number\">15</span> <span class=\"number\">14</span>:<span class=\"number\">00</span>:<span class=\"number\">00</span></span><br><span class=\"line\">categories: </span><br><span class=\"line\"><span class=\"operator\">-</span> [<span class=\"type\">Others</span>, <span class=\"number\">00</span>. others]</span><br><span class=\"line\">tags:</span><br><span class=\"line\"><span class=\"operator\">-</span> hexo</span><br><span class=\"line\"><span class=\"operator\">-</span> configuration</span><br><span class=\"line\"><span class=\"operator\">-</span> tool</span><br><span class=\"line\"><span class=\"operator\">---</span></span><br></pre></td></tr></table></figure>\n<p><strong>Note:</strong><br><strong>There are no empty lines in the first row.</strong><br><strong>All the keywords ‘title’,’date’,’categories’,’tags’ must be in lower case.</strong></p>\n<h4 id=\"2-Picture-does-not-show\"><a href=\"#2-Picture-does-not-show\" class=\"headerlink\" title=\"2. Picture does not show\"></a><font size=3 color=#4169E1>2. Picture does not show</font></h4><p>The correct image format is as follows: </p>\n<img src=\"/assets/Demo/wallpaper-2311325.jpg\" class=\"\">    \n<img src=\"/assets/Demo/wallpaper-878514.jpg\" class=\"\">\n\n\n<h4 id=\"3-Change-the-font\"><a href=\"#3-Change-the-font\" class=\"headerlink\" title=\"3. Change the font\"></a><font size=3 color=#4169E1>3. Change the font</font></h4><p>On the basis of this article below:<br><a href=\"https://blog.csdn.net/Reinhart_L/article/details/122587975\">https://blog.csdn.net/Reinhart_L/article/details/122587975</a><br>(1) Enter. &#x2F; themes&#x2F;cactus&#x2F;source&#x2F;CSS &#x2F; _variables styl, can change the font;<br>(2) The available fonts are in . &#x2F;themes&#x2F;cactus&#x2F;source&#x2F;lib&#x2F;, cactus comes with only two kinds of ‘meslo-LG’ and ‘vazir-font’, you can download them yourself if you need.</p>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://ohmyswift.com/blog/2020/01/10/why-should-we-avoid-using-closures-in-swift-structs/\">Why should we avoid using closures in Swift structs?</a><br>[2] <a href=\"https://github.com/probberechts/hexo-theme-cactus\">https://github.com/probberechts/hexo-theme-cactus</a></p>\n"},{"title":"01. All we need to know about Restful API","date":"2023-09-07T17:30:00.000Z","_content":"\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nRestful API is also one of the necessary knowledge points on the mobile terminal, but only need to understand is enough.\n\n#### <font size=3 color=#4169E1>1. What is Restful API?</font> \nRestful (Representational State Transfer presentation layer state transition) is currently the most popular interface design specifications. Restful is a design style (a design style rather than a standard) for creating reliable, scalable and easy-to-maintain Web services. It follows the REST architectural style and is resource-centric, communicating via the HTTP protocol.\n\nThe Restful API is based on a request and response model between the client and the server. Client requests resources from the server by request methods (GET, POST, PUT, DELETE, etc.) The server responds according to the request method and the requested resource path, and returns the corresponding resource or status code. The request and response data format of a Restful API is usually JSON or XML.\n\n#### <font size=3 color=#4169E1>2. Features of Restful API</font>\nIt has several features:        \n\nBased on HTTP protocol:         \nRESTful API uses HTTP protocol as a communication protocol, the client sends a request to the server via HTTP protocol and the server sends a response to the client via HTTP protocol.\n\nStatelessness:   \nRESTful APIs are stateless, and each request contains enough information so that the server does not need to save any state information about the client.\n\nResource Oriented:     \nRESTful API is a resource-oriented API that treats all operations as operations on resources. Each resource has a unique identifier (URI) and the client can request a representation of the resource via the URI.\n\nUnified Interface:          \nThe RESTful API uses a standard set of HTTP methods (GET, POST, PUT, DELETE, etc.) to manipulate resources, and the client performs operations on the resources through these methods.\n\nCacheability:       \nThe RESTful API supports a caching mechanism where the client can cache responses to improve performance and the server can use caching to reduce the load.\n\nHierarchical systems:\nThe RESTful API supports a hierarchical system, which allows the server to distribute the load across multiple hierarchies and allows clients to access resources by accessing different hierarchies.\n\nCommon status codes for Restful API:\n```Swift\n200 OK: indicates that the request was successful.\n201 Created: indicates that the resource was successfully created.\n204 No Content: The request was executed successfully, but no content was returned.\n400 Bad Request: Indicates an error in the request, such as an incorrectly formatted or missing request parameter.\n401 Unauthorized: indicates unauthorized access and requires valid credentials to access the resource.\n403 Forbidden: indicates that access has been authorized, but access to the resource is not allowed.\n404 Not Found: indicates that the requested resource does not exist.\n405 Method Not Allowed: indicates that the requested HTTP method does not support the resource, such as using POST to request a read-only resource.\n409 Conflict: indicates a request conflict, such as a version conflict when updating a resource.\n500 Internal Server Error: Indicates an internal server error, such as an inability to connect to the database or an exception when processing a request.\n```\n\n#### <font size=3 color=#4169E1>3. Swift call Restful API sample code</font> \nThe following is sample code for a Restful API style request:\n```Swift\nimport Foundation\n\nlet url = URL(string: \"https://example.com/api/users/1\")!\n\nvar request = URLRequest(url: url)\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in\n    guard let data = data, let response = response as? HTTPURLResponse, error == nil else {\n        print(\"Error: \\(error?.localizedDescription ?? \"Unknown error\")\")\n        return\n    }\n\n    if (200..<300).contains(response.statusCode) {\n        if let jsonObject = try? JSONSerialization.jsonObject(with: data) {\n            print(jsonObject)\n        }\n    } else {\n        print(\"Error: \\(response.statusCode)\")\n    }\n}\n\ntask.resume()\n```\nThe above code is an example of a GET request, requesting information about a user resource via a URL and printing the response data.\n\nThe code uses Swift's URLSession for the network request, where the dataTask method creates and executes an HTTP/HTTPS request, and calls a callback function to process the response data when the request is complete.\n\n#### <font size=3 color=#4169E1>4. Pros and Cons of Restful API</font>\n<font size=3 color=#4169E1>4.1 Advantages of the Restful API include:</font>    \nSimple to use:      \nThe Restful API follows the HTTP protocol and is easy to understand and implement.\n\nExtensible:     \nThe resource-centric design of the Restful API makes it easy for the server side to add or remove resources, while the client side simply gets the resources it needs via a URL.\n\nCacheable:      \nRestful API supports caching, which can improve performance and reduce network transfers.\n\nCross-platform compatible:\nThe Restful API supports a variety of data formats, such as JSON, XML, etc., and can interact with different platforms and languages.\n\n<font size=3 color=#4169E1>4.2 Disadvantages of the Restful API include: </font>            \nSecurity:\nRestful APIs are usually based on the HTTP protocol, which can be a security risk during transmission.\n\nPerformance issues:\nSince the Restful API is based on the HTTP protocol, a connection needs to be established for each request, and there may be a performance bottleneck for a large number of concurrent requests or a large amount of data transfer.\n\n#### <font size=3 color=#4169E1>5. Other ways</font>\nHowever, it is important to note that Restful APIs are not the only way to communicate and exchange data.Other common ways are RPC, WebSocket, etc.\n\n<font size=3 color=#4169E1>5.1 RPC</font>       \nRemote procedure calls, a standard that shields the underlying communication details and can be called directly.\nSimply, RPC is to call a function or method (collectively referred to as a service) on another machine (server) from one machine (client) by passing parameters and get the returned result. RPC is used to call remote functions (or methods) just like calling local functions (or methods).\n\nThere is such a principle: internal service: first use RPC, RPC is suitable for internal, efficient and fast communication. The disadvantage is that it is best to use Java systems on both sides. External service: RESTful is the first to be used. REST is suitable for external use, easy to use, and cross-language. The disadvantage is that the operation is limited (CRUD), and it is not efficient enough. Therefore, RPC tends to be applied to scenarios with high performance and reliability requirements such as microservice architecture, distributed systems, database access, and high-performance computing.\n\n<font size=3 color=#4169E1>5.2 WebSocket</font>     \nWebSocket is a full-duplex communication protocol over a single TCP connection that allows a persistent connection between a client and a server for real-time data transfer.\n\nWebSocket can be realized through a simple API, supporting cross-platform and cross-browser use. Therefore, WebSocket is more suitable for some scenarios such as instant messaging (online chatting), real-time data pushing (stock data), remote monitoring and controlling real-time collaboration.\n\n\n#### <font size=3 color=gray>*Reference*</font>\n[1] https://zhuanlan.zhihu.com/p/334809573\n[2] https://blog.csdn.net/The_Time_Runner/article/details/86518448\n[3] https://www.cnblogs.com/zhongyuanzhao000/p/11700815.html\n","source":"_posts/iOS/06. Others/01. All we need to know about Restful API.md","raw":"---\ntitle: 01. All we need to know about Restful API\ndate: 2023-09-07 19:30:00\ncategories: \n- [iOS, 06. Others]\ntags:\n- Restful\n---\n\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\nRestful API is also one of the necessary knowledge points on the mobile terminal, but only need to understand is enough.\n\n#### <font size=3 color=#4169E1>1. What is Restful API?</font> \nRestful (Representational State Transfer presentation layer state transition) is currently the most popular interface design specifications. Restful is a design style (a design style rather than a standard) for creating reliable, scalable and easy-to-maintain Web services. It follows the REST architectural style and is resource-centric, communicating via the HTTP protocol.\n\nThe Restful API is based on a request and response model between the client and the server. Client requests resources from the server by request methods (GET, POST, PUT, DELETE, etc.) The server responds according to the request method and the requested resource path, and returns the corresponding resource or status code. The request and response data format of a Restful API is usually JSON or XML.\n\n#### <font size=3 color=#4169E1>2. Features of Restful API</font>\nIt has several features:        \n\nBased on HTTP protocol:         \nRESTful API uses HTTP protocol as a communication protocol, the client sends a request to the server via HTTP protocol and the server sends a response to the client via HTTP protocol.\n\nStatelessness:   \nRESTful APIs are stateless, and each request contains enough information so that the server does not need to save any state information about the client.\n\nResource Oriented:     \nRESTful API is a resource-oriented API that treats all operations as operations on resources. Each resource has a unique identifier (URI) and the client can request a representation of the resource via the URI.\n\nUnified Interface:          \nThe RESTful API uses a standard set of HTTP methods (GET, POST, PUT, DELETE, etc.) to manipulate resources, and the client performs operations on the resources through these methods.\n\nCacheability:       \nThe RESTful API supports a caching mechanism where the client can cache responses to improve performance and the server can use caching to reduce the load.\n\nHierarchical systems:\nThe RESTful API supports a hierarchical system, which allows the server to distribute the load across multiple hierarchies and allows clients to access resources by accessing different hierarchies.\n\nCommon status codes for Restful API:\n```Swift\n200 OK: indicates that the request was successful.\n201 Created: indicates that the resource was successfully created.\n204 No Content: The request was executed successfully, but no content was returned.\n400 Bad Request: Indicates an error in the request, such as an incorrectly formatted or missing request parameter.\n401 Unauthorized: indicates unauthorized access and requires valid credentials to access the resource.\n403 Forbidden: indicates that access has been authorized, but access to the resource is not allowed.\n404 Not Found: indicates that the requested resource does not exist.\n405 Method Not Allowed: indicates that the requested HTTP method does not support the resource, such as using POST to request a read-only resource.\n409 Conflict: indicates a request conflict, such as a version conflict when updating a resource.\n500 Internal Server Error: Indicates an internal server error, such as an inability to connect to the database or an exception when processing a request.\n```\n\n#### <font size=3 color=#4169E1>3. Swift call Restful API sample code</font> \nThe following is sample code for a Restful API style request:\n```Swift\nimport Foundation\n\nlet url = URL(string: \"https://example.com/api/users/1\")!\n\nvar request = URLRequest(url: url)\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in\n    guard let data = data, let response = response as? HTTPURLResponse, error == nil else {\n        print(\"Error: \\(error?.localizedDescription ?? \"Unknown error\")\")\n        return\n    }\n\n    if (200..<300).contains(response.statusCode) {\n        if let jsonObject = try? JSONSerialization.jsonObject(with: data) {\n            print(jsonObject)\n        }\n    } else {\n        print(\"Error: \\(response.statusCode)\")\n    }\n}\n\ntask.resume()\n```\nThe above code is an example of a GET request, requesting information about a user resource via a URL and printing the response data.\n\nThe code uses Swift's URLSession for the network request, where the dataTask method creates and executes an HTTP/HTTPS request, and calls a callback function to process the response data when the request is complete.\n\n#### <font size=3 color=#4169E1>4. Pros and Cons of Restful API</font>\n<font size=3 color=#4169E1>4.1 Advantages of the Restful API include:</font>    \nSimple to use:      \nThe Restful API follows the HTTP protocol and is easy to understand and implement.\n\nExtensible:     \nThe resource-centric design of the Restful API makes it easy for the server side to add or remove resources, while the client side simply gets the resources it needs via a URL.\n\nCacheable:      \nRestful API supports caching, which can improve performance and reduce network transfers.\n\nCross-platform compatible:\nThe Restful API supports a variety of data formats, such as JSON, XML, etc., and can interact with different platforms and languages.\n\n<font size=3 color=#4169E1>4.2 Disadvantages of the Restful API include: </font>            \nSecurity:\nRestful APIs are usually based on the HTTP protocol, which can be a security risk during transmission.\n\nPerformance issues:\nSince the Restful API is based on the HTTP protocol, a connection needs to be established for each request, and there may be a performance bottleneck for a large number of concurrent requests or a large amount of data transfer.\n\n#### <font size=3 color=#4169E1>5. Other ways</font>\nHowever, it is important to note that Restful APIs are not the only way to communicate and exchange data.Other common ways are RPC, WebSocket, etc.\n\n<font size=3 color=#4169E1>5.1 RPC</font>       \nRemote procedure calls, a standard that shields the underlying communication details and can be called directly.\nSimply, RPC is to call a function or method (collectively referred to as a service) on another machine (server) from one machine (client) by passing parameters and get the returned result. RPC is used to call remote functions (or methods) just like calling local functions (or methods).\n\nThere is such a principle: internal service: first use RPC, RPC is suitable for internal, efficient and fast communication. The disadvantage is that it is best to use Java systems on both sides. External service: RESTful is the first to be used. REST is suitable for external use, easy to use, and cross-language. The disadvantage is that the operation is limited (CRUD), and it is not efficient enough. Therefore, RPC tends to be applied to scenarios with high performance and reliability requirements such as microservice architecture, distributed systems, database access, and high-performance computing.\n\n<font size=3 color=#4169E1>5.2 WebSocket</font>     \nWebSocket is a full-duplex communication protocol over a single TCP connection that allows a persistent connection between a client and a server for real-time data transfer.\n\nWebSocket can be realized through a simple API, supporting cross-platform and cross-browser use. Therefore, WebSocket is more suitable for some scenarios such as instant messaging (online chatting), real-time data pushing (stock data), remote monitoring and controlling real-time collaboration.\n\n\n#### <font size=3 color=gray>*Reference*</font>\n[1] https://zhuanlan.zhihu.com/p/334809573\n[2] https://blog.csdn.net/The_Time_Runner/article/details/86518448\n[3] https://www.cnblogs.com/zhongyuanzhao000/p/11700815.html\n","slug":"iOS/06. Others/01. All we need to know about Restful API","published":1,"updated":"2023-09-20T18:55:22.781Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr7s00f9vu0mcfr3boem","content":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>Restful API is also one of the necessary knowledge points on the mobile terminal, but only need to understand is enough.</p>\n<h4 id=\"1-What-is-Restful-API\"><a href=\"#1-What-is-Restful-API\" class=\"headerlink\" title=\"1. What is Restful API?\"></a><font size=3 color=#4169E1>1. What is Restful API?</font></h4><p>Restful (Representational State Transfer presentation layer state transition) is currently the most popular interface design specifications. Restful is a design style (a design style rather than a standard) for creating reliable, scalable and easy-to-maintain Web services. It follows the REST architectural style and is resource-centric, communicating via the HTTP protocol.</p>\n<p>The Restful API is based on a request and response model between the client and the server. Client requests resources from the server by request methods (GET, POST, PUT, DELETE, etc.) The server responds according to the request method and the requested resource path, and returns the corresponding resource or status code. The request and response data format of a Restful API is usually JSON or XML.</p>\n<h4 id=\"2-Features-of-Restful-API\"><a href=\"#2-Features-of-Restful-API\" class=\"headerlink\" title=\"2. Features of Restful API\"></a><font size=3 color=#4169E1>2. Features of Restful API</font></h4><p>It has several features:        </p>\n<p>Based on HTTP protocol:<br>RESTful API uses HTTP protocol as a communication protocol, the client sends a request to the server via HTTP protocol and the server sends a response to the client via HTTP protocol.</p>\n<p>Statelessness:<br>RESTful APIs are stateless, and each request contains enough information so that the server does not need to save any state information about the client.</p>\n<p>Resource Oriented:<br>RESTful API is a resource-oriented API that treats all operations as operations on resources. Each resource has a unique identifier (URI) and the client can request a representation of the resource via the URI.</p>\n<p>Unified Interface:<br>The RESTful API uses a standard set of HTTP methods (GET, POST, PUT, DELETE, etc.) to manipulate resources, and the client performs operations on the resources through these methods.</p>\n<p>Cacheability:<br>The RESTful API supports a caching mechanism where the client can cache responses to improve performance and the server can use caching to reduce the load.</p>\n<p>Hierarchical systems:<br>The RESTful API supports a hierarchical system, which allows the server to distribute the load across multiple hierarchies and allows clients to access resources by accessing different hierarchies.</p>\n<p>Common status codes for Restful API:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">200</span> <span class=\"type\">OK</span>: indicates that the request was successful.</span><br><span class=\"line\"><span class=\"number\">201</span> <span class=\"type\">Created</span>: indicates that the resource was successfully created.</span><br><span class=\"line\"><span class=\"number\">204</span> <span class=\"type\">No</span> <span class=\"type\">Content</span>: <span class=\"type\">The</span> request was executed successfully, but no content was returned.</span><br><span class=\"line\"><span class=\"number\">400</span> <span class=\"type\">Bad</span> <span class=\"type\">Request</span>: <span class=\"type\">Indicates</span> an error <span class=\"keyword\">in</span> the request, such <span class=\"keyword\">as</span> an incorrectly formatted or missing request parameter.</span><br><span class=\"line\"><span class=\"number\">401</span> <span class=\"type\">Unauthorized</span>: indicates unauthorized access and requires valid credentials to access the resource.</span><br><span class=\"line\"><span class=\"number\">403</span> <span class=\"type\">Forbidden</span>: indicates that access has been authorized, but access to the resource <span class=\"keyword\">is</span> not allowed.</span><br><span class=\"line\"><span class=\"number\">404</span> <span class=\"type\">Not</span> <span class=\"type\">Found</span>: indicates that the requested resource does not exist.</span><br><span class=\"line\"><span class=\"number\">405</span> <span class=\"type\">Method</span> <span class=\"type\">Not</span> <span class=\"type\">Allowed</span>: indicates that the requested <span class=\"type\">HTTP</span> method does not support the resource, such <span class=\"keyword\">as</span> using <span class=\"type\">POST</span> to request a read<span class=\"operator\">-</span>only resource.</span><br><span class=\"line\"><span class=\"number\">409</span> <span class=\"type\">Conflict</span>: indicates a request conflict, such <span class=\"keyword\">as</span> a version conflict when updating a resource.</span><br><span class=\"line\"><span class=\"number\">500</span> <span class=\"type\">Internal</span> <span class=\"type\">Server</span> <span class=\"type\">Error</span>: <span class=\"type\">Indicates</span> an <span class=\"keyword\">internal</span> server error, such <span class=\"keyword\">as</span> an inability to connect to the database or an exception when processing a request.</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-Swift-call-Restful-API-sample-code\"><a href=\"#3-Swift-call-Restful-API-sample-code\" class=\"headerlink\" title=\"3. Swift call Restful API sample code\"></a><font size=3 color=#4169E1>3. Swift call Restful API sample code</font></h4><p>The following is sample code for a Restful API style request:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Foundation</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> url <span class=\"operator\">=</span> <span class=\"type\">URL</span>(string: <span class=\"string\">&quot;https://example.com/api/users/1&quot;</span>)<span class=\"operator\">!</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> request <span class=\"operator\">=</span> <span class=\"type\">URLRequest</span>(url: url)</span><br><span class=\"line\">request.httpMethod <span class=\"operator\">=</span> <span class=\"string\">&quot;GET&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> task <span class=\"operator\">=</span> <span class=\"type\">URLSession</span>.shared.dataTask(with: request) &#123; data, response, error <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> data <span class=\"operator\">=</span> data, <span class=\"keyword\">let</span> response <span class=\"operator\">=</span> response <span class=\"keyword\">as?</span> <span class=\"type\">HTTPURLResponse</span>, error <span class=\"operator\">==</span> <span class=\"literal\">nil</span> <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Error: <span class=\"subst\">\\(error<span class=\"operator\">?</span>.localizedDescription <span class=\"operator\">??</span> <span class=\"string\">&quot;Unknown error&quot;</span>)</span>&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">200</span><span class=\"operator\">..&lt;</span><span class=\"number\">300</span>).contains(response.statusCode) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> jsonObject <span class=\"operator\">=</span> <span class=\"keyword\">try?</span> <span class=\"type\">JSONSerialization</span>.jsonObject(with: data) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(jsonObject)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Error: <span class=\"subst\">\\(response.statusCode)</span>&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">task.resume()</span><br></pre></td></tr></table></figure>\n<p>The above code is an example of a GET request, requesting information about a user resource via a URL and printing the response data.</p>\n<p>The code uses Swift’s URLSession for the network request, where the dataTask method creates and executes an HTTP&#x2F;HTTPS request, and calls a callback function to process the response data when the request is complete.</p>\n<h4 id=\"4-Pros-and-Cons-of-Restful-API\"><a href=\"#4-Pros-and-Cons-of-Restful-API\" class=\"headerlink\" title=\"4. Pros and Cons of Restful API\"></a><font size=3 color=#4169E1>4. Pros and Cons of Restful API</font></h4><p><font size=3 color=#4169E1>4.1 Advantages of the Restful API include:</font><br>Simple to use:<br>The Restful API follows the HTTP protocol and is easy to understand and implement.</p>\n<p>Extensible:<br>The resource-centric design of the Restful API makes it easy for the server side to add or remove resources, while the client side simply gets the resources it needs via a URL.</p>\n<p>Cacheable:<br>Restful API supports caching, which can improve performance and reduce network transfers.</p>\n<p>Cross-platform compatible:<br>The Restful API supports a variety of data formats, such as JSON, XML, etc., and can interact with different platforms and languages.</p>\n<p><font size=3 color=#4169E1>4.2 Disadvantages of the Restful API include: </font><br>Security:<br>Restful APIs are usually based on the HTTP protocol, which can be a security risk during transmission.</p>\n<p>Performance issues:<br>Since the Restful API is based on the HTTP protocol, a connection needs to be established for each request, and there may be a performance bottleneck for a large number of concurrent requests or a large amount of data transfer.</p>\n<h4 id=\"5-Other-ways\"><a href=\"#5-Other-ways\" class=\"headerlink\" title=\"5. Other ways\"></a><font size=3 color=#4169E1>5. Other ways</font></h4><p>However, it is important to note that Restful APIs are not the only way to communicate and exchange data.Other common ways are RPC, WebSocket, etc.</p>\n<p><font size=3 color=#4169E1>5.1 RPC</font><br>Remote procedure calls, a standard that shields the underlying communication details and can be called directly.<br>Simply, RPC is to call a function or method (collectively referred to as a service) on another machine (server) from one machine (client) by passing parameters and get the returned result. RPC is used to call remote functions (or methods) just like calling local functions (or methods).</p>\n<p>There is such a principle: internal service: first use RPC, RPC is suitable for internal, efficient and fast communication. The disadvantage is that it is best to use Java systems on both sides. External service: RESTful is the first to be used. REST is suitable for external use, easy to use, and cross-language. The disadvantage is that the operation is limited (CRUD), and it is not efficient enough. Therefore, RPC tends to be applied to scenarios with high performance and reliability requirements such as microservice architecture, distributed systems, database access, and high-performance computing.</p>\n<p><font size=3 color=#4169E1>5.2 WebSocket</font><br>WebSocket is a full-duplex communication protocol over a single TCP connection that allows a persistent connection between a client and a server for real-time data transfer.</p>\n<p>WebSocket can be realized through a simple API, supporting cross-platform and cross-browser use. Therefore, WebSocket is more suitable for some scenarios such as instant messaging (online chatting), real-time data pushing (stock data), remote monitoring and controlling real-time collaboration.</p>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://zhuanlan.zhihu.com/p/334809573\">https://zhuanlan.zhihu.com/p/334809573</a><br>[2] <a href=\"https://blog.csdn.net/The_Time_Runner/article/details/86518448\">https://blog.csdn.net/The_Time_Runner/article/details/86518448</a><br>[3] <a href=\"https://www.cnblogs.com/zhongyuanzhao000/p/11700815.html\">https://www.cnblogs.com/zhongyuanzhao000/p/11700815.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<p>Restful API is also one of the necessary knowledge points on the mobile terminal, but only need to understand is enough.</p>\n<h4 id=\"1-What-is-Restful-API\"><a href=\"#1-What-is-Restful-API\" class=\"headerlink\" title=\"1. What is Restful API?\"></a><font size=3 color=#4169E1>1. What is Restful API?</font></h4><p>Restful (Representational State Transfer presentation layer state transition) is currently the most popular interface design specifications. Restful is a design style (a design style rather than a standard) for creating reliable, scalable and easy-to-maintain Web services. It follows the REST architectural style and is resource-centric, communicating via the HTTP protocol.</p>\n<p>The Restful API is based on a request and response model between the client and the server. Client requests resources from the server by request methods (GET, POST, PUT, DELETE, etc.) The server responds according to the request method and the requested resource path, and returns the corresponding resource or status code. The request and response data format of a Restful API is usually JSON or XML.</p>\n<h4 id=\"2-Features-of-Restful-API\"><a href=\"#2-Features-of-Restful-API\" class=\"headerlink\" title=\"2. Features of Restful API\"></a><font size=3 color=#4169E1>2. Features of Restful API</font></h4><p>It has several features:        </p>\n<p>Based on HTTP protocol:<br>RESTful API uses HTTP protocol as a communication protocol, the client sends a request to the server via HTTP protocol and the server sends a response to the client via HTTP protocol.</p>\n<p>Statelessness:<br>RESTful APIs are stateless, and each request contains enough information so that the server does not need to save any state information about the client.</p>\n<p>Resource Oriented:<br>RESTful API is a resource-oriented API that treats all operations as operations on resources. Each resource has a unique identifier (URI) and the client can request a representation of the resource via the URI.</p>\n<p>Unified Interface:<br>The RESTful API uses a standard set of HTTP methods (GET, POST, PUT, DELETE, etc.) to manipulate resources, and the client performs operations on the resources through these methods.</p>\n<p>Cacheability:<br>The RESTful API supports a caching mechanism where the client can cache responses to improve performance and the server can use caching to reduce the load.</p>\n<p>Hierarchical systems:<br>The RESTful API supports a hierarchical system, which allows the server to distribute the load across multiple hierarchies and allows clients to access resources by accessing different hierarchies.</p>\n<p>Common status codes for Restful API:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">200</span> <span class=\"type\">OK</span>: indicates that the request was successful.</span><br><span class=\"line\"><span class=\"number\">201</span> <span class=\"type\">Created</span>: indicates that the resource was successfully created.</span><br><span class=\"line\"><span class=\"number\">204</span> <span class=\"type\">No</span> <span class=\"type\">Content</span>: <span class=\"type\">The</span> request was executed successfully, but no content was returned.</span><br><span class=\"line\"><span class=\"number\">400</span> <span class=\"type\">Bad</span> <span class=\"type\">Request</span>: <span class=\"type\">Indicates</span> an error <span class=\"keyword\">in</span> the request, such <span class=\"keyword\">as</span> an incorrectly formatted or missing request parameter.</span><br><span class=\"line\"><span class=\"number\">401</span> <span class=\"type\">Unauthorized</span>: indicates unauthorized access and requires valid credentials to access the resource.</span><br><span class=\"line\"><span class=\"number\">403</span> <span class=\"type\">Forbidden</span>: indicates that access has been authorized, but access to the resource <span class=\"keyword\">is</span> not allowed.</span><br><span class=\"line\"><span class=\"number\">404</span> <span class=\"type\">Not</span> <span class=\"type\">Found</span>: indicates that the requested resource does not exist.</span><br><span class=\"line\"><span class=\"number\">405</span> <span class=\"type\">Method</span> <span class=\"type\">Not</span> <span class=\"type\">Allowed</span>: indicates that the requested <span class=\"type\">HTTP</span> method does not support the resource, such <span class=\"keyword\">as</span> using <span class=\"type\">POST</span> to request a read<span class=\"operator\">-</span>only resource.</span><br><span class=\"line\"><span class=\"number\">409</span> <span class=\"type\">Conflict</span>: indicates a request conflict, such <span class=\"keyword\">as</span> a version conflict when updating a resource.</span><br><span class=\"line\"><span class=\"number\">500</span> <span class=\"type\">Internal</span> <span class=\"type\">Server</span> <span class=\"type\">Error</span>: <span class=\"type\">Indicates</span> an <span class=\"keyword\">internal</span> server error, such <span class=\"keyword\">as</span> an inability to connect to the database or an exception when processing a request.</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-Swift-call-Restful-API-sample-code\"><a href=\"#3-Swift-call-Restful-API-sample-code\" class=\"headerlink\" title=\"3. Swift call Restful API sample code\"></a><font size=3 color=#4169E1>3. Swift call Restful API sample code</font></h4><p>The following is sample code for a Restful API style request:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Foundation</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> url <span class=\"operator\">=</span> <span class=\"type\">URL</span>(string: <span class=\"string\">&quot;https://example.com/api/users/1&quot;</span>)<span class=\"operator\">!</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> request <span class=\"operator\">=</span> <span class=\"type\">URLRequest</span>(url: url)</span><br><span class=\"line\">request.httpMethod <span class=\"operator\">=</span> <span class=\"string\">&quot;GET&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> task <span class=\"operator\">=</span> <span class=\"type\">URLSession</span>.shared.dataTask(with: request) &#123; data, response, error <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> data <span class=\"operator\">=</span> data, <span class=\"keyword\">let</span> response <span class=\"operator\">=</span> response <span class=\"keyword\">as?</span> <span class=\"type\">HTTPURLResponse</span>, error <span class=\"operator\">==</span> <span class=\"literal\">nil</span> <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Error: <span class=\"subst\">\\(error<span class=\"operator\">?</span>.localizedDescription <span class=\"operator\">??</span> <span class=\"string\">&quot;Unknown error&quot;</span>)</span>&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">200</span><span class=\"operator\">..&lt;</span><span class=\"number\">300</span>).contains(response.statusCode) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> jsonObject <span class=\"operator\">=</span> <span class=\"keyword\">try?</span> <span class=\"type\">JSONSerialization</span>.jsonObject(with: data) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(jsonObject)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Error: <span class=\"subst\">\\(response.statusCode)</span>&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">task.resume()</span><br></pre></td></tr></table></figure>\n<p>The above code is an example of a GET request, requesting information about a user resource via a URL and printing the response data.</p>\n<p>The code uses Swift’s URLSession for the network request, where the dataTask method creates and executes an HTTP&#x2F;HTTPS request, and calls a callback function to process the response data when the request is complete.</p>\n<h4 id=\"4-Pros-and-Cons-of-Restful-API\"><a href=\"#4-Pros-and-Cons-of-Restful-API\" class=\"headerlink\" title=\"4. Pros and Cons of Restful API\"></a><font size=3 color=#4169E1>4. Pros and Cons of Restful API</font></h4><p><font size=3 color=#4169E1>4.1 Advantages of the Restful API include:</font><br>Simple to use:<br>The Restful API follows the HTTP protocol and is easy to understand and implement.</p>\n<p>Extensible:<br>The resource-centric design of the Restful API makes it easy for the server side to add or remove resources, while the client side simply gets the resources it needs via a URL.</p>\n<p>Cacheable:<br>Restful API supports caching, which can improve performance and reduce network transfers.</p>\n<p>Cross-platform compatible:<br>The Restful API supports a variety of data formats, such as JSON, XML, etc., and can interact with different platforms and languages.</p>\n<p><font size=3 color=#4169E1>4.2 Disadvantages of the Restful API include: </font><br>Security:<br>Restful APIs are usually based on the HTTP protocol, which can be a security risk during transmission.</p>\n<p>Performance issues:<br>Since the Restful API is based on the HTTP protocol, a connection needs to be established for each request, and there may be a performance bottleneck for a large number of concurrent requests or a large amount of data transfer.</p>\n<h4 id=\"5-Other-ways\"><a href=\"#5-Other-ways\" class=\"headerlink\" title=\"5. Other ways\"></a><font size=3 color=#4169E1>5. Other ways</font></h4><p>However, it is important to note that Restful APIs are not the only way to communicate and exchange data.Other common ways are RPC, WebSocket, etc.</p>\n<p><font size=3 color=#4169E1>5.1 RPC</font><br>Remote procedure calls, a standard that shields the underlying communication details and can be called directly.<br>Simply, RPC is to call a function or method (collectively referred to as a service) on another machine (server) from one machine (client) by passing parameters and get the returned result. RPC is used to call remote functions (or methods) just like calling local functions (or methods).</p>\n<p>There is such a principle: internal service: first use RPC, RPC is suitable for internal, efficient and fast communication. The disadvantage is that it is best to use Java systems on both sides. External service: RESTful is the first to be used. REST is suitable for external use, easy to use, and cross-language. The disadvantage is that the operation is limited (CRUD), and it is not efficient enough. Therefore, RPC tends to be applied to scenarios with high performance and reliability requirements such as microservice architecture, distributed systems, database access, and high-performance computing.</p>\n<p><font size=3 color=#4169E1>5.2 WebSocket</font><br>WebSocket is a full-duplex communication protocol over a single TCP connection that allows a persistent connection between a client and a server for real-time data transfer.</p>\n<p>WebSocket can be realized through a simple API, supporting cross-platform and cross-browser use. Therefore, WebSocket is more suitable for some scenarios such as instant messaging (online chatting), real-time data pushing (stock data), remote monitoring and controlling real-time collaboration.</p>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://zhuanlan.zhihu.com/p/334809573\">https://zhuanlan.zhihu.com/p/334809573</a><br>[2] <a href=\"https://blog.csdn.net/The_Time_Runner/article/details/86518448\">https://blog.csdn.net/The_Time_Runner/article/details/86518448</a><br>[3] <a href=\"https://www.cnblogs.com/zhongyuanzhao000/p/11700815.html\">https://www.cnblogs.com/zhongyuanzhao000/p/11700815.html</a></p>\n"},{"title":"00. Waterfall development vs Agile development","date":"2023-09-06T14:31:00.000Z","_content":"\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\n \n\n#### <font size=3 color=#4169E1>1. Waterfall development</font> \nIn the waterfall development model, there are several distinguishing features:\n\n(1) Emphasis on documentation, with a particular focus on detailed documentation, especially the project requirements document, both for the development team and the test team is particularly important, high-quality documentation for the latter processes are critical.\n\n(2) Longer Cycles and Larger Manpower Sizes: Development cycles are fixed and lengthy, often measured in months, and team members must follow project schedules and various specifications.\n\n(3) Fixed requirements: requirement changes, and rework issues tend to be more costly.\n\n\n#### <font size=3 color=#4169E1>2. Agile development</font> \nIt is a human-centered, iterative, step-by-step development pattern. In Agile development, it aims to deliver core functionality quickly and continuously improve it by slicing up the project into smaller parts and delivering and testing them incrementally. Instead of emphasizing perfect design and coding, it seeks to quickly release usable versions and then continuously iterate and improve. \n\nAgile development mainly includes SCRUM, XP (Extreme Programming), Crystal Methods, FDD (Feature Driven Development) and so on. And we mainly use Scrum model in actual development.\n\nAgile development has different forms for different teams and different companies. For example, some teams like \"War Room\" very much ( Gather all interested parties or key members of the project team into a small room or conference room so they can work closely together, communicate, and solve problems)  Their ultimate goal is to be able to develop products quickly.\n\nThe Scrum workflow model also needs to be built on top of well-established specifications, development tools and facilities (Git/Jenkins/Cocoapods/Coding specifications, etc.). It has the following main elements:\n\n(1) Product Owner's clarity on requirements, including prioritization, resource dependencies, etc.\n\n(2) Developer's task splitting, including clear prioritization, deadline, manpower allocation, etc.\n\n(3) Daily meeting for all parties to update the status of each task (ToDo, Doing, Done) and discuss issues, etc.\n\n(4) Tasks completed by developers can be prioritized for delivery to product owners for experience and testers for testing; with the help of the company's CI/CD tools.\n\n(5) Review meetings are held to summarize the problems that occurred in the middle and how to avoid them.\n\n#### <font size=3 color=#4169E1>3. Waterfall development vs Agile development</font> \n\nIn a team, not one model dominates, which model to take depends on the situation.\n\nFor some of the more core features that require high quality (e.g., payment business), cross-team, third-party, and other collaboration scenarios where communication is not very efficient, waterfall development can still be adopted.\n\nAgile development can be adopted when the product's scenarios are time-sensitive and need to be validated and market captured quickly, with all the people available for quick face-to-face communication.\n","source":"_posts/iOS/06. Others/00. Waterfall development vs Agile development.md","raw":"---\ntitle: 00. Waterfall development vs Agile development\ndate: 2023-09-06 16:31:00\ncategories: \n- [iOS, 06. Others]\ntags:\n- Agile\n- waterfall\n---\n\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\n \n\n#### <font size=3 color=#4169E1>1. Waterfall development</font> \nIn the waterfall development model, there are several distinguishing features:\n\n(1) Emphasis on documentation, with a particular focus on detailed documentation, especially the project requirements document, both for the development team and the test team is particularly important, high-quality documentation for the latter processes are critical.\n\n(2) Longer Cycles and Larger Manpower Sizes: Development cycles are fixed and lengthy, often measured in months, and team members must follow project schedules and various specifications.\n\n(3) Fixed requirements: requirement changes, and rework issues tend to be more costly.\n\n\n#### <font size=3 color=#4169E1>2. Agile development</font> \nIt is a human-centered, iterative, step-by-step development pattern. In Agile development, it aims to deliver core functionality quickly and continuously improve it by slicing up the project into smaller parts and delivering and testing them incrementally. Instead of emphasizing perfect design and coding, it seeks to quickly release usable versions and then continuously iterate and improve. \n\nAgile development mainly includes SCRUM, XP (Extreme Programming), Crystal Methods, FDD (Feature Driven Development) and so on. And we mainly use Scrum model in actual development.\n\nAgile development has different forms for different teams and different companies. For example, some teams like \"War Room\" very much ( Gather all interested parties or key members of the project team into a small room or conference room so they can work closely together, communicate, and solve problems)  Their ultimate goal is to be able to develop products quickly.\n\nThe Scrum workflow model also needs to be built on top of well-established specifications, development tools and facilities (Git/Jenkins/Cocoapods/Coding specifications, etc.). It has the following main elements:\n\n(1) Product Owner's clarity on requirements, including prioritization, resource dependencies, etc.\n\n(2) Developer's task splitting, including clear prioritization, deadline, manpower allocation, etc.\n\n(3) Daily meeting for all parties to update the status of each task (ToDo, Doing, Done) and discuss issues, etc.\n\n(4) Tasks completed by developers can be prioritized for delivery to product owners for experience and testers for testing; with the help of the company's CI/CD tools.\n\n(5) Review meetings are held to summarize the problems that occurred in the middle and how to avoid them.\n\n#### <font size=3 color=#4169E1>3. Waterfall development vs Agile development</font> \n\nIn a team, not one model dominates, which model to take depends on the situation.\n\nFor some of the more core features that require high quality (e.g., payment business), cross-team, third-party, and other collaboration scenarios where communication is not very efficient, waterfall development can still be adopted.\n\nAgile development can be adopted when the product's scenarios are time-sensitive and need to be validated and market captured quickly, with all the people available for quick face-to-face communication.\n","slug":"iOS/06. Others/00. Waterfall development vs Agile development","published":1,"updated":"2023-10-06T15:17:50.883Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr7t00favu0mchwr68dj","content":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<h4 id=\"1-Waterfall-development\"><a href=\"#1-Waterfall-development\" class=\"headerlink\" title=\"1. Waterfall development\"></a><font size=3 color=#4169E1>1. Waterfall development</font></h4><p>In the waterfall development model, there are several distinguishing features:</p>\n<p>(1) Emphasis on documentation, with a particular focus on detailed documentation, especially the project requirements document, both for the development team and the test team is particularly important, high-quality documentation for the latter processes are critical.</p>\n<p>(2) Longer Cycles and Larger Manpower Sizes: Development cycles are fixed and lengthy, often measured in months, and team members must follow project schedules and various specifications.</p>\n<p>(3) Fixed requirements: requirement changes, and rework issues tend to be more costly.</p>\n<h4 id=\"2-Agile-development\"><a href=\"#2-Agile-development\" class=\"headerlink\" title=\"2. Agile development\"></a><font size=3 color=#4169E1>2. Agile development</font></h4><p>It is a human-centered, iterative, step-by-step development pattern. In Agile development, it aims to deliver core functionality quickly and continuously improve it by slicing up the project into smaller parts and delivering and testing them incrementally. Instead of emphasizing perfect design and coding, it seeks to quickly release usable versions and then continuously iterate and improve. </p>\n<p>Agile development mainly includes SCRUM, XP (Extreme Programming), Crystal Methods, FDD (Feature Driven Development) and so on. And we mainly use Scrum model in actual development.</p>\n<p>Agile development has different forms for different teams and different companies. For example, some teams like “War Room” very much ( Gather all interested parties or key members of the project team into a small room or conference room so they can work closely together, communicate, and solve problems)  Their ultimate goal is to be able to develop products quickly.</p>\n<p>The Scrum workflow model also needs to be built on top of well-established specifications, development tools and facilities (Git&#x2F;Jenkins&#x2F;Cocoapods&#x2F;Coding specifications, etc.). It has the following main elements:</p>\n<p>(1) Product Owner’s clarity on requirements, including prioritization, resource dependencies, etc.</p>\n<p>(2) Developer’s task splitting, including clear prioritization, deadline, manpower allocation, etc.</p>\n<p>(3) Daily meeting for all parties to update the status of each task (ToDo, Doing, Done) and discuss issues, etc.</p>\n<p>(4) Tasks completed by developers can be prioritized for delivery to product owners for experience and testers for testing; with the help of the company’s CI&#x2F;CD tools.</p>\n<p>(5) Review meetings are held to summarize the problems that occurred in the middle and how to avoid them.</p>\n<h4 id=\"3-Waterfall-development-vs-Agile-development\"><a href=\"#3-Waterfall-development-vs-Agile-development\" class=\"headerlink\" title=\"3. Waterfall development vs Agile development\"></a><font size=3 color=#4169E1>3. Waterfall development vs Agile development</font></h4><p>In a team, not one model dominates, which model to take depends on the situation.</p>\n<p>For some of the more core features that require high quality (e.g., payment business), cross-team, third-party, and other collaboration scenarios where communication is not very efficient, waterfall development can still be adopted.</p>\n<p>Agile development can be adopted when the product’s scenarios are time-sensitive and need to be validated and market captured quickly, with all the people available for quick face-to-face communication.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<h4 id=\"1-Waterfall-development\"><a href=\"#1-Waterfall-development\" class=\"headerlink\" title=\"1. Waterfall development\"></a><font size=3 color=#4169E1>1. Waterfall development</font></h4><p>In the waterfall development model, there are several distinguishing features:</p>\n<p>(1) Emphasis on documentation, with a particular focus on detailed documentation, especially the project requirements document, both for the development team and the test team is particularly important, high-quality documentation for the latter processes are critical.</p>\n<p>(2) Longer Cycles and Larger Manpower Sizes: Development cycles are fixed and lengthy, often measured in months, and team members must follow project schedules and various specifications.</p>\n<p>(3) Fixed requirements: requirement changes, and rework issues tend to be more costly.</p>\n<h4 id=\"2-Agile-development\"><a href=\"#2-Agile-development\" class=\"headerlink\" title=\"2. Agile development\"></a><font size=3 color=#4169E1>2. Agile development</font></h4><p>It is a human-centered, iterative, step-by-step development pattern. In Agile development, it aims to deliver core functionality quickly and continuously improve it by slicing up the project into smaller parts and delivering and testing them incrementally. Instead of emphasizing perfect design and coding, it seeks to quickly release usable versions and then continuously iterate and improve. </p>\n<p>Agile development mainly includes SCRUM, XP (Extreme Programming), Crystal Methods, FDD (Feature Driven Development) and so on. And we mainly use Scrum model in actual development.</p>\n<p>Agile development has different forms for different teams and different companies. For example, some teams like “War Room” very much ( Gather all interested parties or key members of the project team into a small room or conference room so they can work closely together, communicate, and solve problems)  Their ultimate goal is to be able to develop products quickly.</p>\n<p>The Scrum workflow model also needs to be built on top of well-established specifications, development tools and facilities (Git&#x2F;Jenkins&#x2F;Cocoapods&#x2F;Coding specifications, etc.). It has the following main elements:</p>\n<p>(1) Product Owner’s clarity on requirements, including prioritization, resource dependencies, etc.</p>\n<p>(2) Developer’s task splitting, including clear prioritization, deadline, manpower allocation, etc.</p>\n<p>(3) Daily meeting for all parties to update the status of each task (ToDo, Doing, Done) and discuss issues, etc.</p>\n<p>(4) Tasks completed by developers can be prioritized for delivery to product owners for experience and testers for testing; with the help of the company’s CI&#x2F;CD tools.</p>\n<p>(5) Review meetings are held to summarize the problems that occurred in the middle and how to avoid them.</p>\n<h4 id=\"3-Waterfall-development-vs-Agile-development\"><a href=\"#3-Waterfall-development-vs-Agile-development\" class=\"headerlink\" title=\"3. Waterfall development vs Agile development\"></a><font size=3 color=#4169E1>3. Waterfall development vs Agile development</font></h4><p>In a team, not one model dominates, which model to take depends on the situation.</p>\n<p>For some of the more core features that require high quality (e.g., payment business), cross-team, third-party, and other collaboration scenarios where communication is not very efficient, waterfall development can still be adopted.</p>\n<p>Agile development can be adopted when the product’s scenarios are time-sensitive and need to be validated and market captured quickly, with all the people available for quick face-to-face communication.</p>\n"},{"title":"02. All About CI/CDs","date":"2023-10-23T16:40:00.000Z","_content":"\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\n\n#### <font size=6 color=#4169E1>1.What is the CI/CD?</font> \n\nCI/CD refers to the abbreviation of Continuous Integration and Continuous Delivery/Deployment.\n\nCI refers to automatically integrating developers' code changes into a shared code warehouse, and verifying and building the code through automated testing, compilation, and building processes to quickly discover and solve code problems. CI helps speed up the speed and quality of code delivery and improves the collaboration efficiency of development teams.\n\nCD refers to the automatic deployment of CI-verified code into the production environment to achieve faster delivery and response to requirements. CD includes steps such as automated testing, building, deployment, and monitoring to ensure that the delivered code is stable, reliable, and secure.\n\nThe CI/CD process can help development teams deliver high-quality software more quickly and reliably while reducing the risks caused by coding errors and manual operations.\n\n#### <font size=6 color=#4169E1>2. Continuous Integration</font>\n\nWe usually use the gitlab/github platform to complete CI. The process is as follows:      \n\n(1) Create a GitLab project: Create a new project in GitLab and push the project code to the GitLab repository.\n\n(2) Configure GitLab Runner: GitLab Runner is a tool used to perform CI/CD tasks and can run on Linux, Windows or macOS. You need to register a Runner in GitLab and configure the environment in which the Runner runs.\n\n(3) Configure the CI/CD pipeline: Create a .gitlab-ci.yml file in the GitLab project to define the various stages, tasks and steps of the CI/CD pipeline. Different scripting languages and commands can be used, such as Shell scripts, Python, Ruby, etc.\n\n(4) Trigger CI/CD pipeline: When making code submission or merge request in GitLab project, the execution of CI/CD pipeline will be automatically triggered. Pipeline execution can also be manually triggered for testing, building, and deployment.\n\n(5) Monitor and manage CI/CD pipelines: You can view the execution status, logs and output information of the pipeline in GitLab for troubleshooting and problem analysis. You can also manage pipeline parameters, environment variables, scheduled tasks, etc.\n\n(6) Configure CD environment and automated deployment: You can use the automated deployment function of GitLab CI/CD to deploy code to testing, pre-production and production environments. You can also use other CD tools, such as Kubernetes, Docker Swarm, etc., to achieve automated deployment and container orchestration.\n\n\n#### <font size=6 color=#4169E1>3. Continuous Delivery/Deployment</font> \n\nThe entire CD process is usually completed with the help of the Jenkins+Fastlane+Pgyer tool set.\n\nJenkins can be used to perform continuous integration and continuous delivery processes for the entire software project, including tasks such as building, testing, and deployment. \n\nFastlane can be used as a step in the Jenkins pipeline to automate the build, test and release process of mobile applications. By using Jenkins and Fastlane together, development teams can automate the management of entire software projects and speed up software delivery.\n\nThe installation package (ipa file) packaged by Jenkins+Fastlane is uploaded to the Pgyer platform.\nThe Pgyer platform is used for test distribution, user feedback and version management. Of course, there are other platforms that can be used, such as HockeyApp, AppCenter, Firebase App Distribution and of course TestFlight.\n\nIt can be simply understood that Jenkins quickly helps you build a website and then calls Fastlane to help you export the installation package through a series of steps.\n\n**Tips:**\n\nFastlane:\n\nFastlane is a cross-platform continuous integration tool implemented using ruby. It is mainly used to support the continuous integration practice of Android and iOS mobile platform projects. Fastlane processing provides: initial setup, screenshots, packaging, uploading to the test platform, deployment, etc.\n\nBecause the fastlane command is not very convenient for QA and other non-technical personnel to package, it needs to be called with the help of Jenkins.\n\nJenkins: \n\nJenkins is an independent open source software project. It is a continuous integration tool developed based on Java. It is used to monitor continuous repetitive work. It aims to provide an open and easy-to-use software platform to make continuous integration of software possible. Formerly known as Hudson, it is an extensible continuous integration engine. Can be used to automate various tasks such as building, testing and deploying software.\n\n#### <font size=6 color=#4169E1>4. Summary</font> \n\nIn conclusion, We use Git/Gitlab for project source code management, and use Jenkins as a trigger to capture push and other operations either regularly or manually to trigger packaging actions; execute Fastlane scripts for certificate management and packaging; and distribute through the Pgyer platform.\n\n\n#### <font size=5 color=gray>*Reference*</font>\n[1] https://www.pgyer.com/\n[2] https://zhuanlan.zhihu.com/p/633284341/\n[3] https://developer.apple.com/testflight/\n[4] https://firebase.google.com/products/app-distribution/\n[5] https://www.hockeyapp.net/\n[6] https://appcenter.ms/\n\n\n","source":"_posts/iOS/06. Others/02. All about CI:CDs.md","raw":"---\ntitle: 02. All About CI/CDs\ndate: 2023-10-23 18:40:00\ncategories: \n- [iOS, 06. Others]\ntags:\n- CI/CDs\n- Jenkins\n- Fastlane\n---\n\n<font color=gray size=2>*It will take about 3 minutes to finish reading this article.*</font>\n\n\n#### <font size=6 color=#4169E1>1.What is the CI/CD?</font> \n\nCI/CD refers to the abbreviation of Continuous Integration and Continuous Delivery/Deployment.\n\nCI refers to automatically integrating developers' code changes into a shared code warehouse, and verifying and building the code through automated testing, compilation, and building processes to quickly discover and solve code problems. CI helps speed up the speed and quality of code delivery and improves the collaboration efficiency of development teams.\n\nCD refers to the automatic deployment of CI-verified code into the production environment to achieve faster delivery and response to requirements. CD includes steps such as automated testing, building, deployment, and monitoring to ensure that the delivered code is stable, reliable, and secure.\n\nThe CI/CD process can help development teams deliver high-quality software more quickly and reliably while reducing the risks caused by coding errors and manual operations.\n\n#### <font size=6 color=#4169E1>2. Continuous Integration</font>\n\nWe usually use the gitlab/github platform to complete CI. The process is as follows:      \n\n(1) Create a GitLab project: Create a new project in GitLab and push the project code to the GitLab repository.\n\n(2) Configure GitLab Runner: GitLab Runner is a tool used to perform CI/CD tasks and can run on Linux, Windows or macOS. You need to register a Runner in GitLab and configure the environment in which the Runner runs.\n\n(3) Configure the CI/CD pipeline: Create a .gitlab-ci.yml file in the GitLab project to define the various stages, tasks and steps of the CI/CD pipeline. Different scripting languages and commands can be used, such as Shell scripts, Python, Ruby, etc.\n\n(4) Trigger CI/CD pipeline: When making code submission or merge request in GitLab project, the execution of CI/CD pipeline will be automatically triggered. Pipeline execution can also be manually triggered for testing, building, and deployment.\n\n(5) Monitor and manage CI/CD pipelines: You can view the execution status, logs and output information of the pipeline in GitLab for troubleshooting and problem analysis. You can also manage pipeline parameters, environment variables, scheduled tasks, etc.\n\n(6) Configure CD environment and automated deployment: You can use the automated deployment function of GitLab CI/CD to deploy code to testing, pre-production and production environments. You can also use other CD tools, such as Kubernetes, Docker Swarm, etc., to achieve automated deployment and container orchestration.\n\n\n#### <font size=6 color=#4169E1>3. Continuous Delivery/Deployment</font> \n\nThe entire CD process is usually completed with the help of the Jenkins+Fastlane+Pgyer tool set.\n\nJenkins can be used to perform continuous integration and continuous delivery processes for the entire software project, including tasks such as building, testing, and deployment. \n\nFastlane can be used as a step in the Jenkins pipeline to automate the build, test and release process of mobile applications. By using Jenkins and Fastlane together, development teams can automate the management of entire software projects and speed up software delivery.\n\nThe installation package (ipa file) packaged by Jenkins+Fastlane is uploaded to the Pgyer platform.\nThe Pgyer platform is used for test distribution, user feedback and version management. Of course, there are other platforms that can be used, such as HockeyApp, AppCenter, Firebase App Distribution and of course TestFlight.\n\nIt can be simply understood that Jenkins quickly helps you build a website and then calls Fastlane to help you export the installation package through a series of steps.\n\n**Tips:**\n\nFastlane:\n\nFastlane is a cross-platform continuous integration tool implemented using ruby. It is mainly used to support the continuous integration practice of Android and iOS mobile platform projects. Fastlane processing provides: initial setup, screenshots, packaging, uploading to the test platform, deployment, etc.\n\nBecause the fastlane command is not very convenient for QA and other non-technical personnel to package, it needs to be called with the help of Jenkins.\n\nJenkins: \n\nJenkins is an independent open source software project. It is a continuous integration tool developed based on Java. It is used to monitor continuous repetitive work. It aims to provide an open and easy-to-use software platform to make continuous integration of software possible. Formerly known as Hudson, it is an extensible continuous integration engine. Can be used to automate various tasks such as building, testing and deploying software.\n\n#### <font size=6 color=#4169E1>4. Summary</font> \n\nIn conclusion, We use Git/Gitlab for project source code management, and use Jenkins as a trigger to capture push and other operations either regularly or manually to trigger packaging actions; execute Fastlane scripts for certificate management and packaging; and distribute through the Pgyer platform.\n\n\n#### <font size=5 color=gray>*Reference*</font>\n[1] https://www.pgyer.com/\n[2] https://zhuanlan.zhihu.com/p/633284341/\n[3] https://developer.apple.com/testflight/\n[4] https://firebase.google.com/products/app-distribution/\n[5] https://www.hockeyapp.net/\n[6] https://appcenter.ms/\n\n\n","slug":"iOS/06. Others/02. All about CI:CDs","published":1,"updated":"2023-10-23T16:45:06.911Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpg1hr7u00fcvu0m97h0da1h","content":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<h4 id=\"1-What-is-the-CI-CD\"><a href=\"#1-What-is-the-CI-CD\" class=\"headerlink\" title=\"1.What is the CI&#x2F;CD?\"></a><font size=6 color=#4169E1>1.What is the CI&#x2F;CD?</font></h4><p>CI&#x2F;CD refers to the abbreviation of Continuous Integration and Continuous Delivery&#x2F;Deployment.</p>\n<p>CI refers to automatically integrating developers’ code changes into a shared code warehouse, and verifying and building the code through automated testing, compilation, and building processes to quickly discover and solve code problems. CI helps speed up the speed and quality of code delivery and improves the collaboration efficiency of development teams.</p>\n<p>CD refers to the automatic deployment of CI-verified code into the production environment to achieve faster delivery and response to requirements. CD includes steps such as automated testing, building, deployment, and monitoring to ensure that the delivered code is stable, reliable, and secure.</p>\n<p>The CI&#x2F;CD process can help development teams deliver high-quality software more quickly and reliably while reducing the risks caused by coding errors and manual operations.</p>\n<h4 id=\"2-Continuous-Integration\"><a href=\"#2-Continuous-Integration\" class=\"headerlink\" title=\"2. Continuous Integration\"></a><font size=6 color=#4169E1>2. Continuous Integration</font></h4><p>We usually use the gitlab&#x2F;github platform to complete CI. The process is as follows:      </p>\n<p>(1) Create a GitLab project: Create a new project in GitLab and push the project code to the GitLab repository.</p>\n<p>(2) Configure GitLab Runner: GitLab Runner is a tool used to perform CI&#x2F;CD tasks and can run on Linux, Windows or macOS. You need to register a Runner in GitLab and configure the environment in which the Runner runs.</p>\n<p>(3) Configure the CI&#x2F;CD pipeline: Create a .gitlab-ci.yml file in the GitLab project to define the various stages, tasks and steps of the CI&#x2F;CD pipeline. Different scripting languages and commands can be used, such as Shell scripts, Python, Ruby, etc.</p>\n<p>(4) Trigger CI&#x2F;CD pipeline: When making code submission or merge request in GitLab project, the execution of CI&#x2F;CD pipeline will be automatically triggered. Pipeline execution can also be manually triggered for testing, building, and deployment.</p>\n<p>(5) Monitor and manage CI&#x2F;CD pipelines: You can view the execution status, logs and output information of the pipeline in GitLab for troubleshooting and problem analysis. You can also manage pipeline parameters, environment variables, scheduled tasks, etc.</p>\n<p>(6) Configure CD environment and automated deployment: You can use the automated deployment function of GitLab CI&#x2F;CD to deploy code to testing, pre-production and production environments. You can also use other CD tools, such as Kubernetes, Docker Swarm, etc., to achieve automated deployment and container orchestration.</p>\n<h4 id=\"3-Continuous-Delivery-Deployment\"><a href=\"#3-Continuous-Delivery-Deployment\" class=\"headerlink\" title=\"3. Continuous Delivery&#x2F;Deployment\"></a><font size=6 color=#4169E1>3. Continuous Delivery&#x2F;Deployment</font></h4><p>The entire CD process is usually completed with the help of the Jenkins+Fastlane+Pgyer tool set.</p>\n<p>Jenkins can be used to perform continuous integration and continuous delivery processes for the entire software project, including tasks such as building, testing, and deployment. </p>\n<p>Fastlane can be used as a step in the Jenkins pipeline to automate the build, test and release process of mobile applications. By using Jenkins and Fastlane together, development teams can automate the management of entire software projects and speed up software delivery.</p>\n<p>The installation package (ipa file) packaged by Jenkins+Fastlane is uploaded to the Pgyer platform.<br>The Pgyer platform is used for test distribution, user feedback and version management. Of course, there are other platforms that can be used, such as HockeyApp, AppCenter, Firebase App Distribution and of course TestFlight.</p>\n<p>It can be simply understood that Jenkins quickly helps you build a website and then calls Fastlane to help you export the installation package through a series of steps.</p>\n<p><strong>Tips:</strong></p>\n<p>Fastlane:</p>\n<p>Fastlane is a cross-platform continuous integration tool implemented using ruby. It is mainly used to support the continuous integration practice of Android and iOS mobile platform projects. Fastlane processing provides: initial setup, screenshots, packaging, uploading to the test platform, deployment, etc.</p>\n<p>Because the fastlane command is not very convenient for QA and other non-technical personnel to package, it needs to be called with the help of Jenkins.</p>\n<p>Jenkins: </p>\n<p>Jenkins is an independent open source software project. It is a continuous integration tool developed based on Java. It is used to monitor continuous repetitive work. It aims to provide an open and easy-to-use software platform to make continuous integration of software possible. Formerly known as Hudson, it is an extensible continuous integration engine. Can be used to automate various tasks such as building, testing and deploying software.</p>\n<h4 id=\"4-Summary\"><a href=\"#4-Summary\" class=\"headerlink\" title=\"4. Summary\"></a><font size=6 color=#4169E1>4. Summary</font></h4><p>In conclusion, We use Git&#x2F;Gitlab for project source code management, and use Jenkins as a trigger to capture push and other operations either regularly or manually to trigger packaging actions; execute Fastlane scripts for certificate management and packaging; and distribute through the Pgyer platform.</p>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=5 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://www.pgyer.com/\">https://www.pgyer.com/</a><br>[2] <a href=\"https://zhuanlan.zhihu.com/p/633284341/\">https://zhuanlan.zhihu.com/p/633284341/</a><br>[3] <a href=\"https://developer.apple.com/testflight/\">https://developer.apple.com/testflight/</a><br>[4] <a href=\"https://firebase.google.com/products/app-distribution/\">https://firebase.google.com/products/app-distribution/</a><br>[5] <a href=\"https://www.hockeyapp.net/\">https://www.hockeyapp.net/</a><br>[6] <a href=\"https://appcenter.ms/\">https://appcenter.ms/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p>\n<h4 id=\"1-What-is-the-CI-CD\"><a href=\"#1-What-is-the-CI-CD\" class=\"headerlink\" title=\"1.What is the CI&#x2F;CD?\"></a><font size=6 color=#4169E1>1.What is the CI&#x2F;CD?</font></h4><p>CI&#x2F;CD refers to the abbreviation of Continuous Integration and Continuous Delivery&#x2F;Deployment.</p>\n<p>CI refers to automatically integrating developers’ code changes into a shared code warehouse, and verifying and building the code through automated testing, compilation, and building processes to quickly discover and solve code problems. CI helps speed up the speed and quality of code delivery and improves the collaboration efficiency of development teams.</p>\n<p>CD refers to the automatic deployment of CI-verified code into the production environment to achieve faster delivery and response to requirements. CD includes steps such as automated testing, building, deployment, and monitoring to ensure that the delivered code is stable, reliable, and secure.</p>\n<p>The CI&#x2F;CD process can help development teams deliver high-quality software more quickly and reliably while reducing the risks caused by coding errors and manual operations.</p>\n<h4 id=\"2-Continuous-Integration\"><a href=\"#2-Continuous-Integration\" class=\"headerlink\" title=\"2. Continuous Integration\"></a><font size=6 color=#4169E1>2. Continuous Integration</font></h4><p>We usually use the gitlab&#x2F;github platform to complete CI. The process is as follows:      </p>\n<p>(1) Create a GitLab project: Create a new project in GitLab and push the project code to the GitLab repository.</p>\n<p>(2) Configure GitLab Runner: GitLab Runner is a tool used to perform CI&#x2F;CD tasks and can run on Linux, Windows or macOS. You need to register a Runner in GitLab and configure the environment in which the Runner runs.</p>\n<p>(3) Configure the CI&#x2F;CD pipeline: Create a .gitlab-ci.yml file in the GitLab project to define the various stages, tasks and steps of the CI&#x2F;CD pipeline. Different scripting languages and commands can be used, such as Shell scripts, Python, Ruby, etc.</p>\n<p>(4) Trigger CI&#x2F;CD pipeline: When making code submission or merge request in GitLab project, the execution of CI&#x2F;CD pipeline will be automatically triggered. Pipeline execution can also be manually triggered for testing, building, and deployment.</p>\n<p>(5) Monitor and manage CI&#x2F;CD pipelines: You can view the execution status, logs and output information of the pipeline in GitLab for troubleshooting and problem analysis. You can also manage pipeline parameters, environment variables, scheduled tasks, etc.</p>\n<p>(6) Configure CD environment and automated deployment: You can use the automated deployment function of GitLab CI&#x2F;CD to deploy code to testing, pre-production and production environments. You can also use other CD tools, such as Kubernetes, Docker Swarm, etc., to achieve automated deployment and container orchestration.</p>\n<h4 id=\"3-Continuous-Delivery-Deployment\"><a href=\"#3-Continuous-Delivery-Deployment\" class=\"headerlink\" title=\"3. Continuous Delivery&#x2F;Deployment\"></a><font size=6 color=#4169E1>3. Continuous Delivery&#x2F;Deployment</font></h4><p>The entire CD process is usually completed with the help of the Jenkins+Fastlane+Pgyer tool set.</p>\n<p>Jenkins can be used to perform continuous integration and continuous delivery processes for the entire software project, including tasks such as building, testing, and deployment. </p>\n<p>Fastlane can be used as a step in the Jenkins pipeline to automate the build, test and release process of mobile applications. By using Jenkins and Fastlane together, development teams can automate the management of entire software projects and speed up software delivery.</p>\n<p>The installation package (ipa file) packaged by Jenkins+Fastlane is uploaded to the Pgyer platform.<br>The Pgyer platform is used for test distribution, user feedback and version management. Of course, there are other platforms that can be used, such as HockeyApp, AppCenter, Firebase App Distribution and of course TestFlight.</p>\n<p>It can be simply understood that Jenkins quickly helps you build a website and then calls Fastlane to help you export the installation package through a series of steps.</p>\n<p><strong>Tips:</strong></p>\n<p>Fastlane:</p>\n<p>Fastlane is a cross-platform continuous integration tool implemented using ruby. It is mainly used to support the continuous integration practice of Android and iOS mobile platform projects. Fastlane processing provides: initial setup, screenshots, packaging, uploading to the test platform, deployment, etc.</p>\n<p>Because the fastlane command is not very convenient for QA and other non-technical personnel to package, it needs to be called with the help of Jenkins.</p>\n<p>Jenkins: </p>\n<p>Jenkins is an independent open source software project. It is a continuous integration tool developed based on Java. It is used to monitor continuous repetitive work. It aims to provide an open and easy-to-use software platform to make continuous integration of software possible. Formerly known as Hudson, it is an extensible continuous integration engine. Can be used to automate various tasks such as building, testing and deploying software.</p>\n<h4 id=\"4-Summary\"><a href=\"#4-Summary\" class=\"headerlink\" title=\"4. Summary\"></a><font size=6 color=#4169E1>4. Summary</font></h4><p>In conclusion, We use Git&#x2F;Gitlab for project source code management, and use Jenkins as a trigger to capture push and other operations either regularly or manually to trigger packaging actions; execute Fastlane scripts for certificate management and packaging; and distribute through the Pgyer platform.</p>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><font size=5 color=gray><em>Reference</em></font></h4><p>[1] <a href=\"https://www.pgyer.com/\">https://www.pgyer.com/</a><br>[2] <a href=\"https://zhuanlan.zhihu.com/p/633284341/\">https://zhuanlan.zhihu.com/p/633284341/</a><br>[3] <a href=\"https://developer.apple.com/testflight/\">https://developer.apple.com/testflight/</a><br>[4] <a href=\"https://firebase.google.com/products/app-distribution/\">https://firebase.google.com/products/app-distribution/</a><br>[5] <a href=\"https://www.hockeyapp.net/\">https://www.hockeyapp.net/</a><br>[6] <a href=\"https://appcenter.ms/\">https://appcenter.ms/</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clpg1hr4d0003vu0ma3uc2p00","category_id":"clpg1hr4h0009vu0m1zh9ccvi","_id":"clpg1hr4n000jvu0mfhr49mjk"},{"post_id":"clpg1hr4f0005vu0mbtmr9pf9","category_id":"clpg1hr4j000dvu0mfiaj0oxg","_id":"clpg1hr4p000ovu0m3k6s4cn2"},{"post_id":"clpg1hr4g0008vu0m968q2pl0","category_id":"clpg1hr4j000dvu0mfiaj0oxg","_id":"clpg1hr4r000vvu0mbdpefobv"},{"post_id":"clpg1hr4i000avu0m58zqcqrt","category_id":"clpg1hr4j000dvu0mfiaj0oxg","_id":"clpg1hr4t0011vu0me7z1a0x5"},{"post_id":"clpg1hr4i000bvu0m8m2beqjc","category_id":"clpg1hr4j000dvu0mfiaj0oxg","_id":"clpg1hr4w0017vu0mhb8ughsp"},{"post_id":"clpg1hr4s000zvu0m76dh0oor","category_id":"clpg1hr4s000yvu0m8otl9u0c","_id":"clpg1hr59002cvu0m458odpxi"},{"post_id":"clpg1hr4s000zvu0m76dh0oor","category_id":"clpg1hr560021vu0mb6p22kjb","_id":"clpg1hr5a002evu0mgw1m2hb4"},{"post_id":"clpg1hr4j000evu0m3pgn47wm","category_id":"clpg1hr4s000yvu0m8otl9u0c","_id":"clpg1hr5b002jvu0m3599454n"},{"post_id":"clpg1hr4j000evu0m3pgn47wm","category_id":"clpg1hr580026vu0makxxh67j","_id":"clpg1hr5c002lvu0mdndt2pck"},{"post_id":"clpg1hr4k000fvu0m48a3dftm","category_id":"clpg1hr4s000yvu0m8otl9u0c","_id":"clpg1hr5i0031vu0m8iogb8ue"},{"post_id":"clpg1hr4k000fvu0m48a3dftm","category_id":"clpg1hr580026vu0makxxh67j","_id":"clpg1hr5j0034vu0mhzk2cge7"},{"post_id":"clpg1hr4m000ivu0mhx0b9ys4","category_id":"clpg1hr4s000yvu0m8otl9u0c","_id":"clpg1hr5o003kvu0m1k9nfjh4"},{"post_id":"clpg1hr4m000ivu0mhx0b9ys4","category_id":"clpg1hr580026vu0makxxh67j","_id":"clpg1hr5p003ovu0m5iie5orj"},{"post_id":"clpg1hr4n000kvu0m36w0am4s","category_id":"clpg1hr4s000yvu0m8otl9u0c","_id":"clpg1hr5u0042vu0mhgugbzaf"},{"post_id":"clpg1hr4n000kvu0m36w0am4s","category_id":"clpg1hr580026vu0makxxh67j","_id":"clpg1hr5v0045vu0mbcqvbhgk"},{"post_id":"clpg1hr4o000nvu0m19d4hlq1","category_id":"clpg1hr4s000yvu0m8otl9u0c","_id":"clpg1hr5z004jvu0m5eehfkn9"},{"post_id":"clpg1hr4o000nvu0m19d4hlq1","category_id":"clpg1hr580026vu0makxxh67j","_id":"clpg1hr60004mvu0m5otpgxf7"},{"post_id":"clpg1hr4p000qvu0m2c6u7jso","category_id":"clpg1hr4s000yvu0m8otl9u0c","_id":"clpg1hr640050vu0m6q9ifyfy"},{"post_id":"clpg1hr4p000qvu0m2c6u7jso","category_id":"clpg1hr560021vu0mb6p22kjb","_id":"clpg1hr640052vu0mggjl9ixg"},{"post_id":"clpg1hr640051vu0mcof8g4t9","category_id":"clpg1hr4h0009vu0m1zh9ccvi","_id":"clpg1hr68005evu0m2qp7hirh"},{"post_id":"clpg1hr4q000uvu0mcii0aqif","category_id":"clpg1hr4s000yvu0m8otl9u0c","_id":"clpg1hr69005ivu0mgds5br6c"},{"post_id":"clpg1hr4q000uvu0mcii0aqif","category_id":"clpg1hr560021vu0mb6p22kjb","_id":"clpg1hr69005kvu0mcom72y7v"},{"post_id":"clpg1hr650057vu0m9j9ohsd6","category_id":"clpg1hr4h0009vu0m1zh9ccvi","_id":"clpg1hr69005nvu0m0t3r6oeo"},{"post_id":"clpg1hr66005bvu0mer7z2bn6","category_id":"clpg1hr4h0009vu0m1zh9ccvi","_id":"clpg1hr6a005qvu0m3nh9fpu9"},{"post_id":"clpg1hr68005dvu0mgde38x67","category_id":"clpg1hr4h0009vu0m1zh9ccvi","_id":"clpg1hr6a005tvu0mcyqpd25b"},{"post_id":"clpg1hr4r000xvu0m85jw55ue","category_id":"clpg1hr4s000yvu0m8otl9u0c","_id":"clpg1hr6b005yvu0m58ohf24n"},{"post_id":"clpg1hr4r000xvu0m85jw55ue","category_id":"clpg1hr560021vu0mb6p22kjb","_id":"clpg1hr6b0061vu0mc80uccft"},{"post_id":"clpg1hr59002dvu0m2rtf0lkk","category_id":"clpg1hr59002avu0mh764gd23","_id":"clpg1hr6f006rvu0m3pcy0ihi"},{"post_id":"clpg1hr59002dvu0m2rtf0lkk","category_id":"clpg1hr6e006hvu0magsv779s","_id":"clpg1hr6f006svu0mfkzyheu5"},{"post_id":"clpg1hr4t0013vu0m4pokclhg","category_id":"clpg1hr59002avu0mh764gd23","_id":"clpg1hr6g006vvu0m543beuef"},{"post_id":"clpg1hr4t0013vu0m4pokclhg","category_id":"clpg1hr6e006lvu0m0ek03tcx","_id":"clpg1hr6g006xvu0mgr9q76k4"},{"post_id":"clpg1hr5a002fvu0mg7z02t30","category_id":"clpg1hr59002avu0mh764gd23","_id":"clpg1hr6g0070vu0mcaos1qou"},{"post_id":"clpg1hr5a002fvu0mg7z02t30","category_id":"clpg1hr6e006hvu0magsv779s","_id":"clpg1hr6h0072vu0md75f8j41"},{"post_id":"clpg1hr5b002ivu0m68376b5q","category_id":"clpg1hr59002avu0mh764gd23","_id":"clpg1hr6h0074vu0mbk7z2tb9"},{"post_id":"clpg1hr5b002ivu0m68376b5q","category_id":"clpg1hr6f006tvu0m4ayzbuom","_id":"clpg1hr6h0077vu0m63tp726y"},{"post_id":"clpg1hr4t0016vu0mgzug16rb","category_id":"clpg1hr59002avu0mh764gd23","_id":"clpg1hr6i007avu0m7t216sle"},{"post_id":"clpg1hr4t0016vu0mgzug16rb","category_id":"clpg1hr6e006lvu0m0ek03tcx","_id":"clpg1hr6i007cvu0mf02s5van"},{"post_id":"clpg1hr5c002kvu0m6mqz2rjh","category_id":"clpg1hr59002avu0mh764gd23","_id":"clpg1hr6j007fvu0m6of209dq"},{"post_id":"clpg1hr5c002kvu0m6mqz2rjh","category_id":"clpg1hr6f006tvu0m4ayzbuom","_id":"clpg1hr6j007hvu0m4vyw2k2m"},{"post_id":"clpg1hr5e002ovu0m38hcd7wd","category_id":"clpg1hr59002avu0mh764gd23","_id":"clpg1hr6j007jvu0m66j7f7dj"},{"post_id":"clpg1hr5e002ovu0m38hcd7wd","category_id":"clpg1hr6f006tvu0m4ayzbuom","_id":"clpg1hr6j007lvu0m9q3tgovq"},{"post_id":"clpg1hr5f002qvu0m22bfh7hx","category_id":"clpg1hr59002avu0mh764gd23","_id":"clpg1hr6k007ovu0m2khiedzh"},{"post_id":"clpg1hr5f002qvu0m22bfh7hx","category_id":"clpg1hr6f006tvu0m4ayzbuom","_id":"clpg1hr6k007qvu0meya63di8"},{"post_id":"clpg1hr5g002tvu0mbpnc80ut","category_id":"clpg1hr59002avu0mh764gd23","_id":"clpg1hr6l007uvu0m6i1gcpyp"},{"post_id":"clpg1hr5g002tvu0mbpnc80ut","category_id":"clpg1hr6f006tvu0m4ayzbuom","_id":"clpg1hr6l007vvu0mextveetx"},{"post_id":"clpg1hr4w0019vu0mbl3k7ofx","category_id":"clpg1hr59002avu0mh764gd23","_id":"clpg1hr6l007yvu0m79l8h6tu"},{"post_id":"clpg1hr4w0019vu0mbl3k7ofx","category_id":"clpg1hr6e006lvu0m0ek03tcx","_id":"clpg1hr6l0080vu0mdv7k7n2t"},{"post_id":"clpg1hr5h002wvu0mbh5f9ktt","category_id":"clpg1hr59002avu0mh764gd23","_id":"clpg1hr6m0083vu0meq6wgm2o"},{"post_id":"clpg1hr5h002wvu0mbh5f9ktt","category_id":"clpg1hr6k007svu0mdw5b6yqk","_id":"clpg1hr6m0084vu0me4hn18m5"},{"post_id":"clpg1hr5h002zvu0m6uaj26b2","category_id":"clpg1hr59002avu0mh764gd23","_id":"clpg1hr6m0087vu0mbz19bbqm"},{"post_id":"clpg1hr5h002zvu0m6uaj26b2","category_id":"clpg1hr6k007svu0mdw5b6yqk","_id":"clpg1hr6n0089vu0mfwm78s2b"},{"post_id":"clpg1hr4x001bvu0m2gyc24dw","category_id":"clpg1hr59002avu0mh764gd23","_id":"clpg1hr6n008dvu0mho012fsv"},{"post_id":"clpg1hr4x001bvu0m2gyc24dw","category_id":"clpg1hr6e006lvu0m0ek03tcx","_id":"clpg1hr6n008fvu0mei5yepwf"},{"post_id":"clpg1hr5i0033vu0mgrb14hn4","category_id":"clpg1hr59002avu0mh764gd23","_id":"clpg1hr6o008ivu0mhhbye1sl"},{"post_id":"clpg1hr5i0033vu0mgrb14hn4","category_id":"clpg1hr6m0085vu0m3giw4cz8","_id":"clpg1hr6o008kvu0m0dk2341x"},{"post_id":"clpg1hr5k0037vu0m6ielaow5","category_id":"clpg1hr59002avu0mh764gd23","_id":"clpg1hr6o008mvu0m1meue5k8"},{"post_id":"clpg1hr5k0037vu0m6ielaow5","category_id":"clpg1hr6m0085vu0m3giw4cz8","_id":"clpg1hr6o008pvu0m5rr9ggth"},{"post_id":"clpg1hr5l003avu0mdlyj6m5g","category_id":"clpg1hr59002avu0mh764gd23","_id":"clpg1hr6p008rvu0m0rrabzt8"},{"post_id":"clpg1hr5l003avu0mdlyj6m5g","category_id":"clpg1hr6m0085vu0m3giw4cz8","_id":"clpg1hr6q008tvu0mgdrk1dta"},{"post_id":"clpg1hr5l003dvu0m3wjmfbqq","category_id":"clpg1hr59002avu0mh764gd23","_id":"clpg1hr6r008wvu0m1fsh3nmx"},{"post_id":"clpg1hr5l003dvu0m3wjmfbqq","category_id":"clpg1hr6m0085vu0m3giw4cz8","_id":"clpg1hr6r008yvu0m28u4cdb5"},{"post_id":"clpg1hr4y001dvu0mf5795tvg","category_id":"clpg1hr59002avu0mh764gd23","_id":"clpg1hr6r0090vu0mgxpk07qa"},{"post_id":"clpg1hr4y001dvu0mf5795tvg","category_id":"clpg1hr6e006lvu0m0ek03tcx","_id":"clpg1hr6s0092vu0m3sl89258"},{"post_id":"clpg1hr5m003gvu0mc3i83lzh","category_id":"clpg1hr59002avu0mh764gd23","_id":"clpg1hr6s0095vu0m76ni6k02"},{"post_id":"clpg1hr5m003gvu0mc3i83lzh","category_id":"clpg1hr6r008vvu0mczjx0x5u","_id":"clpg1hr6s0098vu0mbfn8glfc"},{"post_id":"clpg1hr5n003jvu0m6snifm93","category_id":"clpg1hr59002avu0mh764gd23","_id":"clpg1hr6t009bvu0mfzb2eq9c"},{"post_id":"clpg1hr5n003jvu0m6snifm93","category_id":"clpg1hr6r008vvu0mczjx0x5u","_id":"clpg1hr6t009cvu0m6z4j8zc8"},{"post_id":"clpg1hr4y001gvu0m2udgbsi6","category_id":"clpg1hr59002avu0mh764gd23","_id":"clpg1hr6t009fvu0m9pyi5mhe"},{"post_id":"clpg1hr4y001gvu0m2udgbsi6","category_id":"clpg1hr6e006hvu0magsv779s","_id":"clpg1hr6t009gvu0m00480fq1"},{"post_id":"clpg1hr5o003nvu0m5xf946uu","category_id":"clpg1hr59002avu0mh764gd23","_id":"clpg1hr6u009kvu0mcwyce1my"},{"post_id":"clpg1hr5o003nvu0m5xf946uu","category_id":"clpg1hr6s0099vu0m4wrseoop","_id":"clpg1hr6u009mvu0m4hvs53b9"},{"post_id":"clpg1hr5p003qvu0mdtw2065f","category_id":"clpg1hr59002avu0mh764gd23","_id":"clpg1hr6v009pvu0m8ukm4k98"},{"post_id":"clpg1hr5p003qvu0mdtw2065f","category_id":"clpg1hr6s0099vu0m4wrseoop","_id":"clpg1hr6v009qvu0m9mpncveh"},{"post_id":"clpg1hr5r003svu0mhg49c76n","category_id":"clpg1hr59002avu0mh764gd23","_id":"clpg1hr6v009uvu0mdiwtbb59"},{"post_id":"clpg1hr5r003svu0mhg49c76n","category_id":"clpg1hr6t009ivu0mg8s40aoo","_id":"clpg1hr6v009wvu0m8twq58w7"},{"post_id":"clpg1hr5s003vvu0m5ndi3o35","category_id":"clpg1hr59002avu0mh764gd23","_id":"clpg1hr6w009zvu0m7kih7jph"},{"post_id":"clpg1hr5s003vvu0m5ndi3o35","category_id":"clpg1hr6t009ivu0mg8s40aoo","_id":"clpg1hr6w00a0vu0m4txnes91"},{"post_id":"clpg1hr4z001jvu0m6eeba7lf","category_id":"clpg1hr59002avu0mh764gd23","_id":"clpg1hr6w00a3vu0m3l5a60a3"},{"post_id":"clpg1hr4z001jvu0m6eeba7lf","category_id":"clpg1hr6e006hvu0magsv779s","_id":"clpg1hr6x00a5vu0m0rktd2us"},{"post_id":"clpg1hr5t003yvu0mc32carb8","category_id":"clpg1hr59002avu0mh764gd23","_id":"clpg1hr6x00a9vu0mg6s421ff"},{"post_id":"clpg1hr5t003yvu0mc32carb8","category_id":"clpg1hr6t009ivu0mg8s40aoo","_id":"clpg1hr6x00abvu0m63g38tms"},{"post_id":"clpg1hr5u0041vu0majugf7f6","category_id":"clpg1hr59002avu0mh764gd23","_id":"clpg1hr6y00aevu0mfibkdy6y"},{"post_id":"clpg1hr5u0041vu0majugf7f6","category_id":"clpg1hr6t009ivu0mg8s40aoo","_id":"clpg1hr6y00afvu0mccoi7llt"},{"post_id":"clpg1hr50001lvu0m8k2y3111","category_id":"clpg1hr59002avu0mh764gd23","_id":"clpg1hr6z00aivu0m15znc035"},{"post_id":"clpg1hr50001lvu0m8k2y3111","category_id":"clpg1hr6e006hvu0magsv779s","_id":"clpg1hr6z00akvu0m2ilpfq7f"},{"post_id":"clpg1hr5v0044vu0m79tufo5a","category_id":"clpg1hr59002avu0mh764gd23","_id":"clpg1hr7000aovu0m7hbrf72l"},{"post_id":"clpg1hr5v0044vu0m79tufo5a","category_id":"clpg1hr6t009ivu0mg8s40aoo","_id":"clpg1hr7000apvu0mca2cfnxi"},{"post_id":"clpg1hr5w0048vu0m3k7ccexp","category_id":"clpg1hr59002avu0mh764gd23","_id":"clpg1hr7000asvu0m8rrhb635"},{"post_id":"clpg1hr5w0048vu0m3k7ccexp","category_id":"clpg1hr6t009ivu0mg8s40aoo","_id":"clpg1hr7000atvu0mbwiu8kdt"},{"post_id":"clpg1hr5w004avu0m7nn811f4","category_id":"clpg1hr59002avu0mh764gd23","_id":"clpg1hr7100avvu0m1w6h71f6"},{"post_id":"clpg1hr5w004avu0m7nn811f4","category_id":"clpg1hr6t009ivu0mg8s40aoo","_id":"clpg1hr7100ayvu0m6cc337ib"},{"post_id":"clpg1hr5x004dvu0m3a0qa5m4","category_id":"clpg1hr59002avu0mh764gd23","_id":"clpg1hr7100b2vu0m747b1hz4"},{"post_id":"clpg1hr5x004dvu0m3a0qa5m4","category_id":"clpg1hr7000aqvu0m17hocjwi","_id":"clpg1hr7100b4vu0m6tpacfiu"},{"post_id":"clpg1hr51001mvu0mb4peg0go","category_id":"clpg1hr59002avu0mh764gd23","_id":"clpg1hr7200b6vu0m2046g7a7"},{"post_id":"clpg1hr51001mvu0mb4peg0go","category_id":"clpg1hr6e006hvu0magsv779s","_id":"clpg1hr7200b9vu0m9efbccan"},{"post_id":"clpg1hr51001qvu0mc40mam8x","category_id":"clpg1hr59002avu0mh764gd23","_id":"clpg1hr7400bivu0mgrv6frgc"},{"post_id":"clpg1hr51001qvu0mc40mam8x","category_id":"clpg1hr6e006hvu0magsv779s","_id":"clpg1hr7400bkvu0m4tbxgwzb"},{"post_id":"clpg1hr52001svu0m4y2ba39n","category_id":"clpg1hr59002avu0mh764gd23","_id":"clpg1hr7700byvu0m6g4q9374"},{"post_id":"clpg1hr52001svu0m4y2ba39n","category_id":"clpg1hr6e006hvu0magsv779s","_id":"clpg1hr7700bzvu0m87x89gj5"},{"post_id":"clpg1hr53001vvu0m424hdcjr","category_id":"clpg1hr59002avu0mh764gd23","_id":"clpg1hr7900c9vu0mappj10rj"},{"post_id":"clpg1hr53001vvu0m424hdcjr","category_id":"clpg1hr6e006hvu0magsv779s","_id":"clpg1hr7900cavu0m81776s9x"},{"post_id":"clpg1hr54001wvu0m108k1nd5","category_id":"clpg1hr59002avu0mh764gd23","_id":"clpg1hr7a00chvu0m86u0h5al"},{"post_id":"clpg1hr54001wvu0m108k1nd5","category_id":"clpg1hr6e006hvu0magsv779s","_id":"clpg1hr7a00civu0mcv0fflq4"},{"post_id":"clpg1hr54001zvu0mg0efa5ry","category_id":"clpg1hr59002avu0mh764gd23","_id":"clpg1hr7a00ckvu0meu59cejb"},{"post_id":"clpg1hr54001zvu0mg0efa5ry","category_id":"clpg1hr6e006hvu0magsv779s","_id":"clpg1hr7b00cmvu0m5g705sp5"},{"post_id":"clpg1hr550020vu0mbxpteyut","category_id":"clpg1hr59002avu0mh764gd23","_id":"clpg1hr7b00covu0m07nba0pq"},{"post_id":"clpg1hr550020vu0mbxpteyut","category_id":"clpg1hr6e006hvu0magsv779s","_id":"clpg1hr7b00cqvu0m4fxr1k81"},{"post_id":"clpg1hr560023vu0m4ho2c7xr","category_id":"clpg1hr59002avu0mh764gd23","_id":"clpg1hr7c00csvu0m0qsx36nm"},{"post_id":"clpg1hr560023vu0m4ho2c7xr","category_id":"clpg1hr6e006hvu0magsv779s","_id":"clpg1hr7c00cuvu0m22u3hj7f"},{"post_id":"clpg1hr570024vu0mdnmg5nnl","category_id":"clpg1hr59002avu0mh764gd23","_id":"clpg1hr7d00cxvu0mgvo0h7hu"},{"post_id":"clpg1hr570024vu0mdnmg5nnl","category_id":"clpg1hr6e006hvu0magsv779s","_id":"clpg1hr7d00d0vu0m9suh9fya"},{"post_id":"clpg1hr570025vu0m9vdb6g7o","category_id":"clpg1hr59002avu0mh764gd23","_id":"clpg1hr7d00d3vu0m6iwif7k8"},{"post_id":"clpg1hr570025vu0m9vdb6g7o","category_id":"clpg1hr6e006hvu0magsv779s","_id":"clpg1hr7d00d5vu0m2xmkh41p"},{"post_id":"clpg1hr580028vu0m3qy2dn7a","category_id":"clpg1hr59002avu0mh764gd23","_id":"clpg1hr7e00d9vu0m9phh7pb8"},{"post_id":"clpg1hr580028vu0m3qy2dn7a","category_id":"clpg1hr6e006hvu0magsv779s","_id":"clpg1hr7e00dbvu0macv4725n"},{"post_id":"clpg1hr590029vu0mezbe3ds7","category_id":"clpg1hr59002avu0mh764gd23","_id":"clpg1hr7e00devu0m0p1q950p"},{"post_id":"clpg1hr590029vu0mezbe3ds7","category_id":"clpg1hr6e006hvu0magsv779s","_id":"clpg1hr7f00dgvu0mazcabcrh"},{"post_id":"clpg1hr5y004fvu0mev1iar87","category_id":"clpg1hr7100azvu0m25tg36ah","_id":"clpg1hr7f00djvu0ma35od9yx"},{"post_id":"clpg1hr5y004fvu0mev1iar87","category_id":"clpg1hr7e00d7vu0m6c517534","_id":"clpg1hr7f00dkvu0mhf0ybvjt"},{"post_id":"clpg1hr5z004ivu0mfrha6z9h","category_id":"clpg1hr7100azvu0m25tg36ah","_id":"clpg1hr7f00dnvu0m4ak0e60k"},{"post_id":"clpg1hr5z004ivu0mfrha6z9h","category_id":"clpg1hr7e00d7vu0m6c517534","_id":"clpg1hr7g00dpvu0m4igx5qc1"},{"post_id":"clpg1hr5z004lvu0mewbp7b9y","category_id":"clpg1hr7100azvu0m25tg36ah","_id":"clpg1hr7g00dtvu0m2b7d8gvv"},{"post_id":"clpg1hr5z004lvu0mewbp7b9y","category_id":"clpg1hr7f00dhvu0mbdny3r35","_id":"clpg1hr7g00dvvu0m06c21ug9"},{"post_id":"clpg1hr60004pvu0m3faud4gp","category_id":"clpg1hr7100azvu0m25tg36ah","_id":"clpg1hr7h00dyvu0m25e085kt"},{"post_id":"clpg1hr60004pvu0m3faud4gp","category_id":"clpg1hr7f00dhvu0mbdny3r35","_id":"clpg1hr7h00e0vu0m2i6z32c0"},{"post_id":"clpg1hr61004qvu0mgoot96fr","category_id":"clpg1hr7100azvu0m25tg36ah","_id":"clpg1hr7h00e2vu0mh9p99ckt"},{"post_id":"clpg1hr61004qvu0mgoot96fr","category_id":"clpg1hr7f00dhvu0mbdny3r35","_id":"clpg1hr7h00e5vu0mhgdmg8g7"},{"post_id":"clpg1hr62004uvu0m9rlhcbqf","category_id":"clpg1hr7100azvu0m25tg36ah","_id":"clpg1hr7i00e7vu0m24o39ayk"},{"post_id":"clpg1hr62004uvu0m9rlhcbqf","category_id":"clpg1hr7g00dwvu0m2bww41tp","_id":"clpg1hr7i00eavu0mcdzn718c"},{"post_id":"clpg1hr62004vvu0m1tjhh42x","category_id":"clpg1hr7100azvu0m25tg36ah","_id":"clpg1hr7j00ecvu0mejpq263g"},{"post_id":"clpg1hr62004vvu0m1tjhh42x","category_id":"clpg1hr7g00dwvu0m2bww41tp","_id":"clpg1hr7j00eevu0m1l2v28hk"},{"post_id":"clpg1hr63004yvu0metw29tlj","category_id":"clpg1hr7100azvu0m25tg36ah","_id":"clpg1hr7l00egvu0mfenaci0u"},{"post_id":"clpg1hr63004yvu0metw29tlj","category_id":"clpg1hr7h00e6vu0m4n98fjcq","_id":"clpg1hr7l00eivu0med0zhhp8"},{"post_id":"clpg1hr650055vu0m5xr1cmau","category_id":"clpg1hr7100azvu0m25tg36ah","_id":"clpg1hr7l00ejvu0m0q07eo9p"},{"post_id":"clpg1hr650055vu0m5xr1cmau","category_id":"clpg1hr7h00e6vu0m4n98fjcq","_id":"clpg1hr7m00elvu0m5jzebusw"},{"post_id":"clpg1hr7s00f9vu0mcfr3boem","category_id":"clpg1hr7100azvu0m25tg36ah","_id":"clpg1hr7v00fjvu0m80jeag4o"},{"post_id":"clpg1hr7s00f9vu0mcfr3boem","category_id":"clpg1hr7u00fdvu0mhnzx94uf","_id":"clpg1hr7w00fkvu0melpn3i8q"},{"post_id":"clpg1hr7t00favu0mchwr68dj","category_id":"clpg1hr7100azvu0m25tg36ah","_id":"clpg1hr7w00fmvu0mh6e65c43"},{"post_id":"clpg1hr7t00favu0mchwr68dj","category_id":"clpg1hr7u00fdvu0mhnzx94uf","_id":"clpg1hr7w00fovu0mcnmca4vi"},{"post_id":"clpg1hr7u00fcvu0m97h0da1h","category_id":"clpg1hr7100azvu0m25tg36ah","_id":"clpg1hr7w00frvu0mb5ow3d5e"},{"post_id":"clpg1hr7u00fcvu0m97h0da1h","category_id":"clpg1hr7u00fdvu0mhnzx94uf","_id":"clpg1hr7w00fsvu0m41g15vbr"}],"PostTag":[{"post_id":"clpg1hr4d0003vu0ma3uc2p00","tag_id":"clpg1hr4f0006vu0md6jpgat0","_id":"clpg1hr4p000pvu0m8dg3adcr"},{"post_id":"clpg1hr4d0003vu0ma3uc2p00","tag_id":"clpg1hr4j000cvu0meiw2h4wi","_id":"clpg1hr4q000rvu0m38zxdd4r"},{"post_id":"clpg1hr4d0003vu0ma3uc2p00","tag_id":"clpg1hr4l000gvu0mc2ag6hcb","_id":"clpg1hr4r000wvu0mfjmx2gb9"},{"post_id":"clpg1hr4f0005vu0mbtmr9pf9","tag_id":"clpg1hr4o000mvu0m7cr707vm","_id":"clpg1hr4t0012vu0m5otj7mmw"},{"post_id":"clpg1hr4f0005vu0mbtmr9pf9","tag_id":"clpg1hr4q000tvu0m0vty1dry","_id":"clpg1hr4t0015vu0m70uw80l9"},{"post_id":"clpg1hr4g0008vu0m968q2pl0","tag_id":"clpg1hr4s0010vu0mbxxw4qyb","_id":"clpg1hr4y001evu0m71y5apng"},{"post_id":"clpg1hr4g0008vu0m968q2pl0","tag_id":"clpg1hr4w0018vu0m10np4h21","_id":"clpg1hr4z001hvu0m7z8h0kxn"},{"post_id":"clpg1hr4i000avu0m58zqcqrt","tag_id":"clpg1hr4x001cvu0m7o9jao7r","_id":"clpg1hr51001pvu0mh8xxcfof"},{"post_id":"clpg1hr4i000avu0m58zqcqrt","tag_id":"clpg1hr4z001ivu0m5gbi75dc","_id":"clpg1hr52001rvu0m34jqfg43"},{"post_id":"clpg1hr4i000bvu0m8m2beqjc","tag_id":"clpg1hr51001nvu0m7nlj1ml9","_id":"clpg1hr5f002pvu0mapgr9lb9"},{"post_id":"clpg1hr4i000bvu0m8m2beqjc","tag_id":"clpg1hr53001tvu0mbmmw201u","_id":"clpg1hr5f002svu0m3zat3h70"},{"post_id":"clpg1hr4i000bvu0m8m2beqjc","tag_id":"clpg1hr54001xvu0mhwh1cavp","_id":"clpg1hr5g002vvu0m6fun13ne"},{"post_id":"clpg1hr4i000bvu0m8m2beqjc","tag_id":"clpg1hr560022vu0m3gpu69zv","_id":"clpg1hr5h002yvu0m47qpe3u7"},{"post_id":"clpg1hr4i000bvu0m8m2beqjc","tag_id":"clpg1hr580027vu0m0ux9416x","_id":"clpg1hr5i0032vu0mdpb421dw"},{"post_id":"clpg1hr4i000bvu0m8m2beqjc","tag_id":"clpg1hr59002bvu0mdotq0o23","_id":"clpg1hr5j0036vu0meg7e95nn"},{"post_id":"clpg1hr4i000bvu0m8m2beqjc","tag_id":"clpg1hr5b002hvu0mdynq4517","_id":"clpg1hr5k0039vu0ma3r41wdk"},{"post_id":"clpg1hr4j000evu0m3pgn47wm","tag_id":"clpg1hr5c002nvu0mb1k18iax","_id":"clpg1hr5l003cvu0mg25f3cui"},{"post_id":"clpg1hr4k000fvu0m48a3dftm","tag_id":"clpg1hr5c002nvu0mb1k18iax","_id":"clpg1hr5m003fvu0m9y2k2a0h"},{"post_id":"clpg1hr4k000fvu0m48a3dftm","tag_id":"clpg1hr5i0030vu0mb9i26fx8","_id":"clpg1hr5n003ivu0mfgoefaau"},{"post_id":"clpg1hr4m000ivu0mhx0b9ys4","tag_id":"clpg1hr5c002nvu0mb1k18iax","_id":"clpg1hr5o003mvu0m52o8ay6i"},{"post_id":"clpg1hr4n000kvu0m36w0am4s","tag_id":"clpg1hr5c002nvu0mb1k18iax","_id":"clpg1hr5s003tvu0mcqmyejbb"},{"post_id":"clpg1hr4n000kvu0m36w0am4s","tag_id":"clpg1hr5o003lvu0mg5971nm4","_id":"clpg1hr5t003wvu0ma6c3exh3"},{"post_id":"clpg1hr4o000nvu0m19d4hlq1","tag_id":"clpg1hr5c002nvu0mb1k18iax","_id":"clpg1hr5t003zvu0mgc37d4jp"},{"post_id":"clpg1hr4p000qvu0m2c6u7jso","tag_id":"clpg1hr5t003xvu0m996ng477","_id":"clpg1hr5v0047vu0mcmkg3vzl"},{"post_id":"clpg1hr4q000uvu0mcii0aqif","tag_id":"clpg1hr5t003xvu0m996ng477","_id":"clpg1hr5x004cvu0m24z72eyo"},{"post_id":"clpg1hr4r000xvu0m85jw55ue","tag_id":"clpg1hr5t003xvu0m996ng477","_id":"clpg1hr5y004hvu0md9vlbmvh"},{"post_id":"clpg1hr4s000zvu0m76dh0oor","tag_id":"clpg1hr5t003xvu0m996ng477","_id":"clpg1hr60004ovu0mds4f3q9z"},{"post_id":"clpg1hr4t0013vu0m4pokclhg","tag_id":"clpg1hr5z004kvu0mdmko2mdg","_id":"clpg1hr62004tvu0m7oueehi7"},{"post_id":"clpg1hr4t0016vu0mgzug16rb","tag_id":"clpg1hr61004rvu0mbrrud5ku","_id":"clpg1hr64004zvu0m05ec9m40"},{"post_id":"clpg1hr640051vu0mcof8g4t9","tag_id":"clpg1hr4f0006vu0md6jpgat0","_id":"clpg1hr650056vu0m3n2ph1pd"},{"post_id":"clpg1hr640051vu0mcof8g4t9","tag_id":"clpg1hr4j000cvu0meiw2h4wi","_id":"clpg1hr660059vu0mgzc670hs"},{"post_id":"clpg1hr640051vu0mcof8g4t9","tag_id":"clpg1hr4l000gvu0mc2ag6hcb","_id":"clpg1hr68005cvu0mcyn77yhe"},{"post_id":"clpg1hr650057vu0m9j9ohsd6","tag_id":"clpg1hr4f0006vu0md6jpgat0","_id":"clpg1hr68005gvu0mbdeo1yi5"},{"post_id":"clpg1hr650057vu0m9j9ohsd6","tag_id":"clpg1hr4j000cvu0meiw2h4wi","_id":"clpg1hr69005jvu0m148m2qj1"},{"post_id":"clpg1hr650057vu0m9j9ohsd6","tag_id":"clpg1hr4l000gvu0mc2ag6hcb","_id":"clpg1hr69005mvu0m9hq9eovg"},{"post_id":"clpg1hr66005bvu0mer7z2bn6","tag_id":"clpg1hr4f0006vu0md6jpgat0","_id":"clpg1hr6a005pvu0m9pvoafgi"},{"post_id":"clpg1hr66005bvu0mer7z2bn6","tag_id":"clpg1hr4j000cvu0meiw2h4wi","_id":"clpg1hr6a005svu0mgwr93m6v"},{"post_id":"clpg1hr66005bvu0mer7z2bn6","tag_id":"clpg1hr4l000gvu0mc2ag6hcb","_id":"clpg1hr6a005vvu0maggvdnof"},{"post_id":"clpg1hr68005dvu0mgde38x67","tag_id":"clpg1hr4f0006vu0md6jpgat0","_id":"clpg1hr6b005xvu0mf5pm1q3f"},{"post_id":"clpg1hr68005dvu0mgde38x67","tag_id":"clpg1hr4j000cvu0meiw2h4wi","_id":"clpg1hr6b005zvu0m29nk8ame"},{"post_id":"clpg1hr68005dvu0mgde38x67","tag_id":"clpg1hr4l000gvu0mc2ag6hcb","_id":"clpg1hr6c0063vu0m20ga70ug"},{"post_id":"clpg1hr4w0019vu0mbl3k7ofx","tag_id":"clpg1hr63004wvu0m6a4ae1cr","_id":"clpg1hr6c0064vu0m53950m4q"},{"post_id":"clpg1hr4w0019vu0mbl3k7ofx","tag_id":"clpg1hr640054vu0m5yccar14","_id":"clpg1hr6c0067vu0m23tfbolq"},{"post_id":"clpg1hr4w0019vu0mbl3k7ofx","tag_id":"clpg1hr66005avu0m0p9hhnol","_id":"clpg1hr6c0068vu0m8u5tgm5b"},{"post_id":"clpg1hr4w0019vu0mbl3k7ofx","tag_id":"clpg1hr69005hvu0mh25wcqr7","_id":"clpg1hr6d006bvu0m8c5yfe6q"},{"post_id":"clpg1hr4w0019vu0mbl3k7ofx","tag_id":"clpg1hr69005ovu0mbd7d80cn","_id":"clpg1hr6d006cvu0m8w062zcr"},{"post_id":"clpg1hr4x001bvu0m2gyc24dw","tag_id":"clpg1hr6a005uvu0m6h4z4u3g","_id":"clpg1hr6d006fvu0mdt4m467d"},{"post_id":"clpg1hr4x001bvu0m2gyc24dw","tag_id":"clpg1hr6b0060vu0ma4kk782o","_id":"clpg1hr6e006gvu0m723u3uul"},{"post_id":"clpg1hr4y001dvu0mf5795tvg","tag_id":"clpg1hr6c0065vu0m4snf37q2","_id":"clpg1hr6e006ivu0m76trhk2a"},{"post_id":"clpg1hr4y001gvu0m2udgbsi6","tag_id":"clpg1hr6c0069vu0m1eoe85qy","_id":"clpg1hr6e006kvu0mfose3f1g"},{"post_id":"clpg1hr4z001jvu0m6eeba7lf","tag_id":"clpg1hr6d006evu0mh8bx915u","_id":"clpg1hr6f006nvu0mfya12jog"},{"post_id":"clpg1hr4z001jvu0m6eeba7lf","tag_id":"clpg1hr6e006jvu0mezqx999d","_id":"clpg1hr6f006ovu0mbgob8dn9"},{"post_id":"clpg1hr50001lvu0m8k2y3111","tag_id":"clpg1hr6f006mvu0mcxca96gy","_id":"clpg1hr6g006wvu0m83k7gzwe"},{"post_id":"clpg1hr50001lvu0m8k2y3111","tag_id":"clpg1hr6f006qvu0m86el1ejg","_id":"clpg1hr6g006zvu0mazzd9xfm"},{"post_id":"clpg1hr51001mvu0mb4peg0go","tag_id":"clpg1hr6g006uvu0m2g8w4w9l","_id":"clpg1hr6h0076vu0mfloi9dtn"},{"post_id":"clpg1hr51001mvu0mb4peg0go","tag_id":"clpg1hr6g0071vu0m5mmagjzt","_id":"clpg1hr6i0079vu0mggq6f54q"},{"post_id":"clpg1hr51001qvu0mc40mam8x","tag_id":"clpg1hr6h0075vu0mgtrm2mz4","_id":"clpg1hr6i007dvu0mgdmycck9"},{"post_id":"clpg1hr52001svu0m4y2ba39n","tag_id":"clpg1hr6i007bvu0mfg47fhub","_id":"clpg1hr6k007nvu0m34kx46dj"},{"post_id":"clpg1hr52001svu0m4y2ba39n","tag_id":"clpg1hr6j007gvu0me7o36xww","_id":"clpg1hr6k007pvu0mbej93zjh"},{"post_id":"clpg1hr53001vvu0m424hdcjr","tag_id":"clpg1hr6j007kvu0md77jftk6","_id":"clpg1hr6l007tvu0m5prj1075"},{"post_id":"clpg1hr54001wvu0m108k1nd5","tag_id":"clpg1hr6k007rvu0m3wlhawuh","_id":"clpg1hr6l007zvu0m1aiubzml"},{"post_id":"clpg1hr54001zvu0mg0efa5ry","tag_id":"clpg1hr6l007wvu0m8i9c3gdl","_id":"clpg1hr6n0088vu0mhlfvduy4"},{"post_id":"clpg1hr54001zvu0mg0efa5ry","tag_id":"clpg1hr6m0082vu0m2gjwauwo","_id":"clpg1hr6n008avu0me22gc0ek"},{"post_id":"clpg1hr550020vu0mbxpteyut","tag_id":"clpg1hr6m0086vu0m3ibk2157","_id":"clpg1hr6n008evu0mgtbzh197"},{"post_id":"clpg1hr560023vu0m4ho2c7xr","tag_id":"clpg1hr6n008cvu0m28ncbtma","_id":"clpg1hr6o008jvu0mh25mht87"},{"post_id":"clpg1hr570024vu0mdnmg5nnl","tag_id":"clpg1hr6o008hvu0m3pxh52ws","_id":"clpg1hr6o008ovu0m73te4avv"},{"post_id":"clpg1hr570025vu0m9vdb6g7o","tag_id":"clpg1hr6o008nvu0m5dvfabv1","_id":"clpg1hr6q008uvu0m9fjlglpo"},{"post_id":"clpg1hr580028vu0m3qy2dn7a","tag_id":"clpg1hr6p008svu0m19lg7axw","_id":"clpg1hr6s0094vu0m8tbl2fzq"},{"post_id":"clpg1hr580028vu0m3qy2dn7a","tag_id":"clpg1hr6r008xvu0m1ljz73f8","_id":"clpg1hr6s0096vu0mef173mai"},{"post_id":"clpg1hr590029vu0mezbe3ds7","tag_id":"clpg1hr6r0091vu0m37i22me4","_id":"clpg1hr6t009avu0m8rvegrbc"},{"post_id":"clpg1hr59002dvu0m2rtf0lkk","tag_id":"clpg1hr6s0097vu0m2be4bx9s","_id":"clpg1hr6u009jvu0m4z8ygkbn"},{"post_id":"clpg1hr59002dvu0m2rtf0lkk","tag_id":"clpg1hr6t009dvu0mch43hvoj","_id":"clpg1hr6u009lvu0mcbo188py"},{"post_id":"clpg1hr5a002fvu0mg7z02t30","tag_id":"clpg1hr6s0097vu0m2be4bx9s","_id":"clpg1hr6v009tvu0mfhl75thi"},{"post_id":"clpg1hr5a002fvu0mg7z02t30","tag_id":"clpg1hr6t009dvu0mch43hvoj","_id":"clpg1hr6v009vvu0mhszp85x0"},{"post_id":"clpg1hr5b002ivu0m68376b5q","tag_id":"clpg1hr6v009rvu0mboxdgo4r","_id":"clpg1hr6w00a4vu0mgu4o11zp"},{"post_id":"clpg1hr5b002ivu0m68376b5q","tag_id":"clpg1hr6v009xvu0m148d5p67","_id":"clpg1hr6x00a6vu0md3p81fr2"},{"post_id":"clpg1hr5c002kvu0m6mqz2rjh","tag_id":"clpg1hr6v009rvu0mboxdgo4r","_id":"clpg1hr6x00aavu0mdkmjfxy8"},{"post_id":"clpg1hr5e002ovu0m38hcd7wd","tag_id":"clpg1hr6v009rvu0mboxdgo4r","_id":"clpg1hr6z00ajvu0mciijey9f"},{"post_id":"clpg1hr5e002ovu0m38hcd7wd","tag_id":"clpg1hr6x00advu0m6l71c26l","_id":"clpg1hr6z00amvu0m39k10ygv"},{"post_id":"clpg1hr5f002qvu0m22bfh7hx","tag_id":"clpg1hr6v009rvu0mboxdgo4r","_id":"clpg1hr7100axvu0mfadu7p2z"},{"post_id":"clpg1hr5f002qvu0m22bfh7hx","tag_id":"clpg1hr6z00anvu0m3i681s5g","_id":"clpg1hr7100b0vu0m537b3udn"},{"post_id":"clpg1hr5f002qvu0m22bfh7hx","tag_id":"clpg1hr7000arvu0m8uzr4qlv","_id":"clpg1hr7100b3vu0mco3g2cal"},{"post_id":"clpg1hr5g002tvu0mbpnc80ut","tag_id":"clpg1hr6v009rvu0mboxdgo4r","_id":"clpg1hr7200b8vu0m2taa8amd"},{"post_id":"clpg1hr5g002tvu0mbpnc80ut","tag_id":"clpg1hr7100b1vu0m0j2ee4y3","_id":"clpg1hr7200bbvu0m4mdi08o9"},{"post_id":"clpg1hr5h002wvu0mbh5f9ktt","tag_id":"clpg1hr7200b7vu0m2oea7lo0","_id":"clpg1hr7300bdvu0m1dd72d3f"},{"post_id":"clpg1hr5h002zvu0m6uaj26b2","tag_id":"clpg1hr7200bcvu0m252fe9uc","_id":"clpg1hr7300bgvu0m6w7ad3zf"},{"post_id":"clpg1hr5i0033vu0mgrb14hn4","tag_id":"clpg1hr7300bfvu0m86i615hl","_id":"clpg1hr7400bmvu0m0uocb721"},{"post_id":"clpg1hr5k0037vu0m6ielaow5","tag_id":"clpg1hr7300bfvu0m86i615hl","_id":"clpg1hr7500brvu0mc0jjcr5p"},{"post_id":"clpg1hr5k0037vu0m6ielaow5","tag_id":"clpg1hr7400bnvu0mdqnxc1hy","_id":"clpg1hr7500bsvu0m9v4kfnsl"},{"post_id":"clpg1hr5l003avu0mdlyj6m5g","tag_id":"clpg1hr7300bfvu0m86i615hl","_id":"clpg1hr7600bvvu0mcwqqgf2a"},{"post_id":"clpg1hr5l003dvu0m3wjmfbqq","tag_id":"clpg1hr7300bfvu0m86i615hl","_id":"clpg1hr7700c2vu0m267r2t5f"},{"post_id":"clpg1hr5l003dvu0m3wjmfbqq","tag_id":"clpg1hr7600bwvu0m8r6ub60p","_id":"clpg1hr7700c3vu0mbyoofwso"},{"post_id":"clpg1hr5m003gvu0mc3i83lzh","tag_id":"clpg1hr7700c0vu0mhid53c1f","_id":"clpg1hr7800c6vu0m4n3s838k"},{"post_id":"clpg1hr5n003jvu0m6snifm93","tag_id":"clpg1hr7700c0vu0mhid53c1f","_id":"clpg1hr7900cdvu0mbpj35nsc"},{"post_id":"clpg1hr5n003jvu0m6snifm93","tag_id":"clpg1hr7800c8vu0mdwyw6tzw","_id":"clpg1hr7900cfvu0mcwi68wsw"},{"post_id":"clpg1hr5o003nvu0m5xf946uu","tag_id":"clpg1hr7900ccvu0m9ivs0yj3","_id":"clpg1hr7c00cwvu0m10pv7k9b"},{"post_id":"clpg1hr5o003nvu0m5xf946uu","tag_id":"clpg1hr7a00cgvu0m195p182x","_id":"clpg1hr7d00cyvu0m8urvca3l"},{"post_id":"clpg1hr5o003nvu0m5xf946uu","tag_id":"clpg1hr7a00clvu0m1khhfbg3","_id":"clpg1hr7d00d2vu0m06jhfukp"},{"post_id":"clpg1hr5o003nvu0m5xf946uu","tag_id":"clpg1hr7b00cpvu0m3ih9gm79","_id":"clpg1hr7d00d4vu0m69jabw60"},{"post_id":"clpg1hr5p003qvu0mdtw2065f","tag_id":"clpg1hr7c00ctvu0m8ulj4p1v","_id":"clpg1hr7e00d8vu0m515lhb6s"},{"post_id":"clpg1hr5p003qvu0mdtw2065f","tag_id":"clpg1hr7d00czvu0m2zc3hlgl","_id":"clpg1hr7e00davu0mb4nw8pqj"},{"post_id":"clpg1hr5r003svu0mhg49c76n","tag_id":"clpg1hr7d00d6vu0mcqgode3w","_id":"clpg1hr7e00dfvu0mhpkh5imf"},{"post_id":"clpg1hr5s003vvu0m5ndi3o35","tag_id":"clpg1hr7e00dcvu0mg59a1bn0","_id":"clpg1hr7f00dovu0m6h19aqm6"},{"post_id":"clpg1hr5s003vvu0m5ndi3o35","tag_id":"clpg1hr7f00divu0m5jav5q9h","_id":"clpg1hr7g00dqvu0m3jzz4twg"},{"post_id":"clpg1hr5t003yvu0mc32carb8","tag_id":"clpg1hr7f00dmvu0m59x63h3g","_id":"clpg1hr7g00duvu0mb0lu4ta7"},{"post_id":"clpg1hr5u0041vu0majugf7f6","tag_id":"clpg1hr7g00dsvu0mholj1v8c","_id":"clpg1hr7h00dzvu0m01ys9swa"},{"post_id":"clpg1hr5v0044vu0m79tufo5a","tag_id":"clpg1hr7h00dxvu0mbqzkfpfy","_id":"clpg1hr7h00e4vu0mhl5pgbz4"},{"post_id":"clpg1hr5w0048vu0m3k7ccexp","tag_id":"clpg1hr7h00e3vu0mbwe39mxp","_id":"clpg1hr7i00e9vu0mew1y7ep7"},{"post_id":"clpg1hr5w004avu0m7nn811f4","tag_id":"clpg1hr7i00e8vu0mbkdzcbac","_id":"clpg1hr7j00efvu0m0kn821r5"},{"post_id":"clpg1hr5x004dvu0m3a0qa5m4","tag_id":"clpg1hr7j00edvu0mcmzlfb2w","_id":"clpg1hr7m00emvu0mcle87w3k"},{"post_id":"clpg1hr5x004dvu0m3a0qa5m4","tag_id":"clpg1hr7l00ehvu0mfq1f26dl","_id":"clpg1hr7m00envu0m90ch9bbq"},{"post_id":"clpg1hr5y004fvu0mev1iar87","tag_id":"clpg1hr7l00ekvu0m2e4m05yk","_id":"clpg1hr7m00epvu0m4tbr70ul"},{"post_id":"clpg1hr5z004ivu0mfrha6z9h","tag_id":"clpg1hr7l00ekvu0m2e4m05yk","_id":"clpg1hr7m00ervu0m4nwih6y1"},{"post_id":"clpg1hr5z004lvu0mewbp7b9y","tag_id":"clpg1hr7m00eqvu0mefi083nk","_id":"clpg1hr7n00euvu0m66qi3ga6"},{"post_id":"clpg1hr5z004lvu0mewbp7b9y","tag_id":"clpg1hr7m00esvu0m0cky9vxc","_id":"clpg1hr7n00evvu0m4mvch8f6"},{"post_id":"clpg1hr60004pvu0m3faud4gp","tag_id":"clpg1hr7n00etvu0mbz4nbq79","_id":"clpg1hr7n00exvu0mfqbg0dxo"},{"post_id":"clpg1hr61004qvu0mgoot96fr","tag_id":"clpg1hr7n00ewvu0mb4ct8tlj","_id":"clpg1hr7n00ezvu0mbbzqahiy"},{"post_id":"clpg1hr62004uvu0m9rlhcbqf","tag_id":"clpg1hr7n00eyvu0m5nv5ecry","_id":"clpg1hr7n00f1vu0m7u4a49fu"},{"post_id":"clpg1hr62004vvu0m1tjhh42x","tag_id":"clpg1hr7n00f0vu0mclxoh3df","_id":"clpg1hr7o00f3vu0mgopv2zia"},{"post_id":"clpg1hr63004yvu0metw29tlj","tag_id":"clpg1hr7n00f2vu0m22ccep2k","_id":"clpg1hr7o00f6vu0m3p402jk3"},{"post_id":"clpg1hr63004yvu0metw29tlj","tag_id":"clpg1hr7o00f4vu0mabsa4ypq","_id":"clpg1hr7o00f7vu0m6zui69j7"},{"post_id":"clpg1hr650055vu0m5xr1cmau","tag_id":"clpg1hr7o00f5vu0ma4y30ymy","_id":"clpg1hr7o00f8vu0m4c6geu9m"},{"post_id":"clpg1hr7s00f9vu0mcfr3boem","tag_id":"clpg1hr7u00fbvu0m6sxd1gx2","_id":"clpg1hr7v00fgvu0mbofh6mp0"},{"post_id":"clpg1hr7t00favu0mchwr68dj","tag_id":"clpg1hr7u00fevu0mgizgh9us","_id":"clpg1hr7w00fnvu0m6ui2ekw0"},{"post_id":"clpg1hr7t00favu0mchwr68dj","tag_id":"clpg1hr7v00fhvu0m9owc7o4i","_id":"clpg1hr7w00fpvu0m847nhnvh"},{"post_id":"clpg1hr7u00fcvu0m97h0da1h","tag_id":"clpg1hr7w00flvu0mhnfg30r8","_id":"clpg1hr7x00fuvu0m99idgtcn"},{"post_id":"clpg1hr7u00fcvu0m97h0da1h","tag_id":"clpg1hr7w00fqvu0mdb9y047e","_id":"clpg1hr7x00fvvu0m4qf62s29"},{"post_id":"clpg1hr7u00fcvu0m97h0da1h","tag_id":"clpg1hr7w00ftvu0m6d5p1rsy","_id":"clpg1hr7x00fwvu0mboe65hbk"}],"Tag":[{"name":"hexo","_id":"clpg1hr4f0006vu0md6jpgat0"},{"name":"configuration","_id":"clpg1hr4j000cvu0meiw2h4wi"},{"name":"tool","_id":"clpg1hr4l000gvu0mc2ag6hcb"},{"name":"SwiftUI","_id":"clpg1hr4o000mvu0m7cr707vm"},{"name":"UIKit","_id":"clpg1hr4q000tvu0m0vty1dry"},{"name":"ContentView","_id":"clpg1hr4s0010vu0mbxxw4qyb"},{"name":"View","_id":"clpg1hr4w0018vu0m10np4h21"},{"name":"Never","_id":"clpg1hr4x001cvu0m7o9jao7r"},{"name":"Body","_id":"clpg1hr4z001ivu0m5gbi75dc"},{"name":"State","_id":"clpg1hr51001nvu0m7nlj1ml9"},{"name":"binding","_id":"clpg1hr53001tvu0mbmmw201u"},{"name":"ObservableObject","_id":"clpg1hr54001xvu0mhwh1cavp"},{"name":"StateObject","_id":"clpg1hr560022vu0m3gpu69zv"},{"name":"EnvironmentObject","_id":"clpg1hr580027vu0m0ux9416x"},{"name":"FocusState","_id":"clpg1hr59002bvu0mdotq0o23"},{"name":"AppStorage","_id":"clpg1hr5b002hvu0mdynq4517"},{"name":"RxSwift","_id":"clpg1hr5c002nvu0mb1k18iax"},{"name":"ReactiveCocoa","_id":"clpg1hr5i0030vu0mb9i26fx8"},{"name":"Subjects","_id":"clpg1hr5o003lvu0mg5971nm4"},{"name":"Combine","_id":"clpg1hr5t003xvu0m996ng477"},{"name":"Copy-on-Write","_id":"clpg1hr5z004kvu0mdmko2mdg"},{"name":"try? and try!","_id":"clpg1hr61004rvu0mbrrud5ku"},{"name":"open","_id":"clpg1hr63004wvu0m6a4ae1cr"},{"name":"public","_id":"clpg1hr640054vu0m5yccar14"},{"name":"internal","_id":"clpg1hr66005avu0m0p9hhnol"},{"name":"fileprivate","_id":"clpg1hr69005hvu0mh25wcqr7"},{"name":"private","_id":"clpg1hr69005ovu0mbd7d80cn"},{"name":"Self","_id":"clpg1hr6a005uvu0m6h4z4u3g"},{"name":"self","_id":"clpg1hr6b0060vu0ma4kk782o"},{"name":"Optional","_id":"clpg1hr6c0065vu0m4snf37q2"},{"name":"random","_id":"clpg1hr6c0069vu0m1eoe85qy"},{"name":"errors","_id":"clpg1hr6d006evu0mh8bx915u"},{"name":"exceptions","_id":"clpg1hr6e006jvu0mezqx999d"},{"name":"lazy","_id":"clpg1hr6f006mvu0mcxca96gy"},{"name":"anonymous","_id":"clpg1hr6f006qvu0m86el1ejg"},{"name":"nsstring","_id":"clpg1hr6g006uvu0m2g8w4w9l"},{"name":"string","_id":"clpg1hr6g0071vu0m5mmagjzt"},{"name":"read-only","_id":"clpg1hr6h0075vu0mgtrm2mz4"},{"name":"computed","_id":"clpg1hr6i007bvu0mfg47fhub"},{"name":"stored","_id":"clpg1hr6j007gvu0me7o36xww"},{"name":"singleton","_id":"clpg1hr6j007kvu0md77jftk6"},{"name":"memory address","_id":"clpg1hr6k007rvu0m3wlhawuh"},{"name":"force unwrapping","_id":"clpg1hr6l007wvu0m8i9c3gdl"},{"name":"Implicitly Unwrapped","_id":"clpg1hr6m0082vu0m2gjwauwo"},{"name":"rethrows","_id":"clpg1hr6m0086vu0m3ibk2157"},{"name":"defer","_id":"clpg1hr6n008cvu0m28ncbtma"},{"name":"final","_id":"clpg1hr6o008hvu0m3pxh52ws"},{"name":"subscript","_id":"clpg1hr6o008nvu0m5dvfabv1"},{"name":"OptionSet","_id":"clpg1hr6p008svu0m19lg7axw"},{"name":"NS_OPTIONS","_id":"clpg1hr6r008xvu0m1ljz73f8"},{"name":"inout","_id":"clpg1hr6r0091vu0m37i22me4"},{"name":"Error","_id":"clpg1hr6s0097vu0m2be4bx9s"},{"name":"NSError","_id":"clpg1hr6t009dvu0mch43hvoj"},{"name":"struct","_id":"clpg1hr6v009rvu0mboxdgo4r"},{"name":"class","_id":"clpg1hr6v009xvu0m148d5p67"},{"name":"performance","_id":"clpg1hr6x00advu0m6l71c26l"},{"name":"initialization","_id":"clpg1hr6z00anvu0m3i681s5g"},{"name":"constructors","_id":"clpg1hr7000arvu0m8uzr4qlv"},{"name":"closures","_id":"clpg1hr7100b1vu0m0j2ee4y3"},{"name":"Closures","_id":"clpg1hr7200b7vu0m2oea7lo0"},{"name":"Capturing","_id":"clpg1hr7200bcvu0m252fe9uc"},{"name":"enumeration","_id":"clpg1hr7300bfvu0m86i615hl"},{"name":"nested","_id":"clpg1hr7400bnvu0mdqnxc1hy"},{"name":"recursive","_id":"clpg1hr7600bwvu0m8r6ub60p"},{"name":"protocol","_id":"clpg1hr7700c0vu0mhid53c1f"},{"name":"associatedtype","_id":"clpg1hr7800c8vu0mdwyw6tzw"},{"name":"map","_id":"clpg1hr7900ccvu0m9ivs0yj3"},{"name":"reduce","_id":"clpg1hr7a00cgvu0m195p182x"},{"name":"filter","_id":"clpg1hr7a00clvu0m1khhfbg3"},{"name":"flatMap","_id":"clpg1hr7b00cpvu0m3ih9gm79"},{"name":"collection","_id":"clpg1hr7c00ctvu0m8ulj4p1v"},{"name":"zip","_id":"clpg1hr7d00czvu0m2zc3hlgl"},{"name":"concurrency","_id":"clpg1hr7d00d6vu0mcqgode3w"},{"name":"async","_id":"clpg1hr7e00dcvu0mg59a1bn0"},{"name":"await","_id":"clpg1hr7f00divu0m5jav5q9h"},{"name":"Continuations","_id":"clpg1hr7f00dmvu0m59x63h3g"},{"name":"task","_id":"clpg1hr7g00dsvu0mholj1v8c"},{"name":"actor","_id":"clpg1hr7h00dxvu0mbqzkfpfy"},{"name":"Sendable","_id":"clpg1hr7h00e3vu0mbwe39mxp"},{"name":"Structured Concurrency","_id":"clpg1hr7i00e8vu0mbkdzcbac"},{"name":"hybrid","_id":"clpg1hr7j00edvu0mcmzlfb2w"},{"name":"macro","_id":"clpg1hr7l00ehvu0mfq1f26dl"},{"name":"nil","_id":"clpg1hr7l00ekvu0m2e4m05yk"},{"name":"memory","_id":"clpg1hr7m00eqvu0mefi083nk"},{"name":"leak","_id":"clpg1hr7m00esvu0m0cky9vxc"},{"name":"crash","_id":"clpg1hr7n00etvu0mbz4nbq79"},{"name":"Data Persistence","_id":"clpg1hr7n00ewvu0mb4ct8tlj"},{"name":"git","_id":"clpg1hr7n00eyvu0m5nv5ecry"},{"name":"weak network","_id":"clpg1hr7n00f0vu0mclxoh3df"},{"name":"latitude","_id":"clpg1hr7n00f2vu0m22ccep2k"},{"name":"longitude","_id":"clpg1hr7o00f4vu0mabsa4ypq"},{"name":"Geofencing","_id":"clpg1hr7o00f5vu0ma4y30ymy"},{"name":"Restful","_id":"clpg1hr7u00fbvu0m6sxd1gx2"},{"name":"Agile","_id":"clpg1hr7u00fevu0mgizgh9us"},{"name":"waterfall","_id":"clpg1hr7v00fhvu0m9owc7o4i"},{"name":"CI/CDs","_id":"clpg1hr7w00flvu0mhnfg30r8"},{"name":"Jenkins","_id":"clpg1hr7w00fqvu0mdb9y047e"},{"name":"Fastlane","_id":"clpg1hr7w00ftvu0m6d5p1rsy"}]}}